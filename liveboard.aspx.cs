using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using MySql.Data.MySqlClient;
using System.Data;
using System.Windows.Forms;
using System.IO;
using System.Text;
using ClosedXML.Excel;
using System.Configuration;
using System.Web.Services;
using System.Globalization;
using System.Drawing;

public partial class liveboard : System.Web.UI.Page
{
    VehicleDBMgr vdbmngr;
    MySqlCommand cmd;
    private decimal avgrate;
    protected void Page_Load(object sender, EventArgs e)
    {
        if (!Page.IsPostBack)
        {
            if (Session["branch"] == null)
            {
                Response.Redirect("Login.aspx");
            }
            else
            {
                fillplantdetails();
                firstdiv.Style.Add("display", "none");
            }
            //example1.Style.Add("display", "none");
        }
    }
    public void fillplantdetails()
    {
        vdbmngr = new VehicleDBMgr();
        string SalesType = Session["salestype"].ToString();
        string LevelType = Session["LevelType"].ToString();
        string GroupLogin = Session["GroupLogin"].ToString();
        string SelecteType = "";
        SelecteType = ddltype.SelectedItem.Value;
        DataTable Report = new DataTable();
        if (GroupLogin == "1")
        {
            if (GroupLogin == "1")
            {
                if (SelecteType == "Vyshnavi Group")
                {
                    Report.Columns.Add("Sno");
                    Report.Columns.Add("BranchName");
                    DataRow newrow = Report.NewRow();
                    newrow["BranchName"] = "GroupWise";
                    newrow["sno"] = "8009";
                    Report.Rows.Add(newrow);
                    DataRow newrow1 = Report.NewRow();
                    newrow1["BranchName"] = "SVDS";
                    newrow1["sno"] = "8012";
                    Report.Rows.Add(newrow1);
                    DataRow newrow2 = Report.NewRow();
                    newrow2["BranchName"] = "SVF";
                    newrow2["sno"] = "8013";
                    Report.Rows.Add(newrow2);
                    if (Report.Rows.Count > 0)
                    {
                        ddlPlant.DataSource = Report;
                        ddlPlant.DataValueField = "sno";
                        ddlPlant.DataTextField = "BranchName";
                        ddlPlant.DataBind();
                    }
                }
                else if (SelecteType == "SVDS")
                {

                    cmd = new MySqlCommand("SELECT  branchdata.BranchName, branchdata.sno FROM  branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno WHERE (branchmappingtable.SuperBranch = @Branchid)");
                    cmd.Parameters.AddWithValue("@Branchid", "8012");
                    DataTable dtBranch = vdbmngr.SelectQuery(cmd).Tables[0];
                    if (dtBranch.Rows.Count > 0)
                    {
                        ddlPlant.DataSource = dtBranch;
                        ddlPlant.DataValueField = "sno";
                        ddlPlant.DataTextField = "BranchName";
                        ddlPlant.DataBind();
                    }
                }
                else if (SelecteType == "SVF")
                {
                    cmd = new MySqlCommand("SELECT  branchdata.BranchName, branchdata.sno FROM  branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno WHERE (branchmappingtable.SuperBranch = @Branchid)");
                    cmd.Parameters.AddWithValue("@Branchid", "8013");
                    DataTable dtBranch = vdbmngr.SelectQuery(cmd).Tables[0];
                    if (dtBranch.Rows.Count > 0)
                    {
                        ddlPlant.DataSource = dtBranch;
                        ddlPlant.DataValueField = "sno";
                        ddlPlant.DataTextField = "BranchName";
                        ddlPlant.DataBind();
                    }
                }
            }
        }
        else if (LevelType == "Admin" || LevelType == "MAdmin")
        {
            cmd = new MySqlCommand("SELECT sno, BranchName, SalesType FROM branchdata WHERE sno=@branchid and flag=@flag");
            cmd.Parameters.AddWithValue("@branchid", Session["branch"].ToString());
            cmd.Parameters.AddWithValue("@flag", "1");
            DataTable dtBranch = vdbmngr.SelectQuery(cmd).Tables[0];
            if (dtBranch.Rows.Count > 0)
            {
                ddlPlant.DataSource = dtBranch;
                ddlPlant.DataValueField = "sno";
                ddlPlant.DataTextField = "BranchName";
                ddlPlant.DataBind();
            }
        }
    }
    private DateTime GetLowDate(DateTime dt)
    {
        double Hour, Min, Sec;
        DateTime DT = DateTime.Now;
        DT = dt;
        Hour = -dt.Hour;
        Min = -dt.Minute;
        Sec = -dt.Second;
        DT = DT.AddHours(Hour);
        DT = DT.AddMinutes(Min);
        DT = DT.AddSeconds(Sec);
        return DT;

    }
    private DateTime GetHighDate(DateTime dt)
    {
        double Hour, Min, Sec;
        DateTime DT = DateTime.Now;
        Hour = 23 - dt.Hour;
        Min = 59 - dt.Minute;
        Sec = 59 - dt.Second;
        DT = dt;
        DT = DT.AddHours(Hour);
        DT = DT.AddMinutes(Min);
        DT = DT.AddSeconds(Sec);
        return DT;
    }
    protected void btnsubmit_click(object sender, EventArgs e)
    {
        try
        {

            firstdiv.Style.Add("display", "block");
            vdbmngr = new VehicleDBMgr();
            string BranchID = ddlPlant.SelectedItem.Value; ;
            string Type = ddltype.SelectedItem.Value;
            string DataType = ddlDataType.SelectedItem.Value;
            Session["ClickedBranchid"] = BranchID;
            string barnchCategory = ddlbarnchCategory.SelectedItem.Value;
            if (barnchCategory == "BranchWiseCollections")
            {
                DataType = "Value";
                hsalevalue.Visible = true;
                hduevalue.Visible = true;
                spnamount.Visible = true;
                lbldispatchqty.Visible = false;
                lblSvfdispatch.Visible = false;
                lblSvdsdispatch.Visible = false;
            }
            else if (barnchCategory == "BranchWiseDespatch")
            {
                lbldispatchqty.Visible = true;
                lblSvfdispatch.Visible = true;
                lblSvdsdispatch.Visible = true;
                hsalevalue.Visible = false;
                hduevalue.Visible = false;
                spnamount.Visible = false;
            }

            string s = Session["IndDate"].ToString();
            var dt = DateTime.ParseExact(s, "ddd MMM dd yyyy HH:mm:ss 'GMT'zzz", System.Globalization.CultureInfo.InvariantCulture);
            string IndDate = dt.ToString("yyyy-MM-dd");
            DateTime ServerDateCurrentdate = Convert.ToDateTime(IndDate);
            DateTime Selecteddate = ServerDateCurrentdate.AddDays(-1);
            string edate = Session["Todate"].ToString();
            var edt = DateTime.ParseExact(edate, "ddd MMM dd yyyy HH:mm:ss 'GMT'zzz", System.Globalization.CultureInfo.InvariantCulture);
            string Tdate = edt.ToString("yyyy-MM-dd");
            DateTime ToDate = Convert.ToDateTime(Tdate);
            DateTime Selectedtodate = ToDate.AddDays(-1);


            lblfromdate.Text = ServerDateCurrentdate.ToString("dd/MM/yyyy");
            lbltodate.Text = ToDate.ToString("dd/MM/yyyy");
            Label1.Text = ServerDateCurrentdate.ToString("dd/MM/yyyy");
            Label2.Text = ToDate.ToString("dd/MM/yyyy");
            Label3.Text = ServerDateCurrentdate.ToString("dd/MM/yyyy");
            Label4.Text = ToDate.ToString("dd/MM/yyyy");
            Label5.Text = ServerDateCurrentdate.ToString("dd/MM/yyyy");
            Label6.Text = ToDate.ToString("dd/MM/yyyy");
            Label7.Text = ServerDateCurrentdate.ToString("dd/MM/yyyy");
            Label8.Text = ToDate.ToString("dd/MM/yyyy");
            Label9.Text = ServerDateCurrentdate.ToString("dd/MM/yyyy");
            Label10.Text = ToDate.ToString("dd/MM/yyyy");
            Label11.Text = ServerDateCurrentdate.ToString("dd/MM/yyyy");
            Label12.Text = ToDate.ToString("dd/MM/yyyy");
            Label13.Text = ServerDateCurrentdate.ToString("dd/MM/yyyy");
            Label14.Text = ToDate.ToString("dd/MM/yyyy");
            Label15.Text = ServerDateCurrentdate.ToString("dd/MM/yyyy");
            Label16.Text = ToDate.ToString("dd/MM/yyyy");
            Label17.Text = ServerDateCurrentdate.ToString("dd/MM/yyyy");
            Label18.Text = ToDate.ToString("dd/MM/yyyy");
            Label19.Text = ServerDateCurrentdate.ToString("dd/MM/yyyy");
            Label20.Text = ToDate.ToString("dd/MM/yyyy");
            Label21.Text = ServerDateCurrentdate.ToString("dd/MM/yyyy");
            Label22.Text = ToDate.ToString("dd/MM/yyyy");
            Label23.Text = ServerDateCurrentdate.ToString("dd/MM/yyyy");
            Label24.Text = ToDate.ToString("dd/MM/yyyy");
            Label25.Text = ServerDateCurrentdate.ToString("dd/MM/yyyy");
            Label26.Text = ToDate.ToString("dd/MM/yyyy");

            Label27.Text = ServerDateCurrentdate.ToString("dd/MM/yyyy");
            Label28.Text = ToDate.ToString("dd/MM/yyyy");

            Label29.Text = ServerDateCurrentdate.ToString("dd/MM/yyyy");
            Label30.Text = ToDate.ToString("dd/MM/yyyy");

            Label31.Text = ServerDateCurrentdate.ToString("dd/MM/yyyy");
            Label32.Text = ToDate.ToString("dd/MM/yyyy");
            Label33.Text = ServerDateCurrentdate.ToString("dd/MM/yyyy");
            Label34.Text = ToDate.ToString("dd/MM/yyyy");

            Label35.Text = ServerDateCurrentdate.ToString("dd/MM/yyyy");
            Label36.Text = ToDate.ToString("dd/MM/yyyy");
            Label37.Text = ServerDateCurrentdate.ToString("dd/MM/yyyy");
            Label38.Text = ToDate.ToString("dd/MM/yyyy");


            Label39.Text = ServerDateCurrentdate.ToString("dd/MM/yyyy");
            Label40.Text = ToDate.ToString("dd/MM/yyyy");
            Label41.Text = ServerDateCurrentdate.ToString("dd/MM/yyyy");
            Label42.Text = ToDate.ToString("dd/MM/yyyy");
            Label43.Text = ServerDateCurrentdate.ToString("dd/MM/yyyy");
            Label44.Text = ToDate.ToString("dd/MM/yyyy");
            Label45.Text = ServerDateCurrentdate.ToString("dd/MM/yyyy");
            Label46.Text = ToDate.ToString("dd/MM/yyyy");

            Label47.Text = ServerDateCurrentdate.ToString();
            Label48.Text = ToDate.ToString();


            DataTable dtTotalDispatches = new DataTable();
            dtTotalDispatches.Columns.Add("sno");
            dtTotalDispatches.Columns.Add("BranchID");
            dtTotalDispatches.Columns.Add("BranchName");
            dtTotalDispatches.Columns.Add("Total Indent");
            dtTotalDispatches.Columns.Add("AvgRate");
            dtTotalDispatches.Columns.Add("TotalDispatch").DataType = typeof(Double);
            dtTotalDispatches.Columns.Add("TotalSale").DataType = typeof(Double);
            dtTotalDispatches.Columns.Add("SaleValueinRs").DataType = typeof(Double);
            dtTotalDispatches.Columns.Add("TotalCollection").DataType = typeof(Double);
            dtTotalDispatches.Columns.Add("TotalDue").DataType = typeof(Double);
            dtTotalDispatches.Columns.Add("Total Leaks In Ltrs");
            dtTotalDispatches.Columns.Add("Total VLeaks In Ltrs");
            dtTotalDispatches.Columns.Add("Total Returns in Ltrs");
            dtTotalDispatches.Columns.Add("Total VReturns in Ltrs");
            dtTotalDispatches.Columns.Add("Total Short in Ltrs");
            dtTotalDispatches.Columns.Add("Total Free in Ltrs");
            dtTotalDispatches.Columns.Add("Crates Issued");
            dtTotalDispatches.Columns.Add("Crates Return");
            dtTotalDispatches.Columns.Add("Cans Issued");
            dtTotalDispatches.Columns.Add("Cans Return");
            dtTotalDispatches.Columns.Add("Opp Stock");
            dtTotalDispatches.Columns.Add("Clo Stock");
            dtTotalDispatches.Columns.Add("cmpid");
            int i = 1;
            DataTable dtDispatchesbranches = new DataTable();
            DataTable dtbranches_indent_sale = new DataTable();
            DataTable dtbranches_leaksreturns = new DataTable();
            DataTable dtOpp = new DataTable();
            DataTable dtClo = new DataTable();
            DataTable dtCollectionamount = new DataTable();
            DataTable tempbranchindentsale = new DataTable();
            DataTable tempbranchopening = new DataTable();
            DataTable tempbranchclosing = new DataTable();
            DataTable tempbranchcollection = new DataTable();
            DataTable tempplantDispatchqty = new DataTable();
            DataTable dtDispatchMilkQty = new DataTable();
            //DataTable dtDispatchMilkQty = new DataTable();
            //DataTable dtDispatchMilkQty = new DataTable();

            string SalesType = Session["salestype"].ToString();
            if (BranchID == "8009")
            {
                cmd = new MySqlCommand("SELECT  branchmappingtable.SubBranch, branchmappingtable.SuperBranch, branchmappingtable.SubBranch AS Expr1, branchdata.BranchName,branchdata.SalesType FROM  branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno WHERE  (branchmappingtable.SuperBranch = @Branchid) GROUP BY branchmappingtable.SubBranch ORDER BY companyname, branchmappingtable.SubBranch");
                cmd.Parameters.AddWithValue("@Branchid", BranchID);
                DataTable BtGroupBranches = vdbmngr.SelectQuery(cmd).Tables[0];
                if (DataType == "Quantity")
                {
                    cmd = new MySqlCommand("SELECT    TripInfo.Sno, ProductInfo.Categoryname, ROUND(SUM(ProductInfo.Qty) ) AS dispatchqty, TripInfo.I_Date, ProductInfo.CatSno, TripInfo.BranchName, TripInfo.BranchID, TripInfo.Branch_Id, TripInfo.GroupId,TripInfo.CompanyId FROM (SELECT tripdata.Sno, tripdata.I_Date, branchdata_1.BranchName, dispatch.BranchID, dispatch.Branch_Id, dispatch.GroupId, dispatch.CompanyId FROM  branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE (dispatch.GroupId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT Categoryname, Sno, Qty, CatSno FROM (SELECT  products_category.sno AS CatSno, products_category.Categoryname, tripdata_1.Sno, tripsubdata.Qty FROM tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno INNER JOIN productsdata ON tripsubdata.ProductId = productsdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno WHERE (tripdata_1.AssignDate BETWEEN @d1 AND @d2)) TripSubInfo) ProductInfo ON TripInfo.Sno = ProductInfo.Sno GROUP BY TripInfo.Branch_Id ORDER BY TripInfo.CompanyId");
                    // cmd = new MySqlCommand("SELECT   dispatch.sno, branchdata.BranchName, dispatch.Branch_Id, dispatch.BranchID, ROUND(SUM(tripsubdata.Qty),2) AS dispatchqty FROM dispatch INNER JOIN branchdata ON dispatch.Branch_Id = branchdata.sno INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN (SELECT  Sno, I_Date FROM tripdata WHERE  (AssignDate BETWEEN @d1 AND @d2)) tripdat ON triproutes.Tripdata_sno = tripdat.Sno INNER JOIN tripsubdata ON tripdat.Sno = tripsubdata.Tripdata_sno WHERE (dispatch.GroupId  = @branchid)  GROUP BY dispatch.Branch_Id");
                    cmd.Parameters.AddWithValue("@branch", BranchID);
                    cmd.Parameters.AddWithValue("@d1", GetLowDate(Selecteddate));
                    cmd.Parameters.AddWithValue("@d2", GetHighDate(Selectedtodate));
                    dtDispatchesbranches = vdbmngr.SelectQuery(cmd).Tables[0];
                    foreach (DataRow drgrbranch in BtGroupBranches.Rows)
                    {
                        if (drgrbranch["SubBranch"].ToString() == "172")
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS salevalue, branchmappingtable.SuperBranch FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo  WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch NOT IN (538, 1801, 3625)) GROUP BY branchmappingtable.SuperBranch");
                            //cmd = new MySqlCommand("SELECT  SubBranch, ROUND(SUM(DeliveryQty) ) AS DeliveryQty, ROUND(SUM(DeliveryQty * UnitCost) ) AS salevalue, SuperBranch FROM  (SELECT  t1.SubBranch, t1.SuperBranch, t2.DeliveryQty, t2.unitQty, t2.UnitCost FROM (SELECT branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch FROM  branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch WHERE (branchmappingtable_1.SuperBranch = @branchid) AND (branchmappingtable_1.SubBranch NOT IN(2,2749,2948,538,3625)) GROUP BY branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch) t1 LEFT OUTER JOIN (SELECT  indents_subtable.DeliveryQty, indents_subtable.unitQty, indents_subtable.UnitCost, branchmappingtable_2.SuperBranch, branchmappingtable_2.SubBranch FROM   branchmappingtable branchmappingtable_2 INNER JOIN (SELECT  IndentNo, Branch_id, I_date FROM   indents WHERE  (I_date BETWEEN @d1 AND @d2)) ind ON branchmappingtable_2.SubBranch = ind.Branch_id INNER JOIN indents_subtable ON ind.IndentNo = indents_subtable.IndentNo) t2 ON t2.SuperBranch = t1.SubBranch) derivedtbl_1 GROUP BY SuperBranch");
                            cmd.Parameters.AddWithValue("@BranchID", drgrbranch["SubBranch"].ToString());
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(Selecteddate));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(Selectedtodate));
                            tempbranchindentsale = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else if (drgrbranch["SubBranch"].ToString() == "3625")
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS salevalue, branchmappingtable.SuperBranch FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo  WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) GROUP BY branchmappingtable.SuperBranch");
                            //cmd = new MySqlCommand("SELECT  SubBranch, ROUND(SUM(DeliveryQty) ) AS DeliveryQty,  ROUND(SUM(DeliveryQty * UnitCost) ) AS salevalue, SuperBranch FROM  (SELECT  t1.SubBranch, t1.SuperBranch, t2.DeliveryQty, t2.unitQty, t2.UnitCost FROM (SELECT branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch FROM  branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch WHERE (branchmappingtable_1.SuperBranch = @branchid) AND (branchmappingtable_1.SubBranch IN(4609,3625)) GROUP BY branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch) t1 LEFT OUTER JOIN (SELECT  indents_subtable.DeliveryQty, indents_subtable.unitQty, indents_subtable.UnitCost, branchmappingtable_2.SuperBranch, branchmappingtable_2.SubBranch FROM   branchmappingtable branchmappingtable_2 INNER JOIN (SELECT  IndentNo, Branch_id, I_date FROM   indents WHERE  (I_date BETWEEN @d1 AND @d2)) ind ON branchmappingtable_2.SubBranch = ind.Branch_id INNER JOIN indents_subtable ON ind.IndentNo = indents_subtable.IndentNo) t2 ON t2.SuperBranch = t1.SubBranch) derivedtbl_1 GROUP BY SuperBranch");
                            cmd.Parameters.AddWithValue("@BranchID", drgrbranch["SubBranch"].ToString());
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(Selecteddate));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(Selectedtodate));
                            tempbranchindentsale = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else if (drgrbranch["SubBranch"].ToString() == "1801")
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS salevalue, branchmappingtable.SuperBranch FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo  WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) GROUP BY branchmappingtable.SuperBranch");

                            //cmd = new MySqlCommand("SELECT  SubBranch, ROUND(SUM(DeliveryQty) ) AS DeliveryQty,  ROUND(SUM(DeliveryQty * UnitCost) ) AS salevalue, SuperBranch FROM  (SELECT  t1.SubBranch, t1.SuperBranch, t2.DeliveryQty, t2.unitQty, t2.UnitCost FROM (SELECT branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch FROM  branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch WHERE (branchmappingtable_1.SuperBranch = @branchid) GROUP BY branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch) t1 LEFT OUTER JOIN (SELECT  indents_subtable.DeliveryQty, indents_subtable.unitQty, indents_subtable.UnitCost, branchmappingtable_2.SuperBranch, branchmappingtable_2.SubBranch FROM   branchmappingtable branchmappingtable_2 INNER JOIN (SELECT  IndentNo, Branch_id, I_date FROM   indents WHERE  (I_date BETWEEN @d1 AND @d2)) ind ON branchmappingtable_2.SubBranch = ind.Branch_id INNER JOIN indents_subtable ON ind.IndentNo = indents_subtable.IndentNo) t2 ON t2.SuperBranch = t1.SubBranch) derivedtbl_1 GROUP BY SuperBranch");
                            cmd.Parameters.AddWithValue("@BranchID", drgrbranch["SubBranch"].ToString());
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(Selecteddate));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(Selectedtodate));
                            tempbranchindentsale = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else if (drgrbranch["SubBranch"].ToString() == "158")
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS salevalue, branchmappingtable.SuperBranch FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch NOT IN (159,4626)) GROUP BY branchmappingtable.SuperBranch");
                            //cmd = new MySqlCommand("SELECT  SubBranch, ROUND(SUM(DeliveryQty) ) AS DeliveryQty,  ROUND(SUM(DeliveryQty * UnitCost) ) AS salevalue, SuperBranch FROM  (SELECT  t1.SubBranch, t1.SuperBranch, t2.DeliveryQty, t2.unitQty, t2.UnitCost FROM (SELECT branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch FROM  branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch WHERE (branchmappingtable_1.SuperBranch = @branchid) GROUP BY branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch) t1 LEFT OUTER JOIN (SELECT  indents_subtable.DeliveryQty, indents_subtable.unitQty, indents_subtable.UnitCost, branchmappingtable_2.SuperBranch, branchmappingtable_2.SubBranch FROM   branchmappingtable branchmappingtable_2 INNER JOIN (SELECT  IndentNo, Branch_id, I_date FROM   indents WHERE  (I_date BETWEEN @d1 AND @d2)) ind ON branchmappingtable_2.SubBranch = ind.Branch_id INNER JOIN indents_subtable ON ind.IndentNo = indents_subtable.IndentNo) t2 ON t2.SuperBranch = t1.SubBranch) derivedtbl_1 GROUP BY SuperBranch");
                            cmd.Parameters.AddWithValue("@BranchID", drgrbranch["SubBranch"].ToString());
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(Selecteddate));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(Selectedtodate));
                            tempbranchindentsale = vdbmngr.SelectQuery(cmd).Tables[0];

                            cmd = new MySqlCommand("SELECT  ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty)) AS salevalue, indents_subtable.UnitCost, branchmappingtable.SuperBranch FROM (SELECT  IndentNo, Branch_id, I_date, Status, IndentType FROM  indents WHERE (I_date BETWEEN @d1 AND @d2) AND (Status <> 'D')) indent INNER JOIN branchdata ON indent.Branch_id = branchdata.sno INNER JOIN indents_subtable ON indent.IndentNo = indents_subtable.IndentNo INNER JOIN branchmappingtable ON branchdata.sno = branchmappingtable.SubBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable.SuperBranch = branchdata_1.sno WHERE (branchmappingtable.SuperBranch = @BranchID) AND (indents_subtable.DeliveryQty <> 0) GROUP BY branchmappingtable.SuperBranch ORDER BY branchdata.BranchName");
                            //cmd = new MySqlCommand("SELECT  SubBranch, ROUND(SUM(DeliveryQty) ) AS DeliveryQty,  ROUND(SUM(DeliveryQty * UnitCost) ) AS salevalue, SuperBranch FROM  (SELECT  t1.SubBranch, t1.SuperBranch, t2.DeliveryQty, t2.unitQty, t2.UnitCost FROM (SELECT branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch FROM  branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch WHERE (branchmappingtable_1.SuperBranch = @branchid) GROUP BY branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch) t1 LEFT OUTER JOIN (SELECT  indents_subtable.DeliveryQty, indents_subtable.unitQty, indents_subtable.UnitCost, branchmappingtable_2.SuperBranch, branchmappingtable_2.SubBranch FROM   branchmappingtable branchmappingtable_2 INNER JOIN (SELECT  IndentNo, Branch_id, I_date FROM   indents WHERE  (I_date BETWEEN @d1 AND @d2)) ind ON branchmappingtable_2.SubBranch = ind.Branch_id INNER JOIN indents_subtable ON ind.IndentNo = indents_subtable.IndentNo) t2 ON t2.SuperBranch = t1.SubBranch) derivedtbl_1 GROUP BY SuperBranch");
                            cmd.Parameters.AddWithValue("@BranchID", drgrbranch["SubBranch"].ToString());
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(Selecteddate));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(Selectedtodate));
                            DataTable temptable = vdbmngr.SelectQuery(cmd).Tables[0];
                            tempbranchindentsale.Merge(temptable);
                        }
                        else
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS salevalue, branchmappingtable.SuperBranch FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) GROUP BY branchmappingtable.SuperBranch");
                            //cmd = new MySqlCommand("SELECT  SubBranch, ROUND(SUM(DeliveryQty) ) AS DeliveryQty,  ROUND(SUM(DeliveryQty * UnitCost) ) AS salevalue, SuperBranch FROM  (SELECT  t1.SubBranch, t1.SuperBranch, t2.DeliveryQty, t2.unitQty, t2.UnitCost FROM (SELECT branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch FROM  branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch WHERE (branchmappingtable_1.SuperBranch = @branchid) GROUP BY branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch) t1 LEFT OUTER JOIN (SELECT  indents_subtable.DeliveryQty, indents_subtable.unitQty, indents_subtable.UnitCost, branchmappingtable_2.SuperBranch, branchmappingtable_2.SubBranch FROM   branchmappingtable branchmappingtable_2 INNER JOIN (SELECT  IndentNo, Branch_id, I_date FROM   indents WHERE  (I_date BETWEEN @d1 AND @d2)) ind ON branchmappingtable_2.SubBranch = ind.Branch_id INNER JOIN indents_subtable ON ind.IndentNo = indents_subtable.IndentNo) t2 ON t2.SuperBranch = t1.SubBranch) derivedtbl_1 GROUP BY SuperBranch");
                            cmd.Parameters.AddWithValue("@BranchID", drgrbranch["SubBranch"].ToString());
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(Selecteddate));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(Selectedtodate));
                            tempbranchindentsale = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        dtbranches_indent_sale.Merge(tempbranchindentsale);
                    }
                }
                else
                {
                    cmd = new MySqlCommand("SELECT   TripInfo.Sno, ProductInfo.Categoryname, ROUND(SUM(ProductInfo.Qty) ) AS dispatchqty,ROUND(SUM(ProductInfo.Qty*ProductInfo.UnitPrice) ) AS dispatchvalue, TripInfo.I_Date, ProductInfo.CatSno, TripInfo.BranchName, TripInfo.BranchID, TripInfo.Branch_Id, TripInfo.GroupId, TripInfo.CompanyId FROM (SELECT  tripdata.Sno, tripdata.I_Date, branchdata_1.BranchName, dispatch.BranchID, dispatch.Branch_Id, dispatch.GroupId, dispatch.CompanyId FROM  branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE  (dispatch.GroupId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT  Categoryname, Sno, Qty, CatSno,UnitPrice FROM (SELECT  products_category.sno AS CatSno, products_category.Categoryname, tripdata_1.Sno, tripsubdata.Qty,productsdata.UnitPrice FROM  tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno INNER JOIN productsdata ON tripsubdata.ProductId = productsdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno WHERE  (tripdata_1.AssignDate BETWEEN @d1 AND @d2)) TripSubInfo) ProductInfo ON TripInfo.Sno = ProductInfo.Sno GROUP BY TripInfo.Branch_Id ORDER BY TripInfo.CompanyId");
                    // cmd = new MySqlCommand("SELECT   dispatch.sno, branchdata.BranchName, dispatch.Branch_Id, dispatch.BranchID, ROUND(SUM(tripsubdata.Qty),2) AS dispatchqty FROM dispatch INNER JOIN branchdata ON dispatch.Branch_Id = branchdata.sno INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN (SELECT  Sno, I_Date FROM tripdata WHERE  (AssignDate BETWEEN @d1 AND @d2)) tripdat ON triproutes.Tripdata_sno = tripdat.Sno INNER JOIN tripsubdata ON tripdat.Sno = tripsubdata.Tripdata_sno WHERE (dispatch.GroupId  = @branchid)  GROUP BY dispatch.Branch_Id");
                    cmd.Parameters.AddWithValue("@branch", BranchID);
                    cmd.Parameters.AddWithValue("@d1", GetLowDate(Selecteddate));
                    cmd.Parameters.AddWithValue("@d2", GetHighDate(Selectedtodate));
                    dtDispatchesbranches = vdbmngr.SelectQuery(cmd).Tables[0];
                    foreach (DataRow drgrbranch in BtGroupBranches.Rows)
                    {
                        if (drgrbranch["SubBranch"].ToString() == "172")
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS salevalue, branchmappingtable.SuperBranch FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo  WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch NOT IN (538 , 1801, 3625)) GROUP BY branchmappingtable.SuperBranch");

                            //cmd = new MySqlCommand("SELECT  SubBranch, ROUND(SUM(DeliveryQty) ) AS DeliveryQty, ROUND(SUM(DeliveryQty * UnitCost) ) AS salevalue, SuperBranch FROM  (SELECT  t1.SubBranch, t1.SuperBranch, t2.DeliveryQty, t2.unitQty, t2.UnitCost FROM (SELECT branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch FROM  branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch WHERE (branchmappingtable_1.SuperBranch = @branchid) AND (branchmappingtable_1.SubBranch NOT IN(2,2749,2948,538,3625)) GROUP BY branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch) t1 LEFT OUTER JOIN (SELECT  indents_subtable.DeliveryQty, indents_subtable.unitQty, indents_subtable.UnitCost, branchmappingtable_2.SuperBranch, branchmappingtable_2.SubBranch FROM   branchmappingtable branchmappingtable_2 INNER JOIN (SELECT  IndentNo, Branch_id, I_date FROM   indents WHERE  (I_date BETWEEN @d1 AND @d2)) ind ON branchmappingtable_2.SubBranch = ind.Branch_id INNER JOIN indents_subtable ON ind.IndentNo = indents_subtable.IndentNo) t2 ON t2.SuperBranch = t1.SubBranch) derivedtbl_1 GROUP BY SuperBranch");
                            cmd.Parameters.AddWithValue("@BranchID", drgrbranch["SubBranch"].ToString());
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(Selecteddate));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(Selectedtodate));
                            tempbranchindentsale = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else if (drgrbranch["SubBranch"].ToString() == "3625")
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS salevalue, branchmappingtable.SuperBranch FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo  WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) GROUP BY branchmappingtable.SuperBranch");

                            //cmd = new MySqlCommand("SELECT  SubBranch, ROUND(SUM(DeliveryQty) ) AS DeliveryQty,  ROUND(SUM(DeliveryQty * UnitCost) ) AS salevalue, SuperBranch FROM  (SELECT  t1.SubBranch, t1.SuperBranch, t2.DeliveryQty, t2.unitQty, t2.UnitCost FROM (SELECT branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch FROM  branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch WHERE (branchmappingtable_1.SuperBranch = @branchid) AND (branchmappingtable_1.SubBranch IN(4609,3625)) GROUP BY branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch) t1 LEFT OUTER JOIN (SELECT  indents_subtable.DeliveryQty, indents_subtable.unitQty, indents_subtable.UnitCost, branchmappingtable_2.SuperBranch, branchmappingtable_2.SubBranch FROM   branchmappingtable branchmappingtable_2 INNER JOIN (SELECT  IndentNo, Branch_id, I_date FROM   indents WHERE  (I_date BETWEEN @d1 AND @d2)) ind ON branchmappingtable_2.SubBranch = ind.Branch_id INNER JOIN indents_subtable ON ind.IndentNo = indents_subtable.IndentNo) t2 ON t2.SuperBranch = t1.SubBranch) derivedtbl_1 GROUP BY SuperBranch");
                            cmd.Parameters.AddWithValue("@BranchID", drgrbranch["SubBranch"].ToString());
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(Selecteddate));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(Selectedtodate));
                            tempbranchindentsale = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else if (drgrbranch["SubBranch"].ToString() == "1801")
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty)) AS DeliveryQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS salevalue, branchmappingtable.SuperBranch FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo  WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) GROUP BY branchmappingtable.SuperBranch");

                            //cmd = new MySqlCommand("SELECT  SubBranch, ROUND(SUM(DeliveryQty) ) AS DeliveryQty,  ROUND(SUM(DeliveryQty * UnitCost) ) AS salevalue, SuperBranch FROM  (SELECT  t1.SubBranch, t1.SuperBranch, t2.DeliveryQty, t2.unitQty, t2.UnitCost FROM (SELECT branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch FROM  branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch WHERE (branchmappingtable_1.SuperBranch = @branchid) GROUP BY branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch) t1 LEFT OUTER JOIN (SELECT  indents_subtable.DeliveryQty, indents_subtable.unitQty, indents_subtable.UnitCost, branchmappingtable_2.SuperBranch, branchmappingtable_2.SubBranch FROM   branchmappingtable branchmappingtable_2 INNER JOIN (SELECT  IndentNo, Branch_id, I_date FROM   indents WHERE  (I_date BETWEEN @d1 AND @d2)) ind ON branchmappingtable_2.SubBranch = ind.Branch_id INNER JOIN indents_subtable ON ind.IndentNo = indents_subtable.IndentNo) t2 ON t2.SuperBranch = t1.SubBranch) derivedtbl_1 GROUP BY SuperBranch");
                            cmd.Parameters.AddWithValue("@BranchID", drgrbranch["SubBranch"].ToString());
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(Selecteddate));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(Selectedtodate));
                            tempbranchindentsale = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else if (drgrbranch["SubBranch"].ToString() == "158")
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty)) AS DeliveryQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty)) AS salevalue, branchmappingtable.SuperBranch FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch NOT IN (159,4626)) GROUP BY branchmappingtable.SuperBranch");
                            //cmd = new MySqlCommand("SELECT  SubBranch, ROUND(SUM(DeliveryQty) ) AS DeliveryQty,  ROUND(SUM(DeliveryQty * UnitCost) ) AS salevalue, SuperBranch FROM  (SELECT  t1.SubBranch, t1.SuperBranch, t2.DeliveryQty, t2.unitQty, t2.UnitCost FROM (SELECT branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch FROM  branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch WHERE (branchmappingtable_1.SuperBranch = @branchid) GROUP BY branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch) t1 LEFT OUTER JOIN (SELECT  indents_subtable.DeliveryQty, indents_subtable.unitQty, indents_subtable.UnitCost, branchmappingtable_2.SuperBranch, branchmappingtable_2.SubBranch FROM   branchmappingtable branchmappingtable_2 INNER JOIN (SELECT  IndentNo, Branch_id, I_date FROM   indents WHERE  (I_date BETWEEN @d1 AND @d2)) ind ON branchmappingtable_2.SubBranch = ind.Branch_id INNER JOIN indents_subtable ON ind.IndentNo = indents_subtable.IndentNo) t2 ON t2.SuperBranch = t1.SubBranch) derivedtbl_1 GROUP BY SuperBranch");
                            cmd.Parameters.AddWithValue("@BranchID", drgrbranch["SubBranch"].ToString());
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(Selecteddate));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(Selectedtodate));
                            tempbranchindentsale = vdbmngr.SelectQuery(cmd).Tables[0];

                            cmd = new MySqlCommand("SELECT  ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty)) AS salevalue, indents_subtable.UnitCost, branchmappingtable.SuperBranch FROM (SELECT  IndentNo, Branch_id, I_date, Status, IndentType FROM  indents WHERE (I_date BETWEEN @d1 AND @d2) AND (Status <> 'D')) indent INNER JOIN branchdata ON indent.Branch_id = branchdata.sno INNER JOIN indents_subtable ON indent.IndentNo = indents_subtable.IndentNo INNER JOIN branchmappingtable ON branchdata.sno = branchmappingtable.SubBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable.SuperBranch = branchdata_1.sno WHERE (branchmappingtable.SuperBranch = @BranchID) AND (indents_subtable.DeliveryQty <> 0) GROUP BY branchmappingtable.SuperBranch ORDER BY branchdata.BranchName");
                            //cmd = new MySqlCommand("SELECT  SubBranch, ROUND(SUM(DeliveryQty) ) AS DeliveryQty,  ROUND(SUM(DeliveryQty * UnitCost) ) AS salevalue, SuperBranch FROM  (SELECT  t1.SubBranch, t1.SuperBranch, t2.DeliveryQty, t2.unitQty, t2.UnitCost FROM (SELECT branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch FROM  branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch WHERE (branchmappingtable_1.SuperBranch = @branchid) GROUP BY branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch) t1 LEFT OUTER JOIN (SELECT  indents_subtable.DeliveryQty, indents_subtable.unitQty, indents_subtable.UnitCost, branchmappingtable_2.SuperBranch, branchmappingtable_2.SubBranch FROM   branchmappingtable branchmappingtable_2 INNER JOIN (SELECT  IndentNo, Branch_id, I_date FROM   indents WHERE  (I_date BETWEEN @d1 AND @d2)) ind ON branchmappingtable_2.SubBranch = ind.Branch_id INNER JOIN indents_subtable ON ind.IndentNo = indents_subtable.IndentNo) t2 ON t2.SuperBranch = t1.SubBranch) derivedtbl_1 GROUP BY SuperBranch");
                            cmd.Parameters.AddWithValue("@BranchID", drgrbranch["SubBranch"].ToString());
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(Selecteddate));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(Selectedtodate));
                            DataTable temptable = vdbmngr.SelectQuery(cmd).Tables[0];
                            tempbranchindentsale.Merge(temptable);
                        }
                        else
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty)) AS DeliveryQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty)) AS salevalue, branchmappingtable.SuperBranch FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) GROUP BY branchmappingtable.SuperBranch");
                            //cmd = new MySqlCommand("SELECT  SubBranch, ROUND(SUM(DeliveryQty) ) AS DeliveryQty,  ROUND(SUM(DeliveryQty * UnitCost) ) AS salevalue, SuperBranch FROM  (SELECT  t1.SubBranch, t1.SuperBranch, t2.DeliveryQty, t2.unitQty, t2.UnitCost FROM (SELECT branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch FROM  branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch WHERE (branchmappingtable_1.SuperBranch = @branchid) GROUP BY branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch) t1 LEFT OUTER JOIN (SELECT  indents_subtable.DeliveryQty, indents_subtable.unitQty, indents_subtable.UnitCost, branchmappingtable_2.SuperBranch, branchmappingtable_2.SubBranch FROM   branchmappingtable branchmappingtable_2 INNER JOIN (SELECT  IndentNo, Branch_id, I_date FROM   indents WHERE  (I_date BETWEEN @d1 AND @d2)) ind ON branchmappingtable_2.SubBranch = ind.Branch_id INNER JOIN indents_subtable ON ind.IndentNo = indents_subtable.IndentNo) t2 ON t2.SuperBranch = t1.SubBranch) derivedtbl_1 GROUP BY SuperBranch");
                            cmd.Parameters.AddWithValue("@BranchID", drgrbranch["SubBranch"].ToString());
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(Selecteddate));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(Selectedtodate));
                            tempbranchindentsale = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        dtbranches_indent_sale.Merge(tempbranchindentsale);
                    }
                    foreach (DataRow drgrbranch in BtGroupBranches.Rows)
                    {

                        if (drgrbranch["SubBranch"].ToString() == "172")
                        {
                            cmd = new MySqlCommand("SELECT    branchmappingtable.SuperBranch, ROUND(SUM(colltion.AmountPaid) / 2) AS AmountPaid,branchdata.BranchName FROM  branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch INNER JOIN branchdata ON branchmappingtable.SuperBranch = branchdata.sno INNER JOIN modifiedroutes ON branchmappingtable.SubBranch = modifiedroutes.BranchID INNER JOIN (SELECT  RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo INNER JOIN (SELECT  Branchid, AmountPaid, PaidDate FROM  collections WHERE (PaymentType <> 'Incentive') AND (PaymentType <> 'Bank Transfer') AND (PaymentType <> 'Cheque') AND (PaidDate BETWEEN @d1 AND @d2)) colltion ON modifidroutssubtab.BranchID = colltion.Branchid WHERE (branchmappingtable.SuperBranch = @BranchId) AND (branchmappingtable.SubBranch NOT IN (538 , 1801, 3625)) GROUP BY branchmappingtable.SuperBranch");
                            cmd.Parameters.AddWithValue("@BranchID", drgrbranch["SubBranch"].ToString());
                            cmd.Parameters.AddWithValue("@starttime", GetLowDate(Selecteddate).AddDays(1));
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(Selecteddate).AddDays(1));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(Selectedtodate).AddDays(1));
                            tempbranchcollection = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else if (drgrbranch["SubBranch"].ToString() == "3625")
                        {
                            cmd = new MySqlCommand("SELECT    branchmappingtable.SuperBranch, ROUND(SUM(colltion.AmountPaid) / 2) AS AmountPaid,branchdata.BranchName FROM  branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch INNER JOIN branchdata ON branchmappingtable.SuperBranch = branchdata.sno INNER JOIN modifiedroutes ON branchmappingtable.SubBranch = modifiedroutes.BranchID INNER JOIN (SELECT  RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo INNER JOIN (SELECT  Branchid, AmountPaid, PaidDate FROM  collections WHERE (PaymentType <> 'Incentive') AND (PaymentType <> 'Bank Transfer') AND (PaymentType <> 'Cheque') AND (PaidDate BETWEEN @d1 AND @d2)) colltion ON modifidroutssubtab.BranchID = colltion.Branchid WHERE (branchmappingtable.SuperBranch = @BranchId) AND (branchmappingtable.SubBranch IN (4609, 3625)) GROUP BY branchmappingtable.SuperBranch");
                            cmd.Parameters.AddWithValue("@BranchID", drgrbranch["SubBranch"].ToString());
                            cmd.Parameters.AddWithValue("@starttime", GetLowDate(Selecteddate).AddDays(1));
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(Selecteddate).AddDays(1));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(Selectedtodate).AddDays(1));
                            tempbranchcollection = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else if (drgrbranch["SubBranch"].ToString() == "1801")
                        {
                            cmd = new MySqlCommand("SELECT    branchmappingtable.SuperBranch, ROUND(SUM(colltion.AmountPaid) / 4) AS AmountPaid,branchdata.BranchName FROM  branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch INNER JOIN branchdata ON branchmappingtable.SuperBranch = branchdata.sno INNER JOIN modifiedroutes ON branchmappingtable.SubBranch = modifiedroutes.BranchID INNER JOIN (SELECT  RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo INNER JOIN (SELECT  Branchid, AmountPaid, PaidDate FROM  collections WHERE (PaymentType <> 'Incentive') AND (PaymentType <> 'Bank Transfer') AND (PaymentType <> 'Cheque') AND (PaidDate BETWEEN @d1 AND @d2)) colltion ON modifidroutssubtab.BranchID = colltion.Branchid WHERE (branchmappingtable.SuperBranch = @BranchId)  GROUP BY branchmappingtable.SuperBranch");
                            cmd.Parameters.AddWithValue("@BranchID", drgrbranch["SubBranch"].ToString());
                            cmd.Parameters.AddWithValue("@starttime", GetLowDate(Selecteddate).AddDays(1));
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(Selecteddate).AddDays(1));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(Selectedtodate).AddDays(1));
                            tempbranchcollection = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else if (drgrbranch["SubBranch"].ToString() == "158" || drgrbranch["SubBranch"].ToString() == "4626")
                        {
                            cmd = new MySqlCommand("SELECT    branchmappingtable.SuperBranch, ROUND(SUM(colltion.AmountPaid) / 2) AS AmountPaid,branchdata.BranchName FROM  branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch INNER JOIN branchdata ON branchmappingtable.SuperBranch = branchdata.sno INNER JOIN modifiedroutes ON branchmappingtable.SubBranch = modifiedroutes.BranchID INNER JOIN (SELECT  RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo INNER JOIN (SELECT  Branchid, AmountPaid, PaidDate FROM  collections WHERE (PaymentType <> 'Incentive') AND (PaymentType <> 'Bank Transfer') AND (PaymentType <> 'Cheque') AND (PaidDate BETWEEN @d1 AND @d2)) colltion ON modifidroutssubtab.BranchID = colltion.Branchid WHERE (branchmappingtable.SuperBranch = @BranchId)  GROUP BY branchmappingtable.SuperBranch");
                            cmd.Parameters.AddWithValue("@BranchID", drgrbranch["SubBranch"].ToString());
                            cmd.Parameters.AddWithValue("@starttime", GetLowDate(Selecteddate).AddDays(1));
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(Selecteddate).AddDays(1));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(Selectedtodate).AddDays(1));
                            tempbranchcollection = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        dtCollectionamount.Merge(tempbranchcollection);
                    }
                }
            }
            else if (BranchID == "8012" || BranchID == "8013")
            {
                cmd = new MySqlCommand("SELECT  branchmappingtable.SubBranch, branchmappingtable.SuperBranch, branchmappingtable.SubBranch AS Expr1, branchdata.BranchName,branchdata.SalesType FROM  branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno WHERE  (branchmappingtable.SuperBranch = @Branchid) GROUP BY branchmappingtable.SubBranch");
                cmd.Parameters.AddWithValue("@Branchid", BranchID);
                DataTable BtGroupBranches = vdbmngr.SelectQuery(cmd).Tables[0];

                cmd = new MySqlCommand("SELECT   dispatch.sno, branchdata.BranchName, dispatch.Branch_Id, dispatch.BranchID, SUM(tripsubdata.Qty) AS dispatchqty, dispatch.CompanyId FROM dispatch INNER JOIN branchdata ON dispatch.Branch_Id = branchdata.sno INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN (SELECT  Sno, I_Date FROM tripdata WHERE  (AssignDate BETWEEN @d1 AND @d2)) tripdat ON triproutes.Tripdata_sno = tripdat.Sno INNER JOIN tripsubdata ON tripdat.Sno = tripsubdata.Tripdata_sno WHERE (dispatch.CompanyId  = @branchid)  GROUP BY dispatch.Branch_Id");
                //cmd = new MySqlCommand("SELECT dispatch.sno, branchdata.BranchName, dispatch.Branch_Id, dispatch.BranchID, SUM(tripsubdata.Qty) AS dispatchqty,dispatch.Branch_id FROM dispatch INNER JOIN branchdata ON dispatch.BranchID = branchdata.sno INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN (SELECT Sno, I_Date FROM tripdata WHERE (AssignDate BETWEEN @d1 AND @d2)) tripdat ON triproutes.Tripdata_sno = tripdat.Sno INNER JOIN tripsubdata ON tripdat.Sno = tripsubdata.Tripdata_sno WHERE (dispatch.Groupid = @branchid) AND (dispatch.DispType = 'SO') AND ((dispatch.DispMode ='SPL') or (dispatch.DispMode Is null))  GROUP BY dispatch.BranchID");
                cmd.Parameters.AddWithValue("@branchid", BranchID);
                cmd.Parameters.AddWithValue("@d1", GetLowDate(Selecteddate));
                cmd.Parameters.AddWithValue("@d2", GetHighDate(Selectedtodate));
                dtDispatchesbranches = vdbmngr.SelectQuery(cmd).Tables[0];
                //dtDispatchesbranches.Merge(tempplantDispatchqty);
                foreach (DataRow drgrbranch in BtGroupBranches.Rows)
                {
                    cmd = new MySqlCommand("SELECT  SubBranch, ROUND(SUM(DeliveryQty) ) AS DeliveryQty,  ROUND(SUM(DeliveryQty * UnitCost)) AS salevalue, SuperBranch FROM  (SELECT  t1.SubBranch, t1.SuperBranch, t2.DeliveryQty, t2.unitQty, t2.UnitCost FROM (SELECT branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch FROM  branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch WHERE (branchmappingtable_1.SuperBranch = @branchid) GROUP BY branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch) t1 LEFT OUTER JOIN (SELECT  indents_subtable.DeliveryQty, indents_subtable.unitQty, indents_subtable.UnitCost, branchmappingtable_2.SuperBranch, branchmappingtable_2.SubBranch FROM   branchmappingtable branchmappingtable_2 INNER JOIN (SELECT  IndentNo, Branch_id, I_date FROM   indents WHERE  (I_date BETWEEN @d1 AND @d2)) ind ON branchmappingtable_2.SubBranch = ind.Branch_id INNER JOIN indents_subtable ON ind.IndentNo = indents_subtable.IndentNo) t2 ON t2.SuperBranch = t1.SubBranch) derivedtbl_1 GROUP BY SuperBranch");
                    cmd.Parameters.AddWithValue("@branchid", drgrbranch["SubBranch"].ToString());
                    cmd.Parameters.AddWithValue("@d1", GetLowDate(Selecteddate));
                    cmd.Parameters.AddWithValue("@d2", GetHighDate(Selectedtodate));
                    tempbranchindentsale = vdbmngr.SelectQuery(cmd).Tables[0];
                    dtbranches_indent_sale.Merge(tempbranchindentsale);
                }
                foreach (DataRow drgrbranch in BtGroupBranches.Rows)
                {
                    if (drgrbranch["SubBranch"].ToString() == "172")
                    {
                        cmd = new MySqlCommand("SELECT    branchmappingtable.SuperBranch, ROUND(SUM(colltion.AmountPaid) / 2) AS AmountPaid,branchdata.BranchName FROM  branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch INNER JOIN branchdata ON branchmappingtable.SuperBranch = branchdata.sno INNER JOIN modifiedroutes ON branchmappingtable.SubBranch = modifiedroutes.BranchID INNER JOIN (SELECT  RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo INNER JOIN (SELECT  Branchid, AmountPaid, PaidDate FROM  collections WHERE (PaymentType <> 'Incentive') AND (PaymentType <> 'Bank Transfer') AND (PaymentType <> 'Cheque') AND (PaidDate BETWEEN @d1 AND @d2)) colltion ON modifidroutssubtab.BranchID = colltion.Branchid WHERE (branchmappingtable.SuperBranch = @BranchId) AND (branchmappingtable.SubBranch NOT IN (538 , 1801, 3625)) GROUP BY branchmappingtable.SuperBranch");
                        cmd.Parameters.AddWithValue("@BranchID", drgrbranch["SubBranch"].ToString());
                        cmd.Parameters.AddWithValue("@starttime", GetLowDate(Selecteddate).AddDays(1));
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(Selecteddate).AddDays(1));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(Selectedtodate).AddDays(1));
                        tempbranchcollection = vdbmngr.SelectQuery(cmd).Tables[0];
                    }
                    else if (drgrbranch["SubBranch"].ToString() == "3625")
                    {
                        cmd = new MySqlCommand("SELECT    branchmappingtable.SuperBranch, ROUND(SUM(colltion.AmountPaid) / 2) AS AmountPaid,branchdata.BranchName FROM  branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch INNER JOIN branchdata ON branchmappingtable.SuperBranch = branchdata.sno INNER JOIN modifiedroutes ON branchmappingtable.SubBranch = modifiedroutes.BranchID INNER JOIN (SELECT  RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo INNER JOIN (SELECT  Branchid, AmountPaid, PaidDate FROM  collections WHERE (PaymentType <> 'Incentive') AND (PaymentType <> 'Bank Transfer') AND (PaymentType <> 'Cheque') AND (PaidDate BETWEEN @d1 AND @d2)) colltion ON modifidroutssubtab.BranchID = colltion.Branchid WHERE (branchmappingtable.SuperBranch = @BranchId) AND (branchmappingtable.SubBranch IN (4609, 3625)) GROUP BY branchmappingtable.SuperBranch");
                        cmd.Parameters.AddWithValue("@BranchID", drgrbranch["SubBranch"].ToString());
                        cmd.Parameters.AddWithValue("@starttime", GetLowDate(Selecteddate).AddDays(1));
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(Selecteddate).AddDays(1));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(Selectedtodate).AddDays(1));
                        tempbranchcollection = vdbmngr.SelectQuery(cmd).Tables[0];
                    }
                    else if (drgrbranch["SubBranch"].ToString() == "1801")
                    {
                        cmd = new MySqlCommand("SELECT    branchmappingtable.SuperBranch, ROUND(SUM(colltion.AmountPaid) / 4) AS AmountPaid,branchdata.BranchName FROM  branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch INNER JOIN branchdata ON branchmappingtable.SuperBranch = branchdata.sno INNER JOIN modifiedroutes ON branchmappingtable.SubBranch = modifiedroutes.BranchID INNER JOIN (SELECT  RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo INNER JOIN (SELECT  Branchid, AmountPaid, PaidDate FROM  collections WHERE (PaymentType <> 'Incentive') AND (PaymentType <> 'Bank Transfer') AND (PaymentType <> 'Cheque') AND (PaidDate BETWEEN @d1 AND @d2)) colltion ON modifidroutssubtab.BranchID = colltion.Branchid WHERE (branchmappingtable.SuperBranch = @BranchId)  GROUP BY branchmappingtable.SuperBranch");
                        cmd.Parameters.AddWithValue("@BranchID", drgrbranch["SubBranch"].ToString());
                        cmd.Parameters.AddWithValue("@starttime", GetLowDate(Selecteddate).AddDays(1));
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(Selecteddate).AddDays(1));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(Selectedtodate).AddDays(1));
                        tempbranchcollection = vdbmngr.SelectQuery(cmd).Tables[0];
                    }
                    else if (drgrbranch["SubBranch"].ToString() == "158" || drgrbranch["SubBranch"].ToString() == "4626")
                    {
                        cmd = new MySqlCommand("SELECT    branchmappingtable.SuperBranch, ROUND(SUM(colltion.AmountPaid) / 2) AS AmountPaid,branchdata.BranchName FROM  branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch INNER JOIN branchdata ON branchmappingtable.SuperBranch = branchdata.sno INNER JOIN modifiedroutes ON branchmappingtable.SubBranch = modifiedroutes.BranchID INNER JOIN (SELECT  RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo INNER JOIN (SELECT  Branchid, AmountPaid, PaidDate FROM  collections WHERE (PaymentType <> 'Incentive') AND (PaymentType <> 'Bank Transfer') AND (PaymentType <> 'Cheque') AND (PaidDate BETWEEN @d1 AND @d2)) colltion ON modifidroutssubtab.BranchID = colltion.Branchid WHERE (branchmappingtable.SuperBranch = @BranchId)  GROUP BY branchmappingtable.SuperBranch");
                        cmd.Parameters.AddWithValue("@BranchID", drgrbranch["SubBranch"].ToString());
                        cmd.Parameters.AddWithValue("@starttime", GetLowDate(Selecteddate).AddDays(1));
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(Selecteddate).AddDays(1));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(Selectedtodate).AddDays(1));
                        tempbranchcollection = vdbmngr.SelectQuery(cmd).Tables[0];
                    }
                    dtCollectionamount.Merge(tempbranchcollection);
                }
            }
            else if (SalesType == "Plant")
            {
                cmd = new MySqlCommand("SELECT dispatch.sno, branchdata.BranchName, dispatch.Branch_Id, dispatch.BranchID, SUM(tripsubdata.Qty) AS dispatchqty FROM dispatch INNER JOIN branchdata ON dispatch.BranchID = branchdata.sno INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN (SELECT Sno, I_Date FROM tripdata WHERE (AssignDate BETWEEN @d1 AND @d2)) tripdat ON triproutes.Tripdata_sno = tripdat.Sno INNER JOIN tripsubdata ON tripdat.Sno = tripsubdata.Tripdata_sno WHERE (dispatch.Branch_Id = @branchid) AND (dispatch.DispType = 'SO') AND ((dispatch.DispMode ='SPL') or (dispatch.DispMode Is null))  GROUP BY dispatch.BranchID");
                cmd.Parameters.AddWithValue("@branchid", BranchID);
                cmd.Parameters.AddWithValue("@d1", GetLowDate(Selecteddate));
                cmd.Parameters.AddWithValue("@d2", GetHighDate(Selectedtodate));
                dtDispatchesbranches = vdbmngr.SelectQuery(cmd).Tables[0];
                cmd = new MySqlCommand("SELECT  SubBranch, ROUND(SUM(DeliveryQty) ) AS DeliveryQty,  ROUND(SUM(DeliveryQty * UnitCost)) AS salevalue FROM (SELECT t1.SubBranch, t1.SuperBranch, t2.DeliveryQty, t2.unitQty, t2.UnitCost FROM (SELECT branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch FROM branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch WHERE (branchmappingtable_1.SuperBranch = @branchid) GROUP BY branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch) t1 LEFT OUTER JOIN (SELECT indents_subtable.DeliveryQty, indents_subtable.unitQty, indents_subtable.UnitCost, branchmappingtable_2.SuperBranch, branchmappingtable_2.SubBranch FROM branchmappingtable branchmappingtable_2 INNER JOIN (SELECT IndentNo, Branch_id, I_date FROM indents WHERE (I_date BETWEEN @d1 AND @d2)) ind ON branchmappingtable_2.SubBranch = ind.Branch_id INNER JOIN indents_subtable ON ind.IndentNo = indents_subtable.IndentNo) t2 ON t2.SuperBranch = t1.SubBranch) derivedtbl_1 GROUP BY SubBranch");
                cmd.Parameters.AddWithValue("@branchid", BranchID);
                cmd.Parameters.AddWithValue("@d1", GetLowDate(Selecteddate));
                cmd.Parameters.AddWithValue("@d2", GetHighDate(Selectedtodate));
                dtbranches_indent_sale = vdbmngr.SelectQuery(cmd).Tables[0];
            }
            else
            {
                cmd = new MySqlCommand("SELECT dispatch.sno, branchdata.BranchName, dispatch.Branch_Id, dispatch.BranchID, SUM(tripsubdata.Qty) AS dispatchqty FROM dispatch INNER JOIN branchdata ON dispatch.BranchID = branchdata.sno INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN (SELECT Sno, I_Date FROM tripdata WHERE (AssignDate BETWEEN @d1 AND @d2)) tripdat ON triproutes.Tripdata_sno = tripdat.Sno INNER JOIN tripsubdata ON tripdat.Sno = tripsubdata.Tripdata_sno WHERE (dispatch.branchid = @branchid) AND (dispatch.DispType = 'SO') AND ((dispatch.DispMode ='SPL') or (dispatch.DispMode Is null))  GROUP BY dispatch.BranchID");
                cmd.Parameters.AddWithValue("@branchid", BranchID);
                cmd.Parameters.AddWithValue("@d1", GetLowDate(Selecteddate));
                cmd.Parameters.AddWithValue("@d2", GetHighDate(Selectedtodate));
                dtDispatchesbranches = vdbmngr.SelectQuery(cmd).Tables[0];
                cmd = new MySqlCommand("SELECT  SubBranch, ROUND(SUM(DeliveryQty) ) AS DeliveryQty, ROUND(SUM(DeliveryQty * UnitCost)) AS salevalue FROM (SELECT t1.SubBranch, t1.SuperBranch, t2.DeliveryQty, t2.unitQty, t2.UnitCost FROM (SELECT branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch FROM branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch WHERE (branchmappingtable_1.Subbranch = @branchid) GROUP BY branchmappingtable.SubBranch) t1 LEFT OUTER JOIN (SELECT indents_subtable.DeliveryQty, indents_subtable.unitQty, indents_subtable.UnitCost, branchmappingtable_2.SuperBranch, branchmappingtable_2.SubBranch FROM branchmappingtable branchmappingtable_2 INNER JOIN (SELECT IndentNo, Branch_id, I_date FROM indents WHERE (I_date BETWEEN @d1 AND @d2)) ind ON branchmappingtable_2.SubBranch = ind.Branch_id INNER JOIN indents_subtable ON ind.IndentNo = indents_subtable.IndentNo) t2 ON t2.SuperBranch = t1.SubBranch) derivedtbl_1 GROUP BY SubBranch");
                cmd.Parameters.AddWithValue("@branchid", BranchID);
                cmd.Parameters.AddWithValue("@d1", GetLowDate(Selecteddate));
                cmd.Parameters.AddWithValue("@d2", GetHighDate(Selectedtodate));
                dtbranches_indent_sale = vdbmngr.SelectQuery(cmd).Tables[0];
            }
            double SvdsDespatchQty = 0; double SvfDespatchQty = 0;
            double GroupTotDispQty = 0; double GroupTotSaleValue = 0;
            double GroupTotCollectionValue = 0; //double temptotsalevalue = 0;
            foreach (DataRow dr1 in dtDispatchesbranches.Rows)
            {
                DataRow totaldummy = dtTotalDispatches.NewRow();
                totaldummy["sno"] = i;
                totaldummy["BranchID"] = dr1["Branch_id"].ToString();
                totaldummy["BranchName"] = dr1["BranchName"].ToString();
                totaldummy["cmpid"] = dr1["Companyid"].ToString();

                if (dr1["Branch_id"].ToString() == "172" || dr1["Branch_id"].ToString() == "1801" || dr1["Branch_id"].ToString() == "3625")
                {
                    double temp_tdispqtyqty = 0;
                    double.TryParse(dr1["dispatchqty"].ToString(), out temp_tdispqtyqty);
                    double avg_qty = temp_tdispqtyqty / 2;
                    //totaldummy["Total Dispatch"] = Math.Round(avgqty );
                    SvdsDespatchQty += avg_qty;

                }
                if (dr1["Branch_id"].ToString() == "158" || dr1["Branch_id"].ToString() == "4626")
                {
                    double temp_tdispqtyqty = 0;
                    double.TryParse(dr1["dispatchqty"].ToString(), out temp_tdispqtyqty);
                    double avg_qty = temp_tdispqtyqty / 2;
                    //totaldummy["Total Dispatch"] = Math.Round(avgqty );
                    SvfDespatchQty += avg_qty;

                }

                totaldummy["TotalDispatch"] = dr1["dispatchqty"].ToString();
                double temptdispqtyqty = 0;
                double.TryParse(dr1["dispatchqty"].ToString(), out temptdispqtyqty);
                double avgqty = temptdispqtyqty / 2;
                //totaldummy["TotalDispatch"] = Math.Round(avgqty ).ToString();
                GroupTotDispQty += avgqty;

                double totalsale = 0; double totalsalevalue = 0; double totalindent = 0; double totalcollection = 0; double totaldue = 0;
                double temptotsalevalue = 0;
                if (BranchID == "8009" || BranchID == "8012" || BranchID == "8013")
                {
                    if (DataType == "Quantity")
                    {
                        foreach (DataRow drindent in dtbranches_indent_sale.Select("SuperBranch='" + dr1["Branch_id"].ToString() + "'"))
                        {
                            double tempqty = 0;
                            double.TryParse(drindent["DeliveryQty"].ToString(), out tempqty);
                            double tempsalevalue = 0;
                            double.TryParse(drindent["salevalue"].ToString(), out tempsalevalue);
                            temptotsalevalue += tempsalevalue;
                            totalsale += tempqty;
                            double AvgSale = 0;
                            // totaldummy["TotalSale"] = drindent["DeliveryQty"].ToString();
                            if (dr1["Branch_id"].ToString() == "158")
                            {
                                totaldummy["TotalSale"] = totalsale;
                                double avgrate = temptotsalevalue / totalsale;
                                totaldummy["AvgRate"] = Math.Round(avgrate, 0);
                            }
                            else
                            {
                                totaldummy["TotalSale"] = drindent["DeliveryQty"].ToString();
                                double avgrate = tempsalevalue / tempqty;
                                totaldummy["AvgRate"] = Math.Round(avgrate, 0);
                            }
                            //totaldummy["TotalDispatch"] = temptdispqtyqty;
                        }
                         totaldummy["SaleValueinRs"]=temptotsalevalue;
                    }
                    else
                    {
                        foreach (DataRow drindent in dtbranches_indent_sale.Select("SuperBranch='" + dr1["Branch_id"].ToString() + "'"))
                        {
                            double tempsvale = 0;
                            double.TryParse(drindent["salevalue"].ToString(), out tempsvale);
                            totalsalevalue += tempsvale;
                            GroupTotSaleValue += tempsvale;
                        }
                        totaldummy["SaleValueinRs"] = totalsalevalue;
                        totaldummy["Total Indent"] = totalindent;
                        foreach (DataRow drcoll in dtCollectionamount.Select("SuperBranch='" + dr1["Branch_id"].ToString() + "'"))
                        {
                            double tempcoll = 0;
                            double.TryParse(drcoll["AmountPaid"].ToString(), out tempcoll);
                            totalcollection += tempcoll;
                            GroupTotCollectionValue += tempcoll;
                        }
                        totaldummy["TotalCollection"] = totalcollection;
                        double DueAmount = totalsalevalue - totalcollection;
                        totaldummy["TotalDue"] = DueAmount.ToString();
                    }
                   
                }
                else
                {
                    double salevalue = 0;
                    foreach (DataRow drindent in dtbranches_indent_sale.Select("SubBranch='" + dr1["BranchID"].ToString() + "'"))
                    {
                        if (dtbranches_indent_sale.Rows.Count > 0)
                        {
                            totaldummy["TotalSale"] = drindent["DeliveryQty"].ToString();
                            //totaldummy["SaleValueinRs"] = drindent["salevalue"].ToString();
                            //totaldummy["Total Indent"] = drindent["unitQty"].ToString();
                            double.TryParse(drindent["salevalue"].ToString(), out salevalue);
                        }
                        if (dtbranches_indent_sale.Rows.Count <= 0)
                        {
                            totaldummy["TotalSale"] = "0";
                            //totaldummy["SaleValueinRs"] = "0";
                            //totaldummy["Total Indent"] = "0";
                        }
                        //foreach (DataRow drcoll in dtCollectionamount.Select("SubBranch='" + dr1["BranchID"].ToString() + "'"))
                        //{
                        //    double Collectedamount = 0;
                        //    double.TryParse(drcoll["AmountPaid"].ToString(), out Collectedamount);
                        //    totaldummy["TotalCollection"] = drcoll["AmountPaid"].ToString();
                        //    double DueAmount = salevalue - Collectedamount;
                        //    totaldummy["TotalDue"] = DueAmount.ToString();
                        //}
                    }
                }
                dtTotalDispatches.Rows.Add(totaldummy);
            }
            DataTable approval = new DataTable();
            if (barnchCategory == "BranchWiseCollections")
            {
                approval.Columns.Add("Sno");
                approval.Columns.Add("BranchID");
                approval.Columns.Add("Branch Name");
                approval.Columns.Add("Sale Value");
                approval.Columns.Add("Collection Amount");
                approval.Columns.Add("Due Amount");
            }
            else
            {
                approval.Columns.Add("Sno");
                approval.Columns.Add("BranchID");
                approval.Columns.Add("Branch Name");
                approval.Columns.Add("AvgRate");
                approval.Columns.Add("Total Sale");
                approval.Columns.Add("Total Dispatch");
            }
            int k = 1;
            string prevcmpid = "";
            double totaldispqty = 0;
            double grandtotsalevalue = 0;
            double totalaprsale = 0;
            double totsaleamt = 0;
            double totcollamt = 0;
            double totdueamt = 0;
            double totalsalesumqty = 0;

            double totalsalevaluesumqty = 0;
            double totalcollectionevaluesumqty = 0;
            double totalduevaluesumqty = 0;


            double totdisptchsumqty = 0;

            double grandtotdisptchsumqty = 0;
            double grandtotsalesumqty = 0;
            double grdtotalsalesumvalueperavrate = 0;

            double grandtotsalevalue1 = 0;
            double grandtotcolection1 = 0;
            double grandtotdue1 = 0;





            double totaldisp1 = 0;
            double totaldisp2 = 0;

            double totalsale1 = 0;
            double totalsale2 = 0;
            double overalldisptot = 0;
            double overallsaletot = 0;

            double overalltotalsalevaluesumqty = 0;
            double overalltotalcollectionevaluesumqty = 0;
            double overalltotalduevaluesumqty = 0;
            double totalsalesumvalueperavrate = 0;
            foreach (DataRow dr in dtTotalDispatches.Rows)
            {
                float tddue = 0;
                float tdcashdue = 0;
                float finaltddue = 0;

                string cmpid = dr["cmpid"].ToString();
                if (barnchCategory == "BranchWiseDespatch")
                {
                    //totalsalesumvalueperavrate = Convert.ToDouble(dtTotalDispatches.Compute("SUM(SaleValueinRs)", "cmpid=" + cmpid + ""));

                    totalsalesumqty = Convert.ToDouble(dtTotalDispatches.Compute("SUM(TotalSale)", "cmpid=" + cmpid + ""));
                    totdisptchsumqty = Convert.ToDouble(dtTotalDispatches.Compute("SUM(TotalDispatch)", "cmpid=" + cmpid + ""));

                    overallsaletot = Convert.ToDouble(dtTotalDispatches.Compute("SUM(TotalSale)", ""));
                    overalldisptot = Convert.ToDouble(dtTotalDispatches.Compute("SUM(TotalDispatch)", ""));
                }
                else
                {


                    totalsalevaluesumqty = Convert.ToDouble(dtTotalDispatches.Compute("SUM(SaleValueinRs)", "cmpid=" + cmpid + ""));
                    totalcollectionevaluesumqty = Convert.ToDouble(dtTotalDispatches.Compute("SUM(TotalCollection)", "cmpid=" + cmpid + ""));
                    totalduevaluesumqty = Convert.ToDouble(dtTotalDispatches.Compute("SUM(TotalDue)", "cmpid=" + cmpid + ""));

                    overalltotalsalevaluesumqty = Convert.ToDouble(dtTotalDispatches.Compute("SUM(SaleValueinRs)", ""));
                    overalltotalcollectionevaluesumqty = Convert.ToDouble(dtTotalDispatches.Compute("SUM(TotalCollection)", ""));
                    overalltotalduevaluesumqty = Convert.ToDouble(dtTotalDispatches.Compute("SUM(TotalDue)", ""));
                }

                DataRow totaldummy = approval.NewRow();
                totaldummy["Sno"] = k++;//dr["sno"].ToString();
                totaldummy["BranchID"] = dr["BranchID"].ToString();
                totaldummy["Branch Name"] = dr["BranchName"].ToString();
                CultureInfo hindi = new CultureInfo("hi-IN");
                if (cmpid == prevcmpid)
                {
                    if (barnchCategory == "BranchWiseCollections")
                    {
                        if (DataType == "Value")
                        {
                            double tempsalevalue = 0; double tempcoll = 0; double tempdue = 0;
                            double.TryParse(dr["SaleValueinRs"].ToString(), out tempsalevalue);
                            double salevalue = Math.Round(tempsalevalue);
                            double salevper = (salevalue / totalsalevaluesumqty) * 100;
                            totsaleamt += salevalue;
                            double.TryParse(dr["TotalCollection"].ToString(), out tempcoll);
                            double CollAmount = Math.Round(tempcoll);
                            double coper = (CollAmount / totalcollectionevaluesumqty) * 100;
                            totcollamt += CollAmount;
                            double.TryParse(dr["TotalDue"].ToString(), out tempdue);
                            double DueAmount = Math.Round(tempdue);
                            double duper = (DueAmount / totalduevaluesumqty) * 100;
                            totdueamt += DueAmount;
                            if (salevalue.ToString() != "")
                            {
                                //Getapproval.salevalue = salevalue.ToString();
                                decimal temp_salevalue = decimal.Parse(salevalue.ToString(), CultureInfo.InvariantCulture);
                                string totsalevp = "" + string.Format(hindi, "{0:#,#}", temp_salevalue) + "  (" + Math.Round(salevper, 0) + "%)";
                                totaldummy["Sale Value"] = totsalevp;
                            }
                            else
                            {
                                totaldummy["Sale Value"] = "0";
                            }
                            if (CollAmount.ToString() != "")
                            {
                                //Getapproval.CollAmount = CollAmount.ToString();
                                decimal tamount = decimal.Parse(CollAmount.ToString(), CultureInfo.InvariantCulture);
                                string totcp = "" + string.Format(hindi, "{0:#,#}", tamount) + "  (" + Math.Round(coper, 0) + "%)";
                                totaldummy["Collection Amount"] = totcp;
                            }
                            else
                            {
                                totaldummy["Collection Amount"] = "0";
                            }
                            if (DueAmount.ToString() != "")
                            {
                                //Getapproval.DueAmount = DueAmount.ToString();
                                decimal tDueamount = decimal.Parse(DueAmount.ToString(), CultureInfo.InvariantCulture);
                                string totdp = "" + string.Format(hindi, "{0:#,#}", tDueamount) + "  (" + Math.Round(duper, 0) + "%)";
                                totaldummy["Due Amount"] = totdp;
                            }
                            else
                            {
                                totaldummy["Due Amount"] = "0";
                            }
                        }
                    }
                    else
                    {
                        //if (DataType == "Quantity")
                        //{
                        double Totalsale = 0;
                        double.TryParse(dr["TotalSale"].ToString(), out Totalsale);
                        double salepercentage = (Totalsale / totalsalesumqty) * 100;
                        double TotalDispatch = 0;
                        double.TryParse(dr["TotalDispatch"].ToString(), out TotalDispatch);
                        double disppercentage = (TotalDispatch / totdisptchsumqty) * 100;
                        //double TotalReturns = 0;
                        //double.TryParse(dr["Total Returns in Ltrs"].ToString(), out TotalReturns);
                        //double TotalLeaks = 0;
                        //double.TryParse(dr["Total Leaks In Ltrs"].ToString(), out TotalLeaks);

                        double tempsalevalueperavgrate = 0; 
                        double.TryParse(dr["SaleValueinRs"].ToString(), out tempsalevalueperavgrate);
                        totalsalesumvalueperavrate += tempsalevalueperavgrate;
                        if (dr["BranchID"].ToString() == "282")
                        {
                            Totalsale = TotalDispatch; //- TotalLeaks - TotalReturns;
                        }
                        Totalsale = Math.Round(Totalsale);
                        if (Totalsale.ToString() != "")
                        {
                            string totsale = "" + Totalsale.ToString() + "  (" + Math.Round(salepercentage, 0) + "%)";
                            totaldummy["Total Sale"] = totsale;
                            totaldummy["AvgRate"] = dr["AvgRate"].ToString();
                            totalaprsale += Totalsale;
                        }
                        else
                        {
                            totaldummy["Total Sale"] = "0";
                        }
                        TotalDispatch = Math.Round(TotalDispatch);
                        if (TotalDispatch.ToString() != "")
                        {
                            string totdesp = "" + TotalDispatch.ToString() + "  (" + Math.Round(disppercentage, 0) + "%)";
                            //string totdesp = "" + TotalDispatch.ToString() + "  (" + Math.Round(disppercentage, 0) + "%)";
                            totaldummy["Total Dispatch"] = totdesp;
                            totaldispqty += TotalDispatch;
                        }
                        else
                        {
                            totaldummy["Total Dispatch"] = "0";
                        }
                        //}
                    }
                    approval.Rows.Add(totaldummy);
                }
                else
                {
                    if (barnchCategory == "BranchWiseCollections")
                    {
                        if (totsaleamt > 0)
                        {
                            DataRow totaldummy1 = approval.NewRow();
                            double salevalueper = (totsaleamt / overalltotalsalevaluesumqty) * 100;
                            double collper = (totcollamt / overalltotalcollectionevaluesumqty) * 100;
                            double dueper = (totdueamt / overalltotalduevaluesumqty) * 100;
                            totaldummy1["BranchID"] = "8012";
                            totaldummy1["Branch Name"] = "Total";
                            totaldummy1["Sale Value"] = "" + totsaleamt.ToString() + "  (" + Math.Round(salevalueper, 0) + "%)";
                            totaldummy1["Collection Amount"] = "" + totcollamt.ToString() + "  (" + Math.Round(collper, 0) + "%)";
                            totaldummy1["Due Amount"] = "" + totdueamt.ToString() + "  (" + Math.Round(dueper, 0) + "%)";
                            grandtotsalevalue1 += totsaleamt;
                            grandtotcolection1 += totcollamt;
                            grandtotdue1 += totdueamt;
                            approval.Rows.Add(totaldummy1);
                            totaldispqty = 0;
                            totalaprsale = 0;
                            totsaleamt = 0;
                            totcollamt = 0;
                            totdueamt = 0;
                            prevcmpid = "";
                        }
                    }
                    else
                    {
                        if (totaldispqty > 0)
                        {
                            DataRow totaldummy2 = approval.NewRow();
                           
                            double saleper = (totalaprsale / overallsaletot) * 100;
                            double dispper = (totaldispqty / overalldisptot) * 100;
                            string totsa = "" + totalaprsale.ToString() + "  (" + Math.Round(saleper, 0) + "%)";
                            string totde = "" + totaldispqty.ToString() + "  (" + Math.Round(dispper, 0) + "%)";
                            totaldummy2["BranchID"] = "8012";
                            totaldummy2["Branch Name"] = "Total";
                            totaldummy2["Total Sale"] = totsa;
                            double avggrate = totalsalesumvalueperavrate / totalaprsale;
                            grdtotalsalesumvalueperavrate += totalsalesumvalueperavrate;
                            totaldummy2["AvgRate"] = Math.Round(avggrate);//math.Round(avggrate;
                            totalsalesumvalueperavrate = 0;
                            grandtotsalesumqty += totalaprsale;
                            totaldummy2["Total Dispatch"] = totde;
                            grandtotdisptchsumqty += totaldispqty;
                            approval.Rows.Add(totaldummy2);
                            totaldisp1 = totaldispqty;
                            totalsale1 = totalaprsale;
                            totaldispqty = 0;
                            totalaprsale = 0;
                            totsaleamt = 0;
                            totcollamt = 0;
                            totdueamt = 0;
                            prevcmpid = "";
                        }
                    }
                    prevcmpid = cmpid;
                    if (barnchCategory == "BranchWiseCollections")
                    {
                        if (DataType == "Value")
                        {
                            double tempsalevalue = 0; double tempcoll = 0; double tempdue = 0;
                            double.TryParse(dr["SaleValueinRs"].ToString(), out tempsalevalue);
                            double salevalue = Math.Round(tempsalevalue);
                            double sv1 = (salevalue / totalsalevaluesumqty) * 100;

                            double.TryParse(dr["TotalCollection"].ToString(), out tempcoll);
                            double CollAmount = Math.Round(tempcoll);
                            double cv1 = (CollAmount / totalcollectionevaluesumqty) * 100;

                            double.TryParse(dr["TotalDue"].ToString(), out tempdue);
                            double DueAmount = Math.Round(tempdue);
                            double dv1 = (DueAmount / totalduevaluesumqty) * 100;

                            totsaleamt += salevalue;
                            totcollamt += CollAmount;
                            totdueamt += DueAmount;
                            if (salevalue.ToString() != "")
                            {
                                //Getapproval.salevalue = salevalue.ToString();
                                decimal temp_salevalue = decimal.Parse(salevalue.ToString(), CultureInfo.InvariantCulture);
                                string totsalevpp = "" + string.Format(hindi, "{0:#,#}", temp_salevalue) + "  (" + Math.Round(sv1, 0) + "%)";
                                totaldummy["Sale Value"] = totsalevpp;

                            }
                            else
                            {
                                totaldummy["Sale Value"] = "0";
                            }
                            if (CollAmount.ToString() != "")
                            {
                                //Getapproval.CollAmount = CollAmount.ToString();
                                decimal tamount = decimal.Parse(CollAmount.ToString(), CultureInfo.InvariantCulture);
                                string co = "" + string.Format(hindi, "{0:#,#}", tamount) + "  (" + Math.Round(cv1, 0) + "%)";
                                totaldummy["Collection Amount"] = co;
                            }
                            else
                            {
                                totaldummy["Collection Amount"] = "0";
                            }
                            if (DueAmount.ToString() != "")
                            {
                                //Getapproval.DueAmount = DueAmount.ToString();
                                decimal tDueamount = decimal.Parse(DueAmount.ToString(), CultureInfo.InvariantCulture);
                                string da = "" + string.Format(hindi, "{0:#,#}", tDueamount) + "  (" + Math.Round(dv1, 0) + "%)";
                                totaldummy["Due Amount"] = da;
                            }
                            else
                            {
                                totaldummy["Due Amount"] = "0";
                            }
                        }
                    }
                    else
                    {
                        ///affhgg
                        //if (DataType == "Quantity")
                        //{
                        double Totalsale = 0;
                        double.TryParse(dr["TotalSale"].ToString(), out Totalsale);
                        double salepercentage = (Totalsale / totalsalesumqty) * 100;
                        double TotalDispatch = 0;
                        double.TryParse(dr["TotalDispatch"].ToString(), out TotalDispatch);
                        double disppercentage = (TotalDispatch / totdisptchsumqty) * 100;

                        double tempsalevalueperavgrate = 0;
                        double.TryParse(dr["SaleValueinRs"].ToString(), out tempsalevalueperavgrate);
                        totalsalesumvalueperavrate += tempsalevalueperavgrate;

                        if (dr["BranchID"].ToString() == "282")
                        {
                            Totalsale = TotalDispatch; //- TotalLeaks - TotalReturns;
                        }
                        Totalsale = Math.Round(Totalsale);
                        if (Totalsale.ToString() != "")
                        {
                            string totsale = "" + Totalsale.ToString() + "  (" + Math.Round(salepercentage, 0) + "%)";
                            totaldummy["Total Sale"] = totsale;
                            totaldummy["AvgRate"] = dr["AvgRate"].ToString();
                            totalaprsale += Totalsale;
                        }
                        else
                        {
                            totaldummy["Total Sale"] = "0";
                        }
                        TotalDispatch = Math.Round(TotalDispatch);
                        if (TotalDispatch.ToString() != "")
                        {
                            string totDISP = "" + TotalDispatch.ToString() + "  (" + Math.Round(disppercentage, 0) + "%)";
                            totaldummy["Total Dispatch"] = totDISP.ToString();
                            totaldispqty += TotalDispatch;
                        }
                        else
                        {
                            totaldummy["Total Dispatch"] = "0";
                        }
                        //}
                    }
                    //Getapproval.oppstock = dr["Opp Stock"].ToString();
                    //Getapproval.clostock = dr["Clo Stock"].ToString(); 
                    approval.Rows.Add(totaldummy);
                }
            }
            if (barnchCategory == "BranchWiseCollections")
            {
                if (totsaleamt > 0)
                {
                    DataRow totaldummy1 = approval.NewRow();
                    double salevalueper = (totsaleamt / overalltotalsalevaluesumqty) * 100;
                    double collper = (totcollamt / overalltotalcollectionevaluesumqty) * 100;
                    double dueper = (totdueamt / overalltotalduevaluesumqty) * 100;
                    totaldummy1["BranchID"] = "8013";
                    totaldummy1["Branch Name"] = "Total";
                    totaldummy1["Sale Value"] = "" + totsaleamt.ToString() + "  (" + Math.Round(salevalueper, 0) + "%)";
                    grandtotsalevalue1 += totsaleamt;
                    totaldummy1["Collection Amount"] = "" + totcollamt.ToString() + "  (" + Math.Round(collper, 0) + "%)";
                    grandtotcolection1 += totcollamt;
                    totaldummy1["Due Amount"] = "" + totdueamt.ToString() + "  (" + Math.Round(dueper, 0) + "%)";
                    grandtotdue1 += totdueamt;
                    approval.Rows.Add(totaldummy1);
                    totaldispqty = 0;
                    totalaprsale = 0;
                    totsaleamt = 0;
                    totcollamt = 0;
                    totdueamt = 0;
                    prevcmpid = "";
                }
            }
            else
            {
                if (totaldispqty > 0)
                {
                    DataRow totaldummy2 = approval.NewRow();
                    double saleper = (totalaprsale / overallsaletot) * 100;
                    double dispper = (totaldispqty / overalldisptot) * 100;
                    string totsa = "" + totalaprsale.ToString() + "  (" + Math.Round(saleper, 0) + "%)";
                    string totde = "" + totaldispqty.ToString() + "  (" + Math.Round(dispper, 0) + "%)";
                    totaldummy2["BranchID"] = "8013";
                    totaldummy2["Branch Name"] = "Total";
                    totaldummy2["Total Sale"] = totsa;
                    grandtotsalesumqty += totalaprsale;
                    totaldummy2["Total Dispatch"] = totde;
                    double avggrate = totalsalesumvalueperavrate / totalaprsale;
                    grdtotalsalesumvalueperavrate += totalsalesumvalueperavrate;
                    totalsalesumvalueperavrate = 0;

                    totaldummy2["AvgRate"] = Math.Round(avggrate);//math.Round(avggrate;
                    grandtotdisptchsumqty += totaldispqty;
                    approval.Rows.Add(totaldummy2);

                    totaldisp2 = totaldispqty;
                    totalsale2 = totalaprsale;

                    totaldispqty = 0;
                    totalaprsale = 0;
                    totsaleamt = 0;
                    totcollamt = 0;
                    totdueamt = 0;
                    prevcmpid = "";
                }
            }
            if (barnchCategory == "BranchWiseDespatch")
            {
                DataRow totaldummy3 = approval.NewRow();
                totaldummy3["BranchID"] = "8009";
                totaldummy3["Branch Name"] = "Grand Total";
                totaldummy3["Total Sale"] = grandtotsalesumqty;
                totaldummy3["Total Dispatch"] = grandtotdisptchsumqty;
                double avggrate = grdtotalsalesumvalueperavrate / grandtotsalesumqty;
                totaldummy3["AvgRate"] = Math.Round(avggrate);
                approval.Rows.Add(totaldummy3);
                //DataRow totaldummy4 = approval.NewRow();
                //totaldummy4["BranchID"] = "8009";
                //totaldummy4["Branch Name"] = "Sales Office Wise";
                //approval.Rows.Add(totaldummy4);
            }
            else
            {
                DataRow totaldummy4 = approval.NewRow();
                totaldummy4["BranchID"] = "8009";
                totaldummy4["Branch Name"] = "Grand Total";
                totaldummy4["Sale Value"] = grandtotsalevalue1;
                totaldummy4["Collection Amount"] = grandtotcolection1;
                totaldummy4["Due Amount"] = grandtotdue1;
                approval.Rows.Add(totaldummy4);
            }
            Context.Session["DispatchGraphicalCahrts"] = approval;
            double totalcollectionvalue = GroupTotCollectionValue;
            double totSaleValue = GroupTotSaleValue;
            double GroupDueAmount = 0;
            GroupDueAmount = GroupTotSaleValue - GroupTotCollectionValue;
            double tempGroupTotDispQty = Math.Round(GroupTotDispQty);
            lbldispatchqty.Text = tempGroupTotDispQty.ToString() + "   Ltrs";
            hsalevalue.InnerHtml = totSaleValue.ToString();
            spnamount.InnerHtml = GroupTotCollectionValue.ToString();
            hduevalue.InnerHtml = GroupDueAmount.ToString();
            SvdsDespatchQty = Math.Round(SvdsDespatchQty);
            SvfDespatchQty = Math.Round(SvfDespatchQty);
            lblSvdsdispatch.Text = SvdsDespatchQty.ToString() + " Ltrs";
            lblSvfdispatch.Text = SvfDespatchQty.ToString() + " Ltrs";

            grdbranchwisedispatch.DataSource = approval;
            grdbranchwisedispatch.DataBind();
            ScriptManager.RegisterClientScriptBlock(this.Page, this.GetType(), "Script1", "branchtypeChange();", true);

        }
        catch (Exception ex)
        {

        }
    }
    protected void grdbranchwisedispatch_RowCommand(object sender, GridViewCommandEventArgs e)
    {
        try
        {
            ViewState["Val"] = "gridclick";
            vdbmngr = new VehicleDBMgr();
            int rowIndex = Convert.ToInt32(e.CommandArgument);
            GridViewRow row = grdbranchwisedispatch.Rows[rowIndex];
            GridViewRow row1 = grdbranchwisedispatch.Rows[2];
            GridViewRow row2 = grdbranchwisedispatch.Rows[5];
            string BranchID = row.Cells[2].Text;
            string Type1 = row.Cells[3].Text;
            string SVDS = row1.Cells[2].Text;
            string SVF = row2.Cells[2].Text;
            Session["ClickBranchid"] = BranchID;
            string Type = ddltype.SelectedItem.Value;
            string DataType = ddlDataType.SelectedItem.Value;
            string barnchCategory = ddlbarnchCategory.SelectedItem.Value;
            string s = Session["IndDate"].ToString();
            var dt = DateTime.ParseExact(s, "ddd MMM dd yyyy HH:mm:ss 'GMT'zzz", System.Globalization.CultureInfo.InvariantCulture);
            string IndDate = dt.ToString("yyyy-MM-dd");
            DateTime ServerDateCurrentdate = Convert.ToDateTime(IndDate);
            DateTime FromDate = ServerDateCurrentdate;
            string edate = Session["Todate"].ToString();
            var edt = DateTime.ParseExact(edate, "ddd MMM dd yyyy HH:mm:ss 'GMT'zzz", System.Globalization.CultureInfo.InvariantCulture);
            string Tdate = edt.ToString("yyyy-MM-dd");
            DateTime To_Date = Convert.ToDateTime(Tdate);
            DateTime ToDate = To_Date;

            // div_MainPlantComparison.Style.Add("display", "block");

            divHide1.Style.Add("display", "block");
            div_MainPlantDetails1.Style.Add("display", "block");


            string Datatype = "";

            string SectedDataType = "Day";//ddlDayType.SelectedItem.Value;

            int Ndays = (FromDate - ToDate).Days;

            int countdays = Ndays + 1;

            if (countdays <= 7)
            {
                Datatype = "Monthly";
            }
            else if (countdays <= 30 || countdays <= 8)
            {
                Datatype = "Week";
            }
            else if (countdays == 364 || countdays >= 364)
            {
                Datatype = "Year";
            }
            else
            {
                Datatype = "Monthly";
            }



            DateTime lastweakfrom = new DateTime();
            DateTime lastweakto = new DateTime();


            DateTime lastmonthfrom = new DateTime();
            DateTime lastmonthto = new DateTime();
            DateTime YearServerDate_Currentdate = Convert.ToDateTime(IndDate);
            DateTime LastYearFromDate = YearServerDate_Currentdate;
            DateTime YearServerDate_Todate = Convert.ToDateTime(Tdate);
            DateTime LastYearToDate = YearServerDate_Todate;
            lastmonthfrom = FromDate.AddMonths(-1);
            lastmonthto = ToDate.AddMonths(-1);
            LastYearFromDate = LastYearFromDate.AddYears(-1);
            LastYearToDate = LastYearToDate.AddYears(-1);


            DataTable Dt_PresentWeak = new DataTable();
            DataTable dtSub_LastWeekData = new DataTable();
            DataTable Dt_PresentMonth = new DataTable();
            DataTable Dt_LastSixthMonth = new DataTable();
            DataTable Dt_PresentYear = new DataTable();
            DataTable dtSub_yesterdayData = new DataTable();
            DataTable dtSub_lastMonthData = new DataTable();
            DataTable dtSub_lastYearData = new DataTable();
            DataTable dtPresentAllMonth = new DataTable();
            DataTable dtLastYearAllMonth = new DataTable();
            string SalesType = Session["salestype"].ToString();

            DataTable dtALL = new DataTable();

            if (Datatype == "Monthly")
            {

                #region
                if (SectedDataType == "Day")
                {
                    if (BranchID == "8009")
                    {
                        cmd = new MySqlCommand("SELECT    TripInfo.Sno, TripInfo.DCNo, ROUND(SUM(ProductInfo.Qty) ) AS DeliveryQty,ROUND(AVG(ProductInfo.Qty) ) AS AvgQty, TripInfo.I_Date, TripInfo.VehicleNo, TripInfo.Status, TripInfo.DispName, TripInfo.DispType, TripInfo.DispMode, TripInfo.BranchID As Branch_id, TripInfo.BranchName, TripInfo.Branch_Id As BranchID,TripInfo.GroupId, TripInfo.Companyid FROM (SELECT  tripdata.Sno, tripdata.DCNo, tripdata.I_Date, tripdata.VehicleNo, tripdata.Status, dispatch.DispName, dispatch.DispType, dispatch.DispMode, dispatch.BranchID, branchdata_1.BranchName, dispatch.Branch_Id, dispatch.GroupId, dispatch.Companyid FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE  (dispatch.GroupId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT Qty, Sno FROM (SELECT tripdata_1.Sno, tripsubdata.Qty FROM  tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno WHERE (tripdata_1.AssignDate BETWEEN @d1 AND @d2)) TripSubInfo) ProductInfo ON TripInfo.Sno = ProductInfo.Sno GROUP BY TripInfo.Branch_Id ORDER BY TripInfo.Companyid");
                        cmd.Parameters.AddWithValue("@branch", BranchID);
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-2));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-2));
                        dtSub_yesterdayData = vdbmngr.SelectQuery(cmd).Tables[0];
                        cmd = new MySqlCommand("SELECT    TripInfo.Sno, TripInfo.DCNo, ROUND(SUM(ProductInfo.Qty) ) AS DeliveryQty,ROUND(AVG(ProductInfo.Qty) ) AS AvgQty, TripInfo.I_Date, TripInfo.VehicleNo, TripInfo.Status, TripInfo.DispName, TripInfo.DispType, TripInfo.DispMode, TripInfo.BranchID As Branch_id, TripInfo.BranchName, TripInfo.Branch_Id As BranchID,TripInfo.GroupId, TripInfo.Companyid FROM (SELECT  tripdata.Sno, tripdata.DCNo, tripdata.I_Date, tripdata.VehicleNo, tripdata.Status, dispatch.DispName, dispatch.DispType, dispatch.DispMode, dispatch.BranchID, branchdata_1.BranchName, dispatch.Branch_Id,dispatch.GroupId, dispatch.Companyid FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE  (dispatch.GroupId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT Qty, Sno FROM (SELECT tripdata_1.Sno, tripsubdata.Qty FROM  tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno WHERE (tripdata_1.AssignDate BETWEEN @d1 AND @d2)) TripSubInfo) ProductInfo ON TripInfo.Sno = ProductInfo.Sno GROUP BY TripInfo.Branch_Id ORDER BY TripInfo.Companyid");
                        cmd.Parameters.AddWithValue("@branch", BranchID);
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-8));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-8));
                        dtSub_LastWeekData = vdbmngr.SelectQuery(cmd).Tables[0];
                        cmd = new MySqlCommand("SELECT    TripInfo.Sno, TripInfo.DCNo, ROUND(SUM(ProductInfo.Qty) ) AS DeliveryQty,ROUND(AVG(ProductInfo.Qty) ) AS AvgQty, TripInfo.I_Date, TripInfo.VehicleNo, TripInfo.Status, TripInfo.DispName, TripInfo.DispType, TripInfo.DispMode, TripInfo.BranchID As Branch_id, TripInfo.BranchName, TripInfo.Branch_Id As BranchID,TripInfo.GroupId, TripInfo.Companyid FROM (SELECT  tripdata.Sno, tripdata.DCNo, tripdata.I_Date, tripdata.VehicleNo, tripdata.Status, dispatch.DispName, dispatch.DispType, dispatch.DispMode, dispatch.BranchID, branchdata_1.BranchName, dispatch.Branch_Id,dispatch.GroupId,dispatch.Companyid FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE  (dispatch.GroupId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT Qty, Sno FROM (SELECT tripdata_1.Sno, tripsubdata.Qty FROM  tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno WHERE (tripdata_1.AssignDate BETWEEN @d1 AND @d2)) TripSubInfo) ProductInfo ON TripInfo.Sno = ProductInfo.Sno GROUP BY TripInfo.Branch_Id ORDER BY TripInfo.Companyid");
                        cmd.Parameters.AddWithValue("@branch", BranchID);
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-31));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-31));
                        dtSub_lastMonthData = vdbmngr.SelectQuery(cmd).Tables[0];
                        cmd = new MySqlCommand("SELECT    TripInfo.Sno, TripInfo.DCNo, ROUND(SUM(ProductInfo.Qty) ) AS DeliveryQty,ROUND(AVG(ProductInfo.Qty) ) AS AvgQty, TripInfo.I_Date, TripInfo.VehicleNo, TripInfo.Status, TripInfo.DispName, TripInfo.DispType, TripInfo.DispMode, TripInfo.BranchID As Branch_id, TripInfo.BranchName, TripInfo.Branch_Id As BranchID,TripInfo.GroupId, TripInfo.Companyid FROM (SELECT  tripdata.Sno, tripdata.DCNo, tripdata.I_Date, tripdata.VehicleNo, tripdata.Status, dispatch.DispName, dispatch.DispType, dispatch.DispMode, dispatch.BranchID, branchdata_1.BranchName, dispatch.Branch_Id,dispatch.GroupId,dispatch.Companyid FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE  (dispatch.GroupId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT Qty, Sno FROM (SELECT tripdata_1.Sno, tripsubdata.Qty FROM  tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno WHERE (tripdata_1.AssignDate BETWEEN @d1 AND @d2)) TripSubInfo) ProductInfo ON TripInfo.Sno = ProductInfo.Sno GROUP BY TripInfo.Branch_Id ORDER BY TripInfo.Companyid");
                        cmd.Parameters.AddWithValue("@branch", BranchID);
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-365));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-365));
                        dtSub_lastYearData = vdbmngr.SelectQuery(cmd).Tables[0];
                        // type = "GroupWise";
                    }
                    else if (BranchID == "8012" || BranchID == "8013")
                    {
                        DataTable tempbranchindentsale = new DataTable();
                        cmd = new MySqlCommand("SELECT  branchmappingtable.SubBranch, branchmappingtable.SuperBranch, branchmappingtable.SubBranch AS Expr1, branchdata.BranchName,branchdata.SalesType FROM  branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno WHERE  (branchmappingtable.SuperBranch = @Branchid) GROUP BY branchmappingtable.SubBranch ORDER BY companyname, branchmappingtable.SubBranch");
                        cmd.Parameters.AddWithValue("@Branchid", BranchID);
                        DataTable BtGroupBranches = vdbmngr.SelectQuery(cmd).Tables[0];
                        foreach (DataRow drgrbranch in BtGroupBranches.Rows)
                        {
                            if (drgrbranch["SubBranch"].ToString() == "172")
                            {
                                cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS salevalue, branchmappingtable.SuperBranch AS BranchID FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo  WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch NOT IN (538 , 1801, 3625)) GROUP BY branchmappingtable.SuperBranch");
                                //cmd = new MySqlCommand("SELECT  SubBranch, ROUND(SUM(DeliveryQty) ) AS DeliveryQty, ROUND(SUM(DeliveryQty * UnitCost) ) AS salevalue, SuperBranch FROM  (SELECT  t1.SubBranch, t1.SuperBranch, t2.DeliveryQty, t2.unitQty, t2.UnitCost FROM (SELECT branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch FROM  branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch WHERE (branchmappingtable_1.SuperBranch = @branchid) AND (branchmappingtable_1.SubBranch NOT IN(2,2749,2948,538,3625)) GROUP BY branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch) t1 LEFT OUTER JOIN (SELECT  indents_subtable.DeliveryQty, indents_subtable.unitQty, indents_subtable.UnitCost, branchmappingtable_2.SuperBranch, branchmappingtable_2.SubBranch FROM   branchmappingtable branchmappingtable_2 INNER JOIN (SELECT  IndentNo, Branch_id, I_date FROM   indents WHERE  (I_date BETWEEN @d1 AND @d2)) ind ON branchmappingtable_2.SubBranch = ind.Branch_id INNER JOIN indents_subtable ON ind.IndentNo = indents_subtable.IndentNo) t2 ON t2.SuperBranch = t1.SubBranch) derivedtbl_1 GROUP BY SuperBranch");
                                cmd.Parameters.AddWithValue("@BranchID", drgrbranch["SubBranch"].ToString());
                                cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-1));
                                cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-1));
                                tempbranchindentsale = vdbmngr.SelectQuery(cmd).Tables[0];
                            }
                            else if (drgrbranch["SubBranch"].ToString() == "3625")
                            {
                                cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS salevalue, branchmappingtable.SuperBranch AS BranchID FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo  WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch IN (3625, 4609)) GROUP BY branchmappingtable.SuperBranch");

                                //cmd = new MySqlCommand("SELECT  SubBranch, ROUND(SUM(DeliveryQty) ) AS DeliveryQty,  ROUND(SUM(DeliveryQty * UnitCost) ) AS salevalue, SuperBranch FROM  (SELECT  t1.SubBranch, t1.SuperBranch, t2.DeliveryQty, t2.unitQty, t2.UnitCost FROM (SELECT branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch FROM  branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch WHERE (branchmappingtable_1.SuperBranch = @branchid) AND (branchmappingtable_1.SubBranch IN(4609,3625)) GROUP BY branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch) t1 LEFT OUTER JOIN (SELECT  indents_subtable.DeliveryQty, indents_subtable.unitQty, indents_subtable.UnitCost, branchmappingtable_2.SuperBranch, branchmappingtable_2.SubBranch FROM   branchmappingtable branchmappingtable_2 INNER JOIN (SELECT  IndentNo, Branch_id, I_date FROM   indents WHERE  (I_date BETWEEN @d1 AND @d2)) ind ON branchmappingtable_2.SubBranch = ind.Branch_id INNER JOIN indents_subtable ON ind.IndentNo = indents_subtable.IndentNo) t2 ON t2.SuperBranch = t1.SubBranch) derivedtbl_1 GROUP BY SuperBranch");
                                cmd.Parameters.AddWithValue("@BranchID", drgrbranch["SubBranch"].ToString());
                                cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-1));
                                cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-1));
                                tempbranchindentsale = vdbmngr.SelectQuery(cmd).Tables[0];
                            }
                            else if (drgrbranch["SubBranch"].ToString() == "1801")
                            {
                                cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS salevalue, branchmappingtable.SuperBranch AS BranchID FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo  WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) GROUP BY branchmappingtable.SuperBranch");

                                //cmd = new MySqlCommand("SELECT  SubBranch, ROUND(SUM(DeliveryQty) ) AS DeliveryQty,  ROUND(SUM(DeliveryQty * UnitCost) ) AS salevalue, SuperBranch FROM  (SELECT  t1.SubBranch, t1.SuperBranch, t2.DeliveryQty, t2.unitQty, t2.UnitCost FROM (SELECT branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch FROM  branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch WHERE (branchmappingtable_1.SuperBranch = @branchid) GROUP BY branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch) t1 LEFT OUTER JOIN (SELECT  indents_subtable.DeliveryQty, indents_subtable.unitQty, indents_subtable.UnitCost, branchmappingtable_2.SuperBranch, branchmappingtable_2.SubBranch FROM   branchmappingtable branchmappingtable_2 INNER JOIN (SELECT  IndentNo, Branch_id, I_date FROM   indents WHERE  (I_date BETWEEN @d1 AND @d2)) ind ON branchmappingtable_2.SubBranch = ind.Branch_id INNER JOIN indents_subtable ON ind.IndentNo = indents_subtable.IndentNo) t2 ON t2.SuperBranch = t1.SubBranch) derivedtbl_1 GROUP BY SuperBranch");
                                cmd.Parameters.AddWithValue("@BranchID", drgrbranch["SubBranch"].ToString());
                                cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-1));
                                cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-1));
                                tempbranchindentsale = vdbmngr.SelectQuery(cmd).Tables[0];
                            }
                            else if (drgrbranch["SubBranch"].ToString() == "158")
                            {
                                cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS salevalue, branchmappingtable.SuperBranch AS BranchID FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch NOT IN (159,4626)) GROUP BY branchmappingtable.SuperBranch");
                                //cmd = new MySqlCommand("SELECT  SubBranch, ROUND(SUM(DeliveryQty) ) AS DeliveryQty,  ROUND(SUM(DeliveryQty * UnitCost) ) AS salevalue, SuperBranch FROM  (SELECT  t1.SubBranch, t1.SuperBranch, t2.DeliveryQty, t2.unitQty, t2.UnitCost FROM (SELECT branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch FROM  branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch WHERE (branchmappingtable_1.SuperBranch = @branchid) GROUP BY branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch) t1 LEFT OUTER JOIN (SELECT  indents_subtable.DeliveryQty, indents_subtable.unitQty, indents_subtable.UnitCost, branchmappingtable_2.SuperBranch, branchmappingtable_2.SubBranch FROM   branchmappingtable branchmappingtable_2 INNER JOIN (SELECT  IndentNo, Branch_id, I_date FROM   indents WHERE  (I_date BETWEEN @d1 AND @d2)) ind ON branchmappingtable_2.SubBranch = ind.Branch_id INNER JOIN indents_subtable ON ind.IndentNo = indents_subtable.IndentNo) t2 ON t2.SuperBranch = t1.SubBranch) derivedtbl_1 GROUP BY SuperBranch");
                                cmd.Parameters.AddWithValue("@BranchID", drgrbranch["SubBranch"].ToString());
                                cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-1));
                                cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-1));
                                tempbranchindentsale = vdbmngr.SelectQuery(cmd).Tables[0];

                                cmd = new MySqlCommand("SELECT branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS salevalue,  branchmappingtable.SuperBranch AS BranchID FROM (SELECT  IndentNo, Branch_id, I_date, Status, IndentType FROM  indents WHERE (I_date BETWEEN @d1 AND @d2) AND (Status <> 'D')) indent INNER JOIN branchdata ON indent.Branch_id = branchdata.sno INNER JOIN indents_subtable ON indent.IndentNo = indents_subtable.IndentNo INNER JOIN branchmappingtable ON branchdata.sno = branchmappingtable.SubBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable.SuperBranch = branchdata_1.sno WHERE (branchmappingtable.SuperBranch = @BranchID) AND (indents_subtable.DeliveryQty <> 0) GROUP BY branchmappingtable.SuperBranch ORDER BY branchdata.BranchName");
                                //cmd = new MySqlCommand("SELECT  SubBranch, ROUND(SUM(DeliveryQty) ) AS DeliveryQty,  ROUND(SUM(DeliveryQty * UnitCost) ) AS salevalue, SuperBranch FROM  (SELECT  t1.SubBranch, t1.SuperBranch, t2.DeliveryQty, t2.unitQty, t2.UnitCost FROM (SELECT branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch FROM  branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch WHERE (branchmappingtable_1.SuperBranch = @branchid) GROUP BY branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch) t1 LEFT OUTER JOIN (SELECT  indents_subtable.DeliveryQty, indents_subtable.unitQty, indents_subtable.UnitCost, branchmappingtable_2.SuperBranch, branchmappingtable_2.SubBranch FROM   branchmappingtable branchmappingtable_2 INNER JOIN (SELECT  IndentNo, Branch_id, I_date FROM   indents WHERE  (I_date BETWEEN @d1 AND @d2)) ind ON branchmappingtable_2.SubBranch = ind.Branch_id INNER JOIN indents_subtable ON ind.IndentNo = indents_subtable.IndentNo) t2 ON t2.SuperBranch = t1.SubBranch) derivedtbl_1 GROUP BY SuperBranch");
                                cmd.Parameters.AddWithValue("@BranchID", drgrbranch["SubBranch"].ToString());
                                cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-1));
                                cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-1));
                                DataTable temptable = vdbmngr.SelectQuery(cmd).Tables[0];
                                tempbranchindentsale.Merge(temptable);
                            }
                            else
                            {
                                cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS salevalue, branchmappingtable.SuperBranch AS BranchID FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) GROUP BY branchmappingtable.SuperBranch");
                                //cmd = new MySqlCommand("SELECT  SubBranch, ROUND(SUM(DeliveryQty) ) AS DeliveryQty,  ROUND(SUM(DeliveryQty * UnitCost) ) AS salevalue, SuperBranch FROM  (SELECT  t1.SubBranch, t1.SuperBranch, t2.DeliveryQty, t2.unitQty, t2.UnitCost FROM (SELECT branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch FROM  branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch WHERE (branchmappingtable_1.SuperBranch = @branchid) GROUP BY branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch) t1 LEFT OUTER JOIN (SELECT  indents_subtable.DeliveryQty, indents_subtable.unitQty, indents_subtable.UnitCost, branchmappingtable_2.SuperBranch, branchmappingtable_2.SubBranch FROM   branchmappingtable branchmappingtable_2 INNER JOIN (SELECT  IndentNo, Branch_id, I_date FROM   indents WHERE  (I_date BETWEEN @d1 AND @d2)) ind ON branchmappingtable_2.SubBranch = ind.Branch_id INNER JOIN indents_subtable ON ind.IndentNo = indents_subtable.IndentNo) t2 ON t2.SuperBranch = t1.SubBranch) derivedtbl_1 GROUP BY SuperBranch");
                                cmd.Parameters.AddWithValue("@BranchID", drgrbranch["SubBranch"].ToString());
                                cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-1));
                                cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-1));
                                tempbranchindentsale = vdbmngr.SelectQuery(cmd).Tables[0];
                            }
                            dtSub_yesterdayData.Merge(tempbranchindentsale);
                        }
                        //weakly
                        foreach (DataRow drgrbranch in BtGroupBranches.Rows)
                        {
                            if (drgrbranch["SubBranch"].ToString() == "172")
                            {
                                cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS salevalue, branchmappingtable.SuperBranch AS BranchID FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo  WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch NOT IN (538 , 1801, 3625)) GROUP BY branchmappingtable.SuperBranch");
                                //cmd = new MySqlCommand("SELECT  SubBranch, ROUND(SUM(DeliveryQty) ) AS DeliveryQty, ROUND(SUM(DeliveryQty * UnitCost) ) AS salevalue, SuperBranch FROM  (SELECT  t1.SubBranch, t1.SuperBranch, t2.DeliveryQty, t2.unitQty, t2.UnitCost FROM (SELECT branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch FROM  branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch WHERE (branchmappingtable_1.SuperBranch = @branchid) AND (branchmappingtable_1.SubBranch NOT IN(2,2749,2948,538,3625)) GROUP BY branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch) t1 LEFT OUTER JOIN (SELECT  indents_subtable.DeliveryQty, indents_subtable.unitQty, indents_subtable.UnitCost, branchmappingtable_2.SuperBranch, branchmappingtable_2.SubBranch FROM   branchmappingtable branchmappingtable_2 INNER JOIN (SELECT  IndentNo, Branch_id, I_date FROM   indents WHERE  (I_date BETWEEN @d1 AND @d2)) ind ON branchmappingtable_2.SubBranch = ind.Branch_id INNER JOIN indents_subtable ON ind.IndentNo = indents_subtable.IndentNo) t2 ON t2.SuperBranch = t1.SubBranch) derivedtbl_1 GROUP BY SuperBranch");
                                cmd.Parameters.AddWithValue("@BranchID", drgrbranch["SubBranch"].ToString());
                                cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-7));
                                cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-7));
                                tempbranchindentsale = vdbmngr.SelectQuery(cmd).Tables[0];
                            }
                            else if (drgrbranch["SubBranch"].ToString() == "3625")
                            {
                                cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS salevalue, branchmappingtable.SuperBranch AS BranchID FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo  WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch IN (3625, 4609)) GROUP BY branchmappingtable.SuperBranch");
                                //cmd = new MySqlCommand("SELECT  SubBranch, ROUND(SUM(DeliveryQty) ) AS DeliveryQty,  ROUND(SUM(DeliveryQty * UnitCost) ) AS salevalue, SuperBranch FROM  (SELECT  t1.SubBranch, t1.SuperBranch, t2.DeliveryQty, t2.unitQty, t2.UnitCost FROM (SELECT branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch FROM  branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch WHERE (branchmappingtable_1.SuperBranch = @branchid) AND (branchmappingtable_1.SubBranch IN(4609,3625)) GROUP BY branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch) t1 LEFT OUTER JOIN (SELECT  indents_subtable.DeliveryQty, indents_subtable.unitQty, indents_subtable.UnitCost, branchmappingtable_2.SuperBranch, branchmappingtable_2.SubBranch FROM   branchmappingtable branchmappingtable_2 INNER JOIN (SELECT  IndentNo, Branch_id, I_date FROM   indents WHERE  (I_date BETWEEN @d1 AND @d2)) ind ON branchmappingtable_2.SubBranch = ind.Branch_id INNER JOIN indents_subtable ON ind.IndentNo = indents_subtable.IndentNo) t2 ON t2.SuperBranch = t1.SubBranch) derivedtbl_1 GROUP BY SuperBranch");
                                cmd.Parameters.AddWithValue("@BranchID", drgrbranch["SubBranch"].ToString());
                                cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-7));
                                cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-7));
                                tempbranchindentsale = vdbmngr.SelectQuery(cmd).Tables[0];
                            }
                            else if (drgrbranch["SubBranch"].ToString() == "1801")
                            {
                                cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS salevalue, branchmappingtable.SuperBranch AS BranchID FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo  WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) GROUP BY branchmappingtable.SuperBranch");
                                //cmd = new MySqlCommand("SELECT  SubBranch, ROUND(SUM(DeliveryQty) ) AS DeliveryQty,  ROUND(SUM(DeliveryQty * UnitCost) ) AS salevalue, SuperBranch FROM  (SELECT  t1.SubBranch, t1.SuperBranch, t2.DeliveryQty, t2.unitQty, t2.UnitCost FROM (SELECT branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch FROM  branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch WHERE (branchmappingtable_1.SuperBranch = @branchid) GROUP BY branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch) t1 LEFT OUTER JOIN (SELECT  indents_subtable.DeliveryQty, indents_subtable.unitQty, indents_subtable.UnitCost, branchmappingtable_2.SuperBranch, branchmappingtable_2.SubBranch FROM   branchmappingtable branchmappingtable_2 INNER JOIN (SELECT  IndentNo, Branch_id, I_date FROM   indents WHERE  (I_date BETWEEN @d1 AND @d2)) ind ON branchmappingtable_2.SubBranch = ind.Branch_id INNER JOIN indents_subtable ON ind.IndentNo = indents_subtable.IndentNo) t2 ON t2.SuperBranch = t1.SubBranch) derivedtbl_1 GROUP BY SuperBranch");
                                cmd.Parameters.AddWithValue("@BranchID", drgrbranch["SubBranch"].ToString());
                                cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-7));
                                cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-7));
                                tempbranchindentsale = vdbmngr.SelectQuery(cmd).Tables[0];
                            }
                            else if (drgrbranch["SubBranch"].ToString() == "158")
                            {
                                cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS salevalue, branchmappingtable.SuperBranch AS BranchID FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch NOT IN (159,4626)) GROUP BY branchmappingtable.SuperBranch");
                                //cmd = new MySqlCommand("SELECT  SubBranch, ROUND(SUM(DeliveryQty) ) AS DeliveryQty,  ROUND(SUM(DeliveryQty * UnitCost) ) AS salevalue, SuperBranch FROM  (SELECT  t1.SubBranch, t1.SuperBranch, t2.DeliveryQty, t2.unitQty, t2.UnitCost FROM (SELECT branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch FROM  branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch WHERE (branchmappingtable_1.SuperBranch = @branchid) GROUP BY branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch) t1 LEFT OUTER JOIN (SELECT  indents_subtable.DeliveryQty, indents_subtable.unitQty, indents_subtable.UnitCost, branchmappingtable_2.SuperBranch, branchmappingtable_2.SubBranch FROM   branchmappingtable branchmappingtable_2 INNER JOIN (SELECT  IndentNo, Branch_id, I_date FROM   indents WHERE  (I_date BETWEEN @d1 AND @d2)) ind ON branchmappingtable_2.SubBranch = ind.Branch_id INNER JOIN indents_subtable ON ind.IndentNo = indents_subtable.IndentNo) t2 ON t2.SuperBranch = t1.SubBranch) derivedtbl_1 GROUP BY SuperBranch");
                                cmd.Parameters.AddWithValue("@BranchID", drgrbranch["SubBranch"].ToString());
                                cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-7));
                                cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-7));
                                tempbranchindentsale = vdbmngr.SelectQuery(cmd).Tables[0];

                                cmd = new MySqlCommand("SELECT branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,  branchmappingtable.SuperBranch AS BranchID FROM (SELECT  IndentNo, Branch_id, I_date, Status, IndentType FROM  indents WHERE (I_date BETWEEN @d1 AND @d2) AND (Status <> 'D')) indent INNER JOIN branchdata ON indent.Branch_id = branchdata.sno INNER JOIN indents_subtable ON indent.IndentNo = indents_subtable.IndentNo INNER JOIN branchmappingtable ON branchdata.sno = branchmappingtable.SubBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable.SuperBranch = branchdata_1.sno WHERE (branchmappingtable.SuperBranch = @BranchID) AND (indents_subtable.DeliveryQty <> 0) GROUP BY branchmappingtable.SuperBranch ORDER BY branchdata.BranchName");
                                //cmd = new MySqlCommand("SELECT  SubBranch, ROUND(SUM(DeliveryQty) ) AS DeliveryQty,  ROUND(SUM(DeliveryQty * UnitCost) ) AS salevalue, SuperBranch FROM  (SELECT  t1.SubBranch, t1.SuperBranch, t2.DeliveryQty, t2.unitQty, t2.UnitCost FROM (SELECT branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch FROM  branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch WHERE (branchmappingtable_1.SuperBranch = @branchid) GROUP BY branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch) t1 LEFT OUTER JOIN (SELECT  indents_subtable.DeliveryQty, indents_subtable.unitQty, indents_subtable.UnitCost, branchmappingtable_2.SuperBranch, branchmappingtable_2.SubBranch FROM   branchmappingtable branchmappingtable_2 INNER JOIN (SELECT  IndentNo, Branch_id, I_date FROM   indents WHERE  (I_date BETWEEN @d1 AND @d2)) ind ON branchmappingtable_2.SubBranch = ind.Branch_id INNER JOIN indents_subtable ON ind.IndentNo = indents_subtable.IndentNo) t2 ON t2.SuperBranch = t1.SubBranch) derivedtbl_1 GROUP BY SuperBranch");
                                cmd.Parameters.AddWithValue("@BranchID", drgrbranch["SubBranch"].ToString());
                                cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-7));
                                cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-7));
                                DataTable temptable = vdbmngr.SelectQuery(cmd).Tables[0];
                                tempbranchindentsale.Merge(temptable);
                            }
                            else
                            {
                                cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS salevalue, branchmappingtable.SuperBranch AS BranchID FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) GROUP BY branchmappingtable.SuperBranch");
                                //cmd = new MySqlCommand("SELECT  SubBranch, ROUND(SUM(DeliveryQty) ) AS DeliveryQty,  ROUND(SUM(DeliveryQty * UnitCost) ) AS salevalue, SuperBranch FROM  (SELECT  t1.SubBranch, t1.SuperBranch, t2.DeliveryQty, t2.unitQty, t2.UnitCost FROM (SELECT branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch FROM  branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch WHERE (branchmappingtable_1.SuperBranch = @branchid) GROUP BY branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch) t1 LEFT OUTER JOIN (SELECT  indents_subtable.DeliveryQty, indents_subtable.unitQty, indents_subtable.UnitCost, branchmappingtable_2.SuperBranch, branchmappingtable_2.SubBranch FROM   branchmappingtable branchmappingtable_2 INNER JOIN (SELECT  IndentNo, Branch_id, I_date FROM   indents WHERE  (I_date BETWEEN @d1 AND @d2)) ind ON branchmappingtable_2.SubBranch = ind.Branch_id INNER JOIN indents_subtable ON ind.IndentNo = indents_subtable.IndentNo) t2 ON t2.SuperBranch = t1.SubBranch) derivedtbl_1 GROUP BY SuperBranch");
                                cmd.Parameters.AddWithValue("@BranchID", drgrbranch["SubBranch"].ToString());
                                cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-7));
                                cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-7));
                                tempbranchindentsale = vdbmngr.SelectQuery(cmd).Tables[0];
                            }

                            dtSub_LastWeekData.Merge(tempbranchindentsale);
                        }
                        //monthly
                        foreach (DataRow drgrbranch in BtGroupBranches.Rows)
                        {
                            if (drgrbranch["SubBranch"].ToString() == "172")
                            {
                                cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS salevalue, branchmappingtable.SuperBranch AS BranchID FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo  WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch NOT IN (538 , 1801, 3625)) GROUP BY branchmappingtable.SuperBranch");
                                //cmd = new MySqlCommand("SELECT  SubBranch, ROUND(SUM(DeliveryQty) ) AS DeliveryQty, ROUND(SUM(DeliveryQty * UnitCost) ) AS salevalue, SuperBranch FROM  (SELECT  t1.SubBranch, t1.SuperBranch, t2.DeliveryQty, t2.unitQty, t2.UnitCost FROM (SELECT branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch FROM  branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch WHERE (branchmappingtable_1.SuperBranch = @branchid) AND (branchmappingtable_1.SubBranch NOT IN(2,2749,2948,538,3625)) GROUP BY branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch) t1 LEFT OUTER JOIN (SELECT  indents_subtable.DeliveryQty, indents_subtable.unitQty, indents_subtable.UnitCost, branchmappingtable_2.SuperBranch, branchmappingtable_2.SubBranch FROM   branchmappingtable branchmappingtable_2 INNER JOIN (SELECT  IndentNo, Branch_id, I_date FROM   indents WHERE  (I_date BETWEEN @d1 AND @d2)) ind ON branchmappingtable_2.SubBranch = ind.Branch_id INNER JOIN indents_subtable ON ind.IndentNo = indents_subtable.IndentNo) t2 ON t2.SuperBranch = t1.SubBranch) derivedtbl_1 GROUP BY SuperBranch");
                                cmd.Parameters.AddWithValue("@BranchID", drgrbranch["SubBranch"].ToString());
                                cmd.Parameters.AddWithValue("@d1", GetLowDate(lastmonthfrom));
                                cmd.Parameters.AddWithValue("@d2", GetHighDate(lastmonthto));
                                tempbranchindentsale = vdbmngr.SelectQuery(cmd).Tables[0];
                            }
                            else if (drgrbranch["SubBranch"].ToString() == "3625")
                            {
                                cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS salevalue, branchmappingtable.SuperBranch AS BranchID FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo  WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch IN (3625, 4609)) GROUP BY branchmappingtable.SuperBranch");

                                //cmd = new MySqlCommand("SELECT  SubBranch, ROUND(SUM(DeliveryQty) ) AS DeliveryQty,  ROUND(SUM(DeliveryQty * UnitCost) ) AS salevalue, SuperBranch FROM  (SELECT  t1.SubBranch, t1.SuperBranch, t2.DeliveryQty, t2.unitQty, t2.UnitCost FROM (SELECT branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch FROM  branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch WHERE (branchmappingtable_1.SuperBranch = @branchid) AND (branchmappingtable_1.SubBranch IN(4609,3625)) GROUP BY branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch) t1 LEFT OUTER JOIN (SELECT  indents_subtable.DeliveryQty, indents_subtable.unitQty, indents_subtable.UnitCost, branchmappingtable_2.SuperBranch, branchmappingtable_2.SubBranch FROM   branchmappingtable branchmappingtable_2 INNER JOIN (SELECT  IndentNo, Branch_id, I_date FROM   indents WHERE  (I_date BETWEEN @d1 AND @d2)) ind ON branchmappingtable_2.SubBranch = ind.Branch_id INNER JOIN indents_subtable ON ind.IndentNo = indents_subtable.IndentNo) t2 ON t2.SuperBranch = t1.SubBranch) derivedtbl_1 GROUP BY SuperBranch");
                                cmd.Parameters.AddWithValue("@BranchID", drgrbranch["SubBranch"].ToString());
                                cmd.Parameters.AddWithValue("@d1", GetLowDate(lastmonthfrom));
                                cmd.Parameters.AddWithValue("@d2", GetHighDate(lastmonthto));
                                tempbranchindentsale = vdbmngr.SelectQuery(cmd).Tables[0];
                            }
                            else if (drgrbranch["SubBranch"].ToString() == "1801")
                            {
                                cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS salevalue, branchmappingtable.SuperBranch AS BranchID FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo  WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) GROUP BY branchmappingtable.SuperBranch");
                                //cmd = new MySqlCommand("SELECT  SubBranch, ROUND(SUM(DeliveryQty) ) AS DeliveryQty,  ROUND(SUM(DeliveryQty * UnitCost) ) AS salevalue, SuperBranch FROM  (SELECT  t1.SubBranch, t1.SuperBranch, t2.DeliveryQty, t2.unitQty, t2.UnitCost FROM (SELECT branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch FROM  branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch WHERE (branchmappingtable_1.SuperBranch = @branchid) GROUP BY branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch) t1 LEFT OUTER JOIN (SELECT  indents_subtable.DeliveryQty, indents_subtable.unitQty, indents_subtable.UnitCost, branchmappingtable_2.SuperBranch, branchmappingtable_2.SubBranch FROM   branchmappingtable branchmappingtable_2 INNER JOIN (SELECT  IndentNo, Branch_id, I_date FROM   indents WHERE  (I_date BETWEEN @d1 AND @d2)) ind ON branchmappingtable_2.SubBranch = ind.Branch_id INNER JOIN indents_subtable ON ind.IndentNo = indents_subtable.IndentNo) t2 ON t2.SuperBranch = t1.SubBranch) derivedtbl_1 GROUP BY SuperBranch");
                                cmd.Parameters.AddWithValue("@BranchID", drgrbranch["SubBranch"].ToString());
                                cmd.Parameters.AddWithValue("@d1", GetLowDate(lastmonthfrom));
                                cmd.Parameters.AddWithValue("@d2", GetHighDate(lastmonthto));
                                tempbranchindentsale = vdbmngr.SelectQuery(cmd).Tables[0];
                            }
                            else if (drgrbranch["SubBranch"].ToString() == "158")
                            {
                                cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS salevalue, branchmappingtable.SuperBranch AS BranchID FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch NOT IN (159,4626)) GROUP BY branchmappingtable.SuperBranch");
                                //cmd = new MySqlCommand("SELECT  SubBranch, ROUND(SUM(DeliveryQty) ) AS DeliveryQty,  ROUND(SUM(DeliveryQty * UnitCost) ) AS salevalue, SuperBranch FROM  (SELECT  t1.SubBranch, t1.SuperBranch, t2.DeliveryQty, t2.unitQty, t2.UnitCost FROM (SELECT branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch FROM  branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch WHERE (branchmappingtable_1.SuperBranch = @branchid) GROUP BY branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch) t1 LEFT OUTER JOIN (SELECT  indents_subtable.DeliveryQty, indents_subtable.unitQty, indents_subtable.UnitCost, branchmappingtable_2.SuperBranch, branchmappingtable_2.SubBranch FROM   branchmappingtable branchmappingtable_2 INNER JOIN (SELECT  IndentNo, Branch_id, I_date FROM   indents WHERE  (I_date BETWEEN @d1 AND @d2)) ind ON branchmappingtable_2.SubBranch = ind.Branch_id INNER JOIN indents_subtable ON ind.IndentNo = indents_subtable.IndentNo) t2 ON t2.SuperBranch = t1.SubBranch) derivedtbl_1 GROUP BY SuperBranch");
                                cmd.Parameters.AddWithValue("@BranchID", drgrbranch["SubBranch"].ToString());
                                cmd.Parameters.AddWithValue("@d1", GetLowDate(lastmonthfrom));
                                cmd.Parameters.AddWithValue("@d2", GetHighDate(lastmonthto));
                                tempbranchindentsale = vdbmngr.SelectQuery(cmd).Tables[0];

                                cmd = new MySqlCommand("SELECT branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty, branchmappingtable.SuperBranch AS BranchID FROM (SELECT  IndentNo, Branch_id, I_date, Status, IndentType FROM  indents WHERE (I_date BETWEEN @d1 AND @d2) AND (Status <> 'D')) indent INNER JOIN branchdata ON indent.Branch_id = branchdata.sno INNER JOIN indents_subtable ON indent.IndentNo = indents_subtable.IndentNo INNER JOIN branchmappingtable ON branchdata.sno = branchmappingtable.SubBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable.SuperBranch = branchdata_1.sno WHERE (branchmappingtable.SuperBranch = @BranchID) AND (indents_subtable.DeliveryQty <> 0) GROUP BY branchmappingtable.SuperBranch ORDER BY branchdata.BranchName");
                                //cmd = new MySqlCommand("SELECT  SubBranch, ROUND(SUM(DeliveryQty) ) AS DeliveryQty,  ROUND(SUM(DeliveryQty * UnitCost) ) AS salevalue, SuperBranch FROM  (SELECT  t1.SubBranch, t1.SuperBranch, t2.DeliveryQty, t2.unitQty, t2.UnitCost FROM (SELECT branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch FROM  branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch WHERE (branchmappingtable_1.SuperBranch = @branchid) GROUP BY branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch) t1 LEFT OUTER JOIN (SELECT  indents_subtable.DeliveryQty, indents_subtable.unitQty, indents_subtable.UnitCost, branchmappingtable_2.SuperBranch, branchmappingtable_2.SubBranch FROM   branchmappingtable branchmappingtable_2 INNER JOIN (SELECT  IndentNo, Branch_id, I_date FROM   indents WHERE  (I_date BETWEEN @d1 AND @d2)) ind ON branchmappingtable_2.SubBranch = ind.Branch_id INNER JOIN indents_subtable ON ind.IndentNo = indents_subtable.IndentNo) t2 ON t2.SuperBranch = t1.SubBranch) derivedtbl_1 GROUP BY SuperBranch");
                                cmd.Parameters.AddWithValue("@BranchID", drgrbranch["SubBranch"].ToString());
                                cmd.Parameters.AddWithValue("@d1", GetLowDate(lastmonthfrom));
                                cmd.Parameters.AddWithValue("@d2", GetHighDate(lastmonthto));
                                DataTable temptable = vdbmngr.SelectQuery(cmd).Tables[0];
                                tempbranchindentsale.Merge(temptable);
                            }
                            else
                            {
                                cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS salevalue, branchmappingtable.SuperBranch AS BranchID FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) GROUP BY branchmappingtable.SuperBranch");
                                //cmd = new MySqlCommand("SELECT  SubBranch, ROUND(SUM(DeliveryQty) ) AS DeliveryQty,  ROUND(SUM(DeliveryQty * UnitCost) ) AS salevalue, SuperBranch FROM  (SELECT  t1.SubBranch, t1.SuperBranch, t2.DeliveryQty, t2.unitQty, t2.UnitCost FROM (SELECT branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch FROM  branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch WHERE (branchmappingtable_1.SuperBranch = @branchid) GROUP BY branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch) t1 LEFT OUTER JOIN (SELECT  indents_subtable.DeliveryQty, indents_subtable.unitQty, indents_subtable.UnitCost, branchmappingtable_2.SuperBranch, branchmappingtable_2.SubBranch FROM   branchmappingtable branchmappingtable_2 INNER JOIN (SELECT  IndentNo, Branch_id, I_date FROM   indents WHERE  (I_date BETWEEN @d1 AND @d2)) ind ON branchmappingtable_2.SubBranch = ind.Branch_id INNER JOIN indents_subtable ON ind.IndentNo = indents_subtable.IndentNo) t2 ON t2.SuperBranch = t1.SubBranch) derivedtbl_1 GROUP BY SuperBranch");
                                cmd.Parameters.AddWithValue("@BranchID", drgrbranch["SubBranch"].ToString());
                                cmd.Parameters.AddWithValue("@d1", GetLowDate(lastmonthfrom));
                                cmd.Parameters.AddWithValue("@d2", GetHighDate(lastmonthto));
                                tempbranchindentsale = vdbmngr.SelectQuery(cmd).Tables[0];
                            }

                            dtSub_lastMonthData.Merge(tempbranchindentsale);
                        }
                        //Yearly
                        foreach (DataRow drgrbranch in BtGroupBranches.Rows)
                        {
                            if (drgrbranch["SubBranch"].ToString() == "172")
                            {
                                cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS salevalue, branchmappingtable.SuperBranch AS BranchID FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo  WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch NOT IN (538 , 1801, 3625)) GROUP BY branchmappingtable.SuperBranch");
                                //cmd = new MySqlCommand("SELECT  SubBranch, ROUND(SUM(DeliveryQty) ) AS DeliveryQty, ROUND(SUM(DeliveryQty * UnitCost) ) AS salevalue, SuperBranch FROM  (SELECT  t1.SubBranch, t1.SuperBranch, t2.DeliveryQty, t2.unitQty, t2.UnitCost FROM (SELECT branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch FROM  branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch WHERE (branchmappingtable_1.SuperBranch = @branchid) AND (branchmappingtable_1.SubBranch NOT IN(2,2749,2948,538,3625)) GROUP BY branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch) t1 LEFT OUTER JOIN (SELECT  indents_subtable.DeliveryQty, indents_subtable.unitQty, indents_subtable.UnitCost, branchmappingtable_2.SuperBranch, branchmappingtable_2.SubBranch FROM   branchmappingtable branchmappingtable_2 INNER JOIN (SELECT  IndentNo, Branch_id, I_date FROM   indents WHERE  (I_date BETWEEN @d1 AND @d2)) ind ON branchmappingtable_2.SubBranch = ind.Branch_id INNER JOIN indents_subtable ON ind.IndentNo = indents_subtable.IndentNo) t2 ON t2.SuperBranch = t1.SubBranch) derivedtbl_1 GROUP BY SuperBranch");
                                cmd.Parameters.AddWithValue("@BranchID", drgrbranch["SubBranch"].ToString());
                                cmd.Parameters.AddWithValue("@d1", GetLowDate(LastYearFromDate));
                                cmd.Parameters.AddWithValue("@d2", GetHighDate(LastYearToDate));
                                tempbranchindentsale = vdbmngr.SelectQuery(cmd).Tables[0];
                            }
                            else if (drgrbranch["SubBranch"].ToString() == "3625")
                            {
                                cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS salevalue, branchmappingtable.SuperBranch AS BranchID FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo  WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch IN (3625, 4609)) GROUP BY branchmappingtable.SuperBranch");

                                //cmd = new MySqlCommand("SELECT  SubBranch, ROUND(SUM(DeliveryQty) ) AS DeliveryQty,  ROUND(SUM(DeliveryQty * UnitCost) ) AS salevalue, SuperBranch FROM  (SELECT  t1.SubBranch, t1.SuperBranch, t2.DeliveryQty, t2.unitQty, t2.UnitCost FROM (SELECT branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch FROM  branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch WHERE (branchmappingtable_1.SuperBranch = @branchid) AND (branchmappingtable_1.SubBranch IN(4609,3625)) GROUP BY branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch) t1 LEFT OUTER JOIN (SELECT  indents_subtable.DeliveryQty, indents_subtable.unitQty, indents_subtable.UnitCost, branchmappingtable_2.SuperBranch, branchmappingtable_2.SubBranch FROM   branchmappingtable branchmappingtable_2 INNER JOIN (SELECT  IndentNo, Branch_id, I_date FROM   indents WHERE  (I_date BETWEEN @d1 AND @d2)) ind ON branchmappingtable_2.SubBranch = ind.Branch_id INNER JOIN indents_subtable ON ind.IndentNo = indents_subtable.IndentNo) t2 ON t2.SuperBranch = t1.SubBranch) derivedtbl_1 GROUP BY SuperBranch");
                                cmd.Parameters.AddWithValue("@BranchID", drgrbranch["SubBranch"].ToString());
                                cmd.Parameters.AddWithValue("@d1", GetLowDate(LastYearFromDate));
                                cmd.Parameters.AddWithValue("@d2", GetHighDate(LastYearToDate));
                                tempbranchindentsale = vdbmngr.SelectQuery(cmd).Tables[0];
                            }
                            else if (drgrbranch["SubBranch"].ToString() == "1801")
                            {
                                cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS salevalue, branchmappingtable.SuperBranch AS BranchID FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo  WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) GROUP BY branchmappingtable.SuperBranch");

                                //cmd = new MySqlCommand("SELECT  SubBranch, ROUND(SUM(DeliveryQty) ) AS DeliveryQty,  ROUND(SUM(DeliveryQty * UnitCost) ) AS salevalue, SuperBranch FROM  (SELECT  t1.SubBranch, t1.SuperBranch, t2.DeliveryQty, t2.unitQty, t2.UnitCost FROM (SELECT branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch FROM  branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch WHERE (branchmappingtable_1.SuperBranch = @branchid) GROUP BY branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch) t1 LEFT OUTER JOIN (SELECT  indents_subtable.DeliveryQty, indents_subtable.unitQty, indents_subtable.UnitCost, branchmappingtable_2.SuperBranch, branchmappingtable_2.SubBranch FROM   branchmappingtable branchmappingtable_2 INNER JOIN (SELECT  IndentNo, Branch_id, I_date FROM   indents WHERE  (I_date BETWEEN @d1 AND @d2)) ind ON branchmappingtable_2.SubBranch = ind.Branch_id INNER JOIN indents_subtable ON ind.IndentNo = indents_subtable.IndentNo) t2 ON t2.SuperBranch = t1.SubBranch) derivedtbl_1 GROUP BY SuperBranch");
                                cmd.Parameters.AddWithValue("@BranchID", drgrbranch["SubBranch"].ToString());
                                cmd.Parameters.AddWithValue("@d1", GetLowDate(LastYearFromDate));
                                cmd.Parameters.AddWithValue("@d2", GetHighDate(LastYearToDate));
                                tempbranchindentsale = vdbmngr.SelectQuery(cmd).Tables[0];

                            }
                            else if (drgrbranch["SubBranch"].ToString() == "158")
                            {
                                cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS salevalue, branchmappingtable.SuperBranch AS BranchID FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch NOT IN (159,4626)) GROUP BY branchmappingtable.SuperBranch");
                                //cmd = new MySqlCommand("SELECT  SubBranch, ROUND(SUM(DeliveryQty) ) AS DeliveryQty,  ROUND(SUM(DeliveryQty * UnitCost) ) AS salevalue, SuperBranch FROM  (SELECT  t1.SubBranch, t1.SuperBranch, t2.DeliveryQty, t2.unitQty, t2.UnitCost FROM (SELECT branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch FROM  branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch WHERE (branchmappingtable_1.SuperBranch = @branchid) GROUP BY branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch) t1 LEFT OUTER JOIN (SELECT  indents_subtable.DeliveryQty, indents_subtable.unitQty, indents_subtable.UnitCost, branchmappingtable_2.SuperBranch, branchmappingtable_2.SubBranch FROM   branchmappingtable branchmappingtable_2 INNER JOIN (SELECT  IndentNo, Branch_id, I_date FROM   indents WHERE  (I_date BETWEEN @d1 AND @d2)) ind ON branchmappingtable_2.SubBranch = ind.Branch_id INNER JOIN indents_subtable ON ind.IndentNo = indents_subtable.IndentNo) t2 ON t2.SuperBranch = t1.SubBranch) derivedtbl_1 GROUP BY SuperBranch");
                                cmd.Parameters.AddWithValue("@BranchID", drgrbranch["SubBranch"].ToString());
                                cmd.Parameters.AddWithValue("@d1", GetLowDate(LastYearFromDate));
                                cmd.Parameters.AddWithValue("@d2", GetHighDate(LastYearToDate));
                                tempbranchindentsale = vdbmngr.SelectQuery(cmd).Tables[0];
                                cmd = new MySqlCommand("SELECT  branchdata.BranchName,ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,  branchmappingtable.SuperBranch AS BranchID FROM (SELECT  IndentNo, Branch_id, I_date, Status, IndentType FROM  indents WHERE (I_date BETWEEN @d1 AND @d2) AND (Status <> 'D')) indent INNER JOIN branchdata ON indent.Branch_id = branchdata.sno INNER JOIN indents_subtable ON indent.IndentNo = indents_subtable.IndentNo INNER JOIN branchmappingtable ON branchdata.sno = branchmappingtable.SubBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable.SuperBranch = branchdata_1.sno WHERE (branchmappingtable.SuperBranch = @BranchID) AND (indents_subtable.DeliveryQty <> 0) GROUP BY branchmappingtable.SuperBranch ORDER BY branchdata.BranchName");
                                //cmd = new MySqlCommand("SELECT  SubBranch, ROUND(SUM(DeliveryQty) ) AS DeliveryQty,  ROUND(SUM(DeliveryQty * UnitCost) ) AS salevalue, SuperBranch FROM  (SELECT  t1.SubBranch, t1.SuperBranch, t2.DeliveryQty, t2.unitQty, t2.UnitCost FROM (SELECT branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch FROM  branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch WHERE (branchmappingtable_1.SuperBranch = @branchid) GROUP BY branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch) t1 LEFT OUTER JOIN (SELECT  indents_subtable.DeliveryQty, indents_subtable.unitQty, indents_subtable.UnitCost, branchmappingtable_2.SuperBranch, branchmappingtable_2.SubBranch FROM   branchmappingtable branchmappingtable_2 INNER JOIN (SELECT  IndentNo, Branch_id, I_date FROM   indents WHERE  (I_date BETWEEN @d1 AND @d2)) ind ON branchmappingtable_2.SubBranch = ind.Branch_id INNER JOIN indents_subtable ON ind.IndentNo = indents_subtable.IndentNo) t2 ON t2.SuperBranch = t1.SubBranch) derivedtbl_1 GROUP BY SuperBranch");
                                cmd.Parameters.AddWithValue("@BranchID", drgrbranch["SubBranch"].ToString());
                                cmd.Parameters.AddWithValue("@d1", GetLowDate(LastYearFromDate));
                                cmd.Parameters.AddWithValue("@d2", GetHighDate(LastYearToDate));
                                DataTable temptable = vdbmngr.SelectQuery(cmd).Tables[0];
                                tempbranchindentsale.Merge(temptable);
                            }
                            else
                            {
                                cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS salevalue, branchmappingtable.SuperBranch AS BranchID FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) GROUP BY branchmappingtable.SuperBranch");
                                //cmd = new MySqlCommand("SELECT  SubBranch, ROUND(SUM(DeliveryQty) ) AS DeliveryQty,  ROUND(SUM(DeliveryQty * UnitCost) ) AS salevalue, SuperBranch FROM  (SELECT  t1.SubBranch, t1.SuperBranch, t2.DeliveryQty, t2.unitQty, t2.UnitCost FROM (SELECT branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch FROM  branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch WHERE (branchmappingtable_1.SuperBranch = @branchid) GROUP BY branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch) t1 LEFT OUTER JOIN (SELECT  indents_subtable.DeliveryQty, indents_subtable.unitQty, indents_subtable.UnitCost, branchmappingtable_2.SuperBranch, branchmappingtable_2.SubBranch FROM   branchmappingtable branchmappingtable_2 INNER JOIN (SELECT  IndentNo, Branch_id, I_date FROM   indents WHERE  (I_date BETWEEN @d1 AND @d2)) ind ON branchmappingtable_2.SubBranch = ind.Branch_id INNER JOIN indents_subtable ON ind.IndentNo = indents_subtable.IndentNo) t2 ON t2.SuperBranch = t1.SubBranch) derivedtbl_1 GROUP BY SuperBranch");
                                cmd.Parameters.AddWithValue("@BranchID", drgrbranch["SubBranch"].ToString());
                                cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-2));
                                cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-2));
                                tempbranchindentsale = vdbmngr.SelectQuery(cmd).Tables[0];
                            }

                            dtSub_lastYearData.Merge(tempbranchindentsale);
                        }
                        //cmd = new MySqlCommand("SELECT    TripInfo.Sno, TripInfo.DCNo, ROUND(SUM(ProductInfo.Qty) ) AS DeliveryQty,ROUND(AVG(ProductInfo.Qty) ) AS AvgQty, TripInfo.I_Date, TripInfo.VehicleNo, TripInfo.Status, TripInfo.DispName, TripInfo.DispType, TripInfo.DispMode, TripInfo.BranchID As Branch_id, TripInfo.BranchName, TripInfo.Branch_Id As BranchID, TripInfo.CompanyId FROM (SELECT  tripdata.Sno, tripdata.DCNo, tripdata.I_Date, tripdata.VehicleNo, tripdata.Status, dispatch.DispName, dispatch.DispType, dispatch.DispMode, dispatch.BranchID, branchdata_1.BranchName, dispatch.Branch_Id, dispatch.CompanyId FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE  (dispatch.CompanyId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT Qty, Sno FROM (SELECT tripdata_1.Sno, tripsubdata.Qty FROM  tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno WHERE (tripdata_1.AssignDate BETWEEN @d1 AND @d2)) TripSubInfo) ProductInfo ON TripInfo.Sno = ProductInfo.Sno GROUP BY TripInfo.Branch_Id");
                        //cmd.Parameters.AddWithValue("@branch", BranchID);
                        //cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-1));
                        //cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-1));
                        //dtSub_yesterdayData = vdbmngr.SelectQuery(cmd).Tables[0];
                        //cmd = new MySqlCommand("SELECT    TripInfo.Sno, TripInfo.DCNo, ROUND(SUM(ProductInfo.Qty) ) AS DeliveryQty,ROUND(AVG(ProductInfo.Qty) ) AS AvgQty, TripInfo.I_Date, TripInfo.VehicleNo, TripInfo.Status, TripInfo.DispName, TripInfo.DispType, TripInfo.DispMode, TripInfo.BranchID As Branch_id, TripInfo.BranchName, TripInfo.Branch_Id As BranchID, TripInfo.CompanyId FROM (SELECT  tripdata.Sno, tripdata.DCNo, tripdata.I_Date, tripdata.VehicleNo, tripdata.Status, dispatch.DispName, dispatch.DispType, dispatch.DispMode, dispatch.BranchID, branchdata_1.BranchName, dispatch.Branch_Id, dispatch.CompanyId FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE  (dispatch.CompanyId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT Qty, Sno FROM (SELECT tripdata_1.Sno, tripsubdata.Qty FROM  tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno WHERE (tripdata_1.AssignDate BETWEEN @d1 AND @d2)) TripSubInfo) ProductInfo ON TripInfo.Sno = ProductInfo.Sno GROUP BY TripInfo.Branch_Id");
                        //cmd.Parameters.AddWithValue("@branch", BranchID);
                        //cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-7));
                        //cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-7));
                        //dtSub_LastWeekData = vdbmngr.SelectQuery(cmd).Tables[0];
                        //cmd = new MySqlCommand("SELECT    TripInfo.Sno, TripInfo.DCNo, ROUND(SUM(ProductInfo.Qty) ) AS DeliveryQty,ROUND(AVG(ProductInfo.Qty) ) AS AvgQty, TripInfo.I_Date, TripInfo.VehicleNo, TripInfo.Status, TripInfo.DispName, TripInfo.DispType, TripInfo.DispMode, TripInfo.BranchID As Branch_id, TripInfo.BranchName, TripInfo.Branch_Id As BranchID, TripInfo.CompanyId FROM (SELECT  tripdata.Sno, tripdata.DCNo, tripdata.I_Date, tripdata.VehicleNo, tripdata.Status, dispatch.DispName, dispatch.DispType, dispatch.DispMode, dispatch.BranchID, branchdata_1.BranchName, dispatch.Branch_Id, dispatch.CompanyId FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE  (dispatch.CompanyId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT Qty, Sno FROM (SELECT tripdata_1.Sno, tripsubdata.Qty FROM  tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno WHERE (tripdata_1.AssignDate BETWEEN @d1 AND @d2)) TripSubInfo) ProductInfo ON TripInfo.Sno = ProductInfo.Sno GROUP BY TripInfo.Branch_Id");
                        //cmd.Parameters.AddWithValue("@branch", BranchID);
                        //cmd.Parameters.AddWithValue("@d1", GetLowDate(lastmonthfrom));
                        //cmd.Parameters.AddWithValue("@d2", GetHighDate(lastmonthto));
                        //dtSub_lastMonthData = vdbmngr.SelectQuery(cmd).Tables[0];
                        //cmd = new MySqlCommand("SELECT    TripInfo.Sno, TripInfo.DCNo, ROUND(SUM(ProductInfo.Qty) ) AS DeliveryQty,ROUND(AVG(ProductInfo.Qty) ) AS AvgQty, TripInfo.I_Date, TripInfo.VehicleNo, TripInfo.Status, TripInfo.DispName, TripInfo.DispType, TripInfo.DispMode, TripInfo.BranchID As Branch_id, TripInfo.BranchName, TripInfo.Branch_Id As BranchID, TripInfo.CompanyId FROM (SELECT  tripdata.Sno, tripdata.DCNo, tripdata.I_Date, tripdata.VehicleNo, tripdata.Status, dispatch.DispName, dispatch.DispType, dispatch.DispMode, dispatch.BranchID, branchdata_1.BranchName, dispatch.Branch_Id, dispatch.CompanyId FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE  (dispatch.CompanyId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT Qty, Sno FROM (SELECT tripdata_1.Sno, tripsubdata.Qty FROM  tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno WHERE (tripdata_1.AssignDate BETWEEN @d1 AND @d2)) TripSubInfo) ProductInfo ON TripInfo.Sno = ProductInfo.Sno GROUP BY TripInfo.Branch_Id");
                        //cmd.Parameters.AddWithValue("@branch", BranchID);
                        //cmd.Parameters.AddWithValue("@d1", GetLowDate(LastYearFromDate));
                        //cmd.Parameters.AddWithValue("@d2", GetHighDate(LastYearToDate));
                        //dtSub_lastYearData = vdbmngr.SelectQuery(cmd).Tables[0];
                        //type = "CompanyWise";
                    }
                    else if (SalesType == "Plant")
                    {
                        if (BranchID == "172")
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch NOT IN (538 , 1801, 3625)) GROUP BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-2));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-2));
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            dtSub_yesterdayData = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else if (BranchID == "3625")
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch IN (4609, 3625)) GROUP BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-2));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-2));
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            dtSub_yesterdayData = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else if (BranchID == "1801")
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID)  GROUP BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-2));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-2));
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            dtSub_yesterdayData = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID)  GROUP BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-2));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-2));
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            dtSub_yesterdayData = vdbmngr.SelectQuery(cmd).Tables[0];
                        }


                        if (BranchID == "172")
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch NOT IN (538 , 1801, 3625)) GROUP BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-8));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-8));
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            dtSub_LastWeekData = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else if (BranchID == "3625")
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch IN (4609, 3625)) GROUP BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-8));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-8));
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            dtSub_LastWeekData = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else if (BranchID == "1801")
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID)  GROUP BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-8));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-8));
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            dtSub_LastWeekData = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID)  GROUP BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-8));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-8));
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            dtSub_LastWeekData = vdbmngr.SelectQuery(cmd).Tables[0];
                        }

                        if (BranchID == "172")
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch NOT IN (538 , 1801, 3625)) GROUP BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-30));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-30));
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            dtSub_lastMonthData = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else if (BranchID == "3625")
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch IN (4609, 3625)) GROUP BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-30));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-30));
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            dtSub_lastMonthData = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else if (BranchID == "1801")
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID)  GROUP BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-30));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-30));
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            dtSub_lastMonthData = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID)  GROUP BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-30));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-30));
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            dtSub_lastMonthData = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        if (BranchID == "172")
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch NOT IN (538 , 1801, 3625)) GROUP BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-365));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-365));
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            dtSub_lastYearData = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else if (BranchID == "3625")
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch NOT IN (4609, 3625)) GROUP BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-365));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-365));
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            dtSub_lastYearData = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else if (BranchID == "1801")
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID)  GROUP BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-365));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-365));
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            dtSub_lastYearData = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID)  GROUP BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-365));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-365));
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            dtSub_lastYearData = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                    }
                    else
                    {
                        cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SubBranch = @BranchID) GROUP BY branchdata.sno");
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-2));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-2));
                        cmd.Parameters.AddWithValue("@BranchID", BranchID);
                        dtSub_yesterdayData = vdbmngr.SelectQuery(cmd).Tables[0];

                        cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SubBranch = @BranchID) GROUP BY branchdata.sno");
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-8));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-8));
                        cmd.Parameters.AddWithValue("@BranchID", BranchID);
                        dtSub_LastWeekData = vdbmngr.SelectQuery(cmd).Tables[0];

                        cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SubBranch = @BranchID) GROUP BY branchdata.sno");
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-31));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-31));
                        cmd.Parameters.AddWithValue("@BranchID", BranchID);
                        dtSub_lastMonthData = vdbmngr.SelectQuery(cmd).Tables[0];

                        cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SubBranch = @BranchID) GROUP BY branchdata.sno");
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-365));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-365));
                        cmd.Parameters.AddWithValue("@BranchID", BranchID);
                        dtSub_lastYearData = vdbmngr.SelectQuery(cmd).Tables[0];
                    }

                    dtALL.Merge(dtSub_yesterdayData);
                    dtALL.Merge(dtSub_LastWeekData);
                    dtALL.Merge(dtSub_lastMonthData);
                    dtALL.Merge(dtSub_lastYearData);
                    DataTable disticntbarnchname = new DataTable();
                    if (BranchID == "8009" || BranchID == "8012" || BranchID == "8013")
                    {
                        DataView view = new DataView(dtALL);
                        disticntbarnchname = view.ToTable(true, "BranchID");
                    }
                    else
                    {
                        DataView view = new DataView(dtALL);
                        disticntbarnchname = view.ToTable(true, "BranchName", "sno");
                    }
                    DataTable Report = new DataTable();
                    Report.Columns.Add("BranchId");
                    Report.Columns.Add("BranchName");
                    //Report.Columns.Add("BranchId");
                    Report.Columns.Add("Yester Day");
                    Report.Columns.Add("Yester Day %");
                    Report.Columns.Add("Ysign");


                    Report.Columns.Add("Last Week");
                    // Report.Columns.Add("Last Week Avg").DataType = typeof(Double);
                    Report.Columns.Add("Last Week %");
                    Report.Columns.Add("Wsign");
                    Report.Columns.Add("YW Diff %");


                    Report.Columns.Add("Last Month");
                    // Report.Columns.Add("Last Month Avg").DataType = typeof(Double);
                    Report.Columns.Add("Last Month %");
                    Report.Columns.Add("Msign");

                    Report.Columns.Add("Last Year");
                    //  Report.Columns.Add("Last Year Avg").DataType = typeof(Double);
                    Report.Columns.Add("Last Year %");
                    Report.Columns.Add("Yesign");
                    Report.Columns.Add("MY Diff %");
                    DataRow newrow = Report.NewRow();
                    double yesterdaysum = 0;

                    double lastweaksum = 0;
                    double lastmonthsum = 0;
                    double lastyearsum = 0;
                    if (BranchID == "8009" || BranchID == "8012" || BranchID == "8013")
                    {

                        //if (BranchID == "8009")
                        //{
                        //    yesterdaysum = Convert.ToDouble(dtSub_yesterdayData.Compute("SUM(DeliveryQty)", "GroupId=" + BranchID + ""));
                        //    lastweaksum = Convert.ToDouble(dtSub_LastWeekData.Compute("SUM(DeliveryQty)", "GroupId=" + BranchID + ""));
                        //    lastmonthsum = Convert.ToDouble(dtSub_lastMonthData.Compute("SUM(DeliveryQty)", "GroupId=" + BranchID + ""));
                        //    lastyearsum = Convert.ToDouble(dtSub_lastYearData.Compute("SUM(DeliveryQty)", "GroupId=" + BranchID + ""));
                        //}
                        //else
                        //{
                        //    yesterdaysum = Convert.ToDouble(dtSub_yesterdayData.Compute("SUM(DeliveryQty)", "CompanyId=" + BranchID + ""));
                        //    lastweaksum = Convert.ToDouble(dtSub_LastWeekData.Compute("SUM(DeliveryQty)", "CompanyId=" + BranchID + ""));
                        //    lastmonthsum = Convert.ToDouble(dtSub_lastMonthData.Compute("SUM(DeliveryQty)", "CompanyId=" + BranchID + ""));
                        //    lastyearsum = Convert.ToDouble(dtSub_lastYearData.Compute("SUM(DeliveryQty)", "CompanyId=" + BranchID + ""));
                        //}
                        string cate = ddlbarnchCategory.SelectedItem.Value;
                        //foreach (DataRow drday in disticntbarnchname.Rows)
                        //{
                        foreach (DataRow drindent in dtSub_yesterdayData.Rows)
                        {

                            if (cate == "BranchWiseCollections")
                            {
                                double yesterdaysalevalue = 0;
                                double.TryParse(drindent["salevalue"].ToString(), out yesterdaysalevalue);
                                yesterdaysum += yesterdaysalevalue;
                            }
                            else
                            {
                                double tempqty = 0;
                                double.TryParse(drindent["DeliveryQty"].ToString(), out tempqty);
                                yesterdaysum += tempqty;
                            }

                        }
                        foreach (DataRow drindent in dtSub_LastWeekData.Rows)
                        {
                            if (cate == "BranchWiseCollections")
                            {
                                double LASTWEEKsalevalue = 0;
                                double.TryParse(drindent["salevalue"].ToString(), out LASTWEEKsalevalue);
                                lastweaksum += LASTWEEKsalevalue;
                            }
                            else
                            {
                                double tempqty = 0;
                                double.TryParse(drindent["DeliveryQty"].ToString(), out tempqty);
                                lastweaksum += tempqty;
                            }
                        }
                        foreach (DataRow drindent in dtSub_lastMonthData.Rows)
                        {
                            if (cate == "BranchWiseCollections")
                            {
                                double lostmonthsalevalue = 0;
                                double.TryParse(drindent["salevalue"].ToString(), out lostmonthsalevalue);
                                lastmonthsum += lostmonthsalevalue;
                            }
                            else
                            {
                                double tempqty = 0;
                                double.TryParse(drindent["DeliveryQty"].ToString(), out tempqty);
                                lastmonthsum += tempqty;
                            }
                        }
                        foreach (DataRow drindent in dtSub_lastYearData.Rows)
                        {
                            if (cate == "BranchWiseCollections")
                            {
                                double lostyearvalue = 0;
                                double.TryParse(drindent["salevalue"].ToString(), out lostyearvalue);
                                lastyearsum += lostyearvalue;
                            }
                            else
                            {
                                double tempqty = 0;
                                double.TryParse(drindent["DeliveryQty"].ToString(), out tempqty);
                                lastyearsum += tempqty;
                            }
                        }
                        //}

                        cmd = new MySqlCommand("SELECT  branchmappingtable.SubBranch, branchmappingtable.SuperBranch, branchmappingtable.SubBranch AS Expr1, branchdata.BranchName,branchdata.SalesType FROM  branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno WHERE  (branchmappingtable.SuperBranch = @Branchid) GROUP BY branchmappingtable.SubBranch ORDER BY companyname, branchmappingtable.SubBranch");
                        cmd.Parameters.AddWithValue("@Branchid", BranchID);
                        DataTable BtGroupBranches = vdbmngr.SelectQuery(cmd).Tables[0];

                        foreach (DataRow branch in disticntbarnchname.Rows)
                        {
                            DataRow newrow1 = Report.NewRow();
                            foreach (DataRow drindent in BtGroupBranches.Select("SubBranch='" + branch["BranchID"].ToString() + "'"))
                            {
                                newrow1["BranchName"] = drindent["BranchName"].ToString();
                            }
                            newrow1["BranchId"] = branch["BranchID"].ToString();
                            float DispQty = 0;
                            double incresevalue = 0; double daytotal = 0; double weaktotal = 0;
                            double diffpercentage = 0;
                            double monthtotal = 0; double yeartotal = 0;



                            foreach (DataRow drSubData in dtSub_yesterdayData.Rows)
                            {
                                if (branch["BranchID"].ToString() == drSubData["BranchID"].ToString())
                                {
                                    if (cate == "BranchWiseCollections")
                                    {
                                        float.TryParse(drSubData["salevalue"].ToString(), out DispQty);
                                        if (DispQty > 0)
                                        {
                                            //  newrow1["Yester Day Avg"] = drSubData["AvgQty"].ToString();
                                            double temp = 0;
                                            double Percentage = 0; double tempPercentage = 0;
                                            double.TryParse(drSubData["salevalue"].ToString(), out temp);
                                            daytotal += DispQty;
                                            if (drSubData["BranchID"].ToString() == "158")
                                            {
                                                newrow1["Yester Day"] = Math.Round(daytotal);
                                                tempPercentage = (daytotal / yesterdaysum) * 100;
                                                Percentage = Math.Round(tempPercentage);
                                                newrow1["Yester Day %"] = Percentage;
                                            }
                                            else
                                            {
                                                newrow1["Yester Day"] = Math.Round(daytotal);
                                                tempPercentage = (temp / yesterdaysum) * 100;
                                                Percentage = Math.Round(tempPercentage);
                                                newrow1["Yester Day %"] = Percentage;
                                            }
                                            incresevalue = Percentage;
                                            diffpercentage = incresevalue;
                                        }
                                    }
                                    else
                                    {
                                        float.TryParse(drSubData["DeliveryQty"].ToString(), out DispQty);
                                        if (DispQty > 0)
                                        {
                                            //  newrow1["Yester Day Avg"] = drSubData["AvgQty"].ToString();
                                            double temp = 0;
                                            double Percentage = 0; double tempPercentage = 0;
                                            double.TryParse(drSubData["DeliveryQty"].ToString(), out temp);
                                            //incresevalue = Percentage;
                                            daytotal += DispQty;
                                            if (drSubData["BranchID"].ToString() == "158")
                                            {
                                                newrow1["Yester Day"] = Math.Round(daytotal);
                                                tempPercentage = (daytotal / yesterdaysum) * 100;
                                                Percentage = Math.Round(tempPercentage);
                                                newrow1["Yester Day %"] = Percentage;
                                            }
                                            else
                                            {
                                                newrow1["Yester Day"] = Math.Round(daytotal);
                                                tempPercentage = (temp / yesterdaysum) * 100;
                                                Percentage = Math.Round(tempPercentage);
                                                newrow1["Yester Day %"] = Percentage;
                                            }
                                            incresevalue = Percentage;
                                            diffpercentage = incresevalue;
                                        }
                                    }
                                }
                            }
                            foreach (DataRow drSubData in dtSub_LastWeekData.Rows)
                            {
                                if (branch["BranchID"].ToString() == drSubData["BranchID"].ToString())
                                {

                                    if (cate == "BranchWiseCollections")
                                    {
                                        float.TryParse(drSubData["salevalue"].ToString(), out DispQty);
                                        if (DispQty > 0)
                                        {

                                            double temp = 0;
                                            double Percentage = 0; double tempPercentage = 0;
                                            double.TryParse(drSubData["salevalue"].ToString(), out temp);
                                            weaktotal += DispQty;
                                            if (drSubData["BranchID"].ToString() == "158")
                                            {
                                                newrow1["Last Week"] = Math.Round(weaktotal); ;
                                                tempPercentage = (weaktotal / lastweaksum) * 100;
                                                Percentage = Math.Round(tempPercentage);
                                                if (incresevalue > Percentage)
                                                {
                                                    newrow1["Last Week %"] = Math.Round(diffpercentage - Percentage);
                                                    newrow1["Wsign"] = "+";
                                                }
                                                else
                                                {
                                                    newrow1["Last Week %"] = Math.Round(diffpercentage - Percentage);
                                                    newrow1["Wsign"] = "-";
                                                }
                                            }
                                            else
                                            {
                                                newrow1["Last Week"] = drSubData["salevalue"].ToString();
                                                tempPercentage = (temp / lastweaksum) * 100;
                                                Percentage = Math.Round(tempPercentage);
                                                if (incresevalue > Percentage)
                                                {
                                                    newrow1["Last Week %"] = Math.Round(diffpercentage - Percentage);
                                                    newrow1["Wsign"] = "+";
                                                }
                                                else
                                                {
                                                    newrow1["Last Week %"] = Math.Round(diffpercentage - Percentage);
                                                    newrow1["Wsign"] = "-";
                                                }
                                            }
                                        }
                                    }
                                    else
                                    {
                                        float.TryParse(drSubData["DeliveryQty"].ToString(), out DispQty);
                                        if (DispQty > 0)
                                        {
                                            //newrow1["Last Week"] = drSubData["DeliveryQty"].ToString();
                                            // newrow1["Last Week Avg"] = drSubData["AvgQty"].ToString();
                                            double temp = 0;
                                            double Percentage = 0; double tempPercentage = 0;
                                            double.TryParse(drSubData["DeliveryQty"].ToString(), out temp);

                                            weaktotal += DispQty;
                                            if (drSubData["BranchID"].ToString() == "158")
                                            {
                                                newrow1["Last Week"] = Math.Round(weaktotal); ;
                                                tempPercentage = (weaktotal / lastweaksum) * 100;
                                                Percentage = Math.Round(tempPercentage);
                                                if (incresevalue > Percentage)
                                                {
                                                    newrow1["Last Week %"] = Math.Round(diffpercentage - Percentage);
                                                    newrow1["Wsign"] = "+";
                                                }
                                                else
                                                {
                                                    newrow1["Last Week %"] = Math.Round(diffpercentage - Percentage);
                                                    newrow1["Wsign"] = "-";
                                                }

                                            }
                                            else
                                            {
                                                newrow1["Last Week"] = drSubData["DeliveryQty"].ToString();
                                                tempPercentage = (temp / lastweaksum) * 100;
                                                Percentage = Math.Round(tempPercentage);
                                                if (incresevalue > Percentage)
                                                {
                                                    newrow1["Last Week %"] = Math.Round(diffpercentage - Percentage);
                                                    newrow1["Wsign"] = "+";
                                                }
                                                else
                                                {
                                                    newrow1["Last Week %"] = Math.Round(diffpercentage - Percentage);
                                                    newrow1["Wsign"] = "-";
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            foreach (DataRow drSubData in dtSub_lastMonthData.Rows)
                            {
                                if (branch["BranchID"].ToString() == drSubData["BranchID"].ToString())
                                {

                                    if (cate == "BranchWiseCollections")
                                    {
                                        float.TryParse(drSubData["salevalue"].ToString(), out DispQty);
                                        if (DispQty > 0)
                                        {
                                            //newrow1["Last Month"] = drSubData["DeliveryQty"].ToString();
                                            //  newrow1["Last Month Avg"] = drSubData["AvgQty"].ToString();

                                            monthtotal += DispQty;
                                            double temp = 0;
                                            double Percentage = 0; double tempPercentage = 0;
                                            double.TryParse(drSubData["salevalue"].ToString(), out temp);


                                            if (drSubData["BranchID"].ToString() == "158")
                                            {
                                                newrow1["Last Month"] = Math.Round(monthtotal);
                                                tempPercentage = (monthtotal / lastmonthsum) * 100;
                                                Percentage = Math.Round(tempPercentage);
                                                if (incresevalue > Percentage)
                                                {
                                                    newrow1["Last Month %"] = Math.Round(diffpercentage - Percentage);
                                                    newrow1["Msign"] = "+";
                                                }
                                                else
                                                {
                                                    newrow1["Last Month %"] = Math.Round(diffpercentage - Percentage);
                                                    newrow1["Msign"] = "-";
                                                }
                                            }
                                            else
                                            {
                                                newrow1["Last Month"] = drSubData["salevalue"].ToString();
                                                tempPercentage = (temp / lastmonthsum) * 100;
                                                Percentage = Math.Round(tempPercentage);

                                                if (incresevalue > Percentage)
                                                {
                                                    newrow1["Last Month %"] = Math.Round(diffpercentage - Percentage);
                                                    newrow1["Msign"] = "+";
                                                }
                                                else
                                                {
                                                    newrow1["Last Month %"] = Math.Round(diffpercentage - Percentage);
                                                    newrow1["Msign"] = "-";
                                                }
                                            }
                                            diffpercentage = Percentage;
                                        }
                                    }
                                    else
                                    {

                                        float.TryParse(drSubData["DeliveryQty"].ToString(), out DispQty);
                                        if (DispQty > 0)
                                        {
                                            monthtotal += DispQty;
                                            double temp = 0;
                                            double Percentage = 0; double tempPercentage = 0;
                                            double.TryParse(drSubData["DeliveryQty"].ToString(), out temp);
                                            if (drSubData["BranchID"].ToString() == "158")
                                            {
                                                newrow1["Last Month"] = Math.Round(monthtotal);
                                                tempPercentage = (monthtotal / lastmonthsum) * 100;
                                                Percentage = Math.Round(tempPercentage);
                                                if (incresevalue > Percentage)
                                                {
                                                    newrow1["Last Month %"] = Math.Round(diffpercentage - Percentage);
                                                    newrow1["Msign"] = "+";
                                                }
                                                else
                                                {
                                                    newrow1["Last Month %"] = Math.Round(diffpercentage - Percentage);
                                                    newrow1["Msign"] = "-";
                                                }
                                            }
                                            else
                                            {
                                                newrow1["Last Month"] = drSubData["DeliveryQty"].ToString();
                                                tempPercentage = (temp / lastmonthsum) * 100;
                                                Percentage = Math.Round(tempPercentage);
                                                if (incresevalue > Percentage)
                                                {
                                                    newrow1["Last Month %"] = Math.Round(diffpercentage - Percentage);
                                                    newrow1["Msign"] = "+";
                                                }
                                                else
                                                {
                                                    newrow1["Last Month %"] = Math.Round(diffpercentage - Percentage);
                                                    newrow1["Msign"] = "-";
                                                }
                                            }
                                            //  diffpercentage = Percentage;
                                        }
                                    }
                                }
                            }

                            foreach (DataRow drSubData in dtSub_lastYearData.Rows)
                            {
                                if (branch["BranchID"].ToString() == drSubData["BranchID"].ToString())
                                {
                                    if (cate == "BranchWiseCollections")
                                    {
                                        float.TryParse(drSubData["salevalue"].ToString(), out DispQty);
                                        if (DispQty > 0)
                                        {
                                            yeartotal += DispQty;
                                            double temp = 0;
                                            double Percentage = 0; double tempPercentage = 0;
                                            double.TryParse(drSubData["salevalue"].ToString(), out temp);
                                            if (drSubData["BranchID"].ToString() == "158")
                                            {
                                                newrow1["Last Year"] = Math.Round(yeartotal); ;
                                                tempPercentage = (yeartotal / lastyearsum) * 100;
                                                Percentage = Math.Round(tempPercentage);
                                                if (incresevalue > Percentage)
                                                {
                                                    newrow1["Last Year %"] = Math.Round(diffpercentage - Percentage);
                                                    newrow1["Yesign"] = "+";
                                                }
                                                else
                                                {
                                                    newrow1["Last Year %"] = Math.Round(diffpercentage - Percentage);
                                                    newrow1["Yesign"] = "-";
                                                }
                                            }
                                            else
                                            {
                                                newrow1["Last Year"] = drSubData["salevalue"].ToString();
                                                tempPercentage = (temp / lastyearsum) * 100;
                                                Percentage = Math.Round(tempPercentage);

                                                if (incresevalue > Percentage)
                                                {
                                                    newrow1["Last Year %"] = Math.Round(diffpercentage - Percentage);
                                                    newrow1["Yesign"] = "+";
                                                }
                                                else
                                                {
                                                    newrow1["Last Year %"] = Math.Round(diffpercentage - Percentage);
                                                    newrow1["Yesign"] = "-";
                                                }

                                            }
                                        }
                                    }
                                    else
                                    {
                                        float.TryParse(drSubData["DeliveryQty"].ToString(), out DispQty);
                                        if (DispQty > 0)
                                        {
                                            yeartotal += DispQty;
                                            double temp = 0;
                                            double Percentage = 0; double tempPercentage = 0;
                                            double.TryParse(drSubData["DeliveryQty"].ToString(), out temp);


                                            if (drSubData["BranchID"].ToString() == "158")
                                            {
                                                newrow1["Last Year"] = Math.Round(yeartotal); ;
                                                tempPercentage = (yeartotal / lastyearsum) * 100;
                                                Percentage = Math.Round(tempPercentage);
                                                newrow1["Last Year %"] = Percentage;
                                            }
                                            else
                                            {
                                                newrow1["Last Year"] = drSubData["DeliveryQty"].ToString();
                                                tempPercentage = (temp / lastyearsum) * 100;
                                                Percentage = Math.Round(tempPercentage);
                                                if (incresevalue > Percentage)
                                                {
                                                    newrow1["Last Year %"] = Math.Round(diffpercentage - Percentage);
                                                    newrow1["Yesign"] = "+";
                                                }
                                                else
                                                {
                                                    newrow1["Last Year %"] = Math.Round(diffpercentage - Percentage);
                                                    newrow1["Yesign"] = "-";
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            //if (DispQty > 0)
                            //{
                            Report.Rows.Add(newrow1);
                            //}
                        }
                    }
                    else
                    {
                        foreach (DataRow branch in disticntbarnchname.Rows)
                        {
                            DataRow newrow1 = Report.NewRow();
                            newrow1["BranchName"] = branch["BranchName"].ToString();
                            newrow1["BranchId"] = branch["sno"].ToString();
                            float DispQty = 0;
                            foreach (DataRow drSubData in dtSub_yesterdayData.Rows)
                            {
                                if (branch["sno"].ToString() == drSubData["sno"].ToString())
                                {
                                    float.TryParse(drSubData["DeliveryQty"].ToString(), out DispQty);
                                    if (DispQty > 0)
                                    {
                                        newrow1["Yester Day"] = drSubData["DeliveryQty"].ToString();
                                        //newrow1["Yester Day Avg"] = drSubData["AvgQty"].ToString();
                                        //yesterdaygrandtotal += DispQty;


                                    }
                                }
                            }
                            foreach (DataRow drSubData in dtSub_LastWeekData.Rows)
                            {
                                if (branch["sno"].ToString() == drSubData["sno"].ToString())
                                {
                                    float.TryParse(drSubData["DeliveryQty"].ToString(), out DispQty);
                                    if (DispQty > 0)
                                    {
                                        newrow1["Last Week"] = drSubData["DeliveryQty"].ToString();
                                        // newrow1["Last Week Avg"] = drSubData["AvgQty"].ToString();
                                        //lastweekgrandtotal += DispQty;

                                    }
                                }
                            }
                            foreach (DataRow drSubData in dtSub_lastMonthData.Rows)
                            {
                                if (branch["sno"].ToString() == drSubData["sno"].ToString())
                                {
                                    float.TryParse(drSubData["DeliveryQty"].ToString(), out DispQty);
                                    if (DispQty > 0)
                                    {
                                        newrow1["Last Month"] = drSubData["DeliveryQty"].ToString();
                                        //newrow1["Last Month Avg"] = drSubData["AvgQty"].ToString();
                                        //lastmonthgrandtotal += DispQty;

                                    }
                                }
                            }

                            foreach (DataRow drSubData in dtSub_lastYearData.Rows)
                            {
                                if (branch["sno"].ToString() == drSubData["sno"].ToString())
                                {
                                    float.TryParse(drSubData["DeliveryQty"].ToString(), out DispQty);
                                    if (DispQty > 0)
                                    {
                                        newrow1["Last Year"] = drSubData["DeliveryQty"].ToString();
                                        //  newrow1["Last Year Avg"] = drSubData["AvgQty"].ToString();
                                        //lastyeargrandtotal += DispQty;

                                    }
                                }
                            }
                            //double temp = 0;
                            //double.TryParse(dr["Yester Day"].ToString(), out temp);
                            //tempPercentage = (temp / yesterdaygrandtotal) * 100;
                            //Percentage = Math.Round(tempPercentage );
                            //if (DispQty > 0)
                            //{
                            Report.Rows.Add(newrow1);
                            //}
                        }
                    }
                    DataRow newrow2 = Report.NewRow();
                    newrow2["BranchName"] = "Total";
                    newrow2["Yester Day"] = yesterdaysum;
                    newrow2["Last Week"] = lastweaksum;
                    newrow2["Last Month"] = lastmonthsum;
                    newrow2["Last Year"] = lastyearsum;
                    Report.Rows.Add(newrow2);
                    grddata.DataSource = Report;
                    grddata.DataBind();
                }
                #endregion
                #region
                if (SectedDataType == "Days")
                {
                    if (BranchID == "8009")
                    {
                        cmd = new MySqlCommand("SELECT    TripInfo.Sno, TripInfo.DCNo, ROUND(SUM(ProductInfo.Qty) ) AS DeliveryQty,ROUND(AVG(ProductInfo.Qty) ) AS AvgQty, TripInfo.I_Date, TripInfo.VehicleNo, TripInfo.Status, TripInfo.DispName, TripInfo.DispType, TripInfo.DispMode, TripInfo.BranchID As Branch_id, TripInfo.BranchName, TripInfo.Branch_Id As BranchID FROM (SELECT  tripdata.Sno, tripdata.DCNo, tripdata.I_Date, tripdata.VehicleNo, tripdata.Status, dispatch.DispName, dispatch.DispType, dispatch.DispMode, dispatch.BranchID, branchdata_1.BranchName, dispatch.Branch_Id FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE  (dispatch.GroupId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT Qty, Sno FROM (SELECT tripdata_1.Sno, tripsubdata.Qty FROM  tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno WHERE (tripdata_1.AssignDate BETWEEN @d1 AND @d2)) TripSubInfo) ProductInfo ON TripInfo.Sno = ProductInfo.Sno GROUP BY  DATE(TripInfo.I_Date),TripInfo.Branch_Id");
                        cmd.Parameters.AddWithValue("@branch", BranchID);
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate));
                        Dt_PresentMonth = vdbmngr.SelectQuery(cmd).Tables[0];

                        cmd = new MySqlCommand("SELECT    TripInfo.Sno, TripInfo.DCNo, ROUND(SUM(ProductInfo.Qty) ) AS DeliveryQty,ROUND(AVG(ProductInfo.Qty) ) AS AvgQty, TripInfo.I_Date, TripInfo.VehicleNo, TripInfo.Status, TripInfo.DispName, TripInfo.DispType, TripInfo.DispMode, TripInfo.BranchID As Branch_id, TripInfo.BranchName, TripInfo.Branch_Id As BranchID FROM (SELECT  tripdata.Sno, tripdata.DCNo, tripdata.I_Date, tripdata.VehicleNo, tripdata.Status, dispatch.DispName, dispatch.DispType, dispatch.DispMode, dispatch.BranchID, branchdata_1.BranchName, dispatch.Branch_Id FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE  (dispatch.GroupId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT Qty, Sno FROM (SELECT tripdata_1.Sno, tripsubdata.Qty FROM  tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno WHERE (tripdata_1.AssignDate BETWEEN @d1 AND @d2)) TripSubInfo) ProductInfo ON TripInfo.Sno = ProductInfo.Sno GROUP BY DATE(TripInfo.I_Date),TripInfo.Branch_Id");
                        cmd.Parameters.AddWithValue("@branch", BranchID);
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(lastmonthfrom));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(lastmonthto));
                        dtSub_lastMonthData = vdbmngr.SelectQuery(cmd).Tables[0];

                        cmd = new MySqlCommand("SELECT    TripInfo.Sno, TripInfo.DCNo, ROUND(SUM(ProductInfo.Qty) ) AS DeliveryQty,ROUND(AVG(ProductInfo.Qty) ) AS AvgQty, TripInfo.I_Date, TripInfo.VehicleNo, TripInfo.Status, TripInfo.DispName, TripInfo.DispType, TripInfo.DispMode, TripInfo.BranchID As Branch_id, TripInfo.BranchName, TripInfo.Branch_Id As BranchID FROM (SELECT  tripdata.Sno, tripdata.DCNo, tripdata.I_Date, tripdata.VehicleNo, tripdata.Status, dispatch.DispName, dispatch.DispType, dispatch.DispMode, dispatch.BranchID, branchdata_1.BranchName, dispatch.Branch_Id FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE  (dispatch.GroupId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT Qty, Sno FROM (SELECT tripdata_1.Sno, tripsubdata.Qty FROM  tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno WHERE (tripdata_1.AssignDate BETWEEN @d1 AND @d2)) TripSubInfo) ProductInfo ON TripInfo.Sno = ProductInfo.Sno GROUP BY DATE(TripInfo.I_Date),TripInfo.Branch_Id");
                        cmd.Parameters.AddWithValue("@branch", BranchID);
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(LastYearFromDate));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(LastYearToDate));
                        dtSub_lastYearData = vdbmngr.SelectQuery(cmd).Tables[0];
                        // type = "GroupWise";
                    }
                    else if (BranchID == "8012" || BranchID == "8013")
                    {
                        cmd = new MySqlCommand("SELECT    TripInfo.Sno, TripInfo.DCNo, ROUND(SUM(ProductInfo.Qty) ) AS DeliveryQty,ROUND(AVG(ProductInfo.Qty) ) AS AvgQty, TripInfo.I_Date, TripInfo.VehicleNo, TripInfo.Status, TripInfo.DispName, TripInfo.DispType, TripInfo.DispMode, TripInfo.BranchID As Branch_id, TripInfo.BranchName, TripInfo.Branch_Id As BranchID FROM (SELECT  tripdata.Sno, tripdata.DCNo, tripdata.I_Date, tripdata.VehicleNo, tripdata.Status, dispatch.DispName, dispatch.DispType, dispatch.DispMode, dispatch.BranchID, branchdata_1.BranchName, dispatch.Branch_Id FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE  (dispatch.CompanyId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT Qty, Sno FROM (SELECT tripdata_1.Sno, tripsubdata.Qty FROM  tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno WHERE (tripdata_1.AssignDate BETWEEN @d1 AND @d2)) TripSubInfo) ProductInfo ON TripInfo.Sno = ProductInfo.Sno GROUP BY DATE(TripInfo.I_Date),TripInfo.Branch_Id");
                        cmd.Parameters.AddWithValue("@branch", BranchID);
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate));
                        Dt_PresentMonth = vdbmngr.SelectQuery(cmd).Tables[0];
                        cmd = new MySqlCommand("SELECT    TripInfo.Sno, TripInfo.DCNo, ROUND(SUM(ProductInfo.Qty) ) AS DeliveryQty,ROUND(AVG(ProductInfo.Qty) ) AS AvgQty, TripInfo.I_Date, TripInfo.VehicleNo, TripInfo.Status, TripInfo.DispName, TripInfo.DispType, TripInfo.DispMode, TripInfo.BranchID As Branch_id, TripInfo.BranchName, TripInfo.Branch_Id As BranchID FROM (SELECT  tripdata.Sno, tripdata.DCNo, tripdata.I_Date, tripdata.VehicleNo, tripdata.Status, dispatch.DispName, dispatch.DispType, dispatch.DispMode, dispatch.BranchID, branchdata_1.BranchName, dispatch.Branch_Id FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE  (dispatch.CompanyId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT Qty, Sno FROM (SELECT tripdata_1.Sno, tripsubdata.Qty FROM  tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno WHERE (tripdata_1.AssignDate BETWEEN @d1 AND @d2)) TripSubInfo) ProductInfo ON TripInfo.Sno = ProductInfo.Sno GROUP BY DATE(TripInfo.I_Date),TripInfo.Branch_Id");
                        cmd.Parameters.AddWithValue("@branch", BranchID);
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(lastmonthfrom));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(lastmonthto));
                        dtSub_lastMonthData = vdbmngr.SelectQuery(cmd).Tables[0];

                        //cmd = new MySqlCommand("SELECT    TripInfo.Sno, TripInfo.DCNo, ROUND(SUM(ProductInfo.Qty) ) AS DeliveryQty,ROUND(AVG(ProductInfo.Qty) ) AS AvgQty, TripInfo.I_Date, TripInfo.VehicleNo, TripInfo.Status, TripInfo.DispName, TripInfo.DispType, TripInfo.DispMode, TripInfo.BranchID As Branch_id, TripInfo.BranchName, TripInfo.Branch_Id As BranchID FROM (SELECT  tripdata.Sno, tripdata.DCNo, tripdata.I_Date, tripdata.VehicleNo, tripdata.Status, dispatch.DispName, dispatch.DispType, dispatch.DispMode, dispatch.BranchID, branchdata_1.BranchName, dispatch.Branch_Id FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE  (dispatch.CompanyId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT Qty, Sno FROM (SELECT tripdata_1.Sno, tripsubdata.Qty FROM  tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno WHERE (tripdata_1.AssignDate BETWEEN @d1 AND @d2)) TripSubInfo) ProductInfo ON TripInfo.Sno = ProductInfo.Sno GROUP BY DATE(TripInfo.I_Date),TripInfo.Branch_Id");
                        //cmd.Parameters.AddWithValue("@branch", BranchId);
                        //cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-180));
                        //cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-180));
                        //Dt_LastSixthMonth = vdbmngr.SelectQuery(cmd).Tables[0];

                        cmd = new MySqlCommand("SELECT    TripInfo.Sno, TripInfo.DCNo, ROUND(SUM(ProductInfo.Qty) ) AS DeliveryQty,ROUND(AVG(ProductInfo.Qty) ) AS AvgQty, TripInfo.I_Date, TripInfo.VehicleNo, TripInfo.Status, TripInfo.DispName, TripInfo.DispType, TripInfo.DispMode, TripInfo.BranchID As Branch_id, TripInfo.BranchName, TripInfo.Branch_Id As BranchID FROM (SELECT  tripdata.Sno, tripdata.DCNo, tripdata.I_Date, tripdata.VehicleNo, tripdata.Status, dispatch.DispName, dispatch.DispType, dispatch.DispMode, dispatch.BranchID, branchdata_1.BranchName, dispatch.Branch_Id FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE  (dispatch.CompanyId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT Qty, Sno FROM (SELECT tripdata_1.Sno, tripsubdata.Qty FROM  tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno WHERE (tripdata_1.AssignDate BETWEEN @d1 AND @d2)) TripSubInfo) ProductInfo ON TripInfo.Sno = ProductInfo.Sno GROUP BY DATE(TripInfo.I_Date),TripInfo.Branch_Id");
                        cmd.Parameters.AddWithValue("@branch", BranchID);
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(LastYearFromDate));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(LastYearToDate));
                        dtSub_lastYearData = vdbmngr.SelectQuery(cmd).Tables[0];
                        // type = "CompanyWise";
                    }
                    else if (SalesType == "Plant")
                    {
                        if (BranchID == "172")
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, indents.I_date,ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch NOT IN (538 , 1801, 3625)) GROUP BY DATE(indents.I_Date),branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate));
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            Dt_PresentMonth = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else if (BranchID == "3625")
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName,indents.I_date, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch IN (4609, 3625)) GROUP BY DATE(indents.I_Date),branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate));
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            Dt_PresentMonth = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else if (BranchID == "1801")
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName,indents.I_date, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID)  GROUP BY DATE(indents.I_Date),branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate));
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            Dt_PresentMonth = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, indents.I_date,ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID)  GROUP BY DATE(indents.I_Date),branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate));
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            Dt_PresentMonth = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        if (BranchID == "172")
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName,indents.I_date, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch NOT IN (538 , 1801, 3625)) GROUP BY DATE(indents.I_Date),branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(lastmonthfrom));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(lastmonthto));
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            dtSub_lastMonthData = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else if (BranchID == "3625")
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, indents.I_date,ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch IN (4609, 3625)) GROUP BY DATE(indents.I_Date),branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(lastmonthfrom));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(lastmonthto));
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            dtSub_lastMonthData = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else if (BranchID == "1801")
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName,indents.I_date, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID)  GROUP BY DATE(indents.I_Date),branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(lastmonthfrom));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(lastmonthto));
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            dtSub_lastMonthData = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, indents.I_date,ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID)  GROUP BY DATE(indents.I_Date),branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(lastmonthfrom));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(lastmonthto));
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            dtSub_lastMonthData = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        if (BranchID == "172")
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, indents.I_date,ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch NOT IN (538 , 1801, 3625)) GROUP BY DATE(indents.I_Date),branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(LastYearFromDate));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(LastYearToDate));
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            dtSub_lastYearData = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else if (BranchID == "3625")
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, indents.I_date,ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch NOT IN (4609, 3625)) GROUP BY DATE(indents.I_Date),branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(LastYearFromDate));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(LastYearToDate));
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            dtSub_lastYearData = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else if (BranchID == "1801")
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, indents.I_date,ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID)  GROUP BY DATE(indents.I_Date),branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(LastYearFromDate));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(LastYearToDate));
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            dtSub_lastYearData = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, indents.I_date,ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID)  GROUP BY DATE(indents.I_Date),branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(LastYearFromDate));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(LastYearToDate));
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            dtSub_lastYearData = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                    }
                    else
                    {
                        cmd = new MySqlCommand("SELECT   branchdata.BranchName,indents.I_date, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SubBranch = @BranchID) GROUP BY DATE(indents.I_Date),branchdata.sno");
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate));
                        cmd.Parameters.AddWithValue("@BranchID", BranchID);
                        Dt_PresentMonth = vdbmngr.SelectQuery(cmd).Tables[0];

                        cmd = new MySqlCommand("SELECT   branchdata.BranchName,indents.I_date, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SubBranch = @BranchID) GROUP BY DATE(indents.I_Date),branchdata.sno");
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(lastmonthfrom));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(lastmonthto));
                        cmd.Parameters.AddWithValue("@BranchID", BranchID);
                        dtSub_lastMonthData = vdbmngr.SelectQuery(cmd).Tables[0];

                        cmd = new MySqlCommand("SELECT   branchdata.BranchName, indents.I_date,ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SubBranch = @BranchID) GROUP BY DATE(indents.I_Date),branchdata.sno");
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(LastYearFromDate));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(LastYearToDate));
                        cmd.Parameters.AddWithValue("@BranchID", BranchID);
                        dtSub_lastYearData = vdbmngr.SelectQuery(cmd).Tables[0];
                    }

                    dtALL.Merge(Dt_PresentMonth);
                    dtALL.Merge(dtSub_lastMonthData);
                    dtALL.Merge(Dt_LastSixthMonth);
                    dtALL.Merge(dtSub_lastYearData);
                    DataTable disticntbarnchname = new DataTable();
                    DataTable disticntbarnchname1 = new DataTable();
                    if (BranchID == "8009" || BranchID == "8012" || BranchID == "8013")
                    {
                        DataView view = new DataView(dtALL);
                        disticntbarnchname = view.ToTable(true, "BranchName", "BranchID");
                        DataView view3 = new DataView(dtALL);
                        disticntbarnchname1 = view3.ToTable(true, "I_Date");
                    }
                    else
                    {
                        DataView view = new DataView(dtALL);
                        disticntbarnchname = view.ToTable(true, "BranchName", "sno");
                        DataView view3 = new DataView(dtALL);
                        disticntbarnchname1 = view3.ToTable(true, "I_Date");
                    }
                    DataTable Report1 = new DataTable();
                    Report1.Columns.Add("Date");
                    foreach (DataRow branch in disticntbarnchname1.Rows)
                    {
                        DataRow newrow = Report1.NewRow();
                        DateTime dtDoe = Convert.ToDateTime(branch["i_date"].ToString());
                        string strdate = dtDoe.ToString("dd");
                        newrow["Date"] = strdate;
                        Report1.Rows.Add(newrow); ;
                    }
                    DataView view4 = new DataView(Report1);
                    DataTable disticntbarnchname4 = view4.ToTable(true, "Date");
                    DataTable Report = new DataTable();
                    Report.Columns.Add("BranchId");
                    Report.Columns.Add("DataType");
                    Report.Columns.Add("BranchName");
                    foreach (DataRow branch in disticntbarnchname4.Rows)
                    {
                        Report.Columns.Add(branch["Date"].ToString());
                    }
                    //DataRow newrow = Report.NewRow();
                    if (BranchID == "8009" || BranchID == "8012" || BranchID == "8013")
                    {
                        int j = 1;
                        foreach (DataRow branch in disticntbarnchname.Rows)
                        {
                            DataRow newrow1 = Report.NewRow();
                            if (j == 1)
                            {
                                newrow1["DataType"] = "This Month";

                            }
                            newrow1["BranchName"] = branch["BranchName"].ToString();
                            newrow1["BranchId"] = branch["BranchID"].ToString();
                            float DispQty = 0;
                            foreach (DataRow drSubData in Dt_PresentMonth.Rows)
                            {
                                if (branch["BranchID"].ToString() == drSubData["BranchID"].ToString())
                                {
                                    float.TryParse(drSubData["DeliveryQty"].ToString(), out DispQty);
                                    if (DispQty > 0)
                                    {

                                        DateTime dtDoe = Convert.ToDateTime(drSubData["i_date"].ToString());
                                        string strdate = dtDoe.ToString("dd");
                                        newrow1[strdate] = drSubData["DeliveryQty"].ToString();
                                        // yesterdaygrandtotal += DispQty;

                                    }
                                }
                            }
                            Report.Rows.Add(newrow1);

                            j++;
                        }
                        int j1 = 1;
                        foreach (DataRow branch in disticntbarnchname.Rows)
                        {
                            DataRow newrow1 = Report.NewRow();
                            if (j1 == 1)
                            {
                                newrow1["DataType"] = "Last Month";
                            }
                            newrow1["BranchName"] = branch["BranchName"].ToString();
                            newrow1["BranchId"] = branch["BranchID"].ToString();
                            float DispQty = 0;
                            foreach (DataRow drSubData in dtSub_lastMonthData.Rows)
                            {
                                if (branch["BranchID"].ToString() == drSubData["BranchID"].ToString())
                                {
                                    float.TryParse(drSubData["DeliveryQty"].ToString(), out DispQty);
                                    if (DispQty > 0)
                                    {
                                        DateTime dtDoe = Convert.ToDateTime(drSubData["i_date"].ToString());
                                        string strdate = dtDoe.ToString("dd");
                                        newrow1[strdate] = drSubData["DeliveryQty"].ToString();

                                        // lastmonthgrandtotal += DispQty;

                                    }
                                }
                            }
                            Report.Rows.Add(newrow1);
                            j1++;
                        }
                        int j2 = 1;
                        foreach (DataRow branch in disticntbarnchname.Rows)
                        {
                            DataRow newrow1 = Report.NewRow();
                            if (j2 == 1)
                            {
                                newrow1["DataType"] = "Last Year";
                            }
                            newrow1["BranchName"] = branch["BranchName"].ToString();
                            newrow1["BranchId"] = branch["BranchID"].ToString();
                            float DispQty = 0;
                            foreach (DataRow drSubData in dtSub_lastYearData.Rows)
                            {
                                if (branch["BranchID"].ToString() == drSubData["BranchID"].ToString())
                                {
                                    float.TryParse(drSubData["DeliveryQty"].ToString(), out DispQty);
                                    if (DispQty > 0)
                                    {
                                        DateTime dtDoe = Convert.ToDateTime(drSubData["i_date"].ToString());
                                        string strdate = dtDoe.ToString("dd");
                                        newrow1[strdate] = drSubData["DeliveryQty"].ToString();
                                        //lastyeargrandtotal += DispQty;
                                    }
                                }
                            }
                            if (DispQty > 0)
                            {
                                Report.Rows.Add(newrow1);
                                j2++;
                            }
                        }
                    }
                    else
                    {
                        int j1 = 1;
                        foreach (DataRow branch in disticntbarnchname.Rows)
                        {
                            DataRow newrow1 = Report.NewRow();
                            newrow1["BranchName"] = branch["BranchName"].ToString();
                            newrow1["BranchId"] = branch["sno"].ToString();
                            if (j1 == 1)
                            {
                                newrow1["DataType"] = "This Month";

                            }

                            float DispQty = 0;
                            foreach (DataRow drSubData in Dt_PresentMonth.Rows)
                            {
                                if (branch["sno"].ToString() == drSubData["sno"].ToString())
                                {
                                    float.TryParse(drSubData["DeliveryQty"].ToString(), out DispQty);
                                    if (DispQty > 0)
                                    {
                                        DateTime dtDoe = Convert.ToDateTime(drSubData["i_date"].ToString());
                                        string strdate = dtDoe.ToString("dd");
                                        newrow1[strdate] = drSubData["DeliveryQty"].ToString();
                                        //yesterdaygrandtotal += DispQty;
                                    }
                                }
                            }
                            Report.Rows.Add(newrow1);
                            j1++;
                        }
                        int j2 = 1;
                        foreach (DataRow branch in disticntbarnchname.Rows)
                        {
                            DataRow newrow1 = Report.NewRow();
                            newrow1["BranchName"] = branch["BranchName"].ToString();
                            newrow1["BranchId"] = branch["sno"].ToString();
                            if (j2 == 1)
                            {
                                newrow1["DataType"] = "Last Month";

                            }
                            float DispQty = 0;
                            foreach (DataRow drSubData in dtSub_lastMonthData.Rows)
                            {
                                if (branch["sno"].ToString() == drSubData["sno"].ToString())
                                {
                                    float.TryParse(drSubData["DeliveryQty"].ToString(), out DispQty);
                                    if (DispQty > 0)
                                    {
                                        DateTime dtDoe = Convert.ToDateTime(drSubData["i_date"].ToString());
                                        string strdate = dtDoe.ToString("dd");
                                        newrow1[strdate] = drSubData["DeliveryQty"].ToString();
                                        //lastmonthgrandtotal += DispQty;

                                    }
                                }
                            }
                            Report.Rows.Add(newrow1);
                            j2++;
                        }
                        int j3 = 1;
                        foreach (DataRow branch in disticntbarnchname.Rows)
                        {
                            DataRow newrow1 = Report.NewRow();
                            newrow1["BranchName"] = branch["BranchName"].ToString();
                            newrow1["BranchId"] = branch["sno"].ToString();
                            if (j3 == 1)
                            {
                                newrow1["DataType"] = "Last Year";
                            }
                            float DispQty = 0;
                            foreach (DataRow drSubData in dtSub_lastYearData.Rows)
                            {
                                if (branch["sno"].ToString() == drSubData["sno"].ToString())
                                {
                                    float.TryParse(drSubData["DeliveryQty"].ToString(), out DispQty);
                                    if (DispQty > 0)
                                    {
                                        DateTime dtDoe = Convert.ToDateTime(drSubData["i_date"].ToString());
                                        string strdate = dtDoe.ToString("dd");
                                        newrow1[strdate] = drSubData["DeliveryQty"].ToString();
                                        //lastyeargrandtotal += DispQty;

                                    }
                                }
                            }
                            Report.Rows.Add(newrow1);
                            j3++;
                        }
                    }
                    grddata.DataSource = Report;
                    grddata.DataBind();
                }
                #endregion
                #region
                else if (SectedDataType == "Weak")
                {
                    string strfromdate = FromDate.ToString();
                    DateTime fromDate = DateTime.Parse(strfromdate.Trim());
                    var d_fromdate = fromDate;
                    CultureInfo cul_from = CultureInfo.CurrentCulture;
                    int from_weekNum = cul_from.Calendar.GetWeekOfYear(
                        d_fromdate,
                        CalendarWeekRule.FirstDay,
                        DayOfWeek.Monday);
                    string strtodate = ToDate.ToString();
                    DateTime toDate = DateTime.Parse(strtodate.Trim());
                    var d_toDate = toDate;
                    CultureInfo cul_to = CultureInfo.CurrentCulture;
                    int to_weekNum = cul_to.Calendar.GetWeekOfYear(
                        d_toDate,
                        CalendarWeekRule.FirstDay,
                        DayOfWeek.Monday);
                    int diffweeks = to_weekNum - from_weekNum;
                    DateTime firstmonth = new DateTime();
                    DateTime lastmonth = new DateTime();
                    ToDate = ToDate.AddMonths(1);
                    TimeSpan dateSpan = ToDate.Subtract(FromDate);
                    int years = (dateSpan.Days / 365);
                    int months = ((dateSpan.Days % 365) / 31) + (years * 12);
                    int N = 0;
                    int i = 1;
                    DataTable dtPresentAllWeeks = new DataTable();
                    DataTable dtLastAllWeeks = new DataTable();
                    DataTable dtLastYearAllWeeks = new DataTable();
                    if (months != 0)
                    {
                        int newweek = from_weekNum;
                        int weaknumber = 0;
                        for (int j = 0; j < diffweeks; j++)
                        {
                            firstmonth = GetLowDate(FromDate);
                            lastmonth = GetHighDate(firstmonth.AddDays(7));
                            DateTime dtF = firstmonth;
                            string ChangedTime1 = firstmonth.ToString("dd/MMM");
                            string ChangedTime2 = lastmonth.ToString("dd/MMM");
                            string Changedt = firstmonth.ToString("MMM");
                            string mnth = firstmonth.ToString("MM");

                            weaknumber++;

                            if (BranchID == "8009")
                            {
                                cmd = new MySqlCommand("SELECT    TripInfo.Sno, TripInfo.DCNo, ROUND(SUM(ProductInfo.Qty) ) AS DeliveryQty,ROUND(AVG(ProductInfo.Qty) ) AS AvgQty, TripInfo.VehicleNo, TripInfo.Status, TripInfo.DispName, TripInfo.DispType, TripInfo.DispMode, TripInfo.BranchID As Branch_id, TripInfo.BranchName, TripInfo.Branch_Id As BranchID FROM (SELECT  tripdata.Sno, tripdata.DCNo, tripdata.I_Date, tripdata.VehicleNo, tripdata.Status, dispatch.DispName, dispatch.DispType, dispatch.DispMode, dispatch.BranchID, branchdata_1.BranchName, dispatch.Branch_Id FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE  (dispatch.GroupId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT Qty, Sno FROM (SELECT tripdata_1.Sno, tripsubdata.Qty FROM  tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno WHERE (tripdata_1.AssignDate BETWEEN @d1 AND @d2)) TripSubInfo) ProductInfo ON TripInfo.Sno = ProductInfo.Sno GROUP BY  TripInfo.Branch_Id");
                                cmd.Parameters.AddWithValue("@branch", BranchID);
                                cmd.Parameters.AddWithValue("@d1", dtF);
                                cmd.Parameters.AddWithValue("@d2", lastmonth);
                                Dt_PresentMonth = vdbmngr.SelectQuery(cmd).Tables[0];

                                cmd = new MySqlCommand("SELECT    TripInfo.Sno, TripInfo.DCNo, ROUND(SUM(ProductInfo.Qty) ) AS DeliveryQty,ROUND(AVG(ProductInfo.Qty) ) AS AvgQty, TripInfo.VehicleNo, TripInfo.Status, TripInfo.DispName, TripInfo.DispType, TripInfo.DispMode, TripInfo.BranchID As Branch_id, TripInfo.BranchName, TripInfo.Branch_Id As BranchID FROM (SELECT  tripdata.Sno, tripdata.DCNo, tripdata.I_Date, tripdata.VehicleNo, tripdata.Status, dispatch.DispName, dispatch.DispType, dispatch.DispMode, dispatch.BranchID, branchdata_1.BranchName, dispatch.Branch_Id FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE  (dispatch.GroupId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT Qty, Sno FROM (SELECT tripdata_1.Sno, tripsubdata.Qty FROM  tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno WHERE (tripdata_1.AssignDate BETWEEN @d1 AND @d2)) TripSubInfo) ProductInfo ON TripInfo.Sno = ProductInfo.Sno GROUP BY TripInfo.Branch_Id");
                                cmd.Parameters.AddWithValue("@branch", BranchID);
                                cmd.Parameters.AddWithValue("@d1", dtF.AddDays(-30));
                                cmd.Parameters.AddWithValue("@d2", lastmonth.AddDays(-30));
                                dtSub_lastMonthData = vdbmngr.SelectQuery(cmd).Tables[0];

                                cmd = new MySqlCommand("SELECT    TripInfo.Sno, TripInfo.DCNo, ROUND(SUM(ProductInfo.Qty) ) AS DeliveryQty,ROUND(AVG(ProductInfo.Qty) ) AS AvgQty, TripInfo.VehicleNo, TripInfo.Status, TripInfo.DispName, TripInfo.DispType, TripInfo.DispMode, TripInfo.BranchID As Branch_id, TripInfo.BranchName, TripInfo.Branch_Id As BranchID FROM (SELECT  tripdata.Sno, tripdata.DCNo, tripdata.I_Date, tripdata.VehicleNo, tripdata.Status, dispatch.DispName, dispatch.DispType, dispatch.DispMode, dispatch.BranchID, branchdata_1.BranchName, dispatch.Branch_Id FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE  (dispatch.GroupId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT Qty, Sno FROM (SELECT tripdata_1.Sno, tripsubdata.Qty FROM  tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno WHERE (tripdata_1.AssignDate BETWEEN @d1 AND @d2)) TripSubInfo) ProductInfo ON TripInfo.Sno = ProductInfo.Sno GROUP BY TripInfo.Branch_Id");
                                cmd.Parameters.AddWithValue("@branch", BranchID);
                                cmd.Parameters.AddWithValue("@d1", dtF.AddDays(-365));
                                cmd.Parameters.AddWithValue("@d2", lastmonth.AddDays(-365));
                                dtSub_lastYearData = vdbmngr.SelectQuery(cmd).Tables[0];
                                // type = "GroupWise";
                            }
                            else if (BranchID == "8012" || BranchID == "8013")
                            {
                                cmd = new MySqlCommand("SELECT    TripInfo.Sno, TripInfo.DCNo, ROUND(SUM(ProductInfo.Qty) ) AS DeliveryQty,ROUND(AVG(ProductInfo.Qty) ) AS AvgQty, TripInfo.VehicleNo, TripInfo.Status, TripInfo.DispName, TripInfo.DispType, TripInfo.DispMode, TripInfo.BranchID As Branch_id, TripInfo.BranchName, TripInfo.Branch_Id As BranchID FROM (SELECT  tripdata.Sno, tripdata.DCNo, tripdata.I_Date, tripdata.VehicleNo, tripdata.Status, dispatch.DispName, dispatch.DispType, dispatch.DispMode, dispatch.BranchID, branchdata_1.BranchName, dispatch.Branch_Id FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE  (dispatch.CompanyId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT Qty, Sno FROM (SELECT tripdata_1.Sno, tripsubdata.Qty FROM  tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno WHERE (tripdata_1.AssignDate BETWEEN @d1 AND @d2)) TripSubInfo) ProductInfo ON TripInfo.Sno = ProductInfo.Sno GROUP BY TripInfo.Branch_Id");
                                cmd.Parameters.AddWithValue("@branch", BranchID);
                                cmd.Parameters.AddWithValue("@d1", dtF);
                                cmd.Parameters.AddWithValue("@d2", lastmonth);
                                Dt_PresentMonth = vdbmngr.SelectQuery(cmd).Tables[0];
                                cmd = new MySqlCommand("SELECT    TripInfo.Sno, TripInfo.DCNo, ROUND(SUM(ProductInfo.Qty) ) AS DeliveryQty,ROUND(AVG(ProductInfo.Qty) ) AS AvgQty, TripInfo.VehicleNo, TripInfo.Status, TripInfo.DispName, TripInfo.DispType, TripInfo.DispMode, TripInfo.BranchID As Branch_id, TripInfo.BranchName, TripInfo.Branch_Id As BranchID FROM (SELECT  tripdata.Sno, tripdata.DCNo, tripdata.I_Date, tripdata.VehicleNo, tripdata.Status, dispatch.DispName, dispatch.DispType, dispatch.DispMode, dispatch.BranchID, branchdata_1.BranchName, dispatch.Branch_Id FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE  (dispatch.CompanyId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT Qty, Sno FROM (SELECT tripdata_1.Sno, tripsubdata.Qty FROM  tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno WHERE (tripdata_1.AssignDate BETWEEN @d1 AND @d2)) TripSubInfo) ProductInfo ON TripInfo.Sno = ProductInfo.Sno GROUP BY TripInfo.Branch_Id");
                                cmd.Parameters.AddWithValue("@branch", BranchID);
                                cmd.Parameters.AddWithValue("@d1", dtF.AddDays(-29));
                                cmd.Parameters.AddWithValue("@d2", lastmonth.AddDays(-29));
                                dtSub_lastMonthData = vdbmngr.SelectQuery(cmd).Tables[0];

                                //cmd = new MySqlCommand("SELECT    TripInfo.Sno, TripInfo.DCNo, ROUND(SUM(ProductInfo.Qty) ) AS DeliveryQty,ROUND(AVG(ProductInfo.Qty) ) AS AvgQty, TripInfo.I_Date, TripInfo.VehicleNo, TripInfo.Status, TripInfo.DispName, TripInfo.DispType, TripInfo.DispMode, TripInfo.BranchID As Branch_id, TripInfo.BranchName, TripInfo.Branch_Id As BranchID FROM (SELECT  tripdata.Sno, tripdata.DCNo, tripdata.I_Date, tripdata.VehicleNo, tripdata.Status, dispatch.DispName, dispatch.DispType, dispatch.DispMode, dispatch.BranchID, branchdata_1.BranchName, dispatch.Branch_Id FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE  (dispatch.CompanyId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT Qty, Sno FROM (SELECT tripdata_1.Sno, tripsubdata.Qty FROM  tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno WHERE (tripdata_1.AssignDate BETWEEN @d1 AND @d2)) TripSubInfo) ProductInfo ON TripInfo.Sno = ProductInfo.Sno GROUP BY DATE(TripInfo.I_Date),TripInfo.Branch_Id");
                                //cmd.Parameters.AddWithValue("@branch", BranchId);
                                //cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-180));
                                //cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-180));
                                //Dt_LastSixthMonth = vdbmngr.SelectQuery(cmd).Tables[0];

                                cmd = new MySqlCommand("SELECT    TripInfo.Sno, TripInfo.DCNo, ROUND(SUM(ProductInfo.Qty) ) AS DeliveryQty,ROUND(AVG(ProductInfo.Qty) ) AS AvgQty,  TripInfo.VehicleNo, TripInfo.Status, TripInfo.DispName, TripInfo.DispType, TripInfo.DispMode, TripInfo.BranchID As Branch_id, TripInfo.BranchName, TripInfo.Branch_Id As BranchID FROM (SELECT  tripdata.Sno, tripdata.DCNo, tripdata.I_Date, tripdata.VehicleNo, tripdata.Status, dispatch.DispName, dispatch.DispType, dispatch.DispMode, dispatch.BranchID, branchdata_1.BranchName, dispatch.Branch_Id FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE  (dispatch.CompanyId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT Qty, Sno FROM (SELECT tripdata_1.Sno, tripsubdata.Qty FROM  tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno WHERE (tripdata_1.AssignDate BETWEEN @d1 AND @d2)) TripSubInfo) ProductInfo ON TripInfo.Sno = ProductInfo.Sno GROUP BY TripInfo.Branch_Id");
                                cmd.Parameters.AddWithValue("@branch", BranchID);
                                cmd.Parameters.AddWithValue("@d1", dtF.AddDays(-365));
                                cmd.Parameters.AddWithValue("@d2", lastmonth.AddDays(-365));
                                dtSub_lastYearData = vdbmngr.SelectQuery(cmd).Tables[0];
                                // type = "CompanyWise";
                            }
                            else if (SalesType == "Plant")
                            {
                                if (BranchID == "172")
                                {
                                    cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch NOT IN (538 , 1801, 3625)) GROUP BY branchdata.sno");
                                    cmd.Parameters.AddWithValue("@d1", dtF);
                                    cmd.Parameters.AddWithValue("@d2", lastmonth);
                                    cmd.Parameters.AddWithValue("@BranchID", BranchID);
                                    Dt_PresentMonth = vdbmngr.SelectQuery(cmd).Tables[0];
                                }
                                else if (BranchID == "3625")
                                {
                                    cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch IN (4609, 3625)) GROUP BY branchdata.sno");
                                    cmd.Parameters.AddWithValue("@d1", dtF);
                                    cmd.Parameters.AddWithValue("@d2", lastmonth);
                                    cmd.Parameters.AddWithValue("@BranchID", BranchID);
                                    Dt_PresentMonth = vdbmngr.SelectQuery(cmd).Tables[0];
                                }
                                else if (BranchID == "1801")
                                {
                                    cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID)  GROUP BY branchdata.sno");
                                    cmd.Parameters.AddWithValue("@d1", dtF);
                                    cmd.Parameters.AddWithValue("@d2", lastmonth);
                                    cmd.Parameters.AddWithValue("@BranchID", BranchID);
                                    Dt_PresentMonth = vdbmngr.SelectQuery(cmd).Tables[0];
                                }
                                else
                                {
                                    cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID)  GROUP BY branchdata.sno");
                                    cmd.Parameters.AddWithValue("@d1", dtF);
                                    cmd.Parameters.AddWithValue("@d2", lastmonth);
                                    cmd.Parameters.AddWithValue("@BranchID", BranchID);
                                    Dt_PresentMonth = vdbmngr.SelectQuery(cmd).Tables[0];
                                }
                                if (BranchID == "172")
                                {
                                    cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch NOT IN (538 , 1801, 3625)) GROUP BY branchdata.sno");
                                    cmd.Parameters.AddWithValue("@d1", dtF.AddDays(-29));
                                    cmd.Parameters.AddWithValue("@d2", lastmonth.AddDays(-29));
                                    cmd.Parameters.AddWithValue("@BranchID", BranchID);
                                    dtSub_lastMonthData = vdbmngr.SelectQuery(cmd).Tables[0];
                                }
                                else if (BranchID == "3625")
                                {
                                    cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch IN (4609, 3625)) GROUP BY branchdata.sno");
                                    cmd.Parameters.AddWithValue("@d1", dtF.AddDays(-29));
                                    cmd.Parameters.AddWithValue("@d2", lastmonth.AddDays(-29));
                                    cmd.Parameters.AddWithValue("@BranchID", BranchID);
                                    dtSub_lastMonthData = vdbmngr.SelectQuery(cmd).Tables[0];
                                }
                                else if (BranchID == "1801")
                                {
                                    cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID)  GROUP BY branchdata.sno");
                                    cmd.Parameters.AddWithValue("@d1", dtF.AddDays(-29));
                                    cmd.Parameters.AddWithValue("@d2", lastmonth.AddDays(-29));
                                    cmd.Parameters.AddWithValue("@BranchID", BranchID);
                                    dtSub_lastMonthData = vdbmngr.SelectQuery(cmd).Tables[0];
                                }
                                else
                                {
                                    cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID)  GROUP BY branchdata.sno");
                                    cmd.Parameters.AddWithValue("@d1", dtF.AddDays(-29));
                                    cmd.Parameters.AddWithValue("@d2", lastmonth.AddDays(-29));
                                    cmd.Parameters.AddWithValue("@BranchID", BranchID);
                                    dtSub_lastMonthData = vdbmngr.SelectQuery(cmd).Tables[0];
                                }
                                if (BranchID == "172")
                                {
                                    cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch NOT IN (538 , 1801, 3625)) GROUP BY branchdata.sno");
                                    cmd.Parameters.AddWithValue("@d1", dtF.AddDays(-365));
                                    cmd.Parameters.AddWithValue("@d2", lastmonth.AddDays(-365));
                                    cmd.Parameters.AddWithValue("@BranchID", BranchID);
                                    dtSub_lastYearData = vdbmngr.SelectQuery(cmd).Tables[0];
                                }
                                else if (BranchID == "3625")
                                {
                                    cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch NOT IN (4609, 3625)) GROUP BY branchdata.sno");
                                    cmd.Parameters.AddWithValue("@d1", dtF.AddDays(-365));
                                    cmd.Parameters.AddWithValue("@d2", lastmonth.AddDays(-365));
                                    cmd.Parameters.AddWithValue("@BranchID", BranchID);
                                    dtSub_lastYearData = vdbmngr.SelectQuery(cmd).Tables[0];
                                }
                                else if (BranchID == "1801")
                                {
                                    cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID)  GROUP BY branchdata.sno");
                                    cmd.Parameters.AddWithValue("@d1", dtF.AddDays(-365));
                                    cmd.Parameters.AddWithValue("@d2", lastmonth.AddDays(-365));
                                    cmd.Parameters.AddWithValue("@BranchID", BranchID);
                                    dtSub_lastYearData = vdbmngr.SelectQuery(cmd).Tables[0];
                                }
                                else
                                {
                                    cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID)  GROUP BY branchdata.sno");
                                    cmd.Parameters.AddWithValue("@d1", dtF.AddDays(-365));
                                    cmd.Parameters.AddWithValue("@d2", lastmonth.AddDays(-365));
                                    cmd.Parameters.AddWithValue("@BranchID", BranchID);
                                    dtSub_lastYearData = vdbmngr.SelectQuery(cmd).Tables[0];
                                }
                            }
                            else
                            {
                                cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SubBranch = @BranchID) GROUP BY branchdata.sno");
                                cmd.Parameters.AddWithValue("@d1", dtF);
                                cmd.Parameters.AddWithValue("@d2", lastmonth);
                                cmd.Parameters.AddWithValue("@BranchID", BranchID);
                                Dt_PresentMonth = vdbmngr.SelectQuery(cmd).Tables[0];

                                cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SubBranch = @BranchID) GROUP BY branchdata.sno");
                                cmd.Parameters.AddWithValue("@d1", dtF.AddDays(-29));
                                cmd.Parameters.AddWithValue("@d2", lastmonth.AddDays(-29));
                                cmd.Parameters.AddWithValue("@BranchID", BranchID);
                                dtSub_lastMonthData = vdbmngr.SelectQuery(cmd).Tables[0];


                                cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SubBranch = @BranchID) GROUP BY branchdata.sno");
                                cmd.Parameters.AddWithValue("@d1", dtF.AddDays(-365));
                                cmd.Parameters.AddWithValue("@d2", lastmonth.AddDays(-365));
                                cmd.Parameters.AddWithValue("@BranchID", BranchID);
                                dtSub_lastYearData = vdbmngr.SelectQuery(cmd).Tables[0];
                            }

                            FromDate = FromDate.AddDays(7);
                            DataTable dttemp = new DataTable();
                            DataTable dttemp1 = new DataTable();
                            dttemp.Columns.Add("BranchName");
                            dttemp.Columns.Add("BranchID");
                            dttemp.Columns.Add("DeliveryQty");
                            dttemp.Columns.Add("Date");
                            dttemp.Columns.Add("DateType");
                            foreach (DataRow drSubData in Dt_PresentMonth.Rows)
                            {
                                DataRow newrow = dttemp.NewRow();
                                newrow["BranchName"] = drSubData["BranchName"].ToString();
                                newrow["BranchID"] = drSubData["BranchID"].ToString();
                                newrow["DeliveryQty"] = drSubData["DeliveryQty"].ToString();
                                newrow["DateType"] = "PresentMonth";
                                newrow["Date"] = "Weak" + weaknumber;
                                dttemp.Rows.Add(newrow);
                            }
                            dtPresentAllWeeks.Merge(dttemp);
                            dtALL.Merge(dttemp);
                            dttemp = new DataTable();
                            dttemp.Columns.Add("BranchName");
                            dttemp.Columns.Add("BranchID");
                            dttemp.Columns.Add("DeliveryQty");
                            dttemp.Columns.Add("Date");
                            dttemp.Columns.Add("DateType");
                            foreach (DataRow drSubData in dtSub_lastMonthData.Rows)
                            {
                                DataRow newrow = dttemp.NewRow();
                                newrow["BranchName"] = drSubData["BranchName"].ToString();
                                newrow["BranchID"] = drSubData["BranchID"].ToString();
                                newrow["DeliveryQty"] = drSubData["DeliveryQty"].ToString();
                                newrow["DateType"] = "LastMonth";
                                newrow["Date"] = "Weak" + weaknumber;
                                dttemp.Rows.Add(newrow);
                            }
                            dtLastAllWeeks.Merge(dttemp);
                            dtALL.Merge(dttemp);
                            dttemp = new DataTable();
                            dttemp.Columns.Add("BranchName");
                            dttemp.Columns.Add("BranchID");
                            dttemp.Columns.Add("DeliveryQty");
                            dttemp.Columns.Add("Date");
                            dttemp.Columns.Add("DateType");
                            foreach (DataRow drSubData in dtSub_lastYearData.Rows)
                            {
                                DataRow newrow = dttemp.NewRow();
                                newrow["BranchName"] = drSubData["BranchName"].ToString();
                                newrow["BranchID"] = drSubData["BranchID"].ToString();
                                newrow["DeliveryQty"] = drSubData["DeliveryQty"].ToString();
                                newrow["DateType"] = "LastYear";
                                newrow["Date"] = "Weak" + weaknumber;
                                dttemp.Rows.Add(newrow);
                            }
                            dtLastYearAllWeeks.Merge(dttemp);
                            dtALL.Merge(dttemp);
                            // dttemp = new DataTable();
                        }

                        //Write Code  Here

                        DataTable disticntbarnchname = new DataTable();
                        DataTable disticntbarnchname1 = new DataTable();
                        if (BranchID == "8009" || BranchID == "8012" || BranchID == "8013")
                        {
                            DataView view = new DataView(dtALL);
                            disticntbarnchname = view.ToTable(true, "BranchName", "BranchID");
                            DataView view3 = new DataView(dtALL);
                            disticntbarnchname1 = view3.ToTable(true, "Date");
                        }
                        else
                        {
                            DataView view = new DataView(dtALL);
                            disticntbarnchname = view.ToTable(true, "BranchName", "sno");
                            DataView view3 = new DataView(dtALL);
                            disticntbarnchname1 = view3.ToTable(true, "Date");
                        }
                        //DataTable Report1 = new DataTable();
                        //Report1.Columns.Add("Date");
                        //foreach (DataRow branch in disticntbarnchname1.Rows)
                        //{
                        //    DataRow newrow = Report1.NewRow();
                        //    DateTime dtDoe = Convert.ToDateTime(branch["Date"].ToString());
                        //    string strdate = dtDoe.ToString("dd");
                        //    newrow["Date"] = strdate;
                        //    Report1.Rows.Add(newrow); ;
                        //}
                        //DataView view4 = new DataView(Report1);
                        //DataTable disticntbarnchname4 = view4.ToTable(true, "Date");
                        DataTable Report = new DataTable();
                        Report.Columns.Add("BranchId");
                        Report.Columns.Add("DataType");
                        Report.Columns.Add("BranchName");
                        foreach (DataRow branch in disticntbarnchname1.Rows)
                        {
                            Report.Columns.Add(branch["Date"].ToString());
                        }
                        //DataRow newrow = Report.NewRow();
                        if (BranchID == "8009" || BranchID == "8012" || BranchID == "8013")
                        {
                            int j = 1;
                            foreach (DataRow branch in disticntbarnchname.Rows)
                            {
                                DataRow newrow1 = Report.NewRow();
                                if (j == 1)
                                {
                                    newrow1["DataType"] = "This Month";
                                }
                                newrow1["BranchName"] = branch["BranchName"].ToString();
                                newrow1["BranchId"] = branch["BranchID"].ToString();
                                float DispQty = 0;
                                foreach (DataRow drSubData in dtPresentAllWeeks.Rows)
                                {
                                    if (branch["BranchID"].ToString() == drSubData["BranchID"].ToString())
                                    {
                                        float.TryParse(drSubData["DeliveryQty"].ToString(), out DispQty);
                                        if (DispQty > 0)
                                        {

                                            double avgqty = DispQty / 2;
                                            avgqty = Math.Round(avgqty);
                                            newrow1[drSubData["Date"].ToString()] = avgqty;
                                            // yesterdaygrandtotal += DispQty;

                                        }
                                    }
                                }
                                Report.Rows.Add(newrow1);

                                j++;
                            }
                            int j1 = 1;
                            foreach (DataRow branch in disticntbarnchname.Rows)
                            {
                                DataRow newrow1 = Report.NewRow();
                                if (j1 == 1)
                                {
                                    newrow1["DataType"] = "Last Month";
                                }
                                newrow1["BranchName"] = branch["BranchName"].ToString();
                                newrow1["BranchId"] = branch["BranchID"].ToString();
                                float DispQty = 0;
                                foreach (DataRow drSubData in dtLastAllWeeks.Rows)
                                {
                                    if (branch["BranchID"].ToString() == drSubData["BranchID"].ToString())
                                    {
                                        float.TryParse(drSubData["DeliveryQty"].ToString(), out DispQty);
                                        if (DispQty > 0)
                                        {
                                            double avgqty = DispQty / 2;
                                            avgqty = Math.Round(avgqty);
                                            newrow1[drSubData["Date"].ToString()] = avgqty;

                                            // lastmonthgrandtotal += DispQty;

                                        }
                                    }
                                }
                                Report.Rows.Add(newrow1);
                                j1++;
                            }
                            int j2 = 1;
                            foreach (DataRow branch in disticntbarnchname.Rows)
                            {
                                DataRow newrow1 = Report.NewRow();
                                if (j2 == 1)
                                {
                                    newrow1["DataType"] = "Last Year";
                                }
                                newrow1["BranchName"] = branch["BranchName"].ToString();
                                newrow1["BranchId"] = branch["BranchID"].ToString();
                                float DispQty = 0;
                                foreach (DataRow drSubData in dtLastYearAllWeeks.Rows)
                                {
                                    if (branch["BranchID"].ToString() == drSubData["BranchID"].ToString())
                                    {
                                        float.TryParse(drSubData["DeliveryQty"].ToString(), out DispQty);
                                        if (DispQty > 0)
                                        {
                                            double avgqty = DispQty / 2;
                                            avgqty = Math.Round(avgqty);
                                            newrow1[drSubData["Date"].ToString()] = avgqty;
                                            //lastyeargrandtotal += DispQty;
                                        }
                                    }
                                }
                                if (DispQty > 0)
                                {
                                    Report.Rows.Add(newrow1);
                                    j2++;
                                }
                            }
                        }
                        else
                        {
                            int j = 1;
                            foreach (DataRow branch in disticntbarnchname.Rows)
                            {
                                DataRow newrow1 = Report.NewRow();
                                if (j == 1)
                                {
                                    newrow1["DataType"] = "This Month";
                                }
                                newrow1["BranchName"] = branch["BranchName"].ToString();
                                newrow1["BranchId"] = branch["sno"].ToString();
                                float DispQty = 0;
                                foreach (DataRow drSubData in dtPresentAllWeeks.Rows)
                                {
                                    if (branch["sno"].ToString() == drSubData["sno"].ToString())
                                    {
                                        float.TryParse(drSubData["DeliveryQty"].ToString(), out DispQty);
                                        if (DispQty > 0)
                                        {

                                            double avgqty = DispQty / 2;
                                            avgqty = Math.Round(avgqty);
                                            newrow1[drSubData["Date"].ToString()] = avgqty;
                                            // yesterdaygrandtotal += DispQty;

                                        }
                                    }
                                }
                                Report.Rows.Add(newrow1);
                                j++;
                            }
                            int j1 = 1;
                            foreach (DataRow branch in disticntbarnchname.Rows)
                            {
                                DataRow newrow1 = Report.NewRow();
                                if (j1 == 1)
                                {
                                    newrow1["DataType"] = "Last Month";
                                }
                                newrow1["BranchName"] = branch["BranchName"].ToString();
                                newrow1["BranchId"] = branch["sno"].ToString();
                                float DispQty = 0;
                                foreach (DataRow drSubData in dtLastAllWeeks.Rows)
                                {
                                    if (branch["sno"].ToString() == drSubData["sno"].ToString())
                                    {
                                        float.TryParse(drSubData["DeliveryQty"].ToString(), out DispQty);
                                        if (DispQty > 0)
                                        {
                                            double avgqty = DispQty / 2;
                                            avgqty = Math.Round(avgqty);
                                            newrow1[drSubData["Date"].ToString()] = avgqty;

                                            // lastmonthgrandtotal += DispQty;

                                        }
                                    }
                                }
                                Report.Rows.Add(newrow1);
                                j1++;
                            }
                            int j2 = 1;
                            foreach (DataRow branch in disticntbarnchname.Rows)
                            {
                                DataRow newrow1 = Report.NewRow();
                                if (j2 == 1)
                                {
                                    newrow1["DataType"] = "Last Year";
                                }
                                newrow1["BranchName"] = branch["BranchName"].ToString();
                                newrow1["BranchId"] = branch["sno"].ToString();
                                float DispQty = 0;
                                foreach (DataRow drSubData in dtLastYearAllWeeks.Rows)
                                {
                                    if (branch["sno"].ToString() == drSubData["sno"].ToString())
                                    {
                                        float.TryParse(drSubData["DeliveryQty"].ToString(), out DispQty);
                                        if (DispQty > 0)
                                        {
                                            double avgqty = DispQty / 2;
                                            avgqty = Math.Round(avgqty);
                                            newrow1[drSubData["Date"].ToString()] = avgqty;
                                            //lastyeargrandtotal += DispQty;
                                        }
                                    }
                                }
                                if (DispQty > 0)
                                {
                                    Report.Rows.Add(newrow1);
                                    j2++;
                                }
                            }
                        }
                        grddata.DataSource = Report;
                        grddata.DataBind();
                    }
                }
                #endregion
                #region
                else if (SectedDataType == "Month")
                {
                    DateTime firstmonth = new DateTime();
                    DateTime lastmonth = new DateTime();
                    ToDate = ToDate.AddMonths(1);
                    TimeSpan dateSpan = ToDate.Subtract(FromDate);
                    int years = (dateSpan.Days / 365);
                    int months = ((dateSpan.Days % 365) / 31) + (years * 12);
                    int N = 0;
                    int i = 1;

                    if (months != 0)
                    {
                        int monthnumber = 0;
                        for (int j = 0; j < months; j++)
                        {
                            firstmonth = GetLowMonthRetrive(FromDate.AddMonths(j));
                            lastmonth = GetHighMonth(firstmonth);
                            DateTime dtF = firstmonth.AddDays(-1);
                            TimeSpan dateSpan2 = lastmonth.Subtract(dtF);
                            int NoOfdays = dateSpan2.Days;
                            monthnumber++;
                            if (BranchID == "8009")
                            {
                                cmd = new MySqlCommand("SELECT    TripInfo.Sno, TripInfo.DCNo, ROUND(SUM(ProductInfo.Qty) ) AS DeliveryQty,ROUND(AVG(ProductInfo.Qty) ) AS AvgQty, TripInfo.VehicleNo, TripInfo.Status, TripInfo.DispName, TripInfo.DispType, TripInfo.DispMode, TripInfo.BranchID As Branch_id, TripInfo.BranchName, TripInfo.Branch_Id As BranchID FROM (SELECT  tripdata.Sno, tripdata.DCNo, tripdata.I_Date, tripdata.VehicleNo, tripdata.Status, dispatch.DispName, dispatch.DispType, dispatch.DispMode, dispatch.BranchID, branchdata_1.BranchName, dispatch.Branch_Id FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE  (dispatch.GroupId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT Qty, Sno FROM (SELECT tripdata_1.Sno, tripsubdata.Qty FROM  tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno WHERE (tripdata_1.AssignDate BETWEEN @d1 AND @d2)) TripSubInfo) ProductInfo ON TripInfo.Sno = ProductInfo.Sno GROUP BY  TripInfo.Branch_Id");
                                cmd.Parameters.AddWithValue("@branch", BranchID);
                                cmd.Parameters.AddWithValue("@d1", dtF);
                                cmd.Parameters.AddWithValue("@d2", lastmonth);
                                Dt_PresentMonth = vdbmngr.SelectQuery(cmd).Tables[0];



                                cmd = new MySqlCommand("SELECT    TripInfo.Sno, TripInfo.DCNo, ROUND(SUM(ProductInfo.Qty) ) AS DeliveryQty,ROUND(AVG(ProductInfo.Qty) ) AS AvgQty, TripInfo.VehicleNo, TripInfo.Status, TripInfo.DispName, TripInfo.DispType, TripInfo.DispMode, TripInfo.BranchID As Branch_id, TripInfo.BranchName, TripInfo.Branch_Id As BranchID FROM (SELECT  tripdata.Sno, tripdata.DCNo, tripdata.I_Date, tripdata.VehicleNo, tripdata.Status, dispatch.DispName, dispatch.DispType, dispatch.DispMode, dispatch.BranchID, branchdata_1.BranchName, dispatch.Branch_Id FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE  (dispatch.GroupId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT Qty, Sno FROM (SELECT tripdata_1.Sno, tripsubdata.Qty FROM  tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno WHERE (tripdata_1.AssignDate BETWEEN @d1 AND @d2)) TripSubInfo) ProductInfo ON TripInfo.Sno = ProductInfo.Sno GROUP BY TripInfo.Branch_Id");
                                cmd.Parameters.AddWithValue("@branch", BranchID);
                                cmd.Parameters.AddWithValue("@d1", dtF.AddDays(-365));
                                cmd.Parameters.AddWithValue("@d2", lastmonth.AddDays(-365));
                                dtSub_lastYearData = vdbmngr.SelectQuery(cmd).Tables[0];
                                // type = "GroupWise";
                            }
                            else if (BranchID == "8012" || BranchID == "8013")
                            {
                                cmd = new MySqlCommand("SELECT    TripInfo.Sno, TripInfo.DCNo, ROUND(SUM(ProductInfo.Qty) ) AS DeliveryQty,ROUND(AVG(ProductInfo.Qty) ) AS AvgQty, TripInfo.VehicleNo, TripInfo.Status, TripInfo.DispName, TripInfo.DispType, TripInfo.DispMode, TripInfo.BranchID As Branch_id, TripInfo.BranchName, TripInfo.Branch_Id As BranchID FROM (SELECT  tripdata.Sno, tripdata.DCNo, tripdata.I_Date, tripdata.VehicleNo, tripdata.Status, dispatch.DispName, dispatch.DispType, dispatch.DispMode, dispatch.BranchID, branchdata_1.BranchName, dispatch.Branch_Id FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE  (dispatch.CompanyId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT Qty, Sno FROM (SELECT tripdata_1.Sno, tripsubdata.Qty FROM  tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno WHERE (tripdata_1.AssignDate BETWEEN @d1 AND @d2)) TripSubInfo) ProductInfo ON TripInfo.Sno = ProductInfo.Sno GROUP BY TripInfo.Branch_Id");
                                cmd.Parameters.AddWithValue("@branch", BranchID);
                                cmd.Parameters.AddWithValue("@d1", dtF);
                                cmd.Parameters.AddWithValue("@d2", lastmonth);
                                Dt_PresentMonth = vdbmngr.SelectQuery(cmd).Tables[0];




                                cmd = new MySqlCommand("SELECT    TripInfo.Sno, TripInfo.DCNo, ROUND(SUM(ProductInfo.Qty) ) AS DeliveryQty,ROUND(AVG(ProductInfo.Qty) ) AS AvgQty,  TripInfo.VehicleNo, TripInfo.Status, TripInfo.DispName, TripInfo.DispType, TripInfo.DispMode, TripInfo.BranchID As Branch_id, TripInfo.BranchName, TripInfo.Branch_Id As BranchID FROM (SELECT  tripdata.Sno, tripdata.DCNo, tripdata.I_Date, tripdata.VehicleNo, tripdata.Status, dispatch.DispName, dispatch.DispType, dispatch.DispMode, dispatch.BranchID, branchdata_1.BranchName, dispatch.Branch_Id FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE  (dispatch.CompanyId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT Qty, Sno FROM (SELECT tripdata_1.Sno, tripsubdata.Qty FROM  tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno WHERE (tripdata_1.AssignDate BETWEEN @d1 AND @d2)) TripSubInfo) ProductInfo ON TripInfo.Sno = ProductInfo.Sno GROUP BY TripInfo.Branch_Id");
                                cmd.Parameters.AddWithValue("@branch", BranchID);
                                cmd.Parameters.AddWithValue("@d1", dtF.AddDays(-365));
                                cmd.Parameters.AddWithValue("@d2", lastmonth.AddDays(-365));
                                dtSub_lastYearData = vdbmngr.SelectQuery(cmd).Tables[0];
                                // type = "CompanyWise";
                            }
                            else if (SalesType == "Plant")
                            {
                                if (BranchID == "172")
                                {
                                    cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch NOT IN (538 , 1801, 3625)) GROUP BY branchdata.sno");
                                    cmd.Parameters.AddWithValue("@d1", dtF);
                                    cmd.Parameters.AddWithValue("@d2", lastmonth);
                                    cmd.Parameters.AddWithValue("@BranchID", BranchID);
                                    Dt_PresentMonth = vdbmngr.SelectQuery(cmd).Tables[0];
                                }
                                else if (BranchID == "3625")
                                {
                                    cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch IN (4609, 3625)) GROUP BY branchdata.sno");
                                    cmd.Parameters.AddWithValue("@d1", dtF);
                                    cmd.Parameters.AddWithValue("@d2", lastmonth);
                                    cmd.Parameters.AddWithValue("@BranchID", BranchID);
                                    Dt_PresentMonth = vdbmngr.SelectQuery(cmd).Tables[0];
                                }
                                else if (BranchID == "1801")
                                {
                                    cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID)  GROUP BY branchdata.sno");
                                    cmd.Parameters.AddWithValue("@d1", dtF);
                                    cmd.Parameters.AddWithValue("@d2", lastmonth);
                                    cmd.Parameters.AddWithValue("@BranchID", BranchID);
                                    Dt_PresentMonth = vdbmngr.SelectQuery(cmd).Tables[0];
                                }
                                else
                                {
                                    cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID)  GROUP BY branchdata.sno");
                                    cmd.Parameters.AddWithValue("@d1", dtF);
                                    cmd.Parameters.AddWithValue("@d2", lastmonth);
                                    cmd.Parameters.AddWithValue("@BranchID", BranchID);
                                    Dt_PresentMonth = vdbmngr.SelectQuery(cmd).Tables[0];
                                }
                                if (BranchID == "172")
                                {
                                    cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch NOT IN (538 , 1801, 3625)) GROUP BY branchdata.sno");
                                    cmd.Parameters.AddWithValue("@d1", dtF.AddDays(-365));
                                    cmd.Parameters.AddWithValue("@d2", lastmonth.AddDays(-365));
                                    cmd.Parameters.AddWithValue("@BranchID", BranchID);
                                    dtSub_lastYearData = vdbmngr.SelectQuery(cmd).Tables[0];
                                }
                                else if (BranchID == "3625")
                                {
                                    cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch NOT IN (4609, 3625)) GROUP BY branchdata.sno");
                                    cmd.Parameters.AddWithValue("@d1", dtF.AddDays(-365));
                                    cmd.Parameters.AddWithValue("@d2", lastmonth.AddDays(-365));
                                    cmd.Parameters.AddWithValue("@BranchID", BranchID);
                                    dtSub_lastYearData = vdbmngr.SelectQuery(cmd).Tables[0];
                                }
                                else if (BranchID == "1801")
                                {
                                    cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID)  GROUP BY branchdata.sno");
                                    cmd.Parameters.AddWithValue("@d1", dtF.AddDays(-365));
                                    cmd.Parameters.AddWithValue("@d2", lastmonth.AddDays(-365));
                                    cmd.Parameters.AddWithValue("@BranchID", BranchID);
                                    dtSub_lastYearData = vdbmngr.SelectQuery(cmd).Tables[0];
                                }
                                else
                                {
                                    cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID)  GROUP BY branchdata.sno");
                                    cmd.Parameters.AddWithValue("@d1", dtF.AddDays(-365));
                                    cmd.Parameters.AddWithValue("@d2", lastmonth.AddDays(-365));
                                    cmd.Parameters.AddWithValue("@BranchID", BranchID);
                                    dtSub_lastYearData = vdbmngr.SelectQuery(cmd).Tables[0];
                                }
                            }
                            else
                            {
                                cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SubBranch = @BranchID) GROUP BY branchdata.sno");
                                cmd.Parameters.AddWithValue("@d1", dtF);
                                cmd.Parameters.AddWithValue("@d2", lastmonth);
                                cmd.Parameters.AddWithValue("@BranchID", BranchID);
                                Dt_PresentMonth = vdbmngr.SelectQuery(cmd).Tables[0];




                                cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SubBranch = @BranchID) GROUP BY branchdata.sno");
                                cmd.Parameters.AddWithValue("@d1", dtF.AddDays(-365));
                                cmd.Parameters.AddWithValue("@d2", lastmonth.AddDays(-365));
                                cmd.Parameters.AddWithValue("@BranchID", BranchID);
                                dtSub_lastYearData = vdbmngr.SelectQuery(cmd).Tables[0];
                            }

                            DataTable dttemp = new DataTable();
                            DataTable dttemp1 = new DataTable();
                            dttemp.Columns.Add("BranchName");
                            dttemp.Columns.Add("BranchID");
                            dttemp.Columns.Add("DeliveryQty");
                            dttemp.Columns.Add("Date");
                            dttemp.Columns.Add("DateType");
                            foreach (DataRow drSubData in Dt_PresentMonth.Rows)
                            {
                                DataRow newrow = dttemp.NewRow();
                                newrow["BranchName"] = drSubData["BranchName"].ToString();
                                newrow["BranchID"] = drSubData["BranchID"].ToString();
                                newrow["DeliveryQty"] = drSubData["DeliveryQty"].ToString();
                                newrow["DateType"] = "PresentYear";
                                newrow["Date"] = firstmonth.ToString("MMM");
                                dttemp.Rows.Add(newrow);
                            }
                            dtPresentAllMonth.Merge(dttemp);
                            dtALL.Merge(dttemp);

                            dttemp = new DataTable();
                            dttemp.Columns.Add("BranchName");
                            dttemp.Columns.Add("BranchID");
                            dttemp.Columns.Add("DeliveryQty");
                            dttemp.Columns.Add("Date");
                            dttemp.Columns.Add("DateType");
                            foreach (DataRow drSubData in dtSub_lastYearData.Rows)
                            {
                                DataRow newrow = dttemp.NewRow();
                                newrow["BranchName"] = drSubData["BranchName"].ToString();
                                newrow["BranchID"] = drSubData["BranchID"].ToString();
                                newrow["DeliveryQty"] = drSubData["DeliveryQty"].ToString();
                                newrow["DateType"] = "LastYear";
                                newrow["Date"] = firstmonth.ToString("MMM");
                                dttemp.Rows.Add(newrow);
                            }
                            dtLastYearAllMonth.Merge(dttemp);
                            dtALL.Merge(dttemp);
                            // dttemp = new DataTable();
                        }
                    }
                    //Write Code  Here
                    DataTable disticnt_barnchname = new DataTable();
                    DataTable disticnt_barnchname1 = new DataTable();
                    if (BranchID == "8009" || BranchID == "8012" || BranchID == "8013")
                    {
                        DataView view = new DataView(dtALL);
                        disticnt_barnchname = view.ToTable(true, "BranchName", "BranchID");
                        DataView view3 = new DataView(dtALL);
                        disticnt_barnchname1 = view3.ToTable(true, "Date");
                    }
                    else
                    {
                        DataView view = new DataView(dtALL);
                        disticnt_barnchname = view.ToTable(true, "BranchName", "sno");
                        DataView view3 = new DataView(dtALL);
                        disticnt_barnchname1 = view3.ToTable(true, "Date");
                    }

                    DataTable Data_Report = new DataTable();
                    Data_Report.Columns.Add("BranchId");
                    Data_Report.Columns.Add("DataType");
                    Data_Report.Columns.Add("BranchName");
                    foreach (DataRow branch in disticnt_barnchname1.Rows)
                    {
                        Data_Report.Columns.Add(branch["Date"].ToString());
                    }
                    //DataRow newrow = Report.NewRow();
                    if (BranchID == "8009" || BranchID == "8012" || BranchID == "8013")
                    {
                        int j = 1;
                        foreach (DataRow branch in disticnt_barnchname.Rows)
                        {
                            DataRow newrow1 = Data_Report.NewRow();
                            if (j == 1)
                            {
                                newrow1["DataType"] = "This Month";
                            }
                            newrow1["BranchName"] = branch["BranchName"].ToString();
                            newrow1["BranchId"] = branch["BranchID"].ToString();
                            float DispQty = 0;
                            foreach (DataRow drSubData in dtPresentAllMonth.Rows)
                            {
                                if (branch["BranchID"].ToString() == drSubData["BranchID"].ToString())
                                {
                                    float.TryParse(drSubData["DeliveryQty"].ToString(), out DispQty);
                                    if (DispQty > 0)
                                    {

                                        double avgqty = DispQty / 2;
                                        avgqty = Math.Round(avgqty);
                                        newrow1[drSubData["Date"].ToString()] = avgqty;
                                        // yesterdaygrandtotal += DispQty;

                                    }
                                }
                            }
                            Data_Report.Rows.Add(newrow1);

                            j++;
                        }

                        int j2 = 1;
                        foreach (DataRow branch in disticnt_barnchname.Rows)
                        {
                            DataRow newrow1 = Data_Report.NewRow();
                            if (j2 == 1)
                            {
                                newrow1["DataType"] = "Last Year";
                            }
                            newrow1["BranchName"] = branch["BranchName"].ToString();
                            newrow1["BranchId"] = branch["BranchID"].ToString();
                            float DispQty = 0;
                            foreach (DataRow drSubData in dtLastYearAllMonth.Rows)
                            {
                                if (branch["BranchID"].ToString() == drSubData["BranchID"].ToString())
                                {
                                    float.TryParse(drSubData["DeliveryQty"].ToString(), out DispQty);
                                    if (DispQty > 0)
                                    {
                                        double avgqty = DispQty / 2;
                                        avgqty = Math.Round(avgqty);
                                        newrow1[drSubData["Date"].ToString()] = avgqty;
                                        //lastyeargrandtotal += DispQty;
                                    }
                                }
                            }
                            if (DispQty > 0)
                            {
                                Data_Report.Rows.Add(newrow1);
                                j2++;
                            }
                        }
                    }
                    else
                    {
                        int j = 1;
                        foreach (DataRow branch in disticnt_barnchname.Rows)
                        {
                            DataRow newrow1 = Data_Report.NewRow();
                            if (j == 1)
                            {
                                newrow1["DataType"] = "This Month";
                            }
                            newrow1["BranchName"] = branch["BranchName"].ToString();
                            newrow1["BranchId"] = branch["sno"].ToString();
                            float DispQty = 0;
                            foreach (DataRow drSubData in dtPresentAllMonth.Rows)
                            {
                                if (branch["sno"].ToString() == drSubData["sno"].ToString())
                                {
                                    float.TryParse(drSubData["DeliveryQty"].ToString(), out DispQty);
                                    if (DispQty > 0)
                                    {

                                        double avgqty = DispQty / 2;
                                        avgqty = Math.Round(avgqty);
                                        newrow1[drSubData["Date"].ToString()] = avgqty;
                                        // yesterdaygrandtotal += DispQty;

                                    }
                                }
                            }
                            Data_Report.Rows.Add(newrow1);

                            j++;
                        }
                        int j2 = 1;
                        foreach (DataRow branch in disticnt_barnchname.Rows)
                        {
                            DataRow newrow1 = Data_Report.NewRow();
                            if (j2 == 1)
                            {
                                newrow1["DataType"] = "Last Year";
                            }
                            newrow1["BranchName"] = branch["BranchName"].ToString();
                            newrow1["BranchId"] = branch["sno"].ToString();
                            float DispQty = 0;
                            foreach (DataRow drSubData in dtLastYearAllMonth.Rows)
                            {
                                if (branch["sno"].ToString() == drSubData["sno"].ToString())
                                {
                                    float.TryParse(drSubData["DeliveryQty"].ToString(), out DispQty);
                                    if (DispQty > 0)
                                    {
                                        double avgqty = DispQty / 2;
                                        avgqty = Math.Round(avgqty);
                                        newrow1[drSubData["Date"].ToString()] = avgqty;
                                        //lastyeargrandtotal += DispQty;
                                    }
                                }
                            }
                            if (DispQty > 0)
                            {
                                Data_Report.Rows.Add(newrow1);
                                j2++;
                            }
                        }
                    }
                    grddata.DataSource = Data_Report;
                    grddata.DataBind();
                }
                #endregion
            }
        }
        catch
        {

        }
    }
    protected void btnsalesoffice_click(object sender, EventArgs e)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            ViewState["Val"] = "btnclick";
            string Type = ddltype.SelectedItem.Value;
            string DataType = ddlDataType.SelectedItem.Value;
            string barnchCategory = ddlbarnchCategory.SelectedItem.Value;
            divHide1.Style.Add("display", "block");
            divMainAddNewRow2.Style.Add("display", "block");

            string SD = Label47.Text;
            string TD = Label48.Text;

            string s = Session["DIndDate"].ToString();
            var dt = DateTime.ParseExact(s, "ddd MMM dd yyyy HH:mm:ss 'GMT'zzz", System.Globalization.CultureInfo.InvariantCulture);
            string IndDate = dt.ToString("yyyy-MM-dd");
            DateTime ServerDateCurrentdate = Convert.ToDateTime(SD);
            DateTime FromDate = ServerDateCurrentdate;
            string edate = Session["Todate"].ToString();
            var edt = DateTime.ParseExact(edate, "ddd MMM dd yyyy HH:mm:ss 'GMT'zzz", System.Globalization.CultureInfo.InvariantCulture);
            string Tdate = edt.ToString("yyyy-MM-dd");




            DateTime To_Date = Convert.ToDateTime(TD);
            DateTime ToDate = To_Date;
            DateTime lastmonthfrom = new DateTime();
            DateTime lastmonthto = new DateTime();
            DateTime YearServerDate_Currentdate = Convert.ToDateTime(IndDate);
            DateTime LastYearFromDate = YearServerDate_Currentdate;
            DateTime YearServerDate_Todate = Convert.ToDateTime(Tdate);
            DateTime LastYearToDate = YearServerDate_Todate;
            lastmonthfrom = FromDate.AddMonths(-1);
            lastmonthto = ToDate.AddMonths(-1);
            LastYearFromDate = LastYearFromDate.AddYears(-1);
            LastYearToDate = LastYearToDate.AddYears(-1);
            string Type1 = "Sales Office Wise";
            if (Type1 == "Sales Office Wise")
            {
                string BranchID = "8009";
                divHide1.Style.Add("display", "block");
                divMainAddNewRow2.Style.Add("display", "block");
                div_MainPlantDetails1.Style.Add("display", "none");
                LinkButton12.Visible = false;
                DataTable dtALL = new DataTable();
                DataTable dtSub_yesterdayData = new DataTable();
                DataTable dtSub_LastWeekData = new DataTable();
                DataTable dtSub_lastMonthData = new DataTable();
                DataTable dtSub_lastYearData = new DataTable();
                DataTable tempbranchindentsale = new DataTable();
                cmd = new MySqlCommand("SELECT  branchmappingtable.SubBranch, branchmappingtable.SuperBranch, branchmappingtable.SubBranch AS Expr1, branchdata.BranchName,branchdata.SalesType FROM  branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno WHERE  (branchmappingtable.SuperBranch = @Branchid) GROUP BY branchmappingtable.SubBranch ORDER BY companyname, branchmappingtable.SubBranch");
                cmd.Parameters.AddWithValue("@Branchid", BranchID);
                DataTable BtGroupBranches = vdbmngr.SelectQuery(cmd).Tables[0];
                cmd = new MySqlCommand("SELECT    TripInfo.Sno, ProductInfo.Categoryname, ROUND(SUM(ProductInfo.Qty) ) AS dispatchqty, TripInfo.I_Date, ProductInfo.CatSno, TripInfo.BranchName, TripInfo.BranchID, TripInfo.Branch_Id, TripInfo.GroupId,TripInfo.CompanyId FROM (SELECT tripdata.Sno, tripdata.I_Date, branchdata_1.BranchName, dispatch.BranchID, dispatch.Branch_Id, dispatch.GroupId, dispatch.CompanyId FROM  branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE (dispatch.GroupId = @branch) AND (tripdata.AssignDate BETWEEN @d11 AND @d22)) TripInfo INNER JOIN (SELECT Categoryname, Sno, Qty, CatSno FROM (SELECT  products_category.sno AS CatSno, products_category.Categoryname, tripdata_1.Sno, tripsubdata.Qty FROM tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno INNER JOIN productsdata ON tripsubdata.ProductId = productsdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno WHERE (tripdata_1.AssignDate BETWEEN @d11 AND @d22)) TripSubInfo) ProductInfo ON TripInfo.Sno = ProductInfo.Sno GROUP BY TripInfo.Branch_Id ORDER BY TripInfo.CompanyId");
                cmd.Parameters.AddWithValue("@branch", BranchID);
                cmd.Parameters.AddWithValue("@d11", GetLowDate(FromDate).AddDays(-1));
                cmd.Parameters.AddWithValue("@d22", GetHighDate(ToDate).AddDays(-1));
                DataTable dtDispatchesbranches = vdbmngr.SelectQuery(cmd).Tables[0];
                DataTable Report = new DataTable();
                Report.Columns.Add("cmpid");
                Report.Columns.Add("sno");
                Report.Columns.Add("superbranch");
                Report.Columns.Add("branchname");
                Report.Columns.Add("deliveryqty").DataType = typeof(Double); ;
                Report.Columns.Add("avgqty");
                Report.Columns.Add("salevalue").DataType = typeof(Double); ;
                double compayqtytotal = 0; double compayvaluetotal = 0;
                double totalqtygrandtotal = 0; double totalvaluegrandtotal = 0;
                foreach (DataRow drgrbranch in dtDispatchesbranches.Rows)
                {
                    string companyid = drgrbranch["CompanyId"].ToString();
                    if (drgrbranch["Branch_Id"].ToString() == "172")
                    {
                        cmd = new MySqlCommand("SELECT   branchmappingtable.SuperBranch,branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch NOT IN (538, 1801, 3625)) GROUP BY branchdata.sno");
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-1));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-1));
                        cmd.Parameters.AddWithValue("@BranchID", drgrbranch["Branch_Id"].ToString());
                        tempbranchindentsale = vdbmngr.SelectQuery(cmd).Tables[0];
                    }
                    else if (drgrbranch["Branch_Id"].ToString() == "3625")
                    {
                        cmd = new MySqlCommand("SELECT   branchmappingtable.SuperBranch,branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch IN (4609, 3625)) GROUP BY branchdata.sno");
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-1));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-1));
                        cmd.Parameters.AddWithValue("@BranchID", drgrbranch["Branch_Id"].ToString());
                        tempbranchindentsale = vdbmngr.SelectQuery(cmd).Tables[0];
                    }
                    else if (drgrbranch["Branch_Id"].ToString() == "1801")
                    {
                        cmd = new MySqlCommand("SELECT   branchmappingtable.SuperBranch,branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID)  GROUP BY branchdata.sno");
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-1));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-1));
                        cmd.Parameters.AddWithValue("@BranchID", drgrbranch["Branch_Id"].ToString());
                        tempbranchindentsale = vdbmngr.SelectQuery(cmd).Tables[0];
                    }
                    else if (drgrbranch["Branch_Id"].ToString() == "158")
                    {
                        cmd = new MySqlCommand("SELECT   branchmappingtable.SuperBranch,branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch NOT IN (159,4626))  GROUP BY branchdata.sno");
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-1));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-1));
                        cmd.Parameters.AddWithValue("@BranchID", drgrbranch["Branch_Id"].ToString());
                        tempbranchindentsale = vdbmngr.SelectQuery(cmd).Tables[0];

                        cmd = new MySqlCommand("SELECT branchmappingtable.SuperBranch,branchdata.BranchName,ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,  branchmappingtable.SuperBranch AS sno FROM (SELECT  IndentNo, Branch_id, I_date, Status, IndentType FROM  indents WHERE (I_date BETWEEN @d1 AND @d2) AND (Status <> 'D')) indent INNER JOIN branchdata ON indent.Branch_id = branchdata.sno INNER JOIN indents_subtable ON indent.IndentNo = indents_subtable.IndentNo INNER JOIN branchmappingtable ON branchdata.sno = branchmappingtable.SubBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable.SuperBranch = branchdata_1.sno WHERE (branchmappingtable.SuperBranch = @BranchID) AND (indents_subtable.DeliveryQty <> 0) GROUP BY branchmappingtable.SuperBranch ORDER BY branchdata.BranchName");
                        //cmd = new MySqlCommand("SELECT  SubBranch, ROUND(SUM(DeliveryQty) ) AS DeliveryQty,  ROUND(SUM(DeliveryQty * UnitCost) ) AS salevalue, SuperBranch FROM  (SELECT  t1.SubBranch, t1.SuperBranch, t2.DeliveryQty, t2.unitQty, t2.UnitCost FROM (SELECT branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch FROM  branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch WHERE (branchmappingtable_1.SuperBranch = @branchid) GROUP BY branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch) t1 LEFT OUTER JOIN (SELECT  indents_subtable.DeliveryQty, indents_subtable.unitQty, indents_subtable.UnitCost, branchmappingtable_2.SuperBranch, branchmappingtable_2.SubBranch FROM   branchmappingtable branchmappingtable_2 INNER JOIN (SELECT  IndentNo, Branch_id, I_date FROM   indents WHERE  (I_date BETWEEN @d1 AND @d2)) ind ON branchmappingtable_2.SubBranch = ind.Branch_id INNER JOIN indents_subtable ON ind.IndentNo = indents_subtable.IndentNo) t2 ON t2.SuperBranch = t1.SubBranch) derivedtbl_1 GROUP BY SuperBranch");
                        cmd.Parameters.AddWithValue("@BranchID", drgrbranch["Branch_Id"].ToString());
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-1));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-1));
                        DataTable temptable = vdbmngr.SelectQuery(cmd).Tables[0];
                        tempbranchindentsale.Merge(temptable);
                    }
                    else
                    {
                        cmd = new MySqlCommand("SELECT   branchmappingtable.SuperBranch,branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID)  GROUP BY branchdata.sno");
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-1));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-1));
                        cmd.Parameters.AddWithValue("@BranchID", drgrbranch["Branch_Id"].ToString());
                        tempbranchindentsale = vdbmngr.SelectQuery(cmd).Tables[0];
                    }
                    if (tempbranchindentsale.Rows.Count > 0)
                    {
                        foreach (DataRow dr in tempbranchindentsale.Rows)
                        {
                            DataRow newrow = Report.NewRow();
                            newrow["cmpid"] = companyid;
                            newrow["sno"] = dr["sno"].ToString();
                            newrow["superbranch"] = dr["SuperBranch"].ToString();
                            if (dr["sno"].ToString() == "158")
                            {
                                newrow["BranchName"] = "Wyra Plant";
                            }
                            else
                            {
                                newrow["branchname"] = dr["BranchName"].ToString();
                            }
                         
                                newrow["sno"] = dr["sno"].ToString();
                            double dqty = 0; double dsalevalue = 0;
                            double.TryParse(dr["DeliveryQty"].ToString(), out dqty);
                            double.TryParse(dr["SaleValue"].ToString(), out dsalevalue);
                            newrow["deliveryqty"] = dqty;
                            newrow["avgqty"] = dr["AvgQty"].ToString();
                            newrow["salevalue"] = dsalevalue;
                            Report.Rows.Add(newrow);
                        }
                    }
                }
                if (Report.Rows.Count > 0)
                {

                    //double  GroupTotal=compaytotal + compay_total;

                    DataView view = new DataView(Report);
                    DataTable disticntbarnchname = view.ToTable(true, "cmpid");
                    string prevcmpid = "";
                    double totsaleamt = 0;
                    double totsaleqty = 0;
                    double grandtotsalesumqty = 0;
                    double grandtotsalesumvalue = 0;
                    int k = 1;
                    DataTable approval = new DataTable();
                    approval.Columns.Add("BranchID");
                    approval.Columns.Add("Branch Name");
                    approval.Columns.Add("AvgRate");

                    approval.Columns.Add("Sale Quantity");
                    approval.Columns.Add("Sale Value");
                    foreach (DataRow drr in disticntbarnchname.Rows)
                    {
                        compayqtytotal = Convert.ToDouble(Report.Compute("SUM(deliveryqty)", "cmpid=" + drr["cmpid"].ToString() + ""));
                        compayvaluetotal = Convert.ToDouble(Report.Compute("SUM(salevalue)", "cmpid=" + drr["cmpid"].ToString() + ""));
                        totalqtygrandtotal += compayqtytotal;
                        totalvaluegrandtotal += compayvaluetotal;
                    }
                    foreach (DataRow de in disticntbarnchname.Rows)
                    {
                        compayqtytotal = Convert.ToDouble(Report.Compute("SUM(deliveryqty)", "cmpid=" + de["cmpid"].ToString() + ""));
                        compayvaluetotal = Convert.ToDouble(Report.Compute("SUM(salevalue)", "cmpid=" + de["cmpid"].ToString() + ""));
                        // compay_total = Convert.ToDouble(Report.Compute("SUM(salevalue)", "cmpid=" + de["cmpid"].ToString() + ""));
                        foreach (DataRow dr in Report.Select("cmpid='" + de["cmpid"].ToString() + "'"))
                        //foreach (DataRow dr in Report.Rows)
                        {
                            float tddue = 0;
                            float tdcashdue = 0;
                            float finaltddue = 0;
                            string cmpid = dr["cmpid"].ToString();
                            DataRow totaldummy = approval.NewRow();
                            //totaldummy["Sno"] = k++;//dr["sno"].ToString();
                            totaldummy["BranchID"] = dr["sno"].ToString();
                            totaldummy["Branch Name"] = dr["branchname"].ToString();
                            CultureInfo hindi = new CultureInfo("hi-IN");
                            if (cmpid == prevcmpid)
                            {
                                double tempsalevalue = 0; double tempcoll = 0; double deliveryqty = 0;
                                double.TryParse(dr["salevalue"].ToString(), out tempsalevalue);
                                double salevalue = Math.Round(tempsalevalue);
                                totsaleamt += salevalue;
                                double salevalueper = (salevalue / compayvaluetotal) * 100;
                                double.TryParse(dr["deliveryqty"].ToString(), out deliveryqty);
                                double DueAmount = Math.Round(deliveryqty);
                                totsaleqty += DueAmount;
                                double saleqtyper = (DueAmount / compayqtytotal) * 100;
                                if (salevalue.ToString() != "")
                                {
                                    //Getapproval.salevalue = salevalue.ToString();
                                    decimal temp_salevalue = decimal.Parse(salevalue.ToString(), CultureInfo.InvariantCulture);
                                    //string totsalevp = 
                                    totaldummy["Sale Value"] = "" + string.Format(hindi, "{0:#,#}", temp_salevalue) + "  (" + Math.Round(salevalueper, 0) + "%)";
                                }
                                else
                                {
                                    totaldummy["Sale Value"] = "0";
                                }
                                if (DueAmount.ToString() != "")
                                {
                                    //Getapproval.CollAmount = CollAmount.ToString();
                                    decimal tamount = decimal.Parse(DueAmount.ToString(), CultureInfo.InvariantCulture);
                                    totaldummy["Sale Quantity"] = "" + string.Format(hindi, "{0:#,#}", tamount) + "  (" + Math.Round(saleqtyper, 0) + "%)";
                                    double avgrate = salevalue / DueAmount;
                                    totaldummy["AvgRate"] = Math.Round(avgrate);
                                }
                                else
                                {
                                    totaldummy["Sale Quantity"] = "0";
                                }
                                approval.Rows.Add(totaldummy);
                            }
                            else
                            {
                                if (totsaleqty > 0)
                                {
                                    DataRow totaldummy2 = approval.NewRow();
                                    totaldummy2["Branch Name"] = "Total";
                                    double salevalue_per = (totsaleamt / totalvaluegrandtotal) * 100;
                                    double saleqty_per = (totsaleqty / totalqtygrandtotal) * 100;
                                    totaldummy2["Sale Quantity"] = totsaleqty + "(" + Math.Round(saleqty_per, 0) + "%)";
                                    grandtotsalesumqty += totsaleqty;
                                    totaldummy2["Sale Value"] = totsaleamt + "(" + Math.Round(salevalue_per, 0) + "%)"; ;
                                    double AvgRate = 0;
                                    AvgRate = totsaleamt / totsaleqty;
                                    totaldummy2["AvgRate"] = Math.Round(AvgRate);
                                    grandtotsalesumvalue += totsaleamt;
                                    approval.Rows.Add(totaldummy2);
                                    totsaleqty = 0;
                                    totsaleamt = 0;
                                    prevcmpid = "";
                                }
                                prevcmpid = cmpid;
                                double tempsalevalue = 0; double tempcoll = 0; double deliveryqty = 0;
                                double.TryParse(dr["salevalue"].ToString(), out tempsalevalue);
                                double salevalue = Math.Round(tempsalevalue);
                                totsaleamt += salevalue;
                                double salevalueper = (salevalue / compayvaluetotal) * 100;
                                double.TryParse(dr["deliveryqty"].ToString(), out deliveryqty);
                                double DueAmount = Math.Round(deliveryqty);
                                totsaleqty += DueAmount;
                                double saleqtyper = (DueAmount / compayqtytotal) * 100;
                                if (salevalue.ToString() != "")
                                {
                                    //Getapproval.salevalue = salevalue.ToString();
                                    decimal temp_salevalue = decimal.Parse(salevalue.ToString(), CultureInfo.InvariantCulture);
                                    totaldummy["Sale Value"] = "" + string.Format(hindi, "{0:#,#}", temp_salevalue) + "  (" + Math.Round(salevalueper, 0) + "%)";
                                }
                                else
                                {
                                    totaldummy["Sale Value"] = "0";
                                }
                                if (DueAmount.ToString() != "")
                                {
                                    //Getapproval.CollAmount = CollAmount.ToString();
                                    decimal tamount = decimal.Parse(DueAmount.ToString(), CultureInfo.InvariantCulture);
                                    totaldummy["Sale Quantity"] = "" + string.Format(hindi, "{0:#,#}", tamount) + "  (" + Math.Round(saleqtyper, 0) + "%)";
                                    double avgrate = salevalue / DueAmount;
                                    totaldummy["AvgRate"] = Math.Round(avgrate);

                                }
                                else
                                {
                                    totaldummy["Sale Quantity"] = "0";
                                }
                                approval.Rows.Add(totaldummy);
                            }
                        }
                    }
                    if (totsaleqty > 0)
                    {
                        DataRow totaldummy3 = approval.NewRow();
                        totaldummy3["Branch Name"] = "Total";
                        double salevalue_per = (totsaleamt / totalvaluegrandtotal) * 100;
                        double saleqty_per = (totsaleqty / totalqtygrandtotal) * 100;
                        totaldummy3["Sale Quantity"] = totsaleqty + "(" + Math.Round(saleqty_per, 0) + "%)"; ;
                        grandtotsalesumqty += totsaleqty;
                        totaldummy3["Sale Value"] = totsaleamt + "(" + Math.Round(salevalue_per, 0) + "%)"; ;
                        double AvgRate = 0;
                        AvgRate = totsaleamt / totsaleqty;
                        totaldummy3["AvgRate"] = Math.Round(AvgRate); ;
                        grandtotsalesumvalue += totsaleamt;
                        approval.Rows.Add(totaldummy3);
                        totsaleqty = 0;
                        totsaleamt = 0;
                        prevcmpid = "";
                    }
                    if (grandtotsalesumqty > 0)
                    {
                        DataRow totaldummy3 = approval.NewRow();
                        totaldummy3["Branch Name"] = "Grand Total";
                        totaldummy3["Sale Quantity"] = grandtotsalesumqty;
                        totaldummy3["Sale Value"] = grandtotsalesumvalue;
                        double AvgRate = 0;
                        AvgRate = grandtotsalesumvalue / grandtotsalesumqty;
                        totaldummy3["AvgRate"] = Math.Round(AvgRate); ;
                        approval.Rows.Add(totaldummy3);
                    }
                    DataTable dtMainDataTable = new DataTable();
                    dtMainDataTable.Columns.Add("BranchID");
                    dtMainDataTable.Columns.Add("Branch Name");
                    dtMainDataTable.Columns.Add("AvgRate");
                    dtMainDataTable.Columns.Add("Sale Quantity");
                    dtMainDataTable.Columns.Add("Sale Value");
                    double Total_Qty = 0; double Total_Value = 0;
                    double ComTotal_Qty = 0; double ComTotal_Value = 0;
                    foreach (DataRow drreport in approval.Rows)
                    {
                        DataRow newrow = dtMainDataTable.NewRow();
                        
                            newrow["BranchID"] = drreport["BranchID"].ToString();
                            newrow["Branch Name"] = drreport["Branch Name"].ToString();
                            newrow["AvgRate"] = drreport["AvgRate"].ToString();
                            newrow["Sale Quantity"] = drreport["Sale Quantity"].ToString();
                            newrow["Sale Value"] = drreport["Sale Value"].ToString();
                            dtMainDataTable.Rows.Add(newrow);
                    }
                    grdBranchReport.DataSource = dtMainDataTable;
                    grdBranchReport.DataBind();
                }
            }
        }
        catch (Exception ex)
        { 
        }
    }
    protected void grddata_RowCommand(object sender, GridViewCommandEventArgs e)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            int rowIndex = Convert.ToInt32(e.CommandArgument);
            GridViewRow row = grddata.Rows[rowIndex];
            string BranchID = row.Cells[1].Text;
            Context.Session["Plant_id"] = BranchID;
            string s = Session["IndDate"].ToString();
            var dt = DateTime.ParseExact(s, "ddd MMM dd yyyy HH:mm:ss 'GMT'zzz", System.Globalization.CultureInfo.InvariantCulture);
            string IndDate = dt.ToString("yyyy-MM-dd");
            DateTime ServerDateCurrentdate = Convert.ToDateTime(IndDate);
            DateTime FromDate = ServerDateCurrentdate;
            string edate = Session["Todate"].ToString();
            var edt = DateTime.ParseExact(edate, "ddd MMM dd yyyy HH:mm:ss 'GMT'zzz", System.Globalization.CultureInfo.InvariantCulture);
            string Tdate = edt.ToString("yyyy-MM-dd");
            DateTime To_Date = Convert.ToDateTime(Tdate);
            DateTime ToDate = To_Date;

            // div_MainPlantComparison.Style.Add("display", "block");
            string SectedDataType = ddlDayType.SelectedItem.Value;
            divHide1.Style.Add("display", "block");
            div_MainPlantDetails1.Style.Add("display", "block");
            divMainAddNewRow2.Style.Add("display", "block");
            string Datatype = "";
            int Ndays = (FromDate - ToDate).Days;
            int countdays = Ndays + 1;
            if (countdays <= 7)
            {
                Datatype = "Monthly";
            }
            else if (countdays <= 30 || countdays <= 8)
            {
                Datatype = "Week";
            }
            else if (countdays == 364 || countdays >= 364)
            {
                Datatype = "Year";
            }
            else
            {
                Datatype = "Monthly";
            }
            LinkButton12.Visible = true;

            DateTime lastmonthfrom = new DateTime();
            DateTime lastmonthto = new DateTime();
            DateTime YearServerDate_Currentdate = Convert.ToDateTime(IndDate);
            DateTime LastYearFromDate = YearServerDate_Currentdate;
            DateTime YearServerDate_Todate = Convert.ToDateTime(Tdate);
            DateTime LastYearToDate = YearServerDate_Todate;
            lastmonthfrom = FromDate.AddMonths(-1);
            lastmonthto = ToDate.AddMonths(-1);
            LastYearFromDate = LastYearFromDate.AddYears(-1);
            LastYearToDate = LastYearToDate.AddYears(-1);


            DataTable Dt_PresentWeak = new DataTable();
            DataTable dtSub_LastWeekData = new DataTable();

            DataTable Dt_PresentMonth = new DataTable();
            DataTable Dt_LastSixthMonth = new DataTable();
            DataTable Dt_PresentYear = new DataTable();

            DataTable dtPresentAllMonth = new DataTable();
            DataTable dtLastYearAllMonth = new DataTable();
            DataTable dtSub_yesterdayData = new DataTable();
            DataTable dtSub_lastMonthData = new DataTable();
            DataTable dtSub_lastYearData = new DataTable();
            string SalesType = Session["salestype"].ToString();
            DataTable dtALL = new DataTable();
            if (Datatype == "Monthly")
            {
                if (SectedDataType == "Day")
                {
                    //string val = ViewState["Val"].ToString();
                    //if (val != "btnclick")
                    //{
                    //    if (SalesType == "Plant")
                    //    {
                    //        if (BranchID == "172")
                    //        {
                    //            cmd = new MySqlCommand("SELECT   branchmappingtable.SuperBranch,branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch NOT IN (538 ,2749, 3928, 1801, 3625)) GROUP BY branchdata.sno");
                    //            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-1));
                    //            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-1));
                    //            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                    //            dtSub_yesterdayData = vdbmngr.SelectQuery(cmd).Tables[0];
                    //        }
                    //        else if (BranchID == "3625")
                    //        {
                    //            cmd = new MySqlCommand("SELECT   branchmappingtable.SuperBranch,branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch IN (4609, 3625)) GROUP BY branchdata.sno");
                    //            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-1));
                    //            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-1));
                    //            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                    //            dtSub_yesterdayData = vdbmngr.SelectQuery(cmd).Tables[0];
                    //        }
                    //        else if (BranchID == "1801")
                    //        {
                    //            cmd = new MySqlCommand("SELECT   branchmappingtable.SuperBranch,branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID)  GROUP BY branchdata.sno");
                    //            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-1));
                    //            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-1));
                    //            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                    //            dtSub_yesterdayData = vdbmngr.SelectQuery(cmd).Tables[0];
                    //        }
                    //        else if (BranchID == "158")
                    //        {
                    //            cmd = new MySqlCommand("SELECT   branchmappingtable.SuperBranch,branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch NOT IN (159,4626))  GROUP BY branchdata.sno");
                    //            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-1));
                    //            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-1));
                    //            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                    //            dtSub_yesterdayData = vdbmngr.SelectQuery(cmd).Tables[0];

                    //            cmd = new MySqlCommand("SELECT branchmappingtable.SuperBranch,branchdata.BranchName,ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,  branchmappingtable.SuperBranch AS sno FROM (SELECT  IndentNo, Branch_id, I_date, Status, IndentType FROM  indents WHERE (I_date BETWEEN @d1 AND @d2) AND (Status <> 'D')) indent INNER JOIN branchdata ON indent.Branch_id = branchdata.sno INNER JOIN indents_subtable ON indent.IndentNo = indents_subtable.IndentNo INNER JOIN branchmappingtable ON branchdata.sno = branchmappingtable.SubBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable.SuperBranch = branchdata_1.sno WHERE (branchmappingtable.SuperBranch = @BranchID) AND (indents_subtable.DeliveryQty <> 0) GROUP BY branchmappingtable.SuperBranch ORDER BY branchdata.BranchName");
                    //            //cmd = new MySqlCommand("SELECT  SubBranch, ROUND(SUM(DeliveryQty) ) AS DeliveryQty,  ROUND(SUM(DeliveryQty * UnitCost) ) AS salevalue, SuperBranch FROM  (SELECT  t1.SubBranch, t1.SuperBranch, t2.DeliveryQty, t2.unitQty, t2.UnitCost FROM (SELECT branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch FROM  branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch WHERE (branchmappingtable_1.SuperBranch = @branchid) GROUP BY branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch) t1 LEFT OUTER JOIN (SELECT  indents_subtable.DeliveryQty, indents_subtable.unitQty, indents_subtable.UnitCost, branchmappingtable_2.SuperBranch, branchmappingtable_2.SubBranch FROM   branchmappingtable branchmappingtable_2 INNER JOIN (SELECT  IndentNo, Branch_id, I_date FROM   indents WHERE  (I_date BETWEEN @d1 AND @d2)) ind ON branchmappingtable_2.SubBranch = ind.Branch_id INNER JOIN indents_subtable ON ind.IndentNo = indents_subtable.IndentNo) t2 ON t2.SuperBranch = t1.SubBranch) derivedtbl_1 GROUP BY SuperBranch");
                    //            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                    //            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-1));
                    //            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-1));
                    //            DataTable temptable = vdbmngr.SelectQuery(cmd).Tables[0];
                    //            dtSub_yesterdayData.Merge(temptable);
                    //        }
                    //        else
                    //        {
                    //            cmd = new MySqlCommand("SELECT   branchmappingtable.SuperBranch,branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID)  GROUP BY branchdata.sno");
                    //            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-1));
                    //            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-1));
                    //            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                    //            dtSub_yesterdayData = vdbmngr.SelectQuery(cmd).Tables[0];
                    //        }
                    //    }
                    //    else
                    //    {
                    //        cmd = new MySqlCommand("SELECT   branchmappingtable.SuperBranch,branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SubBranch = @BranchID) GROUP BY branchdata.sno");
                    //        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-2));
                    //        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-2));
                    //        cmd.Parameters.AddWithValue("@BranchID", BranchID);
                    //        dtSub_yesterdayData = vdbmngr.SelectQuery(cmd).Tables[0];
                    //    }
                    //    dtALL.Merge(dtSub_yesterdayData);
                    //    //dtALL.Merge(dtSub_LastWeekData);
                    //    //dtALL.Merge(dtSub_lastMonthData);
                    //    //dtALL.Merge(dtSub_lastYearData);
                    //    DataTable disticntbarnchname = new DataTable();
                    //    if (BranchID == "8009" || BranchID == "8012" || BranchID == "8013")
                    //    {
                    //        DataView view = new DataView(dtALL);
                    //        disticntbarnchname = view.ToTable(true, "BranchName", "BranchID");
                    //    }
                    //    else
                    //    {
                    //        DataView view = new DataView(dtALL);
                    //        disticntbarnchname = view.ToTable(true, "BranchName", "sno");
                    //    }
                    //    DataTable Report = new DataTable();
                    //    Report.Columns.Add("BranchId");
                    //    Report.Columns.Add("BranchName");
                    //    Report.Columns.Add("SaleQty").DataType = typeof(Double);
                    //    Report.Columns.Add("SaleValue").DataType = typeof(Double);
                    //    DataRow newrow = Report.NewRow();

                    //    double yesterdaysum = Convert.ToDouble(dtSub_yesterdayData.Compute("SUM(DeliveryQty)", "SuperBranch=" + BranchID + ""));
                    //    //double lastweaksum = Convert.ToDouble(dtSub_LastWeekData.Compute("SUM(DeliveryQty)", "SuperBranch=" + BranchID + ""));
                    //    //double lastmonthsum = Convert.ToDouble(dtSub_lastMonthData.Compute("SUM(DeliveryQty)", "SuperBranch=" + BranchID + ""));
                    //    //double lastyearsum = Convert.ToDouble(dtSub_lastYearData.Compute("SUM(DeliveryQty)", "SuperBranch=" + BranchID + ""));

                    //    double yesterdayvaluesum = Convert.ToDouble(dtSub_yesterdayData.Compute("SUM(SaleValue)", "SuperBranch=" + BranchID + ""));
                    //    //double lastweakvaluesum = Convert.ToDouble(dtSub_LastWeekData.Compute("SUM(SaleValue)", "SuperBranch=" + BranchID + ""));
                    //    //double lastmonthvaluesum = Convert.ToDouble(dtSub_lastMonthData.Compute("SUM(SaleValue)", "SuperBranch=" + BranchID + ""));
                    //    //double lastyearvaluesum = Convert.ToDouble(dtSub_lastYearData.Compute("SUM(SaleValue)", "SuperBranch=" + BranchID + ""));

                    //    foreach (DataRow branch in disticntbarnchname.Rows)
                    //    {
                    //        DataRow newrow1 = Report.NewRow();
                    //        if (branch["sno"].ToString() == "158")
                    //        {
                    //            newrow1["BranchName"] = "Wyra Plant";
                    //        }
                    //        else
                    //        {
                    //            newrow1["BranchName"] = branch["BranchName"].ToString();
                    //        }

                    //        newrow1["BranchId"] = branch["sno"].ToString();
                    //        float DispQty = 0;
                    //        double totcompare = 0;
                    //        foreach (DataRow drSubData in dtSub_yesterdayData.Rows)
                    //        {
                    //            if (branch["sno"].ToString() == drSubData["sno"].ToString())
                    //            {
                    //                float.TryParse(drSubData["DeliveryQty"].ToString(), out DispQty);
                    //                if (DispQty > 0)
                    //                {
                    //                    newrow1["SaleQty"] = drSubData["DeliveryQty"].ToString();
                    //                    newrow1["SaleValue"] = drSubData["SaleValue"].ToString();
                    //                    //newrow1["Yester Day Avg"] = drSubData["AvgQty"].ToString();
                    //                    //yesterdaygrandtotal += DispQty;
                    //                    double temp = 0;
                    //                    double Percentage = 0; double tempPercentage = 0;
                    //                    double.TryParse(drSubData["DeliveryQty"].ToString(), out temp);
                    //                    tempPercentage = (temp / yesterdaysum) * 100;
                    //                    Percentage = Math.Round(tempPercentage );
                    //                    //newrow1["Yester Day %"] = Percentage;
                    //                    totcompare = Percentage;
                    //                }
                    //            }
                    //        }
                    //        Report.Rows.Add(newrow1);
                    //    }
                    //    DataRow newrow2 = Report.NewRow();
                    //    newrow2["BranchName"] = "Total";
                    //    newrow2["SaleQty"] = yesterdaysum;
                    //    newrow2["SaleValue"] = yesterdayvaluesum;
                    //    //newrow2["Yester Day(Value)"] = yesterdayvaluesum;
                    //    //newrow2["Last Week(Value)"] = lastweakvaluesum;
                    //    //newrow2["Last Month(Value)"] = lastmonthvaluesum;
                    //    //newrow2["Last Year(Value)"] = lastyearvaluesum;
                    //    Report.Rows.Add(newrow2);
                    //    grdBranchReport.DataSource = Report;
                    //    grdBranchReport.DataBind();
                    //}
                    //else
                    //{
                    if (SalesType == "Plant")
                    {
                        if (BranchID == "172")
                        {
                            cmd = new MySqlCommand("SELECT   branchmappingtable.SuperBranch,branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch NOT IN (538 , 1801, 3625)) GROUP BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-1));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-1));
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            dtSub_yesterdayData = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else if (BranchID == "3625")
                        {
                            cmd = new MySqlCommand("SELECT   branchmappingtable.SuperBranch,branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch IN (4609, 3625)) GROUP BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-1));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-1));
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            dtSub_yesterdayData = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else if (BranchID == "1801")
                        {
                            cmd = new MySqlCommand("SELECT   branchmappingtable.SuperBranch,branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID)  GROUP BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-1));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-1));
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            dtSub_yesterdayData = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else if (BranchID == "158")
                        {
                            cmd = new MySqlCommand("SELECT   branchmappingtable.SuperBranch,branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch NOT IN (159,4626))  GROUP BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-1));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-1));
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            dtSub_yesterdayData = vdbmngr.SelectQuery(cmd).Tables[0];

                            cmd = new MySqlCommand("SELECT branchmappingtable.SuperBranch,branchdata.BranchName,ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,  branchmappingtable.SuperBranch AS sno FROM (SELECT  IndentNo, Branch_id, I_date, Status, IndentType FROM  indents WHERE (I_date BETWEEN @d1 AND @d2) AND (Status <> 'D')) indent INNER JOIN branchdata ON indent.Branch_id = branchdata.sno INNER JOIN indents_subtable ON indent.IndentNo = indents_subtable.IndentNo INNER JOIN branchmappingtable ON branchdata.sno = branchmappingtable.SubBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable.SuperBranch = branchdata_1.sno WHERE (branchmappingtable.SuperBranch = @BranchID) AND (indents_subtable.DeliveryQty <> 0) GROUP BY branchmappingtable.SuperBranch ORDER BY branchdata.BranchName");
                            //cmd = new MySqlCommand("SELECT  SubBranch, ROUND(SUM(DeliveryQty) ) AS DeliveryQty,  ROUND(SUM(DeliveryQty * UnitCost) ) AS salevalue, SuperBranch FROM  (SELECT  t1.SubBranch, t1.SuperBranch, t2.DeliveryQty, t2.unitQty, t2.UnitCost FROM (SELECT branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch FROM  branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch WHERE (branchmappingtable_1.SuperBranch = @branchid) GROUP BY branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch) t1 LEFT OUTER JOIN (SELECT  indents_subtable.DeliveryQty, indents_subtable.unitQty, indents_subtable.UnitCost, branchmappingtable_2.SuperBranch, branchmappingtable_2.SubBranch FROM   branchmappingtable branchmappingtable_2 INNER JOIN (SELECT  IndentNo, Branch_id, I_date FROM   indents WHERE  (I_date BETWEEN @d1 AND @d2)) ind ON branchmappingtable_2.SubBranch = ind.Branch_id INNER JOIN indents_subtable ON ind.IndentNo = indents_subtable.IndentNo) t2 ON t2.SuperBranch = t1.SubBranch) derivedtbl_1 GROUP BY SuperBranch");
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-1));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-1));
                            DataTable temptable = vdbmngr.SelectQuery(cmd).Tables[0];
                            dtSub_yesterdayData.Merge(temptable);
                        }
                        else
                        {
                            cmd = new MySqlCommand("SELECT   branchmappingtable.SuperBranch,branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID)  GROUP BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-1));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-1));
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            dtSub_yesterdayData = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        if (BranchID == "172")
                        {
                            cmd = new MySqlCommand("SELECT   branchmappingtable.SuperBranch,branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch NOT IN (538 , 1801, 3625)) GROUP BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-7));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-7));
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            dtSub_LastWeekData = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else if (BranchID == "3625")
                        {
                            cmd = new MySqlCommand("SELECT   branchmappingtable.SuperBranch,branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch IN (4609, 3625)) GROUP BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-7));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-7));
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            dtSub_LastWeekData = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else if (BranchID == "1801")
                        {
                            cmd = new MySqlCommand("SELECT   branchmappingtable.SuperBranch,branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID)  GROUP BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-7));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-7));
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            dtSub_LastWeekData = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else if (BranchID == "158")
                        {
                            cmd = new MySqlCommand("SELECT   branchmappingtable.SuperBranch,branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch NOT IN (159,4626)) GROUP BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-7));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-7));
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            dtSub_LastWeekData = vdbmngr.SelectQuery(cmd).Tables[0];


                            cmd = new MySqlCommand("SELECT branchmappingtable.SuperBranch,branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,  branchmappingtable.SuperBranch AS sno FROM (SELECT  IndentNo, Branch_id, I_date, Status, IndentType FROM  indents WHERE (I_date BETWEEN @d1 AND @d2) AND (Status <> 'D')) indent INNER JOIN branchdata ON indent.Branch_id = branchdata.sno INNER JOIN indents_subtable ON indent.IndentNo = indents_subtable.IndentNo INNER JOIN branchmappingtable ON branchdata.sno = branchmappingtable.SubBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable.SuperBranch = branchdata_1.sno WHERE (branchmappingtable.SuperBranch = @BranchID) AND (indents_subtable.DeliveryQty <> 0) GROUP BY branchmappingtable.SuperBranch ORDER BY branchdata.BranchName");
                            //cmd = new MySqlCommand("SELECT  SubBranch, ROUND(SUM(DeliveryQty) ) AS DeliveryQty,  ROUND(SUM(DeliveryQty * UnitCost) ) AS salevalue, SuperBranch FROM  (SELECT  t1.SubBranch, t1.SuperBranch, t2.DeliveryQty, t2.unitQty, t2.UnitCost FROM (SELECT branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch FROM  branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch WHERE (branchmappingtable_1.SuperBranch = @branchid) GROUP BY branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch) t1 LEFT OUTER JOIN (SELECT  indents_subtable.DeliveryQty, indents_subtable.unitQty, indents_subtable.UnitCost, branchmappingtable_2.SuperBranch, branchmappingtable_2.SubBranch FROM   branchmappingtable branchmappingtable_2 INNER JOIN (SELECT  IndentNo, Branch_id, I_date FROM   indents WHERE  (I_date BETWEEN @d1 AND @d2)) ind ON branchmappingtable_2.SubBranch = ind.Branch_id INNER JOIN indents_subtable ON ind.IndentNo = indents_subtable.IndentNo) t2 ON t2.SuperBranch = t1.SubBranch) derivedtbl_1 GROUP BY SuperBranch");
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-7));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-7));
                            DataTable temptable = vdbmngr.SelectQuery(cmd).Tables[0];
                            dtSub_LastWeekData.Merge(temptable);
                        }
                        else
                        {
                            cmd = new MySqlCommand("SELECT   branchmappingtable.SuperBranch,branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID)  GROUP BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-7));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-7));
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            dtSub_LastWeekData = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        if (BranchID == "172")
                        {
                            cmd = new MySqlCommand("SELECT   branchmappingtable.SuperBranch,branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch NOT IN (538 , 1801, 3625)) GROUP BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(lastmonthfrom));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(lastmonthto));
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            dtSub_lastMonthData = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else if (BranchID == "3625")
                        {
                            cmd = new MySqlCommand("SELECT   branchmappingtable.SuperBranch,branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch IN (4609, 3625)) GROUP BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(lastmonthfrom));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(lastmonthto));
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            dtSub_lastMonthData = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else if (BranchID == "1801")
                        {
                            cmd = new MySqlCommand("SELECT   branchmappingtable.SuperBranch,branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID)  GROUP BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(lastmonthfrom));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(lastmonthto));
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            dtSub_lastMonthData = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else if (BranchID == "158")
                        {
                            cmd = new MySqlCommand("SELECT   branchmappingtable.SuperBranch,branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch NOT IN (159,4626))  GROUP BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(lastmonthfrom));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(lastmonthto));
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            dtSub_lastMonthData = vdbmngr.SelectQuery(cmd).Tables[0];

                            cmd = new MySqlCommand("SELECT branchmappingtable.SuperBranch,branchdata.BranchName,ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,  branchmappingtable.SuperBranch AS sno FROM (SELECT  IndentNo, Branch_id, I_date, Status, IndentType FROM  indents WHERE (I_date BETWEEN @d1 AND @d2) AND (Status <> 'D')) indent INNER JOIN branchdata ON indent.Branch_id = branchdata.sno INNER JOIN indents_subtable ON indent.IndentNo = indents_subtable.IndentNo INNER JOIN branchmappingtable ON branchdata.sno = branchmappingtable.SubBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable.SuperBranch = branchdata_1.sno WHERE (branchmappingtable.SuperBranch = @BranchID) AND (indents_subtable.DeliveryQty <> 0) GROUP BY branchmappingtable.SuperBranch ORDER BY branchdata.BranchName");
                            //cmd = new MySqlCommand("SELECT  SubBranch, ROUND(SUM(DeliveryQty) ) AS DeliveryQty,  ROUND(SUM(DeliveryQty * UnitCost) ) AS salevalue, SuperBranch FROM  (SELECT  t1.SubBranch, t1.SuperBranch, t2.DeliveryQty, t2.unitQty, t2.UnitCost FROM (SELECT branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch FROM  branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch WHERE (branchmappingtable_1.SuperBranch = @branchid) GROUP BY branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch) t1 LEFT OUTER JOIN (SELECT  indents_subtable.DeliveryQty, indents_subtable.unitQty, indents_subtable.UnitCost, branchmappingtable_2.SuperBranch, branchmappingtable_2.SubBranch FROM   branchmappingtable branchmappingtable_2 INNER JOIN (SELECT  IndentNo, Branch_id, I_date FROM   indents WHERE  (I_date BETWEEN @d1 AND @d2)) ind ON branchmappingtable_2.SubBranch = ind.Branch_id INNER JOIN indents_subtable ON ind.IndentNo = indents_subtable.IndentNo) t2 ON t2.SuperBranch = t1.SubBranch) derivedtbl_1 GROUP BY SuperBranch");
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(lastmonthfrom));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(lastmonthto));
                            DataTable temptable = vdbmngr.SelectQuery(cmd).Tables[0];
                            dtSub_lastMonthData.Merge(temptable);
                        }
                        else
                        {
                            cmd = new MySqlCommand("SELECT   branchmappingtable.SuperBranch,branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID)  GROUP BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(lastmonthfrom));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(lastmonthto));
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            dtSub_lastMonthData = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        if (BranchID == "172")
                        {
                            cmd = new MySqlCommand("SELECT   branchmappingtable.SuperBranch,branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch NOT IN (538 , 1801, 3625)) GROUP BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(LastYearFromDate));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(LastYearToDate));
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            dtSub_lastYearData = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else if (BranchID == "3625")
                        {
                            cmd = new MySqlCommand("SELECT   branchmappingtable.SuperBranch,branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch NOT IN (4609, 3625)) GROUP BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(LastYearFromDate));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(LastYearToDate));
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            dtSub_lastYearData = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else if (BranchID == "1801")
                        {
                            cmd = new MySqlCommand("SELECT   branchmappingtable.SuperBranch,branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID)  GROUP BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(LastYearFromDate));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(LastYearToDate));
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            dtSub_lastYearData = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else if (BranchID == "158")
                        {
                            cmd = new MySqlCommand("SELECT   branchmappingtable.SuperBranch,branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID)  AND (branchmappingtable.SubBranch NOT IN (159,4626)) GROUP BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(LastYearFromDate));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(LastYearToDate));
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            dtSub_lastYearData = vdbmngr.SelectQuery(cmd).Tables[0];

                            cmd = new MySqlCommand("SELECT branchmappingtable.SuperBranch,branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue,  branchmappingtable.SuperBranch AS sno FROM (SELECT  IndentNo, Branch_id, I_date, Status, IndentType FROM  indents WHERE (I_date BETWEEN @d1 AND @d2) AND (Status <> 'D')) indent INNER JOIN branchdata ON indent.Branch_id = branchdata.sno INNER JOIN indents_subtable ON indent.IndentNo = indents_subtable.IndentNo INNER JOIN branchmappingtable ON branchdata.sno = branchmappingtable.SubBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable.SuperBranch = branchdata_1.sno WHERE (branchmappingtable.SuperBranch = @BranchID) AND (indents_subtable.DeliveryQty <> 0) GROUP BY branchmappingtable.SuperBranch ORDER BY branchdata.BranchName");
                            //cmd = new MySqlCommand("SELECT  SubBranch, ROUND(SUM(DeliveryQty) ) AS DeliveryQty,  ROUND(SUM(DeliveryQty * UnitCost) ) AS salevalue, SuperBranch FROM  (SELECT  t1.SubBranch, t1.SuperBranch, t2.DeliveryQty, t2.unitQty, t2.UnitCost FROM (SELECT branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch FROM  branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch WHERE (branchmappingtable_1.SuperBranch = @branchid) GROUP BY branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch) t1 LEFT OUTER JOIN (SELECT  indents_subtable.DeliveryQty, indents_subtable.unitQty, indents_subtable.UnitCost, branchmappingtable_2.SuperBranch, branchmappingtable_2.SubBranch FROM   branchmappingtable branchmappingtable_2 INNER JOIN (SELECT  IndentNo, Branch_id, I_date FROM   indents WHERE  (I_date BETWEEN @d1 AND @d2)) ind ON branchmappingtable_2.SubBranch = ind.Branch_id INNER JOIN indents_subtable ON ind.IndentNo = indents_subtable.IndentNo) t2 ON t2.SuperBranch = t1.SubBranch) derivedtbl_1 GROUP BY SuperBranch");
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(LastYearFromDate));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(LastYearToDate));
                            DataTable temptable = vdbmngr.SelectQuery(cmd).Tables[0];
                            dtSub_lastYearData.Merge(temptable);
                        }
                        else
                        {
                            cmd = new MySqlCommand("SELECT   branchmappingtable.SuperBranch,branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID)  GROUP BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(LastYearFromDate));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(LastYearToDate));
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            dtSub_lastYearData = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                    }
                    else
                    {
                        cmd = new MySqlCommand("SELECT   branchmappingtable.SuperBranch,branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SubBranch = @BranchID) GROUP BY branchdata.sno");
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-2));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-2));
                        cmd.Parameters.AddWithValue("@BranchID", BranchID);
                        dtSub_yesterdayData = vdbmngr.SelectQuery(cmd).Tables[0];

                        cmd = new MySqlCommand("SELECT   branchmappingtable.SuperBranch,branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SubBranch = @BranchID) GROUP BY branchdata.sno");
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-8));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-8));
                        cmd.Parameters.AddWithValue("@BranchID", BranchID);
                        dtSub_LastWeekData = vdbmngr.SelectQuery(cmd).Tables[0];

                        cmd = new MySqlCommand("SELECT   branchmappingtable.SuperBranch,branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SubBranch = @BranchID) GROUP BY branchdata.sno");
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-31));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-31));
                        cmd.Parameters.AddWithValue("@BranchID", BranchID);
                        dtSub_lastMonthData = vdbmngr.SelectQuery(cmd).Tables[0];

                        cmd = new MySqlCommand("SELECT   branchmappingtable.SuperBranch,branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SubBranch = @BranchID) GROUP BY branchdata.sno");
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-365));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-365));
                        cmd.Parameters.AddWithValue("@BranchID", BranchID);
                        dtSub_lastYearData = vdbmngr.SelectQuery(cmd).Tables[0];
                    }
                    dtALL.Merge(dtSub_yesterdayData);
                    dtALL.Merge(dtSub_LastWeekData);
                    dtALL.Merge(dtSub_lastMonthData);
                    dtALL.Merge(dtSub_lastYearData);
                    DataTable disticntbarnchname = new DataTable();
                    if (BranchID == "8009" || BranchID == "8012" || BranchID == "8013")
                    {
                        DataView view = new DataView(dtALL);
                        disticntbarnchname = view.ToTable(true, "BranchName", "BranchID");
                    }
                    else
                    {
                        DataView view = new DataView(dtALL);
                        disticntbarnchname = view.ToTable(true, "BranchName", "sno");
                    }
                    DataTable Report = new DataTable();
                    Report.Columns.Add("BranchId");
                    Report.Columns.Add("BranchName");
                    Report.Columns.Add("Yester Day").DataType = typeof(Double);
                    Report.Columns.Add("Yester Day %").DataType = typeof(Double);
                    Report.Columns.Add("Ysign");
                    Report.Columns.Add("Last Week").DataType = typeof(Double);
                    Report.Columns.Add("Last Week %").DataType = typeof(Double);
                    Report.Columns.Add("Wsign");
                    Report.Columns.Add("Last Month").DataType = typeof(Double);
                    Report.Columns.Add("Last Month %").DataType = typeof(Double);
                    Report.Columns.Add("Msign");
                    Report.Columns.Add("Last Year").DataType = typeof(Double);
                    Report.Columns.Add("Last Year %").DataType = typeof(Double);
                    Report.Columns.Add("Yesign");

                    // naveen001
                    double yesterdaysum = 0;
                    double lastweaksum = 0;
                    double lastmonthsum = 0;
                    double lastyearsum = 0;
                    DataRow newrow = Report.NewRow();
                    string cate = ddlbarnchCategory.SelectedItem.Value;
                    if (cate == "BranchWiseCollections")
                    {
                        yesterdaysum = Convert.ToDouble(dtSub_yesterdayData.Compute("SUM(SaleValue)", "SuperBranch=" + BranchID + ""));
                        lastweaksum = Convert.ToDouble(dtSub_LastWeekData.Compute("SUM(SaleValue)", "SuperBranch=" + BranchID + ""));
                        lastmonthsum = Convert.ToDouble(dtSub_lastMonthData.Compute("SUM(SaleValue)", "SuperBranch=" + BranchID + ""));
                        lastyearsum = Convert.ToDouble(dtSub_lastYearData.Compute("SUM(SaleValue)", "SuperBranch=" + BranchID + ""));
                    }
                    else
                    {
                        yesterdaysum = Convert.ToDouble(dtSub_yesterdayData.Compute("SUM(DeliveryQty)", "SuperBranch=" + BranchID + ""));
                        lastweaksum = Convert.ToDouble(dtSub_LastWeekData.Compute("SUM(DeliveryQty)", "SuperBranch=" + BranchID + ""));
                        lastmonthsum = Convert.ToDouble(dtSub_lastMonthData.Compute("SUM(DeliveryQty)", "SuperBranch=" + BranchID + ""));
                        lastyearsum = Convert.ToDouble(dtSub_lastYearData.Compute("SUM(DeliveryQty)", "SuperBranch=" + BranchID + ""));
                    }


                    //double yesterdayvaluesum = Convert.ToDouble(dtSub_yesterdayData.Compute("SUM(SaleValue)", "SuperBranch=" + BranchID + ""));
                    //double lastweakvaluesum = Convert.ToDouble(dtSub_LastWeekData.Compute("SUM(SaleValue)", "SuperBranch=" + BranchID + ""));
                    //double lastmonthvaluesum = Convert.ToDouble(dtSub_lastMonthData.Compute("SUM(SaleValue)", "SuperBranch=" + BranchID + ""));
                    //double lastyearvaluesum = Convert.ToDouble(dtSub_lastYearData.Compute("SUM(SaleValue)", "SuperBranch=" + BranchID + ""));

                    foreach (DataRow branch in disticntbarnchname.Rows)
                    {
                        DataRow newrow1 = Report.NewRow();
                        if (branch["sno"].ToString() == "158")
                        {
                            newrow1["BranchName"] = "Wyra Plant";
                        }
                        else
                        {
                            newrow1["BranchName"] = branch["BranchName"].ToString();
                        }

                        newrow1["BranchId"] = branch["sno"].ToString();
                        float DispQty = 0;
                        double totcompare = 0;
                        double diffpercentage = 0;
                        foreach (DataRow drSubData in dtSub_yesterdayData.Rows)
                        {
                            if (branch["sno"].ToString() == drSubData["sno"].ToString())
                            {
                                if (cate == "BranchWiseCollections")
                                {
                                    float.TryParse(drSubData["SaleValue"].ToString(), out DispQty);
                                    if (DispQty > 0)
                                    {
                                        newrow1["Yester Day"] = drSubData["SaleValue"].ToString();
                                        double temp = 0;
                                        double Percentage = 0; double tempPercentage = 0;
                                        double.TryParse(drSubData["SaleValue"].ToString(), out temp);
                                        tempPercentage = (temp / yesterdaysum) * 100;
                                        Percentage = Math.Round(tempPercentage);
                                        newrow1["Yester Day %"] = Percentage;
                                        totcompare = Percentage;
                                        diffpercentage = Percentage;
                                    }
                                }
                                else
                                {
                                    float.TryParse(drSubData["DeliveryQty"].ToString(), out DispQty);
                                    if (DispQty > 0)
                                    {
                                        newrow1["Yester Day"] = drSubData["DeliveryQty"].ToString();
                                        double temp = 0;
                                        double Percentage = 0; double tempPercentage = 0;
                                        double.TryParse(drSubData["DeliveryQty"].ToString(), out temp);
                                        tempPercentage = (temp / yesterdaysum) * 100;
                                        Percentage = Math.Round(tempPercentage);
                                        newrow1["Yester Day %"] = Percentage;
                                        totcompare = Percentage;
                                        diffpercentage = Percentage;
                                    }
                                }
                            }
                        }
                        foreach (DataRow drSubData in dtSub_LastWeekData.Rows)
                        {
                            if (branch["sno"].ToString() == drSubData["sno"].ToString())
                            {

                                if (cate == "BranchWiseCollections")
                                {
                                    float.TryParse(drSubData["SaleValue"].ToString(), out DispQty);
                                    if (DispQty > 0)
                                    {
                                        newrow1["Last Week"] = drSubData["SaleValue"].ToString();
                                        double temp = 0;
                                        double Percentage = 0; double tempPercentage = 0;
                                        double.TryParse(drSubData["SaleValue"].ToString(), out temp);
                                        tempPercentage = (temp / lastweaksum) * 100;
                                        Percentage = Math.Round(tempPercentage);

                                        if (diffpercentage > Percentage)
                                        {
                                            newrow1["Last Week %"] = Math.Round(diffpercentage - Percentage);
                                            newrow1["Wsign"] = "+";
                                        }
                                        else
                                        {
                                            newrow1["Last Week %"] = Math.Round(diffpercentage - Percentage);
                                            newrow1["Wsign"] = "-";
                                        }
                                    }
                                }
                                else
                                {

                                    float.TryParse(drSubData["DeliveryQty"].ToString(), out DispQty);
                                    if (DispQty > 0)
                                    {
                                        newrow1["Last Week"] = drSubData["DeliveryQty"].ToString();
                                        double temp = 0;
                                        double Percentage = 0; double tempPercentage = 0;
                                        double.TryParse(drSubData["DeliveryQty"].ToString(), out temp);
                                        tempPercentage = (temp / lastweaksum) * 100;
                                        Percentage = Math.Round(tempPercentage);
                                        if (diffpercentage > Percentage)
                                        {
                                            newrow1["Last Week %"] = Math.Round(diffpercentage - Percentage);
                                            newrow1["Wsign"] = "+";
                                        }
                                        else
                                        {
                                            newrow1["Last Week %"] = Math.Round(diffpercentage - Percentage);
                                            newrow1["Wsign"] = "-";
                                        }
                                    }
                                }
                            }
                        }
                        foreach (DataRow drSubData in dtSub_lastMonthData.Rows)
                        {
                            if (branch["sno"].ToString() == drSubData["sno"].ToString())
                            {
                                if (cate == "BranchWiseCollections")
                                {
                                    float.TryParse(drSubData["SaleValue"].ToString(), out DispQty);
                                    if (DispQty > 0)
                                    {
                                        newrow1["Last Month"] = drSubData["SaleValue"].ToString();
                                        //newrow1["Last Month(Value)"] = drSubData["SaleValue"].ToString();

                                        // newrow1["Last Month Avg"] = drSubData["AvgQty"].ToString();
                                        double temp = 0;
                                        double Percentage = 0; double tempPercentage = 0;
                                        double.TryParse(drSubData["SaleValue"].ToString(), out temp);
                                        tempPercentage = (temp / lastmonthsum) * 100;
                                        Percentage = Math.Round(tempPercentage);
                                        if (diffpercentage > Percentage)
                                        {
                                            newrow1["Last Month %"] = Math.Round(diffpercentage - Percentage);
                                            newrow1["Msign"] = "+";
                                        }
                                        else
                                        {
                                            newrow1["Last Month %"] = Math.Round(diffpercentage - Percentage);
                                            newrow1["Msign"] = "-";
                                        }
                                    }
                                }
                                else
                                {
                                    float.TryParse(drSubData["DeliveryQty"].ToString(), out DispQty);
                                    if (DispQty > 0)
                                    {
                                        newrow1["Last Month"] = drSubData["DeliveryQty"].ToString();
                                        double temp = 0;
                                        double Percentage = 0; double tempPercentage = 0;
                                        double.TryParse(drSubData["DeliveryQty"].ToString(), out temp);
                                        tempPercentage = (temp / lastmonthsum) * 100;
                                        Percentage = Math.Round(tempPercentage);
                                        if (diffpercentage > Percentage)
                                        {
                                            newrow1["Last Month %"] = Math.Round(diffpercentage - Percentage);
                                            newrow1["Msign"] = "+";
                                        }
                                        else
                                        {
                                            newrow1["Last Month %"] = Math.Round(diffpercentage - Percentage);
                                            newrow1["Msign"] = "-";
                                        }
                                    }
                                }
                            }
                        }

                        foreach (DataRow drSubData in dtSub_lastYearData.Rows)
                        {
                            if (branch["sno"].ToString() == drSubData["sno"].ToString())
                            {
                                if (cate == "BranchWiseCollections")
                                {
                                    float.TryParse(drSubData["SaleValue"].ToString(), out DispQty);
                                    if (DispQty > 0)
                                    {
                                        newrow1["Last Year"] = drSubData["SaleValue"].ToString();
                                        double temp = 0;
                                        double Percentage = 0; double tempPercentage = 0;
                                        double.TryParse(drSubData["SaleValue"].ToString(), out temp);
                                        tempPercentage = (temp / lastyearsum) * 100;
                                        Percentage = Math.Round(tempPercentage);
                                        if (diffpercentage > Percentage)
                                        {
                                            newrow1["Last Year %"] = Math.Round(diffpercentage - Percentage);
                                            newrow1["Yesign"] = "+";
                                        }
                                        else
                                        {
                                            newrow1["Last Year %"] = Math.Round(diffpercentage - Percentage);
                                            newrow1["Yesign"] = "-";
                                        }
                                    }
                                }
                                else
                                {
                                    float.TryParse(drSubData["DeliveryQty"].ToString(), out DispQty);
                                    if (DispQty > 0)
                                    {
                                        newrow1["Last Year"] = drSubData["DeliveryQty"].ToString();
                                        // newrow1["Last Year(Value)"] = drSubData["SaleValue"].ToString();

                                        // newrow1["Last Year Avg"] = drSubData["AvgQty"].ToString();

                                        double temp = 0;
                                        double Percentage = 0; double tempPercentage = 0;
                                        double.TryParse(drSubData["DeliveryQty"].ToString(), out temp);
                                        tempPercentage = (temp / lastyearsum) * 100;
                                        Percentage = Math.Round(tempPercentage);
                                        if (diffpercentage > Percentage)
                                        {
                                            newrow1["Last Year %"] = Math.Round(diffpercentage - Percentage);
                                            newrow1["Yesign"] = "+";
                                        }
                                        else
                                        {
                                            newrow1["Last Year %"] = Math.Round(diffpercentage - Percentage);
                                            newrow1["Yesign"] = "-";
                                        }
                                    }
                                }
                            }
                        }
                        //double temp = 0;
                        //double.TryParse(dr["Yester Day"].ToString(), out temp);
                        //tempPercentage = (temp / yesterdaygrandtotal) * 100;
                        //Percentage = Math.Round(tempPercentage );
                        //if (DispQty > 0)
                        //{
                        Report.Rows.Add(newrow1);
                        //}
                    }
                    DataRow newrow2 = Report.NewRow();
                    newrow2["BranchName"] = "Total";
                    newrow2["Yester Day"] = yesterdaysum;
                    newrow2["Last Week"] = lastweaksum;
                    newrow2["Last Month"] = lastmonthsum;
                    newrow2["Last Year"] = lastyearsum;
                    Report.Rows.Add(newrow2);
                    if (BranchID == "172")
                    {
                        DataTable MYReport = new DataTable();
                        MYReport.Columns.Add("BranchId");
                        MYReport.Columns.Add("BranchName");
                        MYReport.Columns.Add("Yester Day").DataType = typeof(Double);
                        MYReport.Columns.Add("Yester Day %").DataType = typeof(Double);
                        MYReport.Columns.Add("Ysign");
                        MYReport.Columns.Add("Last Week").DataType = typeof(Double);
                        MYReport.Columns.Add("Last Week %").DataType = typeof(Double);
                        MYReport.Columns.Add("Wsign");
                        MYReport.Columns.Add("Last Month").DataType = typeof(Double);
                        MYReport.Columns.Add("Last Month %").DataType = typeof(Double);
                        MYReport.Columns.Add("Msign");
                        MYReport.Columns.Add("Last Year").DataType = typeof(Double);
                        MYReport.Columns.Add("Last Year %").DataType = typeof(Double);
                        MYReport.Columns.Add("Yesign");
                        string B1 = "174";
                        string B2 = "527";
                        string B3 = "4607";
                        string branchid = "174";
                        string branchname = "Chennai Sales Office";
                        double yesterdaytsum = 0;
                        double yesterdaypersum = 0;
                        double lastweeksum = 0;
                        double lastweeksumper = 0;
                        double lastweeksignsum = 0;
                        double lastmontsum = 0;
                        double lastmothsumper = 0;
                        double lastmonthsign = 0;
                        double lastyeartsum = 0;
                        double latyearsumper = 0;
                        double lastyearsign = 0;
                        foreach (DataRow dra in Report.Select("Branchid IN (('" + B1 + "'), ('" + B2 + "'), ('" + B3 + "'))"))
                        {
                            string ystday = dra["Yester Day"].ToString();
                            string ystdayper = dra["Yester Day %"].ToString();
                            string lstweek = dra["Last Week"].ToString();
                            string lstweekper = dra["Last Week %"].ToString();
                            string lstmonth = dra["Last Month"].ToString();
                            string lstmnthper = dra["Last Month %"].ToString();
                            string lstyr = dra["Last Year"].ToString();
                            string lstyrper = dra["Last Year %"].ToString();
                            if (ystday == "" || ystday == null)
                            {
                                ystday = "0";
                            }
                            if (ystdayper == "" || ystdayper == null)
                            {
                                ystdayper = "0";
                            }
                            if (lstweek == "" || lstweek == null)
                            {
                                lstweek = "0";
                            }
                            if (lstweekper == "" || lstweekper == null)
                            {
                                lstweekper = "0";
                            }
                            if (lstmonth == "" || lstmonth == null)
                            {
                                lstmonth = "0";
                            }
                            if (lstmnthper == "" || lstmnthper == null)
                            {
                                lstmnthper = "0";
                            }
                            if (lstyr == "" || lstyr == null)
                            {
                                lstyr = "0";
                            }
                            if (lstyrper == "" || lstyrper == null)
                            {
                                lstyrper = "0";
                            }
                            double ystdayval = Convert.ToDouble(ystday);
                            yesterdaytsum += ystdayval;
                            double ystdayperval = Convert.ToDouble(ystdayper);
                            yesterdaypersum += ystdayperval;
                            double lstweekval = Convert.ToDouble(lstweek);
                            lastweeksum += lstweekval;
                            double lstweekperval = Convert.ToDouble(lstweekper);
                            lastweeksumper += lstweekperval;
                            double lstmonthval = Convert.ToDouble(lstmonth);
                            lastmontsum += lstmonthval;
                            double lstmnthperval = Convert.ToDouble(lstmnthper);
                            lastmothsumper += lstmnthperval;
                            double lstyrval = Convert.ToDouble(lstyr);
                            lastyeartsum += lstyrval;
                            double lstyrperval = Convert.ToDouble(lstyrper);
                            latyearsumper += lstyrperval;
                        }
                        DataRow dmrow = MYReport.NewRow();
                        dmrow["BranchId"] = branchid;
                        dmrow["BranchName"] = branchname;
                        dmrow["Yester Day"] = Math.Round(yesterdaytsum, 0).ToString();
                        dmrow["Yester Day %"] = Math.Round(yesterdaypersum, 0).ToString();
                        dmrow["Ysign"] = "";
                        dmrow["Last Week"] = Math.Round(lastweeksum, 0).ToString();
                        if (lastweeksumper > 0)
                        {
                            dmrow["Last Week %"] = lastweeksumper.ToString();
                            dmrow["Wsign"] = "+";
                        }
                        else
                        {
                            dmrow["Last Week %"] = lastweeksumper.ToString();
                            dmrow["Wsign"] = "-";
                        }
                        dmrow["Last Month"] = Math.Round(lastmontsum, 0).ToString();
                        if (lastmothsumper > 0)
                        {
                            dmrow["Last Month %"] = lastmothsumper.ToString();
                            dmrow["Msign"] = "+";
                        }
                        else
                        {
                            dmrow["Last Month %"] = lastmothsumper.ToString();
                            dmrow["Msign"] = "-";
                        }
                        dmrow["Last Year"] = Math.Round(lastyeartsum, 0).ToString();
                        if (latyearsumper > 0)
                        {
                            dmrow["Last Year %"] = latyearsumper.ToString();
                            dmrow["Yesign"] = "+";
                        }
                        else
                        {
                            dmrow["Last Year %"] = latyearsumper.ToString();
                            dmrow["Yesign"] = "-";
                        }
                        MYReport.Rows.Add(dmrow);
                        string NB = "271";
                        string NB1 = "282";
                        string NB2 = "285";
                        string NB3 = "306";
                        foreach (DataRow draa in Report.Select("Branchid IN (('" + NB + "'), ('" + NB1 + "'), ('" + NB2 + "'), ('" + NB3 + "'))"))
                        {
                            DataRow dmrow1 = MYReport.NewRow();
                            dmrow1["BranchId"] = draa["BranchId"].ToString();
                            dmrow1["BranchName"] = draa["BranchName"].ToString();
                            dmrow1["Yester Day"] = draa["Yester Day"].ToString();
                            dmrow1["Yester Day %"] = draa["Yester Day %"].ToString();
                            dmrow1["Last Week"] = draa["Last Week"].ToString();
                            dmrow1["Last Week %"] = draa["Last Week %"].ToString();
                            dmrow1["Wsign"] = draa["Wsign"].ToString();
                            dmrow1["Last Month"] = draa["Last Month"].ToString();
                            dmrow1["Last Month %"] = draa["Last Month %"].ToString();
                            dmrow1["Msign"] = draa["Msign"].ToString();
                            dmrow1["Last Year"] = draa["Last Year"].ToString();
                            dmrow1["Last Year %"] = draa["Last Year %"].ToString();
                            dmrow1["Yesign"] = draa["Yesign"].ToString();
                            MYReport.Rows.Add(dmrow1);
                        }
                        if (MYReport.Rows.Count > 0)
                        {
                            grdBranchReport.DataSource = MYReport;
                            grdBranchReport.DataBind();
                        }
                        else
                        {
                            grdBranchReport.DataSource = Report;
                            grdBranchReport.DataBind();
                        }
                    }
                    else
                    {
                        grdBranchReport.DataSource = Report;
                        grdBranchReport.DataBind();
                    }
                    //}
                }
                #region
                if (SectedDataType == "Days")
                {
                    if (SalesType == "Plant")
                    {
                        if (BranchID == "172")
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName,indents.I_date, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch NOT IN (538 , 1801, 3625)) GROUP BY DATE(indents.I_date),branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate));
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            Dt_PresentMonth = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else if (BranchID == "3625")
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName,indents.I_date, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch IN (4609, 3625)) GROUP BY DATE(indents.I_date),branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate));
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            Dt_PresentMonth = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else if (BranchID == "1801")
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName,indents.I_date, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID)  GROUP BY DATE(indents.I_date),branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate));
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            Dt_PresentMonth = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName,indents.I_date, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID)  GROUP BY DATE(indents.I_date),branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate));
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            Dt_PresentMonth = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        if (BranchID == "172")
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName,indents.I_date, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch NOT IN (538 , 1801, 3625)) GROUP BY DATE(indents.I_date),branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(lastmonthfrom));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(lastmonthto));
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            dtSub_lastMonthData = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else if (BranchID == "3625")
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, indents.I_date,ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch IN (4609, 3625)) GROUP BY DATE(indents.I_date),branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(lastmonthfrom));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(lastmonthto));
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            dtSub_lastMonthData = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else if (BranchID == "1801")
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName,indents.I_date, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID)  GROUP BY DATE(indents.I_date),branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(lastmonthfrom));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(lastmonthto));
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            dtSub_lastMonthData = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, indents.I_date,ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID)  GROUP BY DATE(indents.I_date),branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(lastmonthfrom));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(lastmonthto));
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            dtSub_lastMonthData = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        if (BranchID == "172")
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName,indents.I_date, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch NOT IN (538 , 1801, 3625)) GROUP BY DATE(indents.I_date),branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(LastYearFromDate));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(LastYearToDate));
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            dtSub_lastYearData = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else if (BranchID == "3625")
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName,indents.I_date, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch NOT IN (4609, 3625)) GROUP BY DATE(indents.I_date),branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(LastYearFromDate));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(LastYearToDate));
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            dtSub_lastYearData = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else if (BranchID == "1801")
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, indents.I_date,ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID)  GROUP BY DATE(indents.I_date),branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(LastYearFromDate));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(LastYearToDate));
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            dtSub_lastYearData = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName,indents.I_date, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID)  GROUP BY DATE(indents.I_date),branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(LastYearFromDate));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(LastYearToDate));
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            dtSub_lastYearData = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                    }
                    else
                    {
                        cmd = new MySqlCommand("SELECT   branchdata.BranchName,indents.I_date, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SubBranch = @BranchID) GROUP BY DATE(indents.I_date),branchdata.sno");
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate));
                        cmd.Parameters.AddWithValue("@BranchID", BranchID);
                        Dt_PresentMonth = vdbmngr.SelectQuery(cmd).Tables[0];

                        cmd = new MySqlCommand("SELECT   branchdata.BranchName,indents.I_date, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SubBranch = @BranchID) GROUP BY DATE(indents.I_date),branchdata.sno");
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(lastmonthfrom));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(lastmonthto));
                        cmd.Parameters.AddWithValue("@BranchID", BranchID);
                        dtSub_lastMonthData = vdbmngr.SelectQuery(cmd).Tables[0];

                        cmd = new MySqlCommand("SELECT   branchdata.BranchName, indents.I_date,ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SubBranch = @BranchID) GROUP BY DATE(indents.I_date),branchdata.sno");
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(LastYearFromDate));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(LastYearToDate));
                        cmd.Parameters.AddWithValue("@BranchID", BranchID);
                        dtSub_lastYearData = vdbmngr.SelectQuery(cmd).Tables[0];
                    }

                    dtALL.Merge(Dt_PresentMonth);
                    dtALL.Merge(dtSub_lastMonthData);
                    dtALL.Merge(dtSub_lastYearData);
                    DataTable disticntbarnchname = new DataTable();
                    DataTable disticntbarnchname1 = new DataTable();
                    if (BranchID == "8009" || BranchID == "8012" || BranchID == "8013")
                    {
                        DataView view = new DataView(dtALL);
                        disticntbarnchname = view.ToTable(true, "BranchName", "BranchID");
                        DataView view3 = new DataView(dtALL);
                        disticntbarnchname1 = view3.ToTable(true, "I_Date");
                    }
                    else
                    {
                        DataView view = new DataView(dtALL);
                        disticntbarnchname = view.ToTable(true, "BranchName", "sno");
                        DataView view3 = new DataView(dtALL);
                        disticntbarnchname1 = view3.ToTable(true, "I_Date");
                    }
                    DataTable Report1 = new DataTable();
                    Report1.Columns.Add("Date");
                    foreach (DataRow branch in disticntbarnchname1.Rows)
                    {
                        DataRow newrow = Report1.NewRow();
                        DateTime dtDoe = Convert.ToDateTime(branch["i_date"].ToString());
                        string strdate = dtDoe.ToString("dd");
                        newrow["Date"] = strdate;
                        Report1.Rows.Add(newrow); ;
                    }
                    DataView view4 = new DataView(Report1);
                    DataTable disticntbarnchname4 = view4.ToTable(true, "Date");
                    DataTable Report = new DataTable();
                    Report.Columns.Add("BranchId");
                    Report.Columns.Add("DataType");
                    Report.Columns.Add("BranchName");
                    foreach (DataRow branch in disticntbarnchname4.Rows)
                    {
                        Report.Columns.Add(branch["Date"].ToString());
                    }
                    //DataRow newrow = Report.NewRow();
                    if (BranchID == "8009" || BranchID == "8012" || BranchID == "8013")
                    {
                        int j = 1;
                        foreach (DataRow branch in disticntbarnchname.Rows)
                        {
                            DataRow newrow1 = Report.NewRow();
                            if (j == 1)
                            {
                                newrow1["DataType"] = "This Month";

                            }
                            newrow1["BranchName"] = branch["BranchName"].ToString();
                            newrow1["BranchId"] = branch["BranchID"].ToString();
                            float DispQty = 0;
                            foreach (DataRow drSubData in Dt_PresentMonth.Rows)
                            {
                                if (branch["BranchID"].ToString() == drSubData["BranchID"].ToString())
                                {
                                    float.TryParse(drSubData["DeliveryQty"].ToString(), out DispQty);
                                    if (DispQty > 0)
                                    {

                                        DateTime dtDoe = Convert.ToDateTime(drSubData["i_date"].ToString());
                                        string strdate = dtDoe.ToString("dd");
                                        double Avgqty = DispQty / 2;
                                        newrow1[strdate] = Math.Round(Avgqty);
                                        // yesterdaygrandtotal += DispQty;

                                    }
                                }
                            }
                            Report.Rows.Add(newrow1);

                            j++;
                        }
                        int j1 = 1;
                        foreach (DataRow branch in disticntbarnchname.Rows)
                        {
                            DataRow newrow1 = Report.NewRow();
                            if (j1 == 1)
                            {
                                newrow1["DataType"] = "Last Month";
                            }
                            newrow1["BranchName"] = branch["BranchName"].ToString();
                            newrow1["BranchId"] = branch["BranchID"].ToString();
                            float DispQty = 0;
                            foreach (DataRow drSubData in dtSub_lastMonthData.Rows)
                            {
                                if (branch["BranchID"].ToString() == drSubData["BranchID"].ToString())
                                {
                                    float.TryParse(drSubData["DeliveryQty"].ToString(), out DispQty);
                                    if (DispQty > 0)
                                    {
                                        DateTime dtDoe = Convert.ToDateTime(drSubData["i_date"].ToString());
                                        string strdate = dtDoe.ToString("dd");
                                        double Avgqty = DispQty / 2;
                                        newrow1[strdate] = Math.Round(Avgqty);

                                        // lastmonthgrandtotal += DispQty;

                                    }
                                }
                            }
                            Report.Rows.Add(newrow1);
                            j1++;
                        }
                        int j2 = 1;
                        foreach (DataRow branch in disticntbarnchname.Rows)
                        {
                            DataRow newrow1 = Report.NewRow();
                            if (j2 == 1)
                            {
                                newrow1["DataType"] = "Last Year";
                            }
                            newrow1["BranchName"] = branch["BranchName"].ToString();
                            newrow1["BranchId"] = branch["BranchID"].ToString();
                            float DispQty = 0;
                            foreach (DataRow drSubData in dtSub_lastYearData.Rows)
                            {
                                if (branch["BranchID"].ToString() == drSubData["BranchID"].ToString())
                                {
                                    float.TryParse(drSubData["DeliveryQty"].ToString(), out DispQty);
                                    if (DispQty > 0)
                                    {
                                        DateTime dtDoe = Convert.ToDateTime(drSubData["i_date"].ToString());
                                        string strdate = dtDoe.ToString("dd");
                                        double Avgqty = DispQty / 2;
                                        newrow1[strdate] = Math.Round(Avgqty);

                                        //lastyeargrandtotal += DispQty;

                                    }
                                }
                            }
                            if (DispQty > 0)
                            {
                                Report.Rows.Add(newrow1);
                                j2++;
                            }
                        }
                    }
                    else
                    {
                        int j1 = 1;
                        foreach (DataRow branch in disticntbarnchname.Rows)
                        {
                            DataRow newrow1 = Report.NewRow();

                            if (j1 == 1)
                            {
                                newrow1["DataType"] = "This Month";
                            }

                            newrow1["BranchName"] = branch["BranchName"].ToString();
                            newrow1["BranchId"] = branch["sno"].ToString();

                            float DispQty = 0;
                            foreach (DataRow drSubData in Dt_PresentMonth.Rows)
                            {
                                if (branch["sno"].ToString() == drSubData["sno"].ToString())
                                {
                                    float.TryParse(drSubData["DeliveryQty"].ToString(), out DispQty);
                                    if (DispQty > 0)
                                    {
                                        DateTime dtDoe = Convert.ToDateTime(drSubData["i_date"].ToString());
                                        string strdate = dtDoe.ToString("dd");
                                        //newrow1[strdate] = drSubData["AvgQty"].ToString();
                                        double Avgqty = DispQty / 2;
                                        newrow1[strdate] = Math.Round(Avgqty);
                                        //yesterdaygrandtotal += DispQty;
                                    }
                                }
                            }
                            Report.Rows.Add(newrow1);
                            j1++;
                        }
                        int j2 = 1;
                        foreach (DataRow branch in disticntbarnchname.Rows)
                        {
                            DataRow newrow1 = Report.NewRow();
                            newrow1["BranchName"] = branch["BranchName"].ToString();
                            newrow1["BranchId"] = branch["sno"].ToString();
                            if (j2 == 1)
                            {
                                newrow1["DataType"] = "Last Month";
                            }
                            float DispQty = 0;
                            foreach (DataRow drSubData in dtSub_lastMonthData.Rows)
                            {
                                if (branch["sno"].ToString() == drSubData["sno"].ToString())
                                {
                                    float.TryParse(drSubData["DeliveryQty"].ToString(), out DispQty);
                                    if (DispQty > 0)
                                    {
                                        DateTime dtDoe = Convert.ToDateTime(drSubData["i_date"].ToString());
                                        string strdate = dtDoe.ToString("dd");
                                        // newrow1[strdate] = drSubData["AvgQty"].ToString();
                                        double Avgqty = DispQty / 2;
                                        newrow1[strdate] = Math.Round(Avgqty);
                                        //lastmonthgrandtotal += DispQty;

                                    }
                                }
                            }
                            Report.Rows.Add(newrow1);
                            j2++;
                        }
                        int j3 = 1;
                        foreach (DataRow branch in disticntbarnchname.Rows)
                        {
                            DataRow newrow1 = Report.NewRow();
                            newrow1["BranchName"] = branch["BranchName"].ToString();
                            newrow1["BranchId"] = branch["sno"].ToString();
                            if (j3 == 1)
                            {
                                newrow1["DataType"] = "Last Year";
                            }
                            float DispQty = 0;
                            foreach (DataRow drSubData in dtSub_lastYearData.Rows)
                            {
                                if (branch["sno"].ToString() == drSubData["sno"].ToString())
                                {
                                    float.TryParse(drSubData["DeliveryQty"].ToString(), out DispQty);
                                    if (DispQty > 0)
                                    {
                                        DateTime dtDoe = Convert.ToDateTime(drSubData["i_date"].ToString());
                                        string strdate = dtDoe.ToString("dd");
                                        double Avgqty = DispQty / 2;
                                        newrow1[strdate] = Math.Round(Avgqty);//math.roAvgqty;
                                        //lastyeargrandtotal += DispQty;
                                    }
                                }
                            }
                            Report.Rows.Add(newrow1);
                            j3++;
                        }

                    }
                    grdBranchReport.DataSource = Report;
                    grdBranchReport.DataBind();
                }
                #endregion
                #region
                else if (SectedDataType == "Weak")
                {
                    string strfromdate = FromDate.ToString();
                    DateTime fromDate = DateTime.Parse(strfromdate.Trim());
                    var d_fromdate = fromDate;
                    CultureInfo cul_from = CultureInfo.CurrentCulture;
                    int from_weekNum = cul_from.Calendar.GetWeekOfYear(
                        d_fromdate,
                        CalendarWeekRule.FirstDay,
                        DayOfWeek.Monday);
                    string strtodate = ToDate.ToString();
                    DateTime toDate = DateTime.Parse(strtodate.Trim());
                    var d_toDate = toDate;
                    CultureInfo cul_to = CultureInfo.CurrentCulture;
                    int to_weekNum = cul_to.Calendar.GetWeekOfYear(
                        d_toDate,
                        CalendarWeekRule.FirstDay,
                        DayOfWeek.Monday);
                    int diffweeks = to_weekNum - from_weekNum;
                    DateTime firstmonth = new DateTime();
                    DateTime lastmonth = new DateTime();
                    ToDate = ToDate.AddMonths(1);
                    TimeSpan dateSpan = ToDate.Subtract(FromDate);
                    int years = (dateSpan.Days / 365);
                    int months = ((dateSpan.Days % 365) / 31) + (years * 12);
                    int N = 0;
                    int i = 1;
                    DataTable dtPresentAllWeeks = new DataTable();
                    DataTable dtLastAllWeeks = new DataTable();
                    DataTable dtLastYearAllWeeks = new DataTable();
                    if (months != 0)
                    {
                        int newweek = from_weekNum;
                        int weaknumber = 0;
                        for (int j = 0; j < diffweeks; j++)
                        {
                            firstmonth = GetLowDate(FromDate);
                            lastmonth = GetHighDate(firstmonth.AddDays(7));
                            DateTime dtF = firstmonth;
                            string ChangedTime1 = firstmonth.ToString("dd/MMM");
                            string ChangedTime2 = lastmonth.ToString("dd/MMM");
                            string Changedt = firstmonth.ToString("MMM");
                            string mnth = firstmonth.ToString("MM");
                            weaknumber++;
                            if (SalesType == "Plant")
                            {
                                if (BranchID == "172")
                                {
                                    cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch NOT IN (538 , 1801, 3625)) GROUP BY branchdata.sno");
                                    cmd.Parameters.AddWithValue("@d1", dtF);
                                    cmd.Parameters.AddWithValue("@d2", lastmonth);
                                    cmd.Parameters.AddWithValue("@BranchID", BranchID);
                                    Dt_PresentMonth = vdbmngr.SelectQuery(cmd).Tables[0];
                                }
                                else if (BranchID == "3625")
                                {
                                    cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch IN (4609, 3625)) GROUP BY branchdata.sno");
                                    cmd.Parameters.AddWithValue("@d1", dtF);
                                    cmd.Parameters.AddWithValue("@d2", lastmonth);
                                    cmd.Parameters.AddWithValue("@BranchID", BranchID);
                                    Dt_PresentMonth = vdbmngr.SelectQuery(cmd).Tables[0];
                                }
                                else if (BranchID == "1801")
                                {
                                    cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID)  GROUP BY branchdata.sno");
                                    cmd.Parameters.AddWithValue("@d1", dtF);
                                    cmd.Parameters.AddWithValue("@d2", lastmonth);
                                    cmd.Parameters.AddWithValue("@BranchID", BranchID);
                                    Dt_PresentMonth = vdbmngr.SelectQuery(cmd).Tables[0];
                                }
                                else
                                {
                                    cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID)  GROUP BY branchdata.sno");
                                    cmd.Parameters.AddWithValue("@d1", dtF);
                                    cmd.Parameters.AddWithValue("@d2", lastmonth);
                                    cmd.Parameters.AddWithValue("@BranchID", BranchID);
                                    Dt_PresentMonth = vdbmngr.SelectQuery(cmd).Tables[0];
                                }
                                if (BranchID == "172")
                                {
                                    cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch NOT IN (538 , 1801, 3625)) GROUP BY branchdata.sno");
                                    cmd.Parameters.AddWithValue("@d1", dtF.AddDays(-29));
                                    cmd.Parameters.AddWithValue("@d2", lastmonth.AddDays(-29));
                                    cmd.Parameters.AddWithValue("@BranchID", BranchID);
                                    dtSub_lastMonthData = vdbmngr.SelectQuery(cmd).Tables[0];
                                }
                                else if (BranchID == "3625")
                                {
                                    cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch IN (4609, 3625)) GROUP BY branchdata.sno");
                                    cmd.Parameters.AddWithValue("@d1", dtF.AddDays(-29));
                                    cmd.Parameters.AddWithValue("@d2", lastmonth.AddDays(-29));
                                    cmd.Parameters.AddWithValue("@BranchID", BranchID);
                                    dtSub_lastMonthData = vdbmngr.SelectQuery(cmd).Tables[0];
                                }
                                else if (BranchID == "1801")
                                {
                                    cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID)  GROUP BY branchdata.sno");
                                    cmd.Parameters.AddWithValue("@d1", dtF.AddDays(-29));
                                    cmd.Parameters.AddWithValue("@d2", lastmonth.AddDays(-29));
                                    cmd.Parameters.AddWithValue("@BranchID", BranchID);
                                    dtSub_lastMonthData = vdbmngr.SelectQuery(cmd).Tables[0];
                                }
                                else
                                {
                                    cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID)  GROUP BY branchdata.sno");
                                    cmd.Parameters.AddWithValue("@d1", dtF.AddDays(-29));
                                    cmd.Parameters.AddWithValue("@d2", lastmonth.AddDays(-29));
                                    cmd.Parameters.AddWithValue("@BranchID", BranchID);
                                    dtSub_lastMonthData = vdbmngr.SelectQuery(cmd).Tables[0];
                                }
                                if (BranchID == "172")
                                {
                                    cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch NOT IN (538 , 1801, 3625)) GROUP BY branchdata.sno");
                                    cmd.Parameters.AddWithValue("@d1", dtF.AddDays(-365));
                                    cmd.Parameters.AddWithValue("@d2", lastmonth.AddDays(-365));
                                    cmd.Parameters.AddWithValue("@BranchID", BranchID);
                                    dtSub_lastYearData = vdbmngr.SelectQuery(cmd).Tables[0];
                                }
                                else if (BranchID == "3625")
                                {
                                    cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch NOT IN (4609, 3625)) GROUP BY branchdata.sno");
                                    cmd.Parameters.AddWithValue("@d1", dtF.AddDays(-365));
                                    cmd.Parameters.AddWithValue("@d2", lastmonth.AddDays(-365));
                                    cmd.Parameters.AddWithValue("@BranchID", BranchID);
                                    dtSub_lastYearData = vdbmngr.SelectQuery(cmd).Tables[0];
                                }
                                else if (BranchID == "1801")
                                {
                                    cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID)  GROUP BY branchdata.sno");
                                    cmd.Parameters.AddWithValue("@d1", dtF.AddDays(-365));
                                    cmd.Parameters.AddWithValue("@d2", lastmonth.AddDays(-365));
                                    cmd.Parameters.AddWithValue("@BranchID", BranchID);
                                    dtSub_lastYearData = vdbmngr.SelectQuery(cmd).Tables[0];
                                }
                                else
                                {
                                    cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID)  GROUP BY branchdata.sno");
                                    cmd.Parameters.AddWithValue("@d1", dtF.AddDays(-365));
                                    cmd.Parameters.AddWithValue("@d2", lastmonth.AddDays(-365));
                                    cmd.Parameters.AddWithValue("@BranchID", BranchID);
                                    dtSub_lastYearData = vdbmngr.SelectQuery(cmd).Tables[0];
                                }
                            }
                            else
                            {
                                cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SubBranch = @BranchID) GROUP BY branchdata.sno");
                                cmd.Parameters.AddWithValue("@d1", dtF);
                                cmd.Parameters.AddWithValue("@d2", lastmonth);
                                cmd.Parameters.AddWithValue("@BranchID", BranchID);
                                Dt_PresentMonth = vdbmngr.SelectQuery(cmd).Tables[0];

                                cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SubBranch = @BranchID) GROUP BY branchdata.sno");
                                cmd.Parameters.AddWithValue("@d1", dtF.AddDays(-29));
                                cmd.Parameters.AddWithValue("@d2", lastmonth.AddDays(-29));
                                cmd.Parameters.AddWithValue("@BranchID", BranchID);
                                dtSub_lastMonthData = vdbmngr.SelectQuery(cmd).Tables[0];


                                cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SubBranch = @BranchID) GROUP BY branchdata.sno");
                                cmd.Parameters.AddWithValue("@d1", dtF.AddDays(-365));
                                cmd.Parameters.AddWithValue("@d2", lastmonth.AddDays(-365));
                                cmd.Parameters.AddWithValue("@BranchID", BranchID);
                                dtSub_lastYearData = vdbmngr.SelectQuery(cmd).Tables[0];
                            }
                            FromDate = FromDate.AddDays(7);
                            DataTable dttemp = new DataTable();
                            DataTable dttemp1 = new DataTable();
                            dttemp.Columns.Add("BranchName");
                            dttemp.Columns.Add("BranchID");
                            dttemp.Columns.Add("DeliveryQty");
                            dttemp.Columns.Add("Date");
                            dttemp.Columns.Add("DateType");
                            foreach (DataRow drSubData in Dt_PresentMonth.Rows)
                            {
                                DataRow newrow = dttemp.NewRow();
                                newrow["BranchName"] = drSubData["BranchName"].ToString();
                                newrow["BranchID"] = drSubData["sno"].ToString();
                                newrow["DeliveryQty"] = drSubData["DeliveryQty"].ToString();
                                newrow["DateType"] = "PresentMonth";
                                newrow["Date"] = "Weak" + weaknumber;
                                dttemp.Rows.Add(newrow);
                            }
                            dtPresentAllWeeks.Merge(dttemp);
                            dtALL.Merge(dttemp);
                            dttemp = new DataTable();
                            dttemp.Columns.Add("BranchName");
                            dttemp.Columns.Add("BranchID");
                            dttemp.Columns.Add("DeliveryQty");
                            dttemp.Columns.Add("Date");
                            dttemp.Columns.Add("DateType");
                            foreach (DataRow drSubData in dtSub_lastMonthData.Rows)
                            {
                                DataRow newrow = dttemp.NewRow();
                                newrow["BranchName"] = drSubData["BranchName"].ToString();
                                newrow["BranchID"] = drSubData["sno"].ToString();
                                newrow["DeliveryQty"] = drSubData["DeliveryQty"].ToString();
                                newrow["DateType"] = "LastMonth";
                                newrow["Date"] = "Weak" + weaknumber;
                                dttemp.Rows.Add(newrow);
                            }
                            dtLastAllWeeks.Merge(dttemp);
                            dtALL.Merge(dttemp);
                            dttemp = new DataTable();
                            dttemp.Columns.Add("BranchName");
                            dttemp.Columns.Add("BranchID");
                            dttemp.Columns.Add("DeliveryQty");
                            dttemp.Columns.Add("Date");
                            dttemp.Columns.Add("DateType");
                            foreach (DataRow drSubData in dtSub_lastYearData.Rows)
                            {
                                DataRow newrow = dttemp.NewRow();
                                newrow["BranchName"] = drSubData["BranchName"].ToString();
                                newrow["BranchID"] = drSubData["sno"].ToString();
                                newrow["DeliveryQty"] = drSubData["DeliveryQty"].ToString();
                                newrow["DateType"] = "LastYear";
                                newrow["Date"] = "Weak" + weaknumber;
                                dttemp.Rows.Add(newrow);
                            }
                            dtLastYearAllWeeks.Merge(dttemp);
                            dtALL.Merge(dttemp);
                            // dttemp = new DataTable();
                        }
                    }

                    //Write Code  Here

                    DataTable disticntbarnchname = new DataTable();
                    DataTable disticntbarnchname1 = new DataTable();
                    if (BranchID == "8009" || BranchID == "8012" || BranchID == "8013")
                    {
                        DataView view = new DataView(dtALL);
                        disticntbarnchname = view.ToTable(true, "BranchName", "BranchID");
                        DataView view3 = new DataView(dtALL);
                        disticntbarnchname1 = view3.ToTable(true, "Date");
                    }
                    else
                    {
                        DataView view = new DataView(dtALL);
                        disticntbarnchname = view.ToTable(true, "BranchName", "BranchID");
                        DataView view3 = new DataView(dtALL);
                        disticntbarnchname1 = view3.ToTable(true, "Date");
                    }

                    DataTable Report = new DataTable();
                    Report.Columns.Add("BranchId");
                    Report.Columns.Add("DataType");
                    Report.Columns.Add("BranchName");
                    foreach (DataRow branch in disticntbarnchname1.Rows)
                    {
                        Report.Columns.Add(branch["Date"].ToString());
                    }
                    //DataRow newrow = Report.NewRow();

                    int K = 1;
                    foreach (DataRow branch in disticntbarnchname.Rows)
                    {
                        DataRow newrow1 = Report.NewRow();
                        if (K == 1)
                        {
                            newrow1["DataType"] = "This Month";
                        }
                        newrow1["BranchName"] = branch["BranchName"].ToString();
                        newrow1["BranchId"] = branch["BranchID"].ToString();
                        float DispQty = 0;
                        foreach (DataRow drSubData in dtPresentAllWeeks.Rows)
                        {
                            if (branch["BranchID"].ToString() == drSubData["BranchID"].ToString())
                            {
                                float.TryParse(drSubData["DeliveryQty"].ToString(), out DispQty);
                                if (DispQty > 0)
                                {

                                    double avgqty = DispQty / 2;
                                    avgqty = Math.Round(avgqty);
                                    newrow1[drSubData["Date"].ToString()] = avgqty;
                                    // yesterdaygrandtotal += DispQty;

                                }
                            }
                        }
                        Report.Rows.Add(newrow1);

                        K++;
                    }
                    int K1 = 1;
                    foreach (DataRow branch in disticntbarnchname.Rows)
                    {
                        DataRow newrow1 = Report.NewRow();
                        if (K1 == 1)
                        {
                            newrow1["DataType"] = "Last Month";
                        }
                        newrow1["BranchName"] = branch["BranchName"].ToString();
                        newrow1["BranchId"] = branch["BranchID"].ToString();
                        float DispQty = 0;
                        foreach (DataRow drSubData in dtLastAllWeeks.Rows)
                        {
                            if (branch["BranchID"].ToString() == drSubData["BranchID"].ToString())
                            {
                                float.TryParse(drSubData["DeliveryQty"].ToString(), out DispQty);
                                if (DispQty > 0)
                                {
                                    double avgqty = DispQty / 2;
                                    avgqty = Math.Round(avgqty);
                                    newrow1[drSubData["Date"].ToString()] = avgqty;

                                    // lastmonthgrandtotal += DispQty;

                                }
                            }
                        }
                        Report.Rows.Add(newrow1);
                        K1++;
                    }
                    int K2 = 1;
                    foreach (DataRow branch in disticntbarnchname.Rows)
                    {
                        DataRow newrow1 = Report.NewRow();
                        if (K2 == 1)
                        {
                            newrow1["DataType"] = "Last Year";
                        }
                        newrow1["BranchName"] = branch["BranchName"].ToString();
                        newrow1["BranchId"] = branch["BranchID"].ToString();
                        float DispQty = 0;
                        foreach (DataRow drSubData in dtLastYearAllWeeks.Rows)
                        {
                            if (branch["BranchID"].ToString() == drSubData["BranchID"].ToString())
                            {
                                float.TryParse(drSubData["DeliveryQty"].ToString(), out DispQty);
                                if (DispQty > 0)
                                {
                                    double avgqty = DispQty / 2;
                                    avgqty = Math.Round(avgqty);
                                    newrow1[drSubData["Date"].ToString()] = avgqty;
                                    //lastyeargrandtotal += DispQty;
                                }
                            }
                        }
                        if (DispQty > 0)
                        {
                            Report.Rows.Add(newrow1);
                            K2++;
                        }
                    }
                    grdBranchReport.DataSource = Report;
                    grdBranchReport.DataBind();
                }
                #endregion
                #region
                else if (SectedDataType == "Month")
                {
                    DateTime firstmonth = new DateTime();
                    DateTime lastmonth = new DateTime();
                    ToDate = ToDate.AddMonths(1);
                    TimeSpan dateSpan = ToDate.Subtract(FromDate);
                    int years = (dateSpan.Days / 365);
                    int months = ((dateSpan.Days % 365) / 31) + (years * 12);
                    int N = 0;
                    int i = 1;
                    if (months != 0)
                    {
                        int monthnumber = 0;
                        for (int j = 0; j < months; j++)
                        {
                            firstmonth = GetLowMonthRetrive(FromDate.AddMonths(j));
                            lastmonth = GetHighMonth(firstmonth);
                            DateTime dtF = firstmonth.AddDays(-1);
                            TimeSpan dateSpan2 = lastmonth.Subtract(dtF);
                            int NoOfdays = dateSpan2.Days;
                            monthnumber++;
                            if (SalesType == "Plant")
                            {
                                if (BranchID == "172")
                                {
                                    cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch NOT IN (538 , 1801, 3625)) GROUP BY branchdata.sno");
                                    cmd.Parameters.AddWithValue("@d1", dtF);
                                    cmd.Parameters.AddWithValue("@d2", lastmonth);
                                    cmd.Parameters.AddWithValue("@BranchID", BranchID);
                                    Dt_PresentMonth = vdbmngr.SelectQuery(cmd).Tables[0];
                                }
                                else if (BranchID == "3625")
                                {
                                    cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch IN (4609, 3625)) GROUP BY branchdata.sno");
                                    cmd.Parameters.AddWithValue("@d1", dtF);
                                    cmd.Parameters.AddWithValue("@d2", lastmonth);
                                    cmd.Parameters.AddWithValue("@BranchID", BranchID);
                                    Dt_PresentMonth = vdbmngr.SelectQuery(cmd).Tables[0];
                                }
                                else if (BranchID == "1801")
                                {
                                    cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID)  GROUP BY branchdata.sno");
                                    cmd.Parameters.AddWithValue("@d1", dtF);
                                    cmd.Parameters.AddWithValue("@d2", lastmonth);
                                    cmd.Parameters.AddWithValue("@BranchID", BranchID);
                                    Dt_PresentMonth = vdbmngr.SelectQuery(cmd).Tables[0];
                                }
                                else
                                {
                                    cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID)  GROUP BY branchdata.sno");
                                    cmd.Parameters.AddWithValue("@d1", dtF);
                                    cmd.Parameters.AddWithValue("@d2", lastmonth);
                                    cmd.Parameters.AddWithValue("@BranchID", BranchID);
                                    Dt_PresentMonth = vdbmngr.SelectQuery(cmd).Tables[0];
                                }
                                if (BranchID == "172")
                                {
                                    cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch NOT IN (538 , 1801, 3625)) GROUP BY branchdata.sno");
                                    cmd.Parameters.AddWithValue("@d1", dtF.AddDays(-29));
                                    cmd.Parameters.AddWithValue("@d2", lastmonth.AddDays(-29));
                                    cmd.Parameters.AddWithValue("@BranchID", BranchID);
                                    dtSub_lastMonthData = vdbmngr.SelectQuery(cmd).Tables[0];
                                }
                                else if (BranchID == "3625")
                                {
                                    cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch IN (4609, 3625)) GROUP BY branchdata.sno");
                                    cmd.Parameters.AddWithValue("@d1", dtF.AddDays(-29));
                                    cmd.Parameters.AddWithValue("@d2", lastmonth.AddDays(-29));
                                    cmd.Parameters.AddWithValue("@BranchID", BranchID);
                                    dtSub_lastMonthData = vdbmngr.SelectQuery(cmd).Tables[0];
                                }
                                else if (BranchID == "1801")
                                {
                                    cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID)  GROUP BY branchdata.sno");
                                    cmd.Parameters.AddWithValue("@d1", dtF.AddDays(-29));
                                    cmd.Parameters.AddWithValue("@d2", lastmonth.AddDays(-29));
                                    cmd.Parameters.AddWithValue("@BranchID", BranchID);
                                    dtSub_lastMonthData = vdbmngr.SelectQuery(cmd).Tables[0];
                                }
                                else
                                {
                                    cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID)  GROUP BY branchdata.sno");
                                    cmd.Parameters.AddWithValue("@d1", dtF.AddDays(-29));
                                    cmd.Parameters.AddWithValue("@d2", lastmonth.AddDays(-29));
                                    cmd.Parameters.AddWithValue("@BranchID", BranchID);
                                    dtSub_lastMonthData = vdbmngr.SelectQuery(cmd).Tables[0];
                                }
                                if (BranchID == "172")
                                {
                                    cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch NOT IN (538 ,1801, 3625)) GROUP BY branchdata.sno");
                                    cmd.Parameters.AddWithValue("@d1", dtF.AddDays(-365));
                                    cmd.Parameters.AddWithValue("@d2", lastmonth.AddDays(-365));
                                    cmd.Parameters.AddWithValue("@BranchID", BranchID);
                                    dtSub_lastYearData = vdbmngr.SelectQuery(cmd).Tables[0];
                                }
                                else if (BranchID == "3625")
                                {
                                    cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch NOT IN (4609, 3625)) GROUP BY branchdata.sno");
                                    cmd.Parameters.AddWithValue("@d1", dtF.AddDays(-365));
                                    cmd.Parameters.AddWithValue("@d2", lastmonth.AddDays(-365));
                                    cmd.Parameters.AddWithValue("@BranchID", BranchID);
                                    dtSub_lastYearData = vdbmngr.SelectQuery(cmd).Tables[0];
                                }
                                else if (BranchID == "1801")
                                {
                                    cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID)  GROUP BY branchdata.sno");
                                    cmd.Parameters.AddWithValue("@d1", dtF.AddDays(-365));
                                    cmd.Parameters.AddWithValue("@d2", lastmonth.AddDays(-365));
                                    cmd.Parameters.AddWithValue("@BranchID", BranchID);
                                    dtSub_lastYearData = vdbmngr.SelectQuery(cmd).Tables[0];
                                }
                                else
                                {
                                    cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID)  GROUP BY branchdata.sno");
                                    cmd.Parameters.AddWithValue("@d1", dtF.AddDays(-365));
                                    cmd.Parameters.AddWithValue("@d2", lastmonth.AddDays(-365));
                                    cmd.Parameters.AddWithValue("@BranchID", BranchID);
                                    dtSub_lastYearData = vdbmngr.SelectQuery(cmd).Tables[0];
                                }
                            }
                            else
                            {
                                cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SubBranch = @BranchID) GROUP BY branchdata.sno");
                                cmd.Parameters.AddWithValue("@d1", dtF);
                                cmd.Parameters.AddWithValue("@d2", lastmonth);
                                cmd.Parameters.AddWithValue("@BranchID", BranchID);
                                Dt_PresentMonth = vdbmngr.SelectQuery(cmd).Tables[0];

                                cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SubBranch = @BranchID) GROUP BY branchdata.sno");
                                cmd.Parameters.AddWithValue("@d1", dtF.AddDays(-29));
                                cmd.Parameters.AddWithValue("@d2", lastmonth.AddDays(-29));
                                cmd.Parameters.AddWithValue("@BranchID", BranchID);
                                dtSub_lastMonthData = vdbmngr.SelectQuery(cmd).Tables[0];


                                cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SubBranch = @BranchID) GROUP BY branchdata.sno");
                                cmd.Parameters.AddWithValue("@d1", dtF.AddDays(-365));
                                cmd.Parameters.AddWithValue("@d2", lastmonth.AddDays(-365));
                                cmd.Parameters.AddWithValue("@BranchID", BranchID);
                                dtSub_lastYearData = vdbmngr.SelectQuery(cmd).Tables[0];
                            }
                            FromDate = FromDate.AddDays(7);
                            DataTable dttemp = new DataTable();
                            DataTable dttemp1 = new DataTable();
                            dttemp.Columns.Add("BranchName");
                            dttemp.Columns.Add("BranchID");
                            dttemp.Columns.Add("DeliveryQty");
                            dttemp.Columns.Add("Date");
                            dttemp.Columns.Add("DateType");
                            foreach (DataRow drSubData in Dt_PresentMonth.Rows)
                            {
                                DataRow newrow = dttemp.NewRow();
                                newrow["BranchName"] = drSubData["BranchName"].ToString();
                                newrow["BranchID"] = drSubData["sno"].ToString();
                                newrow["DeliveryQty"] = drSubData["DeliveryQty"].ToString();
                                newrow["DateType"] = "PresentMonth";
                                newrow["Date"] = firstmonth.ToString("MMM");
                                dttemp.Rows.Add(newrow);
                            }

                            dtPresentAllMonth.Merge(dttemp);
                            dtALL.Merge(dttemp);

                            dttemp = new DataTable();
                            dttemp.Columns.Add("BranchName");
                            dttemp.Columns.Add("BranchID");
                            dttemp.Columns.Add("DeliveryQty");
                            dttemp.Columns.Add("Date");
                            dttemp.Columns.Add("DateType");
                            foreach (DataRow drSubData in dtSub_lastYearData.Rows)
                            {
                                DataRow newrow = dttemp.NewRow();
                                newrow["BranchName"] = drSubData["BranchName"].ToString();
                                newrow["BranchID"] = drSubData["sno"].ToString();
                                newrow["DeliveryQty"] = drSubData["DeliveryQty"].ToString();
                                newrow["DateType"] = "LastYear";
                                newrow["Date"] = firstmonth.ToString("MMM");
                                dttemp.Rows.Add(newrow);
                            }
                            dtLastYearAllMonth.Merge(dttemp);
                            dtALL.Merge(dttemp);
                            // dttemp = new DataTable();
                        }
                    }

                    //write  here code
                    DataTable disticntbarnchname = new DataTable();
                    DataTable disticntbarnchname1 = new DataTable();
                    if (BranchID == "8009" || BranchID == "8012" || BranchID == "8013")
                    {
                        DataView view = new DataView(dtALL);
                        disticntbarnchname = view.ToTable(true, "BranchName", "BranchID");
                        DataView view3 = new DataView(dtALL);
                        disticntbarnchname1 = view3.ToTable(true, "Date");
                    }
                    else
                    {
                        DataView view = new DataView(dtALL);
                        disticntbarnchname = view.ToTable(true, "BranchName", "BranchID");
                        DataView view3 = new DataView(dtALL);
                        disticntbarnchname1 = view3.ToTable(true, "Date");
                    }
                    DataTable Report = new DataTable();
                    Report.Columns.Add("BranchId");
                    Report.Columns.Add("DataType");
                    Report.Columns.Add("BranchName");
                    foreach (DataRow branch in disticntbarnchname1.Rows)
                    {
                        Report.Columns.Add(branch["Date"].ToString());
                    }
                    //DataRow newrow = Report.NewRow();

                    int K = 1;
                    foreach (DataRow branch in disticntbarnchname.Rows)
                    {
                        DataRow newrow1 = Report.NewRow();
                        if (K == 1)
                        {
                            newrow1["DataType"] = "This Year";
                        }
                        newrow1["BranchName"] = branch["BranchName"].ToString();
                        newrow1["BranchId"] = branch["BranchID"].ToString();
                        float DispQty = 0;
                        foreach (DataRow drSubData in dtPresentAllMonth.Rows)
                        {
                            if (branch["BranchID"].ToString() == drSubData["BranchID"].ToString())
                            {
                                float.TryParse(drSubData["DeliveryQty"].ToString(), out DispQty);
                                if (DispQty > 0)
                                {

                                    double avgqty = DispQty / 2;
                                    avgqty = Math.Round(avgqty);
                                    newrow1[drSubData["Date"].ToString()] = avgqty;
                                    // yesterdaygrandtotal += DispQty;

                                }
                            }
                        }
                        Report.Rows.Add(newrow1);

                        K++;
                    }
                    int K2 = 1;
                    foreach (DataRow branch in disticntbarnchname.Rows)
                    {
                        DataRow newrow1 = Report.NewRow();
                        if (K2 == 1)
                        {
                            newrow1["DataType"] = "Last Year";
                        }
                        newrow1["BranchName"] = branch["BranchName"].ToString();
                        newrow1["BranchId"] = branch["BranchID"].ToString();
                        float DispQty = 0;
                        foreach (DataRow drSubData in dtLastYearAllMonth.Rows)
                        {
                            if (branch["BranchID"].ToString() == drSubData["BranchID"].ToString())
                            {
                                float.TryParse(drSubData["DeliveryQty"].ToString(), out DispQty);
                                if (DispQty > 0)
                                {
                                    double avgqty = DispQty / 2;
                                    avgqty = Math.Round(avgqty);
                                    newrow1[drSubData["Date"].ToString()] = avgqty;
                                    //lastyeargrandtotal += DispQty;
                                }
                            }
                        }
                        if (DispQty > 0)
                        {
                            Report.Rows.Add(newrow1);
                            K2++;
                        }
                    }
                #endregion
                    grdBranchReport.DataSource = Report;
                    grdBranchReport.DataBind();
                }
            }
        }
        catch (Exception ex)
        {

        }
    }
    protected void grdBranchReport_RowCommand(object sender, GridViewCommandEventArgs e)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            int rowIndex = Convert.ToInt32(e.CommandArgument);
            GridViewRow row = grdBranchReport.Rows[rowIndex];
            string BranchID = row.Cells[1].Text;
            string SalesOfficeName = row.Cells[2].Text;
            Session["SalesOfficeName"] = SalesOfficeName;
            Session["ClickBranchid"] = BranchID;
            string SectedDataType = ddlDayType.SelectedItem.Value;
            string s = Session["IndDate"].ToString();
            var dt = DateTime.ParseExact(s, "ddd MMM dd yyyy HH:mm:ss 'GMT'zzz", System.Globalization.CultureInfo.InvariantCulture);
            string IndDate = dt.ToString("yyyy-MM-dd");

            string FD = Label47.Text;
            string TD = Label48.Text;

            DateTime ServerDateCurrentdate = Convert.ToDateTime(FD);
            DateTime FromDate = ServerDateCurrentdate;
            string edate = Session["Todate"].ToString();
            var edt = DateTime.ParseExact(edate, "ddd MMM dd yyyy HH:mm:ss 'GMT'zzz", System.Globalization.CultureInfo.InvariantCulture);
            string Tdate = edt.ToString("yyyy-MM-dd");


            DateTime To_Date = Convert.ToDateTime(TD);
            DateTime ToDate = To_Date;
            DateTime todate = VehicleDBMgr.GetTime(vdbmngr.conn);
            DateTime frmdate = todate.AddDays(-15);

            Session["FromDate"] = frmdate.AddDays(-1).ToString("dd/MMM/yy");
            Session["To_Date"] = todate.AddDays(-1).ToString("dd/MMM/yy");


            // div_MainPlantComparison.Style.Add("display", "block");

            divHide1.Style.Add("display", "block");
            div_routewisemainCompare.Style.Add("display", "block");


            string Datatype = "";

            int Ndays = (FromDate - ToDate).Days;
            int countdays = Ndays + 1;

            if (countdays <= 7)
            {
                Datatype = "Monthly";
            }
            else if (countdays <= 30 || countdays <= 8)
            {
                Datatype = "Week";
            }
            else if (countdays == 364 || countdays >= 364)
            {
                Datatype = "Year";
            }
            else
            {
                Datatype = "Monthly";
            }


            DateTime lastmonthfrom = new DateTime();
            DateTime lastmonthto = new DateTime();
            DateTime YearServerDate_Currentdate = Convert.ToDateTime(IndDate);
            DateTime LastYearFromDate = YearServerDate_Currentdate;
            DateTime YearServerDate_Todate = Convert.ToDateTime(Tdate);
            DateTime LastYearToDate = YearServerDate_Todate;
            lastmonthfrom = FromDate.AddMonths(-1);
            lastmonthto = ToDate.AddMonths(-1);
            LastYearFromDate = LastYearFromDate.AddYears(-1);
            LastYearToDate = LastYearToDate.AddYears(-1);
            DataTable Dt_PresentWeak = new DataTable();
            DataTable dtSub_LastWeekData = new DataTable();
            DataTable dtPresentAllMonth = new DataTable();
            DataTable dtLastYearAllMonth = new DataTable();
            DataTable Dt_PresentMonthSale = new DataTable();
            DataTable Dt_PresentMonthAmount = new DataTable();
            DataTable dtSub_lastMonthSale = new DataTable();
            DataTable dtSub_lastMonthAmount = new DataTable();
            DataTable dtSub_lastYearSales = new DataTable();
            DataTable dtSub_lastYearAmount = new DataTable();
            string SalesType = Session["salestype"].ToString();
            DataTable dtALL = new DataTable();
            DataTable dtyesterdayroutesale = new DataTable();
            DataTable dtyesterdaypaidamount = new DataTable();

            if (Datatype == "Monthly")
            {
                #region
                if (SectedDataType == "Day")
                {
                    string val = ViewState["Val"].ToString();
                    if (val == "btnclick")
                    {
                        if (BranchID == "174")
                        {
                            cmd = new MySqlCommand("SELECT   modifiedroutes.Branchid As SuperBranch,modifiedroutes.RouteName, ROUND(SUM(indents_subtable.DeliveryQty)) AS saleQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost) AS salevalue, modifiedroutes.Sno AS routeid, modifidroutssubtab.BranchID AS bid, branchdata_2.BranchName, branchdata_2.flag, branchdata_1.sno AS BranchID, branchdata_2.SalesType AS SalesTypeId FROM branchdata branchdata_2 RIGHT OUTER JOIN branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT  RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo ON  branchdata_2.sno = modifidroutssubtab.BranchID LEFT OUTER JOIN indents_subtable INNER JOIN (SELECT  IndentNo, I_date, Branch_id FROM   indents WHERE  (I_date BETWEEN @starttime AND @endtime)) indt ON indents_subtable.IndentNo = indt.IndentNo ON  modifidroutssubtab.BranchID = indt.Branch_id WHERE   (branchdata.SalesType IS NOT NULL) AND (indents_subtable.DeliveryQty <> 0) AND (branchdata.sno IN ('174', '527', '4607')) GROUP BY SalesTypeId ORDER BY  SalesTypeId");
                            cmd.Parameters.AddWithValue("@SOID", BranchID);
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate.AddDays(-1)));
                            cmd.Parameters.AddWithValue("@endtime", GetHighDate(ToDate.AddDays(-1)));
                            dtyesterdayroutesale = vdbmngr.SelectQuery(cmd).Tables[0];

                            cmd = new MySqlCommand("SELECT   modifiedroutes.Branchid As SuperBranch,branchdata.BranchName, branchdata.sno, modifiedroutes.RouteName, modifidroutssubtab.BranchID, modifiedroutes.Sno AS routeid, SUM(colltion.AmountPaid) AS AmountPaid FROM  branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT RefNo, Rank, LevelType, BranchID, CDate, EDate FROM   modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo INNER JOIN (SELECT  Branchid, AmountPaid, PaidDate FROM   collections WHERE  (PaymentType <> 'Cheque') AND (PaidDate BETWEEN @d1 AND @d2)) colltion ON modifidroutssubtab.BranchID = colltion.Branchid WHERE (branchdata.SalesType IS NOT NULL) AND (branchdata.sno = @BranchID) GROUP BY modifidroutssubtab.BranchID ORDER BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate.AddDays(-1)));
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-1));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-1));
                            cmd.Parameters.AddWithValue("@SOID", BranchID);
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            dtyesterdaypaidamount = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else
                        {
                            cmd = new MySqlCommand("SELECT   modifiedroutes.Branchid As SuperBranch,modifiedroutes.RouteName, ROUND(SUM(indents_subtable.DeliveryQty)) AS saleQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost) AS salevalue, modifiedroutes.Sno AS routeid, modifidroutssubtab.BranchID AS bid, branchdata_2.BranchName, branchdata_2.flag, branchdata_1.sno AS BranchID, branchdata_2.SalesType AS SalesTypeId FROM branchdata branchdata_2 RIGHT OUTER JOIN branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT  RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo ON  branchdata_2.sno = modifidroutssubtab.BranchID LEFT OUTER JOIN indents_subtable INNER JOIN (SELECT  IndentNo, I_date, Branch_id FROM   indents WHERE  (I_date BETWEEN @starttime AND @endtime)) indt ON indents_subtable.IndentNo = indt.IndentNo ON  modifidroutssubtab.BranchID = indt.Branch_id WHERE   (branchdata.SalesType IS NOT NULL) AND (indents_subtable.DeliveryQty <> 0) AND (branchdata.sno = @BranchID) GROUP BY SalesTypeId ORDER BY  SalesTypeId");
                            cmd.Parameters.AddWithValue("@SOID", BranchID);
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate.AddDays(-1)));
                            cmd.Parameters.AddWithValue("@endtime", GetHighDate(ToDate.AddDays(-1)));
                            dtyesterdayroutesale = vdbmngr.SelectQuery(cmd).Tables[0];

                            cmd = new MySqlCommand("SELECT   modifiedroutes.Branchid As SuperBranch,branchdata.BranchName, branchdata.sno, modifiedroutes.RouteName, modifidroutssubtab.BranchID, modifiedroutes.Sno AS routeid, SUM(colltion.AmountPaid) AS AmountPaid FROM  branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT RefNo, Rank, LevelType, BranchID, CDate, EDate FROM   modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo INNER JOIN (SELECT  Branchid, AmountPaid, PaidDate FROM   collections WHERE  (PaymentType <> 'Cheque') AND (PaidDate BETWEEN @d1 AND @d2)) colltion ON modifidroutssubtab.BranchID = colltion.Branchid WHERE (branchdata.SalesType IS NOT NULL) AND (branchdata.sno = @BranchID) GROUP BY modifidroutssubtab.BranchID ORDER BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate.AddDays(-1)));
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-1));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-1));
                            cmd.Parameters.AddWithValue("@SOID", BranchID);
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            dtyesterdaypaidamount = vdbmngr.SelectQuery(cmd).Tables[0];
                        }

                        //cmd = new MySqlCommand("SELECT Sno, RouteName, RouteLevel, UserID, BranchID, CDate, EDate, flag FROM modifiedroutes");
                        //cmd.Parameters.AddWithValue("@BranchID", BranchID);
                        //DataTable dtsalestype = vdbmngr.SelectQuery(cmd).Tables[0];

                        cmd = new MySqlCommand("SELECT  sno, salestype, flag, UserData_sno, status, rank, club_code FROM salestypemanagement where (status = 1) ORDER BY salestype DESC");
                        cmd.Parameters.AddWithValue("@BranchID", BranchID);
                        DataTable dtsalestype = vdbmngr.SelectQuery(cmd).Tables[0];


                        DataTable dtAll = new DataTable();
                        dtAll.Merge(dtyesterdayroutesale);

                        DataView view = new DataView(dtAll);
                        DataTable distincttable = view.ToTable(true, "SalesTypeId");
                        DataTable DayReport = new DataTable();
                        DataTable lastweakReport = new DataTable();
                        DataTable LastMonthReport = new DataTable();
                        DataTable LastYearReport = new DataTable();
                        DataTable MainReport = new DataTable();

                        MainReport.Columns.Add("SalesType");
                        MainReport.Columns.Add("SalestypeId");
                        MainReport.Columns.Add("AvgRate");
                        MainReport.Columns.Add("SaleQty");
                        MainReport.Columns.Add("SaleValue");
                        //double yesterdaysum = Convert.ToDouble(dtyesterdayroutesale.Compute("SUM(saleQty)", "SuperBranch=" + BranchID + ""));
                        double yesterdaysum = Convert.ToDouble(dtyesterdayroutesale.Compute("Sum(saleQty)", "").ToString());
                        double yesterdayvaluesum = Convert.ToDouble(dtyesterdayroutesale.Compute("Sum(salevalue)", "").ToString());
                        foreach (DataRow dr in distincttable.Rows)
                        {
                            DataRow newrow = MainReport.NewRow();
                            string SalestypeId = dr["SalesTypeId"].ToString();
                            foreach (DataRow drsalestype in dtsalestype.Select("sno='" + SalestypeId + "'"))
                            {
                                string Salestype = drsalestype["salestype"].ToString();
                                double compare = 0;
                                //newrow["SalesType"] = Salestype;
                                foreach (DataRow dramount in dtyesterdayroutesale.Select("SalestypeId='" + SalestypeId + "'"))
                                {
                                    double amount = 0;
                                    double.TryParse(dramount["saleQty"].ToString(), out amount);
                                    double QtyPercentage = 0; double QtytempPercentage = 0;
                                    QtytempPercentage = (amount / yesterdaysum) * 100;
                                    QtyPercentage = Math.Round(QtytempPercentage);
                                    // newrow["Yester Day %"] = Percentage;
                                    newrow["SaleQty"] = amount + "(" + QtyPercentage + "%)";
                                    double salevalue = 0;
                                    double.TryParse(dramount["salevalue"].ToString(), out salevalue);
                                    double valuepercentage = 0;
                                    valuepercentage = (salevalue / yesterdayvaluesum) * 100;
                                    newrow["SaleValue"] = Math.Round(salevalue) + "(" + Math.Round(valuepercentage, 0) + "%)";
                                    double AvgRate = salevalue / amount;
                                    //newrow["Yester Day Avg"] = Math.Round(Avgqty );
                                    newrow["AvgRate"] = Math.Round(AvgRate);
                                    newrow["SalestypeId"] = SalestypeId;
                                    newrow["SalesType"] = Salestype;
                                    //yesterdaygrandtotal += amount;
                                }
                                MainReport.Rows.Add(newrow);
                            }
                        }
                        DataRow newrow2 = MainReport.NewRow();
                        newrow2["SalesType"] = "Total";
                        newrow2["SaleQty"] = Math.Round(yesterdaysum);//yesterdaysum;
                        newrow2["SaleValue"] = Math.Round(yesterdayvaluesum);//yesterdayvaluesum;
                        double Avg_Rate = yesterdayvaluesum / yesterdaysum;//yesterdayvaluesum;
                        newrow2["AvgRate"] = Math.Round(Avg_Rate);
                        MainReport.Rows.Add(newrow2);
                        grdRouteReport.DataSource = MainReport;
                        grdRouteReport.DataBind();
                    }
                    else
                    {
                        //ataTable dtyesterdayroutesale = new DataTable();
                        if (BranchID == "174")
                        {
                            cmd = new MySqlCommand("SELECT   modifiedroutes.Branchid As SuperBranch,modifiedroutes.RouteName, ROUND(SUM(indents_subtable.DeliveryQty),2) AS saleQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost) AS salevalue, modifiedroutes.Sno AS routeid, modifidroutssubtab.BranchID AS bid, branchdata_2.BranchName, branchdata_2.flag, branchdata_1.sno AS BranchID, branchdata_2.SalesType AS SalesTypeId FROM branchdata branchdata_2 RIGHT OUTER JOIN branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT  RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo ON  branchdata_2.sno = modifidroutssubtab.BranchID LEFT OUTER JOIN indents_subtable INNER JOIN (SELECT  IndentNo, I_date, Branch_id FROM   indents WHERE  (I_date BETWEEN @starttime AND @endtime)) indt ON indents_subtable.IndentNo = indt.IndentNo ON  modifidroutssubtab.BranchID = indt.Branch_id WHERE   (branchdata.SalesType IS NOT NULL) AND (indents_subtable.DeliveryQty <> 0) AND (branchdata.sno IN ('174','527','4607')) GROUP BY SalesTypeId ORDER BY  SalesTypeId");
                            cmd.Parameters.AddWithValue("@SOID", BranchID);
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate.AddDays(-1)));
                            cmd.Parameters.AddWithValue("@endtime", GetHighDate(ToDate.AddDays(-1)));
                            dtyesterdayroutesale = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else
                        {
                            cmd = new MySqlCommand("SELECT   modifiedroutes.Branchid As SuperBranch,modifiedroutes.RouteName, ROUND(SUM(indents_subtable.DeliveryQty),2) AS saleQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost) AS salevalue, modifiedroutes.Sno AS routeid, modifidroutssubtab.BranchID AS bid, branchdata_2.BranchName, branchdata_2.flag, branchdata_1.sno AS BranchID, branchdata_2.SalesType AS SalesTypeId FROM branchdata branchdata_2 RIGHT OUTER JOIN branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT  RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo ON  branchdata_2.sno = modifidroutssubtab.BranchID LEFT OUTER JOIN indents_subtable INNER JOIN (SELECT  IndentNo, I_date, Branch_id FROM   indents WHERE  (I_date BETWEEN @starttime AND @endtime)) indt ON indents_subtable.IndentNo = indt.IndentNo ON  modifidroutssubtab.BranchID = indt.Branch_id WHERE   (branchdata.SalesType IS NOT NULL) AND (indents_subtable.DeliveryQty <> 0) AND (branchdata.sno = @BranchID) GROUP BY SalesTypeId ORDER BY  SalesTypeId");
                            cmd.Parameters.AddWithValue("@SOID", BranchID);
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate.AddDays(-1)));
                            cmd.Parameters.AddWithValue("@endtime", GetHighDate(ToDate.AddDays(-1)));
                            dtyesterdayroutesale = vdbmngr.SelectQuery(cmd).Tables[0];
                        }

                        //DataTable dtyesterdaypaidamount = new DataTable();
                        if (BranchID == "174")
                        {
                            cmd = new MySqlCommand("SELECT   modifiedroutes.Branchid As SuperBranch,branchdata.BranchName, branchdata.sno, modifiedroutes.RouteName, modifidroutssubtab.BranchID, modifiedroutes.Sno AS routeid, SUM(colltion.AmountPaid) AS AmountPaid FROM  branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT RefNo, Rank, LevelType, BranchID, CDate, EDate FROM   modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo INNER JOIN (SELECT  Branchid, AmountPaid, PaidDate FROM   collections WHERE  (PaymentType <> 'Cheque') AND (PaidDate BETWEEN @d1 AND @d2)) colltion ON modifidroutssubtab.BranchID = colltion.Branchid WHERE (branchdata.SalesType IS NOT NULL) AND (branchdata.sno IN ('174','527','4607')) GROUP BY modifidroutssubtab.BranchID ORDER BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate.AddDays(-1)));
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-1));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-1));
                            cmd.Parameters.AddWithValue("@SOID", BranchID);
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            dtyesterdaypaidamount = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else
                        {
                            cmd = new MySqlCommand("SELECT   modifiedroutes.Branchid As SuperBranch,branchdata.BranchName, branchdata.sno, modifiedroutes.RouteName, modifidroutssubtab.BranchID, modifiedroutes.Sno AS routeid, SUM(colltion.AmountPaid) AS AmountPaid FROM  branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT RefNo, Rank, LevelType, BranchID, CDate, EDate FROM   modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo INNER JOIN (SELECT  Branchid, AmountPaid, PaidDate FROM   collections WHERE  (PaymentType <> 'Cheque') AND (PaidDate BETWEEN @d1 AND @d2)) colltion ON modifidroutssubtab.BranchID = colltion.Branchid WHERE (branchdata.SalesType IS NOT NULL) AND (branchdata.sno = @BranchID) GROUP BY modifidroutssubtab.BranchID ORDER BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate.AddDays(-1)));
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-1));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-1));
                            cmd.Parameters.AddWithValue("@SOID", BranchID);
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            dtyesterdaypaidamount = vdbmngr.SelectQuery(cmd).Tables[0];
                        }

                        DataTable dtLastweakroutesale = new DataTable();
                        if (BranchID == "174")
                        {
                            cmd = new MySqlCommand("SELECT   modifiedroutes.Branchid As SuperBranch,modifiedroutes.RouteName, ROUND(SUM(indents_subtable.DeliveryQty),2) AS saleQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost) AS salevalue, modifiedroutes.Sno AS routeid, modifidroutssubtab.BranchID AS bid, branchdata_2.BranchName, branchdata_2.flag, branchdata_1.sno AS BranchID, branchdata_2.SalesType AS SalesTypeId FROM branchdata branchdata_2 RIGHT OUTER JOIN branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT  RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo ON  branchdata_2.sno = modifidroutssubtab.BranchID LEFT OUTER JOIN indents_subtable INNER JOIN (SELECT  IndentNo, I_date, Branch_id FROM   indents WHERE  (I_date BETWEEN @starttime AND @endtime)) indt ON indents_subtable.IndentNo = indt.IndentNo ON  modifidroutssubtab.BranchID = indt.Branch_id WHERE   (branchdata.SalesType IS NOT NULL) AND (indents_subtable.DeliveryQty <> 0) AND (branchdata.sno IN ('174','527','4607')) GROUP BY SalesTypeId ORDER BY SalesTypeId");
                            cmd.Parameters.AddWithValue("@SOID", BranchID);
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate.AddDays(-7)));
                            cmd.Parameters.AddWithValue("@endtime", GetHighDate(ToDate.AddDays(-7)));
                            dtLastweakroutesale = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else
                        {
                            cmd = new MySqlCommand("SELECT   modifiedroutes.Branchid As SuperBranch,modifiedroutes.RouteName, ROUND(SUM(indents_subtable.DeliveryQty),2) AS saleQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost) AS salevalue, modifiedroutes.Sno AS routeid, modifidroutssubtab.BranchID AS bid, branchdata_2.BranchName, branchdata_2.flag, branchdata_1.sno AS BranchID, branchdata_2.SalesType AS SalesTypeId FROM branchdata branchdata_2 RIGHT OUTER JOIN branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT  RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo ON  branchdata_2.sno = modifidroutssubtab.BranchID LEFT OUTER JOIN indents_subtable INNER JOIN (SELECT  IndentNo, I_date, Branch_id FROM   indents WHERE  (I_date BETWEEN @starttime AND @endtime)) indt ON indents_subtable.IndentNo = indt.IndentNo ON  modifidroutssubtab.BranchID = indt.Branch_id WHERE   (branchdata.SalesType IS NOT NULL) AND (indents_subtable.DeliveryQty <> 0) AND (branchdata.sno = @BranchID) GROUP BY SalesTypeId ORDER BY SalesTypeId");
                            cmd.Parameters.AddWithValue("@SOID", BranchID);
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate.AddDays(-7)));
                            cmd.Parameters.AddWithValue("@endtime", GetHighDate(ToDate.AddDays(-7)));
                            dtLastweakroutesale = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        DataTable dtLastWeakpaidamount = new DataTable();
                        if (BranchID == "174")
                        {
                            cmd = new MySqlCommand("SELECT   modifiedroutes.Branchid As SuperBranch,branchdata.BranchName, branchdata.sno, modifiedroutes.RouteName, modifidroutssubtab.BranchID, modifiedroutes.Sno AS routeid, SUM(colltion.AmountPaid) AS AmountPaid FROM  branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT RefNo, Rank, LevelType, BranchID, CDate, EDate FROM   modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo INNER JOIN (SELECT  Branchid, AmountPaid, PaidDate FROM   collections WHERE  (PaymentType <> 'Cheque') AND (PaidDate BETWEEN @d1 AND @d2)) colltion ON modifidroutssubtab.BranchID = colltion.Branchid WHERE (branchdata.SalesType IS NOT NULL) AND (branchdata.sno IN ('174','527','4607')) GROUP BY modifidroutssubtab.BranchID ORDER BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate.AddDays(-7)));
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-7));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-7));
                            cmd.Parameters.AddWithValue("@SOID", BranchID);
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            dtLastWeakpaidamount = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else
                        {
                            cmd = new MySqlCommand("SELECT   modifiedroutes.Branchid As SuperBranch,branchdata.BranchName, branchdata.sno, modifiedroutes.RouteName, modifidroutssubtab.BranchID, modifiedroutes.Sno AS routeid, SUM(colltion.AmountPaid) AS AmountPaid FROM  branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT RefNo, Rank, LevelType, BranchID, CDate, EDate FROM   modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo INNER JOIN (SELECT  Branchid, AmountPaid, PaidDate FROM   collections WHERE  (PaymentType <> 'Cheque') AND (PaidDate BETWEEN @d1 AND @d2)) colltion ON modifidroutssubtab.BranchID = colltion.Branchid WHERE (branchdata.SalesType IS NOT NULL) AND (branchdata.sno = @BranchID) GROUP BY modifidroutssubtab.BranchID ORDER BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate.AddDays(-7)));
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-7));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-7));
                            cmd.Parameters.AddWithValue("@SOID", BranchID);
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            dtLastWeakpaidamount = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        DataTable dtLastMonthroutesale = new DataTable();
                        if (BranchID == "174")
                        {

                            cmd = new MySqlCommand("SELECT   modifiedroutes.Branchid As SuperBranch,modifiedroutes.RouteName, ROUND(SUM(indents_subtable.DeliveryQty),2) AS saleQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost) AS salevalue, modifiedroutes.Sno AS routeid, modifidroutssubtab.BranchID AS bid, branchdata_2.BranchName, branchdata_2.flag, branchdata_1.sno AS BranchID, branchdata_2.SalesType AS SalesTypeId FROM branchdata branchdata_2 RIGHT OUTER JOIN branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT  RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo ON  branchdata_2.sno = modifidroutssubtab.BranchID LEFT OUTER JOIN indents_subtable INNER JOIN (SELECT  IndentNo, I_date, Branch_id FROM   indents WHERE  (I_date BETWEEN @starttime AND @endtime)) indt ON indents_subtable.IndentNo = indt.IndentNo ON  modifidroutssubtab.BranchID = indt.Branch_id WHERE   (branchdata.SalesType IS NOT NULL) AND (indents_subtable.DeliveryQty <> 0) AND (branchdata.sno IN ('174','527','4607')) GROUP BY SalesTypeId ORDER BY SalesTypeId");
                            cmd.Parameters.AddWithValue("@SOID", BranchID);
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            cmd.Parameters.AddWithValue("@starttime", GetLowDate(lastmonthfrom));
                            cmd.Parameters.AddWithValue("@endtime", GetHighDate(lastmonthto));
                            dtLastMonthroutesale = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else
                        {
                            cmd = new MySqlCommand("SELECT   modifiedroutes.Branchid As SuperBranch,modifiedroutes.RouteName, ROUND(SUM(indents_subtable.DeliveryQty),2) AS saleQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost) AS salevalue, modifiedroutes.Sno AS routeid, modifidroutssubtab.BranchID AS bid, branchdata_2.BranchName, branchdata_2.flag, branchdata_1.sno AS BranchID, branchdata_2.SalesType AS SalesTypeId FROM branchdata branchdata_2 RIGHT OUTER JOIN branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT  RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo ON  branchdata_2.sno = modifidroutssubtab.BranchID LEFT OUTER JOIN indents_subtable INNER JOIN (SELECT  IndentNo, I_date, Branch_id FROM   indents WHERE  (I_date BETWEEN @starttime AND @endtime)) indt ON indents_subtable.IndentNo = indt.IndentNo ON  modifidroutssubtab.BranchID = indt.Branch_id WHERE   (branchdata.SalesType IS NOT NULL) AND (indents_subtable.DeliveryQty <> 0) AND (branchdata.sno = @BranchID) GROUP BY SalesTypeId ORDER BY SalesTypeId");
                            cmd.Parameters.AddWithValue("@SOID", BranchID);
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            cmd.Parameters.AddWithValue("@starttime", GetLowDate(lastmonthfrom));
                            cmd.Parameters.AddWithValue("@endtime", GetHighDate(lastmonthto));
                            dtLastMonthroutesale = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        DataTable dtLastMonthpaidamount = new DataTable();
                        if (BranchID == "174")
                        {
                            cmd = new MySqlCommand("SELECT   modifiedroutes.Branchid As SuperBranch,branchdata.BranchName, branchdata.sno, modifiedroutes.RouteName, modifidroutssubtab.BranchID, modifiedroutes.Sno AS routeid, SUM(colltion.AmountPaid) AS AmountPaid FROM  branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT RefNo, Rank, LevelType, BranchID, CDate, EDate FROM   modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo INNER JOIN (SELECT  Branchid, AmountPaid, PaidDate FROM   collections WHERE  (PaymentType <> 'Cheque') AND (PaidDate BETWEEN @d1 AND @d2)) colltion ON modifidroutssubtab.BranchID = colltion.Branchid WHERE (branchdata.SalesType IS NOT NULL) AND (branchdata.sno IN ('174','527','4607')) GROUP BY modifidroutssubtab.BranchID ORDER BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@starttime", GetLowDate(lastmonthfrom));
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(lastmonthfrom));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(lastmonthto));
                            cmd.Parameters.AddWithValue("@SOID", BranchID);
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            dtLastMonthpaidamount = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else
                        {
                            cmd = new MySqlCommand("SELECT   modifiedroutes.Branchid As SuperBranch,branchdata.BranchName, branchdata.sno, modifiedroutes.RouteName, modifidroutssubtab.BranchID, modifiedroutes.Sno AS routeid, SUM(colltion.AmountPaid) AS AmountPaid FROM  branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT RefNo, Rank, LevelType, BranchID, CDate, EDate FROM   modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo INNER JOIN (SELECT  Branchid, AmountPaid, PaidDate FROM   collections WHERE  (PaymentType <> 'Cheque') AND (PaidDate BETWEEN @d1 AND @d2)) colltion ON modifidroutssubtab.BranchID = colltion.Branchid WHERE (branchdata.SalesType IS NOT NULL) AND (branchdata.sno = @BranchID) GROUP BY modifidroutssubtab.BranchID ORDER BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@starttime", GetLowDate(lastmonthfrom));
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(lastmonthfrom));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(lastmonthto));
                            cmd.Parameters.AddWithValue("@SOID", BranchID);
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            dtLastMonthpaidamount = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        DataTable dtLastYearroutesale = new DataTable();
                       
                            cmd = new MySqlCommand("SELECT   modifiedroutes.Branchid As SuperBranch,modifiedroutes.RouteName, ROUND(SUM(indents_subtable.DeliveryQty),2) AS saleQty, ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty,SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost) AS salevalue, modifiedroutes.Sno AS routeid, modifidroutssubtab.BranchID AS bid, branchdata_2.BranchName, branchdata_2.flag, branchdata_1.sno AS BranchID, branchdata_2.SalesType AS SalesTypeId FROM branchdata branchdata_2 RIGHT OUTER JOIN branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT  RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo ON  branchdata_2.sno = modifidroutssubtab.BranchID LEFT OUTER JOIN indents_subtable INNER JOIN (SELECT  IndentNo, I_date, Branch_id FROM   indents WHERE  (I_date BETWEEN @starttime AND @endtime)) indt ON indents_subtable.IndentNo = indt.IndentNo ON  modifidroutssubtab.BranchID = indt.Branch_id WHERE   (branchdata.SalesType IS NOT NULL) AND (indents_subtable.DeliveryQty <> 0) AND (branchdata.sno = @BranchID) GROUP BY SalesTypeId ORDER BY SalesTypeId");
                            cmd.Parameters.AddWithValue("@SOID", BranchID);
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            cmd.Parameters.AddWithValue("@starttime", GetLowDate(LastYearFromDate));
                            cmd.Parameters.AddWithValue("@endtime", GetHighDate(LastYearToDate));
                            dtLastYearroutesale = vdbmngr.SelectQuery(cmd).Tables[0];
                        DataTable dtLastYearhpaidamount = new DataTable();
                       
                            cmd = new MySqlCommand("SELECT   modifiedroutes.Branchid As SuperBranch,branchdata.BranchName, branchdata.sno, modifiedroutes.RouteName, modifidroutssubtab.BranchID, modifiedroutes.Sno AS routeid, SUM(colltion.AmountPaid) AS AmountPaid FROM  branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT RefNo, Rank, LevelType, BranchID, CDate, EDate FROM   modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo INNER JOIN (SELECT  Branchid, AmountPaid, PaidDate FROM   collections WHERE  (PaymentType <> 'Cheque') AND (PaidDate BETWEEN @d1 AND @d2)) colltion ON modifidroutssubtab.BranchID = colltion.Branchid WHERE (branchdata.SalesType IS NOT NULL) AND (branchdata.sno = @BranchID) GROUP BY modifidroutssubtab.BranchID ORDER BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@starttime", GetLowDate(LastYearFromDate));
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(LastYearFromDate));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(LastYearToDate));
                            cmd.Parameters.AddWithValue("@SOID", BranchID);
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            dtLastYearhpaidamount = vdbmngr.SelectQuery(cmd).Tables[0];
                        DataTable dtsalestype = new DataTable();
                        
                            cmd = new MySqlCommand("SELECT  sno, salestype, flag, UserData_sno, status, rank, club_code FROM salestypemanagement where (status = 1) ORDER BY salestype DESC");
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            dtsalestype = vdbmngr.SelectQuery(cmd).Tables[0];
                        DataTable dtAll = new DataTable();
                        dtAll.Merge(dtyesterdayroutesale);
                        dtAll.Merge(dtLastweakroutesale);
                        dtAll.Merge(dtLastMonthroutesale);
                        dtAll.Merge(dtLastYearroutesale);
                        DataView view = new DataView(dtAll);
                        DataTable distincttable = view.ToTable(true, "SalesTypeId");
                        DataTable DayReport = new DataTable();
                        DataTable lastweakReport = new DataTable();
                        DataTable LastMonthReport = new DataTable();
                        DataTable LastYearReport = new DataTable();
                        DataTable MainReport = new DataTable();

                        MainReport.Columns.Add("SalesType");
                        MainReport.Columns.Add("SalestypeId");
                        MainReport.Columns.Add("Yester Day").DataType = typeof(Double);
                        MainReport.Columns.Add("Yester Day %").DataType = typeof(Double);
                        MainReport.Columns.Add("Ysign");
                        MainReport.Columns.Add("Last Week").DataType = typeof(Double);
                        MainReport.Columns.Add("Last Week %").DataType = typeof(Double);
                        MainReport.Columns.Add("Wsign");
                        MainReport.Columns.Add("Last Month").DataType = typeof(Double);
                        MainReport.Columns.Add("Last Month %").DataType = typeof(Double);
                        MainReport.Columns.Add("Msign");
                        MainReport.Columns.Add("Last Year").DataType = typeof(Double);
                        MainReport.Columns.Add("Last Year %").DataType = typeof(Double);
                        MainReport.Columns.Add("Yesign");

                        double yesterdaysum = 0;
                        double lastweaksum = 0;
                        double lastmonthsum = 0;
                        double lastyearsum = 0;
                        string cate = ddlbarnchCategory.SelectedItem.Value;
                        if (cate == "BranchWiseCollections")
                        {
                           
                                yesterdaysum = Convert.ToDouble(dtyesterdayroutesale.Compute("SUM(salevalue)", "SuperBranch=" + BranchID + ""));
                                lastweaksum = Convert.ToDouble(dtLastweakroutesale.Compute("SUM(salevalue)", "SuperBranch=" + BranchID + ""));
                                lastmonthsum = Convert.ToDouble(dtLastMonthroutesale.Compute("SUM(salevalue)", "SuperBranch=" + BranchID + ""));
                                lastyearsum = Convert.ToDouble(dtLastYearroutesale.Compute("SUM(salevalue)", "SuperBranch=" + BranchID + ""));
                        }
                        else
                        {
                            
                                yesterdaysum = Convert.ToDouble(dtyesterdayroutesale.Compute("SUM(saleQty)", "SuperBranch=" + BranchID + ""));
                                lastweaksum = Convert.ToDouble(dtLastweakroutesale.Compute("SUM(saleQty)", "SuperBranch=" + BranchID + ""));
                                lastmonthsum = Convert.ToDouble(dtLastMonthroutesale.Compute("SUM(saleQty)", "SuperBranch=" + BranchID + ""));
                                lastyearsum = Convert.ToDouble(dtLastYearroutesale.Compute("SUM(saleQty)", "SuperBranch=" + BranchID + ""));
                        }

                        foreach (DataRow dr in distincttable.Rows)
                        {
                            DataRow newrow = MainReport.NewRow();
                            string SalestypeId = dr["SalesTypeId"].ToString();
                            double diffpercentage = 0;
                            foreach (DataRow drsalestype in dtsalestype.Select("sno='" + SalestypeId + "'"))
                            {
                                string Salestype = drsalestype["salestype"].ToString();
                                double compare = 0;
                                foreach (DataRow dramount in dtyesterdayroutesale.Select("SalestypeId='" + SalestypeId + "'"))
                                {
                                    if (cate == "BranchWiseCollections")
                                    {
                                        float amount = 0;
                                        float.TryParse(dramount["salevalue"].ToString(), out amount);
                                        newrow["Yester Day"] = Math.Round(amount); ;
                                        double Avgqty = amount / 2;
                                        newrow["SalestypeId"] = SalestypeId;
                                        newrow["SalesType"] = Salestype;
                                        double temp = 0;
                                        double Percentage = 0; double tempPercentage = 0;
                                        double.TryParse(dramount["salevalue"].ToString(), out temp);
                                        tempPercentage = (temp / yesterdaysum) * 100;
                                        Percentage = Math.Round(tempPercentage);
                                        newrow["Yester Day %"] = Percentage;
                                        compare = Percentage;
                                        diffpercentage = Percentage;
                                    }
                                    else
                                    {

                                        float amount = 0;
                                        float.TryParse(dramount["saleQty"].ToString(), out amount);
                                        newrow["Yester Day"] = Math.Round(amount); ;
                                        double Avgqty = amount / 2;
                                        newrow["SalestypeId"] = SalestypeId;
                                        newrow["SalesType"] = Salestype;
                                        double temp = 0;
                                        double Percentage = 0; double tempPercentage = 0;
                                        double.TryParse(dramount["saleQty"].ToString(), out temp);
                                        tempPercentage = (temp / yesterdaysum) * 100;
                                        Percentage = Math.Round(tempPercentage);
                                        newrow["Yester Day %"] = Percentage;
                                        compare = Percentage;
                                        diffpercentage = Percentage;
                                    }
                                    //yesterdaygrandtotal += amount;
                                }
                                foreach (DataRow dramount in dtLastweakroutesale.Select("SalestypeId='" + SalestypeId + "'"))
                                {
                                    if (cate == "BranchWiseCollections")
                                    {
                                        float amount = 0;
                                        float.TryParse(dramount["salevalue"].ToString(), out amount);
                                        newrow["Last Week"] = Math.Round(amount);

                                        double Avgqty = amount / 2;
                                        // newrow["Last Week Avg"] = Math.Round(Avgqty );
                                        // newrow["Branchid"] = dramount["BranchID"].ToString();
                                        newrow["SalestypeId"] = SalestypeId;
                                        newrow["SalesType"] = Salestype;
                                        double temp = 0;
                                        double Percentage = 0; double tempPercentage = 0;
                                        double.TryParse(dramount["salevalue"].ToString(), out temp);
                                        tempPercentage = (temp / lastweaksum) * 100;
                                        Percentage = Math.Round(tempPercentage);
                                        if (diffpercentage > Percentage)
                                        {
                                            newrow["Last Week %"] = Math.Round(diffpercentage - Percentage);
                                            newrow["Wsign"] = "+";
                                        }
                                        else
                                        {
                                            newrow["Last Week %"] = Math.Round(diffpercentage - Percentage);
                                            newrow["Wsign"] = "-";
                                        }
                                    }
                                    else
                                    {
                                        float amount = 0;
                                        float.TryParse(dramount["saleQty"].ToString(), out amount);
                                        newrow["Last Week"] = Math.Round(amount);

                                        double Avgqty = amount / 2;
                                        // newrow["Last Week Avg"] = Math.Round(Avgqty );
                                        // newrow["Branchid"] = dramount["BranchID"].ToString();
                                        newrow["SalestypeId"] = SalestypeId;
                                        newrow["SalesType"] = Salestype;
                                        double temp = 0;
                                        double Percentage = 0; double tempPercentage = 0;
                                        double.TryParse(dramount["saleQty"].ToString(), out temp);
                                        tempPercentage = (temp / lastweaksum) * 100;
                                        Percentage = Math.Round(tempPercentage);
                                        if (diffpercentage > Percentage)
                                        {
                                            newrow["Last Week %"] = Math.Round(diffpercentage - Percentage);
                                            newrow["Wsign"] = "+";
                                        }
                                        else
                                        {
                                            newrow["Last Week %"] = Math.Round(diffpercentage - Percentage);
                                            newrow["Wsign"] = "-";
                                        }
                                    }
                                    //lastweekgrandtotal += amount;
                                }
                                foreach (DataRow dramount in dtLastMonthroutesale.Select("SalestypeId='" + SalestypeId + "'"))
                                {
                                    if (cate == "BranchWiseCollections")
                                    {
                                        float amount = 0;
                                        float.TryParse(dramount["salevalue"].ToString(), out amount);
                                        newrow["Last Month"] = Math.Round(amount); ;
                                        double Avgqty = amount / 2;
                                        //newrow["Last Month Avg"] = Math.Round(Avgqty );
                                        //newrow["Branchid"] = dramount["BranchID"].ToString();
                                        newrow["SalestypeId"] = SalestypeId;
                                        newrow["SalesType"] = Salestype;
                                        double temp = 0;
                                        double Percentage = 0; double tempPercentage = 0;
                                        double.TryParse(dramount["salevalue"].ToString(), out temp);
                                        tempPercentage = (temp / lastmonthsum) * 100;
                                        Percentage = Math.Round(tempPercentage);
                                        if (diffpercentage > Percentage)
                                        {
                                            newrow["Last Month %"] = Math.Round(diffpercentage - Percentage); ;
                                            newrow["Msign"] = "+";
                                        }
                                        else
                                        {
                                            newrow["Last Month %"] = Math.Round(diffpercentage - Percentage); ;
                                            newrow["Msign"] = "-";
                                        }
                                    }
                                    else
                                    {
                                        float amount = 0;
                                        float.TryParse(dramount["saleQty"].ToString(), out amount);
                                        newrow["Last Month"] = Math.Round(amount); ;
                                        double Avgqty = amount / 2;
                                        //newrow["Last Month Avg"] = Math.Round(Avgqty );
                                        //newrow["Branchid"] = dramount["BranchID"].ToString();
                                        newrow["SalestypeId"] = SalestypeId;
                                        newrow["SalesType"] = Salestype;
                                        double temp = 0;
                                        double Percentage = 0; double tempPercentage = 0;
                                        double.TryParse(dramount["saleQty"].ToString(), out temp);
                                        tempPercentage = (temp / lastmonthsum) * 100;
                                        Percentage = Math.Round(tempPercentage);
                                        if (diffpercentage > Percentage)
                                        {
                                            newrow["Last Month %"] = Math.Round(diffpercentage - Percentage); ;
                                            newrow["Msign"] = "+";
                                        }
                                        else
                                        {
                                            newrow["Last Month %"] = Math.Round(diffpercentage - Percentage); ;
                                            newrow["Msign"] = "-";
                                        }
                                    }
                                }
                                foreach (DataRow dramount in dtLastYearroutesale.Select("SalestypeId='" + SalestypeId + "'"))
                                {
                                    if (cate == "BranchWiseCollections")
                                    {
                                        float amount = 0;
                                        float.TryParse(dramount["salevalue"].ToString(), out amount);
                                        newrow["Last Year"] = Math.Round(amount); ;
                                        double Avgqty = amount / 2;
                                        // newrow["Last Year Avg"] = Math.Round(Avgqty );
                                        //newrow["Branchid"] = dramount["BranchID"].ToString();
                                        newrow["SalestypeId"] = SalestypeId;
                                        newrow["SalesType"] = Salestype;
                                        double temp = 0;
                                        double Percentage = 0; double tempPercentage = 0;
                                        double.TryParse(dramount["salevalue"].ToString(), out temp);
                                        tempPercentage = (temp / lastyearsum) * 100;
                                        Percentage = Math.Round(tempPercentage);
                                        // lastyeargrandtotal += amount;
                                        if (diffpercentage > Percentage)
                                        {
                                            newrow["Last Year %"] = Math.Round(diffpercentage - Percentage);
                                            newrow["Yesign"] = "+";
                                        }
                                        else
                                        {
                                            newrow["Last Year %"] = Math.Round(diffpercentage - Percentage);
                                            newrow["Yesign"] = "-";
                                        }

                                    }
                                    else
                                    {
                                        float amount = 0;
                                        float.TryParse(dramount["saleQty"].ToString(), out amount);
                                        newrow["Last Year"] = Math.Round(amount); ;
                                        double Avgqty = amount / 2;
                                        // newrow["Last Year Avg"] = Math.Round(Avgqty );
                                        //newrow["Branchid"] = dramount["BranchID"].ToString();
                                        newrow["SalestypeId"] = SalestypeId;
                                        newrow["SalesType"] = Salestype;
                                        double temp = 0;
                                        double Percentage = 0; double tempPercentage = 0;
                                        double.TryParse(dramount["saleQty"].ToString(), out temp);
                                        tempPercentage = (temp / lastyearsum) * 100;
                                        Percentage = Math.Round(tempPercentage);
                                        if (diffpercentage > Percentage)
                                        {
                                            newrow["Last Year %"] = Math.Round(diffpercentage - Percentage);
                                            newrow["Yesign"] = "+";
                                        }
                                        else
                                        {
                                            newrow["Last Year %"] = Math.Round(diffpercentage - Percentage);
                                            newrow["Yesign"] = "-";
                                        }
                                    }
                                }
                                MainReport.Rows.Add(newrow);
                            }
                        }
                        DataRow newrow2 = MainReport.NewRow();
                        newrow2["SalesType"] = "Total";
                        newrow2["Yester Day"] = Math.Round(yesterdaysum);
                        newrow2["Last Week"] = Math.Round(lastweaksum);
                        newrow2["Last Month"] = Math.Round(lastmonthsum);
                        newrow2["Last Year"] = Math.Round(lastyearsum);
                        MainReport.Rows.Add(newrow2);
                        grdRouteReport.DataSource = MainReport;
                        grdRouteReport.DataBind();
                    }
                }
                #endregion
                #region
                if (SectedDataType == "Days")
                {
                    double yesterdaygrandtotal = 0; double lastweekgrandtotal = 0;
                    double lastmonthgrandtotal = 0; double lastyeargrandtotal = 0;
                    //cmd = new MySqlCommand("SELECT   modifiedroutes.RouteName, ROUND(SUM(indents_subtable.DeliveryQty),2) AS saleQty, SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost) AS salevalue, modifiedroutes.Sno AS routeid, modifidroutssubtab.BranchID AS bid, branchdata_2.BranchName, branchdata_2.flag, branchdata_1.sno AS BranchID, branchdata_2.SalesType AS SalesTypeId FROM branchdata branchdata_2 RIGHT OUTER JOIN branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT  RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo ON  branchdata_2.sno = modifidroutssubtab.BranchID LEFT OUTER JOIN indents_subtable INNER JOIN (SELECT  IndentNo, I_date, Branch_id FROM   indents WHERE  (I_date BETWEEN @starttime AND @endtime)) indt ON indents_subtable.IndentNo = indt.IndentNo ON  modifidroutssubtab.BranchID = indt.Branch_id WHERE   (branchdata.SalesType IS NOT NULL) AND (indents_subtable.DeliveryQty <> 0) AND (branchdata.sno = @BranchID) GROUP BY modifidroutssubtab.BranchID ORDER BY  branchdata_2.RouteID");
                    cmd = new MySqlCommand("SELECT   modifiedroutes.RouteName, indt.I_date,ROUND(SUM(indents_subtable.DeliveryQty),2) AS saleQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost) AS salevalue, modifiedroutes.Sno AS routeid, modifidroutssubtab.BranchID AS bid, branchdata_2.BranchName, branchdata_2.flag, branchdata_1.sno AS BranchID, branchdata_2.SalesType AS SalesTypeId FROM branchdata branchdata_2 RIGHT OUTER JOIN branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT  RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo ON  branchdata_2.sno = modifidroutssubtab.BranchID LEFT OUTER JOIN indents_subtable INNER JOIN (SELECT  IndentNo, I_date, Branch_id FROM   indents WHERE  (I_date BETWEEN @starttime AND @endtime)) indt ON indents_subtable.IndentNo = indt.IndentNo ON  modifidroutssubtab.BranchID = indt.Branch_id WHERE   (branchdata.SalesType IS NOT NULL) AND (indents_subtable.DeliveryQty <> 0) AND (branchdata.sno = @BranchID) GROUP BY DATE(indt.I_date),SalesTypeId ORDER BY  SalesTypeId");

                    cmd.Parameters.AddWithValue("@SOID", BranchID);
                    cmd.Parameters.AddWithValue("@BranchID", BranchID);
                    cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate));
                    cmd.Parameters.AddWithValue("@endtime", GetHighDate(ToDate));
                    Dt_PresentMonthSale = vdbmngr.SelectQuery(cmd).Tables[0];
                    cmd = new MySqlCommand("SELECT   branchdata.BranchName, branchdata.sno,colltion.PaidDate, modifiedroutes.RouteName, modifidroutssubtab.BranchID, modifiedroutes.Sno AS routeid, SUM(colltion.AmountPaid) AS AmountPaid FROM  branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT RefNo, Rank, LevelType, BranchID, CDate, EDate FROM   modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo INNER JOIN (SELECT  Branchid, AmountPaid, PaidDate FROM   collections WHERE  (PaymentType <> 'Cheque') AND (PaidDate BETWEEN @d1 AND @d2)) colltion ON modifidroutssubtab.BranchID = colltion.Branchid WHERE (branchdata.SalesType IS NOT NULL) AND (branchdata.sno = @BranchID) GROUP BY DATE(colltion.PaidDate),modifidroutssubtab.BranchID ORDER BY branchdata.sno");
                    cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate));
                    cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate));
                    cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate));
                    cmd.Parameters.AddWithValue("@SOID", BranchID);
                    cmd.Parameters.AddWithValue("@BranchID", BranchID);
                    Dt_PresentMonthAmount = vdbmngr.SelectQuery(cmd).Tables[0];

                    cmd = new MySqlCommand("SELECT   modifiedroutes.RouteName,indt.I_date, ROUND(SUM(indents_subtable.DeliveryQty),2) AS saleQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost) AS salevalue, modifiedroutes.Sno AS routeid, modifidroutssubtab.BranchID AS bid, branchdata_2.BranchName, branchdata_2.flag, branchdata_1.sno AS BranchID, branchdata_2.SalesType AS SalesTypeId FROM branchdata branchdata_2 RIGHT OUTER JOIN branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT  RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo ON  branchdata_2.sno = modifidroutssubtab.BranchID LEFT OUTER JOIN indents_subtable INNER JOIN (SELECT  IndentNo, I_date, Branch_id FROM   indents WHERE  (I_date BETWEEN @starttime AND @endtime)) indt ON indents_subtable.IndentNo = indt.IndentNo ON  modifidroutssubtab.BranchID = indt.Branch_id WHERE   (branchdata.SalesType IS NOT NULL) AND (indents_subtable.DeliveryQty <> 0) AND (branchdata.sno = @BranchID) GROUP BY DATE(indt.I_date),SalesTypeId ORDER BY SalesTypeId");
                    cmd.Parameters.AddWithValue("@SOID", BranchID);
                    cmd.Parameters.AddWithValue("@BranchID", BranchID);
                    cmd.Parameters.AddWithValue("@starttime", GetLowDate(lastmonthfrom));
                    cmd.Parameters.AddWithValue("@endtime", GetHighDate(lastmonthto));
                    dtSub_lastMonthSale = vdbmngr.SelectQuery(cmd).Tables[0];
                    cmd = new MySqlCommand("SELECT   branchdata.BranchName, branchdata.sno,colltion.PaidDate, modifiedroutes.RouteName, modifidroutssubtab.BranchID, modifiedroutes.Sno AS routeid, SUM(colltion.AmountPaid) AS AmountPaid FROM  branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT RefNo, Rank, LevelType, BranchID, CDate, EDate FROM   modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo INNER JOIN (SELECT  Branchid, AmountPaid, PaidDate FROM   collections WHERE  (PaymentType <> 'Cheque') AND (PaidDate BETWEEN @d1 AND @d2)) colltion ON modifidroutssubtab.BranchID = colltion.Branchid WHERE (branchdata.SalesType IS NOT NULL) AND (branchdata.sno = @BranchID) GROUP BY DATE(colltion.PaidDate),modifidroutssubtab.BranchID ORDER BY branchdata.sno");
                    cmd.Parameters.AddWithValue("@d1", GetLowDate(lastmonthfrom));
                    cmd.Parameters.AddWithValue("@d2", GetHighDate(lastmonthto));
                    cmd.Parameters.AddWithValue("@starttime", GetLowDate(lastmonthfrom));

                    cmd.Parameters.AddWithValue("@SOID", BranchID);
                    cmd.Parameters.AddWithValue("@BranchID", BranchID);
                    dtSub_lastMonthAmount = vdbmngr.SelectQuery(cmd).Tables[0];


                    cmd = new MySqlCommand("SELECT   modifiedroutes.RouteName,indt.I_date, ROUND(SUM(indents_subtable.DeliveryQty),2) AS saleQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost) AS salevalue, modifiedroutes.Sno AS routeid, modifidroutssubtab.BranchID AS bid, branchdata_2.BranchName, branchdata_2.flag, branchdata_1.sno AS BranchID, branchdata_2.SalesType AS SalesTypeId FROM branchdata branchdata_2 RIGHT OUTER JOIN branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT  RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo ON  branchdata_2.sno = modifidroutssubtab.BranchID LEFT OUTER JOIN indents_subtable INNER JOIN (SELECT  IndentNo, I_date, Branch_id FROM   indents WHERE  (I_date BETWEEN @starttime AND @endtime)) indt ON indents_subtable.IndentNo = indt.IndentNo ON  modifidroutssubtab.BranchID = indt.Branch_id WHERE   (branchdata.SalesType IS NOT NULL) AND (indents_subtable.DeliveryQty <> 0) AND (branchdata.sno = @BranchID) GROUP BY DATE(indt.I_date),SalesTypeId ORDER BY SalesTypeId");
                    cmd.Parameters.AddWithValue("@SOID", BranchID);
                    cmd.Parameters.AddWithValue("@BranchID", BranchID);
                    cmd.Parameters.AddWithValue("@starttime", GetLowDate(LastYearFromDate));
                    cmd.Parameters.AddWithValue("@endtime", GetHighDate(LastYearToDate));


                    dtSub_lastYearSales = vdbmngr.SelectQuery(cmd).Tables[0];
                    cmd = new MySqlCommand("SELECT   branchdata.BranchName, branchdata.sno,colltion.PaidDate, modifiedroutes.RouteName, modifidroutssubtab.BranchID, modifiedroutes.Sno AS routeid, SUM(colltion.AmountPaid) AS AmountPaid FROM  branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT RefNo, Rank, LevelType, BranchID, CDate, EDate FROM   modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo INNER JOIN (SELECT  Branchid, AmountPaid, PaidDate FROM   collections WHERE  (PaymentType <> 'Cheque') AND (PaidDate BETWEEN @d1 AND @d2)) colltion ON modifidroutssubtab.BranchID = colltion.Branchid WHERE (branchdata.SalesType IS NOT NULL) AND (branchdata.sno = @BranchID) GROUP BY DATE(colltion.PaidDate),modifidroutssubtab.BranchID ORDER BY branchdata.sno");
                    cmd.Parameters.AddWithValue("@starttime", GetLowDate(LastYearFromDate));
                    cmd.Parameters.AddWithValue("@d1", GetLowDate(LastYearFromDate));
                    cmd.Parameters.AddWithValue("@d2", GetHighDate(LastYearToDate));
                    cmd.Parameters.AddWithValue("@SOID", BranchID);
                    cmd.Parameters.AddWithValue("@BranchID", BranchID);
                    dtSub_lastYearAmount = vdbmngr.SelectQuery(cmd).Tables[0];


                    cmd = new MySqlCommand("SELECT  sno, salestype, flag, UserData_sno, status, rank, club_code FROM salestypemanagement where (status = 1) ORDER BY salestype DESC");
                    cmd.Parameters.AddWithValue("@BranchID", BranchID);
                    DataTable dtsalestype = vdbmngr.SelectQuery(cmd).Tables[0];


                    DataTable dtAll = new DataTable();
                    dtAll.Merge(Dt_PresentMonthSale);
                    dtAll.Merge(dtSub_lastMonthSale);
                    dtAll.Merge(dtSub_lastYearSales);
                    DataView view = new DataView(dtAll);

                    DataTable distincttable = view.ToTable(true, "SalesTypeId");
                    DataTable disticntbarnchname1 = view.ToTable(true, "I_Date");
                    DataTable Report1 = new DataTable();
                    DataTable MainReport1 = new DataTable();
                    MainReport1.Columns.Add("Date");
                    foreach (DataRow branch in disticntbarnchname1.Rows)
                    {
                        DataRow newrow = MainReport1.NewRow();
                        DateTime dtDoe = Convert.ToDateTime(branch["i_date"].ToString());
                        string strdate = dtDoe.ToString("dd");
                        newrow["Date"] = strdate;
                        MainReport1.Rows.Add(newrow); ;
                    }
                    DataView view4 = new DataView(MainReport1);
                    DataTable dtdistinctRoutename = view4.ToTable(true, "Date");
                    DataView dv = dtdistinctRoutename.DefaultView;
                    dv.Sort = "Date ASC";
                    DataTable disticntbarnchname4 = dv.ToTable();
                    DataTable MainReport = new DataTable();
                    MainReport.Columns.Add("DataType");
                    MainReport.Columns.Add("SalestypeId");
                    MainReport.Columns.Add("SalesType");
                    foreach (DataRow branch in disticntbarnchname4.Rows)
                    {
                        MainReport.Columns.Add(branch["Date"].ToString());
                    }
                    int k = 1;
                    foreach (DataRow drr in distincttable.Rows)
                    {
                        DataRow newrow = MainReport.NewRow();

                        string SalestypeId = drr["SalestypeId"].ToString();
                        if (k == 1)
                        {
                            newrow["DataType"] = "This Month";
                        }
                        float amount = 0;
                        foreach (DataRow drsalestype in dtsalestype.Select("sno='" + SalestypeId + "'"))
                        {
                            string Salestype = drsalestype["salestype"].ToString();
                            //newrow["SalesType"] = Salestype;
                            foreach (DataRow dramount in Dt_PresentMonthSale.Select("SalestypeId='" + SalestypeId + "'"))
                            {
                                amount = 0;
                                float.TryParse(dramount["saleQty"].ToString(), out amount);
                                //newrow["Yester Day"] = Math.Round(amount ); ;
                                //newrow["Yester Day Avg"] = dramount["AvgQty"].ToString();
                                //newrow["Branchid"] = dramount["BranchID"].ToString();
                                newrow["SalestypeId"] = SalestypeId;
                                DateTime dtDoe = Convert.ToDateTime(dramount["i_date"].ToString());
                                string strdate = dtDoe.ToString("dd");
                                double Avgqty = amount / 2;
                                newrow[strdate] = Math.Round(Avgqty);
                                newrow["SalesType"] = Salestype;
                                yesterdaygrandtotal += amount;
                            }
                        }
                        if (amount > 0)
                        {
                            MainReport.Rows.Add(newrow);
                            k++;
                        }
                    }
                    int k1 = 1;
                    foreach (DataRow drr in distincttable.Rows)
                    {
                        DataRow newrow = MainReport.NewRow();
                        string SalestypeId = drr["SalestypeId"].ToString();
                        float amount = 0;
                        foreach (DataRow drsalestype in dtsalestype.Select("sno='" + SalestypeId + "'"))
                        {
                            string Salestype = drsalestype["salestype"].ToString();
                            if (k1 == 1)
                            {
                                newrow["DataType"] = "Last Month";
                            }
                            foreach (DataRow dramount in dtSub_lastMonthSale.Select("SalestypeId='" + SalestypeId + "'"))
                            {
                                amount = 0;
                                float.TryParse(dramount["saleQty"].ToString(), out amount);
                                //newrow["Last Week"] = Math.Round(amount );
                                //newrow["Last Week Avg"] = dramount["AvgQty"].ToString();
                                //newrow["Branchid"] = dramount["BranchID"].ToString();
                                newrow["SalestypeId"] = SalestypeId;
                                //newrow["SalesType"] = Salestype;

                                DateTime dtDoe = Convert.ToDateTime(dramount["i_date"].ToString());
                                string strdate = dtDoe.ToString("dd");
                                double Avgqty = amount / 2;
                                newrow[strdate] = Math.Round(Avgqty);
                                newrow["SalesType"] = SalestypeId;
                                newrow["SalesType"] = Salestype;
                                lastweekgrandtotal += amount;

                            }
                        }
                        if (amount > 0)
                        {
                            MainReport.Rows.Add(newrow);
                            k1++;
                        }

                    }
                    int k2 = 1;
                    foreach (DataRow drr in distincttable.Rows)
                    {
                        DataRow newrow = MainReport.NewRow();
                        string SalestypeId = drr["SalestypeId"].ToString();
                        float amount = 0;
                        foreach (DataRow drsalestype in dtsalestype.Select("sno='" + SalestypeId + "'"))
                        {
                            string Salestype = drsalestype["salestype"].ToString();
                            if (k2 == 1)
                            {
                                newrow["DataType"] = "Last Year";
                            }
                            foreach (DataRow dramount in dtSub_lastYearSales.Select("SalestypeId='" + SalestypeId + "'"))
                            {
                                amount = 0;
                                float.TryParse(dramount["saleQty"].ToString(), out amount);
                                //newrow["Last Month"] = Math.Round(amount ); ;
                                //newrow["Last Month Avg"] = dramount["AvgQty"].ToString();
                                //newrow["Branchid"] = dramount["BranchID"].ToString();
                                newrow["SalestypeId"] = SalestypeId;
                                //newrow["SalesType"] = Salestype;

                                DateTime dtDoe = Convert.ToDateTime(dramount["i_date"].ToString());
                                string strdate = dtDoe.ToString("dd");
                                double Avgqty = amount / 2;
                                newrow[strdate] = Math.Round(Avgqty);
                                newrow["SalesType"] = Salestype;
                                lastmonthgrandtotal += amount;

                            }
                        }
                        if (amount > 0)
                        {
                            MainReport.Rows.Add(newrow);
                            k2++;
                        }


                    }
                    grdRouteReport.DataSource = MainReport;
                    grdRouteReport.DataBind();
                }
                #endregion
                #region
                else if (SectedDataType == "Weak")
                {
                    string strfromdate = FromDate.ToString();
                    DateTime fromDate = DateTime.Parse(strfromdate.Trim());
                    var d_fromdate = fromDate;
                    CultureInfo cul_from = CultureInfo.CurrentCulture;
                    int from_weekNum = cul_from.Calendar.GetWeekOfYear(
                        d_fromdate,
                        CalendarWeekRule.FirstDay,
                        DayOfWeek.Monday);
                    string strtodate = ToDate.ToString();
                    DateTime toDate = DateTime.Parse(strtodate.Trim());
                    var d_toDate = toDate;
                    CultureInfo cul_to = CultureInfo.CurrentCulture;
                    int to_weekNum = cul_to.Calendar.GetWeekOfYear(
                        d_toDate,
                        CalendarWeekRule.FirstDay,
                        DayOfWeek.Monday);
                    int diffweeks = to_weekNum - from_weekNum;
                    DateTime firstmonth = new DateTime();
                    DateTime lastmonth = new DateTime();
                    ToDate = ToDate.AddMonths(1);
                    TimeSpan dateSpan = ToDate.Subtract(FromDate);
                    int years = (dateSpan.Days / 365);
                    int months = ((dateSpan.Days % 365) / 31) + (years * 12);
                    int N = 0;
                    int i = 1;
                    DataTable dtPresentAllWeeks = new DataTable();
                    DataTable dtLastAllWeeks = new DataTable();
                    DataTable dtLastYearAllWeeks = new DataTable();
                    if (months != 0)
                    {
                        int newweek = from_weekNum;
                        int weaknumber = 0;
                        for (int j = 0; j < diffweeks; j++)
                        {
                            firstmonth = GetLowDate(FromDate);
                            lastmonth = GetHighDate(firstmonth.AddDays(7));
                            DateTime dtF = firstmonth;
                            string ChangedTime1 = firstmonth.ToString("dd/MMM");
                            string ChangedTime2 = lastmonth.ToString("dd/MMM");
                            string Changedt = firstmonth.ToString("MMM");
                            string mnth = firstmonth.ToString("MM");
                            weaknumber++;

                            cmd = new MySqlCommand("SELECT   modifiedroutes.RouteName, ROUND(SUM(indents_subtable.DeliveryQty),2) AS saleQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost) AS salevalue, modifiedroutes.Sno AS routeid, modifidroutssubtab.BranchID AS bid, branchdata_2.BranchName, branchdata_2.flag, branchdata_1.sno AS BranchID, branchdata_2.SalesType AS SalesTypeId FROM branchdata branchdata_2 RIGHT OUTER JOIN branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT  RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo ON  branchdata_2.sno = modifidroutssubtab.BranchID LEFT OUTER JOIN indents_subtable INNER JOIN (SELECT  IndentNo, I_date, Branch_id FROM   indents WHERE  (I_date BETWEEN @starttime AND @endtime)) indt ON indents_subtable.IndentNo = indt.IndentNo ON  modifidroutssubtab.BranchID = indt.Branch_id WHERE   (branchdata.SalesType IS NOT NULL) AND (indents_subtable.DeliveryQty <> 0) AND (branchdata.sno = @BranchID) GROUP BY SalesTypeId ORDER BY  SalesTypeId");

                            cmd.Parameters.AddWithValue("@SOID", BranchID);
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate));
                            cmd.Parameters.AddWithValue("@endtime", GetHighDate(ToDate));
                            Dt_PresentMonthSale = vdbmngr.SelectQuery(cmd).Tables[0];
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, branchdata.sno,colltion.PaidDate, modifiedroutes.RouteName, modifidroutssubtab.BranchID, modifiedroutes.Sno AS routeid, SUM(colltion.AmountPaid) AS AmountPaid FROM  branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT RefNo, Rank, LevelType, BranchID, CDate, EDate FROM   modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo INNER JOIN (SELECT  Branchid, AmountPaid, PaidDate FROM   collections WHERE  (PaymentType <> 'Cheque') AND (PaidDate BETWEEN @d1 AND @d2)) colltion ON modifidroutssubtab.BranchID = colltion.Branchid WHERE (branchdata.SalesType IS NOT NULL) AND (branchdata.sno = @BranchID) GROUP BY DATE(colltion.PaidDate),modifidroutssubtab.BranchID ORDER BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate));
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate));
                            cmd.Parameters.AddWithValue("@SOID", BranchID);
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            Dt_PresentMonthAmount = vdbmngr.SelectQuery(cmd).Tables[0];

                            cmd = new MySqlCommand("SELECT   modifiedroutes.RouteName, ROUND(SUM(indents_subtable.DeliveryQty),2) AS saleQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost) AS salevalue, modifiedroutes.Sno AS routeid, modifidroutssubtab.BranchID AS bid, branchdata_2.BranchName, branchdata_2.flag, branchdata_1.sno AS BranchID, branchdata_2.SalesType AS SalesTypeId FROM branchdata branchdata_2 RIGHT OUTER JOIN branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT  RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo ON  branchdata_2.sno = modifidroutssubtab.BranchID LEFT OUTER JOIN indents_subtable INNER JOIN (SELECT  IndentNo, I_date, Branch_id FROM   indents WHERE  (I_date BETWEEN @starttime AND @endtime)) indt ON indents_subtable.IndentNo = indt.IndentNo ON  modifidroutssubtab.BranchID = indt.Branch_id WHERE   (branchdata.SalesType IS NOT NULL) AND (indents_subtable.DeliveryQty <> 0) AND (branchdata.sno = @BranchID) GROUP BY SalesTypeId ORDER BY SalesTypeId");
                            cmd.Parameters.AddWithValue("@SOID", BranchID);
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate.AddDays(-30)));
                            cmd.Parameters.AddWithValue("@endtime", GetHighDate(ToDate.AddDays(-30)));
                            dtSub_lastMonthSale = vdbmngr.SelectQuery(cmd).Tables[0];
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, branchdata.sno,colltion.PaidDate, modifiedroutes.RouteName, modifidroutssubtab.BranchID, modifiedroutes.Sno AS routeid, SUM(colltion.AmountPaid) AS AmountPaid FROM  branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT RefNo, Rank, LevelType, BranchID, CDate, EDate FROM   modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo INNER JOIN (SELECT  Branchid, AmountPaid, PaidDate FROM   collections WHERE  (PaymentType <> 'Cheque') AND (PaidDate BETWEEN @d1 AND @d2)) colltion ON modifidroutssubtab.BranchID = colltion.Branchid WHERE (branchdata.SalesType IS NOT NULL) AND (branchdata.sno = @BranchID) GROUP BY DATE(colltion.PaidDate),modifidroutssubtab.BranchID ORDER BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate.AddDays(-30)));
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-30));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-30));
                            cmd.Parameters.AddWithValue("@SOID", BranchID);
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            dtSub_lastMonthAmount = vdbmngr.SelectQuery(cmd).Tables[0];


                            cmd = new MySqlCommand("SELECT   modifiedroutes.RouteName, ROUND(SUM(indents_subtable.DeliveryQty),2) AS saleQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost) AS salevalue, modifiedroutes.Sno AS routeid, modifidroutssubtab.BranchID AS bid, branchdata_2.BranchName, branchdata_2.flag, branchdata_1.sno AS BranchID, branchdata_2.SalesType AS SalesTypeId FROM branchdata branchdata_2 RIGHT OUTER JOIN branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT  RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo ON  branchdata_2.sno = modifidroutssubtab.BranchID LEFT OUTER JOIN indents_subtable INNER JOIN (SELECT  IndentNo, I_date, Branch_id FROM   indents WHERE  (I_date BETWEEN @starttime AND @endtime)) indt ON indents_subtable.IndentNo = indt.IndentNo ON  modifidroutssubtab.BranchID = indt.Branch_id WHERE   (branchdata.SalesType IS NOT NULL) AND (indents_subtable.DeliveryQty <> 0) AND (branchdata.sno = @BranchID) GROUP BY SalesTypeId ORDER BY SalesTypeId");
                            cmd.Parameters.AddWithValue("@SOID", BranchID);
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate.AddDays(-365)));
                            cmd.Parameters.AddWithValue("@endtime", GetHighDate(ToDate.AddDays(-365)));
                            dtSub_lastYearSales = vdbmngr.SelectQuery(cmd).Tables[0];
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, branchdata.sno,colltion.PaidDate, modifiedroutes.RouteName, modifidroutssubtab.BranchID, modifiedroutes.Sno AS routeid, SUM(colltion.AmountPaid) AS AmountPaid FROM  branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT RefNo, Rank, LevelType, BranchID, CDate, EDate FROM   modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo INNER JOIN (SELECT  Branchid, AmountPaid, PaidDate FROM   collections WHERE  (PaymentType <> 'Cheque') AND (PaidDate BETWEEN @d1 AND @d2)) colltion ON modifidroutssubtab.BranchID = colltion.Branchid WHERE (branchdata.SalesType IS NOT NULL) AND (branchdata.sno = @BranchID) GROUP BY DATE(colltion.PaidDate),modifidroutssubtab.BranchID ORDER BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate.AddDays(-365)));
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-365));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-365));
                            cmd.Parameters.AddWithValue("@SOID", BranchID);
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            dtSub_lastYearAmount = vdbmngr.SelectQuery(cmd).Tables[0];



                            FromDate = FromDate.AddDays(7);
                            DataTable dttemp = new DataTable();
                            DataTable dttemp1 = new DataTable();
                            dttemp.Columns.Add("SalestypeId");
                            dttemp.Columns.Add("SalesType");
                            dttemp.Columns.Add("saleQty");
                            dttemp.Columns.Add("Date");
                            dttemp.Columns.Add("DateType");
                            foreach (DataRow drSubData in Dt_PresentMonthSale.Rows)
                            {
                                DataRow newrow = dttemp.NewRow();
                                // newrow["SalesType"] = drSubData["SalesType"].ToString();
                                newrow["SalestypeId"] = drSubData["SalestypeId"].ToString();
                                newrow["saleQty"] = drSubData["saleQty"].ToString();
                                newrow["DateType"] = "PresentMonth";
                                newrow["Date"] = "Weak" + weaknumber;
                                dttemp.Rows.Add(newrow);
                            }
                            dtPresentAllWeeks.Merge(dttemp);
                            dtALL.Merge(dttemp);
                            dttemp = new DataTable();
                            dttemp.Columns.Add("SalestypeId");
                            dttemp.Columns.Add("SalesType");
                            dttemp.Columns.Add("saleQty");
                            dttemp.Columns.Add("Date");
                            dttemp.Columns.Add("DateType");
                            foreach (DataRow drSubData in dtSub_lastMonthSale.Rows)
                            {
                                DataRow newrow = dttemp.NewRow();
                                //newrow["SalesType"] = drSubData["SalesType"].ToString();
                                newrow["SalestypeId"] = drSubData["SalestypeId"].ToString();
                                newrow["saleQty"] = drSubData["saleQty"].ToString();
                                newrow["DateType"] = "LastMonth";
                                newrow["Date"] = "Weak" + weaknumber;
                                dttemp.Rows.Add(newrow);
                            }
                            dtLastAllWeeks.Merge(dttemp);
                            dtALL.Merge(dttemp);
                            dttemp = new DataTable();
                            dttemp.Columns.Add("SalestypeId");
                            dttemp.Columns.Add("SalesType");
                            dttemp.Columns.Add("saleQty");
                            dttemp.Columns.Add("Date");
                            dttemp.Columns.Add("DateType");
                            foreach (DataRow drSubData in dtSub_lastYearSales.Rows)
                            {
                                DataRow newrow = dttemp.NewRow();
                                newrow["SalestypeId"] = drSubData["SalestypeId"].ToString();
                                //newrow["SalesType"] = drSubData["SalesType"].ToString();
                                newrow["saleQty"] = drSubData["saleQty"].ToString();
                                newrow["DateType"] = "LastYear";
                                newrow["Date"] = "Weak" + weaknumber;
                                dttemp.Rows.Add(newrow);
                            }
                            dtLastYearAllWeeks.Merge(dttemp);
                            dtALL.Merge(dttemp);
                            // dttemp = new DataTable();
                        }
                    }
                    //write here code
                    cmd = new MySqlCommand("SELECT  sno, salestype, flag, UserData_sno, status, rank, club_code FROM salestypemanagement where (status = 1) ORDER BY salestype DESC");
                    cmd.Parameters.AddWithValue("@BranchID", BranchID);
                    DataTable dtsalestype = vdbmngr.SelectQuery(cmd).Tables[0];
                    DataTable disticntbarnchname = new DataTable();
                    DataTable dtdistinctRoutename = new DataTable();
                    DataTable disticntbarnchname1 = new DataTable();
                    if (BranchID == "8009" || BranchID == "8012" || BranchID == "8013")
                    {
                        DataView view = new DataView(dtALL);
                        disticntbarnchname = view.ToTable(true, "BranchName", "BranchID");
                        DataView view3 = new DataView(dtALL);
                        disticntbarnchname1 = view3.ToTable(true, "Date");
                    }
                    else
                    {
                        DataView view = new DataView(dtALL);
                        disticntbarnchname = view.ToTable(true, "SalestypeId");
                        DataView view3 = new DataView(dtALL);
                        dtdistinctRoutename = view3.ToTable(true, "Date");

                        DataView dv = dtdistinctRoutename.DefaultView;
                        dv.Sort = "Date ASC";
                        disticntbarnchname1 = dv.ToTable();
                    }

                    DataTable Report = new DataTable();
                    Report.Columns.Add("DataType");
                    Report.Columns.Add("SalestypeId");
                    Report.Columns.Add("SalesType");
                    foreach (DataRow branch in disticntbarnchname1.Rows)
                    {
                        Report.Columns.Add(branch["Date"].ToString());
                    }
                    int k = 1;
                    foreach (DataRow drr in disticntbarnchname.Rows)
                    {
                        DataRow newrow = Report.NewRow();
                        string SalestypeId = drr["SalestypeId"].ToString();
                        float amount = 0;
                        foreach (DataRow drsalestype in dtsalestype.Select("sno='" + SalestypeId + "'"))
                        {
                            string Salestype = drsalestype["salestype"].ToString();
                            if (k == 1)
                            {
                                newrow["DataType"] = "This Month";
                            }
                            //newrow["SalesType"] = Salestype;
                            foreach (DataRow dramount in dtPresentAllWeeks.Select("SalestypeId='" + SalestypeId + "'"))
                            {
                                amount = 0;
                                float.TryParse(dramount["saleQty"].ToString(), out amount);
                                //newrow["Yester Day"] = Math.Round(amount ); ;
                                //newrow["Yester Day Avg"] = dramount["AvgQty"].ToString();
                                //newrow["Branchid"] = dramount["BranchID"].ToString();

                                newrow["SalestypeId"] = SalestypeId;
                                double Avgqty = amount / 2;
                                newrow[dramount["Date"].ToString()] = Math.Round(Avgqty);
                                newrow["SalesType"] = Salestype;
                            }
                        }
                        if (amount > 0)
                        {
                            Report.Rows.Add(newrow);
                            k++;
                        }
                    }
                    int k1 = 0;
                    foreach (DataRow drr in disticntbarnchname.Rows)
                    {
                        DataRow newrow = Report.NewRow();
                        string SalestypeId = drr["SalestypeId"].ToString();
                        float amount = 0;
                        foreach (DataRow drsalestype in dtsalestype.Select("sno='" + SalestypeId + "'"))
                        {
                            string Salestype = drsalestype["salestype"].ToString();
                            if (k1 == 1)
                            {
                                newrow["DataType"] = "Last Month";
                            }
                            foreach (DataRow dramount in dtLastAllWeeks.Select("SalestypeId='" + SalestypeId + "'"))
                            {
                                amount = 0;
                                float.TryParse(dramount["saleQty"].ToString(), out amount);
                                //newrow["Last Week"] = Math.Round(amount );
                                //newrow["Last Week Avg"] = dramount["AvgQty"].ToString();
                                //newrow["Branchid"] = dramount["BranchID"].ToString();
                                newrow["SalestypeId"] = SalestypeId;
                                //newrow["SalesType"] = Salestype;


                                double Avgqty = amount / 2;
                                newrow[dramount["Date"].ToString()] = Math.Round(Avgqty);
                                newrow["SalesType"] = Salestype;
                                //lastweekgrandtotal += amount;
                            }
                        }
                        if (amount > 0)
                        {
                            Report.Rows.Add(newrow);
                            k1++;
                        }
                    }
                    int k2 = 1;
                    foreach (DataRow drr in disticntbarnchname.Rows)
                    {
                        DataRow newrow = Report.NewRow();
                        string SalestypeId = drr["SalestypeId"].ToString();
                        if (k2 == 1)
                        {
                            newrow["DataType"] = "Last Year";
                        }
                        float amount = 0;
                        foreach (DataRow drsalestype in dtsalestype.Select("sno='" + SalestypeId + "'"))
                        {
                            string Salestype = drsalestype["salestype"].ToString();
                            foreach (DataRow dramount in dtLastYearAllWeeks.Select("SalestypeId='" + SalestypeId + "'"))
                            {
                                amount = 0;
                                float.TryParse(dramount["saleQty"].ToString(), out amount);
                                //newrow["Last Month"] = Math.Round(amount ); ;
                                //newrow["Last Month Avg"] = dramount["AvgQty"].ToString();
                                //newrow["Branchid"] = dramount["BranchID"].ToString();
                                newrow["SalestypeId"] = SalestypeId;

                                //newrow["SalesType"] = Salestype;
                                double Avgqty = amount / 2;
                                newrow[dramount["Date"].ToString()] = Math.Round(Avgqty);
                                newrow["SalesType"] = Salestype;
                                // lastmonthgrandtotal += amount;
                            }
                        }
                        if (amount > 0)
                        {
                            Report.Rows.Add(newrow);
                            k2++;
                        }
                    }
                    grdRouteReport.DataSource = Report;
                    grdRouteReport.DataBind();

                }
                #endregion
                #region
                else if (SectedDataType == "Month")
                {
                    DateTime firstmonth = new DateTime();
                    DateTime lastmonth = new DateTime();
                    ToDate = ToDate.AddMonths(1);
                    TimeSpan dateSpan = ToDate.Subtract(FromDate);
                    int years = (dateSpan.Days / 365);
                    int months = ((dateSpan.Days % 365) / 31) + (years * 12);
                    int N = 0;
                    int i = 1;
                    if (months != 0)
                    {
                        int monthnumber = 0;
                        for (int j = 0; j < months; j++)
                        {
                            firstmonth = GetLowMonthRetrive(FromDate.AddMonths(j));
                            lastmonth = GetHighMonth(firstmonth);
                            DateTime dtF = firstmonth.AddDays(-1);
                            TimeSpan dateSpan2 = lastmonth.Subtract(dtF);
                            int NoOfdays = dateSpan2.Days;
                            monthnumber++;
                            cmd = new MySqlCommand("SELECT   modifiedroutes.RouteName, ROUND(SUM(indents_subtable.DeliveryQty),2) AS saleQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost) AS salevalue, modifiedroutes.Sno AS routeid, modifidroutssubtab.BranchID AS bid, branchdata_2.BranchName, branchdata_2.flag, branchdata_1.sno AS BranchID, branchdata_2.SalesType AS SalesTypeId FROM branchdata branchdata_2 RIGHT OUTER JOIN branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT  RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo ON  branchdata_2.sno = modifidroutssubtab.BranchID LEFT OUTER JOIN indents_subtable INNER JOIN (SELECT  IndentNo, I_date, Branch_id FROM   indents WHERE  (I_date BETWEEN @starttime AND @endtime)) indt ON indents_subtable.IndentNo = indt.IndentNo ON  modifidroutssubtab.BranchID = indt.Branch_id WHERE   (branchdata.SalesType IS NOT NULL) AND (indents_subtable.DeliveryQty <> 0) AND (branchdata.sno = @BranchID) GROUP BY SalesTypeId ORDER BY  SalesTypeId");

                            cmd.Parameters.AddWithValue("@SOID", BranchID);
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate));
                            cmd.Parameters.AddWithValue("@endtime", GetHighDate(ToDate));
                            Dt_PresentMonthSale = vdbmngr.SelectQuery(cmd).Tables[0];
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, branchdata.sno,colltion.PaidDate, modifiedroutes.RouteName, modifidroutssubtab.BranchID, modifiedroutes.Sno AS routeid, SUM(colltion.AmountPaid) AS AmountPaid FROM  branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT RefNo, Rank, LevelType, BranchID, CDate, EDate FROM   modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo INNER JOIN (SELECT  Branchid, AmountPaid, PaidDate FROM   collections WHERE  (PaymentType <> 'Cheque') AND (PaidDate BETWEEN @d1 AND @d2)) colltion ON modifidroutssubtab.BranchID = colltion.Branchid WHERE (branchdata.SalesType IS NOT NULL) AND (branchdata.sno = @BranchID) GROUP BY DATE(colltion.PaidDate),modifidroutssubtab.BranchID ORDER BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate));
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate));
                            cmd.Parameters.AddWithValue("@SOID", BranchID);
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            Dt_PresentMonthAmount = vdbmngr.SelectQuery(cmd).Tables[0];

                            cmd = new MySqlCommand("SELECT   modifiedroutes.RouteName, ROUND(SUM(indents_subtable.DeliveryQty),2) AS saleQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost) AS salevalue, modifiedroutes.Sno AS routeid, modifidroutssubtab.BranchID AS bid, branchdata_2.BranchName, branchdata_2.flag, branchdata_1.sno AS BranchID, branchdata_2.SalesType AS SalesTypeId FROM branchdata branchdata_2 RIGHT OUTER JOIN branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT  RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo ON  branchdata_2.sno = modifidroutssubtab.BranchID LEFT OUTER JOIN indents_subtable INNER JOIN (SELECT  IndentNo, I_date, Branch_id FROM   indents WHERE  (I_date BETWEEN @starttime AND @endtime)) indt ON indents_subtable.IndentNo = indt.IndentNo ON  modifidroutssubtab.BranchID = indt.Branch_id WHERE   (branchdata.SalesType IS NOT NULL) AND (indents_subtable.DeliveryQty <> 0) AND (branchdata.sno = @BranchID) GROUP BY SalesTypeId ORDER BY SalesTypeId");
                            cmd.Parameters.AddWithValue("@SOID", BranchID);
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate.AddDays(-30)));
                            cmd.Parameters.AddWithValue("@endtime", GetHighDate(ToDate.AddDays(-30)));
                            dtSub_lastMonthSale = vdbmngr.SelectQuery(cmd).Tables[0];
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, branchdata.sno,colltion.PaidDate, modifiedroutes.RouteName, modifidroutssubtab.BranchID, modifiedroutes.Sno AS routeid, SUM(colltion.AmountPaid) AS AmountPaid FROM  branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT RefNo, Rank, LevelType, BranchID, CDate, EDate FROM   modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo INNER JOIN (SELECT  Branchid, AmountPaid, PaidDate FROM   collections WHERE  (PaymentType <> 'Cheque') AND (PaidDate BETWEEN @d1 AND @d2)) colltion ON modifidroutssubtab.BranchID = colltion.Branchid WHERE (branchdata.SalesType IS NOT NULL) AND (branchdata.sno = @BranchID) GROUP BY DATE(colltion.PaidDate),modifidroutssubtab.BranchID ORDER BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate.AddDays(-30)));
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-30));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-30));
                            cmd.Parameters.AddWithValue("@SOID", BranchID);
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            dtSub_lastMonthAmount = vdbmngr.SelectQuery(cmd).Tables[0];


                            cmd = new MySqlCommand("SELECT   modifiedroutes.RouteName, ROUND(SUM(indents_subtable.DeliveryQty),2) AS saleQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost) AS salevalue, modifiedroutes.Sno AS routeid, modifidroutssubtab.BranchID AS bid, branchdata_2.BranchName, branchdata_2.flag, branchdata_1.sno AS BranchID, branchdata_2.SalesType AS SalesTypeId FROM branchdata branchdata_2 RIGHT OUTER JOIN branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT  RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo ON  branchdata_2.sno = modifidroutssubtab.BranchID LEFT OUTER JOIN indents_subtable INNER JOIN (SELECT  IndentNo, I_date, Branch_id FROM   indents WHERE  (I_date BETWEEN @starttime AND @endtime)) indt ON indents_subtable.IndentNo = indt.IndentNo ON  modifidroutssubtab.BranchID = indt.Branch_id WHERE   (branchdata.SalesType IS NOT NULL) AND (indents_subtable.DeliveryQty <> 0) AND (branchdata.sno = @BranchID) GROUP BY SalesTypeId ORDER BY SalesTypeId");
                            cmd.Parameters.AddWithValue("@SOID", BranchID);
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate.AddDays(-365)));
                            cmd.Parameters.AddWithValue("@endtime", GetHighDate(ToDate.AddDays(-365)));
                            dtSub_lastYearSales = vdbmngr.SelectQuery(cmd).Tables[0];
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, branchdata.sno,colltion.PaidDate, modifiedroutes.RouteName, modifidroutssubtab.BranchID, modifiedroutes.Sno AS routeid, SUM(colltion.AmountPaid) AS AmountPaid FROM  branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT RefNo, Rank, LevelType, BranchID, CDate, EDate FROM   modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo INNER JOIN (SELECT  Branchid, AmountPaid, PaidDate FROM   collections WHERE  (PaymentType <> 'Cheque') AND (PaidDate BETWEEN @d1 AND @d2)) colltion ON modifidroutssubtab.BranchID = colltion.Branchid WHERE (branchdata.SalesType IS NOT NULL) AND (branchdata.sno = @BranchID) GROUP BY DATE(colltion.PaidDate),modifidroutssubtab.BranchID ORDER BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate.AddDays(-365)));
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-365));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-365));
                            cmd.Parameters.AddWithValue("@SOID", BranchID);
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            dtSub_lastYearAmount = vdbmngr.SelectQuery(cmd).Tables[0];



                            FromDate = FromDate.AddDays(7);
                            DataTable dttemp = new DataTable();
                            DataTable dttemp1 = new DataTable();

                            dttemp.Columns.Add("SalestypeId");
                            dttemp.Columns.Add("SalesType");
                            dttemp.Columns.Add("saleQty");
                            dttemp.Columns.Add("Date");
                            dttemp.Columns.Add("DateType");
                            foreach (DataRow drSubData in Dt_PresentMonthSale.Rows)
                            {
                                DataRow newrow = dttemp.NewRow();
                                // newrow["SalesType"] = drSubData["SalesType"].ToString();
                                newrow["SalestypeId"] = drSubData["SalestypeId"].ToString();
                                newrow["saleQty"] = drSubData["saleQty"].ToString();
                                newrow["DateType"] = "PresentMonth";
                                newrow["Date"] = firstmonth.ToString("MMM");
                                dttemp.Rows.Add(newrow);
                            }

                            dtPresentAllMonth.Merge(dttemp);
                            dtALL.Merge(dttemp);

                            dttemp = new DataTable();
                            dttemp.Columns.Add("SalestypeId");
                            dttemp.Columns.Add("SalesType");
                            dttemp.Columns.Add("saleQty");
                            dttemp.Columns.Add("Date");
                            dttemp.Columns.Add("DateType");
                            foreach (DataRow drSubData in dtSub_lastYearSales.Rows)
                            {
                                DataRow newrow = dttemp.NewRow();
                                newrow["SalestypeId"] = drSubData["SalestypeId"].ToString();
                                //newrow["SalesType"] = drSubData["SalesType"].ToString();
                                newrow["saleQty"] = drSubData["saleQty"].ToString();
                                newrow["DateType"] = "LastYear";
                                newrow["Date"] = firstmonth.ToString("MMM");
                                dttemp.Rows.Add(newrow);
                            }
                            dtLastYearAllMonth.Merge(dttemp);
                            dtALL.Merge(dttemp);
                            // dttemp = new DataTable();
                        }
                    }
                    //write here code
                    cmd = new MySqlCommand("SELECT  sno, salestype, flag, UserData_sno, status, rank, club_code FROM salestypemanagement where (status = 1) ORDER BY salestype DESC");
                    cmd.Parameters.AddWithValue("@BranchID", BranchID);
                    DataTable dtsalestype = vdbmngr.SelectQuery(cmd).Tables[0];
                    DataTable disticntbarnchname = new DataTable();
                    DataTable dtdistinctRoutename = new DataTable();
                    DataTable disticntbarnchname1 = new DataTable();
                    if (BranchID == "8009" || BranchID == "8012" || BranchID == "8013")
                    {
                        DataView view = new DataView(dtALL);
                        disticntbarnchname = view.ToTable(true, "BranchName", "BranchID");
                        DataView view3 = new DataView(dtALL);
                        disticntbarnchname1 = view3.ToTable(true, "Date");
                    }
                    else
                    {
                        DataView view = new DataView(dtALL);
                        disticntbarnchname = view.ToTable(true, "SalestypeId");
                        DataView view3 = new DataView(dtALL);
                        dtdistinctRoutename = view3.ToTable(true, "Date");


                        DataView dv = dtdistinctRoutename.DefaultView;
                        dv.Sort = "Date ASC";
                        disticntbarnchname1 = dv.ToTable();
                    }

                    DataTable Report = new DataTable();
                    Report.Columns.Add("DataType");
                    Report.Columns.Add("SalestypeId");
                    Report.Columns.Add("SalesType");
                    foreach (DataRow branch in disticntbarnchname1.Rows)
                    {
                        Report.Columns.Add(branch["Date"].ToString());
                    }
                    int k = 1;
                    foreach (DataRow drr in disticntbarnchname.Rows)
                    {
                        DataRow newrow = Report.NewRow();
                        string SalestypeId = drr["SalestypeId"].ToString();
                        float amount = 0;
                        foreach (DataRow drsalestype in dtsalestype.Select("sno='" + SalestypeId + "'"))
                        {
                            string Salestype = drsalestype["salestype"].ToString();
                            //newrow["SalesType"] = Salestype;
                            if (k == 1)
                            {
                                newrow["DataType"] = "This Month";
                            }
                            foreach (DataRow dramount in dtPresentAllMonth.Select("SalestypeId='" + SalestypeId + "'"))
                            {
                                amount = 0;
                                float.TryParse(dramount["saleQty"].ToString(), out amount);
                                //newrow["Yester Day"] = Math.Round(amount ); ;
                                //newrow["Yester Day Avg"] = dramount["AvgQty"].ToString();
                                //newrow["Branchid"] = dramount["BranchID"].ToString();

                                newrow["SalestypeId"] = SalestypeId;
                                double Avgqty = amount / 2;
                                newrow[dramount["Date"].ToString()] = Math.Round(Avgqty);
                                newrow["SalesType"] = Salestype;
                            }
                        }
                        if (amount > 0)
                        {
                            Report.Rows.Add(newrow);
                        }
                        k++;
                    }
                    int k1 = 1;
                    foreach (DataRow drr in disticntbarnchname.Rows)
                    {
                        DataRow newrow = Report.NewRow();
                        string SalestypeId = drr["SalestypeId"].ToString();
                        if (k1 == 1)
                        {
                            newrow["DataType"] = "Last Year";
                        }
                        float amount = 0;
                        foreach (DataRow drsalestype in dtsalestype.Select("sno='" + SalestypeId + "'"))
                        {
                            string Salestype = drsalestype["salestype"].ToString();
                            foreach (DataRow dramount in dtLastYearAllMonth.Select("SalestypeId='" + SalestypeId + "'"))
                            {
                                amount = 0;
                                float.TryParse(dramount["saleQty"].ToString(), out amount);
                                //newrow["Last Month"] = Math.Round(amount ); ;
                                //newrow["Last Month Avg"] = dramount["AvgQty"].ToString();
                                //newrow["Branchid"] = dramount["BranchID"].ToString();
                                newrow["SalestypeId"] = SalestypeId;
                                double Avgqty = amount / 2;
                                newrow[dramount["Date"].ToString()] = Math.Round(Avgqty);
                                newrow["SalesType"] = Salestype;
                                // lastmonthgrandtotal += amount;
                            }
                        }
                        if (amount > 0)
                        {
                            Report.Rows.Add(newrow);
                        }
                        k1++;
                    }
                    grdRouteReport.DataSource = Report;
                    grdRouteReport.DataBind();
                }
            }
                #endregion
        }
        catch (Exception ex)
        {
        }
    }
    protected void LinkButton8_Click(object sender, EventArgs e)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            string BranchID = Session["ClickBranchid"].ToString();
            string SectedDataType = ddlDayType.SelectedItem.Value;
            string s = Session["IndDate"].ToString();
            var dt = DateTime.ParseExact(s, "ddd MMM dd yyyy HH:mm:ss 'GMT'zzz", System.Globalization.CultureInfo.InvariantCulture);
            string IndDate = dt.ToString("yyyy-MM-dd");
            DateTime ServerDateCurrentdate = Convert.ToDateTime(IndDate);
            DateTime FromDate = ServerDateCurrentdate;
            string edate = Session["Todate"].ToString();
            var edt = DateTime.ParseExact(edate, "ddd MMM dd yyyy HH:mm:ss 'GMT'zzz", System.Globalization.CultureInfo.InvariantCulture);
            string Tdate = edt.ToString("yyyy-MM-dd");
            DateTime To_Date = Convert.ToDateTime(Tdate);
            DateTime ToDate = To_Date;
            // div_MainPlantComparison.Style.Add("display", "block");
            divHide1.Style.Add("display", "block");

            div_mainRouteSalesType.Style.Add("display", "block");

            string Datatype = "";

            int Ndays = (FromDate - ToDate).Days;
            int countdays = Ndays + 1;

            if (countdays <= 7)
            {
                Datatype = "Monthly";
            }
            else if (countdays <= 30 || countdays <= 8)
            {
                Datatype = "Week";
            }
            else if (countdays == 364 || countdays >= 364)
            {
                Datatype = "Year";
            }
            else
            {
                Datatype = "Monthly";
            }
            DateTime lastmonthfrom = new DateTime();
            DateTime lastmonthto = new DateTime();
            DateTime YearServerDate_Currentdate = Convert.ToDateTime(IndDate);
            DateTime LastYearFromDate = YearServerDate_Currentdate;
            DateTime YearServerDate_Todate = Convert.ToDateTime(Tdate);
            DateTime LastYearToDate = YearServerDate_Todate;
            lastmonthfrom = FromDate.AddMonths(-1);
            lastmonthto = ToDate.AddMonths(-1);
            LastYearFromDate = LastYearFromDate.AddYears(-1);
            LastYearToDate = LastYearToDate.AddYears(-1);
            DataTable Dt_PresentWeak = new DataTable();
            DataTable dtSub_LastWeekData = new DataTable();

            DataTable dtPresentAllMonth = new DataTable();
            DataTable dtLastYearAllMonth = new DataTable();
            DataTable Dt_PresentMonthSale = new DataTable();
            DataTable Dt_PresentMonthAmount = new DataTable();
            DataTable dtSub_lastMonthSale = new DataTable();
            DataTable dtSub_lastMonthAmount = new DataTable();
            DataTable dtSub_lastYearSales = new DataTable();
            DataTable dtSub_lastYearAmount = new DataTable();
            string SalesType = Session["salestype"].ToString();
            DataTable dtALL = new DataTable();
            DataTable dtyesterdayroutesale = new DataTable();
            if (BranchID == "174")
            {
                cmd = new MySqlCommand("SELECT   modifiedroutes.RouteName, SUM(indents_subtable.DeliveryQty) AS saleQty, SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost) AS salevalue, modifiedroutes.Sno AS routeid, modifidroutssubtab.BranchID AS bid, branchdata_2.BranchName, branchdata_2.flag, branchdata_1.sno AS SuperBranch, branchdata_2.SalesType AS SalesTypeId, empmanage.EmpName, branchdata_2.SalesRepresentative FROM  branchdata branchdata_2 RIGHT OUTER JOIN  branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT RefNo, Rank, LevelType, BranchID, CDate, EDate FROM modifiedroutesubtable WHERE (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo ON branchdata_2.sno = modifidroutssubtab.BranchID LEFT OUTER JOIN indents_subtable INNER JOIN (SELECT  IndentNo, I_date, Branch_id FROM indents WHERE  (I_date BETWEEN @starttime AND @endtime)) indt ON indents_subtable.IndentNo = indt.IndentNo ON modifidroutssubtab.BranchID = indt.Branch_id INNER JOIN tripdata ON tripdata.Sno = indents_subtable.DTripId INNER JOIN empmanage ON tripdata.EmpId = empmanage.Sno WHERE (branchdata.SalesType IS NOT NULL) AND (indents_subtable.DeliveryQty <> 0) AND (modifiedroutes.BranchID IN ('174', '527', '4607')) GROUP BY modifiedroutes.Sno, SalesTypeId ORDER BY SalesTypeId, branchdata_2.RouteID");
                cmd.Parameters.AddWithValue("@BranchID", BranchID);
                cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate.AddDays(-1)));
                cmd.Parameters.AddWithValue("@endtime", GetHighDate(ToDate.AddDays(-1)));
                dtyesterdayroutesale = vdbmngr.SelectQuery(cmd).Tables[0];
            }
            else
            {
                cmd = new MySqlCommand("SELECT   modifiedroutes.RouteName, SUM(indents_subtable.DeliveryQty) AS saleQty, SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost) AS salevalue, modifiedroutes.Sno AS routeid, modifidroutssubtab.BranchID AS bid, branchdata_2.BranchName, branchdata_2.flag, branchdata_1.sno AS SuperBranch, branchdata_2.SalesType AS SalesTypeId, empmanage.EmpName, branchdata_2.SalesRepresentative FROM  branchdata branchdata_2 RIGHT OUTER JOIN  branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT RefNo, Rank, LevelType, BranchID, CDate, EDate FROM modifiedroutesubtable WHERE (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo ON branchdata_2.sno = modifidroutssubtab.BranchID LEFT OUTER JOIN indents_subtable INNER JOIN (SELECT  IndentNo, I_date, Branch_id FROM indents WHERE  (I_date BETWEEN @starttime AND @endtime)) indt ON indents_subtable.IndentNo = indt.IndentNo ON modifidroutssubtab.BranchID = indt.Branch_id INNER JOIN tripdata ON tripdata.Sno = indents_subtable.DTripId INNER JOIN empmanage ON tripdata.EmpId = empmanage.Sno WHERE (branchdata.SalesType IS NOT NULL) AND (indents_subtable.DeliveryQty <> 0) AND (modifiedroutes.BranchID = @BranchID) GROUP BY modifiedroutes.Sno, SalesTypeId ORDER BY SalesTypeId, branchdata_2.RouteID");
                cmd.Parameters.AddWithValue("@BranchID", BranchID);
                cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate.AddDays(-1)));
                cmd.Parameters.AddWithValue("@endtime", GetHighDate(ToDate.AddDays(-1)));
                dtyesterdayroutesale = vdbmngr.SelectQuery(cmd).Tables[0];
            }
            cmd = new MySqlCommand("SELECT  sno, salestype, flag, UserData_sno, status, rank, club_code FROM salestypemanagement where (status = 1) ORDER BY salestype DESC");
            cmd.Parameters.AddWithValue("@BranchID", BranchID);
            DataTable dtsalestype = vdbmngr.SelectQuery(cmd).Tables[0];
            dtALL.Merge(dtyesterdayroutesale);
            string cate = ddlbarnchCategory.SelectedItem.Value;
            double yesterdaysum = 0;
            double lastweaksum = 0;
            double lastmonthsum = 0;
            double lastyearsum = 0;
            if (cate == "BranchWiseCollections")
            {
                DataView view = new DataView(dtALL);
                DataTable distincttable = view.ToTable(true, "routeid");
                DataTable temptable = new DataTable();
                temptable.Columns.Add("RouteName");
                temptable.Columns.Add("RouteId");
                temptable.Columns.Add("SalesType");
                temptable.Columns.Add("SalesTypeId");
                temptable.Columns.Add("SaleValue");
                double compare = 0;
                //newrow["SalesType"] = Salestype;
                double daytotal = 0; double weaktotal = 0;
                double monthtotal = 0; double yeartotal = 0;
                foreach (DataRow dramount in dtyesterdayroutesale.Rows)
                {
                    DataRow newrow = temptable.NewRow();
                    string SalesTypeId = dramount["SalesTypeId"].ToString();
                    foreach (DataRow drslestype in dtsalestype.Select("sno='" + SalesTypeId + "'"))
                    {
                        if (drslestype["sno"].ToString() == "22" || drslestype["sno"].ToString() == "18" || drslestype["sno"].ToString() == "44" || drslestype["sno"].ToString() == "36" || drslestype["sno"].ToString() == "37" || drslestype["sno"].ToString() == "42")
                        {
                            newrow["SalesType"] = "INSTITUTIONAL";//drslestype["salestype"].ToString();
                            newrow["SalesTypeId"] = "-" + drslestype["sno"].ToString();
                        }
                        else
                        {
                            newrow["SalesType"] = drslestype["salestype"].ToString();
                            newrow["SalesTypeId"] = "-" + drslestype["sno"].ToString();
                        }
                    }
                    newrow["RouteName"] = dramount["RouteName"].ToString();
                    newrow["RouteId"] = dramount["routeid"].ToString();
                    float salevalue = 0;
                    float.TryParse(dramount["salevalue"].ToString(), out salevalue);
                    newrow["SaleValue"] = Math.Round(salevalue);
                    temptable.Rows.Add(newrow);
                }
                DataView view1 = new DataView(temptable);
                DataTable routedistinct = view1.ToTable(true, "RouteName", "routeid");
                DataTable dtdistinctsalestype = view1.ToTable(true, "SalesType");
                DataTable MainReport = new DataTable();
                MainReport.Columns.Add("RouteId");
                MainReport.Columns.Add("RouteName");
                foreach (DataRow dramount in dtdistinctsalestype.Rows)
                {
                    string st = dramount["SalesType"].ToString();
                    if (st != "" && st != null)
                    {
                        MainReport.Columns.Add(dramount["SalesType"].ToString(), typeof(Double));
                    }
                }
                foreach (DataRow de in routedistinct.Rows)
                {
                    DataRow newrow1 = MainReport.NewRow();
                    newrow1["RouteName"] = de["RouteName"].ToString();
                    newrow1["RouteId"] = de["routeid"].ToString();
                    double qty = 0;
                    string type = "";
                    foreach (DataRow ddrsalestype in dtdistinctsalestype.Rows)
                    {
                        type = ddrsalestype["SalesType"].ToString();
                        double Totqty = 0;
                        foreach (DataRow ddr1 in temptable.Rows)
                        {
                            if (de["RouteName"].ToString() == ddr1["RouteName"].ToString() && ddrsalestype["SalesType"].ToString() == ddr1["SalesType"].ToString())
                            {
                                double.TryParse(ddr1["salevalue"].ToString(), out qty);
                                // newrow1[type] = qty;
                                Totqty += qty;//co/
                                //newrow1[ddrsalestype["SalesType"].ToString()] = qty;
                            }
                        }
                        if (type != "" && type != null)
                        {
                            newrow1[type] = Totqty;
                        }
                    }
                    MainReport.Rows.Add(newrow1);
                }
                DataRow newvartical = MainReport.NewRow();
                newvartical["RouteName"] = "Total";
                double val = 0.0;
                foreach (DataColumn dc in MainReport.Columns)
                {
                    if (dc.DataType == typeof(Double))
                    {
                        val = 0.0;
                        double.TryParse(MainReport.Compute("sum([" + dc.ToString() + "])", "[" + dc.ToString() + "]<>'0'").ToString(), out val);
                        newvartical[dc.ToString()] = val;
                    }
                }
                MainReport.Rows.Add(newvartical);
                GrdRouteSalesType.DataSource = MainReport;
                GrdRouteSalesType.DataBind();
            }
            else
            {
                DataView view = new DataView(dtALL);
                DataTable distincttable = view.ToTable(true, "routeid");
                DataTable temptable = new DataTable();
                temptable.Columns.Add("RouteName");
                temptable.Columns.Add("RouteId");
                temptable.Columns.Add("SalesType");
                temptable.Columns.Add("SalesTypeId");
                temptable.Columns.Add("SaleValue");
                double compare = 0;
                //newrow["SalesType"] = Salestype;
                double daytotal = 0; double weaktotal = 0;
                double monthtotal = 0; double yeartotal = 0;
                foreach (DataRow dramount in dtyesterdayroutesale.Rows)
                {
                    DataRow newrow = temptable.NewRow();
                    string SalesTypeId = dramount["SalesTypeId"].ToString();
                    foreach (DataRow drslestype in dtsalestype.Select("sno='" + SalesTypeId + "'"))
                    {
                        if (drslestype["sno"].ToString() == "22" || drslestype["sno"].ToString() == "18" || drslestype["sno"].ToString() == "44" || drslestype["sno"].ToString() == "36" || drslestype["sno"].ToString() == "37" || drslestype["sno"].ToString() == "42")
                        {
                            newrow["SalesType"] = "INSTITUTIONAL";//drslestype["salestype"].ToString();
                            newrow["SalesTypeId"] = drslestype["sno"].ToString();
                        }
                        else
                        {
                            newrow["SalesType"] = drslestype["salestype"].ToString();
                            newrow["SalesTypeId"] = drslestype["sno"].ToString();
                        }
                    }
                    newrow["RouteName"] = dramount["RouteName"].ToString();
                    newrow["RouteId"] = dramount["routeid"].ToString();
                    float salevalue = 0;
                    float.TryParse(dramount["saleQty"].ToString(), out salevalue);
                    newrow["SaleValue"] = Math.Round(salevalue);
                    temptable.Rows.Add(newrow);
                }
                DataView view1 = new DataView(temptable);
                DataTable routedistinct = view1.ToTable(true, "RouteName", "routeid");
                DataTable dtdistinctsalestype = view1.ToTable(true, "SalesType");
                DataTable MainReport = new DataTable();
                MainReport.Columns.Add("RouteId");
                MainReport.Columns.Add("RouteName");
                foreach (DataRow dramount in dtdistinctsalestype.Rows)
                {
                    string st = dramount["SalesType"].ToString();
                    if (st != "" && st != null)
                    {
                        MainReport.Columns.Add(dramount["SalesType"].ToString(), typeof(Double));
                    }
                }
                foreach (DataRow de in routedistinct.Rows)
                {
                    DataRow newrow1 = MainReport.NewRow();
                    newrow1["RouteName"] = de["RouteName"].ToString();
                    newrow1["RouteId"] = de["routeid"].ToString();
                    double qty = 0;
                    string type = "";
                    foreach (DataRow ddrsalestype in dtdistinctsalestype.Rows)
                    {
                        type = ddrsalestype["SalesType"].ToString();
                        double Totqty = 0;
                        foreach (DataRow ddr1 in temptable.Rows)
                        {
                            if (de["RouteName"].ToString() == ddr1["RouteName"].ToString() && ddrsalestype["SalesType"].ToString() == ddr1["SalesType"].ToString())
                            {
                                double.TryParse(ddr1["salevalue"].ToString(), out qty);
                                // newrow1[type] = qty;
                                Totqty += qty;//co/
                                //newrow1[ddrsalestype["SalesType"].ToString()] = qty;
                                //string sttmp = ddr1["SalesType"].ToString();
                                //if (sttmp != "" && sttmp != null)
                                //{
                                //    newrow1[ddr1["SalesType"].ToString()] = ddr1["SaleValue"].ToString();
                                //}
                            }
                        }
                        if (type != "" && type != null)
                        {
                            newrow1[type] = Totqty;
                        }
                    }
                    MainReport.Rows.Add(newrow1);
                }
                DataRow newvartical = MainReport.NewRow();
                newvartical["RouteName"] = "Total";
                double val = 0.0;
                foreach (DataColumn dc in MainReport.Columns)
                {
                    if (dc.DataType == typeof(Double))
                    {
                        val = 0.0;
                        double.TryParse(MainReport.Compute("sum([" + dc.ToString() + "])", "[" + dc.ToString() + "]<>'0'").ToString(), out val);
                        newvartical[dc.ToString()] = val;
                    }
                }
                MainReport.Rows.Add(newvartical);
                GrdRouteSalesType.DataSource = MainReport;
                GrdRouteSalesType.DataBind();
            }
            //DataRow newrow2 = temptable.NewRow();
            //newrow2["RouteName"] = "Total";
            //newrow2["SaleQty"] = Math.Round(yesterdaysum );//yesterdaysum;
            //newrow2["SaleValue"] = Math.Round(yesterdayvaluesum ); ;
            //MainReport.Rows.Add(newrow2);

        }
        catch (Exception ex)
        {
        }
    }
    protected void GrdRouteSalesType_RowCommand(object sender, GridViewCommandEventArgs e)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            int rowIndex = Convert.ToInt32(e.CommandArgument);
            GridViewRow row = GrdRouteSalesType.Rows[rowIndex];
            string Route_Id = row.Cells[1].Text;
            Session["Click_Route_id"] = Route_Id;
            ViewState["Val1"] = "btnRouteclick";
            string SectedDataType = ddlDayType.SelectedItem.Value;
            string s = Session["IndDate"].ToString();
            var dt = DateTime.ParseExact(s, "ddd MMM dd yyyy HH:mm:ss 'GMT'zzz", System.Globalization.CultureInfo.InvariantCulture);
            string IndDate = dt.ToString("yyyy-MM-dd");
            DateTime ServerDateCurrentdate = Convert.ToDateTime(IndDate);
            DateTime FromDate = ServerDateCurrentdate;
            string edate = Session["Todate"].ToString();
            var edt = DateTime.ParseExact(edate, "ddd MMM dd yyyy HH:mm:ss 'GMT'zzz", System.Globalization.CultureInfo.InvariantCulture);
            string Tdate = edt.ToString("yyyy-MM-dd");
            DateTime To_Date = Convert.ToDateTime(Tdate);
            DateTime ToDate = To_Date;
            // div_MainPlantComparison.Style.Add("display", "block");
            divHide1.Style.Add("display", "block");
            divMainRouteUnderSalestype.Style.Add("display", "block");

            string Datatype = "";

            int Ndays = (FromDate - ToDate).Days;
            int countdays = Ndays + 1;

            if (countdays <= 7)
            {
                Datatype = "Monthly";
            }
            else if (countdays <= 30 || countdays <= 8)
            {
                Datatype = "Week";
            }
            else if (countdays == 364 || countdays >= 364)
            {
                Datatype = "Year";
            }
            else
            {
                Datatype = "Monthly";
            }


            DateTime lastmonthfrom = new DateTime();
            DateTime lastmonthto = new DateTime();
            DateTime YearServerDate_Currentdate = Convert.ToDateTime(IndDate);
            DateTime LastYearFromDate = YearServerDate_Currentdate;
            DateTime YearServerDate_Todate = Convert.ToDateTime(Tdate);
            DateTime LastYearToDate = YearServerDate_Todate;
            lastmonthfrom = FromDate.AddMonths(-1);
            lastmonthto = ToDate.AddMonths(-1);
            LastYearFromDate = LastYearFromDate.AddYears(-1);
            LastYearToDate = LastYearToDate.AddYears(-1);



            DataTable Dt_PresentWeak = new DataTable();
            DataTable dtSub_LastWeekData = new DataTable();

            DataTable dtPresentAllMonth = new DataTable();
            DataTable dtLastYearAllMonth = new DataTable();


            DataTable Dt_PresentMonthSale = new DataTable();
            DataTable Dt_PresentMonthAmount = new DataTable();
            DataTable dtSub_lastMonthSale = new DataTable();
            DataTable dtSub_lastMonthAmount = new DataTable();
            DataTable dtSub_lastYearSales = new DataTable();
            DataTable dtSub_lastYearAmount = new DataTable();

            string SalesType = Session["salestype"].ToString();
            DataTable dtALL = new DataTable();

            DataTable dtyesterdayroutesale = new DataTable();

            cmd = new MySqlCommand("SELECT  modifiedroutes.RouteName, SUM(indents_subtable.DeliveryQty) AS saleQty, SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost) AS salevalue, modifiedroutes.Sno AS routeid, modifidroutssubtab.BranchID AS bid, branchdata_2.BranchName, branchdata_2.flag, branchdata_1.sno As SuperBranch,  branchdata_2.SalesType AS SalesTypeId, empmanage.EmpName, branchdata_2.SalesRepresentative FROM  branchdata branchdata_2 RIGHT OUTER JOIN branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT   RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo ON  branchdata_2.sno = modifidroutssubtab.BranchID LEFT OUTER JOIN indents_subtable INNER JOIN (SELECT  IndentNo, I_date, Branch_id FROM  indents WHERE  (I_date BETWEEN @starttime AND @endtime)) indt ON indents_subtable.IndentNo = indt.IndentNo ON  modifidroutssubtab.BranchID = indt.Branch_id INNER JOIN tripdata ON tripdata.Sno = indents_subtable.DTripId INNER JOIN empmanage ON tripdata.EmpId = empmanage.Sno WHERE  (branchdata.SalesType IS NOT NULL) AND (indents_subtable.DeliveryQty <> 0) AND (modifiedroutes.sno = @Route_ID) GROUP BY SalesTypeId ORDER BY SalesTypeId, branchdata_2.RouteID");
            cmd.Parameters.AddWithValue("@Route_ID", Route_Id);
            cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate.AddDays(-1)));
            cmd.Parameters.AddWithValue("@endtime", GetHighDate(ToDate.AddDays(-1)));
            dtyesterdayroutesale = vdbmngr.SelectQuery(cmd).Tables[0];


            //cmd = new MySqlCommand("SELECT   modifiedroutes.Branchid As SuperBranch,modifiedroutes.RouteName, ROUND(SUM(indents_subtable.DeliveryQty),2) AS saleQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost) AS salevalue, modifiedroutes.Sno AS routeid, modifidroutssubtab.BranchID AS bid, branchdata_2.BranchName, branchdata_2.flag, branchdata_1.sno AS BranchID, branchdata_2.SalesType AS SalesTypeId FROM branchdata branchdata_2 RIGHT OUTER JOIN branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT  RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo ON  branchdata_2.sno = modifidroutssubtab.BranchID LEFT OUTER JOIN indents_subtable INNER JOIN (SELECT  IndentNo, I_date, Branch_id FROM   indents WHERE  (I_date BETWEEN @starttime AND @endtime)) indt ON indents_subtable.IndentNo = indt.IndentNo ON  modifidroutssubtab.BranchID = indt.Branch_id WHERE   (branchdata.SalesType IS NOT NULL) AND (indents_subtable.DeliveryQty <> 0) AND (branchdata.sno = @BranchID) GROUP BY SalesTypeId ORDER BY  SalesTypeId");
            //cmd.Parameters.AddWithValue("@SOID", BranchID);
            //cmd.Parameters.AddWithValue("@BranchID", BranchID);
            //cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate.AddDays(-2)));
            //cmd.Parameters.AddWithValue("@endtime", GetHighDate(ToDate.AddDays(-2)));
            //DataTable dtyesterdayroutesale = vdbmngr.SelectQuery(cmd).Tables[0];


            DataTable dtLastweakroutesale = new DataTable();

            cmd = new MySqlCommand("SELECT  modifiedroutes.RouteName, SUM(indents_subtable.DeliveryQty) AS saleQty, SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost) AS salevalue, modifiedroutes.Sno AS routeid, modifidroutssubtab.BranchID AS bid, branchdata_2.BranchName, branchdata_2.flag, branchdata_1.sno As SuperBranch,  branchdata_2.SalesType AS SalesTypeId, empmanage.EmpName, branchdata_2.SalesRepresentative FROM  branchdata branchdata_2 RIGHT OUTER JOIN branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT   RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo ON  branchdata_2.sno = modifidroutssubtab.BranchID LEFT OUTER JOIN indents_subtable INNER JOIN (SELECT  IndentNo, I_date, Branch_id FROM  indents WHERE  (I_date BETWEEN @starttime AND @endtime)) indt ON indents_subtable.IndentNo = indt.IndentNo ON  modifidroutssubtab.BranchID = indt.Branch_id INNER JOIN tripdata ON tripdata.Sno = indents_subtable.DTripId INNER JOIN empmanage ON tripdata.EmpId = empmanage.Sno WHERE  (branchdata.SalesType IS NOT NULL) AND (indents_subtable.DeliveryQty <> 0) AND (modifiedroutes.sno = @Route_ID)  GROUP BY SalesTypeId ORDER BY SalesTypeId, branchdata_2.RouteID");
            cmd.Parameters.AddWithValue("@Route_ID", Route_Id);
            cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate.AddDays(-7)));
            cmd.Parameters.AddWithValue("@endtime", GetHighDate(ToDate.AddDays(-7)));
            dtLastweakroutesale = vdbmngr.SelectQuery(cmd).Tables[0];

            DataTable dtLastMonthroutesale = new DataTable();

            cmd = new MySqlCommand("SELECT  modifiedroutes.RouteName, SUM(indents_subtable.DeliveryQty) AS saleQty, SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost) AS salevalue, modifiedroutes.Sno AS routeid, modifidroutssubtab.BranchID AS bid, branchdata_2.BranchName, branchdata_2.flag, branchdata_1.sno As SuperBranch,  branchdata_2.SalesType AS SalesTypeId, empmanage.EmpName, branchdata_2.SalesRepresentative FROM  branchdata branchdata_2 RIGHT OUTER JOIN branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT   RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo ON  branchdata_2.sno = modifidroutssubtab.BranchID LEFT OUTER JOIN indents_subtable INNER JOIN (SELECT  IndentNo, I_date, Branch_id FROM  indents WHERE  (I_date BETWEEN @starttime AND @endtime)) indt ON indents_subtable.IndentNo = indt.IndentNo ON  modifidroutssubtab.BranchID = indt.Branch_id INNER JOIN tripdata ON tripdata.Sno = indents_subtable.DTripId INNER JOIN empmanage ON tripdata.EmpId = empmanage.Sno WHERE  (branchdata.SalesType IS NOT NULL) AND (indents_subtable.DeliveryQty <> 0) AND (modifiedroutes.sno = @Route_ID)  GROUP BY SalesTypeId ORDER BY SalesTypeId, branchdata_2.RouteID");
            cmd.Parameters.AddWithValue("@Route_ID", Route_Id);
            cmd.Parameters.AddWithValue("@starttime", GetLowDate(lastmonthfrom));
            cmd.Parameters.AddWithValue("@endtime", GetHighDate(lastmonthto));
            dtLastMonthroutesale = vdbmngr.SelectQuery(cmd).Tables[0];

            DataTable dtLastYearroutesale = new DataTable();

            //(branchdata.sno IN ('174', '527', '4607'))
            cmd = new MySqlCommand("SELECT  modifiedroutes.RouteName, SUM(indents_subtable.DeliveryQty) AS saleQty, SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost) AS salevalue, modifiedroutes.Sno AS routeid, modifidroutssubtab.BranchID AS bid, branchdata_2.BranchName, branchdata_2.flag, branchdata_1.sno As SuperBranch,  branchdata_2.SalesType AS SalesTypeId, empmanage.EmpName, branchdata_2.SalesRepresentative FROM  branchdata branchdata_2 RIGHT OUTER JOIN branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT   RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo ON  branchdata_2.sno = modifidroutssubtab.BranchID LEFT OUTER JOIN indents_subtable INNER JOIN (SELECT  IndentNo, I_date, Branch_id FROM  indents WHERE  (I_date BETWEEN @starttime AND @endtime)) indt ON indents_subtable.IndentNo = indt.IndentNo ON  modifidroutssubtab.BranchID = indt.Branch_id INNER JOIN tripdata ON tripdata.Sno = indents_subtable.DTripId INNER JOIN empmanage ON tripdata.EmpId = empmanage.Sno WHERE  (branchdata.SalesType IS NOT NULL) AND (indents_subtable.DeliveryQty <> 0) AND (modifiedroutes.sno = @Route_ID)  GROUP BY SalesTypeId ORDER BY SalesTypeId, branchdata_2.RouteID");
            cmd.Parameters.AddWithValue("@Route_ID", Route_Id);
            cmd.Parameters.AddWithValue("@starttime", GetLowDate(LastYearFromDate));
            cmd.Parameters.AddWithValue("@endtime", GetHighDate(LastYearToDate));
            dtLastYearroutesale = vdbmngr.SelectQuery(cmd).Tables[0];


            cmd = new MySqlCommand("SELECT  sno, salestype, flag, UserData_sno, status, rank, club_code FROM salestypemanagement where (status = 1) ORDER BY salestype DESC");
            //cmd.Parameters.AddWithValue("@BranchID", BranchID);
            //DataTable dtsalestype = vdbmngr.SelectQuery(cmd).Tables[0];
            //cmd = new MySqlCommand("SELECT Sno, RouteName, RouteLevel, UserID, BranchID, CDate, EDate, flag FROM modifiedroutes");

            DataTable dtsalestype = vdbmngr.SelectQuery(cmd).Tables[0];

            DataTable dtAll = new DataTable();
            dtAll.Merge(dtyesterdayroutesale);
            dtAll.Merge(dtLastweakroutesale);
            dtAll.Merge(dtLastMonthroutesale);
            dtAll.Merge(dtLastYearroutesale);
            DataView view = new DataView(dtAll);
            DataTable distincttable = view.ToTable(true, "SalesTypeId", "routeid");
            DataTable DayReport = new DataTable();
            DataTable lastweakReport = new DataTable();
            DataTable LastMonthReport = new DataTable();
            DataTable LastYearReport = new DataTable();
            DataTable MainReport = new DataTable();

            MainReport.Columns.Add("RouteName");
            MainReport.Columns.Add("SalestypeId");
            MainReport.Columns.Add("routeid");
            MainReport.Columns.Add("Yester Day").DataType = typeof(Double);
            MainReport.Columns.Add("Yester Day %").DataType = typeof(Double);
            MainReport.Columns.Add("Ysign");
            MainReport.Columns.Add("Last Week").DataType = typeof(Double);
            MainReport.Columns.Add("Last Week %").DataType = typeof(Double);
            MainReport.Columns.Add("Wsign");

            MainReport.Columns.Add("Last Month").DataType = typeof(Double);
            MainReport.Columns.Add("Last Month %").DataType = typeof(Double);
            MainReport.Columns.Add("Msign");
            MainReport.Columns.Add("Last Year").DataType = typeof(Double);
            MainReport.Columns.Add("Last Year %").DataType = typeof(Double);
            MainReport.Columns.Add("Yesign");


            DataTable dtm = new DataTable();
            dtm.Columns.Add("RouteName");
            dtm.Columns.Add("SalestypeId");
            dtm.Columns.Add("Yester Day");
            dtm.Columns.Add("Yester Day %");
            dtm.Columns.Add("Ysign");
            dtm.Columns.Add("Last Week");
            dtm.Columns.Add("Last Week %");
            dtm.Columns.Add("Wsign");

            dtm.Columns.Add("Last Month");
            dtm.Columns.Add("Last Month %");
            dtm.Columns.Add("Msign");
            dtm.Columns.Add("Last Year");
            dtm.Columns.Add("Last Year %");
            dtm.Columns.Add("Yesign");

            string cate = ddlbarnchCategory.SelectedItem.Value;
            double yesterdaysum = 0;
            double lastweaksum = 0;
            double lastmonthsum = 0;
            double lastyearsum = 0;
            if (cate == "BranchWiseCollections")
            {
                yesterdaysum = Convert.ToDouble(dtyesterdayroutesale.Compute("SUM(salevalue)", "routeid=" + Route_Id + ""));
                lastweaksum = Convert.ToDouble(dtLastweakroutesale.Compute("SUM(salevalue)", "routeid=" + Route_Id + ""));
                lastmonthsum = Convert.ToDouble(dtLastMonthroutesale.Compute("SUM(salevalue)", "routeid=" + Route_Id + ""));
                lastyearsum = Convert.ToDouble(dtLastYearroutesale.Compute("SUM(salevalue)", "routeid=" + Route_Id + ""));
            }
            else
            {
                yesterdaysum = Convert.ToDouble(dtyesterdayroutesale.Compute("SUM(saleQty)", "routeid=" + Route_Id + ""));
                lastweaksum = Convert.ToDouble(dtLastweakroutesale.Compute("SUM(saleQty)", "routeid=" + Route_Id + ""));
                lastmonthsum = Convert.ToDouble(dtLastMonthroutesale.Compute("SUM(saleQty)", "routeid=" + Route_Id + ""));
                lastyearsum = Convert.ToDouble(dtLastYearroutesale.Compute("SUM(saleQty)", "routeid=" + Route_Id + ""));
            }
            foreach (DataRow dr in distincttable.Rows)
            {
                DataRow newrow = MainReport.NewRow();
                string SalestypeId = dr["SalesTypeId"].ToString();
                foreach (DataRow drsalestype in dtsalestype.Select("sno='" + SalestypeId + "'"))
                {
                    string Salestype = drsalestype["salestype"].ToString();
                    double compare = 0;
                    //newrow["SalesType"] = Salestype;
                    double daytotal = 0; double weaktotal = 0;
                    double monthtotal = 0; double yeartotal = 0;
                    double diffpercentage = 0;
                    foreach (DataRow dramount in dtyesterdayroutesale.Select("SalesTypeId='" + SalestypeId + "'"))
                    {
                        if (cate == "BranchWiseCollections")
                        {
                            float amount = 0;
                            float.TryParse(dramount["salevalue"].ToString(), out amount);
                            daytotal += amount;
                            newrow["Yester Day"] = Math.Round(daytotal); ;
                            double Avgqty = amount / 2;
                            // newrow["Yester Day Avg"] = Math.Round(Avgqty );
                            //newrow["Branchid"] = dramount["BranchID"].ToString();
                            newrow["SalestypeId"] = SalestypeId;
                            newrow["RouteName"] = Salestype;
                            newrow["routeid"] = dramount["routeid"].ToString();
                            double temp = 0;
                            double Percentage = 0; double tempPercentage = 0;
                            double.TryParse(dramount["salevalue"].ToString(), out temp);
                            tempPercentage = (temp / yesterdaysum) * 100;
                            Percentage = Math.Round(tempPercentage);
                            newrow["Yester Day %"] = Percentage;
                            compare = Percentage;
                            diffpercentage = Percentage;
                        }
                        else
                        {
                            float amount = 0;
                            float.TryParse(dramount["saleQty"].ToString(), out amount);
                            daytotal += amount;
                            newrow["Yester Day"] = Math.Round(daytotal); ;
                            double Avgqty = amount / 2;
                            // newrow["Yester Day Avg"] = Math.Round(Avgqty );
                            //newrow["Branchid"] = dramount["BranchID"].ToString();
                            newrow["SalestypeId"] = SalestypeId;
                            newrow["RouteName"] = Salestype;
                            newrow["routeid"] = dramount["routeid"].ToString();
                            double temp = 0;
                            double Percentage = 0; double tempPercentage = 0;
                            double.TryParse(dramount["saleQty"].ToString(), out temp);
                            tempPercentage = (temp / yesterdaysum) * 100;
                            Percentage = Math.Round(tempPercentage);
                            newrow["Yester Day %"] = Percentage;
                            compare = Percentage;
                            diffpercentage = Percentage;
                        }
                        //yesterdaygrandtotal += amount;
                    }
                    foreach (DataRow dramount in dtLastweakroutesale.Select("SalesTypeId='" + SalestypeId + "'"))
                    {
                        if (cate == "BranchWiseCollections")
                        {
                            float amount = 0;
                            float.TryParse(dramount["salevalue"].ToString(), out amount);
                            weaktotal += amount;
                            newrow["Last Week"] = Math.Round(weaktotal);
                            double Avgqty = amount / 2;
                            // newrow["Last Week Avg"] = Math.Round(Avgqty );
                            // newrow["Branchid"] = dramount["BranchID"].ToString();
                            newrow["SalestypeId"] = SalestypeId;
                            newrow["RouteName"] = Salestype;
                            newrow["routeid"] = dramount["routeid"].ToString();
                            double temp = 0;
                            double Percentage = 0; double tempPercentage = 0;
                            double.TryParse(dramount["salevalue"].ToString(), out temp);
                            tempPercentage = (temp / lastweaksum) * 100;
                            Percentage = Math.Round(tempPercentage);
                            if (diffpercentage > Percentage)
                            {
                                newrow["Last Week %"] = Math.Round(diffpercentage - Percentage);
                                newrow["Wsign"] = "+";
                            }
                            else
                            {
                                newrow["Last Week %"] = Math.Round(diffpercentage - Percentage);
                                newrow["Wsign"] = "-";
                            }
                        }
                        else
                        {
                            float amount = 0;
                            float.TryParse(dramount["saleQty"].ToString(), out amount);
                            weaktotal += amount;
                            newrow["Last Week"] = Math.Round(weaktotal);

                            double Avgqty = amount / 2;
                            // newrow["Last Week Avg"] = Math.Round(Avgqty );
                            // newrow["Branchid"] = dramount["BranchID"].ToString();
                            newrow["SalestypeId"] = SalestypeId;
                            newrow["RouteName"] = Salestype;
                            newrow["routeid"] = dramount["routeid"].ToString();
                            double temp = 0;
                            double Percentage = 0; double tempPercentage = 0;
                            double.TryParse(dramount["saleQty"].ToString(), out temp);
                            tempPercentage = (temp / lastweaksum) * 100;
                            Percentage = Math.Round(tempPercentage);
                            if (diffpercentage > Percentage)
                            {
                                newrow["Last Week %"] = Math.Round(diffpercentage - Percentage);
                                newrow["Wsign"] = "+";
                            }
                            else
                            {
                                newrow["Last Week %"] = Math.Round(diffpercentage - Percentage);
                                newrow["Wsign"] = "-";
                            }
                        }
                        //lastweekgrandtotal += amount;
                    }
                    foreach (DataRow dramount in dtLastMonthroutesale.Select("SalesTypeId='" + SalestypeId + "'"))
                    {
                        if (cate == "BranchWiseCollections")
                        {
                            float amount = 0;
                            float.TryParse(dramount["salevalue"].ToString(), out amount);
                            monthtotal += amount;
                            newrow["Last Month"] = Math.Round(monthtotal); ;
                            double Avgqty = amount / 2;
                            //newrow["Last Month Avg"] = Math.Round(Avgqty );
                            //newrow["Branchid"] = dramount["BranchID"].ToString();
                            newrow["SalestypeId"] = SalestypeId;
                            newrow["RouteName"] = Salestype;
                            newrow["routeid"] = dramount["routeid"].ToString();
                            double temp = 0;
                            double Percentage = 0; double tempPercentage = 0;
                            double.TryParse(dramount["salevalue"].ToString(), out temp);
                            tempPercentage = (temp / lastmonthsum) * 100;
                            Percentage = Math.Round(tempPercentage);
                            if (diffpercentage > Percentage)
                            {
                                newrow["Last Month %"] = Math.Round(diffpercentage - Percentage);
                                newrow["Msign"] = "+";
                            }
                            else
                            {
                                newrow["Last Month %"] = Math.Round(diffpercentage - Percentage);
                                newrow["Msign"] = "-";
                            }
                        }
                        else
                        {
                            float amount = 0;
                            float.TryParse(dramount["saleQty"].ToString(), out amount);
                            monthtotal += amount;
                            newrow["Last Month"] = Math.Round(monthtotal); ;
                            double Avgqty = amount / 2;
                            //newrow["Last Month Avg"] = Math.Round(Avgqty );
                            //newrow["Branchid"] = dramount["BranchID"].ToString();
                            newrow["SalestypeId"] = SalestypeId;
                            newrow["RouteName"] = Salestype;
                            newrow["routeid"] = dramount["routeid"].ToString();
                            double temp = 0;
                            double Percentage = 0; double tempPercentage = 0;
                            double.TryParse(dramount["saleQty"].ToString(), out temp);
                            tempPercentage = (temp / lastmonthsum) * 100;
                            Percentage = Math.Round(tempPercentage);
                            if (diffpercentage > Percentage)
                            {
                                newrow["Last Month %"] = Math.Round(diffpercentage - Percentage);
                                newrow["Msign"] = "+";
                            }
                            else
                            {
                                newrow["Last Month %"] = Math.Round(diffpercentage - Percentage);
                                newrow["Msign"] = "-";
                            }
                        }
                        //lastmonthgrandtotal += amount;
                    }
                    foreach (DataRow dramount in dtLastYearroutesale.Select("SalesTypeId='" + SalestypeId + "'"))
                    {
                        if (cate == "BranchWiseCollections")
                        {
                            float amount = 0;
                            float.TryParse(dramount["salevalue"].ToString(), out amount);
                            yeartotal += amount;
                            newrow["Last Year"] = Math.Round(yeartotal); ;
                            double Avgqty = amount / 2;
                            // newrow["Last Year Avg"] = Math.Round(Avgqty );
                            //newrow["Branchid"] = dramount["BranchID"].ToString();
                            newrow["SalestypeId"] = SalestypeId;
                            newrow["RouteName"] = Salestype;
                            newrow["routeid"] = dramount["routeid"].ToString();
                            double temp = 0;
                            double Percentage = 0; double tempPercentage = 0;
                            double.TryParse(dramount["salevalue"].ToString(), out temp);
                            tempPercentage = (temp / lastyearsum) * 100;
                            Percentage = Math.Round(tempPercentage);
                            // lastyeargrandtotal += amount;
                            if (diffpercentage > Percentage)
                            {
                                newrow["Last Year %"] = Math.Round(diffpercentage - Percentage);
                                newrow["Yesign"] = "+";
                            }
                            else
                            {
                                newrow["Last Year %"] = Math.Round(diffpercentage - Percentage);
                                newrow["Yesign"] = "-";
                            }
                        }
                        else
                        {
                            float amount = 0;
                            float.TryParse(dramount["saleQty"].ToString(), out amount);
                            yeartotal += amount;
                            newrow["Last Year"] = Math.Round(yeartotal); ;
                            double Avgqty = amount / 2;
                            // newrow["Last Year Avg"] = Math.Round(Avgqty );
                            //newrow["Branchid"] = dramount["BranchID"].ToString();
                            newrow["SalestypeId"] = SalestypeId;
                            newrow["RouteName"] = Salestype;
                            newrow["routeid"] = dramount["routeid"].ToString();
                            double temp = 0;
                            double Percentage = 0; double tempPercentage = 0;
                            double.TryParse(dramount["saleQty"].ToString(), out temp);
                            tempPercentage = (temp / lastyearsum) * 100;
                            Percentage = Math.Round(tempPercentage);
                            if (diffpercentage > Percentage)
                            {
                                newrow["Last Year %"] = Math.Round(diffpercentage - Percentage);
                                newrow["Yesign"] = "+";
                            }
                            else
                            {
                                newrow["Last Year %"] = Math.Round(diffpercentage - Percentage);
                                newrow["Yesign"] = "-";
                            }
                        }
                    }
                    MainReport.Rows.Add(newrow);
                }
            }
            if (MainReport.Rows.Count > 0)
            {
                foreach (DataRow drM in MainReport.Select("routeid='" + Route_Id + "'"))
                {
                    DataRow newrow = dtm.NewRow();
                    newrow["SalestypeId"] = drM["SalestypeId"].ToString();
                    newrow["RouteName"] = drM["RouteName"].ToString();
                    newrow["Yester Day"] = drM["Yester Day"].ToString();
                    newrow["Yester Day %"] = drM["Yester Day %"].ToString();
                    newrow["Ysign"] = drM["Ysign"].ToString();
                    newrow["Last Week"] = drM["Last Week"].ToString();
                    newrow["Last Week %"] = drM["Last Week %"].ToString();
                    newrow["Wsign"] = drM["Wsign"].ToString();
                    newrow["Last Month"] = drM["Last Month"].ToString();
                    newrow["Last Month %"] = drM["Last Month %"].ToString();
                    newrow["Msign"] = drM["Msign"].ToString();
                    newrow["Last Year"] = drM["Last Year"].ToString();
                    newrow["Last Year %"] = drM["Last Year %"].ToString();
                    newrow["Yesign"] = drM["Yesign"].ToString();
                    dtm.Rows.Add(newrow);
                }
            }
            DataRow newrow2 = MainReport.NewRow();
            newrow2["RouteName"] = "Total";
            newrow2["Yester Day"] = Math.Round(yesterdaysum);//yesterdaysum;
            newrow2["Last Week"] = Math.Round(lastweaksum); ;
            newrow2["Last Month"] = Math.Round(lastmonthsum); ;
            newrow2["Last Year"] = Math.Round(lastyearsum); ;
            MainReport.Rows.Add(newrow2);
            grdRouteUnderSalesType.DataSource = MainReport;
            grdRouteUnderSalesType.DataBind();
        }
        catch (Exception ex)
        {
        }
    }
    protected void grdRouteReport_RowCommand(object sender, GridViewCommandEventArgs e)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            int rowIndex = Convert.ToInt32(e.CommandArgument);
            GridViewRow row = grdRouteReport.Rows[rowIndex];
            string route = row.Cells[2].Text;
            string BranchID = Session["ClickBranchid"].ToString();


            string SalesTypeName = row.Cells[1].Text;
            Session["SalesTypeName"] = SalesTypeName;//SalesTypeid;
            Session["SalesTypeId"] = route;//SalesTypeid;
            Session["ClickBranchid"] = BranchID;
            Session["Clickrouteid"] = route;
            string SectedDataType = ddlDayType.SelectedItem.Value;
            string s = Session["IndDate"].ToString();
            var dt = DateTime.ParseExact(s, "ddd MMM dd yyyy HH:mm:ss 'GMT'zzz", System.Globalization.CultureInfo.InvariantCulture);
            string IndDate = dt.ToString("yyyy-MM-dd");
            DateTime ServerDateCurrentdate = Convert.ToDateTime(IndDate);
            DateTime FromDate = ServerDateCurrentdate;
            string edate = Session["Todate"].ToString();
            var edt = DateTime.ParseExact(edate, "ddd MMM dd yyyy HH:mm:ss 'GMT'zzz", System.Globalization.CultureInfo.InvariantCulture);
            string Tdate = edt.ToString("yyyy-MM-dd");
            DateTime To_Date = Convert.ToDateTime(Tdate);
            DateTime ToDate = To_Date;
            // div_MainPlantComparison.Style.Add("display", "block");
            divHide1.Style.Add("display", "block");
            divnewroute.Style.Add("display", "block");


            string Datatype = "";

            int Ndays = (FromDate - ToDate).Days;
            int countdays = Ndays + 1;

            if (countdays <= 7)
            {
                Datatype = "Monthly";
            }
            else if (countdays <= 30 || countdays <= 8)
            {
                Datatype = "Week";
            }
            else if (countdays == 364 || countdays >= 364)
            {
                Datatype = "Year";
            }
            else
            {
                Datatype = "Monthly";
            }
            DateTime lastmonthfrom = new DateTime();
            DateTime lastmonthto = new DateTime();
            DateTime YearServerDate_Currentdate = Convert.ToDateTime(IndDate);
            DateTime LastYearFromDate = YearServerDate_Currentdate;
            DateTime YearServerDate_Todate = Convert.ToDateTime(Tdate);
            DateTime LastYearToDate = YearServerDate_Todate;
            lastmonthfrom = FromDate.AddMonths(-1);
            lastmonthto = ToDate.AddMonths(-1);
            LastYearFromDate = LastYearFromDate.AddYears(-1);
            LastYearToDate = LastYearToDate.AddYears(-1);
            DataTable Dt_PresentWeak = new DataTable();
            DataTable dtSub_LastWeekData = new DataTable();
            DataTable dtPresentAllMonth = new DataTable();
            DataTable dtLastYearAllMonth = new DataTable();
            DataTable Dt_PresentMonthSale = new DataTable();
            DataTable Dt_PresentMonthAmount = new DataTable();
            DataTable dtSub_lastMonthSale = new DataTable();
            DataTable dtSub_lastMonthAmount = new DataTable();
            DataTable dtSub_lastYearSales = new DataTable();
            DataTable dtSub_lastYearAmount = new DataTable();
            string SalesType = Session["salestype"].ToString();
            DataTable dtALL = new DataTable();
            if (Datatype == "Monthly")
            {
                #region
                if (SectedDataType == "Day")
                {
                    string val = ViewState["Val"].ToString();
                    if (val == "btnclick")
                    {

                        cmd = new MySqlCommand("SELECT  modifiedroutes.RouteName, SUM(indents_subtable.DeliveryQty) AS saleQty, SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost) AS salevalue, modifiedroutes.Sno AS routeid, modifidroutssubtab.BranchID AS bid, branchdata_2.BranchName, branchdata_2.flag, branchdata_1.sno As SuperBranch,  branchdata_2.SalesType AS SalesTypeId, empmanage.EmpName, branchdata_2.SalesRepresentative FROM  branchdata branchdata_2 RIGHT OUTER JOIN branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT   RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo ON  branchdata_2.sno = modifidroutssubtab.BranchID LEFT OUTER JOIN indents_subtable INNER JOIN (SELECT  IndentNo, I_date, Branch_id FROM  indents WHERE  (I_date BETWEEN @starttime AND @endtime)) indt ON indents_subtable.IndentNo = indt.IndentNo ON  modifidroutssubtab.BranchID = indt.Branch_id INNER JOIN tripdata ON tripdata.Sno = indents_subtable.DTripId INNER JOIN empmanage ON tripdata.EmpId = empmanage.Sno WHERE  (branchdata.SalesType IS NOT NULL) AND (indents_subtable.DeliveryQty <> 0) AND (modifiedroutes.BranchID = @BranchID) AND (branchdata_2.SalesType = @SalesTypeId) GROUP BY modifiedroutes.Sno ORDER BY SalesTypeId, branchdata_2.RouteID");
                        cmd.Parameters.AddWithValue("@BranchID", BranchID);
                        cmd.Parameters.AddWithValue("@SalesTypeId", route);
                        cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate.AddDays(-1)));
                        cmd.Parameters.AddWithValue("@endtime", GetHighDate(ToDate.AddDays(-1)));
                        DataTable dtyesterdayroutesale = vdbmngr.SelectQuery(cmd).Tables[0];


                        //cmd = new MySqlCommand("SELECT   modifiedroutes.Branchid As SuperBranch,modifiedroutes.RouteName, ROUND(SUM(indents_subtable.DeliveryQty),2) AS saleQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost) AS salevalue, modifiedroutes.Sno AS routeid, modifidroutssubtab.BranchID AS bid, branchdata_2.BranchName, branchdata_2.flag, branchdata_1.sno AS BranchID, branchdata_2.SalesType AS SalesTypeId FROM branchdata branchdata_2 RIGHT OUTER JOIN branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT  RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo ON  branchdata_2.sno = modifidroutssubtab.BranchID LEFT OUTER JOIN indents_subtable INNER JOIN (SELECT  IndentNo, I_date, Branch_id FROM   indents WHERE  (I_date BETWEEN @starttime AND @endtime)) indt ON indents_subtable.IndentNo = indt.IndentNo ON  modifidroutssubtab.BranchID = indt.Branch_id WHERE   (branchdata.SalesType IS NOT NULL) AND (indents_subtable.DeliveryQty <> 0) AND (branchdata.sno = @BranchID) GROUP BY SalesTypeId ORDER BY  SalesTypeId");
                        //cmd.Parameters.AddWithValue("@SOID", BranchID);
                        //cmd.Parameters.AddWithValue("@BranchID", BranchID);
                        //cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate.AddDays(-2)));
                        //cmd.Parameters.AddWithValue("@endtime", GetHighDate(ToDate.AddDays(-2)));
                        //DataTable dtyesterdayroutesale = vdbmngr.SelectQuery(cmd).Tables[0];

                        cmd = new MySqlCommand("SELECT   modifiedroutes.Branchid As SuperBranch,branchdata.BranchName, branchdata.sno, modifiedroutes.RouteName, modifidroutssubtab.BranchID, modifiedroutes.Sno AS routeid, SUM(colltion.AmountPaid) AS AmountPaid FROM  branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT RefNo, Rank, LevelType, BranchID, CDate, EDate FROM   modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo INNER JOIN (SELECT  Branchid, AmountPaid, PaidDate FROM   collections WHERE  (PaymentType <> 'Cheque') AND (PaidDate BETWEEN @d1 AND @d2)) colltion ON modifidroutssubtab.BranchID = colltion.Branchid WHERE (branchdata.SalesType IS NOT NULL) AND (branchdata.sno = @BranchID) GROUP BY modifidroutssubtab.BranchID ORDER BY branchdata.sno");
                        cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate.AddDays(-1)));
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-1));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-1));
                        cmd.Parameters.AddWithValue("@SOID", BranchID);
                        cmd.Parameters.AddWithValue("@BranchID", BranchID);
                        DataTable dtyesterdaypaidamount = vdbmngr.SelectQuery(cmd).Tables[0];
                        //cmd = new MySqlCommand("SELECT  sno, salestype, flag, UserData_sno, status, rank, club_code FROM salestypemanagement where (status = 1) ORDER BY salestype DESC");
                        //cmd.Parameters.AddWithValue("@BranchID", BranchID);
                        //DataTable dtsalestype = vdbmngr.SelectQuery(cmd).Tables[0];
                        cmd = new MySqlCommand("SELECT Sno, RouteName, RouteLevel, UserID, BranchID, CDate, EDate, flag FROM modifiedroutes");
                        cmd.Parameters.AddWithValue("@BranchID", BranchID);
                        DataTable dtsalestype = vdbmngr.SelectQuery(cmd).Tables[0];
                        DataTable dtAll = new DataTable();
                        dtAll.Merge(dtyesterdayroutesale);
                        DataView view = new DataView(dtAll);
                        DataTable distincttable = view.ToTable(true, "SalesTypeId", "routeid");
                        DataTable DayReport = new DataTable();
                        DataTable lastweakReport = new DataTable();
                        DataTable LastMonthReport = new DataTable();
                        DataTable LastYearReport = new DataTable();
                        DataTable MainReport = new DataTable();

                        MainReport.Columns.Add("RouteName");
                        MainReport.Columns.Add("SalestypeId");
                        MainReport.Columns.Add("routeid");
                        MainReport.Columns.Add("AvgRate");
                        MainReport.Columns.Add("SaleQty");
                        MainReport.Columns.Add("SaleValue");

                        DataTable dtm = new DataTable();
                        dtm.Columns.Add("RouteName");
                        dtm.Columns.Add("SalestypeId");
                        dtm.Columns.Add("AvgRate");
                        dtm.Columns.Add("SaleQty");
                        dtm.Columns.Add("SaleValue");

                        double yesterdaysum = Convert.ToDouble(dtyesterdayroutesale.Compute("SUM(saleQty)", "SuperBranch=" + BranchID + ""));
                        double yesterdayvaluesum = Convert.ToDouble(dtyesterdayroutesale.Compute("SUM(salevalue)", "SuperBranch=" + BranchID + ""));
                        foreach (DataRow dr in distincttable.Rows)
                        {
                            DataRow newrow = MainReport.NewRow();

                            string SalestypeId = dr["routeid"].ToString();
                            foreach (DataRow drsalestype in dtsalestype.Select("sno='" + SalestypeId + "'"))
                            {
                                string Salestype = drsalestype["RouteName"].ToString();
                                double compare = 0;
                                //newrow["SalesType"] = Salestype;
                                double daytotal = 0; double weaktotal = 0;
                                double monthtotal = 0; double yeartotal = 0;
                                foreach (DataRow dramount in dtyesterdayroutesale.Select("routeid='" + SalestypeId + "'"))
                                {
                                    float amount = 0;
                                    float.TryParse(dramount["saleQty"].ToString(), out amount);
                                    daytotal += amount;
                                    double qtypercentage = 0; double valuepercentage = 0;
                                    qtypercentage = (amount / yesterdaysum) * 100;
                                    newrow["SaleQty"] = Math.Round(daytotal) + "(" + Math.Round(qtypercentage, 0) + "%)";
                                   
                                    newrow["SalestypeId"] = SalestypeId;
                                    newrow["RouteName"] = Salestype;
                                    newrow["routeid"] = dramount["routeid"].ToString();
                                    double temp = 0;
                                    float salevalue = 0;
                                    float.TryParse(dramount["salevalue"].ToString(), out salevalue);
                                    valuepercentage = (Math.Round(salevalue, 2) / yesterdayvaluesum) * 100;
                                    newrow["SaleValue"] = Math.Round(salevalue, 2) + "(" + Math.Round(valuepercentage, 0) + "%)"; ;
                                    double AvgRate = salevalue / amount;
                                    // newrow["Yester Day Avg"] = Math.Round(Avgqty );
                                    newrow["AvgRate"] = Math.Round(AvgRate);
                                    compare = salevalue;
                                    //yesterdaygrandtotal += amount;
                                }
                                MainReport.Rows.Add(newrow);
                            }
                        }

                        if (MainReport.Rows.Count > 0)
                        {
                            foreach (DataRow drM in MainReport.Select("routeid='" + BranchID + "'"))
                            {
                                DataRow newrow = dtm.NewRow();
                                newrow["SalestypeId"] = drM["SalestypeId"].ToString();
                                newrow["RouteName"] = drM["RouteName"].ToString();
                                newrow["SaleQty"] = drM["SaleQty"].ToString();
                                newrow["AvgRate"] = drM["AvgRate"].ToString();
                                newrow["SaleValue"] = drM["SaleValue"].ToString();
                                dtm.Rows.Add(newrow);
                            }
                        }
                        DataRow newrow2 = MainReport.NewRow();
                        newrow2["RouteName"] = "Total";
                        newrow2["SaleQty"] = Math.Round(yesterdaysum);//yesterdaysum;
                        newrow2["SaleValue"] = Math.Round(yesterdayvaluesum); ;
                        double Avg_Rate = yesterdayvaluesum / yesterdaysum;//yesterdayvaluesum;
                        newrow2["AvgRate"] = Math.Round(Avg_Rate);
                        MainReport.Rows.Add(newrow2);
                        grdnewroute.DataSource = MainReport;
                        grdnewroute.DataBind();
                    }
                    else
                    {
                        DataTable dtyesterdayroutesale = new DataTable();
                        if (BranchID == "174")
                        {
                            // IN ('174', '527', '4607'))
                            cmd = new MySqlCommand("SELECT  modifiedroutes.RouteName, SUM(indents_subtable.DeliveryQty) AS saleQty, SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost) AS salevalue, modifiedroutes.Sno AS routeid, modifidroutssubtab.BranchID AS bid, branchdata_2.BranchName, branchdata_2.flag, branchdata_1.sno As SuperBranch,  branchdata_2.SalesType AS SalesTypeId, empmanage.EmpName, branchdata_2.SalesRepresentative FROM  branchdata branchdata_2 RIGHT OUTER JOIN branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT   RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo ON  branchdata_2.sno = modifidroutssubtab.BranchID LEFT OUTER JOIN indents_subtable INNER JOIN (SELECT  IndentNo, I_date, Branch_id FROM  indents WHERE  (I_date BETWEEN @starttime AND @endtime)) indt ON indents_subtable.IndentNo = indt.IndentNo ON  modifidroutssubtab.BranchID = indt.Branch_id INNER JOIN tripdata ON tripdata.Sno = indents_subtable.DTripId INNER JOIN empmanage ON tripdata.EmpId = empmanage.Sno WHERE  (branchdata.SalesType IS NOT NULL) AND (indents_subtable.DeliveryQty <> 0) AND (modifiedroutes.BranchID IN ('174', '527', '4607')) AND (branchdata_2.SalesType = @SalesTypeId) GROUP BY modifiedroutes.Sno ORDER BY SalesTypeId, branchdata_2.RouteID");
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            cmd.Parameters.AddWithValue("@SalesTypeId", route);
                            cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate.AddDays(-1)));
                            cmd.Parameters.AddWithValue("@endtime", GetHighDate(ToDate.AddDays(-1)));
                            dtyesterdayroutesale = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else
                        {
                            cmd = new MySqlCommand("SELECT  modifiedroutes.RouteName, SUM(indents_subtable.DeliveryQty) AS saleQty, SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost) AS salevalue, modifiedroutes.Sno AS routeid, modifidroutssubtab.BranchID AS bid, branchdata_2.BranchName, branchdata_2.flag, branchdata_1.sno As SuperBranch,  branchdata_2.SalesType AS SalesTypeId, empmanage.EmpName, branchdata_2.SalesRepresentative FROM  branchdata branchdata_2 RIGHT OUTER JOIN branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT   RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo ON  branchdata_2.sno = modifidroutssubtab.BranchID LEFT OUTER JOIN indents_subtable INNER JOIN (SELECT  IndentNo, I_date, Branch_id FROM  indents WHERE  (I_date BETWEEN @starttime AND @endtime)) indt ON indents_subtable.IndentNo = indt.IndentNo ON  modifidroutssubtab.BranchID = indt.Branch_id INNER JOIN tripdata ON tripdata.Sno = indents_subtable.DTripId INNER JOIN empmanage ON tripdata.EmpId = empmanage.Sno WHERE  (branchdata.SalesType IS NOT NULL) AND (indents_subtable.DeliveryQty <> 0) AND (modifiedroutes.BranchID = @BranchID) AND (branchdata_2.SalesType = @SalesTypeId) GROUP BY modifiedroutes.Sno ORDER BY SalesTypeId, branchdata_2.RouteID");
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            cmd.Parameters.AddWithValue("@SalesTypeId", route);
                            cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate.AddDays(-1)));
                            cmd.Parameters.AddWithValue("@endtime", GetHighDate(ToDate.AddDays(-1)));
                            dtyesterdayroutesale = vdbmngr.SelectQuery(cmd).Tables[0];
                        }


                        //cmd = new MySqlCommand("SELECT   modifiedroutes.Branchid As SuperBranch,modifiedroutes.RouteName, ROUND(SUM(indents_subtable.DeliveryQty),2) AS saleQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost) AS salevalue, modifiedroutes.Sno AS routeid, modifidroutssubtab.BranchID AS bid, branchdata_2.BranchName, branchdata_2.flag, branchdata_1.sno AS BranchID, branchdata_2.SalesType AS SalesTypeId FROM branchdata branchdata_2 RIGHT OUTER JOIN branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT  RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo ON  branchdata_2.sno = modifidroutssubtab.BranchID LEFT OUTER JOIN indents_subtable INNER JOIN (SELECT  IndentNo, I_date, Branch_id FROM   indents WHERE  (I_date BETWEEN @starttime AND @endtime)) indt ON indents_subtable.IndentNo = indt.IndentNo ON  modifidroutssubtab.BranchID = indt.Branch_id WHERE   (branchdata.SalesType IS NOT NULL) AND (indents_subtable.DeliveryQty <> 0) AND (branchdata.sno = @BranchID) GROUP BY SalesTypeId ORDER BY  SalesTypeId");
                        //cmd.Parameters.AddWithValue("@SOID", BranchID);
                        //cmd.Parameters.AddWithValue("@BranchID", BranchID);
                        //cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate.AddDays(-2)));
                        //cmd.Parameters.AddWithValue("@endtime", GetHighDate(ToDate.AddDays(-2)));
                        //DataTable dtyesterdayroutesale = vdbmngr.SelectQuery(cmd).Tables[0];
                        DataTable dtyesterdaypaidamount = new DataTable();
                        if (BranchID == "174")
                        {
                            cmd = new MySqlCommand("SELECT   modifiedroutes.Branchid As SuperBranch,branchdata.BranchName, branchdata.sno, modifiedroutes.RouteName, modifidroutssubtab.BranchID, modifiedroutes.Sno AS routeid, SUM(colltion.AmountPaid) AS AmountPaid FROM  branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT RefNo, Rank, LevelType, BranchID, CDate, EDate FROM   modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo INNER JOIN (SELECT  Branchid, AmountPaid, PaidDate FROM   collections WHERE  (PaymentType <> 'Cheque') AND (PaidDate BETWEEN @d1 AND @d2)) colltion ON modifidroutssubtab.BranchID = colltion.Branchid WHERE (branchdata.SalesType IS NOT NULL) AND (branchdata.sno IN ('174', '527', '4607')) GROUP BY modifidroutssubtab.BranchID ORDER BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate.AddDays(-1)));
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-1));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-1));
                            cmd.Parameters.AddWithValue("@SOID", BranchID);
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            dtyesterdaypaidamount = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else
                        {
                            cmd = new MySqlCommand("SELECT   modifiedroutes.Branchid As SuperBranch,branchdata.BranchName, branchdata.sno, modifiedroutes.RouteName, modifidroutssubtab.BranchID, modifiedroutes.Sno AS routeid, SUM(colltion.AmountPaid) AS AmountPaid FROM  branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT RefNo, Rank, LevelType, BranchID, CDate, EDate FROM   modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo INNER JOIN (SELECT  Branchid, AmountPaid, PaidDate FROM   collections WHERE  (PaymentType <> 'Cheque') AND (PaidDate BETWEEN @d1 AND @d2)) colltion ON modifidroutssubtab.BranchID = colltion.Branchid WHERE (branchdata.SalesType IS NOT NULL) AND (branchdata.sno = @BranchID) GROUP BY modifidroutssubtab.BranchID ORDER BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate.AddDays(-1)));
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-1));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-1));
                            cmd.Parameters.AddWithValue("@SOID", BranchID);
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            dtyesterdaypaidamount = vdbmngr.SelectQuery(cmd).Tables[0];
                        }

                        DataTable dtLastweakroutesale = new DataTable();
                        if (BranchID == "174")
                        {
                            cmd = new MySqlCommand("SELECT  modifiedroutes.RouteName, SUM(indents_subtable.DeliveryQty) AS saleQty, SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost) AS salevalue, modifiedroutes.Sno AS routeid, modifidroutssubtab.BranchID AS bid, branchdata_2.BranchName, branchdata_2.flag, branchdata_1.sno As SuperBranch,  branchdata_2.SalesType AS SalesTypeId, empmanage.EmpName, branchdata_2.SalesRepresentative FROM  branchdata branchdata_2 RIGHT OUTER JOIN branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT   RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo ON  branchdata_2.sno = modifidroutssubtab.BranchID LEFT OUTER JOIN indents_subtable INNER JOIN (SELECT  IndentNo, I_date, Branch_id FROM  indents WHERE  (I_date BETWEEN @starttime AND @endtime)) indt ON indents_subtable.IndentNo = indt.IndentNo ON  modifidroutssubtab.BranchID = indt.Branch_id INNER JOIN tripdata ON tripdata.Sno = indents_subtable.DTripId INNER JOIN empmanage ON tripdata.EmpId = empmanage.Sno WHERE  (branchdata.SalesType IS NOT NULL) AND (indents_subtable.DeliveryQty <> 0) AND (modifiedroutes.BranchID IN ('174', '527', '4607')) AND (branchdata_2.SalesType = @SalesTypeId) GROUP BY modifiedroutes.Sno ORDER BY SalesTypeId, branchdata_2.RouteID");
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            cmd.Parameters.AddWithValue("@SalesTypeId", route);
                            cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate.AddDays(-7)));
                            cmd.Parameters.AddWithValue("@endtime", GetHighDate(ToDate.AddDays(-7)));
                            dtLastweakroutesale = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else
                        {
                            cmd = new MySqlCommand("SELECT  modifiedroutes.RouteName, SUM(indents_subtable.DeliveryQty) AS saleQty, SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost) AS salevalue, modifiedroutes.Sno AS routeid, modifidroutssubtab.BranchID AS bid, branchdata_2.BranchName, branchdata_2.flag, branchdata_1.sno As SuperBranch,  branchdata_2.SalesType AS SalesTypeId, empmanage.EmpName, branchdata_2.SalesRepresentative FROM  branchdata branchdata_2 RIGHT OUTER JOIN branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT   RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo ON  branchdata_2.sno = modifidroutssubtab.BranchID LEFT OUTER JOIN indents_subtable INNER JOIN (SELECT  IndentNo, I_date, Branch_id FROM  indents WHERE  (I_date BETWEEN @starttime AND @endtime)) indt ON indents_subtable.IndentNo = indt.IndentNo ON  modifidroutssubtab.BranchID = indt.Branch_id INNER JOIN tripdata ON tripdata.Sno = indents_subtable.DTripId INNER JOIN empmanage ON tripdata.EmpId = empmanage.Sno WHERE  (branchdata.SalesType IS NOT NULL) AND (indents_subtable.DeliveryQty <> 0) AND (modifiedroutes.BranchID = @BranchID) AND (branchdata_2.SalesType = @SalesTypeId) GROUP BY modifiedroutes.Sno ORDER BY SalesTypeId, branchdata_2.RouteID");
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            cmd.Parameters.AddWithValue("@SalesTypeId", route);
                            cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate.AddDays(-7)));
                            cmd.Parameters.AddWithValue("@endtime", GetHighDate(ToDate.AddDays(-7)));
                            dtLastweakroutesale = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        DataTable dtLastWeakpaidamount = new DataTable();
                        if (BranchID == "174")
                        {
                            cmd = new MySqlCommand("SELECT   modifiedroutes.Branchid As SuperBranch,branchdata.BranchName, branchdata.sno, modifiedroutes.RouteName, modifidroutssubtab.BranchID, modifiedroutes.Sno AS routeid, SUM(colltion.AmountPaid) AS AmountPaid FROM  branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT RefNo, Rank, LevelType, BranchID, CDate, EDate FROM   modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo INNER JOIN (SELECT  Branchid, AmountPaid, PaidDate FROM   collections WHERE  (PaymentType <> 'Cheque') AND (PaidDate BETWEEN @d1 AND @d2)) colltion ON modifidroutssubtab.BranchID = colltion.Branchid WHERE (branchdata.SalesType IS NOT NULL) AND (branchdata.sno IN ('174', '527', '4607')) GROUP BY modifidroutssubtab.BranchID ORDER BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate.AddDays(-7)));
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-7));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-7));
                            cmd.Parameters.AddWithValue("@SOID", BranchID);
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            dtLastWeakpaidamount = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else
                        {
                            cmd = new MySqlCommand("SELECT   modifiedroutes.Branchid As SuperBranch,branchdata.BranchName, branchdata.sno, modifiedroutes.RouteName, modifidroutssubtab.BranchID, modifiedroutes.Sno AS routeid, SUM(colltion.AmountPaid) AS AmountPaid FROM  branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT RefNo, Rank, LevelType, BranchID, CDate, EDate FROM   modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo INNER JOIN (SELECT  Branchid, AmountPaid, PaidDate FROM   collections WHERE  (PaymentType <> 'Cheque') AND (PaidDate BETWEEN @d1 AND @d2)) colltion ON modifidroutssubtab.BranchID = colltion.Branchid WHERE (branchdata.SalesType IS NOT NULL) AND (branchdata.sno = @BranchID) GROUP BY modifidroutssubtab.BranchID ORDER BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate.AddDays(-7)));
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-7));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-7));
                            cmd.Parameters.AddWithValue("@SOID", BranchID);
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            dtLastWeakpaidamount = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        DataTable dtLastMonthroutesale = new DataTable();
                        if (BranchID == "174")
                        {
                            cmd = new MySqlCommand("SELECT  modifiedroutes.RouteName, SUM(indents_subtable.DeliveryQty) AS saleQty, SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost) AS salevalue, modifiedroutes.Sno AS routeid, modifidroutssubtab.BranchID AS bid, branchdata_2.BranchName, branchdata_2.flag, branchdata_1.sno As SuperBranch,  branchdata_2.SalesType AS SalesTypeId, empmanage.EmpName, branchdata_2.SalesRepresentative FROM  branchdata branchdata_2 RIGHT OUTER JOIN branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT   RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo ON  branchdata_2.sno = modifidroutssubtab.BranchID LEFT OUTER JOIN indents_subtable INNER JOIN (SELECT  IndentNo, I_date, Branch_id FROM  indents WHERE  (I_date BETWEEN @starttime AND @endtime)) indt ON indents_subtable.IndentNo = indt.IndentNo ON  modifidroutssubtab.BranchID = indt.Branch_id INNER JOIN tripdata ON tripdata.Sno = indents_subtable.DTripId INNER JOIN empmanage ON tripdata.EmpId = empmanage.Sno WHERE  (branchdata.SalesType IS NOT NULL) AND (indents_subtable.DeliveryQty <> 0) AND (modifiedroutes.BranchID IN ('174', '527', '4607')) AND (branchdata_2.SalesType = @SalesTypeId) GROUP BY modifiedroutes.Sno ORDER BY SalesTypeId, branchdata_2.RouteID");
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            cmd.Parameters.AddWithValue("@SalesTypeId", route);
                            cmd.Parameters.AddWithValue("@starttime", GetLowDate(lastmonthfrom));
                            cmd.Parameters.AddWithValue("@endtime", GetHighDate(lastmonthto));
                            dtLastMonthroutesale = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else
                        {
                            cmd = new MySqlCommand("SELECT  modifiedroutes.RouteName, SUM(indents_subtable.DeliveryQty) AS saleQty, SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost) AS salevalue, modifiedroutes.Sno AS routeid, modifidroutssubtab.BranchID AS bid, branchdata_2.BranchName, branchdata_2.flag, branchdata_1.sno As SuperBranch,  branchdata_2.SalesType AS SalesTypeId, empmanage.EmpName, branchdata_2.SalesRepresentative FROM  branchdata branchdata_2 RIGHT OUTER JOIN branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT   RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo ON  branchdata_2.sno = modifidroutssubtab.BranchID LEFT OUTER JOIN indents_subtable INNER JOIN (SELECT  IndentNo, I_date, Branch_id FROM  indents WHERE  (I_date BETWEEN @starttime AND @endtime)) indt ON indents_subtable.IndentNo = indt.IndentNo ON  modifidroutssubtab.BranchID = indt.Branch_id INNER JOIN tripdata ON tripdata.Sno = indents_subtable.DTripId INNER JOIN empmanage ON tripdata.EmpId = empmanage.Sno WHERE  (branchdata.SalesType IS NOT NULL) AND (indents_subtable.DeliveryQty <> 0) AND (modifiedroutes.BranchID = @BranchID) AND (branchdata_2.SalesType = @SalesTypeId) GROUP BY modifiedroutes.Sno ORDER BY SalesTypeId, branchdata_2.RouteID");
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            cmd.Parameters.AddWithValue("@SalesTypeId", route);
                            cmd.Parameters.AddWithValue("@starttime", GetLowDate(lastmonthfrom));
                            cmd.Parameters.AddWithValue("@endtime", GetHighDate(lastmonthto));
                            dtLastMonthroutesale = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        DataTable dtLastMonthpaidamount = new DataTable();
                        if (BranchID == "174")
                        {
                            //(branchdata.sno IN ('174', '527', '4607'))
                            cmd = new MySqlCommand("SELECT   modifiedroutes.Branchid As SuperBranch,branchdata.BranchName, branchdata.sno, modifiedroutes.RouteName, modifidroutssubtab.BranchID, modifiedroutes.Sno AS routeid, SUM(colltion.AmountPaid) AS AmountPaid FROM  branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT RefNo, Rank, LevelType, BranchID, CDate, EDate FROM   modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo INNER JOIN (SELECT  Branchid, AmountPaid, PaidDate FROM   collections WHERE  (PaymentType <> 'Cheque') AND (PaidDate BETWEEN @d1 AND @d2)) colltion ON modifidroutssubtab.BranchID = colltion.Branchid WHERE (branchdata.SalesType IS NOT NULL) AND (branchdata.sno IN ('174', '527', '4607')) GROUP BY modifidroutssubtab.BranchID ORDER BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@starttime", GetLowDate(lastmonthfrom));
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(lastmonthfrom));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(lastmonthto));
                            cmd.Parameters.AddWithValue("@SOID", BranchID);
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            dtLastMonthpaidamount = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else
                        {
                            cmd = new MySqlCommand("SELECT   modifiedroutes.Branchid As SuperBranch,branchdata.BranchName, branchdata.sno, modifiedroutes.RouteName, modifidroutssubtab.BranchID, modifiedroutes.Sno AS routeid, SUM(colltion.AmountPaid) AS AmountPaid FROM  branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT RefNo, Rank, LevelType, BranchID, CDate, EDate FROM   modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo INNER JOIN (SELECT  Branchid, AmountPaid, PaidDate FROM   collections WHERE  (PaymentType <> 'Cheque') AND (PaidDate BETWEEN @d1 AND @d2)) colltion ON modifidroutssubtab.BranchID = colltion.Branchid WHERE (branchdata.SalesType IS NOT NULL) AND (branchdata.sno = @BranchID) GROUP BY modifidroutssubtab.BranchID ORDER BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@starttime", GetLowDate(lastmonthfrom));
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(lastmonthfrom));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(lastmonthto));
                            cmd.Parameters.AddWithValue("@SOID", BranchID);
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            dtLastMonthpaidamount = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        DataTable dtLastYearroutesale = new DataTable();
                        if (BranchID == "174")
                        {
                            cmd = new MySqlCommand("SELECT  modifiedroutes.RouteName, SUM(indents_subtable.DeliveryQty) AS saleQty, SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost) AS salevalue, modifiedroutes.Sno AS routeid, modifidroutssubtab.BranchID AS bid, branchdata_2.BranchName, branchdata_2.flag, branchdata_1.sno As SuperBranch,  branchdata_2.SalesType AS SalesTypeId, empmanage.EmpName, branchdata_2.SalesRepresentative FROM  branchdata branchdata_2 RIGHT OUTER JOIN branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT   RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo ON  branchdata_2.sno = modifidroutssubtab.BranchID LEFT OUTER JOIN indents_subtable INNER JOIN (SELECT  IndentNo, I_date, Branch_id FROM  indents WHERE  (I_date BETWEEN @starttime AND @endtime)) indt ON indents_subtable.IndentNo = indt.IndentNo ON  modifidroutssubtab.BranchID = indt.Branch_id INNER JOIN tripdata ON tripdata.Sno = indents_subtable.DTripId INNER JOIN empmanage ON tripdata.EmpId = empmanage.Sno WHERE  (branchdata.SalesType IS NOT NULL) AND (indents_subtable.DeliveryQty <> 0) AND (modifiedroutes.BranchID IN ('174', '527', '4607')) AND (branchdata_2.SalesType = @SalesTypeId) GROUP BY modifiedroutes.Sno ORDER BY SalesTypeId, branchdata_2.RouteID");
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            cmd.Parameters.AddWithValue("@SalesTypeId", route);
                            cmd.Parameters.AddWithValue("@starttime", GetLowDate(LastYearFromDate));
                            cmd.Parameters.AddWithValue("@endtime", GetHighDate(LastYearToDate));
                            dtLastYearroutesale = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else
                        {
                            //(branchdata.sno IN ('174', '527', '4607'))
                            cmd = new MySqlCommand("SELECT  modifiedroutes.RouteName, SUM(indents_subtable.DeliveryQty) AS saleQty, SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost) AS salevalue, modifiedroutes.Sno AS routeid, modifidroutssubtab.BranchID AS bid, branchdata_2.BranchName, branchdata_2.flag, branchdata_1.sno As SuperBranch,  branchdata_2.SalesType AS SalesTypeId, empmanage.EmpName, branchdata_2.SalesRepresentative FROM  branchdata branchdata_2 RIGHT OUTER JOIN branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT   RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo ON  branchdata_2.sno = modifidroutssubtab.BranchID LEFT OUTER JOIN indents_subtable INNER JOIN (SELECT  IndentNo, I_date, Branch_id FROM  indents WHERE  (I_date BETWEEN @starttime AND @endtime)) indt ON indents_subtable.IndentNo = indt.IndentNo ON  modifidroutssubtab.BranchID = indt.Branch_id INNER JOIN tripdata ON tripdata.Sno = indents_subtable.DTripId INNER JOIN empmanage ON tripdata.EmpId = empmanage.Sno WHERE  (branchdata.SalesType IS NOT NULL) AND (indents_subtable.DeliveryQty <> 0) AND (modifiedroutes.BranchID = @BranchID) AND (branchdata_2.SalesType = @SalesTypeId) GROUP BY modifiedroutes.Sno ORDER BY SalesTypeId, branchdata_2.RouteID");
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            cmd.Parameters.AddWithValue("@SalesTypeId", route);
                            cmd.Parameters.AddWithValue("@starttime", GetLowDate(LastYearFromDate));
                            cmd.Parameters.AddWithValue("@endtime", GetHighDate(LastYearToDate));
                            dtLastYearroutesale = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        DataTable dtLastYearhpaidamount = new DataTable();
                        if (BranchID == "174")
                        {
                            cmd = new MySqlCommand("SELECT   modifiedroutes.Branchid As SuperBranch,branchdata.BranchName, branchdata.sno, modifiedroutes.RouteName, modifidroutssubtab.BranchID, modifiedroutes.Sno AS routeid, SUM(colltion.AmountPaid) AS AmountPaid FROM  branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT RefNo, Rank, LevelType, BranchID, CDate, EDate FROM   modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo INNER JOIN (SELECT  Branchid, AmountPaid, PaidDate FROM   collections WHERE  (PaymentType <> 'Cheque') AND (PaidDate BETWEEN @d1 AND @d2)) colltion ON modifidroutssubtab.BranchID = colltion.Branchid WHERE (branchdata.SalesType IS NOT NULL) AND (branchdata.sno IN ('174', '527', '4607')) GROUP BY modifidroutssubtab.BranchID ORDER BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate.AddDays(-364)));
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-364));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-364));
                            cmd.Parameters.AddWithValue("@SOID", BranchID);
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            dtLastYearhpaidamount = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else
                        {
                            cmd = new MySqlCommand("SELECT   modifiedroutes.Branchid As SuperBranch,branchdata.BranchName, branchdata.sno, modifiedroutes.RouteName, modifidroutssubtab.BranchID, modifiedroutes.Sno AS routeid, SUM(colltion.AmountPaid) AS AmountPaid FROM  branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT RefNo, Rank, LevelType, BranchID, CDate, EDate FROM   modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo INNER JOIN (SELECT  Branchid, AmountPaid, PaidDate FROM   collections WHERE  (PaymentType <> 'Cheque') AND (PaidDate BETWEEN @d1 AND @d2)) colltion ON modifidroutssubtab.BranchID = colltion.Branchid WHERE (branchdata.SalesType IS NOT NULL) AND (branchdata.sno = @BranchID) GROUP BY modifidroutssubtab.BranchID ORDER BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate.AddDays(-364)));
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-364));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-364));
                            cmd.Parameters.AddWithValue("@SOID", BranchID);
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            dtLastYearhpaidamount = vdbmngr.SelectQuery(cmd).Tables[0];
                        }

                        //cmd = new MySqlCommand("SELECT  sno, salestype, flag, UserData_sno, status, rank, club_code FROM salestypemanagement where (status = 1) ORDER BY salestype DESC");
                        //cmd.Parameters.AddWithValue("@BranchID", BranchID);
                        //DataTable dtsalestype = vdbmngr.SelectQuery(cmd).Tables[0];
                        cmd = new MySqlCommand("SELECT Sno, RouteName, RouteLevel, UserID, BranchID, CDate, EDate, flag FROM modifiedroutes");
                        cmd.Parameters.AddWithValue("@BranchID", BranchID);
                        DataTable dtsalestype = vdbmngr.SelectQuery(cmd).Tables[0];

                        DataTable dtAll = new DataTable();
                        dtAll.Merge(dtyesterdayroutesale);
                        dtAll.Merge(dtLastweakroutesale);
                        dtAll.Merge(dtLastMonthroutesale);
                        dtAll.Merge(dtLastYearroutesale);

                        DataView view = new DataView(dtAll);

                        DataTable distincttable = view.ToTable(true, "SalesTypeId", "routeid");
                        DataTable DayReport = new DataTable();
                        DataTable lastweakReport = new DataTable();
                        DataTable LastMonthReport = new DataTable();
                        DataTable LastYearReport = new DataTable();
                        DataTable MainReport = new DataTable();

                        MainReport.Columns.Add("RouteName");
                        MainReport.Columns.Add("SalestypeId");
                        MainReport.Columns.Add("routeid");
                        MainReport.Columns.Add("Yester Day").DataType = typeof(Double);
                        MainReport.Columns.Add("Yester Day %").DataType = typeof(Double);
                        MainReport.Columns.Add("Ysign");
                        MainReport.Columns.Add("Last Week").DataType = typeof(Double);
                        MainReport.Columns.Add("Last Week %").DataType = typeof(Double);
                        MainReport.Columns.Add("Wsign");

                        MainReport.Columns.Add("Last Month").DataType = typeof(Double);
                        MainReport.Columns.Add("Last Month %").DataType = typeof(Double);
                        MainReport.Columns.Add("Msign");
                        MainReport.Columns.Add("Last Year").DataType = typeof(Double);
                        MainReport.Columns.Add("Last Year %").DataType = typeof(Double);
                        MainReport.Columns.Add("Yesign");


                        DataTable dtm = new DataTable();
                        dtm.Columns.Add("RouteName");
                        dtm.Columns.Add("SalestypeId");
                        dtm.Columns.Add("Yester Day");
                        dtm.Columns.Add("Yester Day %");
                        dtm.Columns.Add("Ysign");
                        dtm.Columns.Add("Last Week");
                        dtm.Columns.Add("Last Week %");
                        dtm.Columns.Add("Wsign");

                        dtm.Columns.Add("Last Month");
                        dtm.Columns.Add("Last Month %");
                        dtm.Columns.Add("Msign");
                        dtm.Columns.Add("Last Year");
                        dtm.Columns.Add("Last Year %");
                        dtm.Columns.Add("Yesign");

                        string cate = ddlbarnchCategory.SelectedItem.Value;
                        double yesterdaysum = 0;
                        double lastweaksum = 0;
                        double lastmonthsum = 0;
                        double lastyearsum = 0;
                        if (cate == "BranchWiseCollections")
                        {
                            if (BranchID == "174")
                            {
                                // IN ('174', '527', '4607'))
                                yesterdaysum = Convert.ToDouble(dtyesterdayroutesale.Compute("SUM(salevalue)", "SuperBranch IN (174, 527, 4607)"));
                                lastweaksum = Convert.ToDouble(dtLastweakroutesale.Compute("SUM(salevalue)", "SuperBranch IN (174, 527, 4607)"));
                                lastmonthsum = Convert.ToDouble(dtLastMonthroutesale.Compute("SUM(salevalue)", "SuperBranch IN (174, 527, 4607)"));
                                lastyearsum = Convert.ToDouble(dtLastYearroutesale.Compute("SUM(salevalue)", "SuperBranch IN (174, 527, 4607)"));
                            }
                            else
                            {
                                yesterdaysum = Convert.ToDouble(dtyesterdayroutesale.Compute("SUM(salevalue)", "SuperBranch=" + BranchID + ""));
                                lastweaksum = Convert.ToDouble(dtLastweakroutesale.Compute("SUM(salevalue)", "SuperBranch=" + BranchID + ""));
                                lastmonthsum = Convert.ToDouble(dtLastMonthroutesale.Compute("SUM(salevalue)", "SuperBranch=" + BranchID + ""));
                                lastyearsum = Convert.ToDouble(dtLastYearroutesale.Compute("SUM(salevalue)", "SuperBranch=" + BranchID + ""));
                            }
                        }
                        else
                        {
                            if (BranchID == "174")
                            {
                                // IN ('174', '527', '4607'))
                                yesterdaysum = Convert.ToDouble(dtyesterdayroutesale.Compute("SUM(saleQty)", "SuperBranch IN (174, 527, 4607)"));
                                lastweaksum = Convert.ToDouble(dtLastweakroutesale.Compute("SUM(saleQty)", "SuperBranch IN (174, 527, 4607)"));
                                lastmonthsum = Convert.ToDouble(dtLastMonthroutesale.Compute("SUM(saleQty)", "SuperBranch IN (174, 527, 4607)"));
                                lastyearsum = Convert.ToDouble(dtLastYearroutesale.Compute("SUM(saleQty)", "SuperBranch IN (174, 527, 4607)"));
                            }
                            else
                            {
                                yesterdaysum = Convert.ToDouble(dtyesterdayroutesale.Compute("SUM(saleQty)", "SuperBranch=" + BranchID + ""));
                                lastweaksum = Convert.ToDouble(dtLastweakroutesale.Compute("SUM(saleQty)", "SuperBranch=" + BranchID + ""));
                                lastmonthsum = Convert.ToDouble(dtLastMonthroutesale.Compute("SUM(saleQty)", "SuperBranch=" + BranchID + ""));
                                lastyearsum = Convert.ToDouble(dtLastYearroutesale.Compute("SUM(saleQty)", "SuperBranch=" + BranchID + ""));
                            }
                        }


                        foreach (DataRow dr in distincttable.Rows)
                        {
                            DataRow newrow = MainReport.NewRow();

                            string SalestypeId = dr["routeid"].ToString();

                            foreach (DataRow drsalestype in dtsalestype.Select("sno='" + SalestypeId + "'"))
                            {

                                string Salestype = drsalestype["RouteName"].ToString();
                                double compare = 0;
                                //newrow["SalesType"] = Salestype;
                                double daytotal = 0; double weaktotal = 0;
                                double monthtotal = 0; double yeartotal = 0;
                                double diffpercentage = 0;
                                foreach (DataRow dramount in dtyesterdayroutesale.Select("routeid='" + SalestypeId + "'"))
                                {
                                    if (cate == "BranchWiseCollections")
                                    {
                                        float amount = 0;
                                        float.TryParse(dramount["salevalue"].ToString(), out amount);
                                        daytotal += amount;
                                        newrow["Yester Day"] = Math.Round(daytotal); ;
                                        double Avgqty = amount / 2;
                                        // newrow["Yester Day Avg"] = Math.Round(Avgqty );
                                        //newrow["Branchid"] = dramount["BranchID"].ToString();
                                        newrow["SalestypeId"] = SalestypeId;
                                        newrow["RouteName"] = Salestype;
                                        newrow["routeid"] = dramount["routeid"].ToString();
                                        double temp = 0;
                                        double Percentage = 0; double tempPercentage = 0;
                                        double.TryParse(dramount["salevalue"].ToString(), out temp);
                                        tempPercentage = (temp / yesterdaysum) * 100;
                                        Percentage = Math.Round(tempPercentage);
                                        newrow["Yester Day %"] = Percentage;
                                        compare = Percentage;
                                        diffpercentage = Percentage;
                                    }
                                    else
                                    {
                                        float amount = 0;
                                        float.TryParse(dramount["saleQty"].ToString(), out amount);
                                        daytotal += amount;
                                        newrow["Yester Day"] = Math.Round(daytotal); ;
                                        double Avgqty = amount / 2;
                                        // newrow["Yester Day Avg"] = Math.Round(Avgqty );
                                        //newrow["Branchid"] = dramount["BranchID"].ToString();
                                        newrow["SalestypeId"] = SalestypeId;
                                        newrow["RouteName"] = Salestype;
                                        newrow["routeid"] = dramount["routeid"].ToString();
                                        double temp = 0;
                                        double Percentage = 0; double tempPercentage = 0;
                                        double.TryParse(dramount["saleQty"].ToString(), out temp);
                                        tempPercentage = (temp / yesterdaysum) * 100;
                                        Percentage = Math.Round(tempPercentage);
                                        newrow["Yester Day %"] = Percentage;
                                        compare = Percentage;
                                        diffpercentage = Percentage;
                                    }
                                    //yesterdaygrandtotal += amount;
                                }
                                foreach (DataRow dramount in dtLastweakroutesale.Select("routeid='" + SalestypeId + "'"))
                                {
                                    if (cate == "BranchWiseCollections")
                                    {
                                        float amount = 0;
                                        float.TryParse(dramount["salevalue"].ToString(), out amount);
                                        weaktotal += amount;
                                        newrow["Last Week"] = Math.Round(weaktotal);

                                        double Avgqty = amount / 2;
                                        // newrow["Last Week Avg"] = Math.Round(Avgqty );
                                        // newrow["Branchid"] = dramount["BranchID"].ToString();
                                        newrow["SalestypeId"] = SalestypeId;
                                        newrow["RouteName"] = Salestype;
                                        newrow["routeid"] = dramount["routeid"].ToString();
                                        double temp = 0;
                                        double Percentage = 0; double tempPercentage = 0;
                                        double.TryParse(dramount["salevalue"].ToString(), out temp);
                                        tempPercentage = (temp / lastweaksum) * 100;
                                        Percentage = Math.Round(tempPercentage);
                                        if (diffpercentage > Percentage)
                                        {
                                            newrow["Last Week %"] = Math.Round(diffpercentage - Percentage);
                                            newrow["Wsign"] = "+";
                                        }
                                        else
                                        {
                                            newrow["Last Week %"] = Math.Round(diffpercentage - Percentage);
                                            newrow["Wsign"] = "-";
                                        }
                                    }
                                    else
                                    {
                                        float amount = 0;
                                        float.TryParse(dramount["saleQty"].ToString(), out amount);
                                        weaktotal += amount;
                                        newrow["Last Week"] = Math.Round(weaktotal);

                                        double Avgqty = amount / 2;
                                        // newrow["Last Week Avg"] = Math.Round(Avgqty );
                                        // newrow["Branchid"] = dramount["BranchID"].ToString();
                                        newrow["SalestypeId"] = SalestypeId;
                                        newrow["RouteName"] = Salestype;
                                        newrow["routeid"] = dramount["routeid"].ToString();
                                        double temp = 0;
                                        double Percentage = 0; double tempPercentage = 0;
                                        double.TryParse(dramount["saleQty"].ToString(), out temp);
                                        tempPercentage = (temp / lastweaksum) * 100;
                                        Percentage = Math.Round(tempPercentage);
                                        if (diffpercentage > Percentage)
                                        {
                                            newrow["Last Week %"] = Math.Round(diffpercentage - Percentage);
                                            newrow["Wsign"] = "+";
                                        }
                                        else
                                        {
                                            newrow["Last Week %"] = Math.Round(diffpercentage - Percentage);
                                            newrow["Wsign"] = "-";
                                        }
                                    }
                                    //lastweekgrandtotal += amount;
                                }
                                foreach (DataRow dramount in dtLastMonthroutesale.Select("routeid='" + SalestypeId + "'"))
                                {
                                    if (cate == "BranchWiseCollections")
                                    {
                                        float amount = 0;
                                        float.TryParse(dramount["salevalue"].ToString(), out amount);
                                        monthtotal += amount;
                                        newrow["Last Month"] = Math.Round(monthtotal); ;
                                        double Avgqty = amount / 2;
                                        //newrow["Last Month Avg"] = Math.Round(Avgqty );
                                        //newrow["Branchid"] = dramount["BranchID"].ToString();
                                        newrow["SalestypeId"] = SalestypeId;
                                        newrow["RouteName"] = Salestype;
                                        newrow["routeid"] = dramount["routeid"].ToString();
                                        double temp = 0;
                                        double Percentage = 0; double tempPercentage = 0;
                                        double.TryParse(dramount["salevalue"].ToString(), out temp);
                                        tempPercentage = (temp / lastmonthsum) * 100;
                                        Percentage = Math.Round(tempPercentage);
                                        if (diffpercentage > Percentage)
                                        {
                                            newrow["Last Month %"] = Math.Round(diffpercentage - Percentage);
                                            newrow["Msign"] = "+";
                                        }
                                        else
                                        {
                                            newrow["Last Month %"] = Math.Round(diffpercentage - Percentage);
                                            newrow["Msign"] = "-";
                                        }
                                    }
                                    else
                                    {
                                        float amount = 0;
                                        float.TryParse(dramount["saleQty"].ToString(), out amount);
                                        monthtotal += amount;
                                        newrow["Last Month"] = Math.Round(monthtotal); ;
                                        double Avgqty = amount / 2;
                                        //newrow["Last Month Avg"] = Math.Round(Avgqty );
                                        //newrow["Branchid"] = dramount["BranchID"].ToString();
                                        newrow["SalestypeId"] = SalestypeId;
                                        newrow["RouteName"] = Salestype;
                                        newrow["routeid"] = dramount["routeid"].ToString();
                                        double temp = 0;
                                        double Percentage = 0; double tempPercentage = 0;
                                        double.TryParse(dramount["saleQty"].ToString(), out temp);
                                        tempPercentage = (temp / lastmonthsum) * 100;
                                        Percentage = Math.Round(tempPercentage);
                                        if (diffpercentage > Percentage)
                                        {
                                            newrow["Last Month %"] = Math.Round(diffpercentage - Percentage);
                                            newrow["Msign"] = "+";
                                        }
                                        else
                                        {
                                            newrow["Last Month %"] = Math.Round(diffpercentage - Percentage);
                                            newrow["Msign"] = "-";
                                        }
                                    }
                                    //lastmonthgrandtotal += amount;
                                }
                                foreach (DataRow dramount in dtLastYearroutesale.Select("routeid='" + SalestypeId + "'"))
                                {
                                    if (cate == "BranchWiseCollections")
                                    {

                                        float amount = 0;
                                        float.TryParse(dramount["salevalue"].ToString(), out amount);
                                        yeartotal += amount;
                                        newrow["Last Year"] = Math.Round(yeartotal); ;
                                        double Avgqty = amount / 2;
                                        // newrow["Last Year Avg"] = Math.Round(Avgqty );
                                        //newrow["Branchid"] = dramount["BranchID"].ToString();
                                        newrow["SalestypeId"] = SalestypeId;
                                        newrow["RouteName"] = Salestype;
                                        newrow["routeid"] = dramount["routeid"].ToString();
                                        double temp = 0;
                                        double Percentage = 0; double tempPercentage = 0;
                                        double.TryParse(dramount["salevalue"].ToString(), out temp);
                                        tempPercentage = (temp / lastyearsum) * 100;
                                        Percentage = Math.Round(tempPercentage);

                                        // lastyeargrandtotal += amount;
                                        if (diffpercentage > Percentage)
                                        {
                                            newrow["Last Year %"] = Math.Round(diffpercentage - Percentage);
                                            newrow["Yesign"] = "+";
                                        }
                                        else
                                        {
                                            newrow["Last Year %"] = Math.Round(diffpercentage - Percentage);
                                            newrow["Yesign"] = "-";
                                        }

                                    }
                                    else
                                    {
                                        float amount = 0;
                                        float.TryParse(dramount["saleQty"].ToString(), out amount);
                                        yeartotal += amount;
                                        newrow["Last Year"] = Math.Round(yeartotal); ;
                                        double Avgqty = amount / 2;
                                        // newrow["Last Year Avg"] = Math.Round(Avgqty );
                                        //newrow["Branchid"] = dramount["BranchID"].ToString();
                                        newrow["SalestypeId"] = SalestypeId;
                                        newrow["RouteName"] = Salestype;
                                        newrow["routeid"] = dramount["routeid"].ToString();
                                        double temp = 0;
                                        double Percentage = 0; double tempPercentage = 0;
                                        double.TryParse(dramount["saleQty"].ToString(), out temp);
                                        tempPercentage = (temp / lastyearsum) * 100;
                                        Percentage = Math.Round(tempPercentage);
                                        if (diffpercentage > Percentage)
                                        {
                                            newrow["Last Year %"] = Math.Round(diffpercentage - Percentage);
                                            newrow["Yesign"] = "+";
                                        }
                                        else
                                        {
                                            newrow["Last Year %"] = Math.Round(diffpercentage - Percentage);
                                            newrow["Yesign"] = "-";
                                        }
                                    }
                                }
                                MainReport.Rows.Add(newrow);
                            }
                        }
                        if (MainReport.Rows.Count > 0)
                        {
                            foreach (DataRow drM in MainReport.Select("routeid='" + BranchID + "'"))
                            {
                                DataRow newrow = dtm.NewRow();
                                newrow["SalestypeId"] = drM["SalestypeId"].ToString();
                                newrow["RouteName"] = drM["RouteName"].ToString();
                                newrow["Yester Day"] = drM["Yester Day"].ToString();
                                newrow["Yester Day %"] = drM["Yester Day %"].ToString();
                                newrow["Ysign"] = drM["Ysign"].ToString();
                                newrow["Last Week"] = drM["Last Week"].ToString();
                                newrow["Last Week %"] = drM["Last Week %"].ToString();
                                newrow["Wsign"] = drM["Wsign"].ToString();

                                newrow["Last Month"] = drM["Last Month"].ToString();
                                newrow["Last Month %"] = drM["Last Month %"].ToString();
                                newrow["Msign"] = drM["Msign"].ToString();
                                newrow["Last Year"] = drM["Last Year"].ToString();
                                newrow["Last Year %"] = drM["Last Year %"].ToString();
                                newrow["Yesign"] = drM["Yesign"].ToString();

                                dtm.Rows.Add(newrow);
                            }
                        }
                        DataRow newrow2 = MainReport.NewRow();
                        newrow2["RouteName"] = "Total";
                        newrow2["Yester Day"] = Math.Round(yesterdaysum);//yesterdaysum;
                        newrow2["Last Week"] = Math.Round(lastweaksum); ;
                        newrow2["Last Month"] = Math.Round(lastmonthsum); ;
                        newrow2["Last Year"] = Math.Round(lastyearsum); ;
                        MainReport.Rows.Add(newrow2);
                        grdnewroute.DataSource = MainReport;
                        grdnewroute.DataBind();
                    }
                }
                #endregion
                #region
                if (SectedDataType == "Days")
                {
                    double yesterdaygrandtotal = 0; double lastweekgrandtotal = 0;
                    double lastmonthgrandtotal = 0; double lastyeargrandtotal = 0;
                    //cmd = new MySqlCommand("SELECT   modifiedroutes.RouteName, ROUND(SUM(indents_subtable.DeliveryQty),2) AS saleQty, SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost) AS salevalue, modifiedroutes.Sno AS routeid, modifidroutssubtab.BranchID AS bid, branchdata_2.BranchName, branchdata_2.flag, branchdata_1.sno AS BranchID, branchdata_2.SalesType AS SalesTypeId FROM branchdata branchdata_2 RIGHT OUTER JOIN branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT  RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo ON  branchdata_2.sno = modifidroutssubtab.BranchID LEFT OUTER JOIN indents_subtable INNER JOIN (SELECT  IndentNo, I_date, Branch_id FROM   indents WHERE  (I_date BETWEEN @starttime AND @endtime)) indt ON indents_subtable.IndentNo = indt.IndentNo ON  modifidroutssubtab.BranchID = indt.Branch_id WHERE   (branchdata.SalesType IS NOT NULL) AND (indents_subtable.DeliveryQty <> 0) AND (branchdata.sno = @BranchID) GROUP BY modifidroutssubtab.BranchID ORDER BY  branchdata_2.RouteID");
                    cmd = new MySqlCommand("SELECT   modifiedroutes.RouteName, indt.I_date,ROUND(SUM(indents_subtable.DeliveryQty),2) AS saleQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost) AS salevalue, modifiedroutes.Sno AS routeid, modifidroutssubtab.BranchID AS bid, branchdata_2.BranchName, branchdata_2.flag, branchdata_1.sno AS BranchID, branchdata_2.SalesType AS SalesTypeId FROM branchdata branchdata_2 RIGHT OUTER JOIN branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT  RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo ON  branchdata_2.sno = modifidroutssubtab.BranchID LEFT OUTER JOIN indents_subtable INNER JOIN (SELECT  IndentNo, I_date, Branch_id FROM   indents WHERE  (I_date BETWEEN @starttime AND @endtime)) indt ON indents_subtable.IndentNo = indt.IndentNo ON  modifidroutssubtab.BranchID = indt.Branch_id WHERE   (branchdata.SalesType IS NOT NULL) AND (indents_subtable.DeliveryQty <> 0) AND (branchdata.sno = @BranchID) GROUP BY DATE(indt.I_date),SalesTypeId ORDER BY  SalesTypeId");

                    cmd.Parameters.AddWithValue("@SOID", BranchID);
                    cmd.Parameters.AddWithValue("@BranchID", BranchID);
                    cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate));
                    cmd.Parameters.AddWithValue("@endtime", GetHighDate(ToDate));
                    Dt_PresentMonthSale = vdbmngr.SelectQuery(cmd).Tables[0];
                    cmd = new MySqlCommand("SELECT   branchdata.BranchName, branchdata.sno,colltion.PaidDate, modifiedroutes.RouteName, modifidroutssubtab.BranchID, modifiedroutes.Sno AS routeid, SUM(colltion.AmountPaid) AS AmountPaid FROM  branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT RefNo, Rank, LevelType, BranchID, CDate, EDate FROM   modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo INNER JOIN (SELECT  Branchid, AmountPaid, PaidDate FROM   collections WHERE  (PaymentType <> 'Cheque') AND (PaidDate BETWEEN @d1 AND @d2)) colltion ON modifidroutssubtab.BranchID = colltion.Branchid WHERE (branchdata.SalesType IS NOT NULL) AND (branchdata.sno = @BranchID) GROUP BY DATE(colltion.PaidDate),modifidroutssubtab.BranchID ORDER BY branchdata.sno");
                    cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate));
                    cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate));
                    cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate));
                    cmd.Parameters.AddWithValue("@SOID", BranchID);
                    cmd.Parameters.AddWithValue("@BranchID", BranchID);
                    Dt_PresentMonthAmount = vdbmngr.SelectQuery(cmd).Tables[0];

                    cmd = new MySqlCommand("SELECT   modifiedroutes.RouteName,indt.I_date, ROUND(SUM(indents_subtable.DeliveryQty),2) AS saleQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost) AS salevalue, modifiedroutes.Sno AS routeid, modifidroutssubtab.BranchID AS bid, branchdata_2.BranchName, branchdata_2.flag, branchdata_1.sno AS BranchID, branchdata_2.SalesType AS SalesTypeId FROM branchdata branchdata_2 RIGHT OUTER JOIN branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT  RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo ON  branchdata_2.sno = modifidroutssubtab.BranchID LEFT OUTER JOIN indents_subtable INNER JOIN (SELECT  IndentNo, I_date, Branch_id FROM   indents WHERE  (I_date BETWEEN @starttime AND @endtime)) indt ON indents_subtable.IndentNo = indt.IndentNo ON  modifidroutssubtab.BranchID = indt.Branch_id WHERE   (branchdata.SalesType IS NOT NULL) AND (indents_subtable.DeliveryQty <> 0) AND (branchdata.sno = @BranchID) GROUP BY DATE(indt.I_date),SalesTypeId ORDER BY SalesTypeId");
                    cmd.Parameters.AddWithValue("@SOID", BranchID);
                    cmd.Parameters.AddWithValue("@BranchID", BranchID);
                    cmd.Parameters.AddWithValue("@starttime", GetLowDate(lastmonthfrom));
                    cmd.Parameters.AddWithValue("@endtime", GetHighDate(lastmonthto));
                    dtSub_lastMonthSale = vdbmngr.SelectQuery(cmd).Tables[0];
                    cmd = new MySqlCommand("SELECT   branchdata.BranchName, branchdata.sno,colltion.PaidDate, modifiedroutes.RouteName, modifidroutssubtab.BranchID, modifiedroutes.Sno AS routeid, SUM(colltion.AmountPaid) AS AmountPaid FROM  branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT RefNo, Rank, LevelType, BranchID, CDate, EDate FROM   modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo INNER JOIN (SELECT  Branchid, AmountPaid, PaidDate FROM   collections WHERE  (PaymentType <> 'Cheque') AND (PaidDate BETWEEN @d1 AND @d2)) colltion ON modifidroutssubtab.BranchID = colltion.Branchid WHERE (branchdata.SalesType IS NOT NULL) AND (branchdata.sno = @BranchID) GROUP BY DATE(colltion.PaidDate),modifidroutssubtab.BranchID ORDER BY branchdata.sno");
                    cmd.Parameters.AddWithValue("@d1", GetLowDate(lastmonthfrom));
                    cmd.Parameters.AddWithValue("@d2", GetHighDate(lastmonthto));
                    cmd.Parameters.AddWithValue("@starttime", GetLowDate(lastmonthfrom));

                    cmd.Parameters.AddWithValue("@SOID", BranchID);
                    cmd.Parameters.AddWithValue("@BranchID", BranchID);
                    dtSub_lastMonthAmount = vdbmngr.SelectQuery(cmd).Tables[0];


                    cmd = new MySqlCommand("SELECT   modifiedroutes.RouteName,indt.I_date, ROUND(SUM(indents_subtable.DeliveryQty),2) AS saleQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost) AS salevalue, modifiedroutes.Sno AS routeid, modifidroutssubtab.BranchID AS bid, branchdata_2.BranchName, branchdata_2.flag, branchdata_1.sno AS BranchID, branchdata_2.SalesType AS SalesTypeId FROM branchdata branchdata_2 RIGHT OUTER JOIN branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT  RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo ON  branchdata_2.sno = modifidroutssubtab.BranchID LEFT OUTER JOIN indents_subtable INNER JOIN (SELECT  IndentNo, I_date, Branch_id FROM   indents WHERE  (I_date BETWEEN @starttime AND @endtime)) indt ON indents_subtable.IndentNo = indt.IndentNo ON  modifidroutssubtab.BranchID = indt.Branch_id WHERE   (branchdata.SalesType IS NOT NULL) AND (indents_subtable.DeliveryQty <> 0) AND (branchdata.sno = @BranchID) GROUP BY DATE(indt.I_date),SalesTypeId ORDER BY SalesTypeId");
                    cmd.Parameters.AddWithValue("@SOID", BranchID);
                    cmd.Parameters.AddWithValue("@BranchID", BranchID);
                    cmd.Parameters.AddWithValue("@starttime", GetLowDate(LastYearFromDate));
                    cmd.Parameters.AddWithValue("@endtime", GetHighDate(LastYearToDate));


                    dtSub_lastYearSales = vdbmngr.SelectQuery(cmd).Tables[0];
                    cmd = new MySqlCommand("SELECT   branchdata.BranchName, branchdata.sno,colltion.PaidDate, modifiedroutes.RouteName, modifidroutssubtab.BranchID, modifiedroutes.Sno AS routeid, SUM(colltion.AmountPaid) AS AmountPaid FROM  branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT RefNo, Rank, LevelType, BranchID, CDate, EDate FROM   modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo INNER JOIN (SELECT  Branchid, AmountPaid, PaidDate FROM   collections WHERE  (PaymentType <> 'Cheque') AND (PaidDate BETWEEN @d1 AND @d2)) colltion ON modifidroutssubtab.BranchID = colltion.Branchid WHERE (branchdata.SalesType IS NOT NULL) AND (branchdata.sno = @BranchID) GROUP BY DATE(colltion.PaidDate),modifidroutssubtab.BranchID ORDER BY branchdata.sno");
                    cmd.Parameters.AddWithValue("@starttime", GetLowDate(LastYearFromDate));
                    cmd.Parameters.AddWithValue("@d1", GetLowDate(LastYearFromDate));
                    cmd.Parameters.AddWithValue("@d2", GetHighDate(LastYearToDate));
                    cmd.Parameters.AddWithValue("@SOID", BranchID);
                    cmd.Parameters.AddWithValue("@BranchID", BranchID);
                    dtSub_lastYearAmount = vdbmngr.SelectQuery(cmd).Tables[0];




                    cmd = new MySqlCommand("SELECT  sno, salestype, flag, UserData_sno, status, rank, club_code FROM salestypemanagement where (status = 1) ORDER BY salestype DESC");
                    cmd.Parameters.AddWithValue("@BranchID", BranchID);
                    DataTable dtsalestype = vdbmngr.SelectQuery(cmd).Tables[0];


                    DataTable dtAll = new DataTable();
                    dtAll.Merge(Dt_PresentMonthSale);
                    dtAll.Merge(dtSub_lastMonthSale);
                    dtAll.Merge(dtSub_lastYearSales);

                    DataView view = new DataView(dtAll);

                    DataTable distincttable = view.ToTable(true, "SalesTypeId");
                    DataTable disticntbarnchname1 = view.ToTable(true, "I_Date");
                    DataTable Report1 = new DataTable();
                    DataTable MainReport1 = new DataTable();
                    MainReport1.Columns.Add("Date");
                    foreach (DataRow branch in disticntbarnchname1.Rows)
                    {
                        DataRow newrow = MainReport1.NewRow();
                        DateTime dtDoe = Convert.ToDateTime(branch["i_date"].ToString());
                        string strdate = dtDoe.ToString("dd");
                        newrow["Date"] = strdate;
                        MainReport1.Rows.Add(newrow); ;
                    }
                    DataView view4 = new DataView(MainReport1);
                    DataTable dtdistinctRoutename = view4.ToTable(true, "Date");

                    DataView dv = dtdistinctRoutename.DefaultView;
                    dv.Sort = "Date ASC";
                    DataTable disticntbarnchname4 = dv.ToTable();
                    DataTable MainReport = new DataTable();
                    MainReport.Columns.Add("DataType");
                    MainReport.Columns.Add("SalestypeId");
                    MainReport.Columns.Add("SalesType");
                    foreach (DataRow branch in disticntbarnchname4.Rows)
                    {
                        MainReport.Columns.Add(branch["Date"].ToString());
                    }
                    int k = 1;
                    foreach (DataRow drr in distincttable.Rows)
                    {
                        DataRow newrow = MainReport.NewRow();

                        string SalestypeId = drr["SalestypeId"].ToString();
                        if (k == 1)
                        {
                            newrow["DataType"] = "This Month";
                        }
                        float amount = 0;
                        foreach (DataRow drsalestype in dtsalestype.Select("sno='" + SalestypeId + "'"))
                        {
                            string Salestype = drsalestype["salestype"].ToString();
                            //newrow["SalesType"] = Salestype;
                            foreach (DataRow dramount in Dt_PresentMonthSale.Select("SalestypeId='" + SalestypeId + "'"))
                            {
                                amount = 0;
                                float.TryParse(dramount["saleQty"].ToString(), out amount);

                                //newrow["Yester Day"] = Math.Round(amount ); ;
                                //newrow["Yester Day Avg"] = dramount["AvgQty"].ToString();
                                //newrow["Branchid"] = dramount["BranchID"].ToString();
                                newrow["SalestypeId"] = SalestypeId;
                                DateTime dtDoe = Convert.ToDateTime(dramount["i_date"].ToString());
                                string strdate = dtDoe.ToString("dd");
                                double Avgqty = amount / 2;
                                newrow[strdate] = Math.Round(Avgqty);
                                newrow["SalesType"] = Salestype;
                                yesterdaygrandtotal += amount;

                            }
                        }
                        if (amount > 0)
                        {
                            MainReport.Rows.Add(newrow);
                            k++;
                        }

                    }
                    int k1 = 1;
                    foreach (DataRow drr in distincttable.Rows)
                    {
                        DataRow newrow = MainReport.NewRow();
                        string SalestypeId = drr["SalestypeId"].ToString();
                        float amount = 0;
                        foreach (DataRow drsalestype in dtsalestype.Select("sno='" + SalestypeId + "'"))
                        {
                            string Salestype = drsalestype["salestype"].ToString();
                            if (k1 == 1)
                            {
                                newrow["DataType"] = "Last Month";
                            }
                            foreach (DataRow dramount in dtSub_lastMonthSale.Select("SalestypeId='" + SalestypeId + "'"))
                            {
                                amount = 0;
                                float.TryParse(dramount["saleQty"].ToString(), out amount);
                                //newrow["Last Week"] = Math.Round(amount );
                                //newrow["Last Week Avg"] = dramount["AvgQty"].ToString();
                                //newrow["Branchid"] = dramount["BranchID"].ToString();
                                newrow["SalestypeId"] = SalestypeId;
                                //newrow["SalesType"] = Salestype;

                                DateTime dtDoe = Convert.ToDateTime(dramount["i_date"].ToString());
                                string strdate = dtDoe.ToString("dd");
                                double Avgqty = amount / 2;
                                newrow[strdate] = Math.Round(Avgqty);
                                newrow["SalesType"] = SalestypeId;
                                newrow["SalesType"] = Salestype;
                                lastweekgrandtotal += amount;

                            }
                        }
                        if (amount > 0)
                        {
                            MainReport.Rows.Add(newrow);
                            k1++;
                        }

                    }
                    int k2 = 1;
                    foreach (DataRow drr in distincttable.Rows)
                    {
                        DataRow newrow = MainReport.NewRow();
                        string SalestypeId = drr["SalestypeId"].ToString();
                        float amount = 0;
                        foreach (DataRow drsalestype in dtsalestype.Select("sno='" + SalestypeId + "'"))
                        {
                            string Salestype = drsalestype["salestype"].ToString();
                            if (k2 == 1)
                            {
                                newrow["DataType"] = "Last Year";
                            }
                            foreach (DataRow dramount in dtSub_lastYearSales.Select("SalestypeId='" + SalestypeId + "'"))
                            {
                                amount = 0;
                                float.TryParse(dramount["saleQty"].ToString(), out amount);
                                //newrow["Last Month"] = Math.Round(amount ); ;
                                //newrow["Last Month Avg"] = dramount["AvgQty"].ToString();
                                //newrow["Branchid"] = dramount["BranchID"].ToString();
                                newrow["SalestypeId"] = SalestypeId;
                                //newrow["SalesType"] = Salestype;

                                DateTime dtDoe = Convert.ToDateTime(dramount["i_date"].ToString());
                                string strdate = dtDoe.ToString("dd");
                                double Avgqty = amount / 2;
                                newrow[strdate] = Math.Round(Avgqty);
                                newrow["SalesType"] = Salestype;
                                lastmonthgrandtotal += amount;

                            }
                        }
                        if (amount > 0)
                        {
                            MainReport.Rows.Add(newrow);
                            k2++;
                        }


                    }
                    grdRouteReport.DataSource = MainReport;
                    grdRouteReport.DataBind();
                }
                #endregion
                #region
                else if (SectedDataType == "Weak")
                {
                    string strfromdate = FromDate.ToString();
                    DateTime fromDate = DateTime.Parse(strfromdate.Trim());
                    var d_fromdate = fromDate;
                    CultureInfo cul_from = CultureInfo.CurrentCulture;
                    int from_weekNum = cul_from.Calendar.GetWeekOfYear(
                        d_fromdate,
                        CalendarWeekRule.FirstDay,
                        DayOfWeek.Monday);
                    string strtodate = ToDate.ToString();
                    DateTime toDate = DateTime.Parse(strtodate.Trim());
                    var d_toDate = toDate;
                    CultureInfo cul_to = CultureInfo.CurrentCulture;
                    int to_weekNum = cul_to.Calendar.GetWeekOfYear(
                        d_toDate,
                        CalendarWeekRule.FirstDay,
                        DayOfWeek.Monday);
                    int diffweeks = to_weekNum - from_weekNum;
                    DateTime firstmonth = new DateTime();
                    DateTime lastmonth = new DateTime();
                    ToDate = ToDate.AddMonths(1);
                    TimeSpan dateSpan = ToDate.Subtract(FromDate);
                    int years = (dateSpan.Days / 365);
                    int months = ((dateSpan.Days % 365) / 31) + (years * 12);
                    int N = 0;
                    int i = 1;
                    DataTable dtPresentAllWeeks = new DataTable();
                    DataTable dtLastAllWeeks = new DataTable();
                    DataTable dtLastYearAllWeeks = new DataTable();
                    if (months != 0)
                    {
                        int newweek = from_weekNum;
                        int weaknumber = 0;
                        for (int j = 0; j < diffweeks; j++)
                        {
                            firstmonth = GetLowDate(FromDate);
                            lastmonth = GetHighDate(firstmonth.AddDays(7));
                            DateTime dtF = firstmonth;
                            string ChangedTime1 = firstmonth.ToString("dd/MMM");
                            string ChangedTime2 = lastmonth.ToString("dd/MMM");
                            string Changedt = firstmonth.ToString("MMM");
                            string mnth = firstmonth.ToString("MM");
                            weaknumber++;

                            cmd = new MySqlCommand("SELECT   modifiedroutes.RouteName, ROUND(SUM(indents_subtable.DeliveryQty),2) AS saleQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost) AS salevalue, modifiedroutes.Sno AS routeid, modifidroutssubtab.BranchID AS bid, branchdata_2.BranchName, branchdata_2.flag, branchdata_1.sno AS BranchID, branchdata_2.SalesType AS SalesTypeId FROM branchdata branchdata_2 RIGHT OUTER JOIN branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT  RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo ON  branchdata_2.sno = modifidroutssubtab.BranchID LEFT OUTER JOIN indents_subtable INNER JOIN (SELECT  IndentNo, I_date, Branch_id FROM   indents WHERE  (I_date BETWEEN @starttime AND @endtime)) indt ON indents_subtable.IndentNo = indt.IndentNo ON  modifidroutssubtab.BranchID = indt.Branch_id WHERE   (branchdata.SalesType IS NOT NULL) AND (indents_subtable.DeliveryQty <> 0) AND (branchdata.sno = @BranchID) GROUP BY SalesTypeId ORDER BY  SalesTypeId");

                            cmd.Parameters.AddWithValue("@SOID", BranchID);
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate));
                            cmd.Parameters.AddWithValue("@endtime", GetHighDate(ToDate));
                            Dt_PresentMonthSale = vdbmngr.SelectQuery(cmd).Tables[0];
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, branchdata.sno,colltion.PaidDate, modifiedroutes.RouteName, modifidroutssubtab.BranchID, modifiedroutes.Sno AS routeid, SUM(colltion.AmountPaid) AS AmountPaid FROM  branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT RefNo, Rank, LevelType, BranchID, CDate, EDate FROM   modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo INNER JOIN (SELECT  Branchid, AmountPaid, PaidDate FROM   collections WHERE  (PaymentType <> 'Cheque') AND (PaidDate BETWEEN @d1 AND @d2)) colltion ON modifidroutssubtab.BranchID = colltion.Branchid WHERE (branchdata.SalesType IS NOT NULL) AND (branchdata.sno = @BranchID) GROUP BY DATE(colltion.PaidDate),modifidroutssubtab.BranchID ORDER BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate));
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate));
                            cmd.Parameters.AddWithValue("@SOID", BranchID);
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            Dt_PresentMonthAmount = vdbmngr.SelectQuery(cmd).Tables[0];

                            cmd = new MySqlCommand("SELECT   modifiedroutes.RouteName, ROUND(SUM(indents_subtable.DeliveryQty),2) AS saleQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost) AS salevalue, modifiedroutes.Sno AS routeid, modifidroutssubtab.BranchID AS bid, branchdata_2.BranchName, branchdata_2.flag, branchdata_1.sno AS BranchID, branchdata_2.SalesType AS SalesTypeId FROM branchdata branchdata_2 RIGHT OUTER JOIN branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT  RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo ON  branchdata_2.sno = modifidroutssubtab.BranchID LEFT OUTER JOIN indents_subtable INNER JOIN (SELECT  IndentNo, I_date, Branch_id FROM   indents WHERE  (I_date BETWEEN @starttime AND @endtime)) indt ON indents_subtable.IndentNo = indt.IndentNo ON  modifidroutssubtab.BranchID = indt.Branch_id WHERE   (branchdata.SalesType IS NOT NULL) AND (indents_subtable.DeliveryQty <> 0) AND (branchdata.sno = @BranchID) GROUP BY SalesTypeId ORDER BY SalesTypeId");
                            cmd.Parameters.AddWithValue("@SOID", BranchID);
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate.AddDays(-30)));
                            cmd.Parameters.AddWithValue("@endtime", GetHighDate(ToDate.AddDays(-30)));
                            dtSub_lastMonthSale = vdbmngr.SelectQuery(cmd).Tables[0];
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, branchdata.sno,colltion.PaidDate, modifiedroutes.RouteName, modifidroutssubtab.BranchID, modifiedroutes.Sno AS routeid, SUM(colltion.AmountPaid) AS AmountPaid FROM  branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT RefNo, Rank, LevelType, BranchID, CDate, EDate FROM   modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo INNER JOIN (SELECT  Branchid, AmountPaid, PaidDate FROM   collections WHERE  (PaymentType <> 'Cheque') AND (PaidDate BETWEEN @d1 AND @d2)) colltion ON modifidroutssubtab.BranchID = colltion.Branchid WHERE (branchdata.SalesType IS NOT NULL) AND (branchdata.sno = @BranchID) GROUP BY DATE(colltion.PaidDate),modifidroutssubtab.BranchID ORDER BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate.AddDays(-30)));
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-30));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-30));
                            cmd.Parameters.AddWithValue("@SOID", BranchID);
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            dtSub_lastMonthAmount = vdbmngr.SelectQuery(cmd).Tables[0];


                            cmd = new MySqlCommand("SELECT   modifiedroutes.RouteName, ROUND(SUM(indents_subtable.DeliveryQty),2) AS saleQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost) AS salevalue, modifiedroutes.Sno AS routeid, modifidroutssubtab.BranchID AS bid, branchdata_2.BranchName, branchdata_2.flag, branchdata_1.sno AS BranchID, branchdata_2.SalesType AS SalesTypeId FROM branchdata branchdata_2 RIGHT OUTER JOIN branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT  RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo ON  branchdata_2.sno = modifidroutssubtab.BranchID LEFT OUTER JOIN indents_subtable INNER JOIN (SELECT  IndentNo, I_date, Branch_id FROM   indents WHERE  (I_date BETWEEN @starttime AND @endtime)) indt ON indents_subtable.IndentNo = indt.IndentNo ON  modifidroutssubtab.BranchID = indt.Branch_id WHERE   (branchdata.SalesType IS NOT NULL) AND (indents_subtable.DeliveryQty <> 0) AND (branchdata.sno = @BranchID) GROUP BY SalesTypeId ORDER BY SalesTypeId");
                            cmd.Parameters.AddWithValue("@SOID", BranchID);
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate.AddDays(-365)));
                            cmd.Parameters.AddWithValue("@endtime", GetHighDate(ToDate.AddDays(-365)));
                            dtSub_lastYearSales = vdbmngr.SelectQuery(cmd).Tables[0];
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, branchdata.sno,colltion.PaidDate, modifiedroutes.RouteName, modifidroutssubtab.BranchID, modifiedroutes.Sno AS routeid, SUM(colltion.AmountPaid) AS AmountPaid FROM  branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT RefNo, Rank, LevelType, BranchID, CDate, EDate FROM   modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo INNER JOIN (SELECT  Branchid, AmountPaid, PaidDate FROM   collections WHERE  (PaymentType <> 'Cheque') AND (PaidDate BETWEEN @d1 AND @d2)) colltion ON modifidroutssubtab.BranchID = colltion.Branchid WHERE (branchdata.SalesType IS NOT NULL) AND (branchdata.sno = @BranchID) GROUP BY DATE(colltion.PaidDate),modifidroutssubtab.BranchID ORDER BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate.AddDays(-365)));
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-365));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-365));
                            cmd.Parameters.AddWithValue("@SOID", BranchID);
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            dtSub_lastYearAmount = vdbmngr.SelectQuery(cmd).Tables[0];



                            FromDate = FromDate.AddDays(7);
                            DataTable dttemp = new DataTable();
                            DataTable dttemp1 = new DataTable();
                            dttemp.Columns.Add("SalestypeId");
                            dttemp.Columns.Add("SalesType");
                            dttemp.Columns.Add("saleQty");
                            dttemp.Columns.Add("Date");
                            dttemp.Columns.Add("DateType");
                            foreach (DataRow drSubData in Dt_PresentMonthSale.Rows)
                            {
                                DataRow newrow = dttemp.NewRow();
                                // newrow["SalesType"] = drSubData["SalesType"].ToString();
                                newrow["SalestypeId"] = drSubData["SalestypeId"].ToString();
                                newrow["saleQty"] = drSubData["saleQty"].ToString();
                                newrow["DateType"] = "PresentMonth";
                                newrow["Date"] = "Weak" + weaknumber;
                                dttemp.Rows.Add(newrow);
                            }
                            dtPresentAllWeeks.Merge(dttemp);
                            dtALL.Merge(dttemp);
                            dttemp = new DataTable();
                            dttemp.Columns.Add("SalestypeId");
                            dttemp.Columns.Add("SalesType");
                            dttemp.Columns.Add("saleQty");
                            dttemp.Columns.Add("Date");
                            dttemp.Columns.Add("DateType");
                            foreach (DataRow drSubData in dtSub_lastMonthSale.Rows)
                            {
                                DataRow newrow = dttemp.NewRow();
                                //newrow["SalesType"] = drSubData["SalesType"].ToString();
                                newrow["SalestypeId"] = drSubData["SalestypeId"].ToString();
                                newrow["saleQty"] = drSubData["saleQty"].ToString();
                                newrow["DateType"] = "LastMonth";
                                newrow["Date"] = "Weak" + weaknumber;
                                dttemp.Rows.Add(newrow);
                            }
                            dtLastAllWeeks.Merge(dttemp);
                            dtALL.Merge(dttemp);
                            dttemp = new DataTable();
                            dttemp.Columns.Add("SalestypeId");
                            dttemp.Columns.Add("SalesType");
                            dttemp.Columns.Add("saleQty");
                            dttemp.Columns.Add("Date");
                            dttemp.Columns.Add("DateType");
                            foreach (DataRow drSubData in dtSub_lastYearSales.Rows)
                            {
                                DataRow newrow = dttemp.NewRow();
                                newrow["SalestypeId"] = drSubData["SalestypeId"].ToString();
                                //newrow["SalesType"] = drSubData["SalesType"].ToString();
                                newrow["saleQty"] = drSubData["saleQty"].ToString();
                                newrow["DateType"] = "LastYear";
                                newrow["Date"] = "Weak" + weaknumber;
                                dttemp.Rows.Add(newrow);
                            }
                            dtLastYearAllWeeks.Merge(dttemp);
                            dtALL.Merge(dttemp);
                            // dttemp = new DataTable();
                        }
                    }
                    //write here code
                    cmd = new MySqlCommand("SELECT  sno, salestype, flag, UserData_sno, status, rank, club_code FROM salestypemanagement where (status = 1) ORDER BY salestype DESC");
                    cmd.Parameters.AddWithValue("@BranchID", BranchID);
                    DataTable dtsalestype = vdbmngr.SelectQuery(cmd).Tables[0];
                    DataTable disticntbarnchname = new DataTable();
                    DataTable dtdistinctRoutename = new DataTable();
                    DataTable disticntbarnchname1 = new DataTable();
                    if (BranchID == "8009" || BranchID == "8012" || BranchID == "8013")
                    {
                        DataView view = new DataView(dtALL);
                        disticntbarnchname = view.ToTable(true, "BranchName", "BranchID");
                        DataView view3 = new DataView(dtALL);
                        disticntbarnchname1 = view3.ToTable(true, "Date");
                    }
                    else
                    {
                        DataView view = new DataView(dtALL);
                        disticntbarnchname = view.ToTable(true, "SalestypeId");
                        DataView view3 = new DataView(dtALL);
                        dtdistinctRoutename = view3.ToTable(true, "Date");

                        DataView dv = dtdistinctRoutename.DefaultView;
                        dv.Sort = "Date ASC";
                        disticntbarnchname1 = dv.ToTable();
                    }

                    DataTable Report = new DataTable();
                    Report.Columns.Add("DataType");
                    Report.Columns.Add("SalestypeId");
                    Report.Columns.Add("SalesType");
                    foreach (DataRow branch in disticntbarnchname1.Rows)
                    {
                        Report.Columns.Add(branch["Date"].ToString());
                    }
                    int k = 1;
                    foreach (DataRow drr in disticntbarnchname.Rows)
                    {
                        DataRow newrow = Report.NewRow();
                        string SalestypeId = drr["SalestypeId"].ToString();
                        float amount = 0;
                        foreach (DataRow drsalestype in dtsalestype.Select("sno='" + SalestypeId + "'"))
                        {
                            string Salestype = drsalestype["salestype"].ToString();
                            if (k == 1)
                            {
                                newrow["DataType"] = "This Month";
                            }
                            //newrow["SalesType"] = Salestype;
                            foreach (DataRow dramount in dtPresentAllWeeks.Select("SalestypeId='" + SalestypeId + "'"))
                            {
                                amount = 0;
                                float.TryParse(dramount["saleQty"].ToString(), out amount);
                                //newrow["Yester Day"] = Math.Round(amount ); ;
                                //newrow["Yester Day Avg"] = dramount["AvgQty"].ToString();
                                //newrow["Branchid"] = dramount["BranchID"].ToString();

                                newrow["SalestypeId"] = SalestypeId;
                                double Avgqty = amount / 2;
                                newrow[dramount["Date"].ToString()] = Math.Round(Avgqty);
                                newrow["SalesType"] = Salestype;
                            }
                        }
                        if (amount > 0)
                        {
                            Report.Rows.Add(newrow);
                            k++;
                        }
                    }
                    int k1 = 0;
                    foreach (DataRow drr in disticntbarnchname.Rows)
                    {
                        DataRow newrow = Report.NewRow();
                        string SalestypeId = drr["SalestypeId"].ToString();
                        float amount = 0;
                        foreach (DataRow drsalestype in dtsalestype.Select("sno='" + SalestypeId + "'"))
                        {
                            string Salestype = drsalestype["salestype"].ToString();
                            if (k1 == 1)
                            {
                                newrow["DataType"] = "Last Month";
                            }
                            foreach (DataRow dramount in dtLastAllWeeks.Select("SalestypeId='" + SalestypeId + "'"))
                            {
                                amount = 0;
                                float.TryParse(dramount["saleQty"].ToString(), out amount);
                                //newrow["Last Week"] = Math.Round(amount );
                                //newrow["Last Week Avg"] = dramount["AvgQty"].ToString();
                                //newrow["Branchid"] = dramount["BranchID"].ToString();
                                newrow["SalestypeId"] = SalestypeId;
                                //newrow["SalesType"] = Salestype;


                                double Avgqty = amount / 2;
                                newrow[dramount["Date"].ToString()] = Math.Round(Avgqty);
                                newrow["SalesType"] = Salestype;
                                //lastweekgrandtotal += amount;
                            }
                        }
                        if (amount > 0)
                        {
                            Report.Rows.Add(newrow);
                            k1++;
                        }
                    }
                    int k2 = 1;
                    foreach (DataRow drr in disticntbarnchname.Rows)
                    {
                        DataRow newrow = Report.NewRow();
                        string SalestypeId = drr["SalestypeId"].ToString();
                        if (k2 == 1)
                        {
                            newrow["DataType"] = "Last Year";
                        }
                        float amount = 0;
                        foreach (DataRow drsalestype in dtsalestype.Select("sno='" + SalestypeId + "'"))
                        {
                            string Salestype = drsalestype["salestype"].ToString();
                            foreach (DataRow dramount in dtLastYearAllWeeks.Select("SalestypeId='" + SalestypeId + "'"))
                            {
                                amount = 0;
                                float.TryParse(dramount["saleQty"].ToString(), out amount);
                                //newrow["Last Month"] = Math.Round(amount ); ;
                                //newrow["Last Month Avg"] = dramount["AvgQty"].ToString();
                                //newrow["Branchid"] = dramount["BranchID"].ToString();
                                newrow["SalestypeId"] = SalestypeId;

                                //newrow["SalesType"] = Salestype;
                                double Avgqty = amount / 2;
                                newrow[dramount["Date"].ToString()] = Math.Round(Avgqty);
                                newrow["SalesType"] = Salestype;
                                // lastmonthgrandtotal += amount;
                            }
                        }
                        if (amount > 0)
                        {
                            Report.Rows.Add(newrow);
                            k2++;
                        }
                    }
                    grdRouteReport.DataSource = Report;
                    grdRouteReport.DataBind();

                }
                #endregion
                #region
                else if (SectedDataType == "Month")
                {
                    DateTime firstmonth = new DateTime();
                    DateTime lastmonth = new DateTime();
                    ToDate = ToDate.AddMonths(1);
                    TimeSpan dateSpan = ToDate.Subtract(FromDate);
                    int years = (dateSpan.Days / 365);
                    int months = ((dateSpan.Days % 365) / 31) + (years * 12);
                    int N = 0;
                    int i = 1;
                    if (months != 0)
                    {
                        int monthnumber = 0;
                        for (int j = 0; j < months; j++)
                        {
                            firstmonth = GetLowMonthRetrive(FromDate.AddMonths(j));
                            lastmonth = GetHighMonth(firstmonth);
                            DateTime dtF = firstmonth.AddDays(-1);
                            TimeSpan dateSpan2 = lastmonth.Subtract(dtF);
                            int NoOfdays = dateSpan2.Days;
                            monthnumber++;
                            cmd = new MySqlCommand("SELECT   modifiedroutes.RouteName, ROUND(SUM(indents_subtable.DeliveryQty),2) AS saleQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost) AS salevalue, modifiedroutes.Sno AS routeid, modifidroutssubtab.BranchID AS bid, branchdata_2.BranchName, branchdata_2.flag, branchdata_1.sno AS BranchID, branchdata_2.SalesType AS SalesTypeId FROM branchdata branchdata_2 RIGHT OUTER JOIN branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT  RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo ON  branchdata_2.sno = modifidroutssubtab.BranchID LEFT OUTER JOIN indents_subtable INNER JOIN (SELECT  IndentNo, I_date, Branch_id FROM   indents WHERE  (I_date BETWEEN @starttime AND @endtime)) indt ON indents_subtable.IndentNo = indt.IndentNo ON  modifidroutssubtab.BranchID = indt.Branch_id WHERE   (branchdata.SalesType IS NOT NULL) AND (indents_subtable.DeliveryQty <> 0) AND (branchdata.sno = @BranchID) GROUP BY SalesTypeId ORDER BY  SalesTypeId");

                            cmd.Parameters.AddWithValue("@SOID", BranchID);
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate));
                            cmd.Parameters.AddWithValue("@endtime", GetHighDate(ToDate));
                            Dt_PresentMonthSale = vdbmngr.SelectQuery(cmd).Tables[0];
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, branchdata.sno,colltion.PaidDate, modifiedroutes.RouteName, modifidroutssubtab.BranchID, modifiedroutes.Sno AS routeid, SUM(colltion.AmountPaid) AS AmountPaid FROM  branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT RefNo, Rank, LevelType, BranchID, CDate, EDate FROM   modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo INNER JOIN (SELECT  Branchid, AmountPaid, PaidDate FROM   collections WHERE  (PaymentType <> 'Cheque') AND (PaidDate BETWEEN @d1 AND @d2)) colltion ON modifidroutssubtab.BranchID = colltion.Branchid WHERE (branchdata.SalesType IS NOT NULL) AND (branchdata.sno = @BranchID) GROUP BY DATE(colltion.PaidDate),modifidroutssubtab.BranchID ORDER BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate));
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate));
                            cmd.Parameters.AddWithValue("@SOID", BranchID);
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            Dt_PresentMonthAmount = vdbmngr.SelectQuery(cmd).Tables[0];

                            cmd = new MySqlCommand("SELECT   modifiedroutes.RouteName, ROUND(SUM(indents_subtable.DeliveryQty),2) AS saleQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost) AS salevalue, modifiedroutes.Sno AS routeid, modifidroutssubtab.BranchID AS bid, branchdata_2.BranchName, branchdata_2.flag, branchdata_1.sno AS BranchID, branchdata_2.SalesType AS SalesTypeId FROM branchdata branchdata_2 RIGHT OUTER JOIN branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT  RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo ON  branchdata_2.sno = modifidroutssubtab.BranchID LEFT OUTER JOIN indents_subtable INNER JOIN (SELECT  IndentNo, I_date, Branch_id FROM   indents WHERE  (I_date BETWEEN @starttime AND @endtime)) indt ON indents_subtable.IndentNo = indt.IndentNo ON  modifidroutssubtab.BranchID = indt.Branch_id WHERE   (branchdata.SalesType IS NOT NULL) AND (indents_subtable.DeliveryQty <> 0) AND (branchdata.sno = @BranchID) GROUP BY SalesTypeId ORDER BY SalesTypeId");
                            cmd.Parameters.AddWithValue("@SOID", BranchID);
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate.AddDays(-30)));
                            cmd.Parameters.AddWithValue("@endtime", GetHighDate(ToDate.AddDays(-30)));
                            dtSub_lastMonthSale = vdbmngr.SelectQuery(cmd).Tables[0];
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, branchdata.sno,colltion.PaidDate, modifiedroutes.RouteName, modifidroutssubtab.BranchID, modifiedroutes.Sno AS routeid, SUM(colltion.AmountPaid) AS AmountPaid FROM  branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT RefNo, Rank, LevelType, BranchID, CDate, EDate FROM   modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo INNER JOIN (SELECT  Branchid, AmountPaid, PaidDate FROM   collections WHERE  (PaymentType <> 'Cheque') AND (PaidDate BETWEEN @d1 AND @d2)) colltion ON modifidroutssubtab.BranchID = colltion.Branchid WHERE (branchdata.SalesType IS NOT NULL) AND (branchdata.sno = @BranchID) GROUP BY DATE(colltion.PaidDate),modifidroutssubtab.BranchID ORDER BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate.AddDays(-30)));
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-30));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-30));
                            cmd.Parameters.AddWithValue("@SOID", BranchID);
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            dtSub_lastMonthAmount = vdbmngr.SelectQuery(cmd).Tables[0];


                            cmd = new MySqlCommand("SELECT   modifiedroutes.RouteName, ROUND(SUM(indents_subtable.DeliveryQty),2) AS saleQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost) AS salevalue, modifiedroutes.Sno AS routeid, modifidroutssubtab.BranchID AS bid, branchdata_2.BranchName, branchdata_2.flag, branchdata_1.sno AS BranchID, branchdata_2.SalesType AS SalesTypeId FROM branchdata branchdata_2 RIGHT OUTER JOIN branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT  RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo ON  branchdata_2.sno = modifidroutssubtab.BranchID LEFT OUTER JOIN indents_subtable INNER JOIN (SELECT  IndentNo, I_date, Branch_id FROM   indents WHERE  (I_date BETWEEN @starttime AND @endtime)) indt ON indents_subtable.IndentNo = indt.IndentNo ON  modifidroutssubtab.BranchID = indt.Branch_id WHERE   (branchdata.SalesType IS NOT NULL) AND (indents_subtable.DeliveryQty <> 0) AND (branchdata.sno = @BranchID) GROUP BY SalesTypeId ORDER BY SalesTypeId");
                            cmd.Parameters.AddWithValue("@SOID", BranchID);
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate.AddDays(-365)));
                            cmd.Parameters.AddWithValue("@endtime", GetHighDate(ToDate.AddDays(-365)));
                            dtSub_lastYearSales = vdbmngr.SelectQuery(cmd).Tables[0];
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, branchdata.sno,colltion.PaidDate, modifiedroutes.RouteName, modifidroutssubtab.BranchID, modifiedroutes.Sno AS routeid, SUM(colltion.AmountPaid) AS AmountPaid FROM  branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT RefNo, Rank, LevelType, BranchID, CDate, EDate FROM   modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo INNER JOIN (SELECT  Branchid, AmountPaid, PaidDate FROM   collections WHERE  (PaymentType <> 'Cheque') AND (PaidDate BETWEEN @d1 AND @d2)) colltion ON modifidroutssubtab.BranchID = colltion.Branchid WHERE (branchdata.SalesType IS NOT NULL) AND (branchdata.sno = @BranchID) GROUP BY DATE(colltion.PaidDate),modifidroutssubtab.BranchID ORDER BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate.AddDays(-365)));
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-365));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-365));
                            cmd.Parameters.AddWithValue("@SOID", BranchID);
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            dtSub_lastYearAmount = vdbmngr.SelectQuery(cmd).Tables[0];



                            FromDate = FromDate.AddDays(7);
                            DataTable dttemp = new DataTable();
                            DataTable dttemp1 = new DataTable();

                            dttemp.Columns.Add("SalestypeId");
                            dttemp.Columns.Add("SalesType");
                            dttemp.Columns.Add("saleQty");
                            dttemp.Columns.Add("Date");
                            dttemp.Columns.Add("DateType");
                            foreach (DataRow drSubData in Dt_PresentMonthSale.Rows)
                            {
                                DataRow newrow = dttemp.NewRow();
                                // newrow["SalesType"] = drSubData["SalesType"].ToString();
                                newrow["SalestypeId"] = drSubData["SalestypeId"].ToString();
                                newrow["saleQty"] = drSubData["saleQty"].ToString();
                                newrow["DateType"] = "PresentMonth";
                                newrow["Date"] = firstmonth.ToString("MMM");
                                dttemp.Rows.Add(newrow);
                            }

                            dtPresentAllMonth.Merge(dttemp);
                            dtALL.Merge(dttemp);

                            dttemp = new DataTable();
                            dttemp.Columns.Add("SalestypeId");
                            dttemp.Columns.Add("SalesType");
                            dttemp.Columns.Add("saleQty");
                            dttemp.Columns.Add("Date");
                            dttemp.Columns.Add("DateType");
                            foreach (DataRow drSubData in dtSub_lastYearSales.Rows)
                            {
                                DataRow newrow = dttemp.NewRow();
                                newrow["SalestypeId"] = drSubData["SalestypeId"].ToString();
                                //newrow["SalesType"] = drSubData["SalesType"].ToString();
                                newrow["saleQty"] = drSubData["saleQty"].ToString();
                                newrow["DateType"] = "LastYear";
                                newrow["Date"] = firstmonth.ToString("MMM");
                                dttemp.Rows.Add(newrow);
                            }
                            dtLastYearAllMonth.Merge(dttemp);
                            dtALL.Merge(dttemp);
                            // dttemp = new DataTable();
                        }
                    }
                    //write here code
                    cmd = new MySqlCommand("SELECT  sno, salestype, flag, UserData_sno, status, rank, club_code FROM salestypemanagement where (status = 1) ORDER BY salestype DESC");
                    cmd.Parameters.AddWithValue("@BranchID", BranchID);
                    DataTable dtsalestype = vdbmngr.SelectQuery(cmd).Tables[0];
                    DataTable disticntbarnchname = new DataTable();
                    DataTable dtdistinctRoutename = new DataTable();
                    DataTable disticntbarnchname1 = new DataTable();
                    if (BranchID == "8009" || BranchID == "8012" || BranchID == "8013")
                    {
                        DataView view = new DataView(dtALL);
                        disticntbarnchname = view.ToTable(true, "BranchName", "BranchID");
                        DataView view3 = new DataView(dtALL);
                        disticntbarnchname1 = view3.ToTable(true, "Date");
                    }
                    else
                    {
                        DataView view = new DataView(dtALL);
                        disticntbarnchname = view.ToTable(true, "SalestypeId");
                        DataView view3 = new DataView(dtALL);
                        dtdistinctRoutename = view3.ToTable(true, "Date");


                        DataView dv = dtdistinctRoutename.DefaultView;
                        dv.Sort = "Date ASC";
                        disticntbarnchname1 = dv.ToTable();
                    }

                    DataTable Report = new DataTable();
                    Report.Columns.Add("DataType");
                    Report.Columns.Add("SalestypeId");
                    Report.Columns.Add("SalesType");
                    foreach (DataRow branch in disticntbarnchname1.Rows)
                    {
                        Report.Columns.Add(branch["Date"].ToString());
                    }
                    int k = 1;
                    foreach (DataRow drr in disticntbarnchname.Rows)
                    {
                        DataRow newrow = Report.NewRow();
                        string SalestypeId = drr["SalestypeId"].ToString();
                        float amount = 0;
                        foreach (DataRow drsalestype in dtsalestype.Select("sno='" + SalestypeId + "'"))
                        {
                            string Salestype = drsalestype["salestype"].ToString();
                            //newrow["SalesType"] = Salestype;
                            if (k == 1)
                            {
                                newrow["DataType"] = "This Month";
                            }
                            foreach (DataRow dramount in dtPresentAllMonth.Select("SalestypeId='" + SalestypeId + "'"))
                            {
                                amount = 0;
                                float.TryParse(dramount["saleQty"].ToString(), out amount);
                                //newrow["Yester Day"] = Math.Round(amount ); ;
                                //newrow["Yester Day Avg"] = dramount["AvgQty"].ToString();
                                //newrow["Branchid"] = dramount["BranchID"].ToString();

                                newrow["SalestypeId"] = SalestypeId;
                                double Avgqty = amount / 2;
                                newrow[dramount["Date"].ToString()] = Math.Round(Avgqty);
                                newrow["SalesType"] = Salestype;
                            }
                        }
                        if (amount > 0)
                        {
                            Report.Rows.Add(newrow);
                        }
                        k++;
                    }
                    int k1 = 1;
                    foreach (DataRow drr in disticntbarnchname.Rows)
                    {
                        DataRow newrow = Report.NewRow();
                        string SalestypeId = drr["SalestypeId"].ToString();
                        if (k1 == 1)
                        {
                            newrow["DataType"] = "Last Year";
                        }
                        float amount = 0;
                        foreach (DataRow drsalestype in dtsalestype.Select("sno='" + SalestypeId + "'"))
                        {
                            string Salestype = drsalestype["salestype"].ToString();
                            foreach (DataRow dramount in dtLastYearAllMonth.Select("SalestypeId='" + SalestypeId + "'"))
                            {
                                amount = 0;
                                float.TryParse(dramount["saleQty"].ToString(), out amount);
                                //newrow["Last Month"] = Math.Round(amount ); ;
                                //newrow["Last Month Avg"] = dramount["AvgQty"].ToString();
                                //newrow["Branchid"] = dramount["BranchID"].ToString();
                                newrow["SalestypeId"] = SalestypeId;
                                double Avgqty = amount / 2;
                                newrow[dramount["Date"].ToString()] = Math.Round(Avgqty);
                                newrow["SalesType"] = Salestype;
                                // lastmonthgrandtotal += amount;
                            }
                        }
                        if (amount > 0)
                        {
                            Report.Rows.Add(newrow);
                        }
                        k1++;
                    }
                    grdRouteReport.DataSource = Report;
                    grdRouteReport.DataBind();
                }
            }
                #endregion
        }
        catch (Exception ex)
        {
        }
    }
    protected void grdRouteUnderSalesType_RowCommand(object sender, GridViewCommandEventArgs e)
    {

        try
        {
            vdbmngr = new VehicleDBMgr();
            int rowIndex = Convert.ToInt32(e.CommandArgument);
            GridViewRow row = grdRouteUnderSalesType.Rows[rowIndex];
            string route = row.Cells[2].Text;
            string BranchID = Session["ClickBranchid"].ToString();
            string salestype = row.Cells[2].Text;
            string Route_Name = row.Cells[1].Text;
            Session["RouteId"] = route;
            Session["RouteName"] = Route_Name;
            string ROUTEID = Session["Click_Route_id"].ToString();


            //string BranchID = Session["ClickBranchid"].ToString();
            //string salestype = row.Cells[2].Text;
            //string Route_Name = row.Cells[1].Text;
            //string route = row.Cells[2].Text;
            //Session["RouteId"] = route;
            //Session["RouteName"] = Route_Name;
            //string ROUTEID = Session["Clickrouteid"].ToString();
            //string SectedDataType = ddlDayType.SelectedItem.Value;
            string s = Session["IndDate"].ToString();
            var dt = DateTime.ParseExact(s, "ddd MMM dd yyyy HH:mm:ss 'GMT'zzz", System.Globalization.CultureInfo.InvariantCulture);
            string IndDate = dt.ToString("yyyy-MM-dd");
            DateTime ServerDateCurrentdate = Convert.ToDateTime(IndDate);
            DateTime FromDate = ServerDateCurrentdate;
            string edate = Session["Todate"].ToString();
            var edt = DateTime.ParseExact(edate, "ddd MMM dd yyyy HH:mm:ss 'GMT'zzz", System.Globalization.CultureInfo.InvariantCulture);
            string Tdate = edt.ToString("yyyy-MM-dd");
            DateTime To_Date = Convert.ToDateTime(Tdate);
            DateTime ToDate = To_Date;

            // div_MainPlantComparison.Style.Add("display", "block");

            divHide1.Style.Add("display", "block");
            divMainRouteWiseUnderSalestype.Style.Add("display", "block");
            string Datatype = "";
            int Ndays = (FromDate - ToDate).Days;
            int countdays = Ndays + 1;

            if (countdays <= 7)
            {
                Datatype = "Monthly";
            }
            else if (countdays <= 30 || countdays <= 8)
            {
                Datatype = "Week";
            }
            else if (countdays == 364 || countdays >= 364)
            {
                Datatype = "Year";
            }
            else
            {
                Datatype = "Monthly";
            }
            DateTime lastmonthfrom = new DateTime();
            DateTime lastmonthto = new DateTime();
            DateTime YearServerDate_Currentdate = Convert.ToDateTime(IndDate);
            DateTime LastYearFromDate = YearServerDate_Currentdate;
            DateTime YearServerDate_Todate = Convert.ToDateTime(Tdate);
            DateTime LastYearToDate = YearServerDate_Todate;
            lastmonthfrom = FromDate.AddMonths(-1);
            lastmonthto = ToDate.AddMonths(-1);
            LastYearFromDate = LastYearFromDate.AddYears(-1);
            LastYearToDate = LastYearToDate.AddYears(-1);



            DataTable dtPresentAllMonth = new DataTable();
            DataTable dtLastYearAllMonth = new DataTable();
            DataTable dtPresentMonth = new DataTable();
            DataTable dtLastMonth = new DataTable();
            DataTable dtLastYearMonth = new DataTable();
            DataTable dtALL = new DataTable();
            double yesterdaygrandtotal = 0; double lastweekgrandtotal = 0;
            double lastmonthgrandtotal = 0; double lastyeargrandtotal = 0;

            string val = ViewState["Val1"].ToString();
            if (val == "btnRouteclick")
            {
                cmd = new MySqlCommand("SELECT  modifiedroutes.RouteName, SUM(indents_subtable.DeliveryQty) AS saleQty, SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost) AS salevalue, modifiedroutes.Sno AS routeid, modifidroutssubtab.BranchID AS bid, branchdata_2.BranchName, branchdata_2.flag, branchdata_1.sno AS BranchID,  branchdata_2.SalesType, empmanage.EmpName, branchdata_2.SalesRepresentative FROM  branchdata branchdata_2 RIGHT OUTER JOIN branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT   RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo ON  branchdata_2.sno = modifidroutssubtab.BranchID LEFT OUTER JOIN indents_subtable INNER JOIN (SELECT  IndentNo, I_date, Branch_id FROM  indents WHERE  (I_date BETWEEN @starttime AND @endtime)) indt ON indents_subtable.IndentNo = indt.IndentNo ON  modifidroutssubtab.BranchID = indt.Branch_id INNER JOIN tripdata ON tripdata.Sno = indents_subtable.DTripId INNER JOIN empmanage ON tripdata.EmpId = empmanage.Sno WHERE  (branchdata.SalesType IS NOT NULL) AND (indents_subtable.DeliveryQty <> 0) AND (branchdata_2.SalesType = @salestype) AND (modifiedroutes.Sno = @BranchID) GROUP BY modifidroutssubtab.BranchID ORDER BY branchdata.sno, branchdata_2.RouteID");
                cmd.Parameters.AddWithValue("@BranchID", ROUTEID);
                cmd.Parameters.AddWithValue("@salestype", salestype);
                cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate.AddDays(-1)));
                cmd.Parameters.AddWithValue("@endtime", GetHighDate(ToDate.AddDays(-1)));
                DataTable dtyesterdayroutesale = vdbmngr.SelectQuery(cmd).Tables[0];

                //cmd = new MySqlCommand("SELECT  modifiedroutes.RouteName, ROUND(SUM(indents_subtable.DeliveryQty),2) AS saleQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost) AS salevalue, modifiedroutes.Sno AS routeid, modifidroutssubtab.BranchID AS bid, branchdata_2.BranchName, branchdata_2.flag, branchdata_1.sno AS BranchID,  branchdata_2.SalesType, empmanage.EmpName, branchdata_2.SalesRepresentative FROM  branchdata branchdata_2 RIGHT OUTER JOIN branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT   RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo ON  branchdata_2.sno = modifidroutssubtab.BranchID LEFT OUTER JOIN indents_subtable INNER JOIN (SELECT  IndentNo, I_date, Branch_id FROM  indents WHERE  (I_date BETWEEN @starttime AND @endtime)) indt ON indents_subtable.IndentNo = indt.IndentNo ON  modifidroutssubtab.BranchID = indt.Branch_id INNER JOIN tripdata ON tripdata.Sno = indents_subtable.DTripId INNER JOIN empmanage ON tripdata.EmpId = empmanage.Sno WHERE  (branchdata.SalesType IS NOT NULL) AND (indents_subtable.DeliveryQty <> 0) AND (branchdata_2.SalesType = @salestype) AND (modifiedroutes.Branchid = @BranchID) GROUP BY modifidroutssubtab.BranchID ORDER BY  routeid");
                //cmd.Parameters.AddWithValue("@salestype", salestype);
                //cmd.Parameters.AddWithValue("@BranchID", ROUTEID);
                //cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate.AddDays(-2)));
                //cmd.Parameters.AddWithValue("@endtime", GetHighDate(ToDate.AddDays(-2)));
                //DataTable dtyesterdayroutesale = vdbmngr.SelectQuery(cmd).Tables[0];


                cmd = new MySqlCommand("SELECT  modifiedroutes.RouteName, SUM(indents_subtable.DeliveryQty) AS saleQty, SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost) AS salevalue, modifiedroutes.Sno AS routeid, modifidroutssubtab.BranchID AS bid, branchdata_2.BranchName, branchdata_2.flag, branchdata_1.sno AS BranchID,  branchdata_2.SalesType, empmanage.EmpName, branchdata_2.SalesRepresentative FROM  branchdata branchdata_2 RIGHT OUTER JOIN branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT   RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo ON  branchdata_2.sno = modifidroutssubtab.BranchID LEFT OUTER JOIN indents_subtable INNER JOIN (SELECT  IndentNo, I_date, Branch_id FROM  indents WHERE  (I_date BETWEEN @starttime AND @endtime)) indt ON indents_subtable.IndentNo = indt.IndentNo ON  modifidroutssubtab.BranchID = indt.Branch_id INNER JOIN tripdata ON tripdata.Sno = indents_subtable.DTripId INNER JOIN empmanage ON tripdata.EmpId = empmanage.Sno WHERE  (branchdata.SalesType IS NOT NULL) AND (indents_subtable.DeliveryQty <> 0) AND (branchdata_2.SalesType = @salestype) AND (modifiedroutes.Sno = @BranchID) GROUP BY modifidroutssubtab.BranchID ORDER BY branchdata.sno, branchdata_2.RouteID");
                cmd.Parameters.AddWithValue("@BranchID", ROUTEID);
                cmd.Parameters.AddWithValue("@salestype", salestype);
                cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate.AddDays(-7)));
                cmd.Parameters.AddWithValue("@endtime", GetHighDate(ToDate.AddDays(-7)));
                DataTable dtLastweakroutesale = vdbmngr.SelectQuery(cmd).Tables[0];

                cmd = new MySqlCommand("SELECT  modifiedroutes.RouteName, SUM(indents_subtable.DeliveryQty) AS saleQty, SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost) AS salevalue, modifiedroutes.Sno AS routeid, modifidroutssubtab.BranchID AS bid, branchdata_2.BranchName, branchdata_2.flag, branchdata_1.sno AS BranchID,  branchdata_2.SalesType, empmanage.EmpName, branchdata_2.SalesRepresentative FROM  branchdata branchdata_2 RIGHT OUTER JOIN branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT   RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo ON  branchdata_2.sno = modifidroutssubtab.BranchID LEFT OUTER JOIN indents_subtable INNER JOIN (SELECT  IndentNo, I_date, Branch_id FROM  indents WHERE  (I_date BETWEEN @starttime AND @endtime)) indt ON indents_subtable.IndentNo = indt.IndentNo ON  modifidroutssubtab.BranchID = indt.Branch_id INNER JOIN tripdata ON tripdata.Sno = indents_subtable.DTripId INNER JOIN empmanage ON tripdata.EmpId = empmanage.Sno WHERE  (branchdata.SalesType IS NOT NULL) AND (indents_subtable.DeliveryQty <> 0) AND (branchdata_2.SalesType = @salestype) AND (modifiedroutes.Sno = @BranchID) GROUP BY modifidroutssubtab.BranchID ORDER BY branchdata.sno, branchdata_2.RouteID");
                cmd.Parameters.AddWithValue("@BranchID", ROUTEID);
                cmd.Parameters.AddWithValue("@salestype", salestype);
                cmd.Parameters.AddWithValue("@starttime", GetLowDate(lastmonthfrom));
                cmd.Parameters.AddWithValue("@endtime", GetHighDate(lastmonthto));
                DataTable dtLastMonthroutesale = vdbmngr.SelectQuery(cmd).Tables[0];

                cmd = new MySqlCommand("SELECT  modifiedroutes.RouteName, SUM(indents_subtable.DeliveryQty) AS saleQty, SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost) AS salevalue, modifiedroutes.Sno AS routeid, modifidroutssubtab.BranchID AS bid, branchdata_2.BranchName, branchdata_2.flag, branchdata_1.sno AS BranchID,  branchdata_2.SalesType, empmanage.EmpName, branchdata_2.SalesRepresentative FROM  branchdata branchdata_2 RIGHT OUTER JOIN branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT   RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo ON  branchdata_2.sno = modifidroutssubtab.BranchID LEFT OUTER JOIN indents_subtable INNER JOIN (SELECT  IndentNo, I_date, Branch_id FROM  indents WHERE  (I_date BETWEEN @starttime AND @endtime)) indt ON indents_subtable.IndentNo = indt.IndentNo ON  modifidroutssubtab.BranchID = indt.Branch_id INNER JOIN tripdata ON tripdata.Sno = indents_subtable.DTripId INNER JOIN empmanage ON tripdata.EmpId = empmanage.Sno WHERE  (branchdata.SalesType IS NOT NULL) AND (indents_subtable.DeliveryQty <> 0) AND (branchdata_2.SalesType = @salestype) AND (modifiedroutes.Sno = @BranchID) GROUP BY modifidroutssubtab.BranchID ORDER BY branchdata.sno, branchdata_2.RouteID");
                cmd.Parameters.AddWithValue("@BranchID", ROUTEID);
                cmd.Parameters.AddWithValue("@salestype", salestype);
                cmd.Parameters.AddWithValue("@starttime", GetLowDate(LastYearFromDate));
                cmd.Parameters.AddWithValue("@endtime", GetHighDate(LastYearToDate));
                DataTable dtLastYearroutesale = vdbmngr.SelectQuery(cmd).Tables[0];

                DataTable dtAll = new DataTable();
                dtAll.Merge(dtyesterdayroutesale);
                dtAll.Merge(dtLastweakroutesale);
                dtAll.Merge(dtLastMonthroutesale);
                dtAll.Merge(dtLastYearroutesale);

                DataView TotalView = new DataView(dtAll);
                DataTable dtdistinctRoutename = TotalView.ToTable(true, "SalesType", "bid", "BranchName", "RouteName", "routeid");
                DataView dv = dtdistinctRoutename.DefaultView;
                dv.Sort = "routeid ASC";
                DataTable sortedProductDT = dv.ToTable();
                DataTable MainReport = new DataTable();
                MainReport.Columns.Add("RouteName");
                MainReport.Columns.Add("AgentName");
                MainReport.Columns.Add("Routeid");
                MainReport.Columns.Add("Agentid");
                MainReport.Columns.Add("Yester Day").DataType = typeof(Double);
                MainReport.Columns.Add("Yester Day %").DataType = typeof(Double);
                MainReport.Columns.Add("Ysign");
                MainReport.Columns.Add("Last Week").DataType = typeof(Double);
                MainReport.Columns.Add("Last Week %").DataType = typeof(Double);
                MainReport.Columns.Add("Wsign");
                MainReport.Columns.Add("Last Month").DataType = typeof(Double);
                MainReport.Columns.Add("Last Month %").DataType = typeof(Double);
                MainReport.Columns.Add("Msign");
                MainReport.Columns.Add("Last Year").DataType = typeof(Double);
                MainReport.Columns.Add("Last Year %").DataType = typeof(Double);
                MainReport.Columns.Add("Yesign");


                DataTable Report = new DataTable();
                Report.Columns.Add("AgentName");
                Report.Columns.Add("Agentid");
                Report.Columns.Add("Yester Day");
                Report.Columns.Add("Yester Day %");
                Report.Columns.Add("Ysign");
                Report.Columns.Add("Last Week");
                Report.Columns.Add("Last Week %");
                Report.Columns.Add("Wsign");
                Report.Columns.Add("Last Month");
                Report.Columns.Add("Last Month %");
                Report.Columns.Add("Msign");
                Report.Columns.Add("Last Year");
                Report.Columns.Add("Last Year %");
                Report.Columns.Add("Yesign");
                // naveen002
                string cate = ddlbarnchCategory.SelectedItem.Value;
                double yesterdaysum = 0;
                double lastweaksum = 0;
                double lastmonthsum = 0;
                double lastyearsum = 0;
                if (cate == "BranchWiseCollections")
                {
                    if (BranchID == "174")
                    {
                        yesterdaysum = Convert.ToDouble(dtyesterdayroutesale.Compute("SUM(salevalue)", "SalesType=" + salestype + ""));
                        lastweaksum = Convert.ToDouble(dtLastweakroutesale.Compute("SUM(salevalue)", "SalesType=" + salestype + ""));
                        lastmonthsum = Convert.ToDouble(dtLastMonthroutesale.Compute("SUM(salevalue)", "SalesType=" + salestype + ""));
                        if (dtLastYearroutesale.Rows.Count > 0)
                        {
                            lastyearsum = Convert.ToDouble(dtLastYearroutesale.Compute("SUM(salevalue)", "SalesType=" + salestype + ""));
                        }
                    }
                    else
                    {
                        yesterdaysum = Convert.ToDouble(dtyesterdayroutesale.Compute("SUM(salevalue)", "BranchID=" + BranchID + "AND SalesType=" + salestype + ""));
                        lastweaksum = Convert.ToDouble(dtLastweakroutesale.Compute("SUM(salevalue)", "BranchID=" + BranchID + "AND SalesType=" + salestype + ""));
                        lastmonthsum = Convert.ToDouble(dtLastMonthroutesale.Compute("SUM(salevalue)", "BranchID=" + BranchID + "AND SalesType=" + salestype + ""));
                        if (dtLastYearroutesale.Rows.Count > 0)
                        {
                            lastyearsum = Convert.ToDouble(dtLastYearroutesale.Compute("SUM(salevalue)", "BranchID=" + BranchID + "AND SalesType=" + salestype + ""));
                        }
                    }
                }
                else
                {
                    if (BranchID == "174")
                    {
                        yesterdaysum = Convert.ToDouble(dtyesterdayroutesale.Compute("SUM(saleQty)", "SalesType=" + salestype + ""));
                        lastweaksum = Convert.ToDouble(dtLastweakroutesale.Compute("SUM(saleQty)", "SalesType=" + salestype + ""));
                        lastmonthsum = Convert.ToDouble(dtLastMonthroutesale.Compute("SUM(saleQty)", "SalesType=" + salestype + ""));
                        if (dtLastYearroutesale.Rows.Count > 0)
                        {
                            lastyearsum = Convert.ToDouble(dtLastYearroutesale.Compute("SUM(saleQty)", "SalesType=" + salestype + ""));
                        }
                    }
                    else
                    {
                        yesterdaysum = Convert.ToDouble(dtyesterdayroutesale.Compute("SUM(saleQty)", "BranchID=" + BranchID + "AND SalesType=" + salestype + ""));
                        lastweaksum = Convert.ToDouble(dtLastweakroutesale.Compute("SUM(saleQty)", "BranchID=" + BranchID + "AND SalesType=" + salestype + ""));
                        lastmonthsum = Convert.ToDouble(dtLastMonthroutesale.Compute("SUM(saleQty)", "BranchID=" + BranchID + "AND SalesType=" + salestype + ""));
                        if (dtLastYearroutesale.Rows.Count > 0)
                        {
                            lastyearsum = Convert.ToDouble(dtLastYearroutesale.Compute("SUM(saleQty)", "BranchID=" + BranchID + "AND SalesType=" + salestype + ""));
                        }
                    }
                }

                foreach (DataRow drroute in sortedProductDT.Rows)
                {
                    double agcompare = 0; double diffpercentage = 0;
                    string Agentid = drroute["bid"].ToString();
                    string AgentName = drroute["BranchName"].ToString();
                    string Salestype = drroute["SalesType"].ToString();
                    string RouteName = drroute["RouteName"].ToString();
                    DataRow newRow1 = MainReport.NewRow();
                    newRow1["AgentName"] = AgentName;
                    newRow1["Agentid"] = Agentid;
                    newRow1["Routeid"] = drroute["routeid"].ToString();
                    newRow1["RouteName"] = RouteName;
                    foreach (DataRow dramount in dtyesterdayroutesale.Select("bid='" + Agentid + "' AND salestype='" + Salestype + "'"))
                    {
                        if (cate == "BranchWiseCollections")
                        {
                            float amount = 0;
                            float.TryParse(dramount["salevalue"].ToString(), out amount);
                            newRow1["Yester Day"] = Math.Round(amount);
                            double Avgqty = amount / 2;
                            yesterdaygrandtotal += amount;
                            double temp = 0;
                            double Percentage = 0; double tempPercentage = 0;
                            double.TryParse(dramount["salevalue"].ToString(), out temp);
                            tempPercentage = (temp / yesterdaysum) * 100;
                            Percentage = Math.Round(tempPercentage);
                            newRow1["Yester Day %"] = Percentage;
                            agcompare = Percentage;
                            diffpercentage = Percentage;
                        }
                        else
                        {
                            float amount = 0;
                            float.TryParse(dramount["saleQty"].ToString(), out amount);
                            newRow1["Yester Day"] = Math.Round(amount);
                            double Avgqty = amount / 2;
                            yesterdaygrandtotal += amount;
                            double temp = 0;
                            double Percentage = 0; double tempPercentage = 0;
                            double.TryParse(dramount["saleQty"].ToString(), out temp);
                            tempPercentage = (temp / yesterdaysum) * 100;
                            Percentage = Math.Round(tempPercentage);
                            newRow1["Yester Day %"] = Percentage;
                            agcompare = Percentage;
                            diffpercentage = Percentage;
                        }
                    }
                    foreach (DataRow dramount in dtLastweakroutesale.Select("bid='" + Agentid + "' AND salestype='" + Salestype + "'"))
                    {
                        if (cate == "BranchWiseCollections")
                        {
                            float amount = 0;
                            float.TryParse(dramount["salevalue"].ToString(), out amount);
                            newRow1["Last Week"] = Math.Round(amount);
                            double Avgqty = amount / 2;
                            lastweekgrandtotal += amount;
                            double temp = 0;
                            double Percentage = 0; double tempPercentage = 0;
                            double.TryParse(dramount["salevalue"].ToString(), out temp);
                            tempPercentage = (temp / lastweaksum) * 100;
                            Percentage = Math.Round(tempPercentage);
                            if (diffpercentage > Percentage)
                            {
                                newRow1["Last Week %"] = Math.Round(diffpercentage - Percentage);
                                newRow1["Wsign"] = "+";
                            }
                            else
                            {
                                newRow1["Last Week %"] = Math.Round(diffpercentage - Percentage);
                                newRow1["Wsign"] = "-";
                            }
                        }
                        else
                        {
                            float amount = 0;
                            float.TryParse(dramount["saleQty"].ToString(), out amount);
                            newRow1["Last Week"] = Math.Round(amount);
                            double Avgqty = amount / 2;
                            // newRow1["Last Week Avg"] = Math.Round(Avgqty );
                            //newRow1["SalestypeId"] = SalestypeId;
                            //newRow1["Routeid"] = dramount["RouteId"].ToString();
                            //newRow1["Branchid"] = dramount["bid"].ToString();
                            lastweekgrandtotal += amount;
                            double temp = 0;
                            double Percentage = 0; double tempPercentage = 0;
                            double.TryParse(dramount["saleQty"].ToString(), out temp);
                            tempPercentage = (temp / lastweaksum) * 100;
                            Percentage = Math.Round(tempPercentage);
                            if (diffpercentage > Percentage)
                            {
                                newRow1["Last Week %"] = Math.Round(diffpercentage - Percentage);
                                newRow1["Wsign"] = "+";
                            }
                            else
                            {
                                newRow1["Last Week %"] = Math.Round(diffpercentage - Percentage);
                                newRow1["Wsign"] = "-";
                            }
                        }
                    }
                    foreach (DataRow dramount in dtLastMonthroutesale.Select("bid='" + Agentid + "' AND salestype='" + Salestype + "'"))
                    {
                        if (cate == "BranchWiseCollections")
                        {
                            float amount = 0;
                            float.TryParse(dramount["salevalue"].ToString(), out amount);
                            newRow1["Last Month"] = Math.Round(amount); ;
                            double Avgqty = amount / 2;
                            lastmonthgrandtotal += amount;
                            double temp = 0;
                            double Percentage = 0; double tempPercentage = 0;
                            double.TryParse(dramount["salevalue"].ToString(), out temp);
                            tempPercentage = (temp / lastmonthsum) * 100;
                            Percentage = Math.Round(tempPercentage);
                            if (diffpercentage > Percentage)
                            {
                                newRow1["Last Month %"] = Math.Round(diffpercentage - Percentage);
                                newRow1["Msign"] = "+";
                            }
                            else
                            {
                                newRow1["Last Month %"] = Math.Round(diffpercentage - Percentage);
                                newRow1["Msign"] = "-";
                            }
                        }
                        else
                        {
                            float amount = 0;
                            float.TryParse(dramount["saleQty"].ToString(), out amount);
                            newRow1["Last Month"] = Math.Round(amount); ;
                            double Avgqty = amount / 2;
                            // newRow1["Last Month Avg"] = Math.Round(Avgqty );

                            //newRow1["Routeid"] = dramount["RouteId"].ToString();
                            //newRow1["Branchid"] = dramount["bid"].ToString();
                            lastmonthgrandtotal += amount;
                            double temp = 0;
                            double Percentage = 0; double tempPercentage = 0;
                            double.TryParse(dramount["saleQty"].ToString(), out temp);
                            tempPercentage = (temp / lastmonthsum) * 100;
                            Percentage = Math.Round(tempPercentage);
                            if (diffpercentage > Percentage)
                            {
                                newRow1["Last Month %"] = Math.Round(diffpercentage - Percentage);
                                newRow1["Msign"] = "+";
                            }
                            else
                            {
                                newRow1["Last Month %"] = Math.Round(diffpercentage - Percentage);
                                newRow1["Msign"] = "-";
                            }
                        }
                    }
                    foreach (DataRow dramount in dtLastYearroutesale.Select("bid='" + Agentid + "' AND salestype='" + Salestype + "'"))
                    {
                        if (cate == "BranchWiseCollections")
                        {
                            float amount = 0;
                            float.TryParse(dramount["salevalue"].ToString(), out amount);
                            newRow1["Last Year"] = Math.Round(amount); ;

                            double Avgqty = amount / 2;
                            // newRow1["Last Year Avg"] = Math.Round(Avgqty );
                            //newRow1["Routeid"] = dramount["RouteId"].ToString();
                            // newRow1["Branchid"] = dramount["bid"].ToString();
                            lastyeargrandtotal += amount;
                            double temp = 0;
                            double Percentage = 0; double tempPercentage = 0;
                            double.TryParse(dramount["salevalue"].ToString(), out temp);
                            tempPercentage = (temp / lastyearsum) * 100;
                            Percentage = Math.Round(tempPercentage);
                            if (diffpercentage > Percentage)
                            {
                                newRow1["Last Year %"] = Math.Round(diffpercentage - Percentage);
                                newRow1["Yesign"] = "+";
                            }
                            else
                            {
                                newRow1["Last Year %"] = Math.Round(diffpercentage - Percentage);
                                newRow1["Yesign"] = "-";
                            }
                        }
                        else
                        {
                            float amount = 0;
                            float.TryParse(dramount["saleQty"].ToString(), out amount);
                            newRow1["Last Year"] = Math.Round(amount); ;

                            double Avgqty = amount / 2;
                            // newRow1["Last Year Avg"] = Math.Round(Avgqty );
                            //newRow1["Routeid"] = dramount["RouteId"].ToString();
                            // newRow1["Branchid"] = dramount["bid"].ToString();
                            lastyeargrandtotal += amount;
                            double temp = 0;
                            double Percentage = 0; double tempPercentage = 0;
                            double.TryParse(dramount["saleQty"].ToString(), out temp);
                            tempPercentage = (temp / lastyearsum) * 100;
                            Percentage = Math.Round(tempPercentage);
                            if (diffpercentage > Percentage)
                            {
                                newRow1["Last Year %"] = Math.Round(diffpercentage - Percentage);
                                newRow1["Yesign"] = "+";
                            }
                            else
                            {
                                newRow1["Last Year %"] = Math.Round(diffpercentage - Percentage);
                                newRow1["Yesign"] = "-";
                            }
                        }
                    }
                    MainReport.Rows.Add(newRow1);
                }
                if (MainReport.Rows.Count > 0)
                {
                    foreach (DataRow dra in MainReport.Select("Routeid='" + ROUTEID + "'"))
                    {
                        DataRow newRow1 = Report.NewRow();
                        newRow1["AgentName"] = dra["AgentName"].ToString();
                        newRow1["Agentid"] = dra["Agentid"].ToString();
                        newRow1["Yester Day"] = dra["Yester Day"].ToString();
                        newRow1["Yester Day %"] = dra["Yester Day %"].ToString();
                        newRow1["Ysign"] = dra["Ysign"].ToString();
                        newRow1["Last Week"] = dra["Last Week"].ToString();
                        newRow1["Last Week %"] = dra["Last Week %"].ToString();
                        newRow1["Wsign"] = dra["Wsign"].ToString();
                        newRow1["Last Month"] = dra["Last Month"].ToString();
                        newRow1["Last Month %"] = dra["Last Month %"].ToString();
                        newRow1["Msign"] = dra["Msign"].ToString();
                        newRow1["Last Year"] = dra["Last Year"].ToString();
                        newRow1["Last Year %"] = dra["Last Year %"].ToString();
                        newRow1["Yesign"] = dra["Yesign"].ToString();
                        Report.Rows.Add(newRow1);
                    }
                }
                DataRow newrow2 = Report.NewRow();
                newrow2["AgentName"] = "Total";
                newrow2["Yester Day"] = Math.Round(yesterdaysum);
                newrow2["Last Week"] = Math.Round(lastweaksum); //lastweaksum;
                newrow2["Last Month"] = Math.Round(lastmonthsum);// lastmonthsum;
                newrow2["Last Year"] = Math.Round(lastyearsum); //lastyearsum;
                Report.Rows.Add(newrow2);
                grdRouteWiseUnderSalesType.DataSource = Report;
                grdRouteWiseUnderSalesType.DataBind();
            }
        }
        catch (Exception ex)
        {
        }
    }
    protected void grdRouteWiseUnderSalesType_RowCommand(object sender, GridViewCommandEventArgs e)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            DateTime fromdate = DateTime.Now;
            DataTable Report = new DataTable();
            DateTime todate = VehicleDBMgr.GetTime(vdbmngr.conn);
            DateTime frmdate = todate.AddDays(-15);
            int rowIndex = Convert.ToInt32(e.CommandArgument);
            GridViewRow row = grdRouteWiseUnderSalesType.Rows[rowIndex];
            string BranchID = Session["ClickBranchid"].ToString();
            string agentid = row.Cells[2].Text;
            string AgentName = row.Cells[1].Text;
            // string ROUTEID = Session["Clickrouteid"].ToString();
            Session["Agentid"] = agentid;
            Session["AgentName"] = AgentName;
            Session["FromDate"] = frmdate.AddDays(-1).ToString("dd/MMM/yy");
            Session["To_Date"] = todate.AddDays(-1).ToString("dd/MMM/yy");
            divHide1.Style.Add("display", "block");
            divMainRouteWiseAgentUnderSalestype.Style.Add("display", "block");
            string vall = ViewState["Val"].ToString();
            cmd = new MySqlCommand("SELECT ROUND(SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost),2) AS Totalsalevalue,ROUND(SUM(indents_subtable.DeliveryQty),2) AS DeliveryQty,products_category.Categoryname, productsdata.ProductName, DATE_FORMAT(indents.I_date, '%d %b %y') AS IndentDate FROM productsdata INNER JOIN indents_subtable ON productsdata.sno = indents_subtable.Product_sno INNER JOIN indents ON indents_subtable.IndentNo = indents.IndentNo INNER JOIN branchdata ON indents.Branch_id = branchdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno WHERE (indents.I_date BETWEEN @d1 AND @d2) AND (branchdata.sno = @BranchID) GROUP BY productsdata.sno, IndentDate ORDER BY indents.I_date");
            cmd.Parameters.AddWithValue("@BranchID", agentid);
            cmd.Parameters.AddWithValue("@d1", GetLowDate(frmdate.AddDays(-1)));
            cmd.Parameters.AddWithValue("@d2", GetHighDate(todate.AddDays(-1)));
            DataTable dtAgent = vdbmngr.SelectQuery(cmd).Tables[0];
            if (dtAgent.Rows.Count <= 0)
            {
                cmd = new MySqlCommand("SELECT ROUND(SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost) ) AS Totalsalevalue, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty, MAX(indents.I_date) AS indentdate FROM productsdata INNER JOIN indents_subtable ON productsdata.sno = indents_subtable.Product_sno INNER JOIN indents ON indents_subtable.IndentNo = indents.IndentNo INNER JOIN branchdata ON indents.Branch_id = branchdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno WHERE (branchdata.sno = @BranchID) AND (indents_subtable.DeliveryQty > 0)");
                cmd.Parameters.AddWithValue("@BranchID", agentid);
                DataTable dtAgent_lastDelivery = vdbmngr.SelectQuery(cmd).Tables[0];
                if (dtAgent_lastDelivery.Rows.Count > 0)
                {
                    string dtlastdel = dtAgent_lastDelivery.Rows[0]["indentdate"].ToString();
                    if (dtlastdel != "")
                    {
                        frmdate = Convert.ToDateTime(dtlastdel).AddDays(1);
                    }
                    cmd = new MySqlCommand("SELECT ROUND(SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost),2) AS Totalsalevalue,ROUND(SUM(indents_subtable.DeliveryQty),2) AS DeliveryQty,products_category.Categoryname, productsdata.ProductName, DATE_FORMAT(indents.I_date, '%d %b %y') AS IndentDate FROM productsdata INNER JOIN indents_subtable ON productsdata.sno = indents_subtable.Product_sno INNER JOIN indents ON indents_subtable.IndentNo = indents.IndentNo INNER JOIN branchdata ON indents.Branch_id = branchdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno WHERE (indents.I_date BETWEEN @d1 AND @d2) AND (branchdata.sno = @BranchID) GROUP BY productsdata.sno, IndentDate ORDER BY indents.I_date");
                    cmd.Parameters.AddWithValue("@BranchID", agentid);
                    cmd.Parameters.AddWithValue("@d1", GetLowDate(frmdate.AddDays(-1)));
                    cmd.Parameters.AddWithValue("@d2", GetHighDate(todate.AddDays(-1)));
                    dtAgent = vdbmngr.SelectQuery(cmd).Tables[0];
                }
            }
            cmd = new MySqlCommand("SELECT Sum(AmountPaid) as AmountPaid , Remarks,  PayTime, EmpID, ReceiptNo, VarifyDate, TransactionType, AmountDebited, DiffAmount, SalesOfficeID, Status FROM collections WHERE (Branchid = @BranchID) AND (TransactionType = @type) AND (Status = @status) AND (PaidDate BETWEEN @d1 AND @d2)");
            cmd.Parameters.AddWithValue("@BranchID", agentid);
            cmd.Parameters.AddWithValue("@d1", GetLowDate(frmdate));
            cmd.Parameters.AddWithValue("@d2", GetHighDate(todate));
            cmd.Parameters.AddWithValue("@type", "Debit");
            cmd.Parameters.AddWithValue("@status", "1");
            DataTable dtdebitamount = vdbmngr.SelectQuery(cmd).Tables[0];
            double debitprice = 0;
            foreach (DataRow dr in dtdebitamount.Rows)
            {
                //if (ChangedTime1 == dr["PDate"].ToString())
                //{
                double amountDebited = 0;

                double.TryParse(dr["AmountDebited"].ToString(), out amountDebited);
                debitprice += amountDebited;
                //}
            }
            cmd = new MySqlCommand("SELECT Branchid, AmountPaid, Remarks, DATE_FORMAT(PaidDate, '%d/%b/%y') AS PDate, PayTime, EmpID, ReceiptNo, VarifyDate, TransactionType, AmountDebited, DiffAmount, SalesOfficeID, Status FROM collections WHERE (Branchid = @BranchID) AND (TransactionType = @type) AND (Status = @status) AND (PaidDate BETWEEN @d1 AND @d2)");
            cmd.Parameters.AddWithValue("@BranchID", agentid);
            cmd.Parameters.AddWithValue("@d1", GetLowDate(frmdate));
            cmd.Parameters.AddWithValue("@d2", GetHighDate(todate));
            cmd.Parameters.AddWithValue("@type", "Debit");
            cmd.Parameters.AddWithValue("@status", "1");
            DataTable dtAgent_Debits = vdbmngr.SelectQuery(cmd).Tables[0];
            cmd = new MySqlCommand("SELECT Amount FROM branchaccounts WHERE (BranchId = @BranchID)");
            cmd.Parameters.AddWithValue("@BranchID", agentid);
            DataTable dtAgent_presentopp = vdbmngr.SelectQuery(cmd).Tables[0];
            double agentpresentopp = 0;
            double.TryParse(dtAgent_presentopp.Rows[0]["Amount"].ToString(), out agentpresentopp);
            agentpresentopp = agentpresentopp - debitprice;
            //cmd = new MySqlCommand("SELECT SUM(AmountPaid) AS AmountPaid, DATE_FORMAT(PaidDate, '%d/%b/%y') AS PaidDate, CheckStatus FROM collections WHERE (Branchid = @BranchID) AND (PaidDate BETWEEN @d1 AND @d2) AND (CheckStatus <> 'P' OR  CheckStatus IS NULL) GROUP BY PaidDate");
            cmd = new MySqlCommand("SELECT SUM(AmountPaid) AS AmountPaid, DATE_FORMAT(PaidDate, '%d/%b/%y') AS PDate, CheckStatus,PaymentType FROM collections WHERE (Branchid = @BranchID) AND (PaidDate BETWEEN @d1 AND @d2) AND (CheckStatus IS NULL)  GROUP BY PDate");
            cmd.Parameters.AddWithValue("@BranchID", agentid);
            cmd.Parameters.AddWithValue("@d1", GetLowDate(frmdate));
            cmd.Parameters.AddWithValue("@d2", GetHighDate(todate));
            DataTable dtAgentDayWiseCollection = vdbmngr.SelectQuery(cmd).Tables[0];
            cmd = new MySqlCommand("SELECT SUM(AmountPaid) AS AmountPaid, DATE_FORMAT(PaidDate, '%d/%b/%y') AS PDate FROM collections WHERE (Branchid = @BranchID) AND (PaidDate BETWEEN @d1 AND @d2) and (tripId is NULL) AND ((PaymentType = 'Incentive') OR (PaymentType = 'Journal Voucher')) GROUP BY PDate");
            cmd.Parameters.AddWithValue("@BranchID", agentid);
            cmd.Parameters.AddWithValue("@d1", GetLowDate(frmdate));
            cmd.Parameters.AddWithValue("@d2", GetHighDate(todate));
            DataTable dtAgentIncentive = vdbmngr.SelectQuery(cmd).Tables[0];
            cmd = new MySqlCommand("SELECT SUM(AmountPaid) AS AmountPaid, DATE_FORMAT(VarifyDate, '%d/%b/%y') AS VarifyDate, CheckStatus FROM collections WHERE (Branchid = @BranchID) AND (CheckStatus = 'V') AND (VarifyDate BETWEEN @d1 AND @d2) GROUP BY VarifyDate");
            cmd.Parameters.AddWithValue("@BranchID", agentid);
            cmd.Parameters.AddWithValue("@d1", GetLowDate(frmdate));
            cmd.Parameters.AddWithValue("@d2", GetHighDate(todate));
            DataTable dtAgentchequeCollection = vdbmngr.SelectQuery(cmd).Tables[0];
            if (dtAgent.Rows.Count > 0)
            {
                DataView view = new DataView(dtAgent);
                DataTable produtstbl = view.ToTable(true, "ProductName", "Categoryname");
                Report = new DataTable();
                Report.Columns.Add("SNo");
                Report.Columns.Add("DeliverDate");
                int count = 0;
                foreach (DataRow dr in produtstbl.Rows)
                {
                    Report.Columns.Add(dr["ProductName"].ToString()).DataType = typeof(Double);
                    count++;
                }
                Report.Columns.Add("Total", typeof(Double)).SetOrdinal(count + 2);
                Report.Columns.Add("Sale Value", typeof(Double)).SetOrdinal(count + 3);
                Report.Columns.Add("Amount Debited", typeof(Double)).SetOrdinal(count + 4);
                Report.Columns.Add("Opp Bal").SetOrdinal(count + 5);
                Report.Columns.Add("Total Amount").SetOrdinal(count + 6);
                Report.Columns.Add("Paid Amount", typeof(Double)).SetOrdinal(count + 7);
                Report.Columns.Add("Incentive/JV", typeof(Double)).SetOrdinal(count + 8);
                Report.Columns.Add("Bal Amount").SetOrdinal(count + 9);
                DataTable distincttable = view.ToTable(true, "IndentDate");
                int i = 1;
                double oppcarry = 0;
                int oppcount = 0;
                TimeSpan dateSpan = todate.Subtract(frmdate);
                int NoOfdays = dateSpan.Days;
                NoOfdays = NoOfdays + 1;
                double totdebitedamount = 0;
                DateTime ServerDateCurrentdate = VehicleDBMgr.GetTime(vdbmngr.conn);
                cmd = new MySqlCommand("SELECT totalsaleamount.totalsale, totalsaleamount.Branch_id, SUM(collections.AmountPaid) AS amountpaid FROM (SELECT SUM(indentssub.DeliveryQty * indentssub.UnitCost) AS totalsale, indents.Branch_id FROM indents INNER JOIN (SELECT IndentNo, Product_sno, Qty, Cost, Remark, DeliveryQty, Status, D_date, unitQty, UnitCost, Sno, PaymentStatus, LeakQty, OTripId, DTripId,DelTime FROM indents_subtable WHERE (D_date BETWEEN @starttime AND @endtime)) indentssub ON indents.IndentNo = indentssub.IndentNo WHERE (indents.Branch_id = @BranchID) GROUP BY indents.Branch_id) totalsaleamount INNER JOIN (SELECT Branchid, UserData_sno, AmountPaid, Denominations, Remarks, Sno, PaidDate, PaymentType, tripId, CheckStatus, ReturnDenomin, PayTime, VEmpID, ChequeNo, EmpID, ReceiptNo FROM collections collections_1 WHERE (Branchid = @BranchID) AND (PaidDate BETWEEN @starttime AND @endtime) AND (CheckStatus IS NULL) OR (Branchid = @BranchID) AND (CheckStatus = 'V') AND (VarifyDate BETWEEN @starttime AND @endtime)) collections ON totalsaleamount.Branch_id = collections.Branchid");
                ////  cmd = new MySqlCommand("SELECT totalsaleamount.totalsale, totalsaleamount.Branch_id, SUM(collections.AmountPaid) AS amountpaid FROM (SELECT SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost) AS totalsale, indents.Branch_id FROM indents INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo WHERE (indents.I_date BETWEEN @starttime AND @endtime) AND (indents.Branch_id = @BranchID) GROUP BY indents.Branch_id) totalsaleamount INNER JOIN (SELECT Branchid, UserData_sno, AmountPaid, Denominations, Remarks, Sno, PaidDate, PaymentType, tripId, CheckStatus, ReturnDenomin, PayTime, VEmpID, ChequeNo, EmpID, ReceiptNo FROM collections collections_1 WHERE (Branchid = @BranchID) AND (PaidDate BETWEEN @starttime AND @endtime) AND (CheckStatus IS NULL) OR (Branchid = @BranchID) AND (CheckStatus = 'V') AND (VarifyDate BETWEEN @starttime AND @endtime)) collections ON totalsaleamount.Branch_id = collections.Branchid"); 
                cmd.Parameters.AddWithValue("@BranchID", agentid);
                cmd.Parameters.AddWithValue("@starttime", GetLowDate(frmdate));
                cmd.Parameters.AddWithValue("@endtime", GetHighDate(ServerDateCurrentdate));
                DataTable dtSaleCollection = vdbmngr.SelectQuery(cmd).Tables[0];
                double totsale = 0;
                double totamt = 0;
                for (int j = 0; j < NoOfdays; j++)
                {
                    //foreach (DataRow branch in distincttable.Rows)
                    //{
                    DataRow newrow = Report.NewRow();
                    newrow["SNo"] = i;
                    string dtcount = frmdate.AddDays(j).ToString();
                    DateTime dtDOE = Convert.ToDateTime(dtcount);
                    //string dtdate1 = branch["IndentDate"].ToString();
                    string dtdate1 = dtDOE.AddDays(-1).ToString();
                    DateTime dtDOE1 = Convert.ToDateTime(dtdate1).AddDays(1);
                    string ChangedTime1 = dtDOE1.ToString("dd/MMM/yy");
                    string ChangedTime2 = dtDOE.AddDays(-1).ToString("dd MMM yy");
                    newrow["DeliverDate"] = ChangedTime1;
                    double amtpaid = 0;
                    double incentiveamtpaid = 0;
                    double totamtpaid = 0;
                    double totincentiveamtpaid = 0;
                    double totchequeamtpaid = 0;
                    double debitedamount = 0;
                    foreach (DataRow drdtclubtotal in dtAgentDayWiseCollection.Select("PDate='" + ChangedTime1 + "'"))
                    {
                        double.TryParse(drdtclubtotal["AmountPaid"].ToString(), out totamtpaid);
                        amtpaid += totamtpaid;
                    }
                    foreach (DataRow drdtincentive in dtAgentIncentive.Select("PDate='" + ChangedTime1 + "'"))
                    {
                        double.TryParse(drdtincentive["AmountPaid"].ToString(), out totincentiveamtpaid);
                        incentiveamtpaid += totincentiveamtpaid;
                    }
                    foreach (DataRow drdtchequeotal in dtAgentchequeCollection.Select("VarifyDate='" + ChangedTime1 + "'"))
                    {
                        double.TryParse(drdtchequeotal["AmountPaid"].ToString(), out totchequeamtpaid);
                        amtpaid += totchequeamtpaid;
                    }
                    if (dtSaleCollection.Rows.Count > 0)
                    {
                        double.TryParse(dtSaleCollection.Rows[0]["totalsale"].ToString(), out totsale);
                        double.TryParse(dtSaleCollection.Rows[0]["amountpaid"].ToString(), out totamt);
                    }
                    else
                    {
                        totsale = 0;
                        totamt = 0;
                    }
                    double total = 0;
                    double Amount = 0;
                    foreach (DataRow dr in dtAgent.Rows)
                    {
                        if (ChangedTime2 == dr["IndentDate"].ToString())
                        {
                            double qtyvalue = 0;
                            double DQty = 0;
                            double.TryParse(dr["DeliveryQty"].ToString(), out DQty);
                            newrow[dr["ProductName"].ToString()] = DQty;
                            double.TryParse(dr["Totalsalevalue"].ToString(), out qtyvalue);
                            Amount += qtyvalue;
                            total += DQty;
                        }
                    }
                    foreach (DataRow dr in dtAgent_Debits.Rows)
                    {
                        if (ChangedTime1 == dr["PDate"].ToString())
                        {
                            double amountDebited = 0;

                            double.TryParse(dr["AmountDebited"].ToString(), out amountDebited);
                            debitedamount += amountDebited;
                            totdebitedamount += amountDebited;
                        }
                    }
                    double aopp = agentpresentopp + totamt - totsale;
                    double actbal = 0;
                    actbal = aopp;
                    if (totdebitedamount == 0.0)
                    {
                        if (oppcarry == 0.0)
                        {
                            aopp = aopp;
                        }
                        else
                        {
                            aopp = oppcarry;
                        }
                    }
                    else
                    {
                        if (debitedamount != 0.0)
                        {
                            //aopp = aopp;
                            if (oppcarry == 0.0)
                            {
                                aopp = aopp;
                            }
                            else
                            {
                                aopp = oppcarry;
                            }
                        }
                        else
                        {
                            aopp = Math.Abs(aopp);
                            aopp = totdebitedamount - aopp;
                            aopp = oppcarry;
                        }
                    }
                    if (totsale == 0)
                    {
                        aopp = oppcarry;
                    }
                    newrow["Total"] = total;
                    newrow["Sale Value"] = Amount;

                    newrow["Opp Bal"] = Math.Round(aopp);
                    double totalamt = aopp + Amount + debitedamount;
                    newrow["Total Amount"] = Math.Round(totalamt);
                    //newrow["Paid Amount"] = amtpaid - incentiveamtpaid;
                    newrow["Paid Amount"] = amtpaid - incentiveamtpaid;
                    newrow["Incentive/JV"] = incentiveamtpaid;
                    newrow["Amount Debited"] = debitedamount;
                    // double tot_amount = amtpaid + incentiveamtpaid;
                    double totalbalance = totalamt - amtpaid;
                    newrow["Bal Amount"] = Math.Round(totalbalance);
                    oppcarry = totalbalance;
                    if (Amount + amtpaid + debitedamount != 0)
                    {
                        Report.Rows.Add(newrow);
                        i++;
                    }
                    totsale = totsale - Amount;
                }
                DataRow newvartical = Report.NewRow();
                newvartical["DeliverDate"] = "Total";
                double val = 0.0;
                foreach (DataColumn dc in Report.Columns)
                {
                    if (dc.DataType == typeof(Double))
                    {
                        val = 0.0;
                        double.TryParse(Report.Compute("sum([" + dc.ToString() + "])", "[" + dc.ToString() + "]<>'0'").ToString(), out val);
                        newvartical[dc.ToString()] = val;
                    }
                }
                Report.Rows.Add(newvartical);
                foreach (DataColumn col in Report.Columns)
                {
                    string Pname = col.ToString();
                    string ProductName = col.ToString();
                    ProductName = GetSpace(ProductName);
                    Report.Columns[Pname].ColumnName = ProductName;
                }
                GridView grd = grdRouteWiseAgentUnderSalesType;
                grd.DataSource = Report;
                grd.DataBind();
            }
            else
            {
                grdRouteWiseAgentUnderSalesType.DataSource = Report;
                grdRouteWiseAgentUnderSalesType.DataBind();
            }
        }
        catch (Exception ex)
        {
        }
    }
    protected void grdRouteWiseAgentUnderSalesType_RowCommand(object sender, GridViewCommandEventArgs e)
    {
        try
        {
        }
        catch (Exception ex)
        {
        }
    }
    protected void grdnewroute_RowCommand(object sender, GridViewCommandEventArgs e)
    {

        try
        {
            vdbmngr = new VehicleDBMgr();
            int rowIndex = Convert.ToInt32(e.CommandArgument);
            GridViewRow row = grdnewroute.Rows[rowIndex];
            string BranchID = Session["ClickBranchid"].ToString();
            string salestype = row.Cells[2].Text;
            string Route_Name = row.Cells[1].Text;
            string route = row.Cells[2].Text;
            Session["RouteId"] = route;
            Session["RouteName"] = Route_Name;
            string ROUTEID = "";
            string val = ViewState["Val"].ToString();
            if (val == "btnRouteclick")
            {
                ROUTEID = Session["Click_Route_id"].ToString();
            }
            else
            {
                ROUTEID = Session["Clickrouteid"].ToString();
            }
            string SectedDataType = ddlDayType.SelectedItem.Value;
            string s = Session["IndDate"].ToString();
            var dt = DateTime.ParseExact(s, "ddd MMM dd yyyy HH:mm:ss 'GMT'zzz", System.Globalization.CultureInfo.InvariantCulture);
            string IndDate = dt.ToString("yyyy-MM-dd");
            DateTime ServerDateCurrentdate = Convert.ToDateTime(IndDate);
            DateTime FromDate = ServerDateCurrentdate;
            string edate = Session["Todate"].ToString();
            var edt = DateTime.ParseExact(edate, "ddd MMM dd yyyy HH:mm:ss 'GMT'zzz", System.Globalization.CultureInfo.InvariantCulture);
            string Tdate = edt.ToString("yyyy-MM-dd");
            DateTime To_Date = Convert.ToDateTime(Tdate);
            DateTime ToDate = To_Date;
            //string Route_Id = Session["Click_Route_id"].ToString();
            // div_MainPlantComparison.Style.Add("display", "block");

            divHide1.Style.Add("display", "block");
            div_agentwisemain1.Style.Add("display", "block");


            string Datatype = "";

            int Ndays = (FromDate - ToDate).Days;
            int countdays = Ndays + 1;

            if (countdays <= 7)
            {
                Datatype = "Monthly";
            }
            else if (countdays <= 30 || countdays <= 8)
            {
                Datatype = "Week";
            }
            else if (countdays == 364 || countdays >= 364)
            {
                Datatype = "Year";
            }
            else
            {
                Datatype = "Monthly";
            }


            DateTime lastmonthfrom = new DateTime();
            DateTime lastmonthto = new DateTime();
            DateTime YearServerDate_Currentdate = Convert.ToDateTime(IndDate);
            DateTime LastYearFromDate = YearServerDate_Currentdate;
            DateTime YearServerDate_Todate = Convert.ToDateTime(Tdate);
            DateTime LastYearToDate = YearServerDate_Todate;
            lastmonthfrom = FromDate.AddMonths(-1);
            lastmonthto = ToDate.AddMonths(-1);
            LastYearFromDate = LastYearFromDate.AddYears(-1);
            LastYearToDate = LastYearToDate.AddYears(-1);



            DataTable dtPresentAllMonth = new DataTable();
            DataTable dtLastYearAllMonth = new DataTable();
            DataTable dtPresentMonth = new DataTable();
            DataTable dtLastMonth = new DataTable();
            DataTable dtLastYearMonth = new DataTable();
            DataTable dtALL = new DataTable();
            double yesterdaygrandtotal = 0; double lastweekgrandtotal = 0;
            double lastmonthgrandtotal = 0; double lastyeargrandtotal = 0;
            if (Datatype == "Monthly")
            {
                #region
                if (SectedDataType == "Day")
                {
                    //string val = ViewState["Val"].ToString();
                    if (val == "btnclick")
                    {

                        cmd = new MySqlCommand("SELECT  modifiedroutes.RouteName, SUM(indents_subtable.DeliveryQty) AS saleQty, SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost) AS salevalue, modifiedroutes.Sno AS routeid, modifidroutssubtab.BranchID AS bid, branchdata_2.BranchName, branchdata_2.flag, branchdata_1.sno AS BranchID,  branchdata_2.SalesType, empmanage.EmpName, branchdata_2.SalesRepresentative FROM  branchdata branchdata_2 RIGHT OUTER JOIN branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT   RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo ON  branchdata_2.sno = modifidroutssubtab.BranchID LEFT OUTER JOIN indents_subtable INNER JOIN (SELECT  IndentNo, I_date, Branch_id FROM  indents WHERE  (I_date BETWEEN @starttime AND @endtime)) indt ON indents_subtable.IndentNo = indt.IndentNo ON  modifidroutssubtab.BranchID = indt.Branch_id INNER JOIN tripdata ON tripdata.Sno = indents_subtable.DTripId INNER JOIN empmanage ON tripdata.EmpId = empmanage.Sno WHERE  (branchdata.SalesType IS NOT NULL) AND (indents_subtable.DeliveryQty <> 0) AND (branchdata_2.SalesType = @salestype) AND (modifiedroutes.Sno = @BranchID) GROUP BY modifidroutssubtab.BranchID ORDER BY branchdata.sno, branchdata_2.RouteID");
                        cmd.Parameters.AddWithValue("@BranchID", salestype);
                        cmd.Parameters.AddWithValue("@salestype", ROUTEID);
                        cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate.AddDays(-1)));
                        cmd.Parameters.AddWithValue("@endtime", GetHighDate(ToDate.AddDays(-1)));
                        DataTable dtyesterdayroutesale = vdbmngr.SelectQuery(cmd).Tables[0];

                        //cmd = new MySqlCommand("SELECT  modifiedroutes.RouteName, ROUND(SUM(indents_subtable.DeliveryQty),2) AS saleQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost) AS salevalue, modifiedroutes.Sno AS routeid, modifidroutssubtab.BranchID AS bid, branchdata_2.BranchName, branchdata_2.flag, branchdata_1.sno AS BranchID,  branchdata_2.SalesType, empmanage.EmpName, branchdata_2.SalesRepresentative FROM  branchdata branchdata_2 RIGHT OUTER JOIN branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT   RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo ON  branchdata_2.sno = modifidroutssubtab.BranchID LEFT OUTER JOIN indents_subtable INNER JOIN (SELECT  IndentNo, I_date, Branch_id FROM  indents WHERE  (I_date BETWEEN @starttime AND @endtime)) indt ON indents_subtable.IndentNo = indt.IndentNo ON  modifidroutssubtab.BranchID = indt.Branch_id INNER JOIN tripdata ON tripdata.Sno = indents_subtable.DTripId INNER JOIN empmanage ON tripdata.EmpId = empmanage.Sno WHERE  (branchdata.SalesType IS NOT NULL) AND (indents_subtable.DeliveryQty <> 0) AND (branchdata_2.SalesType = @salestype) AND (modifiedroutes.Branchid = @BranchID) GROUP BY modifidroutssubtab.BranchID ORDER BY  routeid");
                        //cmd.Parameters.AddWithValue("@salestype", salestype);
                        //cmd.Parameters.AddWithValue("@BranchID", ROUTEID);
                        //cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate.AddDays(-2)));
                        //cmd.Parameters.AddWithValue("@endtime", GetHighDate(ToDate.AddDays(-2)));
                        //DataTable dtyesterdayroutesale = vdbmngr.SelectQuery(cmd).Tables[0];


                        cmd = new MySqlCommand("SELECT  modifiedroutes.RouteName, SUM(indents_subtable.DeliveryQty) AS saleQty, SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost) AS salevalue, modifiedroutes.Sno AS routeid, modifidroutssubtab.BranchID AS bid, branchdata_2.BranchName, branchdata_2.flag, branchdata_1.sno AS BranchID,  branchdata_2.SalesType, empmanage.EmpName, branchdata_2.SalesRepresentative FROM  branchdata branchdata_2 RIGHT OUTER JOIN branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT   RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo ON  branchdata_2.sno = modifidroutssubtab.BranchID LEFT OUTER JOIN indents_subtable INNER JOIN (SELECT  IndentNo, I_date, Branch_id FROM  indents WHERE  (I_date BETWEEN @starttime AND @endtime)) indt ON indents_subtable.IndentNo = indt.IndentNo ON  modifidroutssubtab.BranchID = indt.Branch_id INNER JOIN tripdata ON tripdata.Sno = indents_subtable.DTripId INNER JOIN empmanage ON tripdata.EmpId = empmanage.Sno WHERE  (branchdata.SalesType IS NOT NULL) AND (indents_subtable.DeliveryQty <> 0) AND (branchdata_2.SalesType = @salestype) AND (modifiedroutes.Sno = @BranchID) GROUP BY modifidroutssubtab.BranchID ORDER BY branchdata.sno, branchdata_2.RouteID");
                        cmd.Parameters.AddWithValue("@BranchID", salestype);
                        cmd.Parameters.AddWithValue("@salestype", ROUTEID);
                        cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate.AddDays(-7)));
                        cmd.Parameters.AddWithValue("@endtime", GetHighDate(ToDate.AddDays(-7)));
                        DataTable dtLastweakroutesale = vdbmngr.SelectQuery(cmd).Tables[0];



                        cmd = new MySqlCommand("SELECT  modifiedroutes.RouteName, SUM(indents_subtable.DeliveryQty) AS saleQty, SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost) AS salevalue, modifiedroutes.Sno AS routeid, modifidroutssubtab.BranchID AS bid, branchdata_2.BranchName, branchdata_2.flag, branchdata_1.sno AS BranchID,  branchdata_2.SalesType, empmanage.EmpName, branchdata_2.SalesRepresentative FROM  branchdata branchdata_2 RIGHT OUTER JOIN branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT   RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo ON  branchdata_2.sno = modifidroutssubtab.BranchID LEFT OUTER JOIN indents_subtable INNER JOIN (SELECT  IndentNo, I_date, Branch_id FROM  indents WHERE  (I_date BETWEEN @starttime AND @endtime)) indt ON indents_subtable.IndentNo = indt.IndentNo ON  modifidroutssubtab.BranchID = indt.Branch_id INNER JOIN tripdata ON tripdata.Sno = indents_subtable.DTripId INNER JOIN empmanage ON tripdata.EmpId = empmanage.Sno WHERE  (branchdata.SalesType IS NOT NULL) AND (indents_subtable.DeliveryQty <> 0) AND (branchdata_2.SalesType = @salestype) AND (modifiedroutes.Sno = @BranchID) GROUP BY modifidroutssubtab.BranchID ORDER BY branchdata.sno, branchdata_2.RouteID");
                        cmd.Parameters.AddWithValue("@BranchID", salestype);
                        cmd.Parameters.AddWithValue("@salestype", ROUTEID);
                        cmd.Parameters.AddWithValue("@starttime", GetLowDate(lastmonthfrom));
                        cmd.Parameters.AddWithValue("@endtime", GetHighDate(lastmonthto));
                        DataTable dtLastMonthroutesale = vdbmngr.SelectQuery(cmd).Tables[0];



                        cmd = new MySqlCommand("SELECT  modifiedroutes.RouteName, SUM(indents_subtable.DeliveryQty) AS saleQty, SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost) AS salevalue, modifiedroutes.Sno AS routeid, modifidroutssubtab.BranchID AS bid, branchdata_2.BranchName, branchdata_2.flag, branchdata_1.sno AS BranchID,  branchdata_2.SalesType, empmanage.EmpName, branchdata_2.SalesRepresentative FROM  branchdata branchdata_2 RIGHT OUTER JOIN branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT   RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo ON  branchdata_2.sno = modifidroutssubtab.BranchID LEFT OUTER JOIN indents_subtable INNER JOIN (SELECT  IndentNo, I_date, Branch_id FROM  indents WHERE  (I_date BETWEEN @starttime AND @endtime)) indt ON indents_subtable.IndentNo = indt.IndentNo ON  modifidroutssubtab.BranchID = indt.Branch_id INNER JOIN tripdata ON tripdata.Sno = indents_subtable.DTripId INNER JOIN empmanage ON tripdata.EmpId = empmanage.Sno WHERE  (branchdata.SalesType IS NOT NULL) AND (indents_subtable.DeliveryQty <> 0) AND (branchdata_2.SalesType = @salestype) AND (modifiedroutes.Sno = @BranchID) GROUP BY modifidroutssubtab.BranchID ORDER BY branchdata.sno, branchdata_2.RouteID");
                        cmd.Parameters.AddWithValue("@BranchID", salestype);
                        cmd.Parameters.AddWithValue("@salestype", ROUTEID);
                        cmd.Parameters.AddWithValue("@starttime", GetLowDate(LastYearFromDate));
                        cmd.Parameters.AddWithValue("@endtime", GetHighDate(LastYearToDate));
                        DataTable dtLastYearroutesale = vdbmngr.SelectQuery(cmd).Tables[0];

                        DataTable dtAll = new DataTable();
                        dtAll.Merge(dtyesterdayroutesale);
                        dtAll.Merge(dtLastweakroutesale);
                        dtAll.Merge(dtLastMonthroutesale);
                        dtAll.Merge(dtLastYearroutesale);

                        DataView TotalView = new DataView(dtAll);
                        DataTable dtdistinctRoutename = TotalView.ToTable(true, "SalesType", "bid", "BranchName", "RouteName", "routeid");
                        DataView dv = dtdistinctRoutename.DefaultView;
                        dv.Sort = "routeid ASC";
                        DataTable sortedProductDT = dv.ToTable();
                        DataTable MainReport = new DataTable();
                        MainReport.Columns.Add("RouteName");
                        MainReport.Columns.Add("AgentName");
                        MainReport.Columns.Add("Routeid");
                        MainReport.Columns.Add("Agentid");
                        MainReport.Columns.Add("AvgRate");
                        MainReport.Columns.Add("SaleQty");
                        MainReport.Columns.Add("SaleValue");

                        DataTable Report = new DataTable();
                        Report.Columns.Add("AgentName");
                        Report.Columns.Add("Agentid");
                        Report.Columns.Add("AvgRate");
                        Report.Columns.Add("SaleQty");
                        Report.Columns.Add("SaleValue");

                        double yesterdaysum = Convert.ToDouble(dtyesterdayroutesale.Compute("SUM(saleQty)", "BranchID=" + BranchID + "AND SalesType=" + ROUTEID + ""));
                        double yesterdayvaluesum = Convert.ToDouble(dtLastweakroutesale.Compute("SUM(salevalue)", "BranchID=" + BranchID + "AND SalesType=" + ROUTEID + ""));
                        foreach (DataRow drroute in sortedProductDT.Rows)
                        {
                            double agcompare = 0;
                            string Agentid = drroute["bid"].ToString();
                            string AgentName = drroute["BranchName"].ToString();
                            string Salestype = drroute["SalesType"].ToString();
                            string RouteName = drroute["RouteName"].ToString();
                            DataRow newRow1 = MainReport.NewRow();
                            newRow1["AgentName"] = AgentName;
                            newRow1["Agentid"] = Agentid;
                            newRow1["Routeid"] = drroute["routeid"].ToString();
                            newRow1["RouteName"] = RouteName;
                            foreach (DataRow dramount in dtyesterdayroutesale.Select("bid='" + Agentid + "' AND salestype='" + Salestype + "'"))
                            {
                                float amount = 0; double valuepercentage = 0; double qtypercentage = 0;
                                double temp = 0;
                                double.TryParse(dramount["saleQty"].ToString(), out temp);
                                qtypercentage = (temp / yesterdaysum) * 100;
                                newRow1["SaleQty"] = Math.Round(temp) + "(" + Math.Round(qtypercentage, 0) + "%)"; ; ;
                                float salevalue = 0;
                                float.TryParse(dramount["salevalue"].ToString(), out salevalue);
                                valuepercentage = (Math.Round(salevalue, 2) / yesterdayvaluesum) * 100;
                                newRow1["SaleValue"] = Math.Round(salevalue, 2) + "(" + Math.Round(valuepercentage, 0) + "%)"; ;
                                //double Avgqty = amount / 2;

                                //double AvgRate = salevalue / temp;
                                //// newrow["Yester Day Avg"] = Math.Round(Avgqty );
                                //newRow1["AvgRate"] = Math.Round(AvgRate);

                                // newRow1["Yester Day Avg"] = Math.Round(Avgqty );
                                //newRow1["Routeid"] = dramount["RouteId"].ToString();
                                // newRow1["Branchid"] = dramount["bid"].ToString();
                                // yesterdaygrandtotal += amount;
                            }
                            MainReport.Rows.Add(newRow1);
                        }
                        if (MainReport.Rows.Count > 0)
                        {
                            foreach (DataRow dra in MainReport.Select("Routeid='" + salestype + "'"))
                            {
                                DataRow newRow1 = Report.NewRow();
                                newRow1["AgentName"] = dra["AgentName"].ToString();
                                newRow1["Agentid"] = dra["Agentid"].ToString();
                                newRow1["SaleQty"] = dra["SaleQty"].ToString();
                                newRow1["SaleValue"] = dra["SaleValue"].ToString();
                                //newRow1["AvgRate"] = dra["AvgRate"].ToString();
                                Report.Rows.Add(newRow1);
                            }
                        }
                        DataRow newrow2 = Report.NewRow();
                        newrow2["AgentName"] = "Total";
                        //double Avg_Rate = yesterdayvaluesum / yesterdaysum;
                        //// newrow["Yester Day Avg"] = Math.Round(Avgqty );
                        //newrow2["AvgRate"] = Math.Round(Avg_Rate);
                        newrow2["SaleQty"] = Math.Round(yesterdaysum);
                        newrow2["SaleValue"] = Math.Round(yesterdayvaluesum); //lastweaksum;
                        //newrow2["Last Month"] = Math.Round(lastmonthsum );// lastmonthsum;
                        //newrow2["Last Year"] = Math.Round(lastyearsum ); //lastyearsum;
                        Report.Rows.Add(newrow2);
                        grdAgentReport.DataSource = Report;
                        grdAgentReport.DataBind();
                    }
                    else
                    {
                        cmd = new MySqlCommand("SELECT  modifiedroutes.RouteName, SUM(indents_subtable.DeliveryQty) AS saleQty, SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost) AS salevalue, modifiedroutes.Sno AS routeid, modifidroutssubtab.BranchID AS bid, branchdata_2.BranchName, branchdata_2.flag, branchdata_1.sno AS BranchID,  branchdata_2.SalesType, empmanage.EmpName, branchdata_2.SalesRepresentative FROM  branchdata branchdata_2 RIGHT OUTER JOIN branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT   RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo ON  branchdata_2.sno = modifidroutssubtab.BranchID LEFT OUTER JOIN indents_subtable INNER JOIN (SELECT  IndentNo, I_date, Branch_id FROM  indents WHERE  (I_date BETWEEN @starttime AND @endtime)) indt ON indents_subtable.IndentNo = indt.IndentNo ON  modifidroutssubtab.BranchID = indt.Branch_id INNER JOIN tripdata ON tripdata.Sno = indents_subtable.DTripId INNER JOIN empmanage ON tripdata.EmpId = empmanage.Sno WHERE  (branchdata.SalesType IS NOT NULL) AND (indents_subtable.DeliveryQty <> 0) AND (branchdata_2.SalesType = @salestype) AND (modifiedroutes.Sno = @BranchID) GROUP BY modifidroutssubtab.BranchID ORDER BY branchdata.sno, branchdata_2.RouteID");
                        cmd.Parameters.AddWithValue("@BranchID", salestype);
                        cmd.Parameters.AddWithValue("@salestype", ROUTEID);
                        cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate.AddDays(-1)));
                        cmd.Parameters.AddWithValue("@endtime", GetHighDate(ToDate.AddDays(-1)));
                        DataTable dtyesterdayroutesale = vdbmngr.SelectQuery(cmd).Tables[0];

                        //cmd = new MySqlCommand("SELECT  modifiedroutes.RouteName, ROUND(SUM(indents_subtable.DeliveryQty),2) AS saleQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost) AS salevalue, modifiedroutes.Sno AS routeid, modifidroutssubtab.BranchID AS bid, branchdata_2.BranchName, branchdata_2.flag, branchdata_1.sno AS BranchID,  branchdata_2.SalesType, empmanage.EmpName, branchdata_2.SalesRepresentative FROM  branchdata branchdata_2 RIGHT OUTER JOIN branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT   RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo ON  branchdata_2.sno = modifidroutssubtab.BranchID LEFT OUTER JOIN indents_subtable INNER JOIN (SELECT  IndentNo, I_date, Branch_id FROM  indents WHERE  (I_date BETWEEN @starttime AND @endtime)) indt ON indents_subtable.IndentNo = indt.IndentNo ON  modifidroutssubtab.BranchID = indt.Branch_id INNER JOIN tripdata ON tripdata.Sno = indents_subtable.DTripId INNER JOIN empmanage ON tripdata.EmpId = empmanage.Sno WHERE  (branchdata.SalesType IS NOT NULL) AND (indents_subtable.DeliveryQty <> 0) AND (branchdata_2.SalesType = @salestype) AND (modifiedroutes.Branchid = @BranchID) GROUP BY modifidroutssubtab.BranchID ORDER BY  routeid");
                        //cmd.Parameters.AddWithValue("@salestype", salestype);
                        //cmd.Parameters.AddWithValue("@BranchID", ROUTEID);
                        //cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate.AddDays(-2)));
                        //cmd.Parameters.AddWithValue("@endtime", GetHighDate(ToDate.AddDays(-2)));
                        //DataTable dtyesterdayroutesale = vdbmngr.SelectQuery(cmd).Tables[0];


                        cmd = new MySqlCommand("SELECT  modifiedroutes.RouteName, SUM(indents_subtable.DeliveryQty) AS saleQty, SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost) AS salevalue, modifiedroutes.Sno AS routeid, modifidroutssubtab.BranchID AS bid, branchdata_2.BranchName, branchdata_2.flag, branchdata_1.sno AS BranchID,  branchdata_2.SalesType, empmanage.EmpName, branchdata_2.SalesRepresentative FROM  branchdata branchdata_2 RIGHT OUTER JOIN branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT   RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo ON  branchdata_2.sno = modifidroutssubtab.BranchID LEFT OUTER JOIN indents_subtable INNER JOIN (SELECT  IndentNo, I_date, Branch_id FROM  indents WHERE  (I_date BETWEEN @starttime AND @endtime)) indt ON indents_subtable.IndentNo = indt.IndentNo ON  modifidroutssubtab.BranchID = indt.Branch_id INNER JOIN tripdata ON tripdata.Sno = indents_subtable.DTripId INNER JOIN empmanage ON tripdata.EmpId = empmanage.Sno WHERE  (branchdata.SalesType IS NOT NULL) AND (indents_subtable.DeliveryQty <> 0) AND (branchdata_2.SalesType = @salestype) AND (modifiedroutes.Sno = @BranchID) GROUP BY modifidroutssubtab.BranchID ORDER BY branchdata.sno, branchdata_2.RouteID");
                        cmd.Parameters.AddWithValue("@BranchID", salestype);
                        cmd.Parameters.AddWithValue("@salestype", ROUTEID);
                        cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate.AddDays(-7)));
                        cmd.Parameters.AddWithValue("@endtime", GetHighDate(ToDate.AddDays(-7)));
                        DataTable dtLastweakroutesale = vdbmngr.SelectQuery(cmd).Tables[0];



                        cmd = new MySqlCommand("SELECT  modifiedroutes.RouteName, SUM(indents_subtable.DeliveryQty) AS saleQty, SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost) AS salevalue, modifiedroutes.Sno AS routeid, modifidroutssubtab.BranchID AS bid, branchdata_2.BranchName, branchdata_2.flag, branchdata_1.sno AS BranchID,  branchdata_2.SalesType, empmanage.EmpName, branchdata_2.SalesRepresentative FROM  branchdata branchdata_2 RIGHT OUTER JOIN branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT   RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo ON  branchdata_2.sno = modifidroutssubtab.BranchID LEFT OUTER JOIN indents_subtable INNER JOIN (SELECT  IndentNo, I_date, Branch_id FROM  indents WHERE  (I_date BETWEEN @starttime AND @endtime)) indt ON indents_subtable.IndentNo = indt.IndentNo ON  modifidroutssubtab.BranchID = indt.Branch_id INNER JOIN tripdata ON tripdata.Sno = indents_subtable.DTripId INNER JOIN empmanage ON tripdata.EmpId = empmanage.Sno WHERE  (branchdata.SalesType IS NOT NULL) AND (indents_subtable.DeliveryQty <> 0) AND (branchdata_2.SalesType = @salestype) AND (modifiedroutes.Sno = @BranchID) GROUP BY modifidroutssubtab.BranchID ORDER BY branchdata.sno, branchdata_2.RouteID");
                        cmd.Parameters.AddWithValue("@BranchID", salestype);
                        cmd.Parameters.AddWithValue("@salestype", ROUTEID);
                        cmd.Parameters.AddWithValue("@starttime", GetLowDate(lastmonthfrom));
                        cmd.Parameters.AddWithValue("@endtime", GetHighDate(lastmonthto));
                        DataTable dtLastMonthroutesale = vdbmngr.SelectQuery(cmd).Tables[0];



                        cmd = new MySqlCommand("SELECT  modifiedroutes.RouteName, SUM(indents_subtable.DeliveryQty) AS saleQty, SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost) AS salevalue, modifiedroutes.Sno AS routeid, modifidroutssubtab.BranchID AS bid, branchdata_2.BranchName, branchdata_2.flag, branchdata_1.sno AS BranchID,  branchdata_2.SalesType, empmanage.EmpName, branchdata_2.SalesRepresentative FROM  branchdata branchdata_2 RIGHT OUTER JOIN branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT   RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo ON  branchdata_2.sno = modifidroutssubtab.BranchID LEFT OUTER JOIN indents_subtable INNER JOIN (SELECT  IndentNo, I_date, Branch_id FROM  indents WHERE  (I_date BETWEEN @starttime AND @endtime)) indt ON indents_subtable.IndentNo = indt.IndentNo ON  modifidroutssubtab.BranchID = indt.Branch_id INNER JOIN tripdata ON tripdata.Sno = indents_subtable.DTripId INNER JOIN empmanage ON tripdata.EmpId = empmanage.Sno WHERE  (branchdata.SalesType IS NOT NULL) AND (indents_subtable.DeliveryQty <> 0) AND (branchdata_2.SalesType = @salestype) AND (modifiedroutes.Sno = @BranchID) GROUP BY modifidroutssubtab.BranchID ORDER BY branchdata.sno, branchdata_2.RouteID");
                        cmd.Parameters.AddWithValue("@BranchID", salestype);
                        cmd.Parameters.AddWithValue("@salestype", ROUTEID);
                        cmd.Parameters.AddWithValue("@starttime", GetLowDate(LastYearFromDate));
                        cmd.Parameters.AddWithValue("@endtime", GetHighDate(LastYearToDate));
                        DataTable dtLastYearroutesale = vdbmngr.SelectQuery(cmd).Tables[0];

                        DataTable dtAll = new DataTable();
                        dtAll.Merge(dtyesterdayroutesale);
                        dtAll.Merge(dtLastweakroutesale);
                        dtAll.Merge(dtLastMonthroutesale);
                        dtAll.Merge(dtLastYearroutesale);

                        DataView TotalView = new DataView(dtAll);
                        DataTable dtdistinctRoutename = TotalView.ToTable(true, "SalesType", "bid", "BranchName", "RouteName", "routeid");
                        DataView dv = dtdistinctRoutename.DefaultView;
                        dv.Sort = "routeid ASC";
                        DataTable sortedProductDT = dv.ToTable();
                        DataTable MainReport = new DataTable();
                        MainReport.Columns.Add("RouteName");
                        MainReport.Columns.Add("AgentName");
                        MainReport.Columns.Add("Routeid");
                        MainReport.Columns.Add("Agentid");
                        MainReport.Columns.Add("Yester Day").DataType = typeof(Double);
                        MainReport.Columns.Add("Yester Day %").DataType = typeof(Double);
                        MainReport.Columns.Add("Ysign");
                        MainReport.Columns.Add("Last Week").DataType = typeof(Double);
                        MainReport.Columns.Add("Last Week %").DataType = typeof(Double);
                        MainReport.Columns.Add("Wsign");
                        MainReport.Columns.Add("Last Month").DataType = typeof(Double);
                        MainReport.Columns.Add("Last Month %").DataType = typeof(Double);
                        MainReport.Columns.Add("Msign");
                        MainReport.Columns.Add("Last Year").DataType = typeof(Double);
                        MainReport.Columns.Add("Last Year %").DataType = typeof(Double);
                        MainReport.Columns.Add("Yesign");


                        DataTable Report = new DataTable();
                        Report.Columns.Add("AgentName");
                        Report.Columns.Add("Agentid");
                        Report.Columns.Add("Yester Day");
                        Report.Columns.Add("Yester Day %");
                        Report.Columns.Add("Ysign");
                        Report.Columns.Add("Last Week");
                        Report.Columns.Add("Last Week %");
                        Report.Columns.Add("Wsign");
                        Report.Columns.Add("Last Month");
                        Report.Columns.Add("Last Month %");
                        Report.Columns.Add("Msign");
                        Report.Columns.Add("Last Year");
                        Report.Columns.Add("Last Year %");
                        Report.Columns.Add("Yesign");
                        // naveen002
                        string cate = ddlbarnchCategory.SelectedItem.Value;
                        double yesterdaysum = 0;
                        double lastweaksum = 0;
                        double lastmonthsum = 0;
                        double lastyearsum = 0;
                        if (cate == "BranchWiseCollections")
                        {
                            if (BranchID == "174")
                            {
                                yesterdaysum = Convert.ToDouble(dtyesterdayroutesale.Compute("SUM(salevalue)", "SalesType=" + ROUTEID + ""));
                                lastweaksum = Convert.ToDouble(dtLastweakroutesale.Compute("SUM(salevalue)", "SalesType=" + ROUTEID + ""));
                                lastmonthsum = Convert.ToDouble(dtLastMonthroutesale.Compute("SUM(salevalue)", "SalesType=" + ROUTEID + ""));
                                if (dtLastYearroutesale.Rows.Count > 0)
                                {
                                    lastyearsum = Convert.ToDouble(dtLastYearroutesale.Compute("SUM(salevalue)", "SalesType=" + ROUTEID + ""));
                                }
                            }
                            else
                            {
                                yesterdaysum = Convert.ToDouble(dtyesterdayroutesale.Compute("SUM(salevalue)", "BranchID=" + BranchID + "AND SalesType=" + ROUTEID + ""));
                                lastweaksum = Convert.ToDouble(dtLastweakroutesale.Compute("SUM(salevalue)", "BranchID=" + BranchID + "AND SalesType=" + ROUTEID + ""));
                                lastmonthsum = Convert.ToDouble(dtLastMonthroutesale.Compute("SUM(salevalue)", "BranchID=" + BranchID + "AND SalesType=" + ROUTEID + ""));
                                if (dtLastYearroutesale.Rows.Count > 0)
                                {
                                    lastyearsum = Convert.ToDouble(dtLastYearroutesale.Compute("SUM(salevalue)", "BranchID=" + BranchID + "AND SalesType=" + ROUTEID + ""));
                                }
                            }
                        }
                        else
                        {
                            if (BranchID == "174")
                            {
                                yesterdaysum = Convert.ToDouble(dtyesterdayroutesale.Compute("SUM(saleQty)", "SalesType=" + ROUTEID + ""));
                                lastweaksum = Convert.ToDouble(dtLastweakroutesale.Compute("SUM(saleQty)", "SalesType=" + ROUTEID + ""));
                                lastmonthsum = Convert.ToDouble(dtLastMonthroutesale.Compute("SUM(saleQty)", "SalesType=" + ROUTEID + ""));
                                if (dtLastYearroutesale.Rows.Count > 0)
                                {
                                    lastyearsum = Convert.ToDouble(dtLastYearroutesale.Compute("SUM(saleQty)", "SalesType=" + ROUTEID + ""));
                                }
                            }
                            else
                            {
                                yesterdaysum = Convert.ToDouble(dtyesterdayroutesale.Compute("SUM(saleQty)", "BranchID=" + BranchID + "AND SalesType=" + ROUTEID + ""));
                                lastweaksum = Convert.ToDouble(dtLastweakroutesale.Compute("SUM(saleQty)", "BranchID=" + BranchID + "AND SalesType=" + ROUTEID + ""));
                                lastmonthsum = Convert.ToDouble(dtLastMonthroutesale.Compute("SUM(saleQty)", "BranchID=" + BranchID + "AND SalesType=" + ROUTEID + ""));
                                if (dtLastYearroutesale.Rows.Count > 0)
                                {
                                    lastyearsum = Convert.ToDouble(dtLastYearroutesale.Compute("SUM(saleQty)", "BranchID=" + BranchID + "AND SalesType=" + ROUTEID + ""));
                                }
                            }
                        }

                        foreach (DataRow drroute in sortedProductDT.Rows)
                        {
                            double agcompare = 0; double diffpercentage = 0;
                            string Agentid = drroute["bid"].ToString();
                            string AgentName = drroute["BranchName"].ToString();
                            string Salestype = drroute["SalesType"].ToString();
                            string RouteName = drroute["RouteName"].ToString();
                            DataRow newRow1 = MainReport.NewRow();
                            newRow1["AgentName"] = AgentName;
                            newRow1["Agentid"] = Agentid;
                            newRow1["Routeid"] = drroute["routeid"].ToString();
                            newRow1["RouteName"] = RouteName;
                            foreach (DataRow dramount in dtyesterdayroutesale.Select("bid='" + Agentid + "' AND salestype='" + Salestype + "'"))
                            {
                                if (cate == "BranchWiseCollections")
                                {
                                    float amount = 0;
                                    float.TryParse(dramount["salevalue"].ToString(), out amount);
                                    newRow1["Yester Day"] = Math.Round(amount);
                                    double Avgqty = amount / 2;
                                    yesterdaygrandtotal += amount;
                                    double temp = 0;
                                    double Percentage = 0; double tempPercentage = 0;
                                    double.TryParse(dramount["salevalue"].ToString(), out temp);
                                    tempPercentage = (temp / yesterdaysum) * 100;
                                    Percentage = Math.Round(tempPercentage);
                                    newRow1["Yester Day %"] = Percentage;
                                    agcompare = Percentage;
                                    diffpercentage = Percentage;
                                }
                                else
                                {
                                    float amount = 0;
                                    float.TryParse(dramount["saleQty"].ToString(), out amount);
                                    newRow1["Yester Day"] = Math.Round(amount);
                                    double Avgqty = amount / 2;
                                    yesterdaygrandtotal += amount;
                                    double temp = 0;
                                    double Percentage = 0; double tempPercentage = 0;
                                    double.TryParse(dramount["saleQty"].ToString(), out temp);
                                    tempPercentage = (temp / yesterdaysum) * 100;
                                    Percentage = Math.Round(tempPercentage);
                                    newRow1["Yester Day %"] = Percentage;
                                    agcompare = Percentage;
                                    diffpercentage = Percentage;
                                }
                            }
                            foreach (DataRow dramount in dtLastweakroutesale.Select("bid='" + Agentid + "' AND salestype='" + Salestype + "'"))
                            {
                                if (cate == "BranchWiseCollections")
                                {
                                    float amount = 0;
                                    float.TryParse(dramount["salevalue"].ToString(), out amount);
                                    newRow1["Last Week"] = Math.Round(amount);
                                    double Avgqty = amount / 2;
                                    lastweekgrandtotal += amount;
                                    double temp = 0;
                                    double Percentage = 0; double tempPercentage = 0;
                                    double.TryParse(dramount["salevalue"].ToString(), out temp);
                                    tempPercentage = (temp / lastweaksum) * 100;
                                    Percentage = Math.Round(tempPercentage);
                                    if (diffpercentage > Percentage)
                                    {
                                        newRow1["Last Week %"] = Math.Round(diffpercentage - Percentage);
                                        newRow1["Wsign"] = "+";
                                    }
                                    else
                                    {
                                        newRow1["Last Week %"] = Math.Round(diffpercentage - Percentage);
                                        newRow1["Wsign"] = "-";
                                    }
                                }
                                else
                                {
                                    float amount = 0;
                                    float.TryParse(dramount["saleQty"].ToString(), out amount);
                                    newRow1["Last Week"] = Math.Round(amount);
                                    double Avgqty = amount / 2;
                                    // newRow1["Last Week Avg"] = Math.Round(Avgqty );
                                    //newRow1["SalestypeId"] = SalestypeId;
                                    //newRow1["Routeid"] = dramount["RouteId"].ToString();
                                    //newRow1["Branchid"] = dramount["bid"].ToString();
                                    lastweekgrandtotal += amount;
                                    double temp = 0;
                                    double Percentage = 0; double tempPercentage = 0;
                                    double.TryParse(dramount["saleQty"].ToString(), out temp);
                                    tempPercentage = (temp / lastweaksum) * 100;
                                    Percentage = Math.Round(tempPercentage);
                                    if (diffpercentage > Percentage)
                                    {
                                        newRow1["Last Week %"] = Math.Round(diffpercentage - Percentage);
                                        newRow1["Wsign"] = "+";
                                    }
                                    else
                                    {
                                        newRow1["Last Week %"] = Math.Round(diffpercentage - Percentage);
                                        newRow1["Wsign"] = "-";
                                    }
                                }
                            }
                            foreach (DataRow dramount in dtLastMonthroutesale.Select("bid='" + Agentid + "' AND salestype='" + Salestype + "'"))
                            {
                                if (cate == "BranchWiseCollections")
                                {
                                    float amount = 0;
                                    float.TryParse(dramount["salevalue"].ToString(), out amount);
                                    newRow1["Last Month"] = Math.Round(amount); ;
                                    double Avgqty = amount / 2;
                                    lastmonthgrandtotal += amount;
                                    double temp = 0;
                                    double Percentage = 0; double tempPercentage = 0;
                                    double.TryParse(dramount["salevalue"].ToString(), out temp);
                                    tempPercentage = (temp / lastmonthsum) * 100;
                                    Percentage = Math.Round(tempPercentage);
                                    if (diffpercentage > Percentage)
                                    {
                                        newRow1["Last Month %"] = Math.Round(diffpercentage - Percentage);
                                        newRow1["Msign"] = "+";
                                    }
                                    else
                                    {
                                        newRow1["Last Month %"] = Math.Round(diffpercentage - Percentage);
                                        newRow1["Msign"] = "-";
                                    }
                                }
                                else
                                {
                                    float amount = 0;
                                    float.TryParse(dramount["saleQty"].ToString(), out amount);
                                    newRow1["Last Month"] = Math.Round(amount); ;
                                    double Avgqty = amount / 2;
                                    // newRow1["Last Month Avg"] = Math.Round(Avgqty );

                                    //newRow1["Routeid"] = dramount["RouteId"].ToString();
                                    //newRow1["Branchid"] = dramount["bid"].ToString();
                                    lastmonthgrandtotal += amount;
                                    double temp = 0;
                                    double Percentage = 0; double tempPercentage = 0;
                                    double.TryParse(dramount["saleQty"].ToString(), out temp);
                                    tempPercentage = (temp / lastmonthsum) * 100;
                                    Percentage = Math.Round(tempPercentage);
                                    if (diffpercentage > Percentage)
                                    {
                                        newRow1["Last Month %"] = Math.Round(diffpercentage - Percentage);
                                        newRow1["Msign"] = "+";
                                    }
                                    else
                                    {
                                        newRow1["Last Month %"] = Math.Round(diffpercentage - Percentage);
                                        newRow1["Msign"] = "-";
                                    }
                                }
                            }
                            foreach (DataRow dramount in dtLastYearroutesale.Select("bid='" + Agentid + "' AND salestype='" + Salestype + "'"))
                            {
                                if (cate == "BranchWiseCollections")
                                {
                                    float amount = 0;
                                    float.TryParse(dramount["salevalue"].ToString(), out amount);
                                    newRow1["Last Year"] = Math.Round(amount); ;

                                    double Avgqty = amount / 2;
                                    // newRow1["Last Year Avg"] = Math.Round(Avgqty );
                                    //newRow1["Routeid"] = dramount["RouteId"].ToString();
                                    // newRow1["Branchid"] = dramount["bid"].ToString();
                                    lastyeargrandtotal += amount;
                                    double temp = 0;
                                    double Percentage = 0; double tempPercentage = 0;
                                    double.TryParse(dramount["salevalue"].ToString(), out temp);
                                    tempPercentage = (temp / lastyearsum) * 100;
                                    Percentage = Math.Round(tempPercentage);
                                    if (diffpercentage > Percentage)
                                    {
                                        newRow1["Last Year %"] = Math.Round(diffpercentage - Percentage);
                                        newRow1["Yesign"] = "+";
                                    }
                                    else
                                    {
                                        newRow1["Last Year %"] = Math.Round(diffpercentage - Percentage);
                                        newRow1["Yesign"] = "-";
                                    }
                                }
                                else
                                {
                                    float amount = 0;
                                    float.TryParse(dramount["saleQty"].ToString(), out amount);
                                    newRow1["Last Year"] = Math.Round(amount); ;

                                    double Avgqty = amount / 2;
                                    // newRow1["Last Year Avg"] = Math.Round(Avgqty );
                                    //newRow1["Routeid"] = dramount["RouteId"].ToString();
                                    // newRow1["Branchid"] = dramount["bid"].ToString();
                                    lastyeargrandtotal += amount;
                                    double temp = 0;
                                    double Percentage = 0; double tempPercentage = 0;
                                    double.TryParse(dramount["saleQty"].ToString(), out temp);
                                    tempPercentage = (temp / lastyearsum) * 100;
                                    Percentage = Math.Round(tempPercentage);
                                    if (diffpercentage > Percentage)
                                    {
                                        newRow1["Last Year %"] = Math.Round(diffpercentage - Percentage);
                                        newRow1["Yesign"] = "+";
                                    }
                                    else
                                    {
                                        newRow1["Last Year %"] = Math.Round(diffpercentage - Percentage);
                                        newRow1["Yesign"] = "-";
                                    }
                                }
                            }
                            MainReport.Rows.Add(newRow1);
                        }
                        if (MainReport.Rows.Count > 0)
                        {
                            foreach (DataRow dra in MainReport.Select("Routeid='" + salestype + "'"))
                            {
                                DataRow newRow1 = Report.NewRow();
                                newRow1["AgentName"] = dra["AgentName"].ToString();
                                newRow1["Agentid"] = dra["Agentid"].ToString();
                                newRow1["Yester Day"] = dra["Yester Day"].ToString();
                                newRow1["Yester Day %"] = dra["Yester Day %"].ToString();
                                newRow1["Ysign"] = dra["Ysign"].ToString();
                                newRow1["Last Week"] = dra["Last Week"].ToString();
                                newRow1["Last Week %"] = dra["Last Week %"].ToString();
                                newRow1["Wsign"] = dra["Wsign"].ToString();
                                newRow1["Last Month"] = dra["Last Month"].ToString();
                                newRow1["Last Month %"] = dra["Last Month %"].ToString();
                                newRow1["Msign"] = dra["Msign"].ToString();
                                newRow1["Last Year"] = dra["Last Year"].ToString();
                                newRow1["Last Year %"] = dra["Last Year %"].ToString();
                                newRow1["Yesign"] = dra["Yesign"].ToString();
                                Report.Rows.Add(newRow1);
                            }
                        }

                        DataRow newrow2 = Report.NewRow();
                        newrow2["AgentName"] = "Total";
                        newrow2["Yester Day"] = Math.Round(yesterdaysum);
                        newrow2["Last Week"] = Math.Round(lastweaksum); //lastweaksum;
                        newrow2["Last Month"] = Math.Round(lastmonthsum);// lastmonthsum;
                        newrow2["Last Year"] = Math.Round(lastyearsum); //lastyearsum;
                        Report.Rows.Add(newrow2);
                        grdAgentReport.DataSource = Report;
                        grdAgentReport.DataBind();
                    }
                }
                #endregion
                #region
                if (SectedDataType == "Days")
                {
                    cmd = new MySqlCommand("SELECT  modifiedroutes.RouteName, ROUND(SUM(indents_subtable.DeliveryQty),2) AS saleQty,indt.I_date,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost) AS salevalue, modifiedroutes.Sno AS routeid, modifidroutssubtab.BranchID AS bid, branchdata_2.BranchName, branchdata_2.flag, branchdata_1.sno AS BranchID,  branchdata_2.SalesType, empmanage.EmpName, branchdata_2.SalesRepresentative FROM  branchdata branchdata_2 RIGHT OUTER JOIN branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT   RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo ON  branchdata_2.sno = modifidroutssubtab.BranchID LEFT OUTER JOIN indents_subtable INNER JOIN (SELECT  IndentNo, I_date, Branch_id FROM  indents WHERE  (I_date BETWEEN @starttime AND @endtime)) indt ON indents_subtable.IndentNo = indt.IndentNo ON  modifidroutssubtab.BranchID = indt.Branch_id INNER JOIN tripdata ON tripdata.Sno = indents_subtable.DTripId INNER JOIN empmanage ON tripdata.EmpId = empmanage.Sno WHERE  (branchdata.SalesType IS NOT NULL) AND (indents_subtable.DeliveryQty <> 0) AND (branchdata_2.SalesType = @salestype) AND (modifiedroutes.Branchid = @BranchID) GROUP BY DATE(indt.I_date),modifidroutssubtab.BranchID ORDER BY  routeid");
                    cmd.Parameters.AddWithValue("@salestype", salestype);
                    cmd.Parameters.AddWithValue("@BranchID", BranchID);
                    cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate));
                    cmd.Parameters.AddWithValue("@endtime", GetHighDate(ToDate));
                    dtPresentMonth = vdbmngr.SelectQuery(cmd).Tables[0];

                    cmd = new MySqlCommand("SELECT  modifiedroutes.RouteName, ROUND(SUM(indents_subtable.DeliveryQty),2) AS saleQty,indt.I_date,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost) AS salevalue, modifiedroutes.Sno AS routeid, modifidroutssubtab.BranchID AS bid, branchdata_2.BranchName, branchdata_2.flag, branchdata_1.sno AS BranchID,  branchdata_2.SalesType, empmanage.EmpName, branchdata_2.SalesRepresentative FROM  branchdata branchdata_2 RIGHT OUTER JOIN branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT   RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo ON  branchdata_2.sno = modifidroutssubtab.BranchID LEFT OUTER JOIN indents_subtable INNER JOIN (SELECT  IndentNo, I_date, Branch_id FROM  indents WHERE  (I_date BETWEEN @starttime AND @endtime)) indt ON indents_subtable.IndentNo = indt.IndentNo ON  modifidroutssubtab.BranchID = indt.Branch_id INNER JOIN tripdata ON tripdata.Sno = indents_subtable.DTripId INNER JOIN empmanage ON tripdata.EmpId = empmanage.Sno WHERE  (branchdata.SalesType IS NOT NULL) AND (indents_subtable.DeliveryQty <> 0) AND (branchdata_2.SalesType = @salestype) AND (modifiedroutes.Branchid = @BranchID) GROUP BY DATE(indt.I_date),modifidroutssubtab.BranchID ORDER BY  routeid");
                    cmd.Parameters.AddWithValue("@salestype", salestype);
                    cmd.Parameters.AddWithValue("@BranchID", BranchID);
                    cmd.Parameters.AddWithValue("@starttime", GetLowDate(lastmonthfrom));
                    cmd.Parameters.AddWithValue("@endtime", GetHighDate(lastmonthto));
                    //cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate.AddDays(-29)));
                    //cmd.Parameters.AddWithValue("@endtime", GetHighDate(ToDate.AddDays(-29)));
                    dtLastMonth = vdbmngr.SelectQuery(cmd).Tables[0];

                    cmd = new MySqlCommand("SELECT  modifiedroutes.RouteName, ROUND(SUM(indents_subtable.DeliveryQty),2) AS saleQty,indt.I_date,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost) AS salevalue, modifiedroutes.Sno AS routeid, modifidroutssubtab.BranchID AS bid, branchdata_2.BranchName, branchdata_2.flag, branchdata_1.sno AS BranchID,  branchdata_2.SalesType, empmanage.EmpName, branchdata_2.SalesRepresentative FROM  branchdata branchdata_2 RIGHT OUTER JOIN branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT   RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo ON  branchdata_2.sno = modifidroutssubtab.BranchID LEFT OUTER JOIN indents_subtable INNER JOIN (SELECT  IndentNo, I_date, Branch_id FROM  indents WHERE  (I_date BETWEEN @starttime AND @endtime)) indt ON indents_subtable.IndentNo = indt.IndentNo ON  modifidroutssubtab.BranchID = indt.Branch_id INNER JOIN tripdata ON tripdata.Sno = indents_subtable.DTripId INNER JOIN empmanage ON tripdata.EmpId = empmanage.Sno WHERE  (branchdata.SalesType IS NOT NULL) AND (indents_subtable.DeliveryQty <> 0) AND (branchdata_2.SalesType = @salestype) AND (modifiedroutes.Branchid = @BranchID) GROUP BY DATE(indt.I_date),modifidroutssubtab.BranchID ORDER BY  routeid");
                    cmd.Parameters.AddWithValue("@salestype", salestype);
                    cmd.Parameters.AddWithValue("@BranchID", BranchID);


                    cmd.Parameters.AddWithValue("@starttime", GetLowDate(LastYearFromDate));
                    cmd.Parameters.AddWithValue("@endtime", GetHighDate(LastYearToDate));

                    dtLastYearMonth = vdbmngr.SelectQuery(cmd).Tables[0];

                    DataTable dtAll = new DataTable();
                    dtAll.Merge(dtPresentMonth);
                    dtAll.Merge(dtLastMonth);
                    dtAll.Merge(dtLastYearMonth);

                    DataView TotalView = new DataView(dtAll);
                    DataTable dtdistinctRoutename = TotalView.ToTable(true, "SalesType", "bid", "BranchName", "RouteName", "routeid");
                    DataView dv = dtdistinctRoutename.DefaultView;
                    dv.Sort = "routeid ASC";
                    DataTable sortedProductDT = dv.ToTable();
                    DataTable disticntbarnchname1 = TotalView.ToTable(true, "I_Date");
                    DataTable MainReport1 = new DataTable();
                    DataTable dtempty = new DataTable();
                    DataTable disticntbarnchname4 = new DataTable();
                    MainReport1.Columns.Add("Date");
                    foreach (DataRow branch in disticntbarnchname1.Rows)
                    {
                        DataRow newrow = MainReport1.NewRow();
                        DateTime dtDoe = Convert.ToDateTime(branch["i_date"].ToString());
                        string strdate = dtDoe.ToString("dd");
                        newrow["Date"] = strdate;
                        MainReport1.Rows.Add(newrow); ;
                    }
                    DataView view4 = new DataView(MainReport1);
                    dtempty = view4.ToTable(true, "Date");

                    DataView dv1 = dtempty.DefaultView;
                    dv1.Sort = "Date ASC";
                    disticntbarnchname4 = dv1.ToTable();
                    DataTable MainReport = new DataTable();
                    MainReport.Columns.Add("DataType");
                    MainReport.Columns.Add("RouteName");
                    MainReport.Columns.Add("AgentName");
                    foreach (DataRow branch in disticntbarnchname4.Rows)
                    {
                        MainReport.Columns.Add(branch["Date"].ToString());
                    }
                    //MainReport.Columns.Add("SalesType");
                    //MainReport.Columns.Add("SalestypeId");
                    //MainReport.Columns.Add("Branchid");
                    //MainReport.Columns.Add("Routeid");
                    int j1 = 1;
                    foreach (DataRow drroute in sortedProductDT.Rows)
                    {
                        DataRow newRow1 = MainReport.NewRow();
                        string Agentid = drroute["bid"].ToString();
                        string AgentName = drroute["BranchName"].ToString();
                        string RouteName = drroute["RouteName"].ToString();
                        if (j1 == 1)
                        {

                            newRow1["DataType"] = "This Month";
                        }
                        string Salestype = drroute["SalesType"].ToString();
                        newRow1["RouteName"] = RouteName;
                        newRow1["AgentName"] = AgentName;
                        //newRow1["SalesType"] = Salestype;
                        foreach (DataRow dramount in dtPresentMonth.Select("bid='" + Agentid + "' AND salestype='" + Salestype + "'"))
                        {
                            float amount = 0;
                            float.TryParse(dramount["saleQty"].ToString(), out amount);
                            DateTime dtDoe = Convert.ToDateTime(dramount["i_date"].ToString());
                            string strdate = dtDoe.ToString("dd");
                            double Avgqty = amount / 2;
                            newRow1[strdate] = Math.Round(Avgqty);
                            //newRow1["Branchid"] = dramount["bid"].ToString();
                            yesterdaygrandtotal += amount;
                        }
                        MainReport.Rows.Add(newRow1);
                        j1++;
                    }
                    int j2 = 1;
                    foreach (DataRow drroute in sortedProductDT.Rows)
                    {
                        string Agentid = drroute["bid"].ToString();
                        string AgentName = drroute["BranchName"].ToString();
                        string Salestype = drroute["SalesType"].ToString();
                        string RouteName = drroute["RouteName"].ToString();
                        DataRow newRow1 = MainReport.NewRow();
                        newRow1["AgentName"] = AgentName;
                        newRow1["RouteName"] = RouteName;
                        //newRow1["SalesType"] = Salestype;
                        if (j2 == 1)
                        {
                            newRow1["DataType"] = "Last Month";
                        }
                        foreach (DataRow dramount in dtLastMonth.Select("bid='" + Agentid + "' AND salestype='" + Salestype + "'"))
                        {
                            float amount = 0;
                            float.TryParse(dramount["saleQty"].ToString(), out amount);
                            DateTime dtDoe = Convert.ToDateTime(dramount["i_date"].ToString());
                            string strdate = dtDoe.ToString("dd");
                            double Avgqty = amount / 2;
                            newRow1[strdate] = Math.Round(Avgqty);
                            //newRow1["Branchid"] = dramount["bid"].ToString();
                            lastweekgrandtotal += amount;
                        }
                        MainReport.Rows.Add(newRow1);
                        j2++;
                    }
                    int j3 = 1;
                    foreach (DataRow drroute in sortedProductDT.Rows)
                    {
                        string Agentid = drroute["bid"].ToString();
                        string AgentName = drroute["BranchName"].ToString();
                        string Salestype = drroute["SalesType"].ToString();
                        string RouteName = drroute["RouteName"].ToString();
                        DataRow newRow1 = MainReport.NewRow();
                        newRow1["AgentName"] = AgentName;
                        newRow1["RouteName"] = RouteName;
                        if (j3 == 1)
                        {

                            newRow1["DataType"] = "Last Year";
                        }
                        foreach (DataRow dramount in dtLastYearMonth.Select("bid='" + Agentid + "' AND salestype='" + Salestype + "'"))
                        {
                            float amount = 0;
                            float.TryParse(dramount["saleQty"].ToString(), out amount);
                            DateTime dtDoe = Convert.ToDateTime(dramount["i_date"].ToString());
                            string strdate = dtDoe.ToString("dd");
                            double Avgqty = amount / 2;
                            newRow1[strdate] = Math.Round(Avgqty);
                            // newRow1["Branchid"] = dramount["bid"].ToString();
                            lastmonthgrandtotal += amount;
                        }
                        MainReport.Rows.Add(newRow1);
                        j3++;
                    }
                    grdAgentReport.DataSource = MainReport;
                    grdAgentReport.DataBind();
                }
                #endregion
                #region
                else if (SectedDataType == "Weak")
                {

                    string strfromdate = FromDate.ToString();
                    DateTime fromDate = DateTime.Parse(strfromdate.Trim());
                    var d_fromdate = fromDate;
                    CultureInfo cul_from = CultureInfo.CurrentCulture;
                    int from_weekNum = cul_from.Calendar.GetWeekOfYear(
                        d_fromdate,
                        CalendarWeekRule.FirstDay,
                        DayOfWeek.Monday);
                    string strtodate = ToDate.ToString();
                    DateTime toDate = DateTime.Parse(strtodate.Trim());
                    var d_toDate = toDate;
                    CultureInfo cul_to = CultureInfo.CurrentCulture;
                    int to_weekNum = cul_to.Calendar.GetWeekOfYear(
                        d_toDate,
                        CalendarWeekRule.FirstDay,
                        DayOfWeek.Monday);
                    int diffweeks = to_weekNum - from_weekNum;
                    DateTime firstmonth = new DateTime();
                    DateTime lastmonth = new DateTime();
                    ToDate = ToDate.AddMonths(1);
                    TimeSpan dateSpan = ToDate.Subtract(FromDate);
                    int years = (dateSpan.Days / 365);
                    int months = ((dateSpan.Days % 365) / 31) + (years * 12);
                    int N = 0;
                    int i = 1;
                    DataTable dtPresentAllWeeks = new DataTable();
                    DataTable dtLastAllWeeks = new DataTable();
                    DataTable dtLastYearAllWeeks = new DataTable();
                    if (months != 0)
                    {
                        int newweek = from_weekNum;
                        int weaknumber = 0;
                        for (int j = 0; j < diffweeks; j++)
                        {
                            firstmonth = GetLowDate(FromDate);
                            lastmonth = GetHighDate(firstmonth.AddDays(7));
                            DateTime dtF = firstmonth;
                            string ChangedTime1 = firstmonth.ToString("dd/MMM");
                            string ChangedTime2 = lastmonth.ToString("dd/MMM");
                            string Changedt = firstmonth.ToString("MMM");
                            string mnth = firstmonth.ToString("MM");
                            weaknumber++;

                            cmd = new MySqlCommand("SELECT  modifiedroutes.RouteName, ROUND(SUM(indents_subtable.DeliveryQty),2) AS saleQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost) AS salevalue, modifiedroutes.Sno AS routeid, modifidroutssubtab.BranchID AS bid, branchdata_2.BranchName, branchdata_2.flag, branchdata_1.sno AS BranchID,  branchdata_2.SalesType, empmanage.EmpName, branchdata_2.SalesRepresentative FROM  branchdata branchdata_2 RIGHT OUTER JOIN branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT   RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo ON  branchdata_2.sno = modifidroutssubtab.BranchID LEFT OUTER JOIN indents_subtable INNER JOIN (SELECT  IndentNo, I_date, Branch_id FROM  indents WHERE  (I_date BETWEEN @starttime AND @endtime)) indt ON indents_subtable.IndentNo = indt.IndentNo ON  modifidroutssubtab.BranchID = indt.Branch_id INNER JOIN tripdata ON tripdata.Sno = indents_subtable.DTripId INNER JOIN empmanage ON tripdata.EmpId = empmanage.Sno WHERE  (branchdata.SalesType IS NOT NULL) AND (indents_subtable.DeliveryQty <> 0) AND (branchdata_2.SalesType = @salestype) AND (modifiedroutes.Branchid = @BranchID) GROUP BY modifidroutssubtab.BranchID ORDER BY  routeid");
                            cmd.Parameters.AddWithValue("@salestype", salestype);
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate));
                            cmd.Parameters.AddWithValue("@endtime", GetHighDate(ToDate));
                            dtPresentMonth = vdbmngr.SelectQuery(cmd).Tables[0];

                            cmd = new MySqlCommand("SELECT  modifiedroutes.RouteName, ROUND(SUM(indents_subtable.DeliveryQty),2) AS saleQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost) AS salevalue, modifiedroutes.Sno AS routeid, modifidroutssubtab.BranchID AS bid, branchdata_2.BranchName, branchdata_2.flag, branchdata_1.sno AS BranchID,  branchdata_2.SalesType, empmanage.EmpName, branchdata_2.SalesRepresentative FROM  branchdata branchdata_2 RIGHT OUTER JOIN branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT   RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo ON  branchdata_2.sno = modifidroutssubtab.BranchID LEFT OUTER JOIN indents_subtable INNER JOIN (SELECT  IndentNo, I_date, Branch_id FROM  indents WHERE  (I_date BETWEEN @starttime AND @endtime)) indt ON indents_subtable.IndentNo = indt.IndentNo ON  modifidroutssubtab.BranchID = indt.Branch_id INNER JOIN tripdata ON tripdata.Sno = indents_subtable.DTripId INNER JOIN empmanage ON tripdata.EmpId = empmanage.Sno WHERE  (branchdata.SalesType IS NOT NULL) AND (indents_subtable.DeliveryQty <> 0) AND (branchdata_2.SalesType = @salestype) AND (modifiedroutes.Branchid = @BranchID) GROUP BY modifidroutssubtab.BranchID ORDER BY  routeid");
                            cmd.Parameters.AddWithValue("@salestype", salestype);
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate.AddDays(-29)));
                            cmd.Parameters.AddWithValue("@endtime", GetHighDate(ToDate.AddDays(-29)));
                            dtLastMonth = vdbmngr.SelectQuery(cmd).Tables[0];

                            cmd = new MySqlCommand("SELECT  modifiedroutes.RouteName, ROUND(SUM(indents_subtable.DeliveryQty),2) AS saleQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost) AS salevalue, modifiedroutes.Sno AS routeid, modifidroutssubtab.BranchID AS bid, branchdata_2.BranchName, branchdata_2.flag, branchdata_1.sno AS BranchID,  branchdata_2.SalesType, empmanage.EmpName, branchdata_2.SalesRepresentative FROM  branchdata branchdata_2 RIGHT OUTER JOIN branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT   RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo ON  branchdata_2.sno = modifidroutssubtab.BranchID LEFT OUTER JOIN indents_subtable INNER JOIN (SELECT  IndentNo, I_date, Branch_id FROM  indents WHERE  (I_date BETWEEN @starttime AND @endtime)) indt ON indents_subtable.IndentNo = indt.IndentNo ON  modifidroutssubtab.BranchID = indt.Branch_id INNER JOIN tripdata ON tripdata.Sno = indents_subtable.DTripId INNER JOIN empmanage ON tripdata.EmpId = empmanage.Sno WHERE  (branchdata.SalesType IS NOT NULL) AND (indents_subtable.DeliveryQty <> 0) AND (branchdata_2.SalesType = @salestype) AND (modifiedroutes.Branchid = @BranchID) GROUP BY modifidroutssubtab.BranchID ORDER BY  routeid");
                            cmd.Parameters.AddWithValue("@salestype", salestype);
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate.AddDays(-365)));
                            cmd.Parameters.AddWithValue("@endtime", GetHighDate(ToDate.AddDays(-365)));
                            dtLastYearMonth = vdbmngr.SelectQuery(cmd).Tables[0];
                            FromDate = FromDate.AddDays(7);
                            DataTable dttemp = new DataTable();
                            DataTable dttemp1 = new DataTable();
                            dttemp.Columns.Add("BranchId");
                            dttemp.Columns.Add("RouteName");
                            dttemp.Columns.Add("BranchName");
                            dttemp.Columns.Add("saleQty");
                            dttemp.Columns.Add("Date");
                            dttemp.Columns.Add("DateType");
                            dttemp.Columns.Add("SalesType");


                            foreach (DataRow drSubData in dtPresentMonth.Rows)
                            {
                                DataRow newrow = dttemp.NewRow();
                                newrow["BranchId"] = drSubData["bid"].ToString();
                                newrow["RouteName"] = drSubData["RouteName"].ToString();
                                newrow["BranchName"] = drSubData["BranchName"].ToString();
                                newrow["saleQty"] = drSubData["saleQty"].ToString();
                                newrow["DateType"] = "PresentMonth";
                                newrow["Date"] = "Weak" + weaknumber;
                                newrow["SalesType"] = drSubData["SalesType"].ToString();
                                dttemp.Rows.Add(newrow);
                            }
                            dtPresentAllWeeks.Merge(dttemp);
                            dtALL.Merge(dttemp);
                            dttemp = new DataTable();
                            dttemp.Columns.Add("BranchId");
                            dttemp.Columns.Add("RouteName");
                            dttemp.Columns.Add("BranchName");
                            dttemp.Columns.Add("saleQty");
                            dttemp.Columns.Add("Date");
                            dttemp.Columns.Add("DateType");
                            dttemp.Columns.Add("SalesType");
                            foreach (DataRow drSubData in dtLastMonth.Rows)
                            {
                                DataRow newrow = dttemp.NewRow();
                                newrow["BranchId"] = drSubData["bid"].ToString();
                                newrow["RouteName"] = drSubData["RouteName"].ToString();
                                newrow["BranchName"] = drSubData["BranchName"].ToString();
                                newrow["saleQty"] = drSubData["saleQty"].ToString();
                                newrow["DateType"] = "LastMonth";
                                newrow["SalesType"] = drSubData["SalesType"].ToString();
                                newrow["Date"] = "Weak" + weaknumber;
                                dttemp.Rows.Add(newrow);
                            }
                            dtLastAllWeeks.Merge(dttemp);
                            dtALL.Merge(dttemp);
                            dttemp = new DataTable();
                            dttemp.Columns.Add("BranchId");
                            dttemp.Columns.Add("RouteName");
                            dttemp.Columns.Add("BranchName");
                            dttemp.Columns.Add("saleQty");
                            dttemp.Columns.Add("Date");
                            dttemp.Columns.Add("DateType");
                            dttemp.Columns.Add("SalesType");
                            foreach (DataRow drSubData in dtLastYearMonth.Rows)
                            {
                                DataRow newrow = dttemp.NewRow();
                                newrow["BranchId"] = drSubData["bid"].ToString();
                                newrow["RouteName"] = drSubData["RouteName"].ToString();
                                newrow["BranchName"] = drSubData["BranchName"].ToString();
                                newrow["saleQty"] = drSubData["saleQty"].ToString();
                                newrow["SalesType"] = drSubData["SalesType"].ToString();
                                newrow["DateType"] = "LastYear";
                                newrow["Date"] = "Weak" + weaknumber;
                                dttemp.Rows.Add(newrow);
                            }
                            dtLastYearAllWeeks.Merge(dttemp);
                            dtALL.Merge(dttemp);
                            // dttemp = new DataTable();
                        }
                    }

                    DataView view = new DataView(dtALL);
                    DataTable dtdistinctRoutename = view.ToTable(true, "BranchId", "BranchName", "RouteName", "SalesType");
                    DataTable dtempty = new DataTable();
                    DataView dv = dtdistinctRoutename.DefaultView;
                    dv.Sort = "RouteName ASC";
                    DataTable sortedProductDT = dv.ToTable();


                    DataView view3 = new DataView(dtALL);
                    dtempty = view3.ToTable(true, "Date");


                    DataView dv1 = dtempty.DefaultView;
                    dv1.Sort = "Date ASC";
                    DataTable disticntbarnchname1 = dv1.ToTable();


                    DataTable Report = new DataTable();
                    Report.Columns.Add("DataType");
                    Report.Columns.Add("RouteName");
                    Report.Columns.Add("AgentName");
                    foreach (DataRow branch in disticntbarnchname1.Rows)
                    {
                        Report.Columns.Add(branch["Date"].ToString());
                    }
                    int j1 = 1;
                    foreach (DataRow drroute in sortedProductDT.Rows)
                    {
                        string Agentid = drroute["BranchId"].ToString();
                        string AgentName = drroute["BranchName"].ToString();
                        string Salestype = drroute["SalesType"].ToString();
                        string RouteName = drroute["RouteName"].ToString();
                        DataRow newRow1 = Report.NewRow();
                        newRow1["AgentName"] = AgentName;
                        newRow1["RouteName"] = RouteName;
                        //newRow1["SalesType"] = Salestype;
                        if (j1 == 1)
                        {
                            newRow1["DataType"] = "This Month";
                        }
                        foreach (DataRow dramount in dtPresentAllWeeks.Select("BranchId='" + Agentid + "' AND salestype='" + Salestype + "'"))
                        {
                            float amount = 0;
                            float.TryParse(dramount["saleQty"].ToString(), out amount);

                            double Avgqty = amount / 2;
                            newRow1[dramount["Date"].ToString()] = Math.Round(Avgqty);



                            //newRow1["Branchid"] = dramount["bid"].ToString();
                            yesterdaygrandtotal += amount;
                        }
                        Report.Rows.Add(newRow1);
                        j1++;
                    }
                    int j2 = 1;
                    foreach (DataRow drroute in sortedProductDT.Rows)
                    {
                        string Agentid = drroute["BranchId"].ToString();
                        string AgentName = drroute["BranchName"].ToString();
                        string Salestype = drroute["SalesType"].ToString();
                        string RouteName = drroute["RouteName"].ToString();
                        DataRow newRow1 = Report.NewRow();
                        newRow1["AgentName"] = AgentName;
                        newRow1["RouteName"] = RouteName;
                        //newRow1["SalesType"] = Salestype;
                        if (j2 == 1)
                        {
                            newRow1["DataType"] = "Last Month";
                        }
                        foreach (DataRow dramount in dtLastAllWeeks.Select("BranchId='" + Agentid + "' AND salestype='" + Salestype + "'"))
                        {
                            float amount = 0;
                            float.TryParse(dramount["saleQty"].ToString(), out amount);

                            double Avgqty = amount / 2;
                            newRow1[dramount["Date"].ToString()] = Math.Round(Avgqty);
                            //newRow1["Branchid"] = dramount["bid"].ToString();
                            lastweekgrandtotal += amount;
                        }
                        Report.Rows.Add(newRow1);
                        j2++;
                    }
                    int j3 = 1;
                    foreach (DataRow drroute in sortedProductDT.Rows)
                    {
                        string Agentid = drroute["BranchId"].ToString();
                        string AgentName = drroute["BranchName"].ToString();
                        string Salestype = drroute["SalesType"].ToString();
                        string RouteName = drroute["RouteName"].ToString();
                        DataRow newRow1 = Report.NewRow();
                        newRow1["AgentName"] = AgentName;
                        newRow1["RouteName"] = RouteName;
                        if (j3 == 1)
                        {
                            newRow1["DataType"] = "Last Year";
                        }
                        foreach (DataRow dramount in dtLastYearAllWeeks.Select("BranchId='" + Agentid + "' AND salestype='" + Salestype + "'"))
                        {
                            float amount = 0;
                            float.TryParse(dramount["saleQty"].ToString(), out amount);
                            double Avgqty = amount / 2;
                            newRow1[dramount["Date"].ToString()] = Math.Round(Avgqty);
                            // newRow1["Branchid"] = dramount["bid"].ToString();
                            lastmonthgrandtotal += amount;
                        }
                        Report.Rows.Add(newRow1);
                        j3++;
                    }
                    grdAgentReport.DataSource = Report;
                    grdAgentReport.DataBind();
                }
                #endregion
                #region
                else if (SectedDataType == "Month")
                {
                    DateTime firstmonth = new DateTime();
                    DateTime lastmonth = new DateTime();
                    ToDate = ToDate.AddMonths(1);
                    TimeSpan dateSpan = ToDate.Subtract(FromDate);
                    int years = (dateSpan.Days / 365);
                    int months = ((dateSpan.Days % 365) / 31) + (years * 12);
                    int N = 0;
                    int i = 1;
                    if (months != 0)
                    {
                        int monthnumber = 0;
                        for (int j = 0; j < months; j++)
                        {
                            firstmonth = GetLowMonthRetrive(FromDate.AddMonths(j));
                            lastmonth = GetHighMonth(firstmonth);
                            DateTime dtF = firstmonth.AddDays(-1);
                            TimeSpan dateSpan2 = lastmonth.Subtract(dtF);
                            int NoOfdays = dateSpan2.Days;
                            monthnumber++;

                            cmd = new MySqlCommand("SELECT  modifiedroutes.RouteName, ROUND(SUM(indents_subtable.DeliveryQty),2) AS saleQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost) AS salevalue, modifiedroutes.Sno AS routeid, modifidroutssubtab.BranchID AS bid, branchdata_2.BranchName, branchdata_2.flag, branchdata_1.sno AS BranchID,  branchdata_2.SalesType, empmanage.EmpName, branchdata_2.SalesRepresentative FROM  branchdata branchdata_2 RIGHT OUTER JOIN branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT   RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo ON  branchdata_2.sno = modifidroutssubtab.BranchID LEFT OUTER JOIN indents_subtable INNER JOIN (SELECT  IndentNo, I_date, Branch_id FROM  indents WHERE  (I_date BETWEEN @starttime AND @endtime)) indt ON indents_subtable.IndentNo = indt.IndentNo ON  modifidroutssubtab.BranchID = indt.Branch_id INNER JOIN tripdata ON tripdata.Sno = indents_subtable.DTripId INNER JOIN empmanage ON tripdata.EmpId = empmanage.Sno WHERE  (branchdata.SalesType IS NOT NULL) AND (indents_subtable.DeliveryQty <> 0) AND (branchdata_2.SalesType = @salestype) AND (modifiedroutes.Branchid = @BranchID) GROUP BY modifidroutssubtab.BranchID ORDER BY  routeid");
                            cmd.Parameters.AddWithValue("@salestype", salestype);
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate));
                            cmd.Parameters.AddWithValue("@endtime", GetHighDate(ToDate));
                            dtPresentMonth = vdbmngr.SelectQuery(cmd).Tables[0];

                            cmd = new MySqlCommand("SELECT  modifiedroutes.RouteName, ROUND(SUM(indents_subtable.DeliveryQty),2) AS saleQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost) AS salevalue, modifiedroutes.Sno AS routeid, modifidroutssubtab.BranchID AS bid, branchdata_2.BranchName, branchdata_2.flag, branchdata_1.sno AS BranchID,  branchdata_2.SalesType, empmanage.EmpName, branchdata_2.SalesRepresentative FROM  branchdata branchdata_2 RIGHT OUTER JOIN branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT   RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo ON  branchdata_2.sno = modifidroutssubtab.BranchID LEFT OUTER JOIN indents_subtable INNER JOIN (SELECT  IndentNo, I_date, Branch_id FROM  indents WHERE  (I_date BETWEEN @starttime AND @endtime)) indt ON indents_subtable.IndentNo = indt.IndentNo ON  modifidroutssubtab.BranchID = indt.Branch_id INNER JOIN tripdata ON tripdata.Sno = indents_subtable.DTripId INNER JOIN empmanage ON tripdata.EmpId = empmanage.Sno WHERE  (branchdata.SalesType IS NOT NULL) AND (indents_subtable.DeliveryQty <> 0) AND (branchdata_2.SalesType = @salestype) AND (modifiedroutes.Branchid = @BranchID) GROUP BY modifidroutssubtab.BranchID ORDER BY  routeid");
                            cmd.Parameters.AddWithValue("@salestype", salestype);
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate.AddDays(-29)));
                            cmd.Parameters.AddWithValue("@endtime", GetHighDate(ToDate.AddDays(-29)));
                            dtLastMonth = vdbmngr.SelectQuery(cmd).Tables[0];

                            cmd = new MySqlCommand("SELECT  modifiedroutes.RouteName, ROUND(SUM(indents_subtable.DeliveryQty),2) AS saleQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost) AS salevalue, modifiedroutes.Sno AS routeid, modifidroutssubtab.BranchID AS bid, branchdata_2.BranchName, branchdata_2.flag, branchdata_1.sno AS BranchID,  branchdata_2.SalesType, empmanage.EmpName, branchdata_2.SalesRepresentative FROM  branchdata branchdata_2 RIGHT OUTER JOIN branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT   RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo ON  branchdata_2.sno = modifidroutssubtab.BranchID LEFT OUTER JOIN indents_subtable INNER JOIN (SELECT  IndentNo, I_date, Branch_id FROM  indents WHERE  (I_date BETWEEN @starttime AND @endtime)) indt ON indents_subtable.IndentNo = indt.IndentNo ON  modifidroutssubtab.BranchID = indt.Branch_id INNER JOIN tripdata ON tripdata.Sno = indents_subtable.DTripId INNER JOIN empmanage ON tripdata.EmpId = empmanage.Sno WHERE  (branchdata.SalesType IS NOT NULL) AND (indents_subtable.DeliveryQty <> 0) AND (branchdata_2.SalesType = @salestype) AND (modifiedroutes.Branchid = @BranchID) GROUP BY modifidroutssubtab.BranchID ORDER BY  routeid");
                            cmd.Parameters.AddWithValue("@salestype", salestype);
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate.AddDays(-365)));
                            cmd.Parameters.AddWithValue("@endtime", GetHighDate(ToDate.AddDays(-365)));
                            dtLastYearMonth = vdbmngr.SelectQuery(cmd).Tables[0];
                            FromDate = FromDate.AddDays(7);
                            DataTable dttemp = new DataTable();
                            DataTable dttemp1 = new DataTable();
                            dttemp.Columns.Add("BranchId");
                            dttemp.Columns.Add("RouteName");
                            dttemp.Columns.Add("BranchName");
                            dttemp.Columns.Add("saleQty");
                            dttemp.Columns.Add("Date");
                            dttemp.Columns.Add("DateType");
                            dttemp.Columns.Add("SalesType");


                            foreach (DataRow drSubData in dtPresentMonth.Rows)
                            {
                                DataRow newrow = dttemp.NewRow();
                                newrow["BranchId"] = drSubData["bid"].ToString();
                                newrow["RouteName"] = drSubData["RouteName"].ToString();
                                newrow["BranchName"] = drSubData["BranchName"].ToString();
                                newrow["saleQty"] = drSubData["saleQty"].ToString();
                                newrow["DateType"] = "PresentMonth";
                                newrow["Date"] = firstmonth.ToString("MMM");
                                newrow["SalesType"] = drSubData["SalesType"].ToString();
                                dttemp.Rows.Add(newrow);
                            }
                            dtPresentAllMonth.Merge(dttemp);
                            dtALL.Merge(dttemp);

                            dttemp = new DataTable();
                            dttemp.Columns.Add("BranchId");
                            dttemp.Columns.Add("RouteName");
                            dttemp.Columns.Add("BranchName");
                            dttemp.Columns.Add("saleQty");
                            dttemp.Columns.Add("Date");
                            dttemp.Columns.Add("DateType");
                            dttemp.Columns.Add("SalesType");
                            foreach (DataRow drSubData in dtLastYearMonth.Rows)
                            {
                                DataRow newrow = dttemp.NewRow();
                                newrow["BranchId"] = drSubData["bid"].ToString();
                                newrow["RouteName"] = drSubData["RouteName"].ToString();
                                newrow["BranchName"] = drSubData["BranchName"].ToString();
                                newrow["saleQty"] = drSubData["saleQty"].ToString();
                                newrow["SalesType"] = drSubData["SalesType"].ToString();
                                newrow["DateType"] = "LastYear";
                                newrow["Date"] = firstmonth.ToString("MMM");
                                dttemp.Rows.Add(newrow);
                            }
                            dtLastYearAllMonth.Merge(dttemp);
                            dtALL.Merge(dttemp);
                            // dttemp = new DataTable();
                        }
                    }
                    DataTable dtempty = new DataTable();
                    DataView view = new DataView(dtALL);
                    DataTable dtdistinctRoutename = view.ToTable(true, "BranchId", "BranchName", "RouteName", "SalesType");

                    DataView dv = dtdistinctRoutename.DefaultView;
                    dv.Sort = "RouteName ASC";
                    DataTable sortedProductDT = dv.ToTable();


                    DataView view3 = new DataView(dtALL);
                    dtempty = view3.ToTable(true, "Date");


                    DataView dv1 = dtempty.DefaultView;
                    dv1.Sort = "Date ASC";
                    DataTable disticntbarnchname1 = dv1.ToTable();

                    DataTable Report = new DataTable();
                    Report.Columns.Add("DataType");
                    Report.Columns.Add("RouteName");
                    Report.Columns.Add("AgentName");
                    foreach (DataRow branch in disticntbarnchname1.Rows)
                    {
                        Report.Columns.Add(branch["Date"].ToString());
                    }
                    int j1 = 1;
                    foreach (DataRow drroute in sortedProductDT.Rows)
                    {
                        string Agentid = drroute["BranchId"].ToString();
                        string AgentName = drroute["BranchName"].ToString();
                        string Salestype = drroute["SalesType"].ToString();
                        string RouteName = drroute["RouteName"].ToString();
                        DataRow newRow1 = Report.NewRow();
                        newRow1["AgentName"] = AgentName;
                        newRow1["RouteName"] = RouteName;
                        //newRow1["SalesType"] = Salestype;
                        if (j1 == 1)
                        {

                            newRow1["DataType"] = "This Month";
                        }
                        foreach (DataRow dramount in dtPresentAllMonth.Select("BranchId='" + Agentid + "' AND salestype='" + Salestype + "'"))
                        {
                            float amount = 0;
                            float.TryParse(dramount["saleQty"].ToString(), out amount);

                            double Avgqty = amount / 2;
                            newRow1[dramount["Date"].ToString()] = Math.Round(Avgqty);
                            //newRow1["Branchid"] = dramount["bid"].ToString();
                            yesterdaygrandtotal += amount;
                        }
                        Report.Rows.Add(newRow1);
                        j1++;
                    }

                    int j2 = 1;
                    foreach (DataRow drroute in sortedProductDT.Rows)
                    {
                        string Agentid = drroute["BranchId"].ToString();
                        string AgentName = drroute["BranchName"].ToString();
                        string Salestype = drroute["SalesType"].ToString();
                        string RouteName = drroute["RouteName"].ToString();
                        DataRow newRow1 = Report.NewRow();
                        newRow1["AgentName"] = AgentName;
                        newRow1["RouteName"] = RouteName;
                        if (j2 == 1)
                        {

                            newRow1["DataType"] = "This Month";
                        }
                        foreach (DataRow dramount in dtLastYearAllMonth.Select("BranchId='" + Agentid + "' AND salestype='" + Salestype + "'"))
                        {
                            float amount = 0;
                            float.TryParse(dramount["saleQty"].ToString(), out amount);
                            double Avgqty = amount / 2;
                            newRow1[dramount["Date"].ToString()] = Math.Round(Avgqty);
                            // newRow1["Branchid"] = dramount["bid"].ToString();
                            lastmonthgrandtotal += amount;
                        }
                        Report.Rows.Add(newRow1);
                        j2++;
                    }
                    grdAgentReport.DataSource = Report;
                    grdAgentReport.DataBind();
                }
                #endregion
            }
        }
        catch (Exception ex)
        {
        }
    }
    protected void grdAgentReport_RowCommand(object sender, GridViewCommandEventArgs e)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            DateTime fromdate = DateTime.Now;
            DataTable Report = new DataTable();
            DateTime todate = VehicleDBMgr.GetTime(vdbmngr.conn);
            DateTime frmdate = todate.AddDays(-15);
            int rowIndex = Convert.ToInt32(e.CommandArgument);
            GridViewRow row = grdAgentReport.Rows[rowIndex];
            string BranchID = Session["ClickBranchid"].ToString();
            string agentid = row.Cells[2].Text;
            string AgentName = row.Cells[1].Text;
            // string ROUTEID = Session["Clickrouteid"].ToString();
            Session["Agentid"] = agentid;
            Session["AgentName"] = AgentName;
            Session["FromDate"] = frmdate.AddDays(-1).ToString("dd/MMM/yy");
            Session["To_Date"] = todate.AddDays(-1).ToString("dd/MMM/yy");
            divHide1.Style.Add("display", "block");
            divagentwisesale.Style.Add("display", "block");
            string vall = ViewState["Val"].ToString();
            cmd = new MySqlCommand("SELECT ROUND(SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost),2) AS Totalsalevalue,ROUND(SUM(indents_subtable.DeliveryQty),2) AS DeliveryQty,products_category.Categoryname, productsdata.ProductName, DATE_FORMAT(indents.I_date, '%d %b %y') AS IndentDate FROM productsdata INNER JOIN indents_subtable ON productsdata.sno = indents_subtable.Product_sno INNER JOIN indents ON indents_subtable.IndentNo = indents.IndentNo INNER JOIN branchdata ON indents.Branch_id = branchdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno WHERE (indents.I_date BETWEEN @d1 AND @d2) AND (branchdata.sno = @BranchID) GROUP BY productsdata.sno, IndentDate ORDER BY indents.I_date");
            cmd.Parameters.AddWithValue("@BranchID", agentid);
            cmd.Parameters.AddWithValue("@d1", GetLowDate(frmdate.AddDays(-1)));
            cmd.Parameters.AddWithValue("@d2", GetHighDate(todate.AddDays(-1)));
            DataTable dtAgent = vdbmngr.SelectQuery(cmd).Tables[0];
            if (dtAgent.Rows.Count <= 0)
            {
                cmd = new MySqlCommand("SELECT ROUND(SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost) ) AS Totalsalevalue, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty, MAX(indents.I_date) AS indentdate FROM productsdata INNER JOIN indents_subtable ON productsdata.sno = indents_subtable.Product_sno INNER JOIN indents ON indents_subtable.IndentNo = indents.IndentNo INNER JOIN branchdata ON indents.Branch_id = branchdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno WHERE (branchdata.sno = @BranchID) AND (indents_subtable.DeliveryQty > 0)");
                cmd.Parameters.AddWithValue("@BranchID", agentid);
                DataTable dtAgent_lastDelivery = vdbmngr.SelectQuery(cmd).Tables[0];
                if (dtAgent_lastDelivery.Rows.Count > 0)
                {
                    string dtlastdel = dtAgent_lastDelivery.Rows[0]["indentdate"].ToString();
                    if (dtlastdel != "")
                    {
                        frmdate = Convert.ToDateTime(dtlastdel).AddDays(1);
                    }
                    cmd = new MySqlCommand("SELECT ROUND(SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost),2) AS Totalsalevalue,ROUND(SUM(indents_subtable.DeliveryQty),2) AS DeliveryQty,products_category.Categoryname, productsdata.ProductName, DATE_FORMAT(indents.I_date, '%d %b %y') AS IndentDate FROM productsdata INNER JOIN indents_subtable ON productsdata.sno = indents_subtable.Product_sno INNER JOIN indents ON indents_subtable.IndentNo = indents.IndentNo INNER JOIN branchdata ON indents.Branch_id = branchdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno WHERE (indents.I_date BETWEEN @d1 AND @d2) AND (branchdata.sno = @BranchID) GROUP BY productsdata.sno, IndentDate ORDER BY indents.I_date");
                    cmd.Parameters.AddWithValue("@BranchID", agentid);
                    cmd.Parameters.AddWithValue("@d1", GetLowDate(frmdate.AddDays(-1)));
                    cmd.Parameters.AddWithValue("@d2", GetHighDate(todate.AddDays(-1)));
                    dtAgent = vdbmngr.SelectQuery(cmd).Tables[0];
                }
            }
            cmd = new MySqlCommand("SELECT Sum(AmountPaid) as AmountPaid , Remarks,  PayTime, EmpID, ReceiptNo, VarifyDate, TransactionType, AmountDebited, DiffAmount, SalesOfficeID, Status FROM collections WHERE (Branchid = @BranchID) AND (TransactionType = @type) AND (Status = @status) AND (PaidDate BETWEEN @d1 AND @d2)");
            cmd.Parameters.AddWithValue("@BranchID", agentid);
            cmd.Parameters.AddWithValue("@d1", GetLowDate(frmdate));
            cmd.Parameters.AddWithValue("@d2", GetHighDate(todate));
            cmd.Parameters.AddWithValue("@type", "Debit");
            cmd.Parameters.AddWithValue("@status", "1");
            DataTable dtdebitamount = vdbmngr.SelectQuery(cmd).Tables[0];
            double debitprice = 0;
            foreach (DataRow dr in dtdebitamount.Rows)
            {
                //if (ChangedTime1 == dr["PDate"].ToString())
                //{
                double amountDebited = 0;

                double.TryParse(dr["AmountDebited"].ToString(), out amountDebited);
                debitprice += amountDebited;
                //}
            }
            cmd = new MySqlCommand("SELECT Branchid, AmountPaid, Remarks, DATE_FORMAT(PaidDate, '%d/%b/%y') AS PDate, PayTime, EmpID, ReceiptNo, VarifyDate, TransactionType, AmountDebited, DiffAmount, SalesOfficeID, Status FROM collections WHERE (Branchid = @BranchID) AND (TransactionType = @type) AND (Status = @status) AND (PaidDate BETWEEN @d1 AND @d2)");
            cmd.Parameters.AddWithValue("@BranchID", agentid);
            cmd.Parameters.AddWithValue("@d1", GetLowDate(frmdate));
            cmd.Parameters.AddWithValue("@d2", GetHighDate(todate));
            cmd.Parameters.AddWithValue("@type", "Debit");
            cmd.Parameters.AddWithValue("@status", "1");
            DataTable dtAgent_Debits = vdbmngr.SelectQuery(cmd).Tables[0];
            cmd = new MySqlCommand("SELECT Amount FROM branchaccounts WHERE (BranchId = @BranchID)");
            cmd.Parameters.AddWithValue("@BranchID", agentid);
            DataTable dtAgent_presentopp = vdbmngr.SelectQuery(cmd).Tables[0];
            double agentpresentopp = 0;
            double.TryParse(dtAgent_presentopp.Rows[0]["Amount"].ToString(), out agentpresentopp);
            agentpresentopp = agentpresentopp - debitprice;
            //cmd = new MySqlCommand("SELECT SUM(AmountPaid) AS AmountPaid, DATE_FORMAT(PaidDate, '%d/%b/%y') AS PaidDate, CheckStatus FROM collections WHERE (Branchid = @BranchID) AND (PaidDate BETWEEN @d1 AND @d2) AND (CheckStatus <> 'P' OR  CheckStatus IS NULL) GROUP BY PaidDate");
            cmd = new MySqlCommand("SELECT SUM(AmountPaid) AS AmountPaid, DATE_FORMAT(PaidDate, '%d/%b/%y') AS PDate, CheckStatus,PaymentType FROM collections WHERE (Branchid = @BranchID) AND (PaidDate BETWEEN @d1 AND @d2) AND (CheckStatus IS NULL)  GROUP BY PDate");
            cmd.Parameters.AddWithValue("@BranchID", agentid);
            cmd.Parameters.AddWithValue("@d1", GetLowDate(frmdate));
            cmd.Parameters.AddWithValue("@d2", GetHighDate(todate));
            DataTable dtAgentDayWiseCollection = vdbmngr.SelectQuery(cmd).Tables[0];
            cmd = new MySqlCommand("SELECT SUM(AmountPaid) AS AmountPaid, DATE_FORMAT(PaidDate, '%d/%b/%y') AS PDate FROM collections WHERE (Branchid = @BranchID) AND (PaidDate BETWEEN @d1 AND @d2) and (tripId is NULL) AND ((PaymentType = 'Incentive') OR (PaymentType = 'Journal Voucher')) GROUP BY PDate");
            cmd.Parameters.AddWithValue("@BranchID", agentid);
            cmd.Parameters.AddWithValue("@d1", GetLowDate(frmdate));
            cmd.Parameters.AddWithValue("@d2", GetHighDate(todate));
            DataTable dtAgentIncentive = vdbmngr.SelectQuery(cmd).Tables[0];
            cmd = new MySqlCommand("SELECT SUM(AmountPaid) AS AmountPaid, DATE_FORMAT(VarifyDate, '%d/%b/%y') AS VarifyDate, CheckStatus FROM collections WHERE (Branchid = @BranchID) AND (CheckStatus = 'V') AND (VarifyDate BETWEEN @d1 AND @d2) GROUP BY VarifyDate");
            cmd.Parameters.AddWithValue("@BranchID", agentid);
            cmd.Parameters.AddWithValue("@d1", GetLowDate(frmdate));
            cmd.Parameters.AddWithValue("@d2", GetHighDate(todate));
            DataTable dtAgentchequeCollection = vdbmngr.SelectQuery(cmd).Tables[0];
            if (dtAgent.Rows.Count > 0)
            {
                DataView view = new DataView(dtAgent);
                DataTable produtstbl = view.ToTable(true, "ProductName", "Categoryname");
                Report = new DataTable();
                Report.Columns.Add("SNo");
                Report.Columns.Add("DeliverDate");
                int count = 0;
                foreach (DataRow dr in produtstbl.Rows)
                {
                    Report.Columns.Add(dr["ProductName"].ToString()).DataType = typeof(Double);
                    count++;
                }
                Report.Columns.Add("Total", typeof(Double)).SetOrdinal(count + 2);
                Report.Columns.Add("Sale Value", typeof(Double)).SetOrdinal(count + 3);
                Report.Columns.Add("Amount Debited", typeof(Double)).SetOrdinal(count + 4);
                Report.Columns.Add("Opp Bal").SetOrdinal(count + 5);
                Report.Columns.Add("Total Amount").SetOrdinal(count + 6);
                Report.Columns.Add("Paid Amount", typeof(Double)).SetOrdinal(count + 7);
                Report.Columns.Add("Incentive/JV", typeof(Double)).SetOrdinal(count + 8);
                Report.Columns.Add("Bal Amount").SetOrdinal(count + 9);
                DataTable distincttable = view.ToTable(true, "IndentDate");
                int i = 1;
                double oppcarry = 0;
                int oppcount = 0;
                TimeSpan dateSpan = todate.Subtract(frmdate);
                int NoOfdays = dateSpan.Days;
                NoOfdays = NoOfdays + 1;
                double totdebitedamount = 0;
                DateTime ServerDateCurrentdate = VehicleDBMgr.GetTime(vdbmngr.conn);
                cmd = new MySqlCommand("SELECT totalsaleamount.totalsale, totalsaleamount.Branch_id, SUM(collections.AmountPaid) AS amountpaid FROM (SELECT SUM(indentssub.DeliveryQty * indentssub.UnitCost) AS totalsale, indents.Branch_id FROM indents INNER JOIN (SELECT IndentNo, Product_sno, Qty, Cost, Remark, DeliveryQty, Status, D_date, unitQty, UnitCost, Sno, PaymentStatus, LeakQty, OTripId, DTripId,DelTime FROM indents_subtable WHERE (D_date BETWEEN @starttime AND @endtime)) indentssub ON indents.IndentNo = indentssub.IndentNo WHERE (indents.Branch_id = @BranchID) GROUP BY indents.Branch_id) totalsaleamount INNER JOIN (SELECT Branchid, UserData_sno, AmountPaid, Denominations, Remarks, Sno, PaidDate, PaymentType, tripId, CheckStatus, ReturnDenomin, PayTime, VEmpID, ChequeNo, EmpID, ReceiptNo FROM collections collections_1 WHERE (Branchid = @BranchID) AND (PaidDate BETWEEN @starttime AND @endtime) AND (CheckStatus IS NULL) OR (Branchid = @BranchID) AND (CheckStatus = 'V') AND (VarifyDate BETWEEN @starttime AND @endtime)) collections ON totalsaleamount.Branch_id = collections.Branchid");
                ////  cmd = new MySqlCommand("SELECT totalsaleamount.totalsale, totalsaleamount.Branch_id, SUM(collections.AmountPaid) AS amountpaid FROM (SELECT SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost) AS totalsale, indents.Branch_id FROM indents INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo WHERE (indents.I_date BETWEEN @starttime AND @endtime) AND (indents.Branch_id = @BranchID) GROUP BY indents.Branch_id) totalsaleamount INNER JOIN (SELECT Branchid, UserData_sno, AmountPaid, Denominations, Remarks, Sno, PaidDate, PaymentType, tripId, CheckStatus, ReturnDenomin, PayTime, VEmpID, ChequeNo, EmpID, ReceiptNo FROM collections collections_1 WHERE (Branchid = @BranchID) AND (PaidDate BETWEEN @starttime AND @endtime) AND (CheckStatus IS NULL) OR (Branchid = @BranchID) AND (CheckStatus = 'V') AND (VarifyDate BETWEEN @starttime AND @endtime)) collections ON totalsaleamount.Branch_id = collections.Branchid"); 
                cmd.Parameters.AddWithValue("@BranchID", agentid);
                cmd.Parameters.AddWithValue("@starttime", GetLowDate(frmdate));
                cmd.Parameters.AddWithValue("@endtime", GetHighDate(ServerDateCurrentdate));
                DataTable dtSaleCollection = vdbmngr.SelectQuery(cmd).Tables[0];
                double totsale = 0;
                double totamt = 0;
                for (int j = 0; j < NoOfdays; j++)
                {
                    //foreach (DataRow branch in distincttable.Rows)
                    //{
                    DataRow newrow = Report.NewRow();
                    newrow["SNo"] = i;
                    string dtcount = frmdate.AddDays(j).ToString();
                    DateTime dtDOE = Convert.ToDateTime(dtcount);
                    //string dtdate1 = branch["IndentDate"].ToString();
                    string dtdate1 = dtDOE.AddDays(-1).ToString();
                    DateTime dtDOE1 = Convert.ToDateTime(dtdate1).AddDays(1);
                    string ChangedTime1 = dtDOE1.ToString("dd/MMM/yy");
                    string ChangedTime2 = dtDOE.AddDays(-1).ToString("dd MMM yy");
                    newrow["DeliverDate"] = ChangedTime1;
                    double amtpaid = 0;
                    double incentiveamtpaid = 0;
                    double totamtpaid = 0;
                    double totincentiveamtpaid = 0;
                    double totchequeamtpaid = 0;
                    double debitedamount = 0;
                    foreach (DataRow drdtclubtotal in dtAgentDayWiseCollection.Select("PDate='" + ChangedTime1 + "'"))
                    {
                        double.TryParse(drdtclubtotal["AmountPaid"].ToString(), out totamtpaid);
                        amtpaid += totamtpaid;
                    }
                    foreach (DataRow drdtincentive in dtAgentIncentive.Select("PDate='" + ChangedTime1 + "'"))
                    {
                        double.TryParse(drdtincentive["AmountPaid"].ToString(), out totincentiveamtpaid);
                        incentiveamtpaid += totincentiveamtpaid;
                    }
                    foreach (DataRow drdtchequeotal in dtAgentchequeCollection.Select("VarifyDate='" + ChangedTime1 + "'"))
                    {
                        double.TryParse(drdtchequeotal["AmountPaid"].ToString(), out totchequeamtpaid);
                        amtpaid += totchequeamtpaid;
                    }
                    if (dtSaleCollection.Rows.Count > 0)
                    {
                        double.TryParse(dtSaleCollection.Rows[0]["totalsale"].ToString(), out totsale);
                        double.TryParse(dtSaleCollection.Rows[0]["amountpaid"].ToString(), out totamt);
                    }
                    else
                    {
                        totsale = 0;
                        totamt = 0;
                    }
                    double total = 0;
                    double Amount = 0;
                    foreach (DataRow dr in dtAgent.Rows)
                    {
                        if (ChangedTime2 == dr["IndentDate"].ToString())
                        {
                            double qtyvalue = 0;
                            double DQty = 0;
                            double.TryParse(dr["DeliveryQty"].ToString(), out DQty);
                            newrow[dr["ProductName"].ToString()] = DQty;
                            double.TryParse(dr["Totalsalevalue"].ToString(), out qtyvalue);
                            Amount += qtyvalue;
                            total += DQty;
                        }
                    }
                    foreach (DataRow dr in dtAgent_Debits.Rows)
                    {
                        if (ChangedTime1 == dr["PDate"].ToString())
                        {
                            double amountDebited = 0;

                            double.TryParse(dr["AmountDebited"].ToString(), out amountDebited);
                            debitedamount += amountDebited;
                            totdebitedamount += amountDebited;
                        }
                    }
                    double aopp = agentpresentopp + totamt - totsale;
                    double actbal = 0;
                    actbal = aopp;
                    if (totdebitedamount == 0.0)
                    {
                        if (oppcarry == 0.0)
                        {
                            aopp = aopp;
                        }
                        else
                        {
                            aopp = oppcarry;
                        }
                    }
                    else
                    {
                        if (debitedamount != 0.0)
                        {
                            //aopp = aopp;
                            if (oppcarry == 0.0)
                            {
                                aopp = aopp;
                            }
                            else
                            {
                                aopp = oppcarry;
                            }
                        }
                        else
                        {
                            aopp = Math.Abs(aopp);
                            aopp = totdebitedamount - aopp;
                            aopp = oppcarry;
                        }
                    }
                    if (totsale == 0)
                    {
                        aopp = oppcarry;
                    }
                    newrow["Total"] = total;
                    newrow["Sale Value"] = Amount;

                    newrow["Opp Bal"] = Math.Round(aopp);
                    double totalamt = aopp + Amount + debitedamount;
                    newrow["Total Amount"] = Math.Round(totalamt);
                    //newrow["Paid Amount"] = amtpaid - incentiveamtpaid;
                    newrow["Paid Amount"] = amtpaid - incentiveamtpaid;
                    newrow["Incentive/JV"] = incentiveamtpaid;
                    newrow["Amount Debited"] = debitedamount;
                    // double tot_amount = amtpaid + incentiveamtpaid;
                    double totalbalance = totalamt - amtpaid;
                    newrow["Bal Amount"] = Math.Round(totalbalance);
                    oppcarry = totalbalance;
                    if (Amount + amtpaid + debitedamount != 0)
                    {
                        Report.Rows.Add(newrow);
                        i++;
                    }
                    totsale = totsale - Amount;
                }
                DataRow newvartical = Report.NewRow();
                newvartical["DeliverDate"] = "Total";
                double val = 0.0;
                foreach (DataColumn dc in Report.Columns)
                {
                    if (dc.DataType == typeof(Double))
                    {
                        val = 0.0;
                        double.TryParse(Report.Compute("sum([" + dc.ToString() + "])", "[" + dc.ToString() + "]<>'0'").ToString(), out val);
                        newvartical[dc.ToString()] = val;
                    }
                }
                Report.Rows.Add(newvartical);
                foreach (DataColumn col in Report.Columns)
                {
                    string Pname = col.ToString();
                    string ProductName = col.ToString();
                    ProductName = GetSpace(ProductName);
                    Report.Columns[Pname].ColumnName = ProductName;
                }
                GridView grd = grdagentwisesale;
                grd.DataSource = Report;
                grd.DataBind();
            }
            else
            {
                grdagentwisesale.DataSource = Report;
                grdagentwisesale.DataBind();
            }
        }
        catch (Exception ex)
        {

        }
    }
    protected void LinkButton_Click(object sender, EventArgs e)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            string BranchID = ddlPlant.SelectedItem.Value;
            string Type = ddltype.SelectedItem.Value;
            string DataType = ddlDataType.SelectedItem.Value;
            string barnchCategory = ddlbarnchCategory.SelectedItem.Value;

            string s = Session["IndDate"].ToString();
            var dt = DateTime.ParseExact(s, "ddd MMM dd yyyy HH:mm:ss 'GMT'zzz", System.Globalization.CultureInfo.InvariantCulture);
            string IndDate = dt.ToString("yyyy-MM-dd");
            DateTime ServerDateCurrentdate = Convert.ToDateTime(IndDate);
            DateTime FromDate = ServerDateCurrentdate;
            string edate = Session["Todate"].ToString();
            var edt = DateTime.ParseExact(edate, "ddd MMM dd yyyy HH:mm:ss 'GMT'zzz", System.Globalization.CultureInfo.InvariantCulture);
            string Tdate = edt.ToString("yyyy-MM-dd");
            DateTime To_Date = Convert.ToDateTime(Tdate);
            DateTime ToDate = To_Date;

            // div_MainPlantComparison.Style.Add("display", "block");

            divHide1.Style.Add("display", "block");
            div_MainPlantDetails1.Style.Add("display", "block");


            string Datatype = "";

            string SectedDataType = "Day";//ddlDayType.SelectedItem.Value;

            int Ndays = (FromDate - ToDate).Days;

            int countdays = Ndays + 1;

            if (countdays <= 7)
            {
                Datatype = "Monthly";
            }
            else if (countdays <= 30 || countdays <= 8)
            {
                Datatype = "Week";
            }
            else if (countdays == 364 || countdays >= 364)
            {
                Datatype = "Year";
            }
            else
            {
                Datatype = "Monthly";
            }


            DateTime lastmonthfrom = new DateTime();
            DateTime lastmonthto = new DateTime();
            DateTime YearServerDate_Currentdate = Convert.ToDateTime(IndDate);
            DateTime LastYearFromDate = YearServerDate_Currentdate;
            DateTime YearServerDate_Todate = Convert.ToDateTime(Tdate);
            DateTime LastYearToDate = YearServerDate_Todate;
            lastmonthfrom = FromDate.AddMonths(-1);
            lastmonthto = ToDate.AddMonths(-1);
            LastYearFromDate = LastYearFromDate.AddYears(-1);
            LastYearToDate = LastYearToDate.AddYears(-1);


            //TimeSpan dateSpan = ToDate.Subtract(FromDate);
            //int years = (dateSpan.Days / 365);
            //int months = ((dateSpan.Days % 365) / 31) + (years * 12);
            //int N = 0;
            //int i = 1;

            //if (months != 0)
            //{
            //    int monthnumber = 0;
            //    for (int j = 0; j < months; j++)
            //    {
            //        firstmonth = GetLowMonthRetrive(FromDate.AddMonths(j));
            //        lastmonth = GetHighMonth(firstmonth);
            //        DateTime dtF = firstmonth.AddDays(-1);
            //        TimeSpan dateSpan2 = lastmonth.Subtract(dtF);
            //        int NoOfdays = dateSpan2.Days;
            DataTable Dt_PresentWeak = new DataTable();
            DataTable dtSub_LastWeekData = new DataTable();

            DataTable Dt_PresentMonth = new DataTable();
            DataTable Dt_LastSixthMonth = new DataTable();
            DataTable Dt_PresentYear = new DataTable();
            DataTable dtSub_yesterdayData = new DataTable();
            DataTable dtSub_lastMonthData = new DataTable();
            DataTable dtSub_lastYearData = new DataTable();
            DataTable dtPresentAllMonth = new DataTable();
            DataTable dtLastYearAllMonth = new DataTable();
            string SalesType = Session["salestype"].ToString();
            DataTable dtALL = new DataTable();
            if (Datatype == "Monthly")
            {

                #region
                if (SectedDataType == "Day")
                {
                    if (BranchID == "8009")
                    {
                        cmd = new MySqlCommand("SELECT    TripInfo.Sno, TripInfo.DCNo, ROUND(SUM(ProductInfo.Qty) ) AS DeliveryQty,ROUND(AVG(ProductInfo.Qty) ) AS AvgQty, TripInfo.I_Date, TripInfo.VehicleNo, TripInfo.Status, TripInfo.DispName, TripInfo.DispType, TripInfo.DispMode, TripInfo.BranchID As Branch_id, TripInfo.BranchName, TripInfo.Branch_Id As BranchID,TripInfo.GroupId, TripInfo.Companyid FROM (SELECT  tripdata.Sno, tripdata.DCNo, tripdata.I_Date, tripdata.VehicleNo, tripdata.Status, dispatch.DispName, dispatch.DispType, dispatch.DispMode, dispatch.BranchID, branchdata_1.BranchName, dispatch.Branch_Id, dispatch.GroupId, dispatch.Companyid FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE  (dispatch.GroupId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT Qty, Sno FROM (SELECT tripdata_1.Sno, tripsubdata.Qty FROM  tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno WHERE (tripdata_1.AssignDate BETWEEN @d1 AND @d2)) TripSubInfo) ProductInfo ON TripInfo.Sno = ProductInfo.Sno GROUP BY TripInfo.Branch_Id ORDER BY TripInfo.Companyid");
                        cmd.Parameters.AddWithValue("@branch", BranchID);
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-2));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-2));
                        dtSub_yesterdayData = vdbmngr.SelectQuery(cmd).Tables[0];
                        cmd = new MySqlCommand("SELECT    TripInfo.Sno, TripInfo.DCNo, ROUND(SUM(ProductInfo.Qty) ) AS DeliveryQty,ROUND(AVG(ProductInfo.Qty) ) AS AvgQty, TripInfo.I_Date, TripInfo.VehicleNo, TripInfo.Status, TripInfo.DispName, TripInfo.DispType, TripInfo.DispMode, TripInfo.BranchID As Branch_id, TripInfo.BranchName, TripInfo.Branch_Id As BranchID,TripInfo.GroupId, TripInfo.Companyid FROM (SELECT  tripdata.Sno, tripdata.DCNo, tripdata.I_Date, tripdata.VehicleNo, tripdata.Status, dispatch.DispName, dispatch.DispType, dispatch.DispMode, dispatch.BranchID, branchdata_1.BranchName, dispatch.Branch_Id,dispatch.GroupId, dispatch.Companyid FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE  (dispatch.GroupId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT Qty, Sno FROM (SELECT tripdata_1.Sno, tripsubdata.Qty FROM  tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno WHERE (tripdata_1.AssignDate BETWEEN @d1 AND @d2)) TripSubInfo) ProductInfo ON TripInfo.Sno = ProductInfo.Sno GROUP BY TripInfo.Branch_Id ORDER BY TripInfo.Companyid");
                        cmd.Parameters.AddWithValue("@branch", BranchID);
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-8));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-8));
                        dtSub_LastWeekData = vdbmngr.SelectQuery(cmd).Tables[0];
                        cmd = new MySqlCommand("SELECT    TripInfo.Sno, TripInfo.DCNo, ROUND(SUM(ProductInfo.Qty) ) AS DeliveryQty,ROUND(AVG(ProductInfo.Qty) ) AS AvgQty, TripInfo.I_Date, TripInfo.VehicleNo, TripInfo.Status, TripInfo.DispName, TripInfo.DispType, TripInfo.DispMode, TripInfo.BranchID As Branch_id, TripInfo.BranchName, TripInfo.Branch_Id As BranchID,TripInfo.GroupId, TripInfo.Companyid FROM (SELECT  tripdata.Sno, tripdata.DCNo, tripdata.I_Date, tripdata.VehicleNo, tripdata.Status, dispatch.DispName, dispatch.DispType, dispatch.DispMode, dispatch.BranchID, branchdata_1.BranchName, dispatch.Branch_Id,dispatch.GroupId,dispatch.Companyid FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE  (dispatch.GroupId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT Qty, Sno FROM (SELECT tripdata_1.Sno, tripsubdata.Qty FROM  tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno WHERE (tripdata_1.AssignDate BETWEEN @d1 AND @d2)) TripSubInfo) ProductInfo ON TripInfo.Sno = ProductInfo.Sno GROUP BY TripInfo.Branch_Id ORDER BY TripInfo.Companyid");
                        cmd.Parameters.AddWithValue("@branch", BranchID);
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-31));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-31));
                        dtSub_lastMonthData = vdbmngr.SelectQuery(cmd).Tables[0];
                        cmd = new MySqlCommand("SELECT    TripInfo.Sno, TripInfo.DCNo, ROUND(SUM(ProductInfo.Qty) ) AS DeliveryQty,ROUND(AVG(ProductInfo.Qty) ) AS AvgQty, TripInfo.I_Date, TripInfo.VehicleNo, TripInfo.Status, TripInfo.DispName, TripInfo.DispType, TripInfo.DispMode, TripInfo.BranchID As Branch_id, TripInfo.BranchName, TripInfo.Branch_Id As BranchID,TripInfo.GroupId, TripInfo.Companyid FROM (SELECT  tripdata.Sno, tripdata.DCNo, tripdata.I_Date, tripdata.VehicleNo, tripdata.Status, dispatch.DispName, dispatch.DispType, dispatch.DispMode, dispatch.BranchID, branchdata_1.BranchName, dispatch.Branch_Id,dispatch.GroupId,dispatch.Companyid FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE  (dispatch.GroupId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT Qty, Sno FROM (SELECT tripdata_1.Sno, tripsubdata.Qty FROM  tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno WHERE (tripdata_1.AssignDate BETWEEN @d1 AND @d2)) TripSubInfo) ProductInfo ON TripInfo.Sno = ProductInfo.Sno GROUP BY TripInfo.Branch_Id ORDER BY TripInfo.Companyid");
                        cmd.Parameters.AddWithValue("@branch", BranchID);
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-365));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-365));
                        dtSub_lastYearData = vdbmngr.SelectQuery(cmd).Tables[0];
                        // type = "GroupWise";
                    }
                    else if (BranchID == "8012" || BranchID == "8013")
                    {
                        cmd = new MySqlCommand("SELECT    TripInfo.Sno, TripInfo.DCNo, ROUND(SUM(ProductInfo.Qty) ) AS DeliveryQty,ROUND(AVG(ProductInfo.Qty) ) AS AvgQty, TripInfo.I_Date, TripInfo.VehicleNo, TripInfo.Status, TripInfo.DispName, TripInfo.DispType, TripInfo.DispMode, TripInfo.BranchID As Branch_id, TripInfo.BranchName, TripInfo.Branch_Id As BranchID, TripInfo.CompanyId FROM (SELECT  tripdata.Sno, tripdata.DCNo, tripdata.I_Date, tripdata.VehicleNo, tripdata.Status, dispatch.DispName, dispatch.DispType, dispatch.DispMode, dispatch.BranchID, branchdata_1.BranchName, dispatch.Branch_Id, dispatch.CompanyId FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE  (dispatch.CompanyId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT Qty, Sno FROM (SELECT tripdata_1.Sno, tripsubdata.Qty FROM  tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno WHERE (tripdata_1.AssignDate BETWEEN @d1 AND @d2)) TripSubInfo) ProductInfo ON TripInfo.Sno = ProductInfo.Sno GROUP BY TripInfo.Branch_Id");
                        cmd.Parameters.AddWithValue("@branch", BranchID);
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-2));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-2));
                        dtSub_yesterdayData = vdbmngr.SelectQuery(cmd).Tables[0];
                        cmd = new MySqlCommand("SELECT    TripInfo.Sno, TripInfo.DCNo, ROUND(SUM(ProductInfo.Qty) ) AS DeliveryQty,ROUND(AVG(ProductInfo.Qty) ) AS AvgQty, TripInfo.I_Date, TripInfo.VehicleNo, TripInfo.Status, TripInfo.DispName, TripInfo.DispType, TripInfo.DispMode, TripInfo.BranchID As Branch_id, TripInfo.BranchName, TripInfo.Branch_Id As BranchID, TripInfo.CompanyId FROM (SELECT  tripdata.Sno, tripdata.DCNo, tripdata.I_Date, tripdata.VehicleNo, tripdata.Status, dispatch.DispName, dispatch.DispType, dispatch.DispMode, dispatch.BranchID, branchdata_1.BranchName, dispatch.Branch_Id, dispatch.CompanyId FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE  (dispatch.CompanyId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT Qty, Sno FROM (SELECT tripdata_1.Sno, tripsubdata.Qty FROM  tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno WHERE (tripdata_1.AssignDate BETWEEN @d1 AND @d2)) TripSubInfo) ProductInfo ON TripInfo.Sno = ProductInfo.Sno GROUP BY TripInfo.Branch_Id");
                        cmd.Parameters.AddWithValue("@branch", BranchID);
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-8));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-8));
                        dtSub_LastWeekData = vdbmngr.SelectQuery(cmd).Tables[0];
                        cmd = new MySqlCommand("SELECT    TripInfo.Sno, TripInfo.DCNo, ROUND(SUM(ProductInfo.Qty) ) AS DeliveryQty,ROUND(AVG(ProductInfo.Qty) ) AS AvgQty, TripInfo.I_Date, TripInfo.VehicleNo, TripInfo.Status, TripInfo.DispName, TripInfo.DispType, TripInfo.DispMode, TripInfo.BranchID As Branch_id, TripInfo.BranchName, TripInfo.Branch_Id As BranchID, TripInfo.CompanyId FROM (SELECT  tripdata.Sno, tripdata.DCNo, tripdata.I_Date, tripdata.VehicleNo, tripdata.Status, dispatch.DispName, dispatch.DispType, dispatch.DispMode, dispatch.BranchID, branchdata_1.BranchName, dispatch.Branch_Id, dispatch.CompanyId FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE  (dispatch.CompanyId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT Qty, Sno FROM (SELECT tripdata_1.Sno, tripsubdata.Qty FROM  tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno WHERE (tripdata_1.AssignDate BETWEEN @d1 AND @d2)) TripSubInfo) ProductInfo ON TripInfo.Sno = ProductInfo.Sno GROUP BY TripInfo.Branch_Id");
                        cmd.Parameters.AddWithValue("@branch", BranchID);
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-31));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-31));
                        dtSub_lastMonthData = vdbmngr.SelectQuery(cmd).Tables[0];
                        cmd = new MySqlCommand("SELECT    TripInfo.Sno, TripInfo.DCNo, ROUND(SUM(ProductInfo.Qty) ) AS DeliveryQty,ROUND(AVG(ProductInfo.Qty) ) AS AvgQty, TripInfo.I_Date, TripInfo.VehicleNo, TripInfo.Status, TripInfo.DispName, TripInfo.DispType, TripInfo.DispMode, TripInfo.BranchID As Branch_id, TripInfo.BranchName, TripInfo.Branch_Id As BranchID, TripInfo.CompanyId FROM (SELECT  tripdata.Sno, tripdata.DCNo, tripdata.I_Date, tripdata.VehicleNo, tripdata.Status, dispatch.DispName, dispatch.DispType, dispatch.DispMode, dispatch.BranchID, branchdata_1.BranchName, dispatch.Branch_Id, dispatch.CompanyId FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE  (dispatch.CompanyId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT Qty, Sno FROM (SELECT tripdata_1.Sno, tripsubdata.Qty FROM  tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno WHERE (tripdata_1.AssignDate BETWEEN @d1 AND @d2)) TripSubInfo) ProductInfo ON TripInfo.Sno = ProductInfo.Sno GROUP BY TripInfo.Branch_Id");
                        cmd.Parameters.AddWithValue("@branch", BranchID);
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-365));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-365));
                        dtSub_lastYearData = vdbmngr.SelectQuery(cmd).Tables[0];
                        //type = "CompanyWise";
                    }
                    else if (SalesType == "Plant")
                    {
                        if (BranchID == "172")
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch NOT IN (538 , 1801, 3625)) GROUP BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-2));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-2));
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            dtSub_yesterdayData = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else if (BranchID == "3625")
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch IN (4609, 3625)) GROUP BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-2));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-2));
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            dtSub_yesterdayData = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else if (BranchID == "1801")
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID)  GROUP BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-2));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-2));
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            dtSub_yesterdayData = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else if (BranchID == "158")
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch NOT IN (159,4626)  GROUP BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-2));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-2));
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            dtSub_yesterdayData = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) GROUP BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-2));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-2));
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            dtSub_yesterdayData = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        if (BranchID == "172")
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch NOT IN (538 , 1801, 3625)) GROUP BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-8));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-8));
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            dtSub_LastWeekData = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else if (BranchID == "3625")
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch IN (4609, 3625)) GROUP BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-8));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-8));
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            dtSub_LastWeekData = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else if (BranchID == "1801")
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID)  GROUP BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-8));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-8));
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            dtSub_LastWeekData = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else if (BranchID == "158")
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch NOT IN (159,4626)  GROUP BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-8));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-8));
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            dtSub_LastWeekData = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID)  GROUP BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-8));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-8));
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            dtSub_LastWeekData = vdbmngr.SelectQuery(cmd).Tables[0];
                        }

                        if (BranchID == "172")
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch NOT IN (538 , 1801, 3625)) GROUP BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-30));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-30));
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            dtSub_lastMonthData = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else if (BranchID == "3625")
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch IN (4609, 3625)) GROUP BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-30));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-30));
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            dtSub_lastMonthData = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else if (BranchID == "1801")
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID)  GROUP BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-30));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-30));
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            dtSub_lastMonthData = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else if (BranchID == "158")
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch NOT IN (159,4626) GROUP BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-30));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-30));
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            dtSub_lastMonthData = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID)  GROUP BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-30));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-30));
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            dtSub_lastMonthData = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        if (BranchID == "172")
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch NOT IN (538 , 1801, 3625)) GROUP BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-365));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-365));
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            dtSub_lastYearData = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else if (BranchID == "3625")
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch NOT IN (4609, 3625)) GROUP BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-365));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-365));
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            dtSub_lastYearData = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else if (BranchID == "1801")
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID)  GROUP BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-365));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-365));
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            dtSub_lastYearData = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else if (BranchID == "158")
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch NOT IN (159,4626)  GROUP BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-365));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-365));
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            dtSub_lastYearData = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID)  GROUP BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-365));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-365));
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            dtSub_lastYearData = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                    }
                    else
                    {
                        cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SubBranch = @BranchID) GROUP BY branchdata.sno");
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-2));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-2));
                        cmd.Parameters.AddWithValue("@BranchID", BranchID);
                        dtSub_yesterdayData = vdbmngr.SelectQuery(cmd).Tables[0];

                        cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SubBranch = @BranchID) GROUP BY branchdata.sno");
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-8));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-8));
                        cmd.Parameters.AddWithValue("@BranchID", BranchID);
                        dtSub_LastWeekData = vdbmngr.SelectQuery(cmd).Tables[0];

                        cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SubBranch = @BranchID) GROUP BY branchdata.sno");
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-31));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-31));
                        cmd.Parameters.AddWithValue("@BranchID", BranchID);
                        dtSub_lastMonthData = vdbmngr.SelectQuery(cmd).Tables[0];

                        cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SubBranch = @BranchID) GROUP BY branchdata.sno");
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-365));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-365));
                        cmd.Parameters.AddWithValue("@BranchID", BranchID);
                        dtSub_lastYearData = vdbmngr.SelectQuery(cmd).Tables[0];
                    }

                    dtALL.Merge(dtSub_yesterdayData);
                    dtALL.Merge(dtSub_LastWeekData);
                    dtALL.Merge(dtSub_lastMonthData);
                    dtALL.Merge(dtSub_lastYearData);
                    DataTable disticntbarnchname = new DataTable();
                    if (BranchID == "8009" || BranchID == "8012" || BranchID == "8013")
                    {
                        DataView view = new DataView(dtALL);
                        disticntbarnchname = view.ToTable(true, "BranchName", "BranchID");
                    }
                    else
                    {
                        DataView view = new DataView(dtALL);
                        disticntbarnchname = view.ToTable(true, "BranchName", "sno");
                    }
                    DataTable Report = new DataTable();
                    Report.Columns.Add("BranchId");
                    Report.Columns.Add("BranchName");
                    //Report.Columns.Add("BranchId");
                    Report.Columns.Add("Yester Day");
                    Report.Columns.Add("Yester Day %");
                    Report.Columns.Add("Ysign");


                    Report.Columns.Add("Last Week");
                    // Report.Columns.Add("Last Week Avg").DataType = typeof(Double);
                    Report.Columns.Add("Last Week %");
                    Report.Columns.Add("Wsign");


                    Report.Columns.Add("Last Month");
                    // Report.Columns.Add("Last Month Avg").DataType = typeof(Double);
                    Report.Columns.Add("Last Month %");
                    Report.Columns.Add("Msign");

                    Report.Columns.Add("Last Year");
                    //  Report.Columns.Add("Last Year Avg").DataType = typeof(Double);
                    Report.Columns.Add("Last Year %");
                    Report.Columns.Add("Yesign");
                    DataRow newrow = Report.NewRow();
                    if (BranchID == "8009" || BranchID == "8012" || BranchID == "8013")
                    {
                        double yesterdaysum = 0;
                        double lastweaksum = 0;
                        double lastmonthsum = 0;
                        double lastyearsum = 0;
                        if (BranchID == "8009")
                        {
                            yesterdaysum = Convert.ToDouble(dtSub_yesterdayData.Compute("SUM(DeliveryQty)", "GroupId=" + BranchID + ""));
                            lastweaksum = Convert.ToDouble(dtSub_LastWeekData.Compute("SUM(DeliveryQty)", "GroupId=" + BranchID + ""));
                            lastmonthsum = Convert.ToDouble(dtSub_lastMonthData.Compute("SUM(DeliveryQty)", "GroupId=" + BranchID + ""));
                            lastyearsum = Convert.ToDouble(dtSub_lastYearData.Compute("SUM(DeliveryQty)", "GroupId=" + BranchID + ""));
                        }
                        else
                        {
                            yesterdaysum = Convert.ToDouble(dtSub_yesterdayData.Compute("SUM(DeliveryQty)", "CompanyId=" + BranchID + ""));
                            lastweaksum = Convert.ToDouble(dtSub_LastWeekData.Compute("SUM(DeliveryQty)", "CompanyId=" + BranchID + ""));
                            lastmonthsum = Convert.ToDouble(dtSub_lastMonthData.Compute("SUM(DeliveryQty)", "CompanyId=" + BranchID + ""));
                            lastyearsum = Convert.ToDouble(dtSub_lastYearData.Compute("SUM(DeliveryQty)", "CompanyId=" + BranchID + ""));
                        }



                        foreach (DataRow branch in disticntbarnchname.Rows)
                        {
                            DataRow newrow1 = Report.NewRow();
                            newrow1["BranchName"] = branch["BranchName"].ToString();
                            newrow1["BranchId"] = branch["BranchID"].ToString();
                            float DispQty = 0;
                            double incresevalue = 0;
                            foreach (DataRow drSubData in dtSub_yesterdayData.Rows)
                            {
                                if (branch["BranchID"].ToString() == drSubData["BranchID"].ToString())
                                {
                                    float.TryParse(drSubData["DeliveryQty"].ToString(), out DispQty);
                                    if (DispQty > 0)
                                    {
                                        newrow1["Yester Day"] = drSubData["DeliveryQty"].ToString();
                                        //  newrow1["Yester Day Avg"] = drSubData["AvgQty"].ToString();
                                        double temp = 0;
                                        double Percentage = 0; double tempPercentage = 0;
                                        double.TryParse(drSubData["DeliveryQty"].ToString(), out temp);
                                        tempPercentage = (temp / yesterdaysum) * 100;
                                        Percentage = Math.Round(tempPercentage);
                                        newrow1["Yester Day %"] = Percentage;
                                        incresevalue = Percentage;
                                        //yesterdaygrandtotal += DispQty;
                                    }
                                }
                            }
                            foreach (DataRow drSubData in dtSub_LastWeekData.Rows)
                            {
                                if (branch["BranchID"].ToString() == drSubData["BranchID"].ToString())
                                {
                                    float.TryParse(drSubData["DeliveryQty"].ToString(), out DispQty);
                                    if (DispQty > 0)
                                    {
                                        newrow1["Last Week"] = drSubData["DeliveryQty"].ToString();
                                        // newrow1["Last Week Avg"] = drSubData["AvgQty"].ToString();

                                        double temp = 0;
                                        double Percentage = 0; double tempPercentage = 0;
                                        double.TryParse(drSubData["DeliveryQty"].ToString(), out temp);
                                        tempPercentage = (temp / lastweaksum) * 100;
                                        Percentage = Math.Round(tempPercentage);
                                        newrow1["Last Week %"] = Percentage;
                                        if (incresevalue > Percentage)
                                        {
                                            newrow1["Wsign"] = "-";
                                        }
                                        else
                                        {
                                            newrow1["Wsign"] = "+";
                                        }

                                        //lastweekgrandtotal += DispQty;

                                    }
                                }
                            }
                            foreach (DataRow drSubData in dtSub_lastMonthData.Rows)
                            {
                                if (branch["BranchID"].ToString() == drSubData["BranchID"].ToString())
                                {
                                    float.TryParse(drSubData["DeliveryQty"].ToString(), out DispQty);
                                    if (DispQty > 0)
                                    {
                                        newrow1["Last Month"] = drSubData["DeliveryQty"].ToString();
                                        //  newrow1["Last Month Avg"] = drSubData["AvgQty"].ToString();
                                        // lastmonthgrandtotal += DispQty;

                                        double temp = 0;
                                        double Percentage = 0; double tempPercentage = 0;
                                        double.TryParse(drSubData["DeliveryQty"].ToString(), out temp);
                                        tempPercentage = (temp / lastmonthsum) * 100;
                                        Percentage = Math.Round(tempPercentage);
                                        newrow1["Last Month %"] = Percentage;
                                        if (incresevalue > Percentage)
                                        {
                                            newrow1["Msign"] = "-";
                                        }
                                        else
                                        {
                                            newrow1["Msign"] = "+";
                                        }
                                    }
                                }
                            }

                            foreach (DataRow drSubData in dtSub_lastYearData.Rows)
                            {
                                if (branch["BranchID"].ToString() == drSubData["BranchID"].ToString())
                                {
                                    float.TryParse(drSubData["DeliveryQty"].ToString(), out DispQty);
                                    if (DispQty > 0)
                                    {
                                        newrow1["Last Year"] = drSubData["DeliveryQty"].ToString();
                                        //  newrow1["Last Year Avg"] = drSubData["AvgQty"].ToString();
                                        //lastyeargrandtotal += DispQty;

                                        double temp = 0;
                                        double Percentage = 0; double tempPercentage = 0;
                                        double.TryParse(drSubData["DeliveryQty"].ToString(), out temp);
                                        tempPercentage = (temp / lastyearsum) * 100;
                                        Percentage = Math.Round(tempPercentage);
                                        newrow1["Last Year %"] = Percentage;
                                        if (incresevalue > Percentage)
                                        {
                                            newrow1["Yesign"] = "-";
                                        }
                                        else
                                        {
                                            newrow1["Yesign"] = "+";
                                        }
                                    }
                                }
                            }
                            //if (DispQty > 0)
                            //{
                            Report.Rows.Add(newrow1);
                            //}
                        }
                    }
                    else
                    {
                        foreach (DataRow branch in disticntbarnchname.Rows)
                        {
                            DataRow newrow1 = Report.NewRow();
                            newrow1["BranchName"] = branch["BranchName"].ToString();
                            newrow1["BranchId"] = branch["sno"].ToString();
                            float DispQty = 0;
                            foreach (DataRow drSubData in dtSub_yesterdayData.Rows)
                            {
                                if (branch["sno"].ToString() == drSubData["sno"].ToString())
                                {
                                    float.TryParse(drSubData["DeliveryQty"].ToString(), out DispQty);
                                    if (DispQty > 0)
                                    {
                                        newrow1["Yester Day"] = drSubData["DeliveryQty"].ToString();
                                        //newrow1["Yester Day Avg"] = drSubData["AvgQty"].ToString();
                                        //yesterdaygrandtotal += DispQty;


                                    }
                                }
                            }
                            foreach (DataRow drSubData in dtSub_LastWeekData.Rows)
                            {
                                if (branch["sno"].ToString() == drSubData["sno"].ToString())
                                {
                                    float.TryParse(drSubData["DeliveryQty"].ToString(), out DispQty);
                                    if (DispQty > 0)
                                    {
                                        newrow1["Last Week"] = drSubData["DeliveryQty"].ToString();
                                        // newrow1["Last Week Avg"] = drSubData["AvgQty"].ToString();
                                        //lastweekgrandtotal += DispQty;

                                    }
                                }
                            }
                            foreach (DataRow drSubData in dtSub_lastMonthData.Rows)
                            {
                                if (branch["sno"].ToString() == drSubData["sno"].ToString())
                                {
                                    float.TryParse(drSubData["DeliveryQty"].ToString(), out DispQty);
                                    if (DispQty > 0)
                                    {
                                        newrow1["Last Month"] = drSubData["DeliveryQty"].ToString();
                                        //newrow1["Last Month Avg"] = drSubData["AvgQty"].ToString();
                                        //lastmonthgrandtotal += DispQty;

                                    }
                                }
                            }

                            foreach (DataRow drSubData in dtSub_lastYearData.Rows)
                            {
                                if (branch["sno"].ToString() == drSubData["sno"].ToString())
                                {
                                    float.TryParse(drSubData["DeliveryQty"].ToString(), out DispQty);
                                    if (DispQty > 0)
                                    {
                                        newrow1["Last Year"] = drSubData["DeliveryQty"].ToString();
                                        //  newrow1["Last Year Avg"] = drSubData["AvgQty"].ToString();
                                        //lastyeargrandtotal += DispQty;

                                    }
                                }
                            }
                            //double temp = 0;
                            //double.TryParse(dr["Yester Day"].ToString(), out temp);
                            //tempPercentage = (temp / yesterdaygrandtotal) * 100;
                            //Percentage = Math.Round(tempPercentage );
                            //if (DispQty > 0)
                            //{
                            Report.Rows.Add(newrow1);
                            //}
                        }
                    }
                    grddata.DataSource = Report;
                    grddata.DataBind();
                }
                #endregion
                #region
                if (SectedDataType == "Days")
                {
                    if (BranchID == "8009")
                    {
                        cmd = new MySqlCommand("SELECT    TripInfo.Sno, TripInfo.DCNo, ROUND(SUM(ProductInfo.Qty) ) AS DeliveryQty,ROUND(AVG(ProductInfo.Qty) ) AS AvgQty, TripInfo.I_Date, TripInfo.VehicleNo, TripInfo.Status, TripInfo.DispName, TripInfo.DispType, TripInfo.DispMode, TripInfo.BranchID As Branch_id, TripInfo.BranchName, TripInfo.Branch_Id As BranchID FROM (SELECT  tripdata.Sno, tripdata.DCNo, tripdata.I_Date, tripdata.VehicleNo, tripdata.Status, dispatch.DispName, dispatch.DispType, dispatch.DispMode, dispatch.BranchID, branchdata_1.BranchName, dispatch.Branch_Id FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE  (dispatch.GroupId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT Qty, Sno FROM (SELECT tripdata_1.Sno, tripsubdata.Qty FROM  tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno WHERE (tripdata_1.AssignDate BETWEEN @d1 AND @d2)) TripSubInfo) ProductInfo ON TripInfo.Sno = ProductInfo.Sno GROUP BY  DATE(TripInfo.I_Date),TripInfo.Branch_Id");
                        cmd.Parameters.AddWithValue("@branch", BranchID);
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate));
                        Dt_PresentMonth = vdbmngr.SelectQuery(cmd).Tables[0];

                        cmd = new MySqlCommand("SELECT    TripInfo.Sno, TripInfo.DCNo, ROUND(SUM(ProductInfo.Qty) ) AS DeliveryQty,ROUND(AVG(ProductInfo.Qty) ) AS AvgQty, TripInfo.I_Date, TripInfo.VehicleNo, TripInfo.Status, TripInfo.DispName, TripInfo.DispType, TripInfo.DispMode, TripInfo.BranchID As Branch_id, TripInfo.BranchName, TripInfo.Branch_Id As BranchID FROM (SELECT  tripdata.Sno, tripdata.DCNo, tripdata.I_Date, tripdata.VehicleNo, tripdata.Status, dispatch.DispName, dispatch.DispType, dispatch.DispMode, dispatch.BranchID, branchdata_1.BranchName, dispatch.Branch_Id FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE  (dispatch.GroupId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT Qty, Sno FROM (SELECT tripdata_1.Sno, tripsubdata.Qty FROM  tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno WHERE (tripdata_1.AssignDate BETWEEN @d1 AND @d2)) TripSubInfo) ProductInfo ON TripInfo.Sno = ProductInfo.Sno GROUP BY DATE(TripInfo.I_Date),TripInfo.Branch_Id");
                        cmd.Parameters.AddWithValue("@branch", BranchID);
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(lastmonthfrom));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(lastmonthto));
                        dtSub_lastMonthData = vdbmngr.SelectQuery(cmd).Tables[0];

                        cmd = new MySqlCommand("SELECT    TripInfo.Sno, TripInfo.DCNo, ROUND(SUM(ProductInfo.Qty) ) AS DeliveryQty,ROUND(AVG(ProductInfo.Qty) ) AS AvgQty, TripInfo.I_Date, TripInfo.VehicleNo, TripInfo.Status, TripInfo.DispName, TripInfo.DispType, TripInfo.DispMode, TripInfo.BranchID As Branch_id, TripInfo.BranchName, TripInfo.Branch_Id As BranchID FROM (SELECT  tripdata.Sno, tripdata.DCNo, tripdata.I_Date, tripdata.VehicleNo, tripdata.Status, dispatch.DispName, dispatch.DispType, dispatch.DispMode, dispatch.BranchID, branchdata_1.BranchName, dispatch.Branch_Id FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE  (dispatch.GroupId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT Qty, Sno FROM (SELECT tripdata_1.Sno, tripsubdata.Qty FROM  tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno WHERE (tripdata_1.AssignDate BETWEEN @d1 AND @d2)) TripSubInfo) ProductInfo ON TripInfo.Sno = ProductInfo.Sno GROUP BY DATE(TripInfo.I_Date),TripInfo.Branch_Id");
                        cmd.Parameters.AddWithValue("@branch", BranchID);
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(LastYearFromDate));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(LastYearToDate));
                        dtSub_lastYearData = vdbmngr.SelectQuery(cmd).Tables[0];
                        // type = "GroupWise";
                    }
                    else if (BranchID == "8012" || BranchID == "8013")
                    {
                        cmd = new MySqlCommand("SELECT    TripInfo.Sno, TripInfo.DCNo, ROUND(SUM(ProductInfo.Qty) ) AS DeliveryQty,ROUND(AVG(ProductInfo.Qty) ) AS AvgQty, TripInfo.I_Date, TripInfo.VehicleNo, TripInfo.Status, TripInfo.DispName, TripInfo.DispType, TripInfo.DispMode, TripInfo.BranchID As Branch_id, TripInfo.BranchName, TripInfo.Branch_Id As BranchID FROM (SELECT  tripdata.Sno, tripdata.DCNo, tripdata.I_Date, tripdata.VehicleNo, tripdata.Status, dispatch.DispName, dispatch.DispType, dispatch.DispMode, dispatch.BranchID, branchdata_1.BranchName, dispatch.Branch_Id FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE  (dispatch.CompanyId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT Qty, Sno FROM (SELECT tripdata_1.Sno, tripsubdata.Qty FROM  tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno WHERE (tripdata_1.AssignDate BETWEEN @d1 AND @d2)) TripSubInfo) ProductInfo ON TripInfo.Sno = ProductInfo.Sno GROUP BY DATE(TripInfo.I_Date),TripInfo.Branch_Id");
                        cmd.Parameters.AddWithValue("@branch", BranchID);
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate));
                        Dt_PresentMonth = vdbmngr.SelectQuery(cmd).Tables[0];
                        cmd = new MySqlCommand("SELECT    TripInfo.Sno, TripInfo.DCNo, ROUND(SUM(ProductInfo.Qty) ) AS DeliveryQty,ROUND(AVG(ProductInfo.Qty) ) AS AvgQty, TripInfo.I_Date, TripInfo.VehicleNo, TripInfo.Status, TripInfo.DispName, TripInfo.DispType, TripInfo.DispMode, TripInfo.BranchID As Branch_id, TripInfo.BranchName, TripInfo.Branch_Id As BranchID FROM (SELECT  tripdata.Sno, tripdata.DCNo, tripdata.I_Date, tripdata.VehicleNo, tripdata.Status, dispatch.DispName, dispatch.DispType, dispatch.DispMode, dispatch.BranchID, branchdata_1.BranchName, dispatch.Branch_Id FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE  (dispatch.CompanyId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT Qty, Sno FROM (SELECT tripdata_1.Sno, tripsubdata.Qty FROM  tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno WHERE (tripdata_1.AssignDate BETWEEN @d1 AND @d2)) TripSubInfo) ProductInfo ON TripInfo.Sno = ProductInfo.Sno GROUP BY DATE(TripInfo.I_Date),TripInfo.Branch_Id");
                        cmd.Parameters.AddWithValue("@branch", BranchID);
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(lastmonthfrom));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(lastmonthto));
                        dtSub_lastMonthData = vdbmngr.SelectQuery(cmd).Tables[0];

                        //cmd = new MySqlCommand("SELECT    TripInfo.Sno, TripInfo.DCNo, ROUND(SUM(ProductInfo.Qty) ) AS DeliveryQty,ROUND(AVG(ProductInfo.Qty) ) AS AvgQty, TripInfo.I_Date, TripInfo.VehicleNo, TripInfo.Status, TripInfo.DispName, TripInfo.DispType, TripInfo.DispMode, TripInfo.BranchID As Branch_id, TripInfo.BranchName, TripInfo.Branch_Id As BranchID FROM (SELECT  tripdata.Sno, tripdata.DCNo, tripdata.I_Date, tripdata.VehicleNo, tripdata.Status, dispatch.DispName, dispatch.DispType, dispatch.DispMode, dispatch.BranchID, branchdata_1.BranchName, dispatch.Branch_Id FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE  (dispatch.CompanyId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT Qty, Sno FROM (SELECT tripdata_1.Sno, tripsubdata.Qty FROM  tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno WHERE (tripdata_1.AssignDate BETWEEN @d1 AND @d2)) TripSubInfo) ProductInfo ON TripInfo.Sno = ProductInfo.Sno GROUP BY DATE(TripInfo.I_Date),TripInfo.Branch_Id");
                        //cmd.Parameters.AddWithValue("@branch", BranchId);
                        //cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-180));
                        //cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-180));
                        //Dt_LastSixthMonth = vdbmngr.SelectQuery(cmd).Tables[0];

                        cmd = new MySqlCommand("SELECT    TripInfo.Sno, TripInfo.DCNo, ROUND(SUM(ProductInfo.Qty) ) AS DeliveryQty,ROUND(AVG(ProductInfo.Qty) ) AS AvgQty, TripInfo.I_Date, TripInfo.VehicleNo, TripInfo.Status, TripInfo.DispName, TripInfo.DispType, TripInfo.DispMode, TripInfo.BranchID As Branch_id, TripInfo.BranchName, TripInfo.Branch_Id As BranchID FROM (SELECT  tripdata.Sno, tripdata.DCNo, tripdata.I_Date, tripdata.VehicleNo, tripdata.Status, dispatch.DispName, dispatch.DispType, dispatch.DispMode, dispatch.BranchID, branchdata_1.BranchName, dispatch.Branch_Id FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE  (dispatch.CompanyId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT Qty, Sno FROM (SELECT tripdata_1.Sno, tripsubdata.Qty FROM  tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno WHERE (tripdata_1.AssignDate BETWEEN @d1 AND @d2)) TripSubInfo) ProductInfo ON TripInfo.Sno = ProductInfo.Sno GROUP BY DATE(TripInfo.I_Date),TripInfo.Branch_Id");
                        cmd.Parameters.AddWithValue("@branch", BranchID);
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(LastYearFromDate));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(LastYearToDate));
                        dtSub_lastYearData = vdbmngr.SelectQuery(cmd).Tables[0];
                        // type = "CompanyWise";
                    }
                    else if (SalesType == "Plant")
                    {
                        if (BranchID == "172")
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, indents.I_date,ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch NOT IN (538 , 1801, 3625)) GROUP BY DATE(indents.I_Date),branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate));
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            Dt_PresentMonth = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else if (BranchID == "3625")
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName,indents.I_date, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch IN (4609, 3625)) GROUP BY DATE(indents.I_Date),branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate));
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            Dt_PresentMonth = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else if (BranchID == "1801")
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName,indents.I_date, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID)  GROUP BY DATE(indents.I_Date),branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate));
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            Dt_PresentMonth = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, indents.I_date,ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID)  GROUP BY DATE(indents.I_Date),branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate));
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            Dt_PresentMonth = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        if (BranchID == "172")
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName,indents.I_date, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch NOT IN (538 , 1801, 3625)) GROUP BY DATE(indents.I_Date),branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(lastmonthfrom));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(lastmonthto));
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            dtSub_lastMonthData = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else if (BranchID == "3625")
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, indents.I_date,ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch IN (4609, 3625)) GROUP BY DATE(indents.I_Date),branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(lastmonthfrom));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(lastmonthto));
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            dtSub_lastMonthData = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else if (BranchID == "1801")
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName,indents.I_date, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID)  GROUP BY DATE(indents.I_Date),branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(lastmonthfrom));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(lastmonthto));
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            dtSub_lastMonthData = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, indents.I_date,ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID)  GROUP BY DATE(indents.I_Date),branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(lastmonthfrom));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(lastmonthto));
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            dtSub_lastMonthData = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        if (BranchID == "172")
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, indents.I_date,ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch NOT IN (538 , 1801, 3625)) GROUP BY DATE(indents.I_Date),branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(LastYearFromDate));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(LastYearToDate));
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            dtSub_lastYearData = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else if (BranchID == "3625")
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, indents.I_date,ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch NOT IN (4609, 3625)) GROUP BY DATE(indents.I_Date),branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(LastYearFromDate));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(LastYearToDate));
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            dtSub_lastYearData = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else if (BranchID == "1801")
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, indents.I_date,ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID)  GROUP BY DATE(indents.I_Date),branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(LastYearFromDate));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(LastYearToDate));
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            dtSub_lastYearData = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, indents.I_date,ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID)  GROUP BY DATE(indents.I_Date),branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(LastYearFromDate));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(LastYearToDate));
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            dtSub_lastYearData = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                    }
                    else
                    {
                        cmd = new MySqlCommand("SELECT   branchdata.BranchName,indents.I_date, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SubBranch = @BranchID) GROUP BY DATE(indents.I_Date),branchdata.sno");
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate));
                        cmd.Parameters.AddWithValue("@BranchID", BranchID);
                        Dt_PresentMonth = vdbmngr.SelectQuery(cmd).Tables[0];

                        cmd = new MySqlCommand("SELECT   branchdata.BranchName,indents.I_date, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SubBranch = @BranchID) GROUP BY DATE(indents.I_Date),branchdata.sno");
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(lastmonthfrom));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(lastmonthto));
                        cmd.Parameters.AddWithValue("@BranchID", BranchID);
                        dtSub_lastMonthData = vdbmngr.SelectQuery(cmd).Tables[0];

                        cmd = new MySqlCommand("SELECT   branchdata.BranchName, indents.I_date,ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SubBranch = @BranchID) GROUP BY DATE(indents.I_Date),branchdata.sno");
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(LastYearFromDate));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(LastYearToDate));
                        cmd.Parameters.AddWithValue("@BranchID", BranchID);
                        dtSub_lastYearData = vdbmngr.SelectQuery(cmd).Tables[0];
                    }

                    dtALL.Merge(Dt_PresentMonth);
                    dtALL.Merge(dtSub_lastMonthData);
                    dtALL.Merge(Dt_LastSixthMonth);
                    dtALL.Merge(dtSub_lastYearData);
                    DataTable disticntbarnchname = new DataTable();
                    DataTable disticntbarnchname1 = new DataTable();
                    if (BranchID == "8009" || BranchID == "8012" || BranchID == "8013")
                    {
                        DataView view = new DataView(dtALL);
                        disticntbarnchname = view.ToTable(true, "BranchName", "BranchID");
                        DataView view3 = new DataView(dtALL);
                        disticntbarnchname1 = view3.ToTable(true, "I_Date");
                    }
                    else
                    {
                        DataView view = new DataView(dtALL);
                        disticntbarnchname = view.ToTable(true, "BranchName", "sno");
                        DataView view3 = new DataView(dtALL);
                        disticntbarnchname1 = view3.ToTable(true, "I_Date");
                    }
                    DataTable Report1 = new DataTable();
                    Report1.Columns.Add("Date");
                    foreach (DataRow branch in disticntbarnchname1.Rows)
                    {
                        DataRow newrow = Report1.NewRow();
                        DateTime dtDoe = Convert.ToDateTime(branch["i_date"].ToString());
                        string strdate = dtDoe.ToString("dd");
                        newrow["Date"] = strdate;
                        Report1.Rows.Add(newrow); ;
                    }
                    DataView view4 = new DataView(Report1);
                    DataTable disticntbarnchname4 = view4.ToTable(true, "Date");
                    DataTable Report = new DataTable();
                    Report.Columns.Add("BranchId");
                    Report.Columns.Add("DataType");
                    Report.Columns.Add("BranchName");
                    foreach (DataRow branch in disticntbarnchname4.Rows)
                    {
                        Report.Columns.Add(branch["Date"].ToString());
                    }
                    //DataRow newrow = Report.NewRow();
                    if (BranchID == "8009" || BranchID == "8012" || BranchID == "8013")
                    {
                        int j = 1;
                        foreach (DataRow branch in disticntbarnchname.Rows)
                        {
                            DataRow newrow1 = Report.NewRow();
                            if (j == 1)
                            {
                                newrow1["DataType"] = "This Month";

                            }
                            newrow1["BranchName"] = branch["BranchName"].ToString();
                            newrow1["BranchId"] = branch["BranchID"].ToString();
                            float DispQty = 0;
                            foreach (DataRow drSubData in Dt_PresentMonth.Rows)
                            {
                                if (branch["BranchID"].ToString() == drSubData["BranchID"].ToString())
                                {
                                    float.TryParse(drSubData["DeliveryQty"].ToString(), out DispQty);
                                    if (DispQty > 0)
                                    {

                                        DateTime dtDoe = Convert.ToDateTime(drSubData["i_date"].ToString());
                                        string strdate = dtDoe.ToString("dd");
                                        newrow1[strdate] = drSubData["DeliveryQty"].ToString();
                                        // yesterdaygrandtotal += DispQty;

                                    }
                                }
                            }
                            Report.Rows.Add(newrow1);

                            j++;
                        }
                        int j1 = 1;
                        foreach (DataRow branch in disticntbarnchname.Rows)
                        {
                            DataRow newrow1 = Report.NewRow();
                            if (j1 == 1)
                            {
                                newrow1["DataType"] = "Last Month";
                            }
                            newrow1["BranchName"] = branch["BranchName"].ToString();
                            newrow1["BranchId"] = branch["BranchID"].ToString();
                            float DispQty = 0;
                            foreach (DataRow drSubData in dtSub_lastMonthData.Rows)
                            {
                                if (branch["BranchID"].ToString() == drSubData["BranchID"].ToString())
                                {
                                    float.TryParse(drSubData["DeliveryQty"].ToString(), out DispQty);
                                    if (DispQty > 0)
                                    {
                                        DateTime dtDoe = Convert.ToDateTime(drSubData["i_date"].ToString());
                                        string strdate = dtDoe.ToString("dd");
                                        newrow1[strdate] = drSubData["DeliveryQty"].ToString();

                                        // lastmonthgrandtotal += DispQty;

                                    }
                                }
                            }
                            Report.Rows.Add(newrow1);
                            j1++;
                        }
                        int j2 = 1;
                        foreach (DataRow branch in disticntbarnchname.Rows)
                        {
                            DataRow newrow1 = Report.NewRow();
                            if (j2 == 1)
                            {
                                newrow1["DataType"] = "Last Year";
                            }
                            newrow1["BranchName"] = branch["BranchName"].ToString();
                            newrow1["BranchId"] = branch["BranchID"].ToString();
                            float DispQty = 0;
                            foreach (DataRow drSubData in dtSub_lastYearData.Rows)
                            {
                                if (branch["BranchID"].ToString() == drSubData["BranchID"].ToString())
                                {
                                    float.TryParse(drSubData["DeliveryQty"].ToString(), out DispQty);
                                    if (DispQty > 0)
                                    {
                                        DateTime dtDoe = Convert.ToDateTime(drSubData["i_date"].ToString());
                                        string strdate = dtDoe.ToString("dd");
                                        newrow1[strdate] = drSubData["DeliveryQty"].ToString();
                                        //lastyeargrandtotal += DispQty;
                                    }
                                }
                            }
                            if (DispQty > 0)
                            {
                                Report.Rows.Add(newrow1);
                                j2++;
                            }
                        }
                    }
                    else
                    {
                        int j1 = 1;
                        foreach (DataRow branch in disticntbarnchname.Rows)
                        {
                            DataRow newrow1 = Report.NewRow();
                            newrow1["BranchName"] = branch["BranchName"].ToString();
                            newrow1["BranchId"] = branch["sno"].ToString();
                            if (j1 == 1)
                            {
                                newrow1["DataType"] = "This Month";

                            }

                            float DispQty = 0;
                            foreach (DataRow drSubData in Dt_PresentMonth.Rows)
                            {
                                if (branch["sno"].ToString() == drSubData["sno"].ToString())
                                {
                                    float.TryParse(drSubData["DeliveryQty"].ToString(), out DispQty);
                                    if (DispQty > 0)
                                    {
                                        DateTime dtDoe = Convert.ToDateTime(drSubData["i_date"].ToString());
                                        string strdate = dtDoe.ToString("dd");
                                        newrow1[strdate] = drSubData["DeliveryQty"].ToString();
                                        //yesterdaygrandtotal += DispQty;
                                    }
                                }
                            }
                            Report.Rows.Add(newrow1);
                            j1++;
                        }
                        int j2 = 1;
                        foreach (DataRow branch in disticntbarnchname.Rows)
                        {
                            DataRow newrow1 = Report.NewRow();
                            newrow1["BranchName"] = branch["BranchName"].ToString();
                            newrow1["BranchId"] = branch["sno"].ToString();
                            if (j2 == 1)
                            {
                                newrow1["DataType"] = "Last Month";

                            }
                            float DispQty = 0;
                            foreach (DataRow drSubData in dtSub_lastMonthData.Rows)
                            {
                                if (branch["sno"].ToString() == drSubData["sno"].ToString())
                                {
                                    float.TryParse(drSubData["DeliveryQty"].ToString(), out DispQty);
                                    if (DispQty > 0)
                                    {
                                        DateTime dtDoe = Convert.ToDateTime(drSubData["i_date"].ToString());
                                        string strdate = dtDoe.ToString("dd");
                                        newrow1[strdate] = drSubData["DeliveryQty"].ToString();
                                        //lastmonthgrandtotal += DispQty;

                                    }
                                }
                            }
                            Report.Rows.Add(newrow1);
                            j2++;
                        }
                        int j3 = 1;
                        foreach (DataRow branch in disticntbarnchname.Rows)
                        {
                            DataRow newrow1 = Report.NewRow();
                            newrow1["BranchName"] = branch["BranchName"].ToString();
                            newrow1["BranchId"] = branch["sno"].ToString();
                            if (j3 == 1)
                            {
                                newrow1["DataType"] = "Last Year";
                            }
                            float DispQty = 0;
                            foreach (DataRow drSubData in dtSub_lastYearData.Rows)
                            {
                                if (branch["sno"].ToString() == drSubData["sno"].ToString())
                                {
                                    float.TryParse(drSubData["DeliveryQty"].ToString(), out DispQty);
                                    if (DispQty > 0)
                                    {
                                        DateTime dtDoe = Convert.ToDateTime(drSubData["i_date"].ToString());
                                        string strdate = dtDoe.ToString("dd");
                                        newrow1[strdate] = drSubData["DeliveryQty"].ToString();
                                        //lastyeargrandtotal += DispQty;

                                    }
                                }
                            }
                            Report.Rows.Add(newrow1);
                            j3++;
                        }
                    }
                    grddata.DataSource = Report;
                    grddata.DataBind();
                }
                #endregion
                #region
                else if (SectedDataType == "Weak")
                {
                    string strfromdate = FromDate.ToString();
                    DateTime fromDate = DateTime.Parse(strfromdate.Trim());
                    var d_fromdate = fromDate;
                    CultureInfo cul_from = CultureInfo.CurrentCulture;
                    int from_weekNum = cul_from.Calendar.GetWeekOfYear(
                        d_fromdate,
                        CalendarWeekRule.FirstDay,
                        DayOfWeek.Monday);
                    string strtodate = ToDate.ToString();
                    DateTime toDate = DateTime.Parse(strtodate.Trim());
                    var d_toDate = toDate;
                    CultureInfo cul_to = CultureInfo.CurrentCulture;
                    int to_weekNum = cul_to.Calendar.GetWeekOfYear(
                        d_toDate,
                        CalendarWeekRule.FirstDay,
                        DayOfWeek.Monday);
                    int diffweeks = to_weekNum - from_weekNum;
                    DateTime firstmonth = new DateTime();
                    DateTime lastmonth = new DateTime();
                    ToDate = ToDate.AddMonths(1);
                    TimeSpan dateSpan = ToDate.Subtract(FromDate);
                    int years = (dateSpan.Days / 365);
                    int months = ((dateSpan.Days % 365) / 31) + (years * 12);
                    int N = 0;
                    int i = 1;
                    DataTable dtPresentAllWeeks = new DataTable();
                    DataTable dtLastAllWeeks = new DataTable();
                    DataTable dtLastYearAllWeeks = new DataTable();
                    if (months != 0)
                    {
                        int newweek = from_weekNum;
                        int weaknumber = 0;
                        for (int j = 0; j < diffweeks; j++)
                        {
                            firstmonth = GetLowDate(FromDate);
                            lastmonth = GetHighDate(firstmonth.AddDays(7));
                            DateTime dtF = firstmonth;
                            string ChangedTime1 = firstmonth.ToString("dd/MMM");
                            string ChangedTime2 = lastmonth.ToString("dd/MMM");
                            string Changedt = firstmonth.ToString("MMM");
                            string mnth = firstmonth.ToString("MM");

                            weaknumber++;

                            if (BranchID == "8009")
                            {
                                cmd = new MySqlCommand("SELECT    TripInfo.Sno, TripInfo.DCNo, ROUND(SUM(ProductInfo.Qty) ) AS DeliveryQty,ROUND(AVG(ProductInfo.Qty) ) AS AvgQty, TripInfo.VehicleNo, TripInfo.Status, TripInfo.DispName, TripInfo.DispType, TripInfo.DispMode, TripInfo.BranchID As Branch_id, TripInfo.BranchName, TripInfo.Branch_Id As BranchID FROM (SELECT  tripdata.Sno, tripdata.DCNo, tripdata.I_Date, tripdata.VehicleNo, tripdata.Status, dispatch.DispName, dispatch.DispType, dispatch.DispMode, dispatch.BranchID, branchdata_1.BranchName, dispatch.Branch_Id FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE  (dispatch.GroupId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT Qty, Sno FROM (SELECT tripdata_1.Sno, tripsubdata.Qty FROM  tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno WHERE (tripdata_1.AssignDate BETWEEN @d1 AND @d2)) TripSubInfo) ProductInfo ON TripInfo.Sno = ProductInfo.Sno GROUP BY  TripInfo.Branch_Id");
                                cmd.Parameters.AddWithValue("@branch", BranchID);
                                cmd.Parameters.AddWithValue("@d1", dtF);
                                cmd.Parameters.AddWithValue("@d2", lastmonth);
                                Dt_PresentMonth = vdbmngr.SelectQuery(cmd).Tables[0];

                                cmd = new MySqlCommand("SELECT    TripInfo.Sno, TripInfo.DCNo, ROUND(SUM(ProductInfo.Qty) ) AS DeliveryQty,ROUND(AVG(ProductInfo.Qty) ) AS AvgQty, TripInfo.VehicleNo, TripInfo.Status, TripInfo.DispName, TripInfo.DispType, TripInfo.DispMode, TripInfo.BranchID As Branch_id, TripInfo.BranchName, TripInfo.Branch_Id As BranchID FROM (SELECT  tripdata.Sno, tripdata.DCNo, tripdata.I_Date, tripdata.VehicleNo, tripdata.Status, dispatch.DispName, dispatch.DispType, dispatch.DispMode, dispatch.BranchID, branchdata_1.BranchName, dispatch.Branch_Id FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE  (dispatch.GroupId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT Qty, Sno FROM (SELECT tripdata_1.Sno, tripsubdata.Qty FROM  tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno WHERE (tripdata_1.AssignDate BETWEEN @d1 AND @d2)) TripSubInfo) ProductInfo ON TripInfo.Sno = ProductInfo.Sno GROUP BY TripInfo.Branch_Id");
                                cmd.Parameters.AddWithValue("@branch", BranchID);
                                cmd.Parameters.AddWithValue("@d1", dtF.AddDays(-30));
                                cmd.Parameters.AddWithValue("@d2", lastmonth.AddDays(-30));
                                dtSub_lastMonthData = vdbmngr.SelectQuery(cmd).Tables[0];

                                cmd = new MySqlCommand("SELECT    TripInfo.Sno, TripInfo.DCNo, ROUND(SUM(ProductInfo.Qty) ) AS DeliveryQty,ROUND(AVG(ProductInfo.Qty) ) AS AvgQty, TripInfo.VehicleNo, TripInfo.Status, TripInfo.DispName, TripInfo.DispType, TripInfo.DispMode, TripInfo.BranchID As Branch_id, TripInfo.BranchName, TripInfo.Branch_Id As BranchID FROM (SELECT  tripdata.Sno, tripdata.DCNo, tripdata.I_Date, tripdata.VehicleNo, tripdata.Status, dispatch.DispName, dispatch.DispType, dispatch.DispMode, dispatch.BranchID, branchdata_1.BranchName, dispatch.Branch_Id FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE  (dispatch.GroupId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT Qty, Sno FROM (SELECT tripdata_1.Sno, tripsubdata.Qty FROM  tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno WHERE (tripdata_1.AssignDate BETWEEN @d1 AND @d2)) TripSubInfo) ProductInfo ON TripInfo.Sno = ProductInfo.Sno GROUP BY TripInfo.Branch_Id");
                                cmd.Parameters.AddWithValue("@branch", BranchID);
                                cmd.Parameters.AddWithValue("@d1", dtF.AddDays(-365));
                                cmd.Parameters.AddWithValue("@d2", lastmonth.AddDays(-365));
                                dtSub_lastYearData = vdbmngr.SelectQuery(cmd).Tables[0];
                                // type = "GroupWise";
                            }
                            else if (BranchID == "8012" || BranchID == "8013")
                            {
                                cmd = new MySqlCommand("SELECT    TripInfo.Sno, TripInfo.DCNo, ROUND(SUM(ProductInfo.Qty) ) AS DeliveryQty,ROUND(AVG(ProductInfo.Qty) ) AS AvgQty, TripInfo.VehicleNo, TripInfo.Status, TripInfo.DispName, TripInfo.DispType, TripInfo.DispMode, TripInfo.BranchID As Branch_id, TripInfo.BranchName, TripInfo.Branch_Id As BranchID FROM (SELECT  tripdata.Sno, tripdata.DCNo, tripdata.I_Date, tripdata.VehicleNo, tripdata.Status, dispatch.DispName, dispatch.DispType, dispatch.DispMode, dispatch.BranchID, branchdata_1.BranchName, dispatch.Branch_Id FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE  (dispatch.CompanyId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT Qty, Sno FROM (SELECT tripdata_1.Sno, tripsubdata.Qty FROM  tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno WHERE (tripdata_1.AssignDate BETWEEN @d1 AND @d2)) TripSubInfo) ProductInfo ON TripInfo.Sno = ProductInfo.Sno GROUP BY TripInfo.Branch_Id");
                                cmd.Parameters.AddWithValue("@branch", BranchID);
                                cmd.Parameters.AddWithValue("@d1", dtF);
                                cmd.Parameters.AddWithValue("@d2", lastmonth);
                                Dt_PresentMonth = vdbmngr.SelectQuery(cmd).Tables[0];
                                cmd = new MySqlCommand("SELECT    TripInfo.Sno, TripInfo.DCNo, ROUND(SUM(ProductInfo.Qty) ) AS DeliveryQty,ROUND(AVG(ProductInfo.Qty) ) AS AvgQty, TripInfo.VehicleNo, TripInfo.Status, TripInfo.DispName, TripInfo.DispType, TripInfo.DispMode, TripInfo.BranchID As Branch_id, TripInfo.BranchName, TripInfo.Branch_Id As BranchID FROM (SELECT  tripdata.Sno, tripdata.DCNo, tripdata.I_Date, tripdata.VehicleNo, tripdata.Status, dispatch.DispName, dispatch.DispType, dispatch.DispMode, dispatch.BranchID, branchdata_1.BranchName, dispatch.Branch_Id FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE  (dispatch.CompanyId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT Qty, Sno FROM (SELECT tripdata_1.Sno, tripsubdata.Qty FROM  tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno WHERE (tripdata_1.AssignDate BETWEEN @d1 AND @d2)) TripSubInfo) ProductInfo ON TripInfo.Sno = ProductInfo.Sno GROUP BY TripInfo.Branch_Id");
                                cmd.Parameters.AddWithValue("@branch", BranchID);
                                cmd.Parameters.AddWithValue("@d1", dtF.AddDays(-29));
                                cmd.Parameters.AddWithValue("@d2", lastmonth.AddDays(-29));
                                dtSub_lastMonthData = vdbmngr.SelectQuery(cmd).Tables[0];

                                //cmd = new MySqlCommand("SELECT    TripInfo.Sno, TripInfo.DCNo, ROUND(SUM(ProductInfo.Qty) ) AS DeliveryQty,ROUND(AVG(ProductInfo.Qty) ) AS AvgQty, TripInfo.I_Date, TripInfo.VehicleNo, TripInfo.Status, TripInfo.DispName, TripInfo.DispType, TripInfo.DispMode, TripInfo.BranchID As Branch_id, TripInfo.BranchName, TripInfo.Branch_Id As BranchID FROM (SELECT  tripdata.Sno, tripdata.DCNo, tripdata.I_Date, tripdata.VehicleNo, tripdata.Status, dispatch.DispName, dispatch.DispType, dispatch.DispMode, dispatch.BranchID, branchdata_1.BranchName, dispatch.Branch_Id FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE  (dispatch.CompanyId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT Qty, Sno FROM (SELECT tripdata_1.Sno, tripsubdata.Qty FROM  tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno WHERE (tripdata_1.AssignDate BETWEEN @d1 AND @d2)) TripSubInfo) ProductInfo ON TripInfo.Sno = ProductInfo.Sno GROUP BY DATE(TripInfo.I_Date),TripInfo.Branch_Id");
                                //cmd.Parameters.AddWithValue("@branch", BranchId);
                                //cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-180));
                                //cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-180));
                                //Dt_LastSixthMonth = vdbmngr.SelectQuery(cmd).Tables[0];

                                cmd = new MySqlCommand("SELECT    TripInfo.Sno, TripInfo.DCNo, ROUND(SUM(ProductInfo.Qty) ) AS DeliveryQty,ROUND(AVG(ProductInfo.Qty) ) AS AvgQty,  TripInfo.VehicleNo, TripInfo.Status, TripInfo.DispName, TripInfo.DispType, TripInfo.DispMode, TripInfo.BranchID As Branch_id, TripInfo.BranchName, TripInfo.Branch_Id As BranchID FROM (SELECT  tripdata.Sno, tripdata.DCNo, tripdata.I_Date, tripdata.VehicleNo, tripdata.Status, dispatch.DispName, dispatch.DispType, dispatch.DispMode, dispatch.BranchID, branchdata_1.BranchName, dispatch.Branch_Id FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE  (dispatch.CompanyId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT Qty, Sno FROM (SELECT tripdata_1.Sno, tripsubdata.Qty FROM  tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno WHERE (tripdata_1.AssignDate BETWEEN @d1 AND @d2)) TripSubInfo) ProductInfo ON TripInfo.Sno = ProductInfo.Sno GROUP BY TripInfo.Branch_Id");
                                cmd.Parameters.AddWithValue("@branch", BranchID);
                                cmd.Parameters.AddWithValue("@d1", dtF.AddDays(-365));
                                cmd.Parameters.AddWithValue("@d2", lastmonth.AddDays(-365));
                                dtSub_lastYearData = vdbmngr.SelectQuery(cmd).Tables[0];
                                // type = "CompanyWise";
                            }
                            else if (SalesType == "Plant")
                            {
                                if (BranchID == "172")
                                {
                                    cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch NOT IN (538 , 1801, 3625)) GROUP BY branchdata.sno");
                                    cmd.Parameters.AddWithValue("@d1", dtF);
                                    cmd.Parameters.AddWithValue("@d2", lastmonth);
                                    cmd.Parameters.AddWithValue("@BranchID", BranchID);
                                    Dt_PresentMonth = vdbmngr.SelectQuery(cmd).Tables[0];
                                }
                                else if (BranchID == "3625")
                                {
                                    cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch IN (4609, 3625)) GROUP BY branchdata.sno");
                                    cmd.Parameters.AddWithValue("@d1", dtF);
                                    cmd.Parameters.AddWithValue("@d2", lastmonth);
                                    cmd.Parameters.AddWithValue("@BranchID", BranchID);
                                    Dt_PresentMonth = vdbmngr.SelectQuery(cmd).Tables[0];
                                }
                                else if (BranchID == "1801")
                                {
                                    cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID)  GROUP BY branchdata.sno");
                                    cmd.Parameters.AddWithValue("@d1", dtF);
                                    cmd.Parameters.AddWithValue("@d2", lastmonth);
                                    cmd.Parameters.AddWithValue("@BranchID", BranchID);
                                    Dt_PresentMonth = vdbmngr.SelectQuery(cmd).Tables[0];
                                }
                                else
                                {
                                    cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID)  GROUP BY branchdata.sno");
                                    cmd.Parameters.AddWithValue("@d1", dtF);
                                    cmd.Parameters.AddWithValue("@d2", lastmonth);
                                    cmd.Parameters.AddWithValue("@BranchID", BranchID);
                                    Dt_PresentMonth = vdbmngr.SelectQuery(cmd).Tables[0];
                                }
                                if (BranchID == "172")
                                {
                                    cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch NOT IN (538, 1801, 3625)) GROUP BY branchdata.sno");
                                    cmd.Parameters.AddWithValue("@d1", dtF.AddDays(-29));
                                    cmd.Parameters.AddWithValue("@d2", lastmonth.AddDays(-29));
                                    cmd.Parameters.AddWithValue("@BranchID", BranchID);
                                    dtSub_lastMonthData = vdbmngr.SelectQuery(cmd).Tables[0];
                                }
                                else if (BranchID == "3625")
                                {
                                    cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch IN (4609, 3625)) GROUP BY branchdata.sno");
                                    cmd.Parameters.AddWithValue("@d1", dtF.AddDays(-29));
                                    cmd.Parameters.AddWithValue("@d2", lastmonth.AddDays(-29));
                                    cmd.Parameters.AddWithValue("@BranchID", BranchID);
                                    dtSub_lastMonthData = vdbmngr.SelectQuery(cmd).Tables[0];
                                }
                                else if (BranchID == "1801")
                                {
                                    cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID)  GROUP BY branchdata.sno");
                                    cmd.Parameters.AddWithValue("@d1", dtF.AddDays(-29));
                                    cmd.Parameters.AddWithValue("@d2", lastmonth.AddDays(-29));
                                    cmd.Parameters.AddWithValue("@BranchID", BranchID);
                                    dtSub_lastMonthData = vdbmngr.SelectQuery(cmd).Tables[0];
                                }
                                else
                                {
                                    cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID)  GROUP BY branchdata.sno");
                                    cmd.Parameters.AddWithValue("@d1", dtF.AddDays(-29));
                                    cmd.Parameters.AddWithValue("@d2", lastmonth.AddDays(-29));
                                    cmd.Parameters.AddWithValue("@BranchID", BranchID);
                                    dtSub_lastMonthData = vdbmngr.SelectQuery(cmd).Tables[0];
                                }
                                if (BranchID == "172")
                                {
                                    cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch NOT IN (538 , 1801, 3625)) GROUP BY branchdata.sno");
                                    cmd.Parameters.AddWithValue("@d1", dtF.AddDays(-365));
                                    cmd.Parameters.AddWithValue("@d2", lastmonth.AddDays(-365));
                                    cmd.Parameters.AddWithValue("@BranchID", BranchID);
                                    dtSub_lastYearData = vdbmngr.SelectQuery(cmd).Tables[0];
                                }
                                else if (BranchID == "3625")
                                {
                                    cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch NOT IN (4609, 3625)) GROUP BY branchdata.sno");
                                    cmd.Parameters.AddWithValue("@d1", dtF.AddDays(-365));
                                    cmd.Parameters.AddWithValue("@d2", lastmonth.AddDays(-365));
                                    cmd.Parameters.AddWithValue("@BranchID", BranchID);
                                    dtSub_lastYearData = vdbmngr.SelectQuery(cmd).Tables[0];
                                }
                                else if (BranchID == "1801")
                                {
                                    cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID)  GROUP BY branchdata.sno");
                                    cmd.Parameters.AddWithValue("@d1", dtF.AddDays(-365));
                                    cmd.Parameters.AddWithValue("@d2", lastmonth.AddDays(-365));
                                    cmd.Parameters.AddWithValue("@BranchID", BranchID);
                                    dtSub_lastYearData = vdbmngr.SelectQuery(cmd).Tables[0];
                                }
                                else
                                {
                                    cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID)  GROUP BY branchdata.sno");
                                    cmd.Parameters.AddWithValue("@d1", dtF.AddDays(-365));
                                    cmd.Parameters.AddWithValue("@d2", lastmonth.AddDays(-365));
                                    cmd.Parameters.AddWithValue("@BranchID", BranchID);
                                    dtSub_lastYearData = vdbmngr.SelectQuery(cmd).Tables[0];
                                }
                            }
                            else
                            {
                                cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SubBranch = @BranchID) GROUP BY branchdata.sno");
                                cmd.Parameters.AddWithValue("@d1", dtF);
                                cmd.Parameters.AddWithValue("@d2", lastmonth);
                                cmd.Parameters.AddWithValue("@BranchID", BranchID);
                                Dt_PresentMonth = vdbmngr.SelectQuery(cmd).Tables[0];

                                cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SubBranch = @BranchID) GROUP BY branchdata.sno");
                                cmd.Parameters.AddWithValue("@d1", dtF.AddDays(-29));
                                cmd.Parameters.AddWithValue("@d2", lastmonth.AddDays(-29));
                                cmd.Parameters.AddWithValue("@BranchID", BranchID);
                                dtSub_lastMonthData = vdbmngr.SelectQuery(cmd).Tables[0];


                                cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SubBranch = @BranchID) GROUP BY branchdata.sno");
                                cmd.Parameters.AddWithValue("@d1", dtF.AddDays(-365));
                                cmd.Parameters.AddWithValue("@d2", lastmonth.AddDays(-365));
                                cmd.Parameters.AddWithValue("@BranchID", BranchID);
                                dtSub_lastYearData = vdbmngr.SelectQuery(cmd).Tables[0];
                            }

                            FromDate = FromDate.AddDays(7);
                            DataTable dttemp = new DataTable();
                            DataTable dttemp1 = new DataTable();
                            dttemp.Columns.Add("BranchName");
                            dttemp.Columns.Add("BranchID");
                            dttemp.Columns.Add("DeliveryQty");
                            dttemp.Columns.Add("Date");
                            dttemp.Columns.Add("DateType");
                            foreach (DataRow drSubData in Dt_PresentMonth.Rows)
                            {
                                DataRow newrow = dttemp.NewRow();
                                newrow["BranchName"] = drSubData["BranchName"].ToString();
                                newrow["BranchID"] = drSubData["BranchID"].ToString();
                                newrow["DeliveryQty"] = drSubData["DeliveryQty"].ToString();
                                newrow["DateType"] = "PresentMonth";
                                newrow["Date"] = "Weak" + weaknumber;
                                dttemp.Rows.Add(newrow);
                            }
                            dtPresentAllWeeks.Merge(dttemp);
                            dtALL.Merge(dttemp);
                            dttemp = new DataTable();
                            dttemp.Columns.Add("BranchName");
                            dttemp.Columns.Add("BranchID");
                            dttemp.Columns.Add("DeliveryQty");
                            dttemp.Columns.Add("Date");
                            dttemp.Columns.Add("DateType");
                            foreach (DataRow drSubData in dtSub_lastMonthData.Rows)
                            {
                                DataRow newrow = dttemp.NewRow();
                                newrow["BranchName"] = drSubData["BranchName"].ToString();
                                newrow["BranchID"] = drSubData["BranchID"].ToString();
                                newrow["DeliveryQty"] = drSubData["DeliveryQty"].ToString();
                                newrow["DateType"] = "LastMonth";
                                newrow["Date"] = "Weak" + weaknumber;
                                dttemp.Rows.Add(newrow);
                            }
                            dtLastAllWeeks.Merge(dttemp);
                            dtALL.Merge(dttemp);
                            dttemp = new DataTable();
                            dttemp.Columns.Add("BranchName");
                            dttemp.Columns.Add("BranchID");
                            dttemp.Columns.Add("DeliveryQty");
                            dttemp.Columns.Add("Date");
                            dttemp.Columns.Add("DateType");
                            foreach (DataRow drSubData in dtSub_lastYearData.Rows)
                            {
                                DataRow newrow = dttemp.NewRow();
                                newrow["BranchName"] = drSubData["BranchName"].ToString();
                                newrow["BranchID"] = drSubData["BranchID"].ToString();
                                newrow["DeliveryQty"] = drSubData["DeliveryQty"].ToString();
                                newrow["DateType"] = "LastYear";
                                newrow["Date"] = "Weak" + weaknumber;
                                dttemp.Rows.Add(newrow);
                            }
                            dtLastYearAllWeeks.Merge(dttemp);
                            dtALL.Merge(dttemp);
                            // dttemp = new DataTable();
                        }

                        //Write Code  Here

                        DataTable disticntbarnchname = new DataTable();
                        DataTable disticntbarnchname1 = new DataTable();
                        if (BranchID == "8009" || BranchID == "8012" || BranchID == "8013")
                        {
                            DataView view = new DataView(dtALL);
                            disticntbarnchname = view.ToTable(true, "BranchName", "BranchID");
                            DataView view3 = new DataView(dtALL);
                            disticntbarnchname1 = view3.ToTable(true, "Date");
                        }
                        else
                        {
                            DataView view = new DataView(dtALL);
                            disticntbarnchname = view.ToTable(true, "BranchName", "sno");
                            DataView view3 = new DataView(dtALL);
                            disticntbarnchname1 = view3.ToTable(true, "Date");
                        }
                        //DataTable Report1 = new DataTable();
                        //Report1.Columns.Add("Date");
                        //foreach (DataRow branch in disticntbarnchname1.Rows)
                        //{
                        //    DataRow newrow = Report1.NewRow();
                        //    DateTime dtDoe = Convert.ToDateTime(branch["Date"].ToString());
                        //    string strdate = dtDoe.ToString("dd");
                        //    newrow["Date"] = strdate;
                        //    Report1.Rows.Add(newrow); ;
                        //}
                        //DataView view4 = new DataView(Report1);
                        //DataTable disticntbarnchname4 = view4.ToTable(true, "Date");
                        DataTable Report = new DataTable();
                        Report.Columns.Add("BranchId");
                        Report.Columns.Add("DataType");
                        Report.Columns.Add("BranchName");
                        foreach (DataRow branch in disticntbarnchname1.Rows)
                        {
                            Report.Columns.Add(branch["Date"].ToString());
                        }
                        //DataRow newrow = Report.NewRow();
                        if (BranchID == "8009" || BranchID == "8012" || BranchID == "8013")
                        {
                            int j = 1;
                            foreach (DataRow branch in disticntbarnchname.Rows)
                            {
                                DataRow newrow1 = Report.NewRow();
                                if (j == 1)
                                {
                                    newrow1["DataType"] = "This Month";
                                }
                                newrow1["BranchName"] = branch["BranchName"].ToString();
                                newrow1["BranchId"] = branch["BranchID"].ToString();
                                float DispQty = 0;
                                foreach (DataRow drSubData in dtPresentAllWeeks.Rows)
                                {
                                    if (branch["BranchID"].ToString() == drSubData["BranchID"].ToString())
                                    {
                                        float.TryParse(drSubData["DeliveryQty"].ToString(), out DispQty);
                                        if (DispQty > 0)
                                        {

                                            double avgqty = DispQty / 2;
                                            avgqty = Math.Round(avgqty);
                                            newrow1[drSubData["Date"].ToString()] = avgqty;
                                            // yesterdaygrandtotal += DispQty;

                                        }
                                    }
                                }
                                Report.Rows.Add(newrow1);

                                j++;
                            }
                            int j1 = 1;
                            foreach (DataRow branch in disticntbarnchname.Rows)
                            {
                                DataRow newrow1 = Report.NewRow();
                                if (j1 == 1)
                                {
                                    newrow1["DataType"] = "Last Month";
                                }
                                newrow1["BranchName"] = branch["BranchName"].ToString();
                                newrow1["BranchId"] = branch["BranchID"].ToString();
                                float DispQty = 0;
                                foreach (DataRow drSubData in dtLastAllWeeks.Rows)
                                {
                                    if (branch["BranchID"].ToString() == drSubData["BranchID"].ToString())
                                    {
                                        float.TryParse(drSubData["DeliveryQty"].ToString(), out DispQty);
                                        if (DispQty > 0)
                                        {
                                            double avgqty = DispQty / 2;
                                            avgqty = Math.Round(avgqty);
                                            newrow1[drSubData["Date"].ToString()] = avgqty;

                                            // lastmonthgrandtotal += DispQty;

                                        }
                                    }
                                }
                                Report.Rows.Add(newrow1);
                                j1++;
                            }
                            int j2 = 1;
                            foreach (DataRow branch in disticntbarnchname.Rows)
                            {
                                DataRow newrow1 = Report.NewRow();
                                if (j2 == 1)
                                {
                                    newrow1["DataType"] = "Last Year";
                                }
                                newrow1["BranchName"] = branch["BranchName"].ToString();
                                newrow1["BranchId"] = branch["BranchID"].ToString();
                                float DispQty = 0;
                                foreach (DataRow drSubData in dtLastYearAllWeeks.Rows)
                                {
                                    if (branch["BranchID"].ToString() == drSubData["BranchID"].ToString())
                                    {
                                        float.TryParse(drSubData["DeliveryQty"].ToString(), out DispQty);
                                        if (DispQty > 0)
                                        {
                                            double avgqty = DispQty / 2;
                                            avgqty = Math.Round(avgqty);
                                            newrow1[drSubData["Date"].ToString()] = avgqty;
                                            //lastyeargrandtotal += DispQty;
                                        }
                                    }
                                }
                                if (DispQty > 0)
                                {
                                    Report.Rows.Add(newrow1);
                                    j2++;
                                }
                            }
                        }
                        else
                        {
                            int j = 1;
                            foreach (DataRow branch in disticntbarnchname.Rows)
                            {
                                DataRow newrow1 = Report.NewRow();
                                if (j == 1)
                                {
                                    newrow1["DataType"] = "This Month";
                                }
                                newrow1["BranchName"] = branch["BranchName"].ToString();
                                newrow1["BranchId"] = branch["sno"].ToString();
                                float DispQty = 0;
                                foreach (DataRow drSubData in dtPresentAllWeeks.Rows)
                                {
                                    if (branch["sno"].ToString() == drSubData["sno"].ToString())
                                    {
                                        float.TryParse(drSubData["DeliveryQty"].ToString(), out DispQty);
                                        if (DispQty > 0)
                                        {

                                            double avgqty = DispQty / 2;
                                            avgqty = Math.Round(avgqty);
                                            newrow1[drSubData["Date"].ToString()] = avgqty;
                                            // yesterdaygrandtotal += DispQty;

                                        }
                                    }
                                }
                                Report.Rows.Add(newrow1);
                                j++;
                            }
                            int j1 = 1;
                            foreach (DataRow branch in disticntbarnchname.Rows)
                            {
                                DataRow newrow1 = Report.NewRow();
                                if (j1 == 1)
                                {
                                    newrow1["DataType"] = "Last Month";
                                }
                                newrow1["BranchName"] = branch["BranchName"].ToString();
                                newrow1["BranchId"] = branch["sno"].ToString();
                                float DispQty = 0;
                                foreach (DataRow drSubData in dtLastAllWeeks.Rows)
                                {
                                    if (branch["sno"].ToString() == drSubData["sno"].ToString())
                                    {
                                        float.TryParse(drSubData["DeliveryQty"].ToString(), out DispQty);
                                        if (DispQty > 0)
                                        {
                                            double avgqty = DispQty / 2;
                                            avgqty = Math.Round(avgqty);
                                            newrow1[drSubData["Date"].ToString()] = avgqty;

                                            // lastmonthgrandtotal += DispQty;

                                        }
                                    }
                                }
                                Report.Rows.Add(newrow1);
                                j1++;
                            }
                            int j2 = 1;
                            foreach (DataRow branch in disticntbarnchname.Rows)
                            {
                                DataRow newrow1 = Report.NewRow();
                                if (j2 == 1)
                                {
                                    newrow1["DataType"] = "Last Year";
                                }
                                newrow1["BranchName"] = branch["BranchName"].ToString();
                                newrow1["BranchId"] = branch["sno"].ToString();
                                float DispQty = 0;
                                foreach (DataRow drSubData in dtLastYearAllWeeks.Rows)
                                {
                                    if (branch["sno"].ToString() == drSubData["sno"].ToString())
                                    {
                                        float.TryParse(drSubData["DeliveryQty"].ToString(), out DispQty);
                                        if (DispQty > 0)
                                        {
                                            double avgqty = DispQty / 2;
                                            avgqty = Math.Round(avgqty);
                                            newrow1[drSubData["Date"].ToString()] = avgqty;
                                            //lastyeargrandtotal += DispQty;
                                        }
                                    }
                                }
                                if (DispQty > 0)
                                {
                                    Report.Rows.Add(newrow1);
                                    j2++;
                                }
                            }
                        }
                        grddata.DataSource = Report;
                        grddata.DataBind();
                    }
                }
                #endregion
                #region
                else if (SectedDataType == "Month")
                {
                    DateTime firstmonth = new DateTime();
                    DateTime lastmonth = new DateTime();
                    ToDate = ToDate.AddMonths(1);
                    TimeSpan dateSpan = ToDate.Subtract(FromDate);
                    int years = (dateSpan.Days / 365);
                    int months = ((dateSpan.Days % 365) / 31) + (years * 12);
                    int N = 0;
                    int i = 1;

                    if (months != 0)
                    {
                        int monthnumber = 0;
                        for (int j = 0; j < months; j++)
                        {
                            firstmonth = GetLowMonthRetrive(FromDate.AddMonths(j));
                            lastmonth = GetHighMonth(firstmonth);
                            DateTime dtF = firstmonth.AddDays(-1);
                            TimeSpan dateSpan2 = lastmonth.Subtract(dtF);
                            int NoOfdays = dateSpan2.Days;
                            monthnumber++;
                            if (BranchID == "8009")
                            {
                                cmd = new MySqlCommand("SELECT    TripInfo.Sno, TripInfo.DCNo, ROUND(SUM(ProductInfo.Qty) ) AS DeliveryQty,ROUND(AVG(ProductInfo.Qty) ) AS AvgQty, TripInfo.VehicleNo, TripInfo.Status, TripInfo.DispName, TripInfo.DispType, TripInfo.DispMode, TripInfo.BranchID As Branch_id, TripInfo.BranchName, TripInfo.Branch_Id As BranchID FROM (SELECT  tripdata.Sno, tripdata.DCNo, tripdata.I_Date, tripdata.VehicleNo, tripdata.Status, dispatch.DispName, dispatch.DispType, dispatch.DispMode, dispatch.BranchID, branchdata_1.BranchName, dispatch.Branch_Id FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE  (dispatch.GroupId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT Qty, Sno FROM (SELECT tripdata_1.Sno, tripsubdata.Qty FROM  tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno WHERE (tripdata_1.AssignDate BETWEEN @d1 AND @d2)) TripSubInfo) ProductInfo ON TripInfo.Sno = ProductInfo.Sno GROUP BY  TripInfo.Branch_Id");
                                cmd.Parameters.AddWithValue("@branch", BranchID);
                                cmd.Parameters.AddWithValue("@d1", dtF);
                                cmd.Parameters.AddWithValue("@d2", lastmonth);
                                Dt_PresentMonth = vdbmngr.SelectQuery(cmd).Tables[0];



                                cmd = new MySqlCommand("SELECT    TripInfo.Sno, TripInfo.DCNo, ROUND(SUM(ProductInfo.Qty) ) AS DeliveryQty,ROUND(AVG(ProductInfo.Qty) ) AS AvgQty, TripInfo.VehicleNo, TripInfo.Status, TripInfo.DispName, TripInfo.DispType, TripInfo.DispMode, TripInfo.BranchID As Branch_id, TripInfo.BranchName, TripInfo.Branch_Id As BranchID FROM (SELECT  tripdata.Sno, tripdata.DCNo, tripdata.I_Date, tripdata.VehicleNo, tripdata.Status, dispatch.DispName, dispatch.DispType, dispatch.DispMode, dispatch.BranchID, branchdata_1.BranchName, dispatch.Branch_Id FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE  (dispatch.GroupId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT Qty, Sno FROM (SELECT tripdata_1.Sno, tripsubdata.Qty FROM  tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno WHERE (tripdata_1.AssignDate BETWEEN @d1 AND @d2)) TripSubInfo) ProductInfo ON TripInfo.Sno = ProductInfo.Sno GROUP BY TripInfo.Branch_Id");
                                cmd.Parameters.AddWithValue("@branch", BranchID);
                                cmd.Parameters.AddWithValue("@d1", dtF.AddDays(-365));
                                cmd.Parameters.AddWithValue("@d2", lastmonth.AddDays(-365));
                                dtSub_lastYearData = vdbmngr.SelectQuery(cmd).Tables[0];
                                // type = "GroupWise";
                            }
                            else if (BranchID == "8012" || BranchID == "8013")
                            {
                                cmd = new MySqlCommand("SELECT    TripInfo.Sno, TripInfo.DCNo, ROUND(SUM(ProductInfo.Qty) ) AS DeliveryQty,ROUND(AVG(ProductInfo.Qty) ) AS AvgQty, TripInfo.VehicleNo, TripInfo.Status, TripInfo.DispName, TripInfo.DispType, TripInfo.DispMode, TripInfo.BranchID As Branch_id, TripInfo.BranchName, TripInfo.Branch_Id As BranchID FROM (SELECT  tripdata.Sno, tripdata.DCNo, tripdata.I_Date, tripdata.VehicleNo, tripdata.Status, dispatch.DispName, dispatch.DispType, dispatch.DispMode, dispatch.BranchID, branchdata_1.BranchName, dispatch.Branch_Id FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE  (dispatch.CompanyId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT Qty, Sno FROM (SELECT tripdata_1.Sno, tripsubdata.Qty FROM  tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno WHERE (tripdata_1.AssignDate BETWEEN @d1 AND @d2)) TripSubInfo) ProductInfo ON TripInfo.Sno = ProductInfo.Sno GROUP BY TripInfo.Branch_Id");
                                cmd.Parameters.AddWithValue("@branch", BranchID);
                                cmd.Parameters.AddWithValue("@d1", dtF);
                                cmd.Parameters.AddWithValue("@d2", lastmonth);
                                Dt_PresentMonth = vdbmngr.SelectQuery(cmd).Tables[0];




                                cmd = new MySqlCommand("SELECT    TripInfo.Sno, TripInfo.DCNo, ROUND(SUM(ProductInfo.Qty) ) AS DeliveryQty,ROUND(AVG(ProductInfo.Qty) ) AS AvgQty,  TripInfo.VehicleNo, TripInfo.Status, TripInfo.DispName, TripInfo.DispType, TripInfo.DispMode, TripInfo.BranchID As Branch_id, TripInfo.BranchName, TripInfo.Branch_Id As BranchID FROM (SELECT  tripdata.Sno, tripdata.DCNo, tripdata.I_Date, tripdata.VehicleNo, tripdata.Status, dispatch.DispName, dispatch.DispType, dispatch.DispMode, dispatch.BranchID, branchdata_1.BranchName, dispatch.Branch_Id FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE  (dispatch.CompanyId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT Qty, Sno FROM (SELECT tripdata_1.Sno, tripsubdata.Qty FROM  tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno WHERE (tripdata_1.AssignDate BETWEEN @d1 AND @d2)) TripSubInfo) ProductInfo ON TripInfo.Sno = ProductInfo.Sno GROUP BY TripInfo.Branch_Id");
                                cmd.Parameters.AddWithValue("@branch", BranchID);
                                cmd.Parameters.AddWithValue("@d1", dtF.AddDays(-365));
                                cmd.Parameters.AddWithValue("@d2", lastmonth.AddDays(-365));
                                dtSub_lastYearData = vdbmngr.SelectQuery(cmd).Tables[0];
                                // type = "CompanyWise";
                            }
                            else if (SalesType == "Plant")
                            {
                                if (BranchID == "172")
                                {
                                    cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch NOT IN (538 , 1801, 3625)) GROUP BY branchdata.sno");
                                    cmd.Parameters.AddWithValue("@d1", dtF);
                                    cmd.Parameters.AddWithValue("@d2", lastmonth);
                                    cmd.Parameters.AddWithValue("@BranchID", BranchID);
                                    Dt_PresentMonth = vdbmngr.SelectQuery(cmd).Tables[0];
                                }
                                else if (BranchID == "3625")
                                {
                                    cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch IN (4609, 3625)) GROUP BY branchdata.sno");
                                    cmd.Parameters.AddWithValue("@d1", dtF);
                                    cmd.Parameters.AddWithValue("@d2", lastmonth);
                                    cmd.Parameters.AddWithValue("@BranchID", BranchID);
                                    Dt_PresentMonth = vdbmngr.SelectQuery(cmd).Tables[0];
                                }
                                else if (BranchID == "1801")
                                {
                                    cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID)  GROUP BY branchdata.sno");
                                    cmd.Parameters.AddWithValue("@d1", dtF);
                                    cmd.Parameters.AddWithValue("@d2", lastmonth);
                                    cmd.Parameters.AddWithValue("@BranchID", BranchID);
                                    Dt_PresentMonth = vdbmngr.SelectQuery(cmd).Tables[0];
                                }
                                else
                                {
                                    cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID)  GROUP BY branchdata.sno");
                                    cmd.Parameters.AddWithValue("@d1", dtF);
                                    cmd.Parameters.AddWithValue("@d2", lastmonth);
                                    cmd.Parameters.AddWithValue("@BranchID", BranchID);
                                    Dt_PresentMonth = vdbmngr.SelectQuery(cmd).Tables[0];
                                }
                                if (BranchID == "172")
                                {
                                    cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch NOT IN (538 , 1801, 3625)) GROUP BY branchdata.sno");
                                    cmd.Parameters.AddWithValue("@d1", dtF.AddDays(-365));
                                    cmd.Parameters.AddWithValue("@d2", lastmonth.AddDays(-365));
                                    cmd.Parameters.AddWithValue("@BranchID", BranchID);
                                    dtSub_lastYearData = vdbmngr.SelectQuery(cmd).Tables[0];
                                }
                                else if (BranchID == "3625")
                                {
                                    cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch NOT IN (4609, 3625)) GROUP BY branchdata.sno");
                                    cmd.Parameters.AddWithValue("@d1", dtF.AddDays(-365));
                                    cmd.Parameters.AddWithValue("@d2", lastmonth.AddDays(-365));
                                    cmd.Parameters.AddWithValue("@BranchID", BranchID);
                                    dtSub_lastYearData = vdbmngr.SelectQuery(cmd).Tables[0];
                                }
                                else if (BranchID == "1801")
                                {
                                    cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID)  GROUP BY branchdata.sno");
                                    cmd.Parameters.AddWithValue("@d1", dtF.AddDays(-365));
                                    cmd.Parameters.AddWithValue("@d2", lastmonth.AddDays(-365));
                                    cmd.Parameters.AddWithValue("@BranchID", BranchID);
                                    dtSub_lastYearData = vdbmngr.SelectQuery(cmd).Tables[0];
                                }
                                else
                                {
                                    cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID)  GROUP BY branchdata.sno");
                                    cmd.Parameters.AddWithValue("@d1", dtF.AddDays(-365));
                                    cmd.Parameters.AddWithValue("@d2", lastmonth.AddDays(-365));
                                    cmd.Parameters.AddWithValue("@BranchID", BranchID);
                                    dtSub_lastYearData = vdbmngr.SelectQuery(cmd).Tables[0];
                                }
                            }
                            else
                            {
                                cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SubBranch = @BranchID) GROUP BY branchdata.sno");
                                cmd.Parameters.AddWithValue("@d1", dtF);
                                cmd.Parameters.AddWithValue("@d2", lastmonth);
                                cmd.Parameters.AddWithValue("@BranchID", BranchID);
                                Dt_PresentMonth = vdbmngr.SelectQuery(cmd).Tables[0];




                                cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SubBranch = @BranchID) GROUP BY branchdata.sno");
                                cmd.Parameters.AddWithValue("@d1", dtF.AddDays(-365));
                                cmd.Parameters.AddWithValue("@d2", lastmonth.AddDays(-365));
                                cmd.Parameters.AddWithValue("@BranchID", BranchID);
                                dtSub_lastYearData = vdbmngr.SelectQuery(cmd).Tables[0];
                            }

                            DataTable dttemp = new DataTable();
                            DataTable dttemp1 = new DataTable();
                            dttemp.Columns.Add("BranchName");
                            dttemp.Columns.Add("BranchID");
                            dttemp.Columns.Add("DeliveryQty");
                            dttemp.Columns.Add("Date");
                            dttemp.Columns.Add("DateType");
                            foreach (DataRow drSubData in Dt_PresentMonth.Rows)
                            {
                                DataRow newrow = dttemp.NewRow();
                                newrow["BranchName"] = drSubData["BranchName"].ToString();
                                newrow["BranchID"] = drSubData["BranchID"].ToString();
                                newrow["DeliveryQty"] = drSubData["DeliveryQty"].ToString();
                                newrow["DateType"] = "PresentYear";
                                newrow["Date"] = firstmonth.ToString("MMM");
                                dttemp.Rows.Add(newrow);
                            }
                            dtPresentAllMonth.Merge(dttemp);
                            dtALL.Merge(dttemp);

                            dttemp = new DataTable();
                            dttemp.Columns.Add("BranchName");
                            dttemp.Columns.Add("BranchID");
                            dttemp.Columns.Add("DeliveryQty");
                            dttemp.Columns.Add("Date");
                            dttemp.Columns.Add("DateType");
                            foreach (DataRow drSubData in dtSub_lastYearData.Rows)
                            {
                                DataRow newrow = dttemp.NewRow();
                                newrow["BranchName"] = drSubData["BranchName"].ToString();
                                newrow["BranchID"] = drSubData["BranchID"].ToString();
                                newrow["DeliveryQty"] = drSubData["DeliveryQty"].ToString();
                                newrow["DateType"] = "LastYear";
                                newrow["Date"] = firstmonth.ToString("MMM");
                                dttemp.Rows.Add(newrow);
                            }
                            dtLastYearAllMonth.Merge(dttemp);
                            dtALL.Merge(dttemp);
                            // dttemp = new DataTable();
                        }
                    }
                    //Write Code  Here
                    DataTable disticnt_barnchname = new DataTable();
                    DataTable disticnt_barnchname1 = new DataTable();
                    if (BranchID == "8009" || BranchID == "8012" || BranchID == "8013")
                    {
                        DataView view = new DataView(dtALL);
                        disticnt_barnchname = view.ToTable(true, "BranchName", "BranchID");
                        DataView view3 = new DataView(dtALL);
                        disticnt_barnchname1 = view3.ToTable(true, "Date");
                    }
                    else
                    {
                        DataView view = new DataView(dtALL);
                        disticnt_barnchname = view.ToTable(true, "BranchName", "sno");
                        DataView view3 = new DataView(dtALL);
                        disticnt_barnchname1 = view3.ToTable(true, "Date");
                    }

                    DataTable Data_Report = new DataTable();
                    Data_Report.Columns.Add("BranchId");
                    Data_Report.Columns.Add("DataType");
                    Data_Report.Columns.Add("BranchName");
                    foreach (DataRow branch in disticnt_barnchname1.Rows)
                    {
                        Data_Report.Columns.Add(branch["Date"].ToString());
                    }
                    //DataRow newrow = Report.NewRow();
                    if (BranchID == "8009" || BranchID == "8012" || BranchID == "8013")
                    {
                        int j = 1;
                        foreach (DataRow branch in disticnt_barnchname.Rows)
                        {
                            DataRow newrow1 = Data_Report.NewRow();
                            if (j == 1)
                            {
                                newrow1["DataType"] = "This Month";
                            }
                            newrow1["BranchName"] = branch["BranchName"].ToString();
                            newrow1["BranchId"] = branch["BranchID"].ToString();
                            float DispQty = 0;
                            foreach (DataRow drSubData in dtPresentAllMonth.Rows)
                            {
                                if (branch["BranchID"].ToString() == drSubData["BranchID"].ToString())
                                {
                                    float.TryParse(drSubData["DeliveryQty"].ToString(), out DispQty);
                                    if (DispQty > 0)
                                    {

                                        double avgqty = DispQty / 2;
                                        avgqty = Math.Round(avgqty);
                                        newrow1[drSubData["Date"].ToString()] = avgqty;
                                        // yesterdaygrandtotal += DispQty;

                                    }
                                }
                            }
                            Data_Report.Rows.Add(newrow1);

                            j++;
                        }

                        int j2 = 1;
                        foreach (DataRow branch in disticnt_barnchname.Rows)
                        {
                            DataRow newrow1 = Data_Report.NewRow();
                            if (j2 == 1)
                            {
                                newrow1["DataType"] = "Last Year";
                            }
                            newrow1["BranchName"] = branch["BranchName"].ToString();
                            newrow1["BranchId"] = branch["BranchID"].ToString();
                            float DispQty = 0;
                            foreach (DataRow drSubData in dtLastYearAllMonth.Rows)
                            {
                                if (branch["BranchID"].ToString() == drSubData["BranchID"].ToString())
                                {
                                    float.TryParse(drSubData["DeliveryQty"].ToString(), out DispQty);
                                    if (DispQty > 0)
                                    {
                                        double avgqty = DispQty / 2;
                                        avgqty = Math.Round(avgqty);
                                        newrow1[drSubData["Date"].ToString()] = avgqty;
                                        //lastyeargrandtotal += DispQty;
                                    }
                                }
                            }
                            if (DispQty > 0)
                            {
                                Data_Report.Rows.Add(newrow1);
                                j2++;
                            }
                        }
                    }
                    else
                    {
                        int j = 1;
                        foreach (DataRow branch in disticnt_barnchname.Rows)
                        {
                            DataRow newrow1 = Data_Report.NewRow();
                            if (j == 1)
                            {
                                newrow1["DataType"] = "This Month";
                            }
                            newrow1["BranchName"] = branch["BranchName"].ToString();
                            newrow1["BranchId"] = branch["sno"].ToString();
                            float DispQty = 0;
                            foreach (DataRow drSubData in dtPresentAllMonth.Rows)
                            {
                                if (branch["sno"].ToString() == drSubData["sno"].ToString())
                                {
                                    float.TryParse(drSubData["DeliveryQty"].ToString(), out DispQty);
                                    if (DispQty > 0)
                                    {

                                        double avgqty = DispQty / 2;
                                        avgqty = Math.Round(avgqty);
                                        newrow1[drSubData["Date"].ToString()] = avgqty;
                                        // yesterdaygrandtotal += DispQty;

                                    }
                                }
                            }
                            Data_Report.Rows.Add(newrow1);

                            j++;
                        }
                        int j2 = 1;
                        foreach (DataRow branch in disticnt_barnchname.Rows)
                        {
                            DataRow newrow1 = Data_Report.NewRow();
                            if (j2 == 1)
                            {
                                newrow1["DataType"] = "Last Year";
                            }
                            newrow1["BranchName"] = branch["BranchName"].ToString();
                            newrow1["BranchId"] = branch["sno"].ToString();
                            float DispQty = 0;
                            foreach (DataRow drSubData in dtLastYearAllMonth.Rows)
                            {
                                if (branch["sno"].ToString() == drSubData["sno"].ToString())
                                {
                                    float.TryParse(drSubData["DeliveryQty"].ToString(), out DispQty);
                                    if (DispQty > 0)
                                    {
                                        double avgqty = DispQty / 2;
                                        avgqty = Math.Round(avgqty);
                                        newrow1[drSubData["Date"].ToString()] = avgqty;
                                        //lastyeargrandtotal += DispQty;
                                    }
                                }
                            }
                            if (DispQty > 0)
                            {
                                Data_Report.Rows.Add(newrow1);
                                j2++;
                            }
                        }
                    }
                    grddata.DataSource = Data_Report;
                    grddata.DataBind();
                }
                #endregion
            }
        }
        catch (Exception ex)
        {

        }
    }
    protected void LinkButton4_Click(object sender, EventArgs e)
    {
        try
        {
            // Response.Redirect("DashBoardAgentLineChart.aspx");
            Session["LineChartType"] = "AgentWise";
            string strUrl = "DashBoardAgentLineChart.aspx";
            ScriptManager.RegisterStartupScript(Page, Page.GetType(), "popup", "window.open('" + strUrl + "','_blank')", true);
        }
        catch (Exception ex)
        {

        }
    }
    protected void LinkButton5_Click(object sender, EventArgs e)
    {
        try
        {
            Session["LDFD"] = Label47.Text;
            Session["LDTD"] = Label48.Text;
            // Response.Redirect("DashBoardAgentLineChart.aspx");
            Session["LineChartType"] = "SalesOffice";
            string strUrl = "DashBoardAgentLineChart.aspx";
            ScriptManager.RegisterStartupScript(Page, Page.GetType(), "popup", "window.open('" + strUrl + "','_blank')", true);
        }
        catch (Exception ex)
        {

        }
    }
    protected void LinkButton6_Click(object sender, EventArgs e)
    {
        try
        {
            // Response.Redirect("DashBoardAgentLineChart.aspx");
            Session["LineChartType"] = "BranchSalesType";
            string strUrl = "DashBoardAgentLineChart.aspx";
            ScriptManager.RegisterStartupScript(Page, Page.GetType(), "popup", "window.open('" + strUrl + "','_blank')", true);
        }
        catch (Exception ex)
        {

        }
    }
    protected void LinkButton7_Click(object sender, EventArgs e)
    {
        try
        {
            // Response.Redirect("DashBoardAgentLineChart.aspx");
            Session["LineChartType"] = "RouteWise";
            string strUrl = "DashBoardAgentLineChart.aspx";
            ScriptManager.RegisterStartupScript(Page, Page.GetType(), "popup", "window.open('" + strUrl + "','_blank')", true);
        }
        catch (Exception ex)
        {

        }
    }
    protected void LinkButton9_Click(object sender, EventArgs e)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            string BranchID = Session["Click_Route_id"].ToString();
            string SectedDataType = ddlDayType.SelectedItem.Value;
            string s = Session["IndDate"].ToString();
            var dt = DateTime.ParseExact(s, "ddd MMM dd yyyy HH:mm:ss 'GMT'zzz", System.Globalization.CultureInfo.InvariantCulture);
            string IndDate = dt.ToString("yyyy-MM-dd");
            DateTime ServerDateCurrentdate = Convert.ToDateTime(IndDate);
            DateTime FromDate = ServerDateCurrentdate;
            string edate = Session["Todate"].ToString();
            var edt = DateTime.ParseExact(edate, "ddd MMM dd yyyy HH:mm:ss 'GMT'zzz", System.Globalization.CultureInfo.InvariantCulture);
            string Tdate = edt.ToString("yyyy-MM-dd");
            DateTime To_Date = Convert.ToDateTime(Tdate);
            DateTime ToDate = To_Date;
            // div_MainPlantComparison.Style.Add("display", "block");
            divHide1.Style.Add("display", "block");

            divMainRouteUnderCategory.Style.Add("display", "block");

            string Datatype = "";

            int Ndays = (FromDate - ToDate).Days;
            int countdays = Ndays + 1;

            if (countdays <= 7)
            {
                Datatype = "Monthly";
            }
            else if (countdays <= 30 || countdays <= 8)
            {
                Datatype = "Week";
            }
            else if (countdays == 364 || countdays >= 364)
            {
                Datatype = "Year";
            }
            else
            {
                Datatype = "Monthly";
            }
            DateTime lastmonthfrom = new DateTime();
            DateTime lastmonthto = new DateTime();
            DateTime YearServerDate_Currentdate = Convert.ToDateTime(IndDate);
            DateTime LastYearFromDate = YearServerDate_Currentdate;
            DateTime YearServerDate_Todate = Convert.ToDateTime(Tdate);
            DateTime LastYearToDate = YearServerDate_Todate;
            lastmonthfrom = FromDate.AddMonths(-1);
            lastmonthto = ToDate.AddMonths(-1);
            LastYearFromDate = LastYearFromDate.AddYears(-1);
            LastYearToDate = LastYearToDate.AddYears(-1);
            DataTable Dt_PresentWeak = new DataTable();
            DataTable dtSub_LastWeekData = new DataTable();

            DataTable dtPresentAllMonth = new DataTable();
            DataTable dtLastYearAllMonth = new DataTable();
            DataTable Dt_PresentMonthSale = new DataTable();
            DataTable Dt_PresentMonthAmount = new DataTable();
            DataTable dtSub_lastMonthSale = new DataTable();
            DataTable dtSub_lastMonthAmount = new DataTable();
            DataTable dtSub_lastYearSales = new DataTable();
            DataTable dtSub_lastYearAmount = new DataTable();
            string SalesType = Session["salestype"].ToString();
            DataTable dtALL = new DataTable();
            DataTable dtyesterdayroutesale = new DataTable();

            cmd = new MySqlCommand("SELECT  products_subcategory.sno AS SubCatsno, modifiedroutes.RouteName,modifiedroutes.Sno As RouteId, products_subcategory.SubCatName AS SubCategory, products_category.Categoryname As Category,ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty, ROUND(SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost), 2) AS salevalue, products_category.sno AS CatSno FROM modifiedroutes INNER JOIN modifiedroutesubtable ON modifiedroutes.Sno = modifiedroutesubtable.RefNo INNER JOIN branchdata ON modifiedroutesubtable.BranchID = branchdata.sno INNER JOIN (SELECT IndentNo, Branch_id, I_date FROM  indents WHERE  (I_date BETWEEN @d1 AND @d2)) indent ON branchdata.sno = indent.Branch_id INNER JOIN indents_subtable ON indent.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno INNER JOIN products_subcategory ON products_subcategory.sno = productsdata.SubCat_sno INNER JOIN  products_category ON products_category.sno = products_subcategory.category_sno INNER JOIN tripdata ON indents_subtable.DTripId = tripdata.Sno WHERE (modifiedroutesubtable.EDate IS NULL) AND (modifiedroutesubtable.CDate <= @d1) AND (modifiedroutes.Sno = @RouteId) OR (modifiedroutesubtable.EDate > @d1) AND (modifiedroutesubtable.CDate <= @d1) AND (modifiedroutes.Sno = @RouteId) GROUP BY modifiedroutes.Sno, products_subcategory.sno");
            cmd.Parameters.AddWithValue("@RouteId", BranchID);
            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate.AddDays(-1)));
            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate.AddDays(-1)));
            dtyesterdayroutesale = vdbmngr.SelectQuery(cmd).Tables[0];

            cmd = new MySqlCommand("SELECT  sno, salestype, flag, UserData_sno, status, rank, club_code FROM salestypemanagement where (status = 1) ORDER BY salestype DESC");
            cmd.Parameters.AddWithValue("@BranchID", BranchID);
            DataTable dtsalestype = vdbmngr.SelectQuery(cmd).Tables[0];
            dtALL.Merge(dtyesterdayroutesale);
            string cate = ddlbarnchCategory.SelectedItem.Value;
            double yesterdaysum = 0;
            double lastweaksum = 0;
            double lastmonthsum = 0;
            double lastyearsum = 0;
            DataView view = new DataView(dtALL);
            DataTable distincttable = view.ToTable(true, "CatSno", "Category");
            DataTable temptable = new DataTable();
            temptable.Columns.Add("CategoryId");
            temptable.Columns.Add("SubCategoryId");
            temptable.Columns.Add("Category");
            temptable.Columns.Add("SubCategory");
            temptable.Columns.Add("AvgRate");
            temptable.Columns.Add("SaleQty").DataType = typeof(double);
            temptable.Columns.Add("SaleValue").DataType = typeof(double);
            double compare = 0;
            //newrow["SalesType"] = Salestype;
            double daytotal = 0; double weaktotal = 0;
            double monthtotal = 0; double yeartotal = 0;
            double GrandTotQty = 0; double GrandTotValue = 0;
            //DataTable MainReport = new DataTable();
            //MainReport.Columns.Add("RouteId");
            //MainReport.Columns.Add("RouteName");
            foreach (DataRow dramount in distincttable.Rows)
            {
                //DataRow newrow1 = temptable.NewRow();
                //newrow1["Category"] = dramount["Category"].ToString();
                /// newrow1["SubCategory"] = dramount["CatSno"].ToString();
                double qty = 0;
                string type = "";
                int i = 1;
                foreach (DataRow drsubcat in dtyesterdayroutesale.Select("CatSno='" + dramount["CatSno"].ToString() + "'"))
                {
                    DataRow newrow1 = temptable.NewRow();
                    if (i == 1)
                    {
                        newrow1["Category"] = dramount["Category"].ToString();
                    }
                    i++;
                    double dqty = 0;
                    double.TryParse(drsubcat["DeliveryQty"].ToString(), out dqty);
                    double salevalue = 0;
                    double.TryParse(drsubcat["salevalue"].ToString(), out salevalue);
                    GrandTotQty += dqty;
                    GrandTotValue += salevalue;
                    double avgrate = 0;
                    avgrate = salevalue / dqty;
                    newrow1["SubCategoryId"] = drsubcat["SubCatsno"].ToString();
                    newrow1["SubCategory"] = drsubcat["SubCategory"].ToString();
                    newrow1["SaleQty"] = drsubcat["DeliveryQty"].ToString();
                    newrow1["SaleValue"] = drsubcat["salevalue"].ToString();
                    newrow1["AvgRate"] = Math.Round(avgrate);
                    temptable.Rows.Add(newrow1);
                }
            }
            DataRow newvartical = temptable.NewRow();
            newvartical["SubCategory"] = "Total";
            double Avgrate = GrandTotValue / GrandTotQty;
            newvartical["AvgRate"] = Math.Round(Avgrate);
            double val = 0.0;
            foreach (DataColumn dc in temptable.Columns)
            {
                if (dc.DataType == typeof(Double))
                {
                    val = 0.0;
                    double.TryParse(temptable.Compute("sum([" + dc.ToString() + "])", "[" + dc.ToString() + "]<>'0'").ToString(), out val);
                    newvartical[dc.ToString()] = val;
                }
            }
            temptable.Rows.Add(newvartical);
            grdRouteUnderCategory.DataSource = temptable;
            grdRouteUnderCategory.DataBind();
        }
        catch (Exception ex)
        {
        }
    }
    protected void LinkButton11_Click(object sender, EventArgs e)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            string BranchID = Session["ClickBranchid"].ToString();
            string SectedDataType = ddlDayType.SelectedItem.Value;
            string s = Session["IndDate"].ToString();
            var dt = DateTime.ParseExact(s, "ddd MMM dd yyyy HH:mm:ss 'GMT'zzz", System.Globalization.CultureInfo.InvariantCulture);
            string IndDate = dt.ToString("yyyy-MM-dd");
            DateTime ServerDateCurrentdate = Convert.ToDateTime(IndDate);
            DateTime FromDate = ServerDateCurrentdate;
            string edate = Session["Todate"].ToString();
            var edt = DateTime.ParseExact(edate, "ddd MMM dd yyyy HH:mm:ss 'GMT'zzz", System.Globalization.CultureInfo.InvariantCulture);
            string Tdate = edt.ToString("yyyy-MM-dd");
            DateTime To_Date = Convert.ToDateTime(Tdate);
            DateTime ToDate = To_Date;
            // div_MainPlantComparison.Style.Add("display", "block");
            divHide1.Style.Add("display", "block");

            div_MainSalesOfficeCategory.Style.Add("display", "block");

            string Datatype = "";

            int Ndays = (FromDate - ToDate).Days;
            int countdays = Ndays + 1;

            if (countdays <= 7)
            {
                Datatype = "Monthly";
            }
            else if (countdays <= 30 || countdays <= 8)
            {
                Datatype = "Week";
            }
            else if (countdays == 364 || countdays >= 364)
            {
                Datatype = "Year";
            }
            else
            {
                Datatype = "Monthly";
            }
            DateTime lastmonthfrom = new DateTime();
            DateTime lastmonthto = new DateTime();
            DateTime YearServerDate_Currentdate = Convert.ToDateTime(IndDate);
            DateTime LastYearFromDate = YearServerDate_Currentdate;
            DateTime YearServerDate_Todate = Convert.ToDateTime(Tdate);
            DateTime LastYearToDate = YearServerDate_Todate;
            lastmonthfrom = FromDate.AddMonths(-1);
            lastmonthto = ToDate.AddMonths(-1);
            LastYearFromDate = LastYearFromDate.AddYears(-1);
            LastYearToDate = LastYearToDate.AddYears(-1);
            DataTable Dt_PresentWeak = new DataTable();
            DataTable dtSub_LastWeekData = new DataTable();

            DataTable dtPresentAllMonth = new DataTable();
            DataTable dtLastYearAllMonth = new DataTable();
            DataTable Dt_PresentMonthSale = new DataTable();
            DataTable Dt_PresentMonthAmount = new DataTable();
            DataTable dtSub_lastMonthSale = new DataTable();
            DataTable dtSub_lastMonthAmount = new DataTable();
            DataTable dtSub_lastYearSales = new DataTable();
            DataTable dtSub_lastYearAmount = new DataTable();
            string SalesType = Session["salestype"].ToString();
            DataTable dtALL = new DataTable();
            DataTable dtyesterdayroutesale = new DataTable();
            if (BranchID == "174")
            {
                cmd = new MySqlCommand("SELECT  products_subcategory.sno AS SubCatsno, modifiedroutes.RouteName,modifiedroutes.Sno As RouteId, products_subcategory.SubCatName AS SubCategory, products_category.Categoryname As Category,ROUND(SUM(indents_subtable.DeliveryQty)) AS DeliveryQty, ROUND(SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost)) AS salevalue, products_category.sno AS CatSno FROM modifiedroutes INNER JOIN modifiedroutesubtable ON modifiedroutes.Sno = modifiedroutesubtable.RefNo INNER JOIN branchdata ON modifiedroutesubtable.BranchID = branchdata.sno INNER JOIN (SELECT IndentNo, Branch_id, I_date FROM  indents WHERE  (I_date BETWEEN @d1 AND @d2)) indent ON branchdata.sno = indent.Branch_id INNER JOIN indents_subtable ON indent.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno INNER JOIN products_subcategory ON products_subcategory.sno = productsdata.SubCat_sno INNER JOIN  products_category ON products_category.sno = products_subcategory.category_sno INNER JOIN tripdata ON indents_subtable.DTripId = tripdata.Sno WHERE (modifiedroutesubtable.EDate IS NULL) AND (modifiedroutesubtable.CDate <= @d1) AND (modifiedroutes.BranchID IN ('174','527','4607')) OR (modifiedroutesubtable.EDate > @d1) AND (modifiedroutesubtable.CDate <= @d1) AND (modifiedroutes.BranchID IN ('174','527','4607')) GROUP BY  products_category.sno ORDER BY CatSno");
                cmd.Parameters.AddWithValue("@RouteId", BranchID);
                cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate.AddDays(-1)));
                cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate.AddDays(-1)));
                dtyesterdayroutesale = vdbmngr.SelectQuery(cmd).Tables[0];
            }
            else
            {
                cmd = new MySqlCommand("SELECT  products_subcategory.sno AS SubCatsno, modifiedroutes.RouteName,modifiedroutes.Sno As RouteId, products_subcategory.SubCatName AS SubCategory, products_category.Categoryname As Category,ROUND(SUM(indents_subtable.DeliveryQty)) AS DeliveryQty, ROUND(SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost)) AS salevalue, products_category.sno AS CatSno FROM modifiedroutes INNER JOIN modifiedroutesubtable ON modifiedroutes.Sno = modifiedroutesubtable.RefNo INNER JOIN branchdata ON modifiedroutesubtable.BranchID = branchdata.sno INNER JOIN (SELECT IndentNo, Branch_id, I_date FROM  indents WHERE  (I_date BETWEEN @d1 AND @d2)) indent ON branchdata.sno = indent.Branch_id INNER JOIN indents_subtable ON indent.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno INNER JOIN products_subcategory ON products_subcategory.sno = productsdata.SubCat_sno INNER JOIN  products_category ON products_category.sno = products_subcategory.category_sno INNER JOIN tripdata ON indents_subtable.DTripId = tripdata.Sno WHERE (modifiedroutesubtable.EDate IS NULL) AND (modifiedroutesubtable.CDate <= @d1) AND (modifiedroutes.BranchID = @RouteId) OR (modifiedroutesubtable.EDate > @d1) AND (modifiedroutesubtable.CDate <= @d1) AND (modifiedroutes.BranchID= @RouteId) GROUP BY  products_category.sno ORDER BY CatSno");
                cmd.Parameters.AddWithValue("@RouteId", BranchID);
                cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate.AddDays(-1)));
                cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate.AddDays(-1)));
                dtyesterdayroutesale = vdbmngr.SelectQuery(cmd).Tables[0];
            }
            cmd = new MySqlCommand("SELECT  sno, salestype, flag, UserData_sno, status, rank, club_code FROM salestypemanagement where (status = 1) ORDER BY salestype DESC");
            cmd.Parameters.AddWithValue("@BranchID", BranchID);
            DataTable dtsalestype = vdbmngr.SelectQuery(cmd).Tables[0];
            dtALL.Merge(dtyesterdayroutesale);
            string cate = ddlbarnchCategory.SelectedItem.Value;
            double yesterdaysum = 0;
            double lastweaksum = 0;
            double lastmonthsum = 0;
            double lastyearsum = 0;
            DataView view = new DataView(dtALL);
            DataTable distincttable = view.ToTable(true, "CatSno", "Category");
            DataTable temptable = new DataTable();
            temptable.Columns.Add("CategoryId");
            //temptable.Columns.Add("SubCategoryId");
            temptable.Columns.Add("Category");
            //temptable.Columns.Add("SubCategory");
            temptable.Columns.Add("AvgRate");
            temptable.Columns.Add("SaleQty").DataType = typeof(double);
            temptable.Columns.Add("SaleValue").DataType = typeof(double);
            double compare = 0;
            //newrow["SalesType"] = Salestype;
            double daytotal = 0; double weaktotal = 0;
            double monthtotal = 0; double yeartotal = 0;
            //DataTable MainReport = new DataTable();
            //MainReport.Columns.Add("RouteId");
            //MainReport.Columns.Add("RouteName");
            double GrandTotQty = 0, GrandTotValue = 0; ;
            foreach (DataRow dramount in dtyesterdayroutesale.Rows)
            {

                double qty = 0;
                string type = "";
                int i = 1;
                //foreach (DataRow drsubcat in dtyesterdayroutesale.Select("CatSno='" + dramount["CatSno"].ToString() + "'"))
                //{
                DataRow newrow1 = temptable.NewRow();
                //if (i == 1)
                //{
                newrow1["CategoryId"] = dramount["CatSno"].ToString();
                newrow1["Category"] = dramount["Category"].ToString();
                //}
                i++;
                double dqty = 0;
                double.TryParse(dramount["DeliveryQty"].ToString(), out dqty);
                double salevalue = 0;
                double.TryParse(dramount["salevalue"].ToString(), out salevalue);
                GrandTotQty += dqty;
                GrandTotValue += salevalue;

                double avgrate = 0;
                avgrate = salevalue / dqty;
                //newrow1["SubCategoryId"] = dramount["SubCatsno"].ToString();
                //newrow1["SubCategory"] = dramount["SubCategory"].ToString();
                newrow1["SaleQty"] = dramount["DeliveryQty"].ToString();
                newrow1["SaleValue"] = dramount["salevalue"].ToString();
                newrow1["AvgRate"] = Math.Round(avgrate);
                temptable.Rows.Add(newrow1);
                //}
            }
            DataRow newvartical = temptable.NewRow();
            newvartical["Category"] = "Total";
            double Avgrate = GrandTotValue / GrandTotQty;
            newvartical["AvgRate"] = Math.Round(Avgrate);
            double val = 0.0;
            foreach (DataColumn dc in temptable.Columns)
            {
                if (dc.DataType == typeof(Double))
                {
                    val = 0.0;
                    double.TryParse(temptable.Compute("sum([" + dc.ToString() + "])", "[" + dc.ToString() + "]<>'0'").ToString(), out val);
                    newvartical[dc.ToString()] = val;
                }
            }
            temptable.Rows.Add(newvartical);
            grdSalesOfficeCategoryReport.DataSource = temptable;
            grdSalesOfficeCategoryReport.DataBind();
        }
        catch (Exception ex)
        {
        }
    }
    protected void LinkButton12_Click(object sender, EventArgs e)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            //int rowIndex = Convert.ToInt32(e.CommandArgument);
            //GridViewRow row = grdBranchReport.Rows[rowIndex];
            //string BranchID = row.Cells[1].Text;
            string BranchID = Session["Plant_id"].ToString();
            string SectedDataType = ddlDayType.SelectedItem.Value;
            string s = Session["IndDate"].ToString();
            var dt = DateTime.ParseExact(s, "ddd MMM dd yyyy HH:mm:ss 'GMT'zzz", System.Globalization.CultureInfo.InvariantCulture);
            string IndDate = dt.ToString("yyyy-MM-dd");
            DateTime ServerDateCurrentdate = Convert.ToDateTime(IndDate);
            DateTime FromDate = ServerDateCurrentdate;
            string edate = Session["Todate"].ToString();
            var edt = DateTime.ParseExact(edate, "ddd MMM dd yyyy HH:mm:ss 'GMT'zzz", System.Globalization.CultureInfo.InvariantCulture);
            string Tdate = edt.ToString("yyyy-MM-dd");
            DateTime To_Date = Convert.ToDateTime(Tdate);
            DateTime ToDate = To_Date;
            // div_MainPlantComparison.Style.Add("display", "block");
            divHide1.Style.Add("display", "block");

            div_MainPlantWiseCategory.Style.Add("display", "block");

            string Datatype = "";

            int Ndays = (FromDate - ToDate).Days;
            int countdays = Ndays + 1;

            if (countdays <= 7)
            {
                Datatype = "Monthly";
            }
            else if (countdays <= 30 || countdays <= 8)
            {
                Datatype = "Week";
            }
            else if (countdays == 364 || countdays >= 364)
            {
                Datatype = "Year";
            }
            else
            {
                Datatype = "Monthly";
            }
            DateTime lastmonthfrom = new DateTime();
            DateTime lastmonthto = new DateTime();
            DateTime YearServerDate_Currentdate = Convert.ToDateTime(IndDate);
            DateTime LastYearFromDate = YearServerDate_Currentdate;
            DateTime YearServerDate_Todate = Convert.ToDateTime(Tdate);
            DateTime LastYearToDate = YearServerDate_Todate;
            lastmonthfrom = FromDate.AddMonths(-1);
            lastmonthto = ToDate.AddMonths(-1);
            LastYearFromDate = LastYearFromDate.AddYears(-1);
            LastYearToDate = LastYearToDate.AddYears(-1);
            DataTable Dt_PresentWeak = new DataTable();
            DataTable dtSub_LastWeekData = new DataTable();

            DataTable dtPresentAllMonth = new DataTable();
            DataTable dtLastYearAllMonth = new DataTable();
            DataTable Dt_PresentMonthSale = new DataTable();
            DataTable Dt_PresentMonthAmount = new DataTable();
            DataTable dtSub_lastMonthSale = new DataTable();
            DataTable dtSub_lastMonthAmount = new DataTable();
            DataTable dtSub_lastYearSales = new DataTable();
            DataTable dtSub_lastYearAmount = new DataTable();
            string SalesType = Session["salestype"].ToString();
            DataTable dtALL = new DataTable();
            DataTable dtyesterdayroutesale = new DataTable();



            if (BranchID == "172")
            {
                cmd = new MySqlCommand("SELECT    branchmappingtable.SuperBranch, branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty)) AS DeliveryQty, ROUND(AVG(indents_subtable.DeliveryQty)) AS AvgQty,ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty)) AS SaleValue, branchdata.sno, products_category.Categoryname AS Category, products_category.sno AS CatSno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno INNER JOIN products_subcategory ON products_subcategory.sno = productsdata.SubCat_sno INNER JOIN products_category ON products_category.sno = products_subcategory.category_sno WHERE (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch NOT IN ('538', '2749', '3928', '1801', '3625')) GROUP BY branchmappingtable.SuperBranch, products_category.sno");
                //cmd = new MySqlCommand("SELECT  products_subcategory.sno AS SubCatsno, modifiedroutes.RouteName,modifiedroutes.Sno As RouteId, products_subcategory.SubCatName AS SubCategory, products_category.Categoryname As Category,ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty, ROUND(SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost), 2) AS salevalue, products_category.sno AS CatSno FROM modifiedroutes INNER JOIN modifiedroutesubtable ON modifiedroutes.Sno = modifiedroutesubtable.RefNo INNER JOIN branchdata ON modifiedroutesubtable.BranchID = branchdata.sno INNER JOIN (SELECT IndentNo, Branch_id, I_date FROM  indents WHERE  (I_date BETWEEN @d1 AND @d2)) indent ON branchdata.sno = indent.Branch_id INNER JOIN indents_subtable ON indent.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno INNER JOIN products_subcategory ON products_subcategory.sno = productsdata.SubCat_sno INNER JOIN  products_category ON products_category.sno = products_subcategory.category_sno INNER JOIN tripdata ON indents_subtable.DTripId = tripdata.Sno WHERE (modifiedroutesubtable.EDate IS NULL) AND (modifiedroutesubtable.CDate <= @d1) AND (modifiedroutes.BranchID = @RouteId) OR (modifiedroutesubtable.EDate > @d1) AND (modifiedroutesubtable.CDate <= @d1) AND (modifiedroutes.BranchID= @RouteId) GROUP BY modifiedroutes.BranchID, products_category.sno ORDER BY CatSno");
                cmd.Parameters.AddWithValue("@BranchID", BranchID);
                cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate.AddDays(-1)));
                cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate.AddDays(-1)));
                dtyesterdayroutesale = vdbmngr.SelectQuery(cmd).Tables[0];
            }
            else if (BranchID == "3625")
            {
                cmd = new MySqlCommand("SELECT    branchmappingtable.SuperBranch, branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty)) AS DeliveryQty, ROUND(AVG(indents_subtable.DeliveryQty)) AS AvgQty,ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty)) AS SaleValue, branchdata.sno, products_category.Categoryname AS Category, products_category.sno AS CatSno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno INNER JOIN products_subcategory ON products_subcategory.sno = productsdata.SubCat_sno INNER JOIN products_category ON products_category.sno = products_subcategory.category_sno WHERE (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch NOT IN ('4609', '3625')) GROUP BY branchmappingtable.SuperBranch, products_category.sno");
                //cmd = new MySqlCommand("SELECT  products_subcategory.sno AS SubCatsno, modifiedroutes.RouteName,modifiedroutes.Sno As RouteId, products_subcategory.SubCatName AS SubCategory, products_category.Categoryname As Category,ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty, ROUND(SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost), 2) AS salevalue, products_category.sno AS CatSno FROM modifiedroutes INNER JOIN modifiedroutesubtable ON modifiedroutes.Sno = modifiedroutesubtable.RefNo INNER JOIN branchdata ON modifiedroutesubtable.BranchID = branchdata.sno INNER JOIN (SELECT IndentNo, Branch_id, I_date FROM  indents WHERE  (I_date BETWEEN @d1 AND @d2)) indent ON branchdata.sno = indent.Branch_id INNER JOIN indents_subtable ON indent.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno INNER JOIN products_subcategory ON products_subcategory.sno = productsdata.SubCat_sno INNER JOIN  products_category ON products_category.sno = products_subcategory.category_sno INNER JOIN tripdata ON indents_subtable.DTripId = tripdata.Sno WHERE (modifiedroutesubtable.EDate IS NULL) AND (modifiedroutesubtable.CDate <= @d1) AND (modifiedroutes.BranchID = @RouteId) OR (modifiedroutesubtable.EDate > @d1) AND (modifiedroutesubtable.CDate <= @d1) AND (modifiedroutes.BranchID= @RouteId) GROUP BY modifiedroutes.BranchID, products_category.sno ORDER BY CatSno");
                cmd.Parameters.AddWithValue("@BranchID", BranchID);
                cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate.AddDays(-1)));
                cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate.AddDays(-1)));
                dtyesterdayroutesale = vdbmngr.SelectQuery(cmd).Tables[0];
            }
            else if (BranchID == "1801")
            {
                cmd = new MySqlCommand("SELECT    branchmappingtable.SuperBranch, branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty)) AS DeliveryQty, ROUND(AVG(indents_subtable.DeliveryQty)) AS AvgQty,ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty)) AS SaleValue, branchdata.sno, products_category.Categoryname AS Category, products_category.sno AS CatSno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno INNER JOIN products_subcategory ON products_subcategory.sno = productsdata.SubCat_sno INNER JOIN products_category ON products_category.sno = products_subcategory.category_sno WHERE (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch IN ('538', '2749', '3928', '1801', '3625')) GROUP BY branchmappingtable.SuperBranch, products_category.sno");
                //cmd = new MySqlCommand("SELECT  products_subcategory.sno AS SubCatsno, modifiedroutes.RouteName,modifiedroutes.Sno As RouteId, products_subcategory.SubCatName AS SubCategory, products_category.Categoryname As Category,ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty, ROUND(SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost), 2) AS salevalue, products_category.sno AS CatSno FROM modifiedroutes INNER JOIN modifiedroutesubtable ON modifiedroutes.Sno = modifiedroutesubtable.RefNo INNER JOIN branchdata ON modifiedroutesubtable.BranchID = branchdata.sno INNER JOIN (SELECT IndentNo, Branch_id, I_date FROM  indents WHERE  (I_date BETWEEN @d1 AND @d2)) indent ON branchdata.sno = indent.Branch_id INNER JOIN indents_subtable ON indent.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno INNER JOIN products_subcategory ON products_subcategory.sno = productsdata.SubCat_sno INNER JOIN  products_category ON products_category.sno = products_subcategory.category_sno INNER JOIN tripdata ON indents_subtable.DTripId = tripdata.Sno WHERE (modifiedroutesubtable.EDate IS NULL) AND (modifiedroutesubtable.CDate <= @d1) AND (modifiedroutes.BranchID = @RouteId) OR (modifiedroutesubtable.EDate > @d1) AND (modifiedroutesubtable.CDate <= @d1) AND (modifiedroutes.BranchID= @RouteId) GROUP BY modifiedroutes.BranchID, products_category.sno ORDER BY CatSno");
                cmd.Parameters.AddWithValue("@BranchID", BranchID);
                cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate.AddDays(-1)));
                cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate.AddDays(-1)));
                dtyesterdayroutesale = vdbmngr.SelectQuery(cmd).Tables[0];
            }
            else if (BranchID == "158")
            {

                cmd = new MySqlCommand("SELECT    branchmappingtable.SuperBranch, branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty)) AS DeliveryQty, ROUND(AVG(indents_subtable.DeliveryQty)) AS AvgQty,ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty)) AS SaleValue, branchdata.sno, products_category.Categoryname AS Category, products_category.sno AS CatSno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno INNER JOIN products_subcategory ON products_subcategory.sno = productsdata.SubCat_sno INNER JOIN products_category ON products_category.sno = products_subcategory.category_sno WHERE (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch NOT IN (159,4626)) GROUP BY branchmappingtable.SuperBranch, products_category.sno");
                //cmd = new MySqlCommand("SELECT  products_subcategory.sno AS SubCatsno, modifiedroutes.RouteName,modifiedroutes.Sno As RouteId, products_subcategory.SubCatName AS SubCategory, products_category.Categoryname As Category,ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty, ROUND(SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost), 2) AS salevalue, products_category.sno AS CatSno FROM modifiedroutes INNER JOIN modifiedroutesubtable ON modifiedroutes.Sno = modifiedroutesubtable.RefNo INNER JOIN branchdata ON modifiedroutesubtable.BranchID = branchdata.sno INNER JOIN (SELECT IndentNo, Branch_id, I_date FROM  indents WHERE  (I_date BETWEEN @d1 AND @d2)) indent ON branchdata.sno = indent.Branch_id INNER JOIN indents_subtable ON indent.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno INNER JOIN products_subcategory ON products_subcategory.sno = productsdata.SubCat_sno INNER JOIN  products_category ON products_category.sno = products_subcategory.category_sno INNER JOIN tripdata ON indents_subtable.DTripId = tripdata.Sno WHERE (modifiedroutesubtable.EDate IS NULL) AND (modifiedroutesubtable.CDate <= @d1) AND (modifiedroutes.BranchID = @RouteId) OR (modifiedroutesubtable.EDate > @d1) AND (modifiedroutesubtable.CDate <= @d1) AND (modifiedroutes.BranchID= @RouteId) GROUP BY modifiedroutes.BranchID, products_category.sno ORDER BY CatSno");
                cmd.Parameters.AddWithValue("@BranchID", BranchID);
                cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate.AddDays(-1)));
                cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate.AddDays(-1)));
                dtyesterdayroutesale = vdbmngr.SelectQuery(cmd).Tables[0];

                cmd = new MySqlCommand("SELECT  branchmappingtable.SuperBranch, branchdata.BranchName, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty), 2) AS SaleValue, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty, branchmappingtable.SuperBranch AS sno, products_category.Categoryname AS Category, products_category.sno AS CatSno FROM (SELECT  IndentNo, Branch_id, I_date, Status, IndentType FROM  indents WHERE  (I_date BETWEEN @d1 AND @d2) AND (Status <> 'D')) indent INNER JOIN branchdata ON indent.Branch_id = branchdata.sno INNER JOIN indents_subtable ON indent.IndentNo = indents_subtable.IndentNo INNER JOIN branchmappingtable ON branchdata.sno = branchmappingtable.SubBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable.SuperBranch = branchdata_1.sno INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno INNER JOIN products_subcategory ON products_subcategory.sno = productsdata.SubCat_sno INNER JOIN products_category ON products_category.sno = products_subcategory.category_sno WHERE  (branchmappingtable.SuperBranch = @BranchID) AND (indents_subtable.DeliveryQty <> 0) GROUP BY products_category.sno ORDER BY branchdata.BranchName");
                cmd.Parameters.AddWithValue("@BranchID", BranchID);
                cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-1));
                cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-1));
                DataTable temptable = vdbmngr.SelectQuery(cmd).Tables[0];
                dtyesterdayroutesale.Merge(temptable);
            }
            else if (BranchID == "4626")
            {
                cmd = new MySqlCommand("SELECT    branchmappingtable.SuperBranch, branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty)) AS DeliveryQty, ROUND(AVG(indents_subtable.DeliveryQty)) AS AvgQty,ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty)) AS SaleValue, branchdata.sno, products_category.Categoryname AS Category, products_category.sno AS CatSno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno INNER JOIN products_subcategory ON products_subcategory.sno = productsdata.SubCat_sno INNER JOIN products_category ON products_category.sno = products_subcategory.category_sno WHERE (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch IN (159,4626,5437)) GROUP BY branchmappingtable.SuperBranch, products_category.sno");
                //cmd = new MySqlCommand("SELECT  products_subcategory.sno AS SubCatsno, modifiedroutes.RouteName,modifiedroutes.Sno As RouteId, products_subcategory.SubCatName AS SubCategory, products_category.Categoryname As Category,ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty, ROUND(SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost), 2) AS salevalue, products_category.sno AS CatSno FROM modifiedroutes INNER JOIN modifiedroutesubtable ON modifiedroutes.Sno = modifiedroutesubtable.RefNo INNER JOIN branchdata ON modifiedroutesubtable.BranchID = branchdata.sno INNER JOIN (SELECT IndentNo, Branch_id, I_date FROM  indents WHERE  (I_date BETWEEN @d1 AND @d2)) indent ON branchdata.sno = indent.Branch_id INNER JOIN indents_subtable ON indent.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno INNER JOIN products_subcategory ON products_subcategory.sno = productsdata.SubCat_sno INNER JOIN  products_category ON products_category.sno = products_subcategory.category_sno INNER JOIN tripdata ON indents_subtable.DTripId = tripdata.Sno WHERE (modifiedroutesubtable.EDate IS NULL) AND (modifiedroutesubtable.CDate <= @d1) AND (modifiedroutes.BranchID = @RouteId) OR (modifiedroutesubtable.EDate > @d1) AND (modifiedroutesubtable.CDate <= @d1) AND (modifiedroutes.BranchID= @RouteId) GROUP BY modifiedroutes.BranchID, products_category.sno ORDER BY CatSno");
                cmd.Parameters.AddWithValue("@BranchID", BranchID);
                cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate.AddDays(-1)));
                cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate.AddDays(-1)));
                dtyesterdayroutesale = vdbmngr.SelectQuery(cmd).Tables[0];
                //cmd = new MySqlCommand("SELECT   branchmappingtable.SuperBranch,branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID)  GROUP BY branchdata.sno");
                //cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-1));
                //cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-1));
                //cmd.Parameters.AddWithValue("@BranchID", BranchID);
                //dtyesterdayroutesale = vdbmngr.SelectQuery(cmd).Tables[0];
            }

            cmd = new MySqlCommand("SELECT  sno, salestype, flag, UserData_sno, status, rank, club_code FROM salestypemanagement where (status = 1) ORDER BY salestype DESC");
            cmd.Parameters.AddWithValue("@BranchID", BranchID);
            DataTable dtsalestype = vdbmngr.SelectQuery(cmd).Tables[0];
            dtALL.Merge(dtyesterdayroutesale);
            string cate = ddlbarnchCategory.SelectedItem.Value;
            double yesterdaysum = 0;
            double lastweaksum = 0;
            double lastmonthsum = 0;
            double lastyearsum = 0;
            DataView view = new DataView(dtALL);
            DataTable distincttable = view.ToTable(true, "CatSno", "Category");
            double compare = 0;
            //newrow["SalesType"] = Salestype;
            double daytotal = 0; double weaktotal = 0;
            double monthtotal = 0; double yeartotal = 0;
            //DataTable MainReport = new DataTable();
            //MainReport.Columns.Add("RouteId");
            //MainReport.Columns.Add("RouteName");
            double GrandTotValue = 0; double GrandTotQty = 0;
            if (BranchID == "158")
            {
                DataTable temptable = new DataTable();
                temptable.Columns.Add("CategoryId");
                //temptable.Columns.Add("SubCategoryId");
                temptable.Columns.Add("Category");
                //temptable.Columns.Add("SubCategory");
                temptable.Columns.Add("AvgRate");
                temptable.Columns.Add("SaleQty").DataType = typeof(double);
                temptable.Columns.Add("SaleValue").DataType = typeof(double);
                foreach (DataRow dramount in distincttable.Rows)
                {
                    double qty = 0;
                    string type = "";
                    int i = 1;
                    DataRow newrow1 = temptable.NewRow();
                    newrow1["CategoryId"] = dramount["CatSno"].ToString();
                    newrow1["Category"] = dramount["Category"].ToString();
                    double TotQty = 0, TotValue = 0; ;
                    foreach (DataRow drsubcat in dtyesterdayroutesale.Select("CatSno='" + dramount["CatSno"].ToString() + "'"))
                    {
                        double dqty = 0;
                        double.TryParse(drsubcat["DeliveryQty"].ToString(), out dqty);
                        double salevalue = 0;
                        double.TryParse(drsubcat["salevalue"].ToString(), out salevalue);
                        TotQty += dqty;
                        TotValue += salevalue;
                        //double avgrate = 0;
                        //newrow1["SubCategoryId"] = dramount["SubCatsno"].ToString();
                        //newrow1["SubCategory"] = dramount["SubCategory"].ToString();
                    }
                    newrow1["SaleQty"] = TotQty;
                    newrow1["SaleValue"] = TotValue;
                    GrandTotValue += TotValue;
                    GrandTotQty += TotQty;
                    double avg_rate = TotValue / TotQty;
                    newrow1["AvgRate"] = Math.Round(avg_rate);
                    temptable.Rows.Add(newrow1);
                }

                DataRow newvartical = temptable.NewRow();
                newvartical["Category"] = "Total";
                double avgrate = GrandTotValue / GrandTotQty;
                newvartical["AvgRate"] = Math.Round(avgrate);
                double val = 0.0;
                foreach (DataColumn dc in temptable.Columns)
                {
                    if (dc.DataType == typeof(Double))
                    {
                        val = 0.0;
                        double.TryParse(temptable.Compute("sum([" + dc.ToString() + "])", "[" + dc.ToString() + "]<>'0'").ToString(), out val);
                        newvartical[dc.ToString()] = val;
                    }
                }
                temptable.Rows.Add(newvartical);
                grdPlatWiseCategoryReport.DataSource = temptable;
                grdPlatWiseCategoryReport.DataBind();
            }
            else
            {
                DataTable temptable = new DataTable();
                temptable.Columns.Add("CategoryId");
                //temptable.Columns.Add("SubCategoryId");
                temptable.Columns.Add("Category");
                //temptable.Columns.Add("SubCategory");
                temptable.Columns.Add("AvgRate");
                temptable.Columns.Add("SaleQty").DataType = typeof(double);
                temptable.Columns.Add("SaleValue").DataType = typeof(double);
                foreach (DataRow dramount in dtyesterdayroutesale.Rows)
                {
                    double qty = 0;
                    string type = "";
                    int i = 1;
                    //foreach (DataRow drsubcat in dtyesterdayroutesale.Select("CatSno='" + dramount["CatSno"].ToString() + "'"))
                    //{
                    DataRow newrow1 = temptable.NewRow();
                    //if (i == 1)
                    //{
                    newrow1["CategoryId"] = dramount["CatSno"].ToString();
                    newrow1["Category"] = dramount["Category"].ToString();
                    //}
                    i++;
                    double dqty = 0;
                    double.TryParse(dramount["DeliveryQty"].ToString(), out dqty);
                    double salevalue = 0;
                    double.TryParse(dramount["salevalue"].ToString(), out salevalue);
                    GrandTotQty += dqty;
                    GrandTotValue += salevalue;
                    double avgrate = 0;
                    avgrate = salevalue / dqty;
                    //newrow1["SubCategoryId"] = dramount["SubCatsno"].ToString();
                    //newrow1["SubCategory"] = dramount["SubCategory"].ToString();
                    newrow1["SaleQty"] = dqty;
                    newrow1["SaleValue"] = salevalue;
                    newrow1["AvgRate"] = Math.Round(avgrate);
                    temptable.Rows.Add(newrow1);
                    //}
                }
                DataRow newvartical1 = temptable.NewRow();
                newvartical1["Category"] = "Total";
                double Avg_rate = GrandTotValue / GrandTotQty;
                newvartical1["AvgRate"] = Math.Round(Avg_rate);
                double val = 0.0;
                foreach (DataColumn dc in temptable.Columns)
                {
                    if (dc.DataType == typeof(Double))
                    {
                        val = 0.0;
                        double.TryParse(temptable.Compute("sum([" + dc.ToString() + "])", "[" + dc.ToString() + "]<>'0'").ToString(), out val);
                        newvartical1[dc.ToString()] = val;
                    }
                }
                temptable.Rows.Add(newvartical1);
                grdPlatWiseCategoryReport.DataSource = temptable;
                grdPlatWiseCategoryReport.DataBind();
            }
        }
        catch (Exception ex)
        {
        }
    }
    protected void grdPlatWiseCategoryReport_RowCommand(object sender, GridViewCommandEventArgs e)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            string BranchID = Session["Plant_id"].ToString();
            string SectedDataType = ddlDayType.SelectedItem.Value;
            string s = Session["IndDate"].ToString();
            var dt = DateTime.ParseExact(s, "ddd MMM dd yyyy HH:mm:ss 'GMT'zzz", System.Globalization.CultureInfo.InvariantCulture);
            string IndDate = dt.ToString("yyyy-MM-dd");
            DateTime ServerDateCurrentdate = Convert.ToDateTime(IndDate);
            DateTime FromDate = ServerDateCurrentdate;
            string edate = Session["Todate"].ToString();
            var edt = DateTime.ParseExact(edate, "ddd MMM dd yyyy HH:mm:ss 'GMT'zzz", System.Globalization.CultureInfo.InvariantCulture);
            string Tdate = edt.ToString("yyyy-MM-dd");
            DateTime To_Date = Convert.ToDateTime(Tdate);
            DateTime ToDate = To_Date;
            // div_MainPlantComparison.Style.Add("display", "block");
            divHide1.Style.Add("display", "block");
            div_MainPlantWiseSubCategory.Style.Add("display", "block");
            string Datatype = "";
            int Ndays = (FromDate - ToDate).Days;
            int rowIndex = Convert.ToInt32(e.CommandArgument);
            GridViewRow row = grdPlatWiseCategoryReport.Rows[rowIndex];
            string CatSno = row.Cells[1].Text;
            int countdays = Ndays + 1;

            if (countdays <= 7)
            {
                Datatype = "Monthly";
            }
            else if (countdays <= 30 || countdays <= 8)
            {
                Datatype = "Week";
            }
            else if (countdays == 364 || countdays >= 364)
            {
                Datatype = "Year";
            }
            else
            {
                Datatype = "Monthly";
            }
            DateTime lastmonthfrom = new DateTime();
            DateTime lastmonthto = new DateTime();
            DateTime YearServerDate_Currentdate = Convert.ToDateTime(IndDate);
            DateTime LastYearFromDate = YearServerDate_Currentdate;
            DateTime YearServerDate_Todate = Convert.ToDateTime(Tdate);
            DateTime LastYearToDate = YearServerDate_Todate;
            lastmonthfrom = FromDate.AddMonths(-1);
            lastmonthto = ToDate.AddMonths(-1);
            LastYearFromDate = LastYearFromDate.AddYears(-1);
            LastYearToDate = LastYearToDate.AddYears(-1);
            DataTable Dt_PresentWeak = new DataTable();
            DataTable dtSub_LastWeekData = new DataTable();

            DataTable dtPresentAllMonth = new DataTable();
            DataTable dtLastYearAllMonth = new DataTable();
            DataTable Dt_PresentMonthSale = new DataTable();
            DataTable Dt_PresentMonthAmount = new DataTable();
            DataTable dtSub_lastMonthSale = new DataTable();
            DataTable dtSub_lastMonthAmount = new DataTable();
            DataTable dtSub_lastYearSales = new DataTable();
            DataTable dtSub_lastYearAmount = new DataTable();
            string SalesType = Session["salestype"].ToString();
            DataTable dtALL = new DataTable();
            DataTable dtyesterdayroutesale = new DataTable();
            if (BranchID == "172")
            {
                cmd = new MySqlCommand("SELECT  branchmappingtable.SuperBranch, branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty)) AS DeliveryQty, ROUND(AVG(indents_subtable.DeliveryQty)) AS AvgQty,ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty)) AS SaleValue, branchdata.sno, products_category.Categoryname AS Category, products_category.sno AS CatSno,products_subcategory.sno AS SubCatsno, products_subcategory.SubCatName AS SubCategory FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno INNER JOIN products_subcategory ON products_subcategory.sno = productsdata.SubCat_sno INNER JOIN products_category ON products_category.sno = products_subcategory.category_sno WHERE (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch NOT IN ('538', '2749', '3928', '1801', '3625')) AND (products_category.sno = @CatSno) GROUP BY branchmappingtable.SuperBranch,products_subcategory.sno");
                cmd.Parameters.AddWithValue("@BranchID", BranchID);
                cmd.Parameters.AddWithValue("@CatSno", CatSno);
                cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate.AddDays(-1)));
                cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate.AddDays(-1)));
                dtyesterdayroutesale = vdbmngr.SelectQuery(cmd).Tables[0];
            }
            else if (BranchID == "3625")
            {
                cmd = new MySqlCommand("SELECT  branchmappingtable.SuperBranch, branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty)) AS DeliveryQty, ROUND(AVG(indents_subtable.DeliveryQty)) AS AvgQty,ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty)) AS SaleValue, branchdata.sno, products_category.Categoryname AS Category, products_category.sno AS CatSno,products_subcategory.sno AS SubCatsno, products_subcategory.SubCatName AS SubCategory FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno INNER JOIN products_subcategory ON products_subcategory.sno = productsdata.SubCat_sno INNER JOIN products_category ON products_category.sno = products_subcategory.category_sno WHERE (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch NOT IN ('4609', '3625')) AND (products_category.sno = @CatSno) GROUP BY branchmappingtable.SuperBranch,products_subcategory.sno");
                cmd.Parameters.AddWithValue("@BranchID", BranchID);
                cmd.Parameters.AddWithValue("@CatSno", CatSno);
                cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate.AddDays(-1)));
                cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate.AddDays(-1)));
                dtyesterdayroutesale = vdbmngr.SelectQuery(cmd).Tables[0];
            }
            else if (BranchID == "1801")
            {
                cmd = new MySqlCommand("SELECT  branchmappingtable.SuperBranch, branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty)) AS DeliveryQty, ROUND(AVG(indents_subtable.DeliveryQty)) AS AvgQty,ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty)) AS SaleValue, branchdata.sno, products_category.Categoryname AS Category, products_category.sno AS CatSno,products_subcategory.sno AS SubCatsno, products_subcategory.SubCatName AS SubCategory FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno INNER JOIN products_subcategory ON products_subcategory.sno = productsdata.SubCat_sno INNER JOIN products_category ON products_category.sno = products_subcategory.category_sno WHERE (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch IN ('538', '2749', '3928', '1801', '3625')) AND (products_category.sno = @CatSno) GROUP BY branchmappingtable.SuperBranch,products_subcategory.sno");
                cmd.Parameters.AddWithValue("@BranchID", BranchID);
                cmd.Parameters.AddWithValue("@CatSno", CatSno);
                cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate.AddDays(-1)));
                cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate.AddDays(-1)));
                dtyesterdayroutesale = vdbmngr.SelectQuery(cmd).Tables[0];
            }
            else if (BranchID == "158")
            {
                cmd = new MySqlCommand("SELECT  branchmappingtable.SuperBranch, branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty)) AS DeliveryQty, ROUND(AVG(indents_subtable.DeliveryQty)) AS AvgQty,ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty)) AS SaleValue, branchdata.sno, products_category.Categoryname AS Category, products_category.sno AS CatSno,products_subcategory.sno AS SubCatsno, products_subcategory.SubCatName AS SubCategory FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno INNER JOIN products_subcategory ON products_subcategory.sno = productsdata.SubCat_sno INNER JOIN products_category ON products_category.sno = products_subcategory.category_sno WHERE (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch NOT IN (159,4626)) AND (products_category.sno = @CatSno) GROUP BY branchmappingtable.SuperBranch,products_subcategory.sno");
                cmd.Parameters.AddWithValue("@BranchID", BranchID);
                cmd.Parameters.AddWithValue("@CatSno", CatSno);
                cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate.AddDays(-1)));
                cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate.AddDays(-1)));
                dtyesterdayroutesale = vdbmngr.SelectQuery(cmd).Tables[0];

                cmd = new MySqlCommand("SELECT  branchmappingtable.SuperBranch, branchdata.BranchName, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty), 2) AS SaleValue, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty, branchmappingtable.SuperBranch AS sno, products_category.Categoryname AS Category, products_category.sno AS CatSno,products_subcategory.sno AS SubCatsno, products_subcategory.SubCatName AS SubCategory FROM (SELECT  IndentNo, Branch_id, I_date, Status, IndentType FROM  indents WHERE  (I_date BETWEEN @d1 AND @d2) AND (Status <> 'D')) indent INNER JOIN branchdata ON indent.Branch_id = branchdata.sno INNER JOIN indents_subtable ON indent.IndentNo = indents_subtable.IndentNo INNER JOIN branchmappingtable ON branchdata.sno = branchmappingtable.SubBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable.SuperBranch = branchdata_1.sno INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno INNER JOIN products_subcategory ON products_subcategory.sno = productsdata.SubCat_sno INNER JOIN products_category ON products_category.sno = products_subcategory.category_sno WHERE  (branchmappingtable.SuperBranch = @BranchID) AND (indents_subtable.DeliveryQty <> 0) AND products_category.sno=@CatSno GROUP BY products_subcategory.sno ORDER BY branchdata.BranchName");
                cmd.Parameters.AddWithValue("@BranchID", BranchID);
                cmd.Parameters.AddWithValue("@CatSno", CatSno);
                cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-1));
                cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-1));
                DataTable temptable1 = vdbmngr.SelectQuery(cmd).Tables[0];
                dtyesterdayroutesale.Merge(temptable1);

            }
            else
            {
            }

            //else
            //{
            //    cmd = new MySqlCommand("SELECT   branchmappingtable.SuperBranch,branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID)  GROUP BY branchdata.sno");
            //    cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-1));
            //    cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-1));
            //    cmd.Parameters.AddWithValue("@BranchID", BranchID);
            //    dtyesterdayroutesale = vdbmngr.SelectQuery(cmd).Tables[0];
            //}
            cmd = new MySqlCommand("SELECT  sno, salestype, flag, UserData_sno, status, rank, club_code FROM salestypemanagement where (status = 1) ORDER BY salestype DESC");
            cmd.Parameters.AddWithValue("@BranchID", BranchID);
            DataTable dtsalestype = vdbmngr.SelectQuery(cmd).Tables[0];
            dtALL.Merge(dtyesterdayroutesale);
            string cate = ddlbarnchCategory.SelectedItem.Value;
            double yesterdaysum = 0;
            double lastweaksum = 0;
            double lastmonthsum = 0;
            double lastyearsum = 0;
            if (BranchID == "158")
            {
                DataView view = new DataView(dtALL);
                DataTable distincttable = view.ToTable(true, "CatSno", "Category", "SubCategory", "SubCatsno");
                DataTable temptable = new DataTable();
                temptable.Columns.Add("CategoryId");
                temptable.Columns.Add("SubCategoryId");
                temptable.Columns.Add("Category");
                temptable.Columns.Add("SubCategory");
                temptable.Columns.Add("AvgRate");
                temptable.Columns.Add("SaleQty").DataType = typeof(double);
                temptable.Columns.Add("SaleValue").DataType = typeof(double);
                double compare = 0;
                //newrow["SalesType"] = Salestype;
                double daytotal = 0; double weaktotal = 0;
                double monthtotal = 0; double yeartotal = 0;
                double GrandTotQty = 0; double GrandTotValue = 0;
                //DataTable MainReport = new DataTable();
                //MainReport.Columns.Add("RouteId");
                //MainReport.Columns.Add("RouteName");

                foreach (DataRow dramount in distincttable.Rows)
                {
                    //DataRow newrow1 = temptable.NewRow();
                    //newrow1["Category"] = dramount["Category"].ToString();
                    /// newrow1["SubCategory"] = dramount["CatSno"].ToString();
                    double qty = 0;
                    string type = "";
                    int i = 1;
                    DataRow newrow1 = temptable.NewRow();
                    if (i == 1)
                    {
                        newrow1["Category"] = dramount["Category"].ToString();
                        newrow1["CategoryId"] = dramount["CatSno"].ToString();
                    }
                    newrow1["SubCategoryId"] = dramount["SubCatsno"].ToString();
                    newrow1["SubCategory"] = dramount["SubCategory"].ToString();
                    double TotQty = 0, TotValue = 0;
                    foreach (DataRow drsubcat in dtyesterdayroutesale.Select("SubCatsno='" + dramount["SubCatsno"].ToString() + "'"))
                    {

                        i++;
                        double dqty = 0;
                        double.TryParse(drsubcat["DeliveryQty"].ToString(), out dqty);
                        double salevalue = 0;
                        double.TryParse(drsubcat["salevalue"].ToString(), out salevalue);
                        TotQty += dqty;
                        TotValue += salevalue;

                    }
                    newrow1["SaleQty"] = TotQty;
                    newrow1["SaleValue"] = TotValue;
                    double avgrate = TotValue / TotQty;
                    GrandTotQty += TotQty;
                    GrandTotValue += TotValue;
                    newrow1["AvgRate"] = Math.Round(avgrate);
                    temptable.Rows.Add(newrow1);
                }
                DataRow newvartical = temptable.NewRow();
                newvartical["SubCategory"] = "Total";
                double Avg_rate = GrandTotValue / GrandTotQty;
                newvartical["AvgRate"] = Math.Round(Avg_rate);
                double val = 0.0;
                foreach (DataColumn dc in temptable.Columns)
                {
                    if (dc.DataType == typeof(Double))
                    {
                        val = 0.0;
                        double.TryParse(temptable.Compute("sum([" + dc.ToString() + "])", "[" + dc.ToString() + "]<>'0'").ToString(), out val);
                        newvartical[dc.ToString()] = val;
                    }
                }
                temptable.Rows.Add(newvartical);
                grdPlatWiseSubCategoryReport.DataSource = temptable;
                grdPlatWiseSubCategoryReport.DataBind();
            }
            else
            {
                DataView view = new DataView(dtALL);
                DataTable distincttable = view.ToTable(true, "CatSno", "Category");
                DataTable temptable = new DataTable();
                temptable.Columns.Add("CategoryId");
                temptable.Columns.Add("SubCategoryId");
                temptable.Columns.Add("Category");
                temptable.Columns.Add("SubCategory");
                temptable.Columns.Add("AvgRate");
                temptable.Columns.Add("SaleQty").DataType = typeof(double);
                temptable.Columns.Add("SaleValue").DataType = typeof(double);
                double compare = 0;
                //newrow["SalesType"] = Salestype;
                double daytotal = 0; double weaktotal = 0;
                double monthtotal = 0; double yeartotal = 0;
                double GrandTotQty = 0; double GrandTotValue = 0;
                //DataTable MainReport = new DataTable();
                //MainReport.Columns.Add("RouteId");
                //MainReport.Columns.Add("RouteName");

                foreach (DataRow dramount in distincttable.Rows)
                {
                    //DataRow newrow1 = temptable.NewRow();
                    //newrow1["Category"] = dramount["Category"].ToString();
                    /// newrow1["SubCategory"] = dramount["CatSno"].ToString();
                    double qty = 0;
                    string type = "";
                    int i = 1;
                    foreach (DataRow drsubcat in dtyesterdayroutesale.Select("CatSno='" + dramount["CatSno"].ToString() + "'"))
                    {
                        DataRow newrow1 = temptable.NewRow();
                        if (i == 1)
                        {
                            newrow1["Category"] = dramount["Category"].ToString();
                            newrow1["CategoryId"] = dramount["CatSno"].ToString();
                        }
                        i++;
                        double dqty = 0;
                        double.TryParse(drsubcat["DeliveryQty"].ToString(), out dqty);
                        double salevalue = 0;
                        double.TryParse(drsubcat["salevalue"].ToString(), out salevalue);
                        double avgrate = 0;
                        GrandTotQty += dqty;
                        GrandTotValue += salevalue;
                        avgrate = salevalue / dqty;
                        newrow1["SubCategoryId"] = drsubcat["SubCatsno"].ToString();
                        newrow1["SubCategory"] = drsubcat["SubCategory"].ToString();
                        newrow1["SaleQty"] = drsubcat["DeliveryQty"].ToString();
                        newrow1["SaleValue"] = drsubcat["salevalue"].ToString();
                        newrow1["AvgRate"] = Math.Round(avgrate);
                        temptable.Rows.Add(newrow1);
                    }
                }
                DataRow newvartical = temptable.NewRow();
                newvartical["SubCategory"] = "Total";
                double Avgrate = GrandTotValue / GrandTotQty;
                newvartical["AvgRate"] = Math.Round(Avgrate);
                double val = 0.0;
                foreach (DataColumn dc in temptable.Columns)
                {
                    if (dc.DataType == typeof(Double))
                    {
                        val = 0.0;
                        double.TryParse(temptable.Compute("sum([" + dc.ToString() + "])", "[" + dc.ToString() + "]<>'0'").ToString(), out val);
                        newvartical[dc.ToString()] = val;
                    }
                }
                temptable.Rows.Add(newvartical);
                grdPlatWiseSubCategoryReport.DataSource = temptable;
                grdPlatWiseSubCategoryReport.DataBind();
            }
        }
        catch (Exception ex)
        {
        }
    }
    protected void grdSalesOfficeCategoryReport_RowCommand(object sender, GridViewCommandEventArgs e)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            string BranchID = Session["ClickBranchid"].ToString();
            string SectedDataType = ddlDayType.SelectedItem.Value;
            string s = Session["IndDate"].ToString();
            var dt = DateTime.ParseExact(s, "ddd MMM dd yyyy HH:mm:ss 'GMT'zzz", System.Globalization.CultureInfo.InvariantCulture);
            string IndDate = dt.ToString("yyyy-MM-dd");
            DateTime ServerDateCurrentdate = Convert.ToDateTime(IndDate);
            DateTime FromDate = ServerDateCurrentdate;
            string edate = Session["Todate"].ToString();
            var edt = DateTime.ParseExact(edate, "ddd MMM dd yyyy HH:mm:ss 'GMT'zzz", System.Globalization.CultureInfo.InvariantCulture);
            string Tdate = edt.ToString("yyyy-MM-dd");
            DateTime To_Date = Convert.ToDateTime(Tdate);
            DateTime ToDate = To_Date;
            // div_MainPlantComparison.Style.Add("display", "block");
            divHide1.Style.Add("display", "block");
            div_MainSalesOfficeSubCategory.Style.Add("display", "block");
            string Datatype = "";
            int Ndays = (FromDate - ToDate).Days;

            int rowIndex = Convert.ToInt32(e.CommandArgument);
            GridViewRow row = grdSalesOfficeCategoryReport.Rows[rowIndex];
            string CatSno = row.Cells[1].Text;
            int countdays = Ndays + 1;

            if (countdays <= 7)
            {
                Datatype = "Monthly";
            }
            else if (countdays <= 30 || countdays <= 8)
            {
                Datatype = "Week";
            }
            else if (countdays == 364 || countdays >= 364)
            {
                Datatype = "Year";
            }
            else
            {
                Datatype = "Monthly";
            }
            DateTime lastmonthfrom = new DateTime();
            DateTime lastmonthto = new DateTime();
            DateTime YearServerDate_Currentdate = Convert.ToDateTime(IndDate);
            DateTime LastYearFromDate = YearServerDate_Currentdate;
            DateTime YearServerDate_Todate = Convert.ToDateTime(Tdate);
            DateTime LastYearToDate = YearServerDate_Todate;
            lastmonthfrom = FromDate.AddMonths(-1);
            lastmonthto = ToDate.AddMonths(-1);
            LastYearFromDate = LastYearFromDate.AddYears(-1);
            LastYearToDate = LastYearToDate.AddYears(-1);
            DataTable Dt_PresentWeak = new DataTable();
            DataTable dtSub_LastWeekData = new DataTable();

            DataTable dtPresentAllMonth = new DataTable();
            DataTable dtLastYearAllMonth = new DataTable();
            DataTable Dt_PresentMonthSale = new DataTable();
            DataTable Dt_PresentMonthAmount = new DataTable();
            DataTable dtSub_lastMonthSale = new DataTable();
            DataTable dtSub_lastMonthAmount = new DataTable();
            DataTable dtSub_lastYearSales = new DataTable();
            DataTable dtSub_lastYearAmount = new DataTable();
            string SalesType = Session["salestype"].ToString();
            DataTable dtALL = new DataTable();
            DataTable dtyesterdayroutesale = new DataTable();

            if (BranchID == "174")
            {
                cmd = new MySqlCommand("SELECT  products_subcategory.sno AS SubCatsno, modifiedroutes.RouteName,modifiedroutes.Sno As RouteId, products_subcategory.SubCatName AS SubCategory, products_category.Categoryname As Category,ROUND(SUM(indents_subtable.DeliveryQty)) AS DeliveryQty, ROUND(SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost)) AS salevalue, products_category.sno AS CatSno FROM modifiedroutes INNER JOIN modifiedroutesubtable ON modifiedroutes.Sno = modifiedroutesubtable.RefNo INNER JOIN branchdata ON modifiedroutesubtable.BranchID = branchdata.sno INNER JOIN (SELECT IndentNo, Branch_id, I_date FROM  indents WHERE  (I_date BETWEEN @d1 AND @d2)) indent ON branchdata.sno = indent.Branch_id INNER JOIN indents_subtable ON indent.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno INNER JOIN products_subcategory ON products_subcategory.sno = productsdata.SubCat_sno INNER JOIN  products_category ON products_category.sno = products_subcategory.category_sno INNER JOIN tripdata ON indents_subtable.DTripId = tripdata.Sno WHERE (modifiedroutesubtable.EDate IS NULL) AND (modifiedroutesubtable.CDate <= @d1) AND  (modifiedroutes.BranchID IN ('174','527','4607')) AND (products_category.sno=@CatSno) OR (modifiedroutesubtable.EDate > @d1) AND (modifiedroutesubtable.CDate <= @d1) AND (modifiedroutes.BranchID IN ('174','527','4607')) AND (products_category.sno=@CatSno) GROUP BY products_subcategory.sno ORDER BY products_subcategory.sno");
                cmd.Parameters.AddWithValue("@RouteId", BranchID);
                cmd.Parameters.AddWithValue("@CatSno", CatSno);
                cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate.AddDays(-1)));
                cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate.AddDays(-1)));
                dtyesterdayroutesale = vdbmngr.SelectQuery(cmd).Tables[0];
            }
            else
            {
                cmd = new MySqlCommand("SELECT  products_subcategory.sno AS SubCatsno, modifiedroutes.RouteName,modifiedroutes.Sno As RouteId, products_subcategory.SubCatName AS SubCategory, products_category.Categoryname As Category,ROUND(SUM(indents_subtable.DeliveryQty)) AS DeliveryQty, ROUND(SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost)) AS salevalue, products_category.sno AS CatSno FROM modifiedroutes INNER JOIN modifiedroutesubtable ON modifiedroutes.Sno = modifiedroutesubtable.RefNo INNER JOIN branchdata ON modifiedroutesubtable.BranchID = branchdata.sno INNER JOIN (SELECT IndentNo, Branch_id, I_date FROM  indents WHERE  (I_date BETWEEN @d1 AND @d2)) indent ON branchdata.sno = indent.Branch_id INNER JOIN indents_subtable ON indent.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno INNER JOIN products_subcategory ON products_subcategory.sno = productsdata.SubCat_sno INNER JOIN  products_category ON products_category.sno = products_subcategory.category_sno INNER JOIN tripdata ON indents_subtable.DTripId = tripdata.Sno WHERE (modifiedroutesubtable.EDate IS NULL) AND (modifiedroutesubtable.CDate <= @d1) AND  (modifiedroutes.Branchid = @RouteId) AND (products_category.sno=@CatSno) OR (modifiedroutesubtable.EDate > @d1) AND (modifiedroutesubtable.CDate <= @d1) AND (modifiedroutes.Branchid = @RouteId) AND (products_category.sno=@CatSno) GROUP BY products_subcategory.sno ORDER BY products_subcategory.sno");
                cmd.Parameters.AddWithValue("@RouteId", BranchID);
                cmd.Parameters.AddWithValue("@CatSno", CatSno);
                cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate.AddDays(-1)));
                cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate.AddDays(-1)));
                dtyesterdayroutesale = vdbmngr.SelectQuery(cmd).Tables[0];
            }
            cmd = new MySqlCommand("SELECT  sno, salestype, flag, UserData_sno, status, rank, club_code FROM salestypemanagement where (status = 1) ORDER BY salestype DESC");
            cmd.Parameters.AddWithValue("@BranchID", BranchID);
            DataTable dtsalestype = vdbmngr.SelectQuery(cmd).Tables[0];
            dtALL.Merge(dtyesterdayroutesale);
            string cate = ddlbarnchCategory.SelectedItem.Value;
            double yesterdaysum = 0;
            double lastweaksum = 0;
            double lastmonthsum = 0;
            double lastyearsum = 0;
            DataView view = new DataView(dtALL);
            DataTable distincttable = view.ToTable(true, "CatSno", "Category");
            DataTable temptable = new DataTable();
            temptable.Columns.Add("CategoryId");
            temptable.Columns.Add("SubCategoryId");
            temptable.Columns.Add("Category");
            temptable.Columns.Add("SubCategory");
            temptable.Columns.Add("AvgRate");
            temptable.Columns.Add("SaleQty").DataType = typeof(double);
            temptable.Columns.Add("SaleValue").DataType = typeof(double);
            double compare = 0;
            //newrow["SalesType"] = Salestype;
            double daytotal = 0; double weaktotal = 0;
            double monthtotal = 0; double yeartotal = 0;
            double GrandTotQty = 0; double GrandTotValue = 0;
            //DataTable MainReport = new DataTable();
            //MainReport.Columns.Add("RouteId");
            //MainReport.Columns.Add("RouteName");
            foreach (DataRow dramount in distincttable.Rows)
            {
                //DataRow newrow1 = temptable.NewRow();
                //newrow1["Category"] = dramount["Category"].ToString();
                /// newrow1["SubCategory"] = dramount["CatSno"].ToString();
                double qty = 0;
                string type = "";
                int i = 1;
                foreach (DataRow drsubcat in dtyesterdayroutesale.Select("CatSno='" + dramount["CatSno"].ToString() + "'"))
                {
                    DataRow newrow1 = temptable.NewRow();
                    if (i == 1)
                    {
                        newrow1["Category"] = dramount["Category"].ToString();
                        newrow1["CategoryId"] = dramount["CatSno"].ToString();
                    }
                    i++;
                    double dqty = 0;
                    double.TryParse(drsubcat["DeliveryQty"].ToString(), out dqty);
                    double salevalue = 0;
                    double.TryParse(drsubcat["salevalue"].ToString(), out salevalue);
                    GrandTotQty += dqty;
                    GrandTotValue += salevalue;
                    double avgrate = 0;
                    avgrate = salevalue / dqty;
                    newrow1["SubCategoryId"] = drsubcat["SubCatsno"].ToString();
                    newrow1["SubCategory"] = drsubcat["SubCategory"].ToString();
                    newrow1["SaleQty"] = drsubcat["DeliveryQty"].ToString();
                    newrow1["SaleValue"] = drsubcat["salevalue"].ToString();
                    newrow1["AvgRate"] = Math.Round(avgrate);
                    temptable.Rows.Add(newrow1);
                }
            }
            DataRow newvartical = temptable.NewRow();
            newvartical["SubCategory"] = "Total";
            double Avgrate = GrandTotValue / GrandTotQty;
            newvartical["AvgRate"] = Math.Round(Avgrate);
            double val = 0.0;
            foreach (DataColumn dc in temptable.Columns)
            {
                if (dc.DataType == typeof(Double))
                {
                    val = 0.0;
                    double.TryParse(temptable.Compute("sum([" + dc.ToString() + "])", "[" + dc.ToString() + "]<>'0'").ToString(), out val);
                    newvartical[dc.ToString()] = val;
                }
            }
            temptable.Rows.Add(newvartical);
            grdSalesOfficeSubCategoryReport.DataSource = temptable;
            grdSalesOfficeSubCategoryReport.DataBind();
        }
        catch (Exception ex)
        {
        }
    }
    protected void grdRouteUnderCategory_RowCommand(object sender, GridViewCommandEventArgs e)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            // DateTime fromdate = DateTime.Now;
            DataTable Report = new DataTable();
            //DateTime todate = VehicleDBMgr.GetTime(vdbmngr.conn);
            //DateTime frmdate = todate.AddDays(-15);


            string s = Session["IndDate"].ToString();
            var dt = DateTime.ParseExact(s, "ddd MMM dd yyyy HH:mm:ss 'GMT'zzz", System.Globalization.CultureInfo.InvariantCulture);
            string IndDate = dt.ToString("yyyy-MM-dd");
            DateTime ServerDateCurrentdate = Convert.ToDateTime(IndDate);
            DateTime FromDate = ServerDateCurrentdate;
            string edate = Session["Todate"].ToString();
            var edt = DateTime.ParseExact(edate, "ddd MMM dd yyyy HH:mm:ss 'GMT'zzz", System.Globalization.CultureInfo.InvariantCulture);
            string Tdate = edt.ToString("yyyy-MM-dd");
            DateTime To_Date = Convert.ToDateTime(Tdate);
            DateTime ToDate = To_Date;



            int rowIndex = Convert.ToInt32(e.CommandArgument);
            GridViewRow row = grdRouteUnderCategory.Rows[rowIndex];
            string BranchID = Session["Click_Route_id"].ToString();
            // string agentid = row.Cells[2].Text;
            string subcategoryid = row.Cells[2].Text;
            // string ROUTEID = Session["Clickrouteid"].ToString();
            //Session["Agentid"] = agentid;
            //Session["AgentName"] = AgentName;
            //Session["FromDate"] = frmdate.AddDays(-1).ToString("dd/MMM/yy");
            //Session["To_Date"] = todate.AddDays(-1).ToString("dd/MMM/yy");
            divHide1.Style.Add("display", "block");
            divMainAgentUnderCategoryProduct.Style.Add("display", "block");
            string vall = ViewState["Val"].ToString();
            cmd = new MySqlCommand("SELECT    branchdata.sno, branchdata.BranchName, indents_subtable.Product_sno, productsdata.ProductName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty, ROUND(SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost), 2) AS salevalue, products_category.sno AS CatSno FROM modifiedroutes INNER JOIN modifiedroutesubtable ON modifiedroutes.Sno = modifiedroutesubtable.RefNo INNER JOIN branchdata ON modifiedroutesubtable.BranchID = branchdata.sno INNER JOIN (SELECT  IndentNo, Branch_id, I_date FROM  indents WHERE  (I_date BETWEEN @d1 AND @d2)) indent ON branchdata.sno = indent.Branch_id INNER JOIN indents_subtable ON indent.IndentNo = indents_subtable.IndentNo INNER JOIN  productsdata ON indents_subtable.Product_sno = productsdata.sno INNER JOIN products_subcategory ON products_subcategory.sno = productsdata.SubCat_sno INNER JOIN products_category ON products_category.sno = products_subcategory.category_sno INNER JOIN tripdata ON indents_subtable.DTripId = tripdata.Sno WHERE  (modifiedroutesubtable.EDate IS NULL) AND (modifiedroutesubtable.CDate <= @d1) AND (products_subcategory.sno = @subcategoryid) AND (modifiedroutes.Sno = @BranchID) OR (modifiedroutesubtable.EDate > @d1) AND (modifiedroutesubtable.CDate <= @d1) AND (products_subcategory.sno = @subcategoryid) AND (modifiedroutes.Sno = @BranchID) GROUP BY branchdata.sno");
            cmd.Parameters.AddWithValue("@BranchID", BranchID);
            cmd.Parameters.AddWithValue("@subcategoryid", subcategoryid);
            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate.AddDays(-1)));
            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate.AddDays(-1)));
            DataTable dtAgent = vdbmngr.SelectQuery(cmd).Tables[0];
            DataTable temptable = new DataTable();
            //temptable.Columns.Add("AgentId");
            temptable.Columns.Add("AgentName");
            temptable.Columns.Add("ProductName");
            temptable.Columns.Add("SaleQty").DataType = typeof(double); ;
            temptable.Columns.Add("SaleValue").DataType = typeof(double); ;
            if (dtAgent.Rows.Count > 0)
            {
                foreach (DataRow dramount in dtAgent.Rows)
                {
                    //DataRow newrow1 = temptable.NewRow();
                    //newrow1["Category"] = dramount["Category"].ToString();
                    /// newrow1["SubCategory"] = dramount["CatSno"].ToString();
                    double qty = 0;
                    string type = "";
                    int i = 1;
                    DataRow newrow1 = temptable.NewRow();

                    double dqty = 0;
                    double.TryParse(dramount["DeliveryQty"].ToString(), out dqty);
                    double salevalue = 0;
                    double.TryParse(dramount["salevalue"].ToString(), out salevalue);
                    double avgrate = 0;
                    avgrate = salevalue / dqty;
                    // newrow1["AgentId"] = dramount["sno"].ToString();
                    newrow1["AgentName"] = dramount["BranchName"].ToString();
                    newrow1["ProductName"] = dramount["ProductName"].ToString();
                    newrow1["SaleQty"] = dramount["DeliveryQty"].ToString();
                    newrow1["SaleValue"] = dramount["salevalue"].ToString();
                    temptable.Rows.Add(newrow1);
                }
                DataRow newvartical = temptable.NewRow();
                newvartical["ProductName"] = "Total";
                double val = 0.0;
                foreach (DataColumn dc in temptable.Columns)
                {
                    if (dc.DataType == typeof(Double))
                    {
                        val = 0.0;
                        double.TryParse(temptable.Compute("sum([" + dc.ToString() + "])", "[" + dc.ToString() + "]<>'0'").ToString(), out val);
                        newvartical[dc.ToString()] = val;
                    }
                }
                temptable.Rows.Add(newvartical);
                grdAgentUnderCategoryProduct.DataSource = temptable;
                grdAgentUnderCategoryProduct.DataBind();
            }
        }
        catch (Exception ex)
        {
        }
    }
    private DateTime GetLowMonthRetrive(DateTime dt)
    {
        double Day, Hour, Min, Sec;
        DateTime DT = dt;
        DT = dt;
        Day = -dt.Day + 1;
        Hour = -dt.Hour;
        Min = -dt.Minute;
        Sec = -dt.Second;
        DT = DT.AddDays(Day);
        DT = DT.AddHours(Hour);
        DT = DT.AddMinutes(Min);
        DT = DT.AddSeconds(Sec);
        return DT;

    }
    private DateTime GetHighMonth(DateTime dt)
    {
        double Day, Hour, Min, Sec;
        DateTime DT = DateTime.Now;
        Day = 31 - dt.Day;
        Hour = 23 - dt.Hour;
        Min = 59 - dt.Minute;
        Sec = 59 - dt.Second;
        DT = dt;
        DT = DT.AddDays(Day);
        DT = DT.AddHours(Hour);
        DT = DT.AddMinutes(Min);
        DT = DT.AddSeconds(Sec);
        if (DT.Day == 3)
        {
            DT = DT.AddDays(-3);
        }
        else if (DT.Day == 2)
        {
            DT = DT.AddDays(-2);
        }
        else if (DT.Day == 1)
        {
            DT = DT.AddDays(-1);
        }
        return DT;
    }
    protected void grddata_RowCreated(object sender, GridViewRowEventArgs e)
    {
        // Adding a column manually once the header created
        if (e.Row.RowType == DataControlRowType.Header) // If header created
        {
            GridView ProductGrid = (GridView)sender;
            // Creating a Row
            GridViewRow HeaderRow = new GridViewRow(0, 0, DataControlRowType.Header, DataControlRowState.Insert);
            //Adding Year Column
            TableCell HeaderCell = new TableCell();
            HeaderCell.Text = "";
            HeaderCell.HorizontalAlign = HorizontalAlign.Center;
            HeaderCell.ColumnSpan = 1; // For merging first, second row cells to one
            HeaderCell.CssClass = "HeaderStyle";
            HeaderRow.Cells.Add(HeaderCell);

            HeaderCell = new TableCell();
            HeaderCell.Text = "";
            HeaderCell.HorizontalAlign = HorizontalAlign.Center;
            HeaderCell.ColumnSpan = 1; // For merging first, second row cells to one
            HeaderCell.CssClass = "HeaderStyle";
            HeaderRow.Cells.Add(HeaderCell);

            //Adding Period Column


            //Adding Audited By Column


            //Adding Revenue Column
            HeaderCell = new TableCell();
            HeaderCell.Text = "Yester Day";
            HeaderCell.HorizontalAlign = HorizontalAlign.Center;
            HeaderCell.ColumnSpan = 3; // For merging three columns (Direct, Referral, Total)
            HeaderCell.CssClass = "HeaderStyle";
            HeaderRow.Cells.Add(HeaderCell);
            HeaderCell = new TableCell();
            HeaderCell.Text = "Last Weak";
            HeaderCell.HorizontalAlign = HorizontalAlign.Center;
            HeaderCell.ColumnSpan = 4; // For merging three columns (Direct, Referral, Total)
            HeaderCell.CssClass = "HeaderStyle";
            HeaderRow.Cells.Add(HeaderCell);
            HeaderCell = new TableCell();
            HeaderCell.Text = "Last Month";
            HeaderCell.HorizontalAlign = HorizontalAlign.Center;
            HeaderCell.ColumnSpan = 3; // For merging three columns (Direct, Referral, Total)
            HeaderCell.CssClass = "HeaderStyle";
            HeaderRow.Cells.Add(HeaderCell);
            HeaderCell = new TableCell();
            HeaderCell.Text = "LastYear";
            HeaderCell.HorizontalAlign = HorizontalAlign.Center;
            HeaderCell.ColumnSpan = 4; // For merging three columns (Direct, Referral, Total)
            HeaderCell.CssClass = "HeaderStyle";
            HeaderRow.Cells.Add(HeaderCell);
            //Adding the Row at the 0th position (first row) in the Grid
            ProductGrid.Controls[0].Controls.AddAt(0, HeaderRow);
        }
    }
    protected void grdBranchReport_RowCreated(object sender, GridViewRowEventArgs e)
    {
        // Adding a column manually once the header created
        string val = ViewState["Val"].ToString();
        if (e.Row.RowType == DataControlRowType.Header) // If header created
        {
            if (val == "btnclick")
            {

            }
            else
            {
                GridView ProductGrid = (GridView)sender;
                GridViewRow HeaderRow = new GridViewRow(0, 0, DataControlRowType.Header, DataControlRowState.Insert);
                //Adding Year Column
                TableCell HeaderCell = new TableCell();
                HeaderCell.Text = "";
                HeaderCell.HorizontalAlign = HorizontalAlign.Center;
                HeaderCell.ColumnSpan = 1; // For merging first, second row cells to one
                HeaderCell.CssClass = "HeaderStyle";
                HeaderRow.Cells.Add(HeaderCell);

                HeaderCell = new TableCell();
                HeaderCell.Text = "";
                HeaderCell.HorizontalAlign = HorizontalAlign.Center;
                HeaderCell.ColumnSpan = 1; // For merging first, second row cells to one
                HeaderCell.CssClass = "HeaderStyle";
                HeaderRow.Cells.Add(HeaderCell);

                //Adding Period Column


                //Adding Audited By Column


                //Adding Revenue Column
                HeaderCell = new TableCell();
                HeaderCell.Text = "Yester Day";
                HeaderCell.HorizontalAlign = HorizontalAlign.Center;
                HeaderCell.ColumnSpan = 3; // For merging three columns (Direct, Referral, Total)
                HeaderCell.CssClass = "HeaderStyle";
                HeaderRow.Cells.Add(HeaderCell);
                HeaderCell = new TableCell();
                HeaderCell.Text = "Last Weak";
                HeaderCell.HorizontalAlign = HorizontalAlign.Center;
                HeaderCell.ColumnSpan = 3; // For merging three columns (Direct, Referral, Total)
                HeaderCell.CssClass = "HeaderStyle";
                HeaderRow.Cells.Add(HeaderCell);
                HeaderCell = new TableCell();
                HeaderCell.Text = "Last Month";
                HeaderCell.HorizontalAlign = HorizontalAlign.Center;
                HeaderCell.ColumnSpan = 3; // For merging three columns (Direct, Referral, Total)
                HeaderCell.CssClass = "HeaderStyle";
                HeaderRow.Cells.Add(HeaderCell);
                HeaderCell = new TableCell();
                HeaderCell.Text = "LastYear";
                HeaderCell.HorizontalAlign = HorizontalAlign.Center;
                HeaderCell.ColumnSpan = 3; // For merging three columns (Direct, Referral, Total)
                HeaderCell.CssClass = "HeaderStyle";
                HeaderRow.Cells.Add(HeaderCell);
                //Adding the Row at the 0th position (first row) in the Grid
                ProductGrid.Controls[0].Controls.AddAt(0, HeaderRow);
            }
        }
    }
    protected void grdRouteReport_RowCreated(object sender, GridViewRowEventArgs e)
    {
        // Adding a column manually once the header created
        if (e.Row.RowType == DataControlRowType.Header) // If header created
        {
            string val = ViewState["Val"].ToString();
            if (val != "btnclick")
            {
                GridView ProductGrid = (GridView)sender;
                // Creating a Row
                GridViewRow HeaderRow = new GridViewRow(0, 0, DataControlRowType.Header, DataControlRowState.Insert);
                //Adding Year Column
                TableCell HeaderCell = new TableCell();
                HeaderCell.Text = "";
                HeaderCell.HorizontalAlign = HorizontalAlign.Center;
                HeaderCell.ColumnSpan = 1; // For merging first, second row cells to one
                HeaderCell.CssClass = "HeaderStyle";
                HeaderRow.Cells.Add(HeaderCell);

                HeaderCell = new TableCell();
                HeaderCell.Text = "";
                HeaderCell.HorizontalAlign = HorizontalAlign.Center;
                HeaderCell.ColumnSpan = 1; // For merging first, second row cells to one
                HeaderCell.CssClass = "HeaderStyle";
                HeaderRow.Cells.Add(HeaderCell);

                //Adding Period Column


                //Adding Audited By Column


                //Adding Revenue Column
                HeaderCell = new TableCell();
                HeaderCell.Text = "Yester Day";
                HeaderCell.HorizontalAlign = HorizontalAlign.Center;
                HeaderCell.ColumnSpan = 3; // For merging three columns (Direct, Referral, Total)
                HeaderCell.CssClass = "HeaderStyle";
                HeaderRow.Cells.Add(HeaderCell);
                HeaderCell = new TableCell();
                HeaderCell.Text = "Last Weak";
                HeaderCell.HorizontalAlign = HorizontalAlign.Center;
                HeaderCell.ColumnSpan = 3; // For merging three columns (Direct, Referral, Total)
                HeaderCell.CssClass = "HeaderStyle";
                HeaderRow.Cells.Add(HeaderCell);
                HeaderCell = new TableCell();
                HeaderCell.Text = "Last Month";
                HeaderCell.HorizontalAlign = HorizontalAlign.Center;
                HeaderCell.ColumnSpan = 3; // For merging three columns (Direct, Referral, Total)
                HeaderCell.CssClass = "HeaderStyle";
                HeaderRow.Cells.Add(HeaderCell);
                HeaderCell = new TableCell();
                HeaderCell.Text = "LastYear";
                HeaderCell.HorizontalAlign = HorizontalAlign.Center;
                HeaderCell.ColumnSpan = 3; // For merging three columns (Direct, Referral, Total)
                HeaderCell.CssClass = "HeaderStyle";
                HeaderRow.Cells.Add(HeaderCell);
                //Adding the Row at the 0th position (first row) in the Grid
                ProductGrid.Controls[0].Controls.AddAt(0, HeaderRow);
            }
            else
            {
                //GridView ProductGrid = (GridView)sender;
                //// Creating a Row
                //GridViewRow HeaderRow = new GridViewRow(0, 0, DataControlRowType.Header, DataControlRowState.Insert);
                ////Adding Year Column
                //TableCell HeaderCell = new TableCell();
                //HeaderCell.Text = "";
                //HeaderCell.HorizontalAlign = HorizontalAlign.Center;
                //HeaderCell.ColumnSpan = 1; // For merging first, second row cells to one
                //HeaderCell.CssClass = "HeaderStyle";
                //HeaderRow.Cells.Add(HeaderCell);

                //HeaderCell = new TableCell();
                //HeaderCell.Text = "";
                //HeaderCell.HorizontalAlign = HorizontalAlign.Center;
                //HeaderCell.ColumnSpan = 1; // For merging first, second row cells to one
                //HeaderCell.CssClass = "HeaderStyle";
                //HeaderRow.Cells.Add(HeaderCell);
                //ProductGrid.Controls[0].Controls.AddAt(0, HeaderRow);
            }
        }
    }
    protected void grdAgentReport_RowCreated(object sender, GridViewRowEventArgs e)
    {
        // Adding a column manually once the header created
        if (e.Row.RowType == DataControlRowType.Header) // If header created
        {
            string val = ViewState["Val"].ToString();
            if (val != "btnclick")
            {
                GridView ProductGrid = (GridView)sender;
                // Creating a Row
                GridViewRow HeaderRow = new GridViewRow(0, 0, DataControlRowType.Header, DataControlRowState.Insert);
                //Adding Year Column
                TableCell HeaderCell = new TableCell();
                HeaderCell.Text = "";
                HeaderCell.HorizontalAlign = HorizontalAlign.Center;
                HeaderCell.ColumnSpan = 1; // For merging first, second row cells to one
                HeaderCell.CssClass = "HeaderStyle";
                HeaderRow.Cells.Add(HeaderCell);

                HeaderCell = new TableCell();
                HeaderCell.Text = "";
                HeaderCell.HorizontalAlign = HorizontalAlign.Center;
                HeaderCell.ColumnSpan = 1; // For merging first, second row cells to one
                HeaderCell.CssClass = "HeaderStyle";
                HeaderRow.Cells.Add(HeaderCell);

                //Adding Period Column


                //Adding Audited By Column


                //Adding Revenue Column
                HeaderCell = new TableCell();
                HeaderCell.Text = "Yester Day";
                HeaderCell.HorizontalAlign = HorizontalAlign.Center;
                HeaderCell.ColumnSpan = 3; // For merging three columns (Direct, Referral, Total)
                HeaderCell.CssClass = "HeaderStyle";
                HeaderRow.Cells.Add(HeaderCell);
                HeaderCell = new TableCell();
                HeaderCell.Text = "Last Weak";
                HeaderCell.HorizontalAlign = HorizontalAlign.Center;
                HeaderCell.ColumnSpan = 3; // For merging three columns (Direct, Referral, Total)
                HeaderCell.CssClass = "HeaderStyle";
                HeaderRow.Cells.Add(HeaderCell);
                HeaderCell = new TableCell();
                HeaderCell.Text = "Last Month";
                HeaderCell.HorizontalAlign = HorizontalAlign.Center;
                HeaderCell.ColumnSpan = 3; // For merging three columns (Direct, Referral, Total)
                HeaderCell.CssClass = "HeaderStyle";
                HeaderRow.Cells.Add(HeaderCell);
                HeaderCell = new TableCell();
                HeaderCell.Text = "LastYear";
                HeaderCell.HorizontalAlign = HorizontalAlign.Center;
                HeaderCell.ColumnSpan = 3; // For merging three columns (Direct, Referral, Total)
                HeaderCell.CssClass = "HeaderStyle";
                HeaderRow.Cells.Add(HeaderCell);
                //Adding the Row at the 0th position (first row) in the Grid
                ProductGrid.Controls[0].Controls.AddAt(0, HeaderRow);
            }
        }
    }
    protected void grdnewroute_RowCreated(object sender, GridViewRowEventArgs e)
    {
        // Adding a column manually once the header created
        if (e.Row.RowType == DataControlRowType.Header) // If header created
        {
            string val = ViewState["Val"].ToString();
            if (val != "btnclick")
            {
                GridView ProductGrid = (GridView)sender;
                // Creating a Row
                GridViewRow HeaderRow = new GridViewRow(0, 0, DataControlRowType.Header, DataControlRowState.Insert);
                //Adding Year Column
                TableCell HeaderCell = new TableCell();
                HeaderCell.Text = "";
                HeaderCell.HorizontalAlign = HorizontalAlign.Center;
                HeaderCell.ColumnSpan = 1; // For merging first, second row cells to one
                HeaderCell.CssClass = "HeaderStyle";
                HeaderRow.Cells.Add(HeaderCell);

                HeaderCell = new TableCell();
                HeaderCell.Text = "";
                HeaderCell.HorizontalAlign = HorizontalAlign.Center;
                HeaderCell.ColumnSpan = 1; // For merging first, second row cells to one
                HeaderCell.CssClass = "HeaderStyle";
                HeaderRow.Cells.Add(HeaderCell);

                //Adding Period Column


                //Adding Audited By Column


                //Adding Revenue Column
                HeaderCell = new TableCell();
                HeaderCell.Text = "Yester Day";
                HeaderCell.HorizontalAlign = HorizontalAlign.Center;
                HeaderCell.ColumnSpan = 3; // For merging three columns (Direct, Referral, Total)
                HeaderCell.CssClass = "HeaderStyle";
                HeaderRow.Cells.Add(HeaderCell);
                HeaderCell = new TableCell();
                HeaderCell.Text = "Last Weak";
                HeaderCell.HorizontalAlign = HorizontalAlign.Center;
                HeaderCell.ColumnSpan = 3; // For merging three columns (Direct, Referral, Total)
                HeaderCell.CssClass = "HeaderStyle";
                HeaderRow.Cells.Add(HeaderCell);
                HeaderCell = new TableCell();
                HeaderCell.Text = "Last Month";
                HeaderCell.HorizontalAlign = HorizontalAlign.Center;
                HeaderCell.ColumnSpan = 3; // For merging three columns (Direct, Referral, Total)
                HeaderCell.CssClass = "HeaderStyle";
                HeaderRow.Cells.Add(HeaderCell);
                HeaderCell = new TableCell();
                HeaderCell.Text = "LastYear";
                HeaderCell.HorizontalAlign = HorizontalAlign.Center;
                HeaderCell.ColumnSpan = 3; // For merging three columns (Direct, Referral, Total)
                HeaderCell.CssClass = "HeaderStyle";
                HeaderRow.Cells.Add(HeaderCell);
                //Adding the Row at the 0th position (first row) in the Grid
                ProductGrid.Controls[0].Controls.AddAt(0, HeaderRow);
            }
            else
            {
                //GridView ProductGrid = (GridView)sender;
                //// Creating a Row
                //GridViewRow HeaderRow = new GridViewRow(0, 0, DataControlRowType.Header, DataControlRowState.Insert);
                ////Adding Year Column
                //TableCell HeaderCell = new TableCell();
                //HeaderCell.Text = "";
                //HeaderCell.HorizontalAlign = HorizontalAlign.Center;
                //HeaderCell.ColumnSpan = 1; // For merging first, second row cells to one
                //HeaderCell.CssClass = "HeaderStyle";
                //HeaderRow.Cells.Add(HeaderCell);

                //HeaderCell = new TableCell();
                //HeaderCell.Text = "";
                //HeaderCell.HorizontalAlign = HorizontalAlign.Center;
                //HeaderCell.ColumnSpan = 1; // For merging first, second row cells to one
                //HeaderCell.CssClass = "HeaderStyle";
                //HeaderRow.Cells.Add(HeaderCell);

                //HeaderCell = new TableCell();
                //HeaderCell.Text = "";
                //HeaderCell.HorizontalAlign = HorizontalAlign.Center;
                //HeaderCell.ColumnSpan = 1; // For merging first, second row cells to one
                //HeaderCell.CssClass = "HeaderStyle";
                //HeaderRow.Cells.Add(HeaderCell);

                //HeaderCell = new TableCell();
                //HeaderCell.Text = "";
                //HeaderCell.HorizontalAlign = HorizontalAlign.Center;
                //HeaderCell.ColumnSpan = 1; // For merging first, second row cells to one
                //HeaderCell.CssClass = "HeaderStyle";
                //HeaderRow.Cells.Add(HeaderCell); 

                //HeaderCell = new TableCell();
                //HeaderCell.Text = "";
                //HeaderCell.HorizontalAlign = HorizontalAlign.Center;
                //HeaderCell.ColumnSpan = 1; // For merging first, second row cells to one
                //HeaderCell.CssClass = "HeaderStyle";
                //HeaderRow.Cells.Add(HeaderCell);
                //ProductGrid.Controls[0].Controls.AddAt(0, HeaderRow);
            }
        }
    }
    protected void grdRouteUnderSalesType_RowCreated(object sender, GridViewRowEventArgs e)
    {
        // Adding a column manually once the header created
        if (e.Row.RowType == DataControlRowType.Header) // If header created
        {
            GridView ProductGrid = (GridView)sender;
            // Creating a Row
            GridViewRow HeaderRow = new GridViewRow(0, 0, DataControlRowType.Header, DataControlRowState.Insert);
            //Adding Year Column
            TableCell HeaderCell = new TableCell();
            HeaderCell.Text = "";
            HeaderCell.HorizontalAlign = HorizontalAlign.Center;
            HeaderCell.ColumnSpan = 1; // For merging first, second row cells to one
            HeaderCell.CssClass = "HeaderStyle";
            HeaderRow.Cells.Add(HeaderCell);
            HeaderCell = new TableCell();
            HeaderCell.Text = "";
            HeaderCell.HorizontalAlign = HorizontalAlign.Center;
            HeaderCell.ColumnSpan = 1; // For merging first, second row cells to one
            HeaderCell.CssClass = "HeaderStyle";
            HeaderRow.Cells.Add(HeaderCell);
            //Adding Period Column
            //Adding Audited By Column
            //Adding Revenue Column
            HeaderCell = new TableCell();
            HeaderCell.Text = "Yester Day";
            HeaderCell.HorizontalAlign = HorizontalAlign.Center;
            HeaderCell.ColumnSpan = 3; // For merging three columns (Direct, Referral, Total)
            HeaderCell.CssClass = "HeaderStyle";
            HeaderRow.Cells.Add(HeaderCell);
            HeaderCell = new TableCell();
            HeaderCell.Text = "Last Weak";
            HeaderCell.HorizontalAlign = HorizontalAlign.Center;
            HeaderCell.ColumnSpan = 3; // For merging three columns (Direct, Referral, Total)
            HeaderCell.CssClass = "HeaderStyle";
            HeaderRow.Cells.Add(HeaderCell);
            HeaderCell = new TableCell();
            HeaderCell.Text = "Last Month";
            HeaderCell.HorizontalAlign = HorizontalAlign.Center;
            HeaderCell.ColumnSpan = 3; // For merging three columns (Direct, Referral, Total)
            HeaderCell.CssClass = "HeaderStyle";
            HeaderRow.Cells.Add(HeaderCell);
            HeaderCell = new TableCell();
            HeaderCell.Text = "LastYear";
            HeaderCell.HorizontalAlign = HorizontalAlign.Center;
            HeaderCell.ColumnSpan = 3; // For merging three columns (Direct, Referral, Total)
            HeaderCell.CssClass = "HeaderStyle";
            HeaderRow.Cells.Add(HeaderCell);
            //Adding the Row at the 0th position (first row) in the Grid
            ProductGrid.Controls[0].Controls.AddAt(0, HeaderRow);
        }
    }
    protected void grdRouteWiseUnderSalesType_RowCreated(object sender, GridViewRowEventArgs e)
    {
        // Adding a column manually once the header created
        if (e.Row.RowType == DataControlRowType.Header) // If header created
        {
            GridView ProductGrid = (GridView)sender;
            // Creating a Row
            GridViewRow HeaderRow = new GridViewRow(0, 0, DataControlRowType.Header, DataControlRowState.Insert);
            //Adding Year Column
            TableCell HeaderCell = new TableCell();
            HeaderCell.Text = "";
            HeaderCell.HorizontalAlign = HorizontalAlign.Center;
            HeaderCell.ColumnSpan = 1; // For merging first, second row cells to one
            HeaderCell.CssClass = "HeaderStyle";
            HeaderRow.Cells.Add(HeaderCell);
            HeaderCell = new TableCell();
            HeaderCell.Text = "";
            HeaderCell.HorizontalAlign = HorizontalAlign.Center;
            HeaderCell.ColumnSpan = 1; // For merging first, second row cells to one
            HeaderCell.CssClass = "HeaderStyle";
            HeaderRow.Cells.Add(HeaderCell);
            //Adding Period Column
            //Adding Audited By Column
            //Adding Revenue Column
            HeaderCell = new TableCell();
            HeaderCell.Text = "Yester Day";
            HeaderCell.HorizontalAlign = HorizontalAlign.Center;
            HeaderCell.ColumnSpan = 3; // For merging three columns (Direct, Referral, Total)
            HeaderCell.CssClass = "HeaderStyle";
            HeaderRow.Cells.Add(HeaderCell);
            HeaderCell = new TableCell();
            HeaderCell.Text = "Last Weak";
            HeaderCell.HorizontalAlign = HorizontalAlign.Center;
            HeaderCell.ColumnSpan = 3; // For merging three columns (Direct, Referral, Total)
            HeaderCell.CssClass = "HeaderStyle";
            HeaderRow.Cells.Add(HeaderCell);
            HeaderCell = new TableCell();
            HeaderCell.Text = "Last Month";
            HeaderCell.HorizontalAlign = HorizontalAlign.Center;
            HeaderCell.ColumnSpan = 3; // For merging three columns (Direct, Referral, Total)
            HeaderCell.CssClass = "HeaderStyle";
            HeaderRow.Cells.Add(HeaderCell);
            HeaderCell = new TableCell();
            HeaderCell.Text = "LastYear";
            HeaderCell.HorizontalAlign = HorizontalAlign.Center;
            HeaderCell.ColumnSpan = 3; // For merging three columns (Direct, Referral, Total)
            HeaderCell.CssClass = "HeaderStyle";
            HeaderRow.Cells.Add(HeaderCell);
            //Adding the Row at the 0th position (first row) in the Grid
            ProductGrid.Controls[0].Controls.AddAt(0, HeaderRow);
        }
    }
    protected void grddata_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        e.Row.Cells[1].Visible = false;
        if (e.Row.RowType == DataControlRowType.DataRow)
        {

            if (e.Row.Cells[2].Text == "Total")
            {
                System.Web.UI.WebControls.Button status = (System.Web.UI.WebControls.Button)e.Row.FindControl("Button1");
                status.Visible = false;
            }
            if (e.Row.Cells[2].Text == "Total")
            {
                e.Row.BackColor = System.Drawing.Color.CadetBlue;
                e.Row.Font.Size = FontUnit.Large;
                e.Row.ForeColor = Color.White;
                e.Row.Font.Bold = true;
            }
            if (e.Row.Cells[8].Text == "+")
            {
                e.Row.Cells[8].ForeColor = Color.Green;
                e.Row.Cells[8].Font.Size = FontUnit.Large;
                e.Row.Cells[8].Font.Bold = true;
            }
            if (e.Row.Cells[8].Text == "-")
            {
                e.Row.Cells[8].ForeColor = Color.Red;
                e.Row.Cells[8].Font.Size = FontUnit.XXLarge;
                e.Row.Cells[8].Font.Bold = true;
                e.Row.Cells[8].BackColor = Color.AliceBlue;
            }

            if (e.Row.Cells[12].Text == "+")
            {
                e.Row.Cells[12].ForeColor = Color.Green;
                e.Row.Cells[12].Font.Size = FontUnit.Large;
                e.Row.Cells[12].Font.Bold = true;
            }
            if (e.Row.Cells[12].Text == "-")
            {
                e.Row.Cells[12].ForeColor = Color.Red;
                e.Row.Cells[12].Font.Size = FontUnit.XXLarge;
                e.Row.Cells[12].Font.Bold = true;
                e.Row.Cells[12].BackColor = Color.AliceBlue;
            }

            if (e.Row.Cells[15].Text == "+")
            {
                e.Row.Cells[15].ForeColor = Color.Green;
                e.Row.Cells[15].Font.Size = FontUnit.Large;
                e.Row.Cells[15].Font.Bold = true;
            }
            if (e.Row.Cells[15].Text == "-")
            {
                e.Row.Cells[15].ForeColor = Color.Red;
                e.Row.Cells[15].Font.Size = FontUnit.XXLarge;
                e.Row.Cells[15].Font.Bold = true;
                e.Row.Cells[15].BackColor = Color.AliceBlue;
            }

        }

    }
    protected void grdBranchReport_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        string val = ViewState["Val"].ToString();
        e.Row.Cells[1].Visible = false;
        if (e.Row.RowType == DataControlRowType.DataRow)
        {
            if (val == "btnclick")
            {
                //e.Row.Cells[2].Visible = false;
                if (e.Row.Cells[2].Text == "Total")
                {
                    System.Web.UI.WebControls.Button status = (System.Web.UI.WebControls.Button)e.Row.FindControl("Button2");
                    status.Visible = false;
                }
                if (e.Row.Cells[2].Text == "Total")
                {
                    e.Row.BackColor = System.Drawing.Color.CadetBlue;
                    e.Row.Font.Size = FontUnit.Large;
                    e.Row.ForeColor = Color.White;
                    e.Row.Font.Bold = true;
                }
                if (e.Row.Cells[2].Text == "Grand Total")
                {
                    System.Web.UI.WebControls.Button status = (System.Web.UI.WebControls.Button)e.Row.FindControl("Button2");
                    status.Visible = false;
                    e.Row.BackColor = System.Drawing.Color.CadetBlue;
                    e.Row.Font.Size = FontUnit.Large;
                    e.Row.ForeColor = Color.White;
                    e.Row.Font.Bold = true;
                }
            }
            else
            {
                if (e.Row.Cells[2].Text == "Total")
                {
                    System.Web.UI.WebControls.Button status = (System.Web.UI.WebControls.Button)e.Row.FindControl("Button2");
                    status.Visible = false;
                }
                if (e.Row.Cells[8].Text == "+")
                {
                    e.Row.Cells[8].ForeColor = Color.Green;
                    e.Row.Cells[8].Font.Size = FontUnit.Large;
                    e.Row.Cells[8].Font.Bold = true;
                }
                if (e.Row.Cells[8].Text == "-")
                {
                    e.Row.Cells[8].ForeColor = Color.Red;
                    e.Row.Cells[8].Font.Size = FontUnit.Large;
                    e.Row.Cells[8].Font.Bold = true;
                    e.Row.Cells[8].BackColor = Color.AliceBlue;
                }
                if (e.Row.Cells[11].Text == "+")
                {
                    e.Row.Cells[11].ForeColor = Color.Green;
                    e.Row.Cells[11].Font.Size = FontUnit.Large;
                    e.Row.Cells[11].Font.Bold = true;
                }
                if (e.Row.Cells[11].Text == "-")
                {
                    e.Row.Cells[11].ForeColor = Color.Red;
                    e.Row.Cells[11].Font.Size = FontUnit.Large;
                    e.Row.Cells[11].Font.Bold = true;
                    e.Row.Cells[11].BackColor = Color.AliceBlue;
                }
                if (e.Row.Cells[14].Text == "+")
                {
                    e.Row.Cells[14].ForeColor = Color.Green;
                    e.Row.Cells[14].Font.Size = FontUnit.Large;
                    e.Row.Cells[14].Font.Bold = true;
                }
                if (e.Row.Cells[14].Text == "-")
                {
                    e.Row.Cells[14].ForeColor = Color.Red;
                    e.Row.Cells[14].Font.Size = FontUnit.Large;
                    e.Row.Cells[14].Font.Bold = true;
                    e.Row.Cells[14].BackColor = Color.AliceBlue;
                }
            }
        }
    }
    protected void GrdRouteSalesType_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        e.Row.Cells[1].Visible = false;
        // e.Row.Cells[3].Visible = false;
        if (e.Row.RowType == DataControlRowType.DataRow)
        {
            if (e.Row.Cells[2].Text == "Total")
            {
                System.Web.UI.WebControls.Button status = (System.Web.UI.WebControls.Button)e.Row.FindControl("Button11");
                status.Visible = false;
            }
            if (e.Row.Cells[2].Text == "Total")
            {
                e.Row.BackColor = System.Drawing.Color.CadetBlue;
                e.Row.Font.Size = FontUnit.Large;
                e.Row.ForeColor = Color.White;
                e.Row.Font.Bold = true;
            }
        }

    }
    //protected void GrdRouteSalesType_RowDataBound(object sender, GridViewRowEventArgs e)
    //{
    //    e.Row.Cells[1].Visible = false;
    //    // e.Row.Cells[3].Visible = false;
    //    if (e.Row.RowType == DataControlRowType.DataRow)
    //    {
    //        if (e.Row.Cells[2].Text == "Total")
    //        {
    //            System.Web.UI.WebControls.Button status = (System.Web.UI.WebControls.Button)e.Row.FindControl("Button11");
    //            status.Visible = false;
    //        }
    //    }

    //}
    protected void grdRouteUnderSalesType_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        e.Row.Cells[3].Visible = false;
        e.Row.Cells[2].Visible = false;
        if (e.Row.RowType == DataControlRowType.DataRow)
        {
            if (e.Row.Cells[1].Text == "Total")
            {
                System.Web.UI.WebControls.Button status = (System.Web.UI.WebControls.Button)e.Row.FindControl("Button12");
                status.Visible = false;
            }
            if (e.Row.Cells[1].Text == "Total")
            {
                e.Row.BackColor = System.Drawing.Color.CadetBlue;
                e.Row.Font.Size = FontUnit.Large;
                e.Row.ForeColor = Color.White;
                e.Row.Font.Bold = true;
            }
            if (e.Row.Cells[8].Text == "+")
            {
                e.Row.Cells[8].ForeColor = Color.Green;
                e.Row.Cells[8].Font.Size = FontUnit.Large;
                e.Row.Cells[8].Font.Bold = true;
            }
            if (e.Row.Cells[8].Text == "-")
            {
                e.Row.Cells[8].ForeColor = Color.Red;
                e.Row.Cells[8].Font.Size = FontUnit.Large;
                e.Row.Cells[8].Font.Bold = true;
                e.Row.Cells[8].BackColor = Color.AliceBlue;
            }

            if (e.Row.Cells[11].Text == "+")
            {
                e.Row.Cells[11].ForeColor = Color.Green;
                e.Row.Cells[11].Font.Size = FontUnit.Large;
                e.Row.Cells[11].Font.Bold = true;
            }
            if (e.Row.Cells[11].Text == "-")
            {
                e.Row.Cells[11].ForeColor = Color.Red;
                e.Row.Cells[11].Font.Size = FontUnit.Large;
                e.Row.Cells[11].Font.Bold = true;
                e.Row.Cells[11].BackColor = Color.AliceBlue;
            }

            if (e.Row.Cells[14].Text == "+")
            {
                e.Row.Cells[14].ForeColor = Color.Green;
                e.Row.Cells[14].Font.Size = FontUnit.Large;
                e.Row.Cells[14].Font.Bold = true;
            }
            if (e.Row.Cells[14].Text == "-")
            {
                e.Row.Cells[14].ForeColor = Color.Red;
                e.Row.Cells[14].Font.Size = FontUnit.Large;
                e.Row.Cells[14].Font.Bold = true;
                e.Row.Cells[14].BackColor = Color.AliceBlue;
            }

        }
    }
    protected void grdRouteWiseUnderSalesType_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        //e.Row.Cells[3].Visible = false;
        e.Row.Cells[2].Visible = false;
        if (e.Row.RowType == DataControlRowType.DataRow)
        {
            if (e.Row.Cells[1].Text == "Total")
            {
                System.Web.UI.WebControls.Button status = (System.Web.UI.WebControls.Button)e.Row.FindControl("Button13");
                status.Visible = false;
            }
            if (e.Row.Cells[1].Text == "Total")
            {
                e.Row.BackColor = System.Drawing.Color.CadetBlue;
                e.Row.Font.Size = FontUnit.Large;
                e.Row.ForeColor = Color.White;
                e.Row.Font.Bold = true;
            }
            if (e.Row.Cells[8].Text == "+")
            {
                e.Row.Cells[8].ForeColor = Color.Green;
                e.Row.Cells[8].Font.Size = FontUnit.Large;
                e.Row.Cells[8].Font.Bold = true;
            }
            if (e.Row.Cells[8].Text == "-")
            {
                e.Row.Cells[8].ForeColor = Color.Red;
                e.Row.Cells[8].Font.Size = FontUnit.Large;
                e.Row.Cells[8].Font.Bold = true;
                e.Row.Cells[8].BackColor = Color.AliceBlue;
            }

            if (e.Row.Cells[11].Text == "+")
            {
                e.Row.Cells[11].ForeColor = Color.Green;
                e.Row.Cells[11].Font.Size = FontUnit.Large;
                e.Row.Cells[11].Font.Bold = true;
            }
            if (e.Row.Cells[11].Text == "-")
            {
                e.Row.Cells[11].ForeColor = Color.Red;
                e.Row.Cells[11].Font.Size = FontUnit.Large;
                e.Row.Cells[11].Font.Bold = true;
                e.Row.Cells[11].BackColor = Color.AliceBlue;
            }

            if (e.Row.Cells[14].Text == "+")
            {
                e.Row.Cells[14].ForeColor = Color.Green;
                e.Row.Cells[14].Font.Size = FontUnit.Large;
                e.Row.Cells[14].Font.Bold = true;
            }
            if (e.Row.Cells[14].Text == "-")
            {
                e.Row.Cells[14].ForeColor = Color.Red;
                e.Row.Cells[14].Font.Size = FontUnit.Large;
                e.Row.Cells[14].Font.Bold = true;
                e.Row.Cells[14].BackColor = Color.AliceBlue;
            }

        }
    }
    protected void grdRouteReport_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        //e.Row.Cells[2].Visible = true;
        e.Row.Cells[2].Visible = false;
        if (e.Row.RowType == DataControlRowType.DataRow)
        {
            string val = ViewState["Val"].ToString();
            if (val != "btnclick")
            {
                if (e.Row.Cells[1].Text == "Total")
                {
                    System.Web.UI.WebControls.Button status = (System.Web.UI.WebControls.Button)e.Row.FindControl("Button6");
                    status.Visible = false;
                }
                if (e.Row.Cells[1].Text == "Total")
                {
                    e.Row.BackColor = System.Drawing.Color.CadetBlue;
                    e.Row.Font.Size = FontUnit.Large;
                    e.Row.ForeColor = Color.White;
                    e.Row.Font.Bold = true;
                }
                if (e.Row.Cells[8].Text == "+")
                {
                    e.Row.Cells[8].ForeColor = Color.Green;
                    e.Row.Cells[8].Font.Size = FontUnit.Large;
                    e.Row.Cells[8].Font.Bold = true;
                }
                if (e.Row.Cells[8].Text == "-")
                {
                    e.Row.Cells[8].ForeColor = Color.Red;
                    e.Row.Cells[8].Font.Size = FontUnit.Large;
                    e.Row.Cells[8].Font.Bold = true;
                    e.Row.Cells[8].BackColor = Color.AliceBlue;
                }

                if (e.Row.Cells[11].Text == "+")
                {
                    e.Row.Cells[11].ForeColor = Color.Green;
                    e.Row.Cells[11].Font.Size = FontUnit.Large;
                    e.Row.Cells[11].Font.Bold = true;
                }
                if (e.Row.Cells[11].Text == "-")
                {
                    e.Row.Cells[11].ForeColor = Color.Red;
                    e.Row.Cells[11].Font.Size = FontUnit.Large;
                    e.Row.Cells[11].Font.Bold = true;
                    e.Row.Cells[11].BackColor = Color.AliceBlue;
                }

                if (e.Row.Cells[14].Text == "+")
                {
                    e.Row.Cells[14].ForeColor = Color.Green;
                    e.Row.Cells[14].Font.Size = FontUnit.Large;
                    e.Row.Cells[14].Font.Bold = true;
                }
                if (e.Row.Cells[14].Text == "-")
                {
                    e.Row.Cells[14].ForeColor = Color.Red;
                    e.Row.Cells[14].Font.Size = FontUnit.Large;
                    e.Row.Cells[14].Font.Bold = true;
                    e.Row.Cells[14].BackColor = Color.AliceBlue;
                }
            }
            else
            {
                if (e.Row.Cells[1].Text == "Total")
                {
                    System.Web.UI.WebControls.Button status = (System.Web.UI.WebControls.Button)e.Row.FindControl("Button6");
                    status.Visible = false;
                }
                if (e.Row.Cells[1].Text == "Total")
                {
                    e.Row.BackColor = System.Drawing.Color.CadetBlue;
                    e.Row.Font.Size = FontUnit.Large;
                    e.Row.ForeColor = Color.White;
                    e.Row.Font.Bold = true;
                }
            }
        }
    }
    protected void grdnewroute_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        e.Row.Cells[2].Visible = false;
        e.Row.Cells[3].Visible = false;
        if (e.Row.RowType == DataControlRowType.DataRow)
        {
            string val = ViewState["Val"].ToString();
            if (val != "btnclick")
            {
                if (e.Row.Cells[1].Text == "Total")
                {
                    System.Web.UI.WebControls.Button status = (System.Web.UI.WebControls.Button)e.Row.FindControl("Button7");
                    status.Visible = false;
                }
                if (e.Row.Cells[1].Text == "Total")
                {
                    e.Row.BackColor = System.Drawing.Color.CadetBlue;
                    e.Row.Font.Size = FontUnit.Large;
                    e.Row.ForeColor = Color.White;
                    e.Row.Font.Bold = true;
                }
                if (e.Row.Cells[9].Text == "+")
                {
                    e.Row.Cells[9].ForeColor = Color.Green;
                    e.Row.Cells[9].Font.Size = FontUnit.Large;
                    e.Row.Cells[9].Font.Bold = true;
                }
                if (e.Row.Cells[9].Text == "-")
                {
                    e.Row.Cells[9].ForeColor = Color.Red;
                    e.Row.Cells[9].Font.Size = FontUnit.Large;
                    e.Row.Cells[9].Font.Bold = true;
                    e.Row.Cells[9].BackColor = Color.AliceBlue;
                }
                if (e.Row.Cells[12].Text == "+")
                {
                    e.Row.Cells[12].ForeColor = Color.Green;
                    e.Row.Cells[12].Font.Size = FontUnit.Large;
                    e.Row.Cells[12].Font.Bold = true;
                }
                if (e.Row.Cells[12].Text == "-")
                {
                    e.Row.Cells[12].ForeColor = Color.Red;
                    e.Row.Cells[12].Font.Size = FontUnit.Large;
                    e.Row.Cells[12].Font.Bold = true;
                    e.Row.Cells[12].BackColor = Color.AliceBlue;
                }
                if (e.Row.Cells[15].Text == "+")
                {
                    e.Row.Cells[15].ForeColor = Color.Green;
                    e.Row.Cells[15].Font.Size = FontUnit.Large;
                    e.Row.Cells[15].Font.Bold = true;
                }
                if (e.Row.Cells[15].Text == "-")
                {
                    e.Row.Cells[15].ForeColor = Color.Red;
                    e.Row.Cells[15].Font.Size = FontUnit.Large;
                    e.Row.Cells[15].Font.Bold = true;
                    e.Row.Cells[15].BackColor = Color.AliceBlue;
                }
            }
            else
            {
                if (e.Row.Cells[1].Text == "Total")
                {
                    System.Web.UI.WebControls.Button status = (System.Web.UI.WebControls.Button)e.Row.FindControl("Button7");
                    status.Visible = false;
                }
                if (e.Row.Cells[2].Text == "Total")
                {
                    e.Row.BackColor = System.Drawing.Color.CadetBlue;
                    e.Row.Font.Size = FontUnit.Large;
                    e.Row.ForeColor = Color.White;
                    e.Row.Font.Bold = true;
                }
            }
        }
    }
    protected void grdAgentReport_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        e.Row.Cells[2].Visible = false;
        if (e.Row.RowType == DataControlRowType.DataRow)
        {
            string val = ViewState["Val"].ToString();
            if (val != "btnclick")
            {
                if (e.Row.Cells[1].Text == "Total")
                {
                    System.Web.UI.WebControls.Button status = (System.Web.UI.WebControls.Button)e.Row.FindControl("Button8");
                    status.Visible = false;
                }
                if (e.Row.Cells[1].Text == "Total")
                {
                    e.Row.BackColor = System.Drawing.Color.CadetBlue;
                    e.Row.Font.Size = FontUnit.Large;
                    e.Row.ForeColor = Color.White;
                    e.Row.Font.Bold = true;
                }
                if (e.Row.Cells[8].Text == "+")
                {
                    e.Row.Cells[8].ForeColor = Color.Green;
                    e.Row.Cells[8].Font.Size = FontUnit.Large;
                    e.Row.Cells[8].Font.Bold = true;
                }
                if (e.Row.Cells[8].Text == "-")
                {
                    e.Row.Cells[8].ForeColor = Color.Red;
                    e.Row.Cells[8].Font.Size = FontUnit.Large;
                    e.Row.Cells[8].Font.Bold = true;
                    e.Row.Cells[8].BackColor = Color.AliceBlue;
                }
                if (e.Row.Cells[11].Text == "+")
                {
                    e.Row.Cells[11].ForeColor = Color.Green;
                    e.Row.Cells[11].Font.Size = FontUnit.Large;
                    e.Row.Cells[11].Font.Bold = true;
                }
                if (e.Row.Cells[11].Text == "-")
                {
                    e.Row.Cells[11].ForeColor = Color.Red;
                    e.Row.Cells[11].Font.Size = FontUnit.Large;
                    e.Row.Cells[11].Font.Bold = true;
                    e.Row.Cells[11].BackColor = Color.AliceBlue;
                }
                if (e.Row.Cells[14].Text == "+")
                {
                    e.Row.Cells[14].ForeColor = Color.Green;
                    e.Row.Cells[14].Font.Size = FontUnit.Large;
                    e.Row.Cells[14].Font.Bold = true;
                }
                if (e.Row.Cells[14].Text == "-")
                {
                    e.Row.Cells[14].ForeColor = Color.Red;
                    e.Row.Cells[14].Font.Size = FontUnit.Large;
                    e.Row.Cells[14].Font.Bold = true;
                    e.Row.Cells[14].BackColor = Color.AliceBlue;
                }
            }
            else
            {
                if (e.Row.Cells[1].Text == "Total")
                {
                    System.Web.UI.WebControls.Button status = (System.Web.UI.WebControls.Button)e.Row.FindControl("Button8");
                    status.Visible = false;
                }
                if (e.Row.Cells[2].Text == "Total")
                {
                    e.Row.BackColor = System.Drawing.Color.CadetBlue;
                    e.Row.Font.Size = FontUnit.Large;
                    e.Row.ForeColor = Color.White;
                    e.Row.Font.Bold = true;
                }
            }
        }
    }
    protected void grddata_OnDataBound(object sender, EventArgs e)
    {
    }
    protected void grdRouteUnderCategory_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        //e.Row.Cells[3].Visible = false;
        e.Row.Cells[2].Visible = false;
        e.Row.Cells[1].Visible = false;
        if (e.Row.RowType == DataControlRowType.DataRow)
        {
            if (e.Row.Cells[4].Text == "Total")
            {
                System.Web.UI.WebControls.Button status = (System.Web.UI.WebControls.Button)e.Row.FindControl("Button15");
                status.Visible = false;
            }
            if (e.Row.Cells[4].Text == "Total")
            {
                e.Row.BackColor = System.Drawing.Color.CadetBlue;
                e.Row.Font.Size = FontUnit.Large;
                e.Row.ForeColor = Color.White;
                e.Row.Font.Bold = true;
            }
        }
    }
    protected void grdPlatWiseCategoryReport_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        //e.Row.Cells[3].Visible = false;
        //  e.Row.Cells[2].Visible = false;
        e.Row.Cells[1].Visible = false;
        if (e.Row.RowType == DataControlRowType.DataRow)
        {
            if (e.Row.Cells[2].Text == "Total")
            {
                System.Web.UI.WebControls.Button status = (System.Web.UI.WebControls.Button)e.Row.FindControl("Button20");
                status.Visible = false;
            }
            if (e.Row.Cells[2].Text == "Total")
            {
                e.Row.BackColor = System.Drawing.Color.CadetBlue;
                e.Row.Font.Size = FontUnit.Large;
                e.Row.ForeColor = Color.White;
                e.Row.Font.Bold = true;
            }
        }
    }
    protected void grdPlatWiseSubCategoryReport_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        //e.Row.Cells[3].Visible = false;
        e.Row.Cells[0].Visible = false;
        e.Row.Cells[1].Visible = false;
        if (e.Row.RowType == DataControlRowType.DataRow)
        {
            //if (e.Row.Cells[3].Text == "Total")
            //{
            //    System.Web.UI.WebControls.Button status = (System.Web.UI.WebControls.Button)e.Row.FindControl("Button21");
            //    status.Visible = false;
            //}
            if (e.Row.Cells[3].Text == "Total")
            {
                e.Row.BackColor = System.Drawing.Color.CadetBlue;
                e.Row.Font.Size = FontUnit.Large;
                e.Row.ForeColor = Color.White;
                e.Row.Font.Bold = true;
            }
        }
    }
    protected void grdSalesOfficeCategoryReport_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        //e.Row.Cells[3].Visible = false;
        //  e.Row.Cells[2].Visible = false;
        e.Row.Cells[1].Visible = false;
        if (e.Row.RowType == DataControlRowType.DataRow)
        {
            if (e.Row.Cells[1].Text == "Total")
            {
                System.Web.UI.WebControls.Button status = (System.Web.UI.WebControls.Button)e.Row.FindControl("Button17");
                status.Visible = false;
            }
            if (e.Row.Cells[1].Text == "Total")
            {
                e.Row.BackColor = System.Drawing.Color.CadetBlue;
                e.Row.Font.Size = FontUnit.Large;
                e.Row.ForeColor = Color.White;
                e.Row.Font.Bold = true;
            }
        }
    }
    protected void grdSalesOfficeSubCategoryReport_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        e.Row.Cells[0].Visible = false;
        e.Row.Cells[1].Visible = false;
        // e.Row.Cells[1].Visible = false;
        if (e.Row.RowType == DataControlRowType.DataRow)
        {
            //if (e.Row.Cells[1].Text == "Total")
            //{
            //    System.Web.UI.WebControls.Button status = (System.Web.UI.WebControls.Button)e.Row.FindControl("Button18");
            //    status.Visible = false;
            //}
            if (e.Row.Cells[3].Text == "Total")
            {
                e.Row.BackColor = System.Drawing.Color.CadetBlue;
                e.Row.Font.Size = FontUnit.Large;
                e.Row.ForeColor = Color.White;
                e.Row.Font.Bold = true;
            }
        }
    }
    protected void grdAgentUnderCategoryProduct_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        //e.Row.Cells[3].Visible = false;
        //e.Row.Cells[2].Visible = false;
        //e.Row.Cells[1].Visible = false;
        if (e.Row.RowType == DataControlRowType.DataRow)
        {
            if (e.Row.Cells[1].Text == "Total")
            {
                e.Row.BackColor = System.Drawing.Color.CadetBlue;
                e.Row.Font.Size = FontUnit.Large;
                e.Row.ForeColor = Color.White;
                e.Row.Font.Bold = true;
            }
        }
    }
    protected void Close_Click(object sender, EventArgs e)
    {
        divHide1.Style.Add("display", "none");
        div_MainPlantDetails1.Style.Add("display", "none");
        ScriptManager.RegisterClientScriptBlock(this.Page, this.GetType(), "Script1", "branchtypeChange();", true);
    }
    protected void Close_Click1(object sender, EventArgs e)
    {
        divMainAddNewRow2.Style.Add("display", "none");
        //divHide1.Style.Add("display", "none");
        //div_MainPlantDetails1.Style.Add("display", "none");
        ScriptManager.RegisterClientScriptBlock(this.Page, this.GetType(), "Script1", "branchtypeChange();", true);
    }
    protected void Close_Click2(object sender, EventArgs e)
    {
        div_routewisemainCompare.Style.Add("display", "none");
    }
    protected void Close_RouteSalesTypeClick2(object sender, EventArgs e)
    {
        div_mainRouteSalesType.Style.Add("display", "none");
    }
    protected void Close_RouteUnderCategory(object sender, EventArgs e)
    {
        divMainRouteUnderCategory.Style.Add("display", "none");
    }
    protected void Close_AgentUnderCategoryProduct(object sender, EventArgs e)
    {
        divMainAgentUnderCategoryProduct.Style.Add("display", "none");
    }
    protected void Close_Click3(object sender, EventArgs e)
    {
        div_agentwisemain1.Style.Add("display", "none");
    }
    protected void Close_Click4(object sender, EventArgs e)
    {
        divnewroute.Style.Add("display", "none");
    }
    protected void Close_Click5(object sender, EventArgs e)
    {
        divagentwisesale.Style.Add("display", "none");
    }
    protected void Close_RouteUnderSalestype(object sender, EventArgs e)
    {
        divMainRouteUnderSalestype.Style.Add("display", "none");
    }
    protected void Close_ClickPlantWiseCategory(object sender, EventArgs e)
    {
        div_MainPlantWiseCategory.Style.Add("display", "none");
    }
    protected void Close_ClickPlantWiseSubCategory(object sender, EventArgs e)
    {
        div_MainPlantWiseSubCategory.Style.Add("display", "none");
    }
    protected void Close_ClickSalesOfficeCategory(object sender, EventArgs e)
    {
        div_MainSalesOfficeCategory.Style.Add("display", "none");
    }
    protected void Close_ClickSalesOfficeSubCategory(object sender, EventArgs e)
    {
        div_MainSalesOfficeSubCategory.Style.Add("display", "none");
    }
    protected void Close_RouteWiseUnderSalestype(object sender, EventArgs e)
    {
        divMainRouteWiseUnderSalestype.Style.Add("display", "none");
    }
    protected void Close_RouteWiseAgentUnderSalestype(object sender, EventArgs e)
    {
        divMainRouteWiseAgentUnderSalestype.Style.Add("display", "none");
    }
    protected void grdbranchwisedispatch_RowDataBound(object sender, GridViewRowEventArgs e)
    {

        e.Row.Cells[1].Visible = false;
        e.Row.Cells[2].Visible = false;
        if (e.Row.RowType == DataControlRowType.DataRow)
        {
            if (e.Row.Cells[2].Text == "172" || e.Row.Cells[2].Text == "158" || e.Row.Cells[2].Text == "4626" || e.Row.Cells[2].Text == "1801")
            {
                System.Web.UI.WebControls.Button status = (System.Web.UI.WebControls.Button)e.Row.FindControl("btnnewclick");
                status.Visible = false;
            }
            if (e.Row.Cells[3].Text == "Total")
            {
                e.Row.BackColor = System.Drawing.Color.CadetBlue;
                e.Row.Font.Size = FontUnit.Large;
                e.Row.ForeColor = Color.White;
                e.Row.Font.Bold = true;
            }
            if (e.Row.Cells[3].Text == "Grand Total")
            {
                e.Row.BackColor = System.Drawing.Color.CadetBlue;
                e.Row.Font.Size = FontUnit.Large;
                e.Row.ForeColor = Color.White;
                e.Row.Font.Bold = true;
                System.Web.UI.WebControls.Button status = (System.Web.UI.WebControls.Button)e.Row.FindControl("btnnewclick");
                status.Visible = false;
            }
            if (e.Row.Cells[3].Text == "Sales Office Wise")
            {
                e.Row.BackColor = System.Drawing.Color.CadetBlue;
                e.Row.Font.Size = FontUnit.Large;
                e.Row.ForeColor = Color.White;
                e.Row.Font.Bold = true;
            }
        }
    }
    private string GetSpace(string p)
    {
        int i = 0;
        for (; i < p.Length; i++)
        {
            if (char.IsNumber(p[i]))
            {
                break;
            }
        }
        return p.Substring(0, i) + " " + p.Substring(i, p.Length - i);
    }
}