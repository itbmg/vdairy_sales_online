using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using MySql.Data.MySqlClient;
using System.Data;
using System.Data.SqlClient;
using System.Web.Script.Serialization;
using System.Web.SessionState;
using System.Net.Mime;
using System.Collections;
using System.IO;
using System.Net;
using System.Net.Mail;
using System.Text;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Globalization;
using System.Net.Sockets;
using System.Net.Http;
using Newtonsoft.Json;
/// <summary>
/// Summary description for DairyFleet
/// </summary>
//namespace ExtensionMethods
//{
public class DairyFleet : IHttpHandler, IRequiresSessionState
{
    public DairyFleet()
    {
        //
        // TODO: Add constructor logic here
        //
    }
    public bool IsReusable
    {
        get { return true; }
    }
    class GetJsonData
    {
        public string op { set; get; }
    }
    class CashDetails
    {
        public string SNo { set; get; }
        public string Account { set; get; }
        public string amount { set; get; }
        public string Qty { set; get; }
    }
    class CashForms
    {
        public string op { set; get; }
        public List<CashDetails> CashDetails { set; get; }
        public string Description { set; get; }
        public string Amount { set; get; }
        public string Remarks { set; get; }
        public string EmpApprove { set; get; }
        public string VoucherType { set; get; }
        public string CashTo { set; get; }
        public string Employee { set; get; }
        public string btnSave { set; get; }
        public string spnVoucherID { set; get; }
        public string AccountType { set; get; }
        public string CashType { set; get; }
        public string ddlBillHead { set; get; }
        public string BranchID { set; get; }
        public string transactiontype { set; get; }
        public string inserntivetype { set; get; }
        public string SalesOfficeid { set; get; }
        public string Routeid { set; get; }
        public string agentid { set; get; }
        public string structureexistornot { set; get; }
        public string frmdate { set; get; }
        public string todate { set; get; }
        public string SalesOfficeName { get; set; }
        public string Routename { get; set; }
        public string Agentname { get; set; }
        public string status { get; set; }
        public string incentivesno { get; set; }
        public string leakpercent { get; set; }
        public string salestype { get; set; }
        public string collectiontype { get; set; }
        public string mobileno { get; set; }
    }
    public void ProcessRequest(HttpContext context)
    {
        //throw new NotImplementedException();
        try
        {
            string request = context.Request["operation"];
            switch (request)
            {
                #region "SALES TYPE MANAGEMENT"
                case "Get_Voucher_Print_Details":
                    Get_Voucher_Print_Details(context);
                    break;
                case "btn_getlogininfoemployee_details":
                    btn_getlogininfoemployee_details(context);
                    break;
                case "get_employee_details":
                    get_employee_details(context);
                    break;
                case "get_logindetails_eachemployee":
                    get_logindetails_eachemployee(context);
                    break;
                case "saveBankDetails":
                    saveBankDetails(context);
                    break;
                case "btnAgent_indent_Invoice_click":
                    btnAgent_indent_Invoice_click(context);
                    break;
                case "get_bank_details":
                    get_bank_details(context);
                    break;
                case "save_customerdocument":
                    save_customerdocument(context);
                    break;
                case "get_Indent_Employees":
                    get_Indent_Employees(context);
                    break;
                case "get_Employees_leveltypes":
                    get_Employees_leveltypes(context);
                    break;
                case "Svae_Others_Details":
                    Svae_Others_Details(context);
                    break;
                case "get_Others_Details":
                    get_Others_Details(context);
                    break;
                case "btnUpdateQuotationPoNumbers":
                    btnUpdateQuotationPoNumbers(context);
                    break;
                case "btnAgentInvoice_click":
                    btnAgentInvoice_click(context);
                    break;
                case "get_Product_Routewise_Data":
                    get_Product_Routewise_Data(context);
                    break;
                case "get_Product_Monthly_Sale_Pie":
                    get_Product_Monthly_Sale_Pie(context);
                    break;
                case "get_SaleRepresentive_details":
                    get_SaleRepresentive_details(context);
                    break;
                case "getRemarks_click":
                    getRemarks_click(context);
                    break;
                case "get_Product":
                    get_Product(context);
                    break;
                case "get_Agent_Information_Details":
                    get_Agent_Information_Details(context);
                    break;
                case "get_Product_Monthly_Sale":
                    get_Product_Monthly_Sale(context);
                    break;
                case "saveAgentRemarks":
                    saveAgentRemarks(context);
                    break;
                case "get_Agent_Monthlsale_Line":
                    get_Agent_Monthlsale_Line(context);
                    break;
                case "get_DisppatchMobie_no":
                    get_DisppatchMobie_no(context);
                    break;
                case "get_DisppatchMobienumbers":
                    get_DisppatchMobienumbers(context);
                    break;
                case "get_Plant_Despatches":
                    get_Plant_Despatches(context);
                    break;
                case "Product_Image_files_upload":
                    Product_Image_files_upload(context);
                    break;
                case "Agent_profile_pic_files_upload":
                    Agent_profile_pic_files_upload(context);
                    break;
                case "Employee_profile_pic_files_upload":
                    Employee_profile_pic_files_upload(context);
                    break;
                case "intialize_productsmanagement_subcatgry":
                    intialize_productsmanagement_subcatgry(context);
                    break;
                case "intialize_productsmanagement_products":
                    intialize_productsmanagement_products(context);
                    break;
                case "intialize_Prdt_inventory":
                    intialize_Prdt_inventory(context);
                    break;
                case "intialize_branchesmanages_salestype":
                    intialize_branchesmanages_salestype(context);
                    break;
                    ///complete 02/01/2023
                case "intialize_branchesproducts_branchname":
                    intialize_branchesproducts_branchname(context);
                    break;
                case "Get_SpL_Employe":
                    Get_SpL_Employe(context);
                    break;
                case "GetAppriveSubPaybleValues":
                    GetAppriveSubPaybleValues(context);
                    break;
                case "get_subcategory_data":
                    get_subcategory_data(context);
                    break;
                case "get_product_subcategory_data":
                    get_product_subcategory_data(context);
                    break;
                case "get_products_data":
                    get_products_data(context);
                    break;
                case "salestypemanage":
                    salestypemanage(context);
                    break;
                case "updatesalestypemanage":
                    updatesalestypemanage(context);
                    break;
                case "producttypemanagement":
                    producttypemanagement(context);
                    break;
                case "Updateproducttypemanage":
                    Updateproducttypemanage(context);
                    break;
                case "subcategorytypemanagement":
                    subcategorytypemanagement(context);
                    break;
                case "Updatesubcategorytypemanage":
                    Updatesubcategorytypemanage(context);
                    break;
                case "productunitsmanagement":
                    productunitsmanagement(context);
                    break;
                case "Updateproductunitsmanage":
                    Updateproductunitsmanage(context);
                    break;
                case "Save_branchsmanagement_click":
                    Save_branchsmanagement_click(context);
                    break;
                case "Updatebranchmanagement":
                    Updatebranchmanagement(context);
                    break;
                case "save_branchproducts_click":
                    save_branchproducts_click(context);
                    break;
                case "UpdateBranchProducts":
                    UpdateBranchProducts(context);
                    break;
                case "updateroutestogrid":
                    updateroutestogrid(context);
                    break;
                case "updatedivselected":
                    updatedivselected(context);
                    break;
                case "get_Branches_Salesoffice":
                    get_Branches_Salesoffice(context);
                    break;
                case "btnRoutesDeleteClick":
                    btnRoutesDeleteClick(context);
                    break;
                //////.......Trips..................////
                case "get_Plant_TripRoutes":
                    get_Plant_TripRoutes(context);
                    break;
                case "Emplogins_management":
                    Emplogins_management(context);
                    break;
                case "update_employees_management":
                    update_employees_management(context);
                    break;
                case "Get_Employee":
                    Get_Employee(context);
                    break;
                case "Get_Employee_editDC":
                    Get_Employee_editDC(context);
                    break;
                case "Inventorymanage":
                    Inventorymanage(context);
                    break;
                case "update_inventory_manage":
                    update_inventory_manage(context);
                    break;
                case "GetSubPaybleValues":
                    GetSubPaybleValues(context);
                    break;
                case "Gettripinventory_manage":
                    Gettripinventory_manage(context);
                    break;
                    ///complete
                case "Inventory_Purchase_manage":
                    Inventory_Purchase_manage(context);
                    break;
                case "update_inventory_Purchase_manage":
                    update_inventory_Purchase_manage(context);
                    break;
                case "intialize_purchase_invname":
                    intialize_purchase_invname(context);
                    break;
                case "departmentsave":
                    departmentsave(context);
                    break;
                case "updatedepartment_manage":
                    updatedepartment_manage(context);
                    break;
                case "get_employees_department":
                    get_employees_department(context);
                    break;
                case "GetTripEnd_Details":
                    GetTripEnd_Details(context);
                    break;
                case "Update_grid_oncheck_change_branchmanagement":
                    Update_grid_oncheck_change_branchmanagement(context);
                    break;
                case "updatebrnchprdt_check_togrid":
                    updatebrnchprdt_check_togrid(context);
                    break;
                case "get_all_Routes":
                    get_all_Routes(context);
                    break;
                case "btnInventoryVerifySaveClick":
                    btnInventoryVerifySaveClick(context);
                    break;
                case "GetCheckDetails":
                    GetCheckDetails(context);
                    break;
                case "btnChecksVerifySaveClick":
                    btnChecksVerifySaveClick(context);
                    break;
                case "getAvglastThreeDaysSaleReport":
                    getAvglastThreeDaysSaleReport(context);
                    break;
                case "GetProductnames":
                    GetProductnames(context);
                    break;
                case "FillCategeoryname":
                    FillCategeoryname(context);
                    break;
                case "GetVerifyInventory":
                    GetVerifyInventory(context);
                    break;
                case "GetVerifyLeaks":
                    GetVerifyLeaks(context);
                    break;
                case "GetVerifyReturns":
                    GetVerifyReturns(context);
                    break;
                case "GetCsodispatchRoutes":
                    GetCsodispatchRoutes(context);
                    break;
                case "updatedispatchestogrid":
                    updatedispatchestogrid(context);
                    break;
                case "GetDispatchVehicleNos":
                    GetDispatchVehicleNos(context);
                    break;
                case "GetMilkBuyerTransactonDetails":
                    GetMilkBuyerTransactonDetails(context);
                    break;
                case "BtnVarifyVehicleClick":
                    BtnVarifyVehicleClick(context);
                    break;
                case "btnPlantTrip_EndSaveClick":
                    btnPlantTrip_EndSaveClick(context);
                    break;
                case "updatedivindents":
                    updatedivindents(context);
                    break;
                case "get_Routes_indents":
                    get_Routes_indents(context);
                    break;
                case "updatedispatchselected":
                    updatedispatchselected(context);
                    break;
                case "get_branch_products":
                    get_branch_products(context);
                    break;
                case "updateprdt_clubbingtogrid":
                    updateprdt_clubbingtogrid(context);
                    break;
                case "updatedivclubbingselected":
                    updatedivclubbingselected(context);
                    break;
                case "updatedivslots":
                    updatedivslots(context);
                    break;
                
                case "get_branch_clubbings":
                    get_branch_clubbings(context);
                    break;
                case "updatestructuretogrid":
                    updatestructuretogrid(context);
                    break;
                case "updatediv_structure":
                    updatediv_structure(context);
                    break;
                case "get_routebranches":
                    get_routebranches(context);
                    break;
                case "GetBranchProducts":
                    GetBranchProducts(context);
                    break;
                case "GetBranchStock":
                    GetBranchStock(context);
                    break;
                case "GetSOClosingStock":
                    GetSOClosingStock(context);
                    break;
                case "GetInvClosingStock":
                    GetInvClosingStock(context);
                    break;
                case "GetBranchInventoryStock":
                    GetBranchInventoryStock(context);
                    break;
                case "GetPieChartValues":
                    GetPieChartValues(context);
                    break;
                case "Getrouteleaksreturns":
                    Getrouteleaksreturns(context);
                    break;
                case "Getroutewiseleaks":
                    Getroutewiseleaks(context);
                    break;
                case "GetProductWiseleaks":
                    GetProductWiseleaks(context);
                    break;
                case "GetSalesOffice":
                    GetSalesOffice(context);
                    break;
               
                case "GetSalesOfficeEmployee":
                    GetSalesOfficeEmployee(context);
                    break;
                case "GetDispatchValues":
                    GetDispatchValues(context);
                    break;
                case "GetTripDispPlanDetails":
                    GetTripDispPlanDetails(context);
                    break;
                case "GetVehicleNos":
                    GetVehicleNos(context);
                    break;
                case "SaveVehicleMasterClick":
                    SaveVehicleMasterClick(context);
                    break;
                case "GetAgents":
                    GetAgents(context);
                    break;
                case "GetEmployeenames":
                    GetEmployeenames(context);
                    break;
                case "GetDispatchPlanStatus":
                    GetDispatchPlanningStatus(context);
                    break;
                case "GetApprovalDetails":
                    GetApprovalDetails(context);
                    break;
                case "GetSalesRoutes":
                    GetSalesRoutes(context);
                    break;
                case "GetInventoryDeatails":
                    GetInventoryDeatails(context);
                    break;
                case "GetAgentAmountDeatails":
                    GetAgentAmountDeatails(context);
                    break;
                case "get_EditCollections_details":
                    get_EditCollections_details(context);
                    break;
                case "LedgerDetailsClick":
                    LedgerDetailsClick(context);
                    break;
                case "GetRouteNameChange":
                    GetRouteNameChange(context);
                    break;
                case "GetEditIndentValuesClick":
                    GetEditIndentValuesClick(context);
                    break;
                //added  by akbar 20-May-2022
                case "GetDeliverInventory":
                    GetDeliverInventory(context);
                    break;
                // end added  by akbar 20-May-2022
                case "GetEditInventoryValues":
                    GetEditInventoryValues(context);
                    break;
                case "GetSalesOfficeChange":
                    GetSalesOfficeChange(context);
                    break;
                case "GetAgetntsaleProducts":
                    GetAgetntsaleProducts(context);
                    break;
                case "GetLocalSaleProducts":
                    GetLocalSaleProducts(context);
                    break;
                case "GetAgetntsaleInventory":
                    GetAgetntsaleInventory(context);
                    break;
                case "GetLocalDispatches":
                    GetLocalDispatches(context);
                    break;
                case "GetSpecialDispatches":
                    GetSpecialDispatches(context);
                    break;
                case "GetSplDcProducts":
                    GetSplDcProducts(context);
                    break;
                case "GetBranchVehicles":
                    GetBranchVehicles(context);
                    break;
                case "GetEditDcProducts":
                    GetEditDcProducts(context);
                    break;
                case "EditDcInventory":
                    EditDcInventory(context);
                    break;
                case "GetEditInventoryClick":
                    GetEditInventoryClick(context);
                    break;
                case "GetDespatches":
                    GetDespatches(context);
                    break;
                case "GetPuffDespatches":
                    GetPuffDespatches(context);
                    break;
                /////.................Puff Planning.............../////////////////
                case "GetAllIndentTypes":
                    GetAllIndentTypes(context);
                    break;
                case "GetEmployeeNames":
                    GetEmployeeNames(context);
                    break;
                case "GetApproveEmployeeNames":
                    GetApproveEmployeeNames(context);
                    break;
                case "GetRaisedVouchers":
                    GetRaisedVouchers(context);
                    break;
                case "btnApproveVoucherclick":
                    btnApproveVoucherclick(context);
                    break;
                case "btnRejectVoucherclick":
                    btnRejectVoucherclick(context);
                    break;
                case "BtnGetVoucherClick":
                    BtnGetVoucherClick(context);
                    break;
                case "BtnPayVoucherClick":
                    BtnPayVoucherClick(context);
                    break;
                case "btnViewVoucherGeneretaeClick":
                    btnViewVoucherGeneretaeClick(context);
                    break;
                case "btnVoucherCancelClick":
                    btnVoucherCancelClick(context);
                    break;
                case "BtnClearRaiseVoucherClick":
                    BtnClearRaiseVoucherClick(context);
                    break;
                case "SaveHeadMasterClick":
                    SaveHeadMasterClick(context);
                    break;
                case "GetHeadOfAccpunts":
                    GetHeadOfAccpunts(context);
                    break;
                case "GetSalesOffices":
                    GetSalesOffices(context);
                    break;
                case "BtnVarifyVoucherSaveClick":
                    BtnVarifyVoucherSaveClick(context);
                    break;
                case "BtnGetCashBookClosing":
                    BtnGetCashBookClosing(context);
                    break;
                case "GetAgentNames":
                    GetAgentNames(context);
                    break;
                case "GetHeadLimit":
                    GetHeadLimit(context);
                    break;
                case "BtnCashAmountClick":
                    BtnCashAmountClick(context);
                    break;
                case "GetAgentClosingAmount":
                    GetAgentClosingAmount(context);
                    break;
                case "GetAgent_Transaction":
                    GetAgent_Transaction(context);
                    break;

                case "GetEditCollectionValuesClick":
                    GetEditCollectionValuesClick(context);
                    break;
                case "GetEditCollectionamountClick":
                    GetEditCollectionamountClick(context);
                    break;
                case "GetEditLeaksReturnsClick":
                    GetEditLeaksReturnsClick(context);
                    break;
                case "GetBtnViewVoucherclick":
                    GetBtnViewVoucherclick(context);
                    break;
                case "btnVoucherUpdateClick":
                    btnVoucherUpdateClick(context);
                    break;
                case "GetHeadNames":
                    GetHeadNames(context);
                    break;
                case "GetPlantSalesOffice":
                    GetPlantSalesOffice(context);
                    break;
                case "GetSalesOfficeOffers":
                    GetSalesOfficeOffers(context);
                    break;
                case "GetAllSalesOffice":
                    GetAllSalesOffice(context);
                    break;
                case "GetAgentPrdtInformation":
                    GetAgentPrdtInformation(context);
                    break;
                case "GetBranchwiseDetailsInformation":
                    GetBranchwiseDetailsInformation(context);
                    break;
                case "GetsoandPlantDespNames":
                    GetsoandPlantDespNames(context);
                    break;
                case "GetProductNamechange":
                    GetProductNamechange(context);
                    break;
                /////.................graphical .............../////////////////
                case "Getthreedaysindentdespatch":
                    Getthreedaysindentdespatch(context);
                    break;
                case "getLineChartforsubcategeoryReport":
                    getLineChartforsubcategeoryReport(context);
                    break;
                case "getLineChartforsubcategeoryReport1":
                    getLineChartforsubcategeoryReport1(context);
                    break;
                case "getLineForProduct":
                    getLineForProduct(context);
                    break;
                case "GetRouteAgentInformation":
                    GetRouteAgentInformation(context);
                    break;
                case "GetGatePassDetails":
                    GetGatePassDetails(context);
                    break;
                #endregion "SALES TYPE MANAGEMENT"
                case "btnupdatevoucherDetails":
                    btnupdatevoucherDetails(context);
                    break;
                case "btnupdatereceiptDetails":
                    btnupdatereceiptDetails(context);
                    break;
                case "btnupdate_DcNumber_Dates":
                    btnupdate_DcNumber_Dates(context);
                    break;
                case "Getindentincreasedecresereport2015":
                    Getindentincreasedecresereport2015(context);
                    break;
                case "Getindentincreasedecresereport":
                    Getindentincreasedecresereport(context);
                    break;
                case "btnMilkBuyerTransactonremarkssaveClick":
                    btnMilkBuyerTransactonremarkssaveClick(context);
                    break;
                case "GetLineChartValues":
                    GetLineChartValues(context);
                    break;
                case "GetLineChart_agentduetransactions":
                    GetLineChart_agentduetransactions(context);
                    break;
                case "GetLineChart_agentinventorytransactions":
                    GetLineChart_agentinventorytransactions(context);
                    break;
                case "GetLineChart_classificationindentreport":
                    GetLineChart_classificationindentreport(context);
                    break;
                case "GetPieChart_ClassificationType":
                    GetPieChart_ClassificationType(context);
                    break;
                case "get_Address_details":
                    get_Address_details(context);
                    break;
                case "saveAddressDetails":
                    saveAddressDetails(context);
                    break;
                case "GetEditCashBookValues":
                    GetEditCashBookValues(context);
                    break;
                case "Get_Dc_Details":
                    Get_Dc_Details(context);
                    break;
                case "get_DC_details_click":
                    get_DC_details_click(context);
                    break;
                case "get_DeliveryChallan_click":
                    get_DeliveryChallan_click(context);
                    break;
                case "GetDC_Products":
                    GetDC_Products(context);
                    break;
                case "get_Agentwise_incentive_statements":
                    get_Agentwise_incentive_statements(context);
                    break;
                case "getcustomer_Uploaded_Documents":
                    getcustomer_Uploaded_Documents(context);
                    break;
                case "savestateDetails":
                    savestateDetails(context);
                    break;
                case "get_state_details":
                    get_state_details(context);
                    break;
                case "GetProductInformation":
                    GetProductInformation(context);
                    break;
                case "GetCategoryWiseChart":
                    GetCategoryWiseChart(context);
                    break;
                case "Get_Dispatch_Sale_CategoryWise":
                    Get_Dispatch_Sale_CategoryWise(context);
                    break;
                case "branchwise_Dispatch_milk_qty":
                    branchwise_Dispatch_milk_qty(context);
                    break;

                case "Route_Wise_Milk_SaleQty":
                    Route_Wise_Milk_SaleQty(context);
                    break;

                case "Agent_Wise_Milk_SaleQty":
                    Agent_Wise_Milk_SaleQty(context);
                    break;

                case "branchwise_Curd_Dispatch_qty":
                    branchwise_Curd_Dispatch_qty(context);
                    break;
                case "Route_Wise_Curd_SaleQty":
                    Route_Wise_Curd_SaleQty(context);
                    break;
                case "Agent_Wise_Curd_SaleQty":
                    Agent_Wise_Curd_SaleQty(context);
                    break;

                case "branchwise_Others_Dispatch_qty1":
                    branchwise_Others_Dispatch_qty1(context);
                    break;

                case "branchwise_Others_Dispatch_qty":
                    branchwise_Others_Dispatch_qty(context);
                    break;
                case "Route_Wise_Other_SaleQty":
                    Route_Wise_Other_SaleQty(context);
                    break;
                case "Agent_Wise_Other_SaleQty":
                    Agent_Wise_Other_SaleQty(context);
                    break;
                case "branchwise_SaleValue":
                    branchwise_SaleValue(context);
                    break;
                case "Route_Wise_SaleValue":
                    Route_Wise_SaleValue(context);
                    break;
                case "Agent_Wise_SaleValue":
                    Agent_Wise_SaleValue(context);
                    break;
                case "Branch_Wise_Collection":
                    Branch_Wise_Collection(context);
                    break;
                case "Route_Wise_Collection":
                    Route_Wise_Collection(context);
                    break;
                case "Agent_Wise_Collection":
                    Agent_Wise_Collection(context);
                    break;

                case "Branch_Wise_DueAmount":
                    Branch_Wise_DueAmount(context);
                    break;
                case "Route_Wise_DueAmount":
                    Route_Wise_DueAmount(context);
                    break;
                case "Agent_Wise_DueAmount":
                    Agent_Wise_DueAmount(context);
                    break;
                case "Branch_Wise_DayComparism":
                    Branch_Wise_DayComparism(context);
                    break;
                case "get_RouteWiseDay_Comparison":
                    get_RouteWiseDay_Comparison(context);
                    break;
                case "Get_AgentWiseDay_Comparison":
                    Get_AgentWiseDay_Comparison(context);
                    break;
                case "Get_AgentWiseDayProduct_Comparison":
                    Get_AgentWiseDayProduct_Comparison(context);
                    break;

                case "Get_AgentWiseBetweenDayProduct_Comparison":
                    Get_AgentWiseBetweenDayProduct_Comparison(context);
                    break;
                case "Get_SalesOfficeBetweenDayProduct_Comparison":
                    Get_SalesOfficeBetweenDayProduct_Comparison(context);
                    break;

                case "Get_SalesTypeBetweenDayProduct_Comparison":
                    Get_SalesTypeBetweenDayProduct_Comparison(context);
                    break;

                case "Get_RouteWiseBetweenDayProduct_Comparison":
                    Get_RouteWiseBetweenDayProduct_Comparison(context);
                    break;
                case "btn_approve_voucher_grid":
                    btn_approve_voucher_grid(context);
                    break;
                case "getAgent_Name":
                    getAgent_Name(context);
                    break;
                case "get_fillsaleoffice_details_despatch":
                    get_fillsaleoffice_details_despatch(context);
                    break;
                case "get_fillroute_details_despatch":
                    get_fillroute_details_despatch(context);
                    break;
                case "get_delavery_report_details":
                    get_delavery_report_details(context);
                    break;
                case "pickervaluesettosession":
                    pickervaluesettosession(context);
                    break;

                case "Get_Sales_Office_Agents":
                    Get_Sales_Office_Agents(context);
                    break;
                case "get_Plant_Wise_InventaryDetails":
                    get_Plant_Wise_InventaryDetails(context);
                    break;
                case "get_Plant_DayWise_InventaryDetails":
                    get_Plant_DayWise_InventaryDetails(context);
                    break;
                case "get_PlantDirectSales_Wise_InventaryDetails":
                    get_PlantDirectSales_Wise_InventaryDetails(context);
                    break;
                case "get_Branch_Wise_InventaryDetails":
                    get_Branch_Wise_InventaryDetails(context);
                    break;
                case "SaveFormName":
                    SaveFormName(context);
                    break;
                case "GetSalevlue":
                    GetSalevlue(context);
                    break;

                case "get_currentweekpossalevalue_details":
                    get_currentweekpossalevalue_details(context);
                    break;
                case "get_weekpossalevalue_details":
                    get_weekpossalevalue_details(context);
                    break;

                case "GetLastweekSalesDetails":
                    GetLastweekSalesDetails(context);
                    break;
                case "GetLastweekBranchwiseSalesDetails":
                    GetLastweekBranchwiseSalesDetails(context);
                    break;
                case "Getinsentivrdetails":
                    Getinsentivrdetails(context);
                    break;
                case "getincentivependingdetails":
                    getincentivependingdetails(context);
                    break;
                case "viewincentivependingdetails":
                    viewincentivependingdetails(context);
                    break;
                case "btnEditCashbookSaveClick":
                    btnEditCashbookSaveClick(context);
                    break;
                case "getcollectiontypes":
                    getcollectiontypes(context);
                    break;
                case "GetEWayDetails":
                    GetEWayDetails(context);
                    break;
                case "generate_ewaybill_Non_Registerd":
                    generate_ewaybill_Non_Registerd(context);
                    break;
                case "generate_ewaybill_using_IRN":
                    generate_ewaybill_using_IRN(context);
                    break;
                case "Get_Agent_Einvoice_Details":
                    Get_Agent_Einvoice_Details(context);
                    break;

                case "generate_e_invoice_details":
                    generate_e_invoice_details(context);
                    break;
                //case "btn_Click_GetInvoice":
                //    btn_Click_GetInvoice(context);
                //    break;
                default:
                    var jsonString = String.Empty;
                    context.Request.InputStream.Position = 0;
                    using (var inputStream = new StreamReader(context.Request.InputStream))
                    {
                        jsonString = HttpUtility.UrlDecode(inputStream.ReadToEnd());
                    }
                    if (jsonString != "")
                    {
                        var js = new JavaScriptSerializer();
                        // var title1 = context.Request.Params[1];
                        GetJsonData obj = js.Deserialize<GetJsonData>(jsonString);
                        switch (obj.op)
                        {
                            case "btnEditBranchStock":
                                btnEditBranchStock(jsonString, context);
                                break;
                            case "btnEditDCSaveclick":
                                btnEditDCSaveclick(jsonString, context);
                                break;

                        }
                    }
                    else
                    {
                        var js = new JavaScriptSerializer();
                        var title1 = context.Request.Params[1];
                        Orders obj = js.Deserialize<Orders>(title1);
                        //added by akbar 20-May-2022
                        if (obj.operation == "CollectioninventrySaveClick")
                        {
                            CollectioninventrySaveClick(context);
                        }
                        //end added by akbar 20-May-2022
                        if (obj.operation == "btnGatePassDeatailsSaveclick")
                        {
                            btnGatePassDeatailsSaveclick(context);
                        }
                        if (obj.operation == "btn_dispatchRoutesClick")
                        {
                            btn_dispatchRoutesClick(context);
                        }
                        if (obj.operation == "approveincentivependingdetails")
                        {
                            approveincentivependingdetails(context);
                        }
                        if (obj.operation == "btnStructureSaveClick")
                        {
                            btnStructureSaveClick(context);
                        }
                        if (obj.operation == "btnprdtclubbingSaveClick")
                        {
                            btnprdtclubbingSaveClick(context);
                        }
                        if (obj.operation == "btnRoutesSaveClick")
                        {
                            btnRoutesSaveClick(context);
                        }
                        if (obj.operation == "save_Offers")
                        {
                            save_Offers(context);
                        }
                        if (obj.operation == "save_Offers_assignment")
                        {
                            save_Offers_assignment(context);
                        }
                        if (obj.operation == "get_Plant_Trip_RouteNameChange")
                        {
                            get_Plant_Trip_RouteNameChange(context);
                        }
                        if (obj.operation == "btnPlantTripSaveClick")
                        {
                            btnPlantTripSaveClick(context);
                        }
                        if (obj.operation == "btnAgentSaleSaveclick")
                        {
                            btnAgentSaleSaveclick(context);
                        }
                        if (obj.operation == "btnLocalSaleSaveclick")
                        {
                            btnLocalSaleSaveclick(context);
                        }
                        if (obj.operation == "btnSpecialSaleSaveclick")
                        {
                            btnSpecialSaleSaveclick(context);
                        }
                        if (obj.operation == "btnInventoryVerifySaveClick")
                        {
                            btnInventoryVerifySaveClick(context);
                        }
                        if (obj.operation == "btnLeakVarifySaveClick")
                        {
                            btnLeakVarifySaveClick(context);
                        }
                        if (obj.operation == "btnReturnsVarifySaveClick")
                        {
                            btnReturnsVarifySaveClick(context);
                        }
                        if (obj.operation == "btnBranchProductsRankingclick")
                        {
                            btnBranchProductsRankingclick(context);
                        }
                        if (obj.operation == "btnEditIndentSaveClick")
                        {
                            btnEditIndentSaveClick(context);
                        }
                        if (obj.operation == "btnNewEditIndentSaveClick")
                        {
                            btnNewEditIndentSaveClick(context);
                        }
                        if (obj.operation == "btnEditInventorySaveClick")
                        {
                            btnEditInventorySaveClick(context);
                        }
                        if (obj.operation == "BtnRaiseVoucherClick")
                        {
                            BtnRaiseVoucherClick(context);
                        }
                        if (obj.operation == "btnsave_incentivemasterdetails")
                        {
                            btnsave_incentivemasterdetails(context);
                        }
                        if (obj.operation == "btnEditsalesofficeCollectionSaveClick")
                        {
                            btnEditsalesofficeCollectionSaveClick(context);
                        }

                        if (obj.operation == "btnEditCollectionSaveClick")
                        {
                            btnEditCollectionSaveClick(context);
                        }
                        if (obj.operation == "btnAmountUpdateClick")
                        {
                            btnAmountUpdateClick(context);
                        }
                        if (obj.operation == "btnEditLeaksSaveClick")
                        {
                            btnEditLeaksSaveClick(context);
                        }

                        if (obj.operation == "btnclosingstockedit")
                        {
                            btnclosingstockedit(context);
                        }
                        if (obj.operation == "btnHelperMasterSaveclick")
                        {
                            btnHelperMasterSaveclick(context);
                        }
                        if (obj.operation == "saveDispatchMobileNumbers")
                        {
                            saveDispatchMobileNumbers(context);
                        }
                        if (obj.operation == "Save_Dispatch_Assign_Details")
                        {
                            Save_Dispatch_Assign_Details(context);
                        }
                        if (obj.operation == "Svae_Indent_Assign_Details")
                        {
                            Svae_Indent_Assign_Details(context);
                        }
                        if (obj.operation == "saveBranch_Products_Details")
                        {
                            saveBranch_Products_Details(context);
                        }

                        if (obj.operation == "btnPlant_InventarySaveClick")
                        {
                            btnPlant_InventarySaveClick(context);
                        }
                    }
                    break;
            }
        }
        catch
        {
            //context.Response.ContentType = MediaTypeNames.Text.Plain;
            //context.Response.StatusCode = 400;
            //context.Response.Write(ex.Message);
        }
    }
    class invcollectionsave
    {
        public string op { set; get; }
        public string BranchID { set; get; }
        public List<Inventorydetail> Inventorydetails { set; get; }
        public string IndentNo { set; get; }
        public string RouteSno { set; get; }
        public string btnvalue { set; get; }
        public string inddate { set; get; }
    }
    private void CollectioninventrySaveClick(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            var js = new JavaScriptSerializer();
            List<string> MsgList = new List<string>();
            if (context.Session["userdata_sno"] == null)
            {
                string errmsg = "Session Expired";
                string errresponse = GetJson(errmsg);
                context.Response.Write(errresponse);
            }
            else
            {
                DateTime dtindenttime = new DateTime();
                var title1 = context.Request.Params[1];
                invcollectionsave obj = js.Deserialize<invcollectionsave>(title1);
                string b_bid = obj.BranchID;
                string btnvalue = obj.btnvalue;
                string dispatch_sno = obj.RouteSno;
                string indentdate = obj.inddate;
                dtindenttime = DateTime.Parse(indentdate);

                DateTime ServerDateCurrentdate = VehicleDBMgr.GetTime(vdbmngr.conn);
                cmd = new MySqlCommand("SELECT  tripdata.I_Date, tripdata.Sno,  tripdata.Permissions FROM  tripdata INNER JOIN triproutes ON tripdata.Sno = triproutes.Tripdata_sno INNER JOIN empmanage ON tripdata.EmpId = empmanage.Sno INNER JOIN branchdata ON empmanage.Branch = branchdata.sno INNER JOIN salestypemanagement ON branchdata.SalesType = salestypemanagement.sno INNER JOIN dispatch ON triproutes.RouteID = dispatch.sno INNER JOIN dispatch_sub ON dispatch.sno = dispatch_sub.dispatch_sno WHERE (tripdata.I_Date between @d1 and @d2) and (dispatch_sub.dispatch_sno =@dispatch_sno );");
                cmd.Parameters.AddWithValue("@d1", GetLowDate(dtindenttime));
                cmd.Parameters.AddWithValue("@d2", GetHighDate(dtindenttime));
                cmd.Parameters.AddWithValue("@dispatch_sno", dispatch_sno);
                DataTable dttripdata = vdbmngr.SelectQuery(cmd).Tables[0];
                string TripdataSno = "";
                if (dttripdata.Rows.Count > 0)
                {
                    TripdataSno = dttripdata.Rows[0]["Sno"].ToString(); ;
                }
                cmd = new MySqlCommand("SELECT TransType, FromTran, ToTran, Qty,B_inv_sno FROM invtransactions12 WHERE (TransType = @TransType) AND  (ToTran = @TripID)");
                cmd.Parameters.AddWithValue("@TripID", TripdataSno);
                cmd.Parameters.AddWithValue("@TransType", "3");
                DataTable dtTotalCInvData = vdbmngr.SelectQuery(cmd).Tables[0];
                foreach (Inventorydetail o in obj.Inventorydetails)
                {
                    if (o.ReceivedQty != "0")
                    {
                        #region collection_inventory_syncdata
                        DataRow[] drInvData = dtTotalCInvData.Select("FromTran=" + b_bid + " and B_inv_sno=" + o.InvSno);
                        if (drInvData.Count() > 0)
                        {
                            DataTable dtInvData = drInvData.CopyToDataTable();
                            int Aqty = 0;
                            string Qty = dtInvData.Rows[0]["Qty"].ToString();
                            if (Qty == "")
                            {
                                Aqty = 0;
                            }
                            else
                            {
                                int.TryParse(Qty, NumberStyles.Number, CultureInfo.CurrentCulture.NumberFormat, out Aqty);
                            }
                            int Eqty = 0;
                            int.TryParse(o.ReceivedQty, NumberStyles.Number, CultureInfo.CurrentCulture.NumberFormat, out Eqty);
                            int TQty = Aqty - Eqty;
                            if (TQty >= 1)
                            {
                                cmd = new MySqlCommand("update inventory_monitor set Qty=Qty-@Qty where Inv_Sno=@Inv_Sno and BranchId=@BranchId");
                                cmd.Parameters.AddWithValue("@Qty", TQty);
                                cmd.Parameters.AddWithValue("@Inv_Sno", o.InvSno);
                                cmd.Parameters.AddWithValue("@BranchId", b_bid);
                                if (vdbmngr.Update(cmd) == 0)
                                {
                                    cmd = new MySqlCommand("Insert into inventory_monitor(Qty,Inv_Sno,BranchId) values(@Qty,@Inv_Sno,@BranchId)");
                                    cmd.Parameters.AddWithValue("@Qty", TQty);
                                    cmd.Parameters.AddWithValue("@Inv_Sno", o.InvSno);
                                    cmd.Parameters.AddWithValue("@BranchId", b_bid);
                                    vdbmngr.insert(cmd);
                                }
                            }
                            else
                            {
                                TQty = Math.Abs(TQty);
                                cmd = new MySqlCommand("update inventory_monitor set Qty=Qty+@Qty where Inv_Sno=@Inv_Sno and BranchId=@BranchId");
                                cmd.Parameters.AddWithValue("@Qty", TQty);
                                cmd.Parameters.AddWithValue("@Inv_Sno", o.InvSno);
                                cmd.Parameters.AddWithValue("@BranchId", b_bid);
                                if (vdbmngr.Update(cmd) == 0)
                                {
                                    cmd = new MySqlCommand("Insert into inventory_monitor(Qty,Inv_Sno,BranchId) values(@Qty,@Inv_Sno,@BranchId)");
                                    cmd.Parameters.AddWithValue("@Qty", TQty);
                                    cmd.Parameters.AddWithValue("@Inv_Sno", o.InvSno);
                                    cmd.Parameters.AddWithValue("@BranchId", b_bid);
                                    vdbmngr.insert(cmd);
                                }
                            }
                        }
                        else
                        {
                            cmd = new MySqlCommand("SELECT BranchId, Inv_Sno, Qty, Sno, EmpId, lostQty, Indent_Date,CTripid FROM inventory_monitor WHERE (CTripid = @ctripid) AND (BranchId = @agentid) and (Inv_Sno = @Inv_Sno)");
                            cmd.Parameters.AddWithValue("@ctripid", TripdataSno);
                            cmd.Parameters.AddWithValue("@agentid", b_bid);
                            cmd.Parameters.AddWithValue("@Inv_Sno", o.InvSno);
                            DataTable dtinvmonitor_Collected = vdbmngr.SelectQuery(cmd).Tables[0];
                            if (dtinvmonitor_Collected.Rows.Count > 0)
                            {
                               
                            }
                            else
                            {
                                cmd = new MySqlCommand("update inventory_monitor set Qty=Qty-@Qty,CTripid=@ctripid where Inv_Sno=@Inv_Sno and BranchId=@BranchId");
                                cmd.Parameters.AddWithValue("@Qty", o.ReceivedQty);
                                cmd.Parameters.AddWithValue("@Inv_Sno", o.InvSno);
                                cmd.Parameters.AddWithValue("@BranchId", b_bid);
                                cmd.Parameters.AddWithValue("@ctripid", TripdataSno);
                                if (vdbmngr.Update(cmd) == 0)
                                {
                                    cmd = new MySqlCommand("Insert into inventory_monitor(Qty,Inv_Sno,BranchId,CTripid) values(@Qty,@Inv_Sno,@BranchId,@ctripid)");
                                    cmd.Parameters.AddWithValue("@Qty", o.ReceivedQty);
                                    cmd.Parameters.AddWithValue("@Inv_Sno", o.InvSno);
                                    cmd.Parameters.AddWithValue("@BranchId", b_bid);
                                    cmd.Parameters.AddWithValue("@ctripid", TripdataSno);
                                    vdbmngr.insert(cmd);
                                }
                            }

                        }
                        cmd = new MySqlCommand("update invtransactions12 set Qty=@Qty,DOE=@DOE,CollectionTime=@collectiontime where FromTran=@From and B_Inv_Sno=@B_Inv_Sno and EmpID=@EmpID and ToTran=@To and TransType=@TransType");
                        cmd.Parameters.AddWithValue("@B_Inv_Sno", o.InvSno);
                        cmd.Parameters.AddWithValue("@Qty", o.ReceivedQty);
                        cmd.Parameters.AddWithValue("@DOE", ServerDateCurrentdate);
                        cmd.Parameters.AddWithValue("@collectiontime", ServerDateCurrentdate);
                        cmd.Parameters.AddWithValue("@From", b_bid);
                        cmd.Parameters.AddWithValue("@TransType", "3");
                        cmd.Parameters.AddWithValue("@EmpID", context.Session["userdata_sno"].ToString());
                        cmd.Parameters.AddWithValue("@To", TripdataSno);
                        if (vdbmngr.Update(cmd) == 0)
                        {
                            cmd = new MySqlCommand("Insert into  invtransactions12(B_Inv_Sno,Qty,DOE,EmpID,FromTran,ToTran,TransType,CollectionTime) values(@B_Inv_Sno,@Qty,@DOE,@EmpID,@From,@To,@TransType,@collectiontime)");
                            cmd.Parameters.AddWithValue("@B_Inv_Sno", o.InvSno);
                            cmd.Parameters.AddWithValue("@Qty", o.ReceivedQty);
                            cmd.Parameters.AddWithValue("@DOE", ServerDateCurrentdate);
                            cmd.Parameters.AddWithValue("@collectiontime", ServerDateCurrentdate);
                            cmd.Parameters.AddWithValue("@From", b_bid);
                            cmd.Parameters.AddWithValue("@TransType", "3");
                            cmd.Parameters.AddWithValue("@EmpID", context.Session["userdata_sno"].ToString());
                            cmd.Parameters.AddWithValue("@To", TripdataSno);
                            vdbmngr.insert(cmd);
                        }
                        #endregion
                    }
                }
            }
        }
        catch (Exception ex)
        {

        }
    }
    public class collectiondetails
    {
        public string sno { get; set; }
        public string AmountPaid { get; set; }
        public string Denominations { get; set; }

    }
    private void btnEditCashbookSaveClick(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            string SalesOffice = context.Request["SalesOfficeID"];
            string hdncashsno = context.Request["hdncashsno"];
            string SubAmount = context.Request["SubAmount"];
            string Denominations = context.Request["Denominations"];
            string UserID = context.Session["empid"].ToString();
            cmd = new MySqlCommand("Update collections set AmountPaid=@AmountPaid,Denominations=@Denominations, vempid=@vempid where BranchId=@BranchId and sno=@sno");
            cmd.Parameters.AddWithValue("@AmountPaid", SubAmount);
            cmd.Parameters.AddWithValue("@Denominations", Denominations);
            cmd.Parameters.AddWithValue("@BranchId", SalesOffice);
            cmd.Parameters.AddWithValue("@sno", hdncashsno);
            cmd.Parameters.AddWithValue("@vempid", UserID);
            vdbmngr.Update(cmd);
            string msg = "CashBook updated successfully";
            string Response = GetJson(msg);
            context.Response.Write(Response);
        }
        catch (Exception ex)
        {
            string msg = ex.Message;
            string Response = GetJson(msg);
            context.Response.Write(Response);
        }
    }
    private void GetEditCashBookValues(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            string SalesOffice = context.Request["SalesOffice"];
            string IndDate = context.Request["IndDate"];
            DateTime dtinddate = Convert.ToDateTime(IndDate);
            cmd = new MySqlCommand("SELECT sno,AmountPaid,Denominations FROM collections WHERE (Branchid = @BranchID) AND (PaidDate BETWEEN @d1 AND @d2)");
            cmd.Parameters.AddWithValue("@BranchID", SalesOffice);
            cmd.Parameters.AddWithValue("@d1", GetLowDate(dtinddate));
            cmd.Parameters.AddWithValue("@d2", GetHighDate(dtinddate));
            DataTable dtCash = vdbmngr.SelectQuery(cmd).Tables[0];
            List<collectiondetails> collectionlist = new List<collectiondetails>();
            if (dtCash.Rows.Count > 0)
            {
                foreach (DataRow dr in dtCash.Rows)
                {
                    collectiondetails details = new collectiondetails();
                    details.sno = dr["sno"].ToString();
                    details.AmountPaid = dr["AmountPaid"].ToString();
                    details.Denominations = dr["Denominations"].ToString();
                    collectionlist.Add(details);
                }
                string response = GetJson(collectionlist);
                context.Response.Write(response);
            }

        }
        catch (Exception ex)
        {
        }
    }
    class VoucherPrintdetails1
    {
        public string voucherid { get; set; }
        public string approveemp { get; set; }
        public string date { get; set; }
        public string nameof { get; set; }
        public string Remarks { get; set; }
        public string vouchertype { get; set; }
        public string amount { get; set; }
        public string branchid { get; set; }
        public string VoucherID { get; set; }
        public string Title { get; set; }
        public string lblReceived { get; set; }
    }
    private void Get_Voucher_Print_Details(HttpContext context)//akbar
    {

        try
        {
            vdbmngr = new VehicleDBMgr();
            string BrachSOID = "";
            if (context.Session["BrachSOID"] == null)
            {
                BrachSOID = context.Session["branch"].ToString();
            }
            else
            {
                BrachSOID = context.Session["BrachSOID"].ToString();
            }
            string VoucherID = context.Request["VoucherID"].ToString();
            string title = context.Session["TitleName"].ToString();
            // cmd = new MySqlCommand("SELECT cashpayables.onNameof, cashpayables.DOE, cashpayables.Sno, cashpayables.Amount, cashpayables.Remarks,cashpayables.ApprovalRemarks, cashpayables.VoucherType, empmanage.EmpName FROM cashpayables INNER JOIN empmanage ON cashpayables.Approvedby = empmanage.Sno WHERE (cashpayables.VocherID = @VocherID) AND (cashpayables.BranchID = @BranchID)");
            cmd = new MySqlCommand("SELECT cashpayables.onNameof, cashpayables.DOE,cashpayables.VocherID, cashpayables.Sno, cashpayables.Amount, cashpayables.ApprovedAmount, cashpayables.Remarks, cashpayables.ApprovalRemarks,cashpayables.VoucherType, empmanage.EmpName FROM cashpayables LEFT OUTER JOIN empmanage ON cashpayables.Approvedby = empmanage.Sno WHERE (cashpayables.Sno = @VocherID) AND (cashpayables.BranchID = @BranchID)");
            // cmd = new MySqlCommand("SELECT cashpayables.onNameof, cashpayables.DOE,cashpayables.VocherID, cashpayables.Sno, cashpayables.Amount, cashpayables.ApprovedAmount, cashpayables.Remarks, cashpayables.ApprovalRemarks,cashpayables.VoucherType, empmanage.EmpName FROM cashpayables LEFT OUTER JOIN empmanage ON cashpayables.Approvedby = empmanage.Sno WHERE (cashpayables.Sno = @VocherID) "); 
            cmd.Parameters.AddWithValue("@VocherID", VoucherID);
            cmd.Parameters.AddWithValue("@BranchID", BrachSOID);
            DataTable dtCash = vdbmngr.SelectQuery(cmd).Tables[0];
            List<VoucherPrintdetails1> VoucherPrintdetailslist = new List<VoucherPrintdetails1>();
            cmd = new MySqlCommand("SELECT sno, BranchName, BranchCode FROM branchdata WHERE (sno = @BranchID)");
            cmd.Parameters.AddWithValue("@BranchID", BrachSOID);
            DataTable dtCode = vdbmngr.SelectQuery(cmd).Tables[0];

            string voucherid = "";
            DateTime ServerDateCurrentdate = VehicleDBMgr.GetTime(vdbmngr.conn);
            DateTime dtapril = new DateTime();
            DateTime dtmarch = new DateTime();
            int currentyear = ServerDateCurrentdate.Year;
            int nextyear = ServerDateCurrentdate.Year + 1;
            int currntyearnum = 0;
            int nextyearnum = 0;
            if (ServerDateCurrentdate.Month > 3)
            {
                string apr = "4/1/" + currentyear;
                dtapril = DateTime.Parse(apr);
                string march = "3/31/" + nextyear;
                dtmarch = DateTime.Parse(march);
                currntyearnum = currentyear;
                nextyearnum = nextyear;
            }
            if (ServerDateCurrentdate.Month <= 3)
            {
                string apr = "4/1/" + (currentyear - 1);
                dtapril = DateTime.Parse(apr);
                string march = "3/31/" + (nextyear - 1);
                dtmarch = DateTime.Parse(march);
                currntyearnum = currentyear - 1;
                nextyearnum = nextyear - 1;
            }
            if (dtCash.Rows.Count > 0)
            {
                VoucherPrintdetails1 obj1 = new VoucherPrintdetails1();
                //lblVoucherno.Text = txtVoucherNo.Text;
                voucherid = dtCode.Rows[0]["BranchCode"].ToString() + "/VOC/" + dtapril.ToString("yy") + "-" + dtmarch.ToString("yy") + "/" + dtCash.Rows[0]["VocherID"].ToString();
                obj1.voucherid = voucherid;
                string DOE = dtCash.Rows[0]["DOE"].ToString();
                DateTime dtDOE = Convert.ToDateTime(DOE);

                obj1.approveemp = dtCash.Rows[0]["EmpName"].ToString();

                string ChangedTime = dtDOE.ToString("dd/MMM/yyyy");
                obj1.date = ChangedTime;
                obj1.nameof = dtCash.Rows[0]["onNameof"].ToString();
                string AppRemarks = dtCash.Rows[0]["ApprovalRemarks"].ToString();
                if (AppRemarks == "")
                {
                    obj1.Remarks = dtCash.Rows[0]["Remarks"].ToString();
                }
                else
                {
                    obj1.Remarks = dtCash.Rows[0]["ApprovalRemarks"].ToString();
                }
                obj1.vouchertype = dtCash.Rows[0]["VoucherType"].ToString().ToUpper() + " VOUCHER";
                obj1.amount = dtCash.Rows[0]["Amount"].ToString();
                obj1.VoucherID = VoucherID;
                obj1.branchid = BrachSOID;

                obj1.Title = title;
                string Amont = "";
                if (dtCash.Rows[0]["VoucherType"].ToString() == "Credit")
                {
                    Amont = dtCash.Rows[0]["ApprovedAmount"].ToString();
                }
                else
                {
                    Amont = dtCash.Rows[0]["Amount"].ToString();
                }
                string[] Ones = { "", "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine", "Ten", "Eleven", "Twelve", "Thirteen", "Fourteen", "Fifteen", "Sixteen", "Seventeen", "Eighteen", "Ninteen" };

                string[] Tens = { "Ten", "Twenty", "Thirty", "Fourty", "Fifty", "Sixty", "Seventy", "Eighty", "Ninty" };

                int Num = int.Parse(Amont);

                string letters = NumToWordBD(Num) + " Rupees Only";
                obj1.lblReceived = letters;

                VoucherPrintdetailslist.Add(obj1);
                string response = GetJson(VoucherPrintdetailslist);
                context.Response.Write(response);
            }
        }
        catch
        {
        }
    }
    public class employeedetails
    {
        public string employeename { get; set; }
        public string logintime { get; set; }
        public string logouttime { get; set; }
        public string sessiontimeout { get; set; }
        public string ipaddress { get; set; }
        public string devicetype { get; set; }
        public string indate { get; set; }
        public string intime { get; set; }
        public string outdate { get; set; }
        public string outtime { get; set; }
        public string timeinterval { get; set; }
        public string sno { get; set; }
    }
    private void btn_getlogininfoemployee_details(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            string BranchID = context.Session["branch"].ToString();
            string employeeid = context.Request["employeeid"];
            string fromdate = context.Request["fromdate"];
            string todate = context.Request["todate"];
            string date = context.Request["date"];
            DateTime dtfromdate = Convert.ToDateTime(fromdate);
            DateTime dttodate = Convert.ToDateTime(todate);
            DateTime dtdate = Convert.ToDateTime(date);
            if (employeeid == "" || employeeid == null)
            {
                cmd = new MySqlCommand("SELECT   t1.UserId, t1.UserName, t1.devicetype, t1.IpAddress FROM  (SELECT  logininfo.UserId, logininfo.UserName, MIN(logininfo.sno) AS sno, logininfo.devicetype, logininfo.IpAddress FROM  logininfo INNER JOIN empmanage ON logininfo.UserId = empmanage.sno WHERE  (logininfo.Logintime BETWEEN @d1 AND @d2) AND (empmanage.branch = @branchid) GROUP BY logininfo.UserId, logininfo.UserName, logininfo.devicetype, logininfo.IpAddress) AS t1 RIGHT OUTER JOIN (SELECT        UserId, MIN(sno) AS sno FROM            logininfo AS logininfo_1 WHERE        (Logintime BETWEEN @d1 AND @d2) GROUP BY UserId) AS t2 ON t1.sno = t2.sno WHERE  (t1.sno > 0) ORDER BY t1.sno");
                cmd.Parameters.AddWithValue("@d1", GetLowDate(dtdate));
                cmd.Parameters.AddWithValue("@d2", GetHighDate(dtdate));
                cmd.Parameters.AddWithValue("@branchid", BranchID);
            }
            else
            {
                cmd = new MySqlCommand("SELECT   logininfo.sno, logininfo.UserId, logininfo.UserName, logininfo.Logintime, logininfo.SessionPeriod, logininfo.LogoutTime, logininfo.IpAddress,logininfo.devicetype, empmanage.Branch FROM logininfo INNER JOIN empmanage ON logininfo.UserId = empmanage.Sno WHERE (empmanage.Branch = @branchid) AND (logininfo.Logintime BETWEEN @d1 AND @d2) AND (logininfo.UserId = @userid)      ORDER BY  logininfo.sno    DESC  LIMIT 1   ");
                //cmd = new MySqlCommand("SELECT logininfo.UserId, logininfo.UserName, logininfo.Logintime, logininfo.SessionPeriod, logininfo.LogoutTime, logininfo.IpAddress, logininfo.sno, logininfo.devicetype, empmanage.Branch FROM logininfo INNER JOIN empmanage ON logininfo.UserId = empmanage.Sno WHERE (empmanage.Branch = @branchid) AND (logininfo.Logintime BETWEEN @d1 AND @d2) AND (logininfo.UserId = @userid)   DESC  LIMIT 10 ");
                cmd.Parameters.AddWithValue("@d1", GetLowDate(dtfromdate));
                cmd.Parameters.AddWithValue("@d2", GetHighDate(dttodate));
                cmd.Parameters.AddWithValue("@branchid", BranchID);
                cmd.Parameters.AddWithValue("@userid", employeeid);
            }
            DataTable dtloginfo = vdbmngr.SelectQuery(cmd).Tables[0];
            List<employeedetails> emloyeeedetalis = new List<employeedetails>();
            if (dtloginfo.Rows.Count > 0)
            {
                foreach (DataRow dr in dtloginfo.Rows)
                {
                    employeedetails details = new employeedetails();
                    details.sno = dr["UserId"].ToString();
                    details.employeename = dr["UserName"].ToString();
                    details.ipaddress = dr["IpAddress"].ToString();
                    details.devicetype = dr["devicetype"].ToString();
                    emloyeeedetalis.Add(details);
                }
                string response = GetJson(emloyeeedetalis);
                context.Response.Write(response);
            }
        }
        catch
        {

        }
    }
    private void get_employee_details(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            string BranchID = context.Session["branch"].ToString();


            cmd = new MySqlCommand("SELECT  Sno, UserName, Password, LevelType, Branch, flag, Userdata_sno, Owner, EmpName, Address, Mobno, Email, LWC, RefName, Dept_Sno, MTarget, WTarget,DTarget, EmpType, Role, empid, street, city, mandal, distic, state, pincode, tinno, cstno, panno, Emp_PIC, loginstatus, otpstatus FROM empmanage  WHERE (Branch = @branch)");

            //cmd = new MySqlCommand("SELECT  logininfo.UserId, logininfo.UserName, logininfo.Logintime, CONVERT(VARCHAR(11), logininfo.Logintime, 106) AS indate, CONVERT(VARCHAR(11), logininfo.Logintime, 108) AS intime, CONVERT(VARCHAR(11), logininfo.LogoutTime, 106) AS outdate, CONVERT(VARCHAR(11), logininfo.LogoutTime, 108) AS outtime, logininfo.SessionPeriod, logininfo.LogoutTime, logininfo.IpAddress, logininfo.sno, logininfo.devicetype, employee_erp.branchid, logininfo.Logintime AS Expr1, logininfo.LogoutTime AS Expr2 FROM logininfo INNER JOIN employee_erp ON logininfo.UserId = employee_erp.sno WHERE (logininfo.Logintime BETWEEN @d1 AND @d2) AND (employee_erp.branchid = @branchid) AND (logininfo.UserId = @userid) ORDER BY logininfo.sno");
            cmd.Parameters.AddWithValue("@branch", BranchID);


            DataTable dtloginfo = vdbmngr.SelectQuery(cmd).Tables[0];
            List<employeedetails> emloyeeedetalis = new List<employeedetails>();

            foreach (DataRow dr in dtloginfo.Rows)
            {

                employeedetails details = new employeedetails();
                details.sno = dr["Sno"].ToString();
                details.employeename = dr["EmpName"].ToString();
                emloyeeedetalis.Add(details);

            }
            string response = GetJson(emloyeeedetalis);
            context.Response.Write(response);
        }
        catch
        {

        }
    }
    private void get_logindetails_eachemployee(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            string BranchID = context.Session["branch"].ToString();
            string employeeid = context.Request["userid"];
            string fromdate = context.Request["fromdate"];
            string todate = context.Request["todate"];
            string date = context.Request["date"];
            string session = context.Request["session"];
            DateTime dtfromdate = Convert.ToDateTime(fromdate);
            DateTime dttodate = Convert.ToDateTime(todate);
            DateTime dtdate = Convert.ToDateTime(date);
            //if (session == "empwise")
            //{
            cmd = new MySqlCommand("SELECT  empmanage.UserName,empmanage.Branch, empmanage.EmpName, logininfo.Logintime, logininfo.LogoutTime,empmanage.UserName, logininfo.SessionPeriod, logininfo.IpAddress, logininfo.devicetype,logininfo.status, logininfo.UserId FROM  empmanage INNER JOIN logininfo ON empmanage.Sno = logininfo.UserId WHERE (logininfo.Logintime BETWEEN @d1 AND @d2) AND (empmanage.Branch = @branchid) AND (logininfo.UserId = @userid)");

            //cmd = new MySqlCommand("SELECT  logininfo.UserId, logininfo.UserName, logininfo.Logintime, CONVERT(VARCHAR(11), logininfo.Logintime, 106) AS indate, CONVERT(VARCHAR(11), logininfo.Logintime, 108) AS intime, CONVERT(VARCHAR(11), logininfo.LogoutTime, 106) AS outdate, CONVERT(VARCHAR(11), logininfo.LogoutTime, 108) AS outtime, logininfo.SessionPeriod, logininfo.LogoutTime, logininfo.IpAddress, logininfo.sno, logininfo.devicetype, employee_erp.branchid, logininfo.Logintime AS Expr1, logininfo.LogoutTime AS Expr2 FROM logininfo INNER JOIN employee_erp ON logininfo.UserId = employee_erp.sno WHERE (logininfo.Logintime BETWEEN @d1 AND @d2) AND (employee_erp.branchid = @branchid) AND (logininfo.UserId = @userid) ORDER BY logininfo.sno");
            cmd.Parameters.AddWithValue("@userid", employeeid);
            cmd.Parameters.AddWithValue("@d1", GetLowDate(dtfromdate));
            cmd.Parameters.AddWithValue("@d2", GetHighDate(dttodate));
            cmd.Parameters.AddWithValue("@branchid", BranchID);
            DataTable dtloginfo = vdbmngr.SelectQuery(cmd).Tables[0];
            List<employeedetails> emloyeeedetalis = new List<employeedetails>();
            if (dtloginfo.Rows.Count > 0)
            {
                foreach (DataRow dr in dtloginfo.Rows)
                {
                    string dLogoutTime = dr["LogoutTime"].ToString();

                    employeedetails details = new employeedetails();
                    details.sno = dr["UserId"].ToString();
                    details.employeename = dr["UserName"].ToString();
                    string logintime = dr["Logintime"].ToString();

                    string iTime = logintime.ToString();
                    DateTime dtFrmDate = Convert.ToDateTime(iTime);
                    string intime = dtFrmDate.ToString("HH:mm");
                    string indate = dtFrmDate.ToString("dd/MMM/yy");
                    string oTime = logintime.ToString();
                    DateTime dtLogout = Convert.ToDateTime(oTime);
                    string outtime = dtLogout.ToString("HH:mm");//
                    string outdate = dtLogout.ToString("dd/MMM/yy");
                    details.logintime = dr["Logintime"].ToString();
                    details.logouttime = dr["LogoutTime"].ToString();
                    details.sessiontimeout = dr["SessionPeriod"].ToString();
                    details.ipaddress = dr["IpAddress"].ToString();
                    details.devicetype = dr["devicetype"].ToString();
                    details.indate = indate;
                    details.intime = intime;
                    string LogoutTimes = dr["LogoutTime"].ToString();
                    if (LogoutTimes != "")
                    {
                        details.outdate = outdate;
                        details.outtime = outtime;
                        string Logintime = dr["Logintime"].ToString();
                        string LogoutTime = dr["LogoutTime"].ToString();
                        TimeSpan difference = DateTime.Parse(outtime) - DateTime.Parse(intime);
                        double hourDiff = difference.TotalHours;
                        double minutes = difference.TotalMinutes;
                        details.timeinterval = Math.Round(hourDiff, 2).ToString();
                    }
                    else
                    {
                        string t = "";
                        details.outdate = t.ToString();
                        details.outtime = t.ToString();
                        details.timeinterval = t.ToString();
                    }
                    emloyeeedetalis.Add(details);
                    //}
                }
            }
            string response = GetJson(emloyeeedetalis);
            context.Response.Write(response);
        }
        catch
        {

        }
    }
    public class HrmsEmployee
    {
        public string empid { get; set; }
        public string fullname { get; set; }
        public string employee_num { get; set; }
        public string ftype { get; set; }
        public string ledgername { get; set; }
        public string designation { get; set; }
        public string empname { get; set; }
        public string netpay { get; set; }
    }
    public class RouteClassification
    {
        public string RouteName { get; set; }
        public string AgentName { get; set; }
        public string SaleValue { get; set; }
        public string PaidAmount { get; set; }
        public string salesman { get; set; }
        public string salestypeid { get; set; }
        public string Routeid { get; set; }
        public string SalesType { get; set; }
        public string SRname { get; set; }
        public string difference { get; set; }
        public string BranchID { get; set; }
        public string BranchName { get; set; }
    }
    public class CategoryClassifications
    {
        public string SaleValue { get; set; }
        public string PaidAmount { get; set; }
        public string SalesType { get; set; }
        public string difference { get; set; }
        public string salesbranchid { get; set; }
    }
    public class ClassificationClass
    {
        public List<RouteClassification> RouteClassification { get; set; }
        public List<CategoryClassifications> CategoryClassifications { get; set; }
    }
    #region
    private void GetBranchwiseDetailsInformation(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            string BranchID = context.Request["BranchID"];
            string Type = context.Request["Type"];
            string ddlDataType = context.Request["ddlDataType"];
            string ddlbarnchCategory = context.Request["ddlbarnchCategory"];
            if (ddlbarnchCategory == "BranchWiseCollections")
            {
                ddlDataType = "Value";
            }
            else
            {
            }

            string s = context.Request["IndDate"];
            context.Session["IndDate"] = s;
            var dt = DateTime.ParseExact(s, "ddd MMM dd yyyy HH:mm:ss 'GMT'zzz", System.Globalization.CultureInfo.InvariantCulture);
            string IndDate = dt.ToString("yyyy-MM-dd");
            DateTime ServerDateCurrentdate = Convert.ToDateTime(IndDate);
            DateTime Selecteddate = ServerDateCurrentdate.AddDays(-1);
            string e = context.Request["Todate"];
            context.Session["Todate"] = e;
            var edt = DateTime.ParseExact(e, "ddd MMM dd yyyy HH:mm:ss 'GMT'zzz", System.Globalization.CultureInfo.InvariantCulture);
            string Tdate = edt.ToString("yyyy-MM-dd");
            DateTime ToDate = Convert.ToDateTime(Tdate);
            DateTime Selectedtodate = ToDate.AddDays(-1);
            DataTable dtTotalDispatches = new DataTable();
            List<approvalplan> approvalplanList = new List<approvalplan>();
            List<GroupWiseClass> groupwiseclasslist = new List<GroupWiseClass>();

            List<MainGroupWiseClass> maingroupwiselist = new List<MainGroupWiseClass>();
            dtTotalDispatches.Columns.Add("sno");
            dtTotalDispatches.Columns.Add("BranchID");
            dtTotalDispatches.Columns.Add("BranchName");
            dtTotalDispatches.Columns.Add("Total Indent");
            dtTotalDispatches.Columns.Add("Total Dispatch");
            dtTotalDispatches.Columns.Add("Total Sale");
            dtTotalDispatches.Columns.Add("Sale Value in Rs");
            dtTotalDispatches.Columns.Add("Total Collection");
            dtTotalDispatches.Columns.Add("Total Due");
            dtTotalDispatches.Columns.Add("Total Leaks In Ltrs");
            dtTotalDispatches.Columns.Add("Total VLeaks In Ltrs");
            dtTotalDispatches.Columns.Add("Total Returns in Ltrs");
            dtTotalDispatches.Columns.Add("Total VReturns in Ltrs");
            dtTotalDispatches.Columns.Add("Total Short in Ltrs");
            dtTotalDispatches.Columns.Add("Total Free in Ltrs");
            dtTotalDispatches.Columns.Add("Crates Issued");
            dtTotalDispatches.Columns.Add("Crates Return");
            dtTotalDispatches.Columns.Add("Cans Issued");
            dtTotalDispatches.Columns.Add("Cans Return");
            dtTotalDispatches.Columns.Add("Opp Stock");
            dtTotalDispatches.Columns.Add("Clo Stock");
            int i = 1;
            DataTable dtDispatchesbranches = new DataTable();
            DataTable dtbranches_indent_sale = new DataTable();
            DataTable dtbranches_leaksreturns = new DataTable();
            DataTable dtOpp = new DataTable();
            DataTable dtClo = new DataTable();
            DataTable dtCollectionamount = new DataTable();
            DataTable tempbranchindentsale = new DataTable();
            DataTable tempbranchopening = new DataTable();
            DataTable tempbranchclosing = new DataTable();
            DataTable tempbranchcollection = new DataTable();
            DataTable tempplantDispatchqty = new DataTable();
            DataTable dtDispatchMilkQty = new DataTable();
            //DataTable dtDispatchMilkQty = new DataTable();
            //DataTable dtDispatchMilkQty = new DataTable();

            string SalesType = context.Session["salestype"].ToString();
            //if (Type == "Plant Wise")
            //{
            if (BranchID == "8009")
            {
                cmd = new MySqlCommand("SELECT  branchmappingtable.SubBranch, branchmappingtable.SuperBranch, branchmappingtable.SubBranch AS Expr1, branchdata.BranchName,branchdata.SalesType FROM  branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno WHERE  (branchmappingtable.SuperBranch = @Branchid) GROUP BY branchmappingtable.SubBranch");
                cmd.Parameters.AddWithValue("@Branchid", BranchID);
                DataTable BtGroupBranches = vdbmngr.SelectQuery(cmd).Tables[0];
                cmd = new MySqlCommand("SELECT   TripInfo.Sno, ProductInfo.Categoryname, ROUND(SUM(ProductInfo.Qty), 2) AS dispatchqty, TripInfo.I_Date, ProductInfo.CatSno, TripInfo.BranchName, TripInfo.BranchID, TripInfo.Branch_Id, TripInfo.GroupId FROM (SELECT  tripdata.Sno, tripdata.I_Date, branchdata_1.BranchName, dispatch.BranchID, dispatch.Branch_Id, dispatch.GroupId FROM  branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE  (dispatch.GroupId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT  Categoryname, Sno, Qty, CatSno FROM (SELECT  products_category.sno AS CatSno, products_category.Categoryname, tripdata_1.Sno, tripsubdata.Qty FROM  tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno INNER JOIN productsdata ON tripsubdata.ProductId = productsdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno WHERE  (tripdata_1.AssignDate BETWEEN @d1 AND @d2)) TripSubInfo) ProductInfo ON TripInfo.Sno = ProductInfo.Sno GROUP BY TripInfo.Branch_Id ORDER BY TripInfo.Branch_Id");
                // cmd = new MySqlCommand("SELECT   dispatch.sno, branchdata.BranchName, dispatch.Branch_Id, dispatch.BranchID, ROUND(SUM(tripsubdata.Qty),2) AS dispatchqty FROM dispatch INNER JOIN branchdata ON dispatch.Branch_Id = branchdata.sno INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN (SELECT  Sno, I_Date FROM tripdata WHERE  (AssignDate BETWEEN @d1 AND @d2)) tripdat ON triproutes.Tripdata_sno = tripdat.Sno INNER JOIN tripsubdata ON tripdat.Sno = tripsubdata.Tripdata_sno WHERE (dispatch.GroupId  = @branchid)  GROUP BY dispatch.Branch_Id");
                cmd.Parameters.AddWithValue("@branch", BranchID);
                cmd.Parameters.AddWithValue("@d1", GetLowDate(Selecteddate));
                cmd.Parameters.AddWithValue("@d2", GetHighDate(Selectedtodate));
                dtDispatchesbranches = vdbmngr.SelectQuery(cmd).Tables[0];
                if (ddlDataType == "Quantity")
                {
                    foreach (DataRow drgrbranch in BtGroupBranches.Rows)
                    {
                        if (drgrbranch["SubBranch"].ToString() == "172")
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty), 2) AS salevalue, branchmappingtable.SuperBranch FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo  WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch NOT IN (538,  1801, 3625)) GROUP BY branchmappingtable.SuperBranch");

                            //cmd = new MySqlCommand("SELECT  SubBranch, ROUND(SUM(DeliveryQty), 2) AS DeliveryQty, ROUND(SUM(DeliveryQty * UnitCost), 2) AS salevalue, SuperBranch FROM  (SELECT  t1.SubBranch, t1.SuperBranch, t2.DeliveryQty, t2.unitQty, t2.UnitCost FROM (SELECT branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch FROM  branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch WHERE (branchmappingtable_1.SuperBranch = @branchid) AND (branchmappingtable_1.SubBranch NOT IN(2749,2948,538,3625)) GROUP BY branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch) t1 LEFT OUTER JOIN (SELECT  indents_subtable.DeliveryQty, indents_subtable.unitQty, indents_subtable.UnitCost, branchmappingtable_2.SuperBranch, branchmappingtable_2.SubBranch FROM   branchmappingtable branchmappingtable_2 INNER JOIN (SELECT  IndentNo, Branch_id, I_date FROM   indents WHERE  (I_date BETWEEN @d1 AND @d2)) ind ON branchmappingtable_2.SubBranch = ind.Branch_id INNER JOIN indents_subtable ON ind.IndentNo = indents_subtable.IndentNo) t2 ON t2.SuperBranch = t1.SubBranch) derivedtbl_1 GROUP BY SuperBranch");
                            cmd.Parameters.AddWithValue("@BranchID", drgrbranch["SubBranch"].ToString());
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(Selecteddate));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(Selectedtodate));
                            tempbranchindentsale = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else if (drgrbranch["SubBranch"].ToString() == "3625")
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty), 2) AS salevalue, branchmappingtable.SuperBranch FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo  WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) GROUP BY branchmappingtable.SuperBranch");

                            //cmd = new MySqlCommand("SELECT  SubBranch, ROUND(SUM(DeliveryQty), 2) AS DeliveryQty,  ROUND(SUM(DeliveryQty * UnitCost), 2) AS salevalue, SuperBranch FROM  (SELECT  t1.SubBranch, t1.SuperBranch, t2.DeliveryQty, t2.unitQty, t2.UnitCost FROM (SELECT branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch FROM  branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch WHERE (branchmappingtable_1.SuperBranch = @branchid) AND (branchmappingtable_1.SubBranch IN(4609,3625)) GROUP BY branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch) t1 LEFT OUTER JOIN (SELECT  indents_subtable.DeliveryQty, indents_subtable.unitQty, indents_subtable.UnitCost, branchmappingtable_2.SuperBranch, branchmappingtable_2.SubBranch FROM   branchmappingtable branchmappingtable_2 INNER JOIN (SELECT  IndentNo, Branch_id, I_date FROM   indents WHERE  (I_date BETWEEN @d1 AND @d2)) ind ON branchmappingtable_2.SubBranch = ind.Branch_id INNER JOIN indents_subtable ON ind.IndentNo = indents_subtable.IndentNo) t2 ON t2.SuperBranch = t1.SubBranch) derivedtbl_1 GROUP BY SuperBranch");
                            cmd.Parameters.AddWithValue("@BranchID", drgrbranch["SubBranch"].ToString());
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(Selecteddate));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(Selectedtodate));
                            tempbranchindentsale = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else if (drgrbranch["SubBranch"].ToString() == "1801")
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty), 2) AS salevalue, branchmappingtable.SuperBranch FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo  WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) GROUP BY branchmappingtable.SuperBranch");

                            //cmd = new MySqlCommand("SELECT  SubBranch, ROUND(SUM(DeliveryQty), 2) AS DeliveryQty,  ROUND(SUM(DeliveryQty * UnitCost), 2) AS salevalue, SuperBranch FROM  (SELECT  t1.SubBranch, t1.SuperBranch, t2.DeliveryQty, t2.unitQty, t2.UnitCost FROM (SELECT branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch FROM  branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch WHERE (branchmappingtable_1.SuperBranch = @branchid) GROUP BY branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch) t1 LEFT OUTER JOIN (SELECT  indents_subtable.DeliveryQty, indents_subtable.unitQty, indents_subtable.UnitCost, branchmappingtable_2.SuperBranch, branchmappingtable_2.SubBranch FROM   branchmappingtable branchmappingtable_2 INNER JOIN (SELECT  IndentNo, Branch_id, I_date FROM   indents WHERE  (I_date BETWEEN @d1 AND @d2)) ind ON branchmappingtable_2.SubBranch = ind.Branch_id INNER JOIN indents_subtable ON ind.IndentNo = indents_subtable.IndentNo) t2 ON t2.SuperBranch = t1.SubBranch) derivedtbl_1 GROUP BY SuperBranch");
                            cmd.Parameters.AddWithValue("@BranchID", drgrbranch["SubBranch"].ToString());
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(Selecteddate));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(Selectedtodate));
                            tempbranchindentsale = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty), 2) AS salevalue, branchmappingtable.SuperBranch FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) GROUP BY branchmappingtable.SuperBranch");
                            //cmd = new MySqlCommand("SELECT  SubBranch, ROUND(SUM(DeliveryQty), 2) AS DeliveryQty,  ROUND(SUM(DeliveryQty * UnitCost), 2) AS salevalue, SuperBranch FROM  (SELECT  t1.SubBranch, t1.SuperBranch, t2.DeliveryQty, t2.unitQty, t2.UnitCost FROM (SELECT branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch FROM  branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch WHERE (branchmappingtable_1.SuperBranch = @branchid) GROUP BY branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch) t1 LEFT OUTER JOIN (SELECT  indents_subtable.DeliveryQty, indents_subtable.unitQty, indents_subtable.UnitCost, branchmappingtable_2.SuperBranch, branchmappingtable_2.SubBranch FROM   branchmappingtable branchmappingtable_2 INNER JOIN (SELECT  IndentNo, Branch_id, I_date FROM   indents WHERE  (I_date BETWEEN @d1 AND @d2)) ind ON branchmappingtable_2.SubBranch = ind.Branch_id INNER JOIN indents_subtable ON ind.IndentNo = indents_subtable.IndentNo) t2 ON t2.SuperBranch = t1.SubBranch) derivedtbl_1 GROUP BY SuperBranch");
                            cmd.Parameters.AddWithValue("@BranchID", drgrbranch["SubBranch"].ToString());
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(Selecteddate));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(Selectedtodate));
                            tempbranchindentsale = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        dtbranches_indent_sale.Merge(tempbranchindentsale);
                    }
                }
                else
                {
                    foreach (DataRow drgrbranch in BtGroupBranches.Rows)
                    {
                        if (drgrbranch["SubBranch"].ToString() == "172")
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty), 2) AS salevalue, branchmappingtable.SuperBranch FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo  WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch NOT IN (538,  1801, 3625)) GROUP BY branchmappingtable.SuperBranch");
                            //cmd = new MySqlCommand("SELECT  SubBranch, ROUND(SUM(DeliveryQty), 2) AS DeliveryQty, ROUND(SUM(DeliveryQty * UnitCost), 2) AS salevalue, SuperBranch FROM  (SELECT  t1.SubBranch, t1.SuperBranch, t2.DeliveryQty, t2.unitQty, t2.UnitCost FROM (SELECT branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch FROM  branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch WHERE (branchmappingtable_1.SuperBranch = @branchid) AND (branchmappingtable_1.SubBranch NOT IN(2749,2948,538,3625)) GROUP BY branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch) t1 LEFT OUTER JOIN (SELECT  indents_subtable.DeliveryQty, indents_subtable.unitQty, indents_subtable.UnitCost, branchmappingtable_2.SuperBranch, branchmappingtable_2.SubBranch FROM   branchmappingtable branchmappingtable_2 INNER JOIN (SELECT  IndentNo, Branch_id, I_date FROM   indents WHERE  (I_date BETWEEN @d1 AND @d2)) ind ON branchmappingtable_2.SubBranch = ind.Branch_id INNER JOIN indents_subtable ON ind.IndentNo = indents_subtable.IndentNo) t2 ON t2.SuperBranch = t1.SubBranch) derivedtbl_1 GROUP BY SuperBranch");
                            cmd.Parameters.AddWithValue("@BranchID", drgrbranch["SubBranch"].ToString());
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(Selecteddate));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(Selectedtodate));
                            tempbranchindentsale = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else if (drgrbranch["SubBranch"].ToString() == "3625")
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty), 2) AS salevalue, branchmappingtable.SuperBranch FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo  WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) GROUP BY branchmappingtable.SuperBranch");
                            //cmd = new MySqlCommand("SELECT  SubBranch, ROUND(SUM(DeliveryQty), 2) AS DeliveryQty,  ROUND(SUM(DeliveryQty * UnitCost), 2) AS salevalue, SuperBranch FROM  (SELECT  t1.SubBranch, t1.SuperBranch, t2.DeliveryQty, t2.unitQty, t2.UnitCost FROM (SELECT branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch FROM  branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch WHERE (branchmappingtable_1.SuperBranch = @branchid) AND (branchmappingtable_1.SubBranch IN(4609,3625)) GROUP BY branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch) t1 LEFT OUTER JOIN (SELECT  indents_subtable.DeliveryQty, indents_subtable.unitQty, indents_subtable.UnitCost, branchmappingtable_2.SuperBranch, branchmappingtable_2.SubBranch FROM   branchmappingtable branchmappingtable_2 INNER JOIN (SELECT  IndentNo, Branch_id, I_date FROM   indents WHERE  (I_date BETWEEN @d1 AND @d2)) ind ON branchmappingtable_2.SubBranch = ind.Branch_id INNER JOIN indents_subtable ON ind.IndentNo = indents_subtable.IndentNo) t2 ON t2.SuperBranch = t1.SubBranch) derivedtbl_1 GROUP BY SuperBranch");
                            cmd.Parameters.AddWithValue("@BranchID", drgrbranch["SubBranch"].ToString());
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(Selecteddate));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(Selectedtodate));
                            tempbranchindentsale = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else if (drgrbranch["SubBranch"].ToString() == "1801")
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty), 2) AS salevalue, branchmappingtable.SuperBranch FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo  WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) GROUP BY branchmappingtable.SuperBranch");
                            //cmd = new MySqlCommand("SELECT  SubBranch, ROUND(SUM(DeliveryQty), 2) AS DeliveryQty,  ROUND(SUM(DeliveryQty * UnitCost), 2) AS salevalue, SuperBranch FROM  (SELECT  t1.SubBranch, t1.SuperBranch, t2.DeliveryQty, t2.unitQty, t2.UnitCost FROM (SELECT branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch FROM  branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch WHERE (branchmappingtable_1.SuperBranch = @branchid) GROUP BY branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch) t1 LEFT OUTER JOIN (SELECT  indents_subtable.DeliveryQty, indents_subtable.unitQty, indents_subtable.UnitCost, branchmappingtable_2.SuperBranch, branchmappingtable_2.SubBranch FROM   branchmappingtable branchmappingtable_2 INNER JOIN (SELECT  IndentNo, Branch_id, I_date FROM   indents WHERE  (I_date BETWEEN @d1 AND @d2)) ind ON branchmappingtable_2.SubBranch = ind.Branch_id INNER JOIN indents_subtable ON ind.IndentNo = indents_subtable.IndentNo) t2 ON t2.SuperBranch = t1.SubBranch) derivedtbl_1 GROUP BY SuperBranch");
                            cmd.Parameters.AddWithValue("@BranchID", drgrbranch["SubBranch"].ToString());
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(Selecteddate));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(Selectedtodate));
                            tempbranchindentsale = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty), 2) AS salevalue, branchmappingtable.SuperBranch FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) GROUP BY branchmappingtable.SuperBranch");
                            //cmd = new MySqlCommand("SELECT  SubBranch, ROUND(SUM(DeliveryQty), 2) AS DeliveryQty,  ROUND(SUM(DeliveryQty * UnitCost), 2) AS salevalue, SuperBranch FROM  (SELECT  t1.SubBranch, t1.SuperBranch, t2.DeliveryQty, t2.unitQty, t2.UnitCost FROM (SELECT branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch FROM  branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch WHERE (branchmappingtable_1.SuperBranch = @branchid) GROUP BY branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch) t1 LEFT OUTER JOIN (SELECT  indents_subtable.DeliveryQty, indents_subtable.unitQty, indents_subtable.UnitCost, branchmappingtable_2.SuperBranch, branchmappingtable_2.SubBranch FROM   branchmappingtable branchmappingtable_2 INNER JOIN (SELECT  IndentNo, Branch_id, I_date FROM   indents WHERE  (I_date BETWEEN @d1 AND @d2)) ind ON branchmappingtable_2.SubBranch = ind.Branch_id INNER JOIN indents_subtable ON ind.IndentNo = indents_subtable.IndentNo) t2 ON t2.SuperBranch = t1.SubBranch) derivedtbl_1 GROUP BY SuperBranch");
                            cmd.Parameters.AddWithValue("@BranchID", drgrbranch["SubBranch"].ToString());
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(Selecteddate));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(Selectedtodate));
                            tempbranchindentsale = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        dtbranches_indent_sale.Merge(tempbranchindentsale);
                    }
                    foreach (DataRow drgrbranch in BtGroupBranches.Rows)
                    {

                        if (drgrbranch["SubBranch"].ToString() == "172")
                        {
                            cmd = new MySqlCommand("SELECT    branchmappingtable.SuperBranch, ROUND(SUM(colltion.AmountPaid) / 2, 2) AS AmountPaid,branchdata.BranchName FROM  branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch INNER JOIN branchdata ON branchmappingtable.SuperBranch = branchdata.sno INNER JOIN modifiedroutes ON branchmappingtable.SubBranch = modifiedroutes.BranchID INNER JOIN (SELECT  RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo INNER JOIN (SELECT  Branchid, AmountPaid, PaidDate FROM  collections WHERE (PaymentType <> 'Incentive') AND (PaymentType <> 'Bank Transfer') AND (PaymentType <> 'Cheque') AND (PaidDate BETWEEN @d1 AND @d2)) colltion ON modifidroutssubtab.BranchID = colltion.Branchid WHERE (branchmappingtable.SuperBranch = @BranchId) AND (branchmappingtable.SubBranch NOT IN (538,  1801, 3625)) GROUP BY branchmappingtable.SuperBranch");
                            cmd.Parameters.AddWithValue("@BranchID", drgrbranch["SubBranch"].ToString());
                            cmd.Parameters.AddWithValue("@starttime", GetLowDate(Selecteddate).AddDays(1));
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(Selecteddate).AddDays(1));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(Selectedtodate).AddDays(1));
                            tempbranchcollection = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else if (drgrbranch["SubBranch"].ToString() == "3625")
                        {
                            cmd = new MySqlCommand("SELECT    branchmappingtable.SuperBranch, ROUND(SUM(colltion.AmountPaid) / 2, 2) AS AmountPaid,branchdata.BranchName FROM  branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch INNER JOIN branchdata ON branchmappingtable.SuperBranch = branchdata.sno INNER JOIN modifiedroutes ON branchmappingtable.SubBranch = modifiedroutes.BranchID INNER JOIN (SELECT  RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo INNER JOIN (SELECT  Branchid, AmountPaid, PaidDate FROM  collections WHERE (PaymentType <> 'Incentive') AND (PaymentType <> 'Bank Transfer') AND (PaymentType <> 'Cheque') AND (PaidDate BETWEEN @d1 AND @d2)) colltion ON modifidroutssubtab.BranchID = colltion.Branchid WHERE (branchmappingtable.SuperBranch = @BranchId) AND (branchmappingtable.SubBranch IN (4609, 3625)) GROUP BY branchmappingtable.SuperBranch");
                            cmd.Parameters.AddWithValue("@BranchID", drgrbranch["SubBranch"].ToString());
                            cmd.Parameters.AddWithValue("@starttime", GetLowDate(Selecteddate).AddDays(1));
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(Selecteddate).AddDays(1));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(Selectedtodate).AddDays(1));
                            tempbranchcollection = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else if (drgrbranch["SubBranch"].ToString() == "1801")
                        {
                            cmd = new MySqlCommand("SELECT    branchmappingtable.SuperBranch, ROUND(SUM(colltion.AmountPaid) / 2, 2) AS AmountPaid,branchdata.BranchName FROM  branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch INNER JOIN branchdata ON branchmappingtable.SuperBranch = branchdata.sno INNER JOIN modifiedroutes ON branchmappingtable.SubBranch = modifiedroutes.BranchID INNER JOIN (SELECT  RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo INNER JOIN (SELECT  Branchid, AmountPaid, PaidDate FROM  collections WHERE (PaymentType <> 'Incentive') AND (PaymentType <> 'Bank Transfer') AND (PaymentType <> 'Cheque') AND (PaidDate BETWEEN @d1 AND @d2)) colltion ON modifidroutssubtab.BranchID = colltion.Branchid WHERE (branchmappingtable.SuperBranch = @BranchId)  GROUP BY branchmappingtable.SuperBranch");
                            cmd.Parameters.AddWithValue("@BranchID", drgrbranch["SubBranch"].ToString());
                            cmd.Parameters.AddWithValue("@starttime", GetLowDate(Selecteddate).AddDays(1));
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(Selecteddate).AddDays(1));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(Selectedtodate).AddDays(1));
                            tempbranchcollection = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else if (drgrbranch["SubBranch"].ToString() == "158" || drgrbranch["SubBranch"].ToString() == "4626")
                        {
                            cmd = new MySqlCommand("SELECT    branchmappingtable.SuperBranch, ROUND(SUM(colltion.AmountPaid) / 2, 2) AS AmountPaid,branchdata.BranchName FROM  branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch INNER JOIN branchdata ON branchmappingtable.SuperBranch = branchdata.sno INNER JOIN modifiedroutes ON branchmappingtable.SubBranch = modifiedroutes.BranchID INNER JOIN (SELECT  RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo INNER JOIN (SELECT  Branchid, AmountPaid, PaidDate FROM  collections WHERE (PaymentType <> 'Incentive') AND (PaymentType <> 'Bank Transfer') AND (PaymentType <> 'Cheque') AND (PaidDate BETWEEN @d1 AND @d2)) colltion ON modifidroutssubtab.BranchID = colltion.Branchid WHERE (branchmappingtable.SuperBranch = @BranchId)  GROUP BY branchmappingtable.SuperBranch");
                            cmd.Parameters.AddWithValue("@BranchID", drgrbranch["SubBranch"].ToString());
                            cmd.Parameters.AddWithValue("@starttime", GetLowDate(Selecteddate).AddDays(1));
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(Selecteddate).AddDays(1));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(Selectedtodate).AddDays(1));
                            tempbranchcollection = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        dtCollectionamount.Merge(tempbranchcollection);
                    }
                }
            }
            else if (BranchID == "8012" || BranchID == "8013")
            {
                cmd = new MySqlCommand("SELECT  branchmappingtable.SubBranch, branchmappingtable.SuperBranch, branchmappingtable.SubBranch AS Expr1, branchdata.BranchName,branchdata.SalesType FROM  branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno WHERE  (branchmappingtable.SuperBranch = @Branchid) GROUP BY branchmappingtable.SubBranch");
                cmd.Parameters.AddWithValue("@Branchid", BranchID);
                DataTable BtGroupBranches = vdbmngr.SelectQuery(cmd).Tables[0];

                cmd = new MySqlCommand("SELECT   dispatch.sno, branchdata.BranchName, dispatch.Branch_Id, dispatch.BranchID, SUM(tripsubdata.Qty) AS dispatchqty FROM dispatch INNER JOIN branchdata ON dispatch.Branch_Id = branchdata.sno INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN (SELECT  Sno, I_Date FROM tripdata WHERE  (AssignDate BETWEEN @d1 AND @d2)) tripdat ON triproutes.Tripdata_sno = tripdat.Sno INNER JOIN tripsubdata ON tripdat.Sno = tripsubdata.Tripdata_sno WHERE (dispatch.CompanyId  = @branchid)  GROUP BY dispatch.Branch_Id");
                //cmd = new MySqlCommand("SELECT dispatch.sno, branchdata.BranchName, dispatch.Branch_Id, dispatch.BranchID, SUM(tripsubdata.Qty) AS dispatchqty,dispatch.Branch_id FROM dispatch INNER JOIN branchdata ON dispatch.BranchID = branchdata.sno INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN (SELECT Sno, I_Date FROM tripdata WHERE (AssignDate BETWEEN @d1 AND @d2)) tripdat ON triproutes.Tripdata_sno = tripdat.Sno INNER JOIN tripsubdata ON tripdat.Sno = tripsubdata.Tripdata_sno WHERE (dispatch.Groupid = @branchid) AND (dispatch.DispType = 'SO') AND ((dispatch.DispMode ='SPL') or (dispatch.DispMode Is null))  GROUP BY dispatch.BranchID");
                cmd.Parameters.AddWithValue("@branchid", BranchID);
                cmd.Parameters.AddWithValue("@d1", GetLowDate(Selecteddate));
                cmd.Parameters.AddWithValue("@d2", GetHighDate(Selectedtodate));
                dtDispatchesbranches = vdbmngr.SelectQuery(cmd).Tables[0];
                //dtDispatchesbranches.Merge(tempplantDispatchqty);
                foreach (DataRow drgrbranch in BtGroupBranches.Rows)
                {
                    cmd = new MySqlCommand("SELECT  SubBranch, ROUND(SUM(DeliveryQty), 2) AS DeliveryQty,  ROUND(SUM(DeliveryQty * UnitCost), 2) AS salevalue, SuperBranch FROM  (SELECT  t1.SubBranch, t1.SuperBranch, t2.DeliveryQty, t2.unitQty, t2.UnitCost FROM (SELECT branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch FROM  branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch WHERE (branchmappingtable_1.SuperBranch = @branchid) GROUP BY branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch) t1 LEFT OUTER JOIN (SELECT  indents_subtable.DeliveryQty, indents_subtable.unitQty, indents_subtable.UnitCost, branchmappingtable_2.SuperBranch, branchmappingtable_2.SubBranch FROM   branchmappingtable branchmappingtable_2 INNER JOIN (SELECT  IndentNo, Branch_id, I_date FROM   indents WHERE  (I_date BETWEEN @d1 AND @d2)) ind ON branchmappingtable_2.SubBranch = ind.Branch_id INNER JOIN indents_subtable ON ind.IndentNo = indents_subtable.IndentNo) t2 ON t2.SuperBranch = t1.SubBranch) derivedtbl_1 GROUP BY SuperBranch");
                    cmd.Parameters.AddWithValue("@branchid", drgrbranch["SubBranch"].ToString());
                    cmd.Parameters.AddWithValue("@d1", GetLowDate(Selecteddate));
                    cmd.Parameters.AddWithValue("@d2", GetHighDate(Selectedtodate));
                    tempbranchindentsale = vdbmngr.SelectQuery(cmd).Tables[0];
                    dtbranches_indent_sale.Merge(tempbranchindentsale);
                }
            }
            else if (SalesType == "Plant")
            {
                cmd = new MySqlCommand("SELECT dispatch.sno, branchdata.BranchName, dispatch.Branch_Id, dispatch.BranchID, SUM(tripsubdata.Qty) AS dispatchqty FROM dispatch INNER JOIN branchdata ON dispatch.BranchID = branchdata.sno INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN (SELECT Sno, I_Date FROM tripdata WHERE (AssignDate BETWEEN @d1 AND @d2)) tripdat ON triproutes.Tripdata_sno = tripdat.Sno INNER JOIN tripsubdata ON tripdat.Sno = tripsubdata.Tripdata_sno WHERE (dispatch.Branch_Id = @branchid) AND (dispatch.DispType = 'SO') AND ((dispatch.DispMode ='SPL') or (dispatch.DispMode Is null))  GROUP BY dispatch.BranchID");
                cmd.Parameters.AddWithValue("@branchid", BranchID);
                cmd.Parameters.AddWithValue("@d1", GetLowDate(Selecteddate));
                cmd.Parameters.AddWithValue("@d2", GetHighDate(Selectedtodate));
                dtDispatchesbranches = vdbmngr.SelectQuery(cmd).Tables[0];
                cmd = new MySqlCommand("SELECT  SubBranch, ROUND(SUM(DeliveryQty), 2) AS DeliveryQty,  ROUND(SUM(DeliveryQty * UnitCost), 2) AS salevalue FROM (SELECT t1.SubBranch, t1.SuperBranch, t2.DeliveryQty, t2.unitQty, t2.UnitCost FROM (SELECT branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch FROM branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch WHERE (branchmappingtable_1.SuperBranch = @branchid) GROUP BY branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch) t1 LEFT OUTER JOIN (SELECT indents_subtable.DeliveryQty, indents_subtable.unitQty, indents_subtable.UnitCost, branchmappingtable_2.SuperBranch, branchmappingtable_2.SubBranch FROM branchmappingtable branchmappingtable_2 INNER JOIN (SELECT IndentNo, Branch_id, I_date FROM indents WHERE (I_date BETWEEN @d1 AND @d2)) ind ON branchmappingtable_2.SubBranch = ind.Branch_id INNER JOIN indents_subtable ON ind.IndentNo = indents_subtable.IndentNo) t2 ON t2.SuperBranch = t1.SubBranch) derivedtbl_1 GROUP BY SubBranch");
                cmd.Parameters.AddWithValue("@branchid", BranchID);
                cmd.Parameters.AddWithValue("@d1", GetLowDate(Selecteddate));
                cmd.Parameters.AddWithValue("@d2", GetHighDate(Selectedtodate));
                dtbranches_indent_sale = vdbmngr.SelectQuery(cmd).Tables[0];
            }
            else
            {
                cmd = new MySqlCommand("SELECT dispatch.sno, branchdata.BranchName, dispatch.Branch_Id, dispatch.BranchID, SUM(tripsubdata.Qty) AS dispatchqty FROM dispatch INNER JOIN branchdata ON dispatch.BranchID = branchdata.sno INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN (SELECT Sno, I_Date FROM tripdata WHERE (AssignDate BETWEEN @d1 AND @d2)) tripdat ON triproutes.Tripdata_sno = tripdat.Sno INNER JOIN tripsubdata ON tripdat.Sno = tripsubdata.Tripdata_sno WHERE (dispatch.branchid = @branchid) AND (dispatch.DispType = 'SO') AND ((dispatch.DispMode ='SPL') or (dispatch.DispMode Is null))  GROUP BY dispatch.BranchID");
                cmd.Parameters.AddWithValue("@branchid", BranchID);
                cmd.Parameters.AddWithValue("@d1", GetLowDate(Selecteddate));
                cmd.Parameters.AddWithValue("@d2", GetHighDate(Selectedtodate));
                dtDispatchesbranches = vdbmngr.SelectQuery(cmd).Tables[0];
                cmd = new MySqlCommand("SELECT  SubBranch, ROUND(SUM(DeliveryQty), 2) AS DeliveryQty, ROUND(SUM(DeliveryQty * UnitCost), 2) AS salevalue FROM (SELECT t1.SubBranch, t1.SuperBranch, t2.DeliveryQty, t2.unitQty, t2.UnitCost FROM (SELECT branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch FROM branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch WHERE (branchmappingtable_1.Subbranch = @branchid) GROUP BY branchmappingtable.SubBranch) t1 LEFT OUTER JOIN (SELECT indents_subtable.DeliveryQty, indents_subtable.unitQty, indents_subtable.UnitCost, branchmappingtable_2.SuperBranch, branchmappingtable_2.SubBranch FROM branchmappingtable branchmappingtable_2 INNER JOIN (SELECT IndentNo, Branch_id, I_date FROM indents WHERE (I_date BETWEEN @d1 AND @d2)) ind ON branchmappingtable_2.SubBranch = ind.Branch_id INNER JOIN indents_subtable ON ind.IndentNo = indents_subtable.IndentNo) t2 ON t2.SuperBranch = t1.SubBranch) derivedtbl_1 GROUP BY SubBranch");
                cmd.Parameters.AddWithValue("@branchid", BranchID);
                cmd.Parameters.AddWithValue("@d1", GetLowDate(Selecteddate));
                cmd.Parameters.AddWithValue("@d2", GetHighDate(Selectedtodate));
                dtbranches_indent_sale = vdbmngr.SelectQuery(cmd).Tables[0];
            }
            double GroupTotDispQty = 0; double GroupTotSaleValue = 0;
            double GroupTotCollectionValue = 0;
            foreach (DataRow dr1 in dtDispatchesbranches.Rows)
            {
                DataRow totaldummy = dtTotalDispatches.NewRow();
                totaldummy["sno"] = i;
                totaldummy["BranchID"] = dr1["Branch_id"].ToString();
                totaldummy["BranchName"] = dr1["BranchName"].ToString();
                totaldummy["Total Dispatch"] = dr1["dispatchqty"].ToString();
                double temptdispqtyqty = 0;
                double.TryParse(dr1["dispatchqty"].ToString(), out temptdispqtyqty);
                GroupTotDispQty += temptdispqtyqty;
                double totalsale = 0; double totalsalevalue = 0; double totalindent = 0; double totalcollection = 0;
                if (BranchID == "8009" || BranchID == "8012" || BranchID == "8013")
                {
                    if (ddlDataType == "Quantity")
                    {
                        foreach (DataRow drindent in dtbranches_indent_sale.Select("SuperBranch='" + dr1["Branch_id"].ToString() + "'"))
                        {
                            double tempqty = 0;
                            double.TryParse(drindent["DeliveryQty"].ToString(), out tempqty);
                            totalsale += tempqty;
                            totaldummy["Total Sale"] = drindent["DeliveryQty"].ToString();
                        }
                    }
                    else
                    {
                        foreach (DataRow drindent in dtbranches_indent_sale.Select("SuperBranch='" + dr1["Branch_id"].ToString() + "'"))
                        {
                            double tempsvale = 0;
                            double.TryParse(drindent["salevalue"].ToString(), out tempsvale);
                            totalsalevalue += tempsvale;
                            GroupTotSaleValue += tempsvale;
                        }
                        totaldummy["Sale Value in Rs"] = totalsalevalue;
                        totaldummy["Total Indent"] = totalindent;
                        foreach (DataRow drcoll in dtCollectionamount.Select("SuperBranch='" + dr1["Branch_id"].ToString() + "'"))
                        {
                            double tempcoll = 0;
                            double.TryParse(drcoll["AmountPaid"].ToString(), out tempcoll);
                            totalcollection += tempcoll;
                            GroupTotCollectionValue += tempcoll;
                        }
                        totaldummy["Total Collection"] = totalcollection;
                        double DueAmount = totalsalevalue - totalcollection;
                        totaldummy["Total Due"] = DueAmount.ToString();
                    }
                }
                else
                {
                    double salevalue = 0;
                    foreach (DataRow drindent in dtbranches_indent_sale.Select("SubBranch='" + dr1["BranchID"].ToString() + "'"))
                    {
                        if (dtbranches_indent_sale.Rows.Count > 0)
                        {
                            totaldummy["Total Sale"] = drindent["DeliveryQty"].ToString();
                            double.TryParse(drindent["salevalue"].ToString(), out salevalue);
                        }
                        if (dtbranches_indent_sale.Rows.Count <= 0)
                        {
                            totaldummy["Total Sale"] = "0";
                        }
                    }
                }
                dtTotalDispatches.Rows.Add(totaldummy);
            }
            foreach (DataRow dr in dtTotalDispatches.Rows)
            {
                approvalplan Getapproval = new approvalplan();
                Getapproval.Sno = dr["sno"].ToString();
                Getapproval.BranchID = dr["BranchID"].ToString();
                Getapproval.BranchName = dr["BranchName"].ToString();
                CultureInfo hindi = new CultureInfo("hi-IN");
                if (ddlDataType == "Value")
                {
                    double tempsalevalue = 0; double tempcoll = 0; double tempdue = 0;
                    double.TryParse(dr["Sale Value in Rs"].ToString(), out tempsalevalue);
                    double salevalue = Math.Round(tempsalevalue, 2);
                    double.TryParse(dr["Total Collection"].ToString(), out tempcoll);
                    double CollAmount = Math.Round(tempcoll, 2);
                    double.TryParse(dr["Total Due"].ToString(), out tempdue);
                    double DueAmount = Math.Round(tempdue, 2);
                    if (salevalue.ToString() != "")
                    {
                        decimal temp_salevalue = decimal.Parse(salevalue.ToString(), CultureInfo.InvariantCulture);
                        Getapproval.salevalue = string.Format(hindi, "{0:#,#}", temp_salevalue);
                    }
                    else
                    {
                        Getapproval.salevalue = "0";
                    }
                    if (CollAmount.ToString() != "")
                    {
                        decimal tamount = decimal.Parse(CollAmount.ToString(), CultureInfo.InvariantCulture);
                        Getapproval.CollAmount = string.Format(hindi, "{0:#,#}", tamount);
                    }
                    else
                    {
                        Getapproval.CollAmount = "0";
                    }
                    if (DueAmount.ToString() != "")
                    {
                        decimal tDueamount = decimal.Parse(DueAmount.ToString(), CultureInfo.InvariantCulture);
                        Getapproval.DueAmount = string.Format(hindi, "{0:#,#}", tDueamount);
                    }
                    else
                    {
                        Getapproval.DueAmount = "0";
                    }
                }
                else
                {
                    double Totalsale = 0;
                    double.TryParse(dr["Total Sale"].ToString(), out Totalsale);
                    double TotalDispatch = 0;
                    double.TryParse(dr["Total Dispatch"].ToString(), out TotalDispatch);
                    if (dr["BranchID"].ToString() == "282")
                    {
                        Totalsale = TotalDispatch; //- TotalLeaks - TotalReturns;
                    }
                    Totalsale = Math.Round(Totalsale, 2);
                    if (Totalsale.ToString() != "")
                    {
                        Getapproval.Totalsale = Totalsale.ToString();
                    }
                    else
                    {
                        Getapproval.salevalue = "0";
                    }
                    TotalDispatch = Math.Round(TotalDispatch, 2);
                    if (TotalDispatch.ToString() != "")
                    {
                        Getapproval.TotalDispatch = TotalDispatch.ToString();
                    }
                    else
                    {
                        Getapproval.TotalDispatch = "0";
                    }
                }
                approvalplanList.Add(Getapproval);
            }
            GroupWiseClass obj1 = new GroupWiseClass();
            obj1.GroupTotCollectionValue = GroupTotCollectionValue.ToString();
            obj1.GroupTotSaleValue = GroupTotSaleValue.ToString();
            double GroupDueAmount = 0;
            GroupDueAmount = GroupTotSaleValue - GroupTotCollectionValue;
            obj1.GroupDueAmount = GroupDueAmount.ToString();
            double tempGroupTotDispQty = Math.Round(GroupTotDispQty, 2);

            obj1.GroupTotDispQty = tempGroupTotDispQty.ToString();

            groupwiseclasslist.Add(obj1);

            MainGroupWiseClass obj = new MainGroupWiseClass();
            obj.ApprovalPlanDetails = approvalplanList;
            obj.GroupWiseDetils = groupwiseclasslist;
            maingroupwiselist.Add(obj);
            string errresponse = GetJson(maingroupwiselist);
            context.Response.Write(errresponse);
        }
        catch
        {

        }
    }
    public class approvalplan
    {
        public string Sno { set; get; }
        public string despsno { set; get; }
        public string dispName { set; get; }
        public string Totalindent { set; get; }
        public string Totalsale { set; get; }
        public string salevalue { set; get; }
        public string TotalDispatch { set; get; }
        public string SaleValueinRs { set; get; }
        public string PaidAmountinRs { set; get; }
        public string TodayDue { set; get; }
        public string TotalDue { set; get; }
        public string TotalLeaks { set; get; }
        public string TotalReturns { set; get; }
        public string TotalShort { set; get; }
        public string TotalFree { set; get; }
        public string IssuedCrates { set; get; }
        public string ReturnCrates { set; get; }
        public string IssuedCans { set; get; }
        public string ReturnCans { set; get; }
        public string VerifiedLeaks { set; get; }
        public string VerifiedReturns { set; get; }
        public string RegularDue { set; get; }
        public string TodayCASHDue { set; get; }
        public string BranchID { set; get; }
        public string BranchName { set; get; }
        public string LeakPer { set; get; }
        public string TotalsalePer { set; get; }
        public string oppstock { set; get; }
        public string clostock { set; get; }
        public string CollAmount { set; get; }
        public string DueAmount { set; get; }
    }
    public class GroupWiseClass
    {
        public string GroupTotDispQty { get; set; }
        public string GroupTotSaleValue { get; set; }
        public string GroupTotCollectionValue { get; set; }
        public string GroupDueAmount { get; set; }
    }
    public class MainGroupWiseClass
    {
        public List<approvalplan> ApprovalPlanDetails { get; set; }
        public List<GroupWiseClass> GroupWiseDetils { get; set; }
    }

    public class DayWiseProductcls
    {
        public string ProductName { get; set; }
        public string Date { get; set; }
        public string DeliveryQty { get; set; }
        public string Agentid { get; set; }
        public string AgentName { get; set; }
    }
    public class DayWiseDatescls
    {
        public string DeliveryDates { get; set; }
        public string ThisMonthDate { get; set; }
        public string LastMonthDate { get; set; }
        public string LastYearDate { get; set; }
    }
    public class MainDayWiseProductDetails
    {
        public List<DayWiseDatescls> daywisedatescls { get; set; }
        public List<DayWiseProductcls> daywiseproductcls { get; set; }
    }
    private void GetProductInformation(HttpContext context)
    {
        try
        {
            double totalqty = 0; double totalSalevalue = 0;
            vdbmngr = new VehicleDBMgr();
            List<TotalProductclass> Categeorylist = new List<TotalProductclass>();
            List<SubTotalProductclass> CategoryDispQtyLst = new List<SubTotalProductclass>();
            List<MainTotalProductclass> CategoryDispQtyANDCategoryLst = new List<MainTotalProductclass>();
            DataTable report = new DataTable();
            string Type = context.Request["Type"];
            string s = context.Session["IndDate"].ToString();
            var dt = DateTime.ParseExact(s, "ddd MMM dd yyyy HH:mm:ss 'GMT'zzz", System.Globalization.CultureInfo.InvariantCulture);
            string FromDate = dt.ToString("yyyy-MM-dd");
            DateTime ServerDateCurrentdate = Convert.ToDateTime(FromDate);

            string e = context.Session["Todate"].ToString(); ;
            var edt = DateTime.ParseExact(e, "ddd MMM dd yyyy HH:mm:ss 'GMT'zzz", System.Globalization.CultureInfo.InvariantCulture);
            string Todate = edt.ToString("yyyy-MM-dd");
            DateTime Enddate = Convert.ToDateTime(Todate);


            string BranchID = context.Request["BranchID"];
            DataTable dtProductInformation = new DataTable();
            DataTable dtDispatchMilkqty = new DataTable();
            DataTable dtDispatchCurdQty = new DataTable();
            DataTable dtDispatchOthersQty = new DataTable();
            string SalesType = "Plant";//context.Session["salestype"].ToString();

            if (BranchID == "8009")
            {
                cmd = new MySqlCommand("SELECT   TripInfo.BranchName, TripInfo.Sno, TripInfo.DCNo, ProductInfo.Categoryname, ProductInfo.productid, SUM(ProductInfo.Qty) AS Qty, SUM(ProductInfo.UnitPrice * ProductInfo.Qty)  AS salevalue,ProductInfo.Units, TripInfo.I_Date, TripInfo.VehicleNo, TripInfo.Status, TripInfo.DispName, TripInfo.DispType, TripInfo.DispMode, ProductInfo.CatSno, ProductInfo.SubCatName, ProductInfo.SubCatSno,TripInfo.GroupId AS Branch_id FROM  (SELECT  tripdata.Sno, tripdata.DCNo, tripdata.I_Date, tripdata.VehicleNo, tripdata.Status, dispatch.DispName, dispatch.DispType, dispatch.DispMode, branchdata.BranchName,dispatch.GroupId FROM  branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno WHERE (dispatch.GroupId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT  Categoryname, ProductName, Units,UnitPrice, Sno, Qty, CatSno, productid, SubCatName, SubCatSno FROM  (SELECT  productsdata.UnitPrice, productsdata.sno AS productid, products_category.sno AS CatSno, products_category.Categoryname,productsdata.Units, productsdata.ProductName, tripdata_1.Sno, tripsubdata.Qty, products_subcategory.SubCatName,productsdata.tempsubcatsno AS SubCatSno FROM  tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno INNER JOIN productsdata ON tripsubdata.ProductId = productsdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno WHERE  (tripdata_1.AssignDate BETWEEN @d1 AND @d2)) TripSubInfo) ProductInfo ON TripInfo.Sno = ProductInfo.Sno GROUP BY ProductInfo.SubCatSno ORDER BY ProductInfo.CatSno, ProductInfo.ProductName");
                cmd.Parameters.AddWithValue("@branch", BranchID);
                cmd.Parameters.AddWithValue("@d1", GetLowDate(ServerDateCurrentdate).AddDays(-1));
                cmd.Parameters.AddWithValue("@d2", GetHighDate(Enddate).AddDays(-1));
                dtProductInformation = vdbmngr.SelectQuery(cmd).Tables[0];
                cmd = new MySqlCommand("SELECT TripInfo.Sno, ProductInfo.Categoryname, ROUND(SUM(ProductInfo.Qty), 2) AS DeliveryQty,ROUND(SUM(ProductInfo.UnitPrice * ProductInfo.Qty),2)  AS salevalue, TripInfo.I_Date, ProductInfo.CatSno, TripInfo.BranchName, TripInfo.BranchID, TripInfo.Branch_Id,TripInfo.GroupId FROM  (SELECT tripdata.Sno, tripdata.I_Date, branchdata_1.BranchName, dispatch.BranchID, dispatch.Branch_Id,dispatch.GroupId FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE (dispatch.GroupId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT  Categoryname, Sno, Qty, CatSno,UnitPrice FROM (SELECT products_category.sno AS CatSno, products_category.Categoryname, tripdata_1.Sno, tripsubdata.Qty,productsdata.UnitPrice FROM tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno INNER JOIN productsdata ON tripsubdata.ProductId = productsdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno WHERE  (tripdata_1.AssignDate BETWEEN @d1 AND @d2) AND (products_category.sno = @catsno)) TripSubInfo) ProductInfo ON  TripInfo.Sno = ProductInfo.Sno GROUP BY ProductInfo.CatSno, TripInfo.GroupId ORDER BY ProductInfo.CatSno, TripInfo.GroupId");
                cmd.Parameters.AddWithValue("@branch", BranchID);
                cmd.Parameters.AddWithValue("@d1", GetLowDate(ServerDateCurrentdate).AddDays(-1));
                cmd.Parameters.AddWithValue("@d2", GetHighDate(Enddate).AddDays(-1));
                cmd.Parameters.AddWithValue("@catsno", "9");
                dtDispatchMilkqty = vdbmngr.SelectQuery(cmd).Tables[0];
                cmd = new MySqlCommand("SELECT TripInfo.Sno, ProductInfo.Categoryname, ROUND(SUM(ProductInfo.Qty), 2) AS DeliveryQty,ROUND(SUM(ProductInfo.UnitPrice * ProductInfo.Qty),2)  AS salevalue, TripInfo.I_Date, ProductInfo.CatSno, TripInfo.BranchName, TripInfo.BranchID, TripInfo.Branch_Id,TripInfo.GroupId FROM  (SELECT tripdata.Sno, tripdata.I_Date, branchdata_1.BranchName, dispatch.BranchID, dispatch.Branch_Id,dispatch.GroupId FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE (dispatch.GroupId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT  Categoryname, Sno, Qty, CatSno,UnitPrice FROM (SELECT products_category.sno AS CatSno, products_category.Categoryname, tripdata_1.Sno, tripsubdata.Qty,productsdata.UnitPrice FROM tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno INNER JOIN productsdata ON tripsubdata.ProductId = productsdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno WHERE  (tripdata_1.AssignDate BETWEEN @d1 AND @d2) AND (products_category.sno = @catsno)) TripSubInfo) ProductInfo ON  TripInfo.Sno = ProductInfo.Sno GROUP BY ProductInfo.CatSno, TripInfo.GroupId ORDER BY ProductInfo.CatSno, TripInfo.GroupId");
                cmd.Parameters.AddWithValue("@branch", BranchID);
                cmd.Parameters.AddWithValue("@d1", GetLowDate(ServerDateCurrentdate).AddDays(-1));
                cmd.Parameters.AddWithValue("@d2", GetHighDate(Enddate).AddDays(-1));
                cmd.Parameters.AddWithValue("@catsno", "10");
                dtDispatchCurdQty = vdbmngr.SelectQuery(cmd).Tables[0];

                cmd = new MySqlCommand("SELECT TripInfo.Sno, ProductInfo.Categoryname, ROUND(SUM(ProductInfo.Qty), 2) AS DeliveryQty,ROUND(SUM(ProductInfo.UnitPrice * ProductInfo.Qty),2)  AS salevalue, TripInfo.I_Date, ProductInfo.CatSno, TripInfo.BranchName, TripInfo.BranchID, TripInfo.Branch_Id,TripInfo.GroupId FROM  (SELECT tripdata.Sno, tripdata.I_Date, branchdata_1.BranchName, dispatch.BranchID, dispatch.Branch_Id,dispatch.GroupId FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE (dispatch.GroupId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT  Categoryname, Sno, Qty, CatSno,UnitPrice FROM (SELECT products_category.sno AS CatSno, products_category.Categoryname, tripdata_1.Sno, tripsubdata.Qty,productsdata.UnitPrice FROM tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno INNER JOIN productsdata ON tripsubdata.ProductId = productsdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno WHERE  (tripdata_1.AssignDate BETWEEN @d1 AND @d2) AND (products_category.sno <> '9') AND (products_category.sno <> '10')) TripSubInfo) ProductInfo ON  TripInfo.Sno = ProductInfo.Sno GROUP BY  TripInfo.GroupId ORDER BY ProductInfo.CatSno, TripInfo.GroupId");
                cmd.Parameters.AddWithValue("@branch", BranchID);
                cmd.Parameters.AddWithValue("@d1", GetLowDate(ServerDateCurrentdate).AddDays(-1));
                cmd.Parameters.AddWithValue("@d2", GetHighDate(Enddate).AddDays(-1));
                dtDispatchOthersQty = vdbmngr.SelectQuery(cmd).Tables[0];
            }
            else if (BranchID == "8012" || BranchID == "8013")
            {
                cmd = new MySqlCommand("SELECT   TripInfo.BranchName, TripInfo.Branch_Id AS Branchid,TripInfo.Sno, TripInfo.DCNo, ProductInfo.Categoryname, ProductInfo.productid, ROUND(SUM(ProductInfo.Qty),2) AS Qty, ROUND(SUM(ProductInfo.UnitPrice * ProductInfo.Qty),2)  AS salevalue,ProductInfo.Units, TripInfo.I_Date, TripInfo.VehicleNo, TripInfo.Status, TripInfo.DispName, TripInfo.DispType, TripInfo.DispMode, ProductInfo.CatSno, ProductInfo.SubCatName, ProductInfo.SubCatSno,TripInfo.CompanyId As Branch_id FROM  (SELECT  tripdata.Sno, tripdata.DCNo, tripdata.I_Date, tripdata.VehicleNo, tripdata.Status, dispatch.DispName, dispatch.DispType, dispatch.DispMode, branchdata.BranchName,dispatch.Branch_Id,dispatch.CompanyId FROM  branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno WHERE (dispatch.CompanyId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT  Categoryname, ProductName, Units,UnitPrice, Sno, Qty, CatSno, productid, SubCatName, SubCatSno FROM  (SELECT  productsdata.UnitPrice, productsdata.sno AS productid, products_category.sno AS CatSno, products_category.Categoryname,productsdata.Units, productsdata.ProductName, tripdata_1.Sno, tripsubdata.Qty, products_subcategory.SubCatName, products_subcategory.sno AS SubCatSno FROM  tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno INNER JOIN productsdata ON tripsubdata.ProductId = productsdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno WHERE  (tripdata_1.AssignDate BETWEEN @d1 AND @d2)) TripSubInfo) ProductInfo ON TripInfo.Sno = ProductInfo.Sno GROUP BY ProductInfo.SubCatSno ORDER BY ProductInfo.CatSno, ProductInfo.ProductName");
                cmd.Parameters.AddWithValue("@branch", BranchID);
                cmd.Parameters.AddWithValue("@d1", GetLowDate(ServerDateCurrentdate).AddDays(-1));
                cmd.Parameters.AddWithValue("@d2", GetHighDate(Enddate).AddDays(-1));
                dtProductInformation = vdbmngr.SelectQuery(cmd).Tables[0];

                cmd = new MySqlCommand("SELECT TripInfo.Sno, ProductInfo.Categoryname, ROUND(SUM(ProductInfo.Qty), 2) AS DeliveryQty,ROUND(SUM(ProductInfo.UnitPrice * ProductInfo.Qty),2)  AS salevalue, TripInfo.I_Date, ProductInfo.CatSno, TripInfo.BranchName, TripInfo.BranchID, TripInfo.Branch_Id,TripInfo.CompanyId FROM  (SELECT tripdata.Sno, tripdata.I_Date, branchdata_1.BranchName, dispatch.BranchID, dispatch.Branch_Id,dispatch.GroupId,dispatch.CompanyId FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE (dispatch.CompanyId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT  Categoryname, Sno, Qty, CatSno,UnitPrice FROM (SELECT products_category.sno AS CatSno, products_category.Categoryname, tripdata_1.Sno, tripsubdata.Qty,productsdata.UnitPrice FROM tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno INNER JOIN productsdata ON tripsubdata.ProductId = productsdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno WHERE  (tripdata_1.AssignDate BETWEEN @d1 AND @d2) AND (products_category.sno = @catsno)) TripSubInfo) ProductInfo ON  TripInfo.Sno = ProductInfo.Sno GROUP BY ProductInfo.CatSno, TripInfo.GroupId ORDER BY ProductInfo.CatSno, TripInfo.GroupId");
                cmd.Parameters.AddWithValue("@branch", BranchID);
                cmd.Parameters.AddWithValue("@d1", GetLowDate(ServerDateCurrentdate).AddDays(-1));
                cmd.Parameters.AddWithValue("@d2", GetHighDate(Enddate).AddDays(-1));
                cmd.Parameters.AddWithValue("@catsno", "9");
                dtDispatchMilkqty = vdbmngr.SelectQuery(cmd).Tables[0];
                cmd = new MySqlCommand("SELECT TripInfo.Sno, ProductInfo.Categoryname, ROUND(SUM(ProductInfo.Qty), 2) AS DeliveryQty,ROUND(SUM(ProductInfo.UnitPrice * ProductInfo.Qty),2)  AS salevalue, TripInfo.I_Date, ProductInfo.CatSno, TripInfo.BranchName, TripInfo.BranchID, TripInfo.Branch_Id,TripInfo.GroupId,TripInfo.CompanyId FROM  (SELECT tripdata.Sno, tripdata.I_Date, branchdata_1.BranchName, dispatch.BranchID, dispatch.Branch_Id,dispatch.GroupId,dispatch.CompanyId FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE (dispatch.CompanyId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT  Categoryname, Sno, Qty, CatSno,UnitPrice FROM (SELECT products_category.sno AS CatSno, products_category.Categoryname, tripdata_1.Sno, tripsubdata.Qty,productsdata.UnitPrice FROM tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno INNER JOIN productsdata ON tripsubdata.ProductId = productsdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno WHERE  (tripdata_1.AssignDate BETWEEN @d1 AND @d2) AND (products_category.sno = @catsno)) TripSubInfo) ProductInfo ON  TripInfo.Sno = ProductInfo.Sno GROUP BY ProductInfo.CatSno, TripInfo.GroupId ORDER BY ProductInfo.CatSno, TripInfo.GroupId");
                cmd.Parameters.AddWithValue("@branch", BranchID);
                cmd.Parameters.AddWithValue("@d1", GetLowDate(ServerDateCurrentdate).AddDays(-1));
                cmd.Parameters.AddWithValue("@d2", GetHighDate(Enddate).AddDays(-1));
                cmd.Parameters.AddWithValue("@catsno", "10");
                dtDispatchCurdQty = vdbmngr.SelectQuery(cmd).Tables[0];

                cmd = new MySqlCommand("SELECT TripInfo.Sno, ProductInfo.Categoryname, ROUND(SUM(ProductInfo.Qty), 2) AS DeliveryQty,ROUND(SUM(ProductInfo.UnitPrice * ProductInfo.Qty),2)  AS salevalue, TripInfo.I_Date, ProductInfo.CatSno, TripInfo.BranchName, TripInfo.BranchID, TripInfo.Branch_Id,TripInfo.GroupId,TripInfo.CompanyId FROM  (SELECT tripdata.Sno, tripdata.I_Date, branchdata_1.BranchName, dispatch.BranchID, dispatch.Branch_Id,dispatch.GroupId,dispatch.CompanyId FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE (dispatch.CompanyId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT  Categoryname, Sno, Qty, CatSno,UnitPrice FROM (SELECT products_category.sno AS CatSno, products_category.Categoryname, tripdata_1.Sno, tripsubdata.Qty,productsdata.UnitPrice FROM tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno INNER JOIN productsdata ON tripsubdata.ProductId = productsdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno WHERE  (tripdata_1.AssignDate BETWEEN @d1 AND @d2) AND (products_category.sno <> '9') AND (products_category.sno <> '10')) TripSubInfo) ProductInfo ON  TripInfo.Sno = ProductInfo.Sno GROUP BY ProductInfo.CatSno, TripInfo.GroupId ORDER BY ProductInfo.CatSno, TripInfo.GroupId");
                cmd.Parameters.AddWithValue("@branch", BranchID);
                cmd.Parameters.AddWithValue("@d1", GetLowDate(ServerDateCurrentdate).AddDays(-1));
                cmd.Parameters.AddWithValue("@d2", GetHighDate(Enddate).AddDays(-1));
                dtDispatchOthersQty = vdbmngr.SelectQuery(cmd).Tables[0];
            }
            else if (SalesType == "Plant")
            {
                cmd = new MySqlCommand("SELECT  TripInfo.BranchName, TripInfo.Branch_Id, TripInfo.Sno, TripInfo.DCNo, ProductInfo.Categoryname, ProductInfo.productid, ROUND(SUM(ProductInfo.Qty),2) AS Qty, ROUND(SUM(ProductInfo.UnitPrice * ProductInfo.Qty),2) AS salevalue, TripInfo.I_Date, TripInfo.VehicleNo,ProductInfo.Units, TripInfo.Status, TripInfo.DispName, TripInfo.DispType, TripInfo.DispMode, ProductInfo.CatSno, ProductInfo.SubCatName, ProductInfo.SubCatSno FROM  (SELECT  tripdata.Sno, tripdata.DCNo, tripdata.I_Date, tripdata.VehicleNo, tripdata.Status, dispatch.DispName, dispatch.DispType, dispatch.DispMode, branchdata.BranchName,dispatch.Branch_Id FROM  branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno WHERE (dispatch.Branch_id = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT  Categoryname,Units, ProductName, UnitPrice, Sno, Qty, CatSno, productid, SubCatName, SubCatSno FROM  (SELECT  productsdata.UnitPrice, productsdata.sno AS productid, products_category.sno AS CatSno, products_category.Categoryname, productsdata.Units,productsdata.ProductName, tripdata_1.Sno, tripsubdata.Qty, products_subcategory.SubCatName, products_subcategory.sno AS SubCatSno FROM  tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno INNER JOIN productsdata ON tripsubdata.ProductId = productsdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno WHERE  (tripdata_1.AssignDate BETWEEN @d1 AND @d2)) TripSubInfo) ProductInfo ON TripInfo.Sno = ProductInfo.Sno GROUP BY ProductInfo.SubCatSno ORDER BY ProductInfo.CatSno, ProductInfo.ProductName");
                cmd.Parameters.AddWithValue("@branch", BranchID);
                cmd.Parameters.AddWithValue("@d1", GetLowDate(ServerDateCurrentdate).AddDays(-1));
                cmd.Parameters.AddWithValue("@d2", GetHighDate(Enddate).AddDays(-1));
                dtProductInformation = vdbmngr.SelectQuery(cmd).Tables[0];

                cmd = new MySqlCommand("SELECT TripInfo.Sno, ProductInfo.Categoryname, ROUND(SUM(ProductInfo.Qty), 2) AS DeliveryQty, ROUND(SUM(ProductInfo.UnitPrice * ProductInfo.Qty),2)  AS salevalue,TripInfo.I_Date, ProductInfo.CatSno, TripInfo.BranchName,  TripInfo.Branch_Id FROM  (SELECT tripdata.Sno, tripdata.I_Date, branchdata_1.BranchName, dispatch.Branch_Id FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE (dispatch.Branch_Id = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT  Categoryname, Sno, Qty, CatSno,UnitPrice FROM (SELECT products_category.sno AS CatSno, products_category.Categoryname, tripdata_1.Sno, tripsubdata.Qty,productsdata.UnitPrice FROM tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno INNER JOIN productsdata ON tripsubdata.ProductId = productsdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno WHERE  (tripdata_1.AssignDate BETWEEN @d1 AND @d2) AND (products_category.sno = @catsno)) TripSubInfo) ProductInfo ON  TripInfo.Sno = ProductInfo.Sno GROUP BY ProductInfo.CatSno, TripInfo.Branch_Id ORDER BY ProductInfo.CatSno,TripInfo.Branch_Id");
                cmd.Parameters.AddWithValue("@branch", BranchID);
                cmd.Parameters.AddWithValue("@d1", GetLowDate(ServerDateCurrentdate).AddDays(-1));
                cmd.Parameters.AddWithValue("@d2", GetHighDate(Enddate).AddDays(-1));
                cmd.Parameters.AddWithValue("@catsno", "9");
                dtDispatchMilkqty = vdbmngr.SelectQuery(cmd).Tables[0];
                cmd = new MySqlCommand("SELECT TripInfo.Sno, ProductInfo.Categoryname, ROUND(SUM(ProductInfo.Qty), 2) AS DeliveryQty,ROUND(SUM(ProductInfo.UnitPrice * ProductInfo.Qty),2)  AS salevalue, TripInfo.I_Date, ProductInfo.CatSno, TripInfo.BranchName,  TripInfo.Branch_Id FROM  (SELECT tripdata.Sno, tripdata.I_Date, branchdata_1.BranchName, dispatch.BranchID, dispatch.Branch_Id,dispatch.GroupId FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE (dispatch.Branch_Id = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT  Categoryname, Sno, Qty, CatSno,UnitPrice FROM (SELECT products_category.sno AS CatSno, products_category.Categoryname, tripdata_1.Sno, tripsubdata.Qty,productsdata.UnitPrice FROM tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno INNER JOIN productsdata ON tripsubdata.ProductId = productsdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno WHERE  (tripdata_1.AssignDate BETWEEN @d1 AND @d2) AND (products_category.sno = @catsno)) TripSubInfo) ProductInfo ON  TripInfo.Sno = ProductInfo.Sno GROUP BY ProductInfo.CatSno, TripInfo.Branch_Id ORDER BY ProductInfo.CatSno,TripInfo.Branch_Id");
                cmd.Parameters.AddWithValue("@branch", BranchID);
                cmd.Parameters.AddWithValue("@d1", GetLowDate(ServerDateCurrentdate).AddDays(-1));
                cmd.Parameters.AddWithValue("@d2", GetHighDate(Enddate).AddDays(-1));
                cmd.Parameters.AddWithValue("@catsno", "10");
                dtDispatchCurdQty = vdbmngr.SelectQuery(cmd).Tables[0];

                cmd = new MySqlCommand("SELECT TripInfo.Sno, ProductInfo.Categoryname, ROUND(SUM(ProductInfo.Qty), 2) AS DeliveryQty,ROUND(SUM(ProductInfo.UnitPrice * ProductInfo.Qty),2)  AS salevalue, TripInfo.I_Date, ProductInfo.CatSno, TripInfo.BranchName,  TripInfo.Branch_Id FROM  (SELECT tripdata.Sno, tripdata.I_Date, branchdata_1.BranchName, dispatch.BranchID, dispatch.Branch_Id,dispatch.GroupId FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE (dispatch.Branch_Id = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT  Categoryname, Sno, Qty, CatSno,UnitPrice FROM (SELECT products_category.sno AS CatSno, products_category.Categoryname, tripdata_1.Sno, tripsubdata.Qty,productsdata.UnitPrice FROM tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno INNER JOIN productsdata ON tripsubdata.ProductId = productsdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno WHERE  (tripdata_1.AssignDate BETWEEN @d1 AND @d2) AND (products_category.sno <> '9') AND (products_category.sno <> '10')) TripSubInfo) ProductInfo ON  TripInfo.Sno = ProductInfo.Sno GROUP BY TripInfo.Branch_Id ORDER BY TripInfo.Branch_Id");
                cmd.Parameters.AddWithValue("@branch", BranchID);
                cmd.Parameters.AddWithValue("@d1", GetLowDate(ServerDateCurrentdate).AddDays(-1));
                cmd.Parameters.AddWithValue("@d2", GetHighDate(Enddate).AddDays(-1));
                dtDispatchOthersQty = vdbmngr.SelectQuery(cmd).Tables[0];
            }
            else
            {
                cmd = new MySqlCommand("SELECT   TripInfo.Sno, TripInfo.DCNo, ProductInfo.Categoryname, ProductInfo.productid, ROUND(SUM(ProductInfo.Qty),2) AS Qty, ROUND(SUM(ProductInfo.UnitPrice * ProductInfo.Qty),2) AS salevalue, TripInfo.I_Date, TripInfo.VehicleNo,ProductInfo.Units, TripInfo.Status, TripInfo.DispName, TripInfo.DispType, TripInfo.DispMode, ProductInfo.CatSno, ProductInfo.SubCatName, ProductInfo.SubCatSno,TripInfo.Branchid As Branch_id FROM  (SELECT  tripdata.Sno, tripdata.DCNo, tripdata.I_Date, tripdata.VehicleNo, tripdata.Status,dispatch.Branchid, dispatch.DispName, dispatch.DispType, dispatch.DispMode, branchdata.BranchName,dispatch.Branch_Id FROM  branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno WHERE (dispatch.Branchid = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT  Categoryname,Units, ProductName, UnitPrice, Sno, Qty, CatSno, productid, SubCatName, SubCatSno FROM  (SELECT  productsdata.UnitPrice, productsdata.sno AS productid, products_category.sno AS CatSno, products_category.Categoryname,productsdata.Units, productsdata.ProductName, tripdata_1.Sno, tripsubdata.Qty, products_subcategory.SubCatName, products_subcategory.sno AS SubCatSno FROM  tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno INNER JOIN productsdata ON tripsubdata.ProductId = productsdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno WHERE  (tripdata_1.AssignDate BETWEEN @d1 AND @d2)) TripSubInfo) ProductInfo ON TripInfo.Sno = ProductInfo.Sno GROUP BY ProductInfo.SubCatSno ORDER BY ProductInfo.CatSno, ProductInfo.ProductName");
                //BranchID = "1842";
                cmd.Parameters.AddWithValue("@branch", BranchID);
                cmd.Parameters.AddWithValue("@d1", GetLowDate(ServerDateCurrentdate).AddDays(-1));
                cmd.Parameters.AddWithValue("@d2", GetHighDate(Enddate).AddDays(-1));
                dtProductInformation = vdbmngr.SelectQuery(cmd).Tables[0];


                cmd = new MySqlCommand("SELECT TripInfo.Sno, ProductInfo.Categoryname, ROUND(SUM(ProductInfo.Qty), 2) AS DeliveryQty,ROUND(SUM(ProductInfo.UnitPrice * ProductInfo.Qty),2)  AS salevalue, TripInfo.I_Date, ProductInfo.CatSno, TripInfo.BranchName, TripInfo.Branchid As Branch_id FROM  (SELECT tripdata.Sno, tripdata.I_Date, branchdata_1.BranchName, dispatch.BranchID, dispatch.GroupId FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE (dispatch.Branchid = @branch)  AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT  Categoryname, Sno, Qty, CatSno,UnitPrice FROM (SELECT products_category.sno AS CatSno, products_category.Categoryname, tripdata_1.Sno, tripsubdata.Qty,productsdata.UnitPrice FROM tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno INNER JOIN productsdata ON tripsubdata.ProductId = productsdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno WHERE  (tripdata_1.AssignDate BETWEEN @d1 AND @d2) AND (products_category.sno = @catsno)) TripSubInfo) ProductInfo ON  TripInfo.Sno = ProductInfo.Sno GROUP BY Branch_id ORDER BY ProductInfo.CatSno");
                cmd.Parameters.AddWithValue("@branch", BranchID);
                cmd.Parameters.AddWithValue("@d1", GetLowDate(ServerDateCurrentdate).AddDays(-1));
                cmd.Parameters.AddWithValue("@d2", GetHighDate(Enddate).AddDays(-1));
                cmd.Parameters.AddWithValue("@catsno", "9");
                dtDispatchMilkqty = vdbmngr.SelectQuery(cmd).Tables[0];
                cmd = new MySqlCommand("SELECT TripInfo.Sno, ProductInfo.Categoryname, ROUND(SUM(ProductInfo.Qty), 2) AS DeliveryQty,ROUND(SUM(ProductInfo.UnitPrice * ProductInfo.Qty),2)  AS salevalue, TripInfo.I_Date, ProductInfo.CatSno, TripInfo.BranchName, TripInfo.BranchID, TripInfo.Branch_Id,TripInfo.GroupId FROM  (SELECT tripdata.Sno, tripdata.I_Date, branchdata_1.BranchName, dispatch.BranchID, dispatch.Branch_Id,dispatch.GroupId FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE (dispatch.Branchid = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT  Categoryname, Sno, Qty, CatSno,UnitPrice FROM (SELECT products_category.sno AS CatSno, products_category.Categoryname, tripdata_1.Sno, tripsubdata.Qty,productsdata.UnitPrice FROM tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno INNER JOIN productsdata ON tripsubdata.ProductId = productsdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno WHERE  (tripdata_1.AssignDate BETWEEN @d1 AND @d2) AND (products_category.sno = @catsno)) TripSubInfo) ProductInfo ON  TripInfo.Sno = ProductInfo.Sno GROUP BY ProductInfo.CatSno ORDER BY ProductInfo.CatSno");
                cmd.Parameters.AddWithValue("@branch", BranchID);
                cmd.Parameters.AddWithValue("@d1", GetLowDate(ServerDateCurrentdate).AddDays(-1));
                cmd.Parameters.AddWithValue("@d2", GetHighDate(Enddate).AddDays(-1));
                cmd.Parameters.AddWithValue("@catsno", "10");
                dtDispatchCurdQty = vdbmngr.SelectQuery(cmd).Tables[0];

                cmd = new MySqlCommand("SELECT TripInfo.Sno, ProductInfo.Categoryname, ROUND(SUM(ProductInfo.Qty), 2) AS DeliveryQty,ROUND(SUM(ProductInfo.UnitPrice * ProductInfo.Qty),2)  AS salevalue, TripInfo.I_Date, ProductInfo.CatSno, TripInfo.BranchName, TripInfo.BranchID As Branch_Id FROM  (SELECT tripdata.Sno, tripdata.I_Date, branchdata_1.BranchName, dispatch.BranchID, dispatch.Branch_Id,dispatch.GroupId FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE (dispatch.Branchid = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT  Categoryname, Sno, Qty, CatSno,UnitPrice FROM (SELECT products_category.sno AS CatSno, products_category.Categoryname, tripdata_1.Sno, tripsubdata.Qty,productsdata.UnitPrice FROM tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno INNER JOIN productsdata ON tripsubdata.ProductId = productsdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno WHERE  (tripdata_1.AssignDate BETWEEN @d1 AND @d2) AND (products_category.sno <> '9') AND (products_category.sno <> '10')) TripSubInfo) ProductInfo ON  TripInfo.Sno = ProductInfo.Sno GROUP BY Branch_id ORDER BY Branch_id");
                cmd.Parameters.AddWithValue("@branch", BranchID);
                cmd.Parameters.AddWithValue("@d1", GetLowDate(ServerDateCurrentdate).AddDays(-1));
                cmd.Parameters.AddWithValue("@d2", GetHighDate(Enddate).AddDays(-1));
                dtDispatchOthersQty = vdbmngr.SelectQuery(cmd).Tables[0];
            }
            DataTable dtdispatchmilkqty = vdbmngr.SelectQuery(cmd).Tables[0];
            string[] ARR = { "#FFFFFF,#FF6600, #fdd400, #84b761, #cc4748, #cd82ad, #2f4074, #448e4d, #b7b83f, #b9783f, #b93e3d, #913167, #18d79c, #a2907f, #41ee80, #8cfa40, #dbdf9d, #3f4fb2, #01909b, #124c65, #33879b, #869ae2, #000000" };
            int i = 0;
            DataTable TempTable = new DataTable();
            TempTable.Columns.Add("BranchName");
            TempTable.Columns.Add("Categoryname");
            TempTable.Columns.Add("productid");
            TempTable.Columns.Add("Qty");
            TempTable.Columns.Add("salevalue");
            TempTable.Columns.Add("Units");
            TempTable.Columns.Add("CatSno");
            TempTable.Columns.Add("SubCatName");
            TempTable.Columns.Add("SubCatSno");
            TempTable.Columns.Add("Branch_id");

            cmd = new MySqlCommand("SELECT     products_subcategory.sno, products_subcategory.category_sno, products_subcategory.SubCatName, products_subcategory.Flag, products_subcategory.userdata_sno, products_subcategory.fat,products_subcategory.description, products_subcategory.rank, products_subcategory.tempcatsno, products_subcategory.tempsub_catsno, products_category.description AS CateName FROM    products_subcategory INNER JOIN  products_category ON products_subcategory.tempcatsno = products_category.tempcatsno WHERE (products_subcategory.tempsub_catsno IS NOT NULL)");
            DataTable dtcategory = vdbmngr.SelectQuery(cmd).Tables[0];
            foreach (DataRow dtr in dtProductInformation.Rows)
            {
                DataRow newrow = TempTable.NewRow();
                newrow["BranchName"] = dtr["BranchName"].ToString();
                newrow["productid"] = dtr["productid"].ToString();
                newrow["Qty"] = dtr["Qty"].ToString();
                newrow["salevalue"] = dtr["salevalue"].ToString();
                foreach (DataRow drr1 in dtcategory.Select("tempsub_catsno='" + dtr["SubCatSno"].ToString() + "'"))
                {
                    newrow["CatSno"] = drr1["tempcatsno"].ToString();
                    newrow["Categoryname"] = drr1["CateName"].ToString();
                    newrow["SubCatName"] = drr1["description"].ToString();
                    newrow["SubCatSno"] = drr1["tempsub_catsno"].ToString();
                }
                newrow["Units"] = dtr["Units"].ToString();
                newrow["Branch_id"] = dtr["Branch_id"].ToString();
                TempTable.Rows.Add(newrow);
            }
            DataTable Reports = new DataTable();
            Reports.Columns.Add("Categoryname");
            Reports.Columns.Add("CatSno");
            Reports.Columns.Add("SubCatName");
            Reports.Columns.Add("subcatSno");
            Reports.Columns.Add("Qty");
            Reports.Columns.Add("SaleValue");
            Reports.Columns.Add("QtyPecentage");
            Reports.Columns.Add("ValuePecentage");
            double temptotalqty = 0; double temptotalsalevalue = 0;
            foreach (DataRow drr in TempTable.Rows)
            {
                string Qty = drr["Qty"].ToString();
                double.TryParse(Qty, out temptotalqty);
                totalqty += temptotalqty;
                string SaleValue = drr["salevalue"].ToString();
                double.TryParse(SaleValue, out temptotalsalevalue);
                totalSalevalue += temptotalsalevalue;
            }
            DataView dv1 = TempTable.DefaultView;
            dv1.Sort = "CatSno ASC";
            DataTable dtSortedSubCategory = dv1.ToTable();
            foreach (DataRow dr in dtSortedSubCategory.Rows)//We need to Sort Categorywise
            {
                DataRow newrow = Reports.NewRow();

                newrow["Categoryname"] = dr["Categoryname"].ToString();
                newrow["SubCatName"] = dr["SubCatName"].ToString();
                newrow["subcatSno"] = dr["SubCatSno"].ToString() + "_" + dr["Branch_Id"].ToString() + "";
                string tempqty = dr["Qty"].ToString();
                double actualqty = 0;
                double.TryParse(tempqty, out actualqty);
                double Percen = 0;
                Percen = (actualqty / totalqty) * 100;
                Percen = Math.Round(Percen, 2);
                newrow["QtyPecentage"] = Percen.ToString();
                newrow["Qty"] = Math.Round(actualqty, 2);
                newrow["CatSno"] = dr["CatSno"].ToString() + "_" + dr["Branch_Id"].ToString() + "";
                string tempsalevalue = dr["salevalue"].ToString();
                double actualsalevalue = 0;
                double.TryParse(tempsalevalue, out actualsalevalue);
                double ValuePercentage = 0;
                ValuePercentage = (actualsalevalue / totalSalevalue) * 100;
                ValuePercentage = Math.Round(ValuePercentage, 2);
                newrow["ValuePecentage"] = ValuePercentage.ToString();
                newrow["SaleValue"] = Math.Round(actualsalevalue, 2);
                Reports.Rows.Add(newrow);
            }
            foreach (DataRow dr in Reports.Rows)
            {
                TotalProductclass GetProduct = new TotalProductclass();
                GetProduct.Qty = dr["Qty"].ToString();
                GetProduct.SaleValue = dr["SaleValue"].ToString();
                string tempqty = dr["Qty"].ToString();
                double actualqty = 0;
                double.TryParse(tempqty, out actualqty);
                double Percen = 0;
                Percen = (actualqty / totalqty) * 100;
                Percen = Math.Round(Percen, 2);
                GetProduct.CategeoryName = dr["Categoryname"].ToString();
                GetProduct.subCategeoryName = dr["SubCatName"].ToString();
                GetProduct.Nos = dr["QtyPecentage"].ToString();
                GetProduct.Kgs = dr["ValuePecentage"].ToString();
                GetProduct.subCatsno = dr["subcatSno"].ToString();
                GetProduct.CatSno = dr["CatSno"].ToString();
                GetProduct.TotQty = totalqty.ToString();
                Categeorylist.Add(GetProduct);
                i++;
            }
            SubTotalProductclass obj1 = new SubTotalProductclass();

            obj1.MilkQty = dtDispatchMilkqty.Rows[0]["DeliveryQty"].ToString();
            obj1.CurdQty = dtDispatchCurdQty.Rows[0]["DeliveryQty"].ToString();
            obj1.OtherQty = dtDispatchOthersQty.Rows[0]["DeliveryQty"].ToString();
            obj1.MilkValue = dtDispatchMilkqty.Rows[0]["salevalue"].ToString();
            obj1.CurdValue = dtDispatchCurdQty.Rows[0]["salevalue"].ToString();
            obj1.OthersValue = dtDispatchOthersQty.Rows[0]["salevalue"].ToString();
            CategoryDispQtyLst.Add(obj1);
            MainTotalProductclass obj = new MainTotalProductclass();
            obj.TotalProductclass = Categeorylist;
            obj.SubTotalProductclass = CategoryDispQtyLst;
            CategoryDispQtyANDCategoryLst.Add(obj);
            string errresponse = GetJson(CategoryDispQtyANDCategoryLst);
            context.Response.Write(errresponse);
        }
        catch
        {
        }
    }
    private void getLineChartforsubcategeoryReport(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            string SubCat_sno = "";
            string BranchId = "";
            string SubcatSno = SubcatSno = context.Request["SubcatSno"];
            string[] arr = SubcatSno.Split('_');
            string t1 = arr.Length.ToString();
            if (t1 == "1")
            {
                SubCat_sno = context.Request["SubcatSno"];
            }
            else
            {
                SubCat_sno = arr[0];
                BranchId = arr[1];
            }
            DateTime ServerDateCurrentdate = VehicleDBMgr.GetTime(vdbmngr.conn);
            string s = context.Session["IndDate"].ToString();
            var dt = DateTime.ParseExact(s, "ddd MMM dd yyyy HH:mm:ss 'GMT'zzz", System.Globalization.CultureInfo.InvariantCulture);
            string Fdate = dt.ToString("yyyy-MM-dd");
            DateTime FromDate = Convert.ToDateTime(Fdate);
            string e = context.Session["Todate"].ToString();
            var edt = DateTime.ParseExact(e, "ddd MMM dd yyyy HH:mm:ss 'GMT'zzz", System.Globalization.CultureInfo.InvariantCulture);
            string Tdate = edt.ToString("yyyy-MM-dd");
            DateTime ToDate = Convert.ToDateTime(Tdate);
            string SalesType = context.Session["salestype"].ToString();
            DataTable dtble = new DataTable();
            if (BranchId == "8009")
            {
                cmd = new MySqlCommand("SELECT   TripInfo.Sno, ProductInfo.ProductName, ProductInfo.Categoryname, ProductInfo.productid, SUM(ProductInfo.Qty) AS dispatchqty, SUM(ProductInfo.UnitPrice * ProductInfo.Qty) AS salevalue, TripInfo.I_Date, TripInfo.VehicleNo, TripInfo.Status, TripInfo.DispName, TripInfo.DispType, TripInfo.DispMode, ProductInfo.CatSno, TripInfo.BranchID, TripInfo.BranchName, TripInfo.Branch_Id FROM (SELECT  tripdata.Sno, tripdata.DCNo, tripdata.I_Date, tripdata.VehicleNo, tripdata.Status, dispatch.DispName, dispatch.DispType, dispatch.DispMode, branchdata.BranchName, dispatch.BranchID, dispatch.Branch_Id FROM  branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno WHERE (dispatch.GroupId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT  Categoryname, ProductName, Sno, Qty, CatSno, productid, UnitPrice FROM  (SELECT productsdata.UnitPrice, productsdata.sno AS productid, products_category.sno AS CatSno, products_category.Categoryname, productsdata.ProductName, tripdata_1.Sno, tripsubdata.Qty FROM tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno INNER JOIN productsdata ON tripsubdata.ProductId = productsdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno WHERE (tripdata_1.AssignDate BETWEEN @d1 AND @d2) AND (productsdata.SubCat_sno = @subcatSno)) TripSubInfo) ProductInfo ON TripInfo.Sno = ProductInfo.Sno GROUP BY ProductInfo.CatSno, TripInfo.Branch_Id");
                cmd.Parameters.AddWithValue("@subcatSno", SubCat_sno);
                cmd.Parameters.AddWithValue("@branch", BranchId);
                cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-1));
                cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-1));
                dtble = vdbmngr.SelectQuery(cmd).Tables[0];
            }
            else if (BranchId == "8012" || BranchId == "8013")
            {
                cmd = new MySqlCommand("SELECT   TripInfo.Sno, ProductInfo.ProductName, ProductInfo.Categoryname, ProductInfo.productid, SUM(ProductInfo.Qty) AS dispatchqty, SUM(ProductInfo.UnitPrice * ProductInfo.Qty) AS salevalue, TripInfo.I_Date, TripInfo.VehicleNo, TripInfo.Status, TripInfo.DispName, TripInfo.DispType, TripInfo.DispMode, ProductInfo.CatSno, TripInfo.BranchID, TripInfo.BranchName, TripInfo.Branch_Id FROM (SELECT  tripdata.Sno, tripdata.DCNo, tripdata.I_Date, tripdata.VehicleNo, tripdata.Status, dispatch.DispName, dispatch.DispType, dispatch.DispMode, branchdata.BranchName, dispatch.BranchID, dispatch.Branch_Id FROM  branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno WHERE (dispatch.CompanyId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT  Categoryname, ProductName, Sno, Qty, CatSno, productid, UnitPrice FROM  (SELECT productsdata.UnitPrice, productsdata.sno AS productid, products_category.sno AS CatSno, products_category.Categoryname, productsdata.ProductName, tripdata_1.Sno, tripsubdata.Qty FROM tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno INNER JOIN productsdata ON tripsubdata.ProductId = productsdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno WHERE (tripdata_1.AssignDate BETWEEN @d1 AND @d2) AND (productsdata.SubCat_sno = @subcatSno)) TripSubInfo) ProductInfo ON TripInfo.Sno = ProductInfo.Sno GROUP BY ProductInfo.CatSno, TripInfo.Branch_Id");
                //cmd = new MySqlCommand("SELECT   ROUND(SUM(tripsubdata.Qty), 2) AS dispatchqty, tripdat.AssignDate, dispatch.BranchID, products_subcategory.SubCatName, branchdata.BranchName FROM  dispatch INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN (SELECT Sno, EmpId, DATE_FORMAT(AssignDate, '%m %d %y') AS AssignDate FROM  tripdata WHERE (AssignDate BETWEEN @d1 AND @d2)) tripdat ON triproutes.Tripdata_sno = tripdat.Sno INNER JOIN tripsubdata ON tripdat.Sno = tripsubdata.Tripdata_sno INNER JOIN productsdata ON tripsubdata.ProductId = productsdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN branchdata ON branchdata.sno = dispatch.BranchID WHERE (dispatch.CompanyId = @BranchID) AND (products_subcategory.sno = @subcatSno) GROUP BY tripdat.AssignDate, dispatch.BranchID ORDER BY tripdat.AssignDate");
                cmd.Parameters.AddWithValue("@subcatSno", SubCat_sno);
                cmd.Parameters.AddWithValue("@branch", BranchId);
                cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-1));
                cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-1));
                dtble = vdbmngr.SelectQuery(cmd).Tables[0];
            }
            else if (SalesType == "Plant")
            {
                cmd = new MySqlCommand("SELECT   TripInfo.Sno, ProductInfo.ProductName, ProductInfo.Categoryname, ProductInfo.productid, SUM(ProductInfo.Qty) AS dispatchqty, SUM(ProductInfo.UnitPrice * ProductInfo.Qty) AS salevalue, TripInfo.I_Date, TripInfo.VehicleNo, TripInfo.Status, TripInfo.DispName, TripInfo.DispType, TripInfo.DispMode, ProductInfo.CatSno, TripInfo.BranchID AS Branch_id, TripInfo.BranchName FROM (SELECT  tripdata.Sno, tripdata.DCNo, tripdata.I_Date, tripdata.VehicleNo, tripdata.Status, dispatch.DispName, dispatch.DispType, dispatch.DispMode, branchdata.BranchName, dispatch.BranchID, dispatch.Branch_Id FROM  branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.branchid INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno WHERE (dispatch.Branch_id = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT  Categoryname, ProductName, Sno, Qty, CatSno, productid, UnitPrice FROM  (SELECT productsdata.UnitPrice, productsdata.sno AS productid, products_category.sno AS CatSno, products_category.Categoryname, productsdata.ProductName, tripdata_1.Sno, tripsubdata.Qty FROM tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno INNER JOIN productsdata ON tripsubdata.ProductId = productsdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno WHERE (tripdata_1.AssignDate BETWEEN @d1 AND @d2) AND (productsdata.SubCat_sno = @subcatSno)) TripSubInfo) ProductInfo ON TripInfo.Sno = ProductInfo.Sno GROUP BY ProductInfo.CatSno, TripInfo.Branchid");
                //cmd = new MySqlCommand("SELECT   ROUND(SUM(tripsubdata.Qty), 2) AS dispatchqty, tripdat.AssignDate, dispatch.BranchID, products_subcategory.SubCatName, branchdata.BranchName FROM  dispatch INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN (SELECT Sno, EmpId, DATE_FORMAT(AssignDate, '%m %d %y') AS AssignDate FROM  tripdata WHERE (AssignDate BETWEEN @d1 AND @d2)) tripdat ON triproutes.Tripdata_sno = tripdat.Sno INNER JOIN tripsubdata ON tripdat.Sno = tripsubdata.Tripdata_sno INNER JOIN productsdata ON tripsubdata.ProductId = productsdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN branchdata ON branchdata.sno = dispatch.BranchID WHERE (dispatch.Branch_Id = @BranchID) AND (products_subcategory.sno = @subcatSno) GROUP BY tripdat.AssignDate, dispatch.BranchID ORDER BY tripdat.AssignDate");
                cmd.Parameters.AddWithValue("@subcatSno", SubCat_sno);
                cmd.Parameters.AddWithValue("@branch", BranchId);
                cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-1));
                cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-1));
                dtble = vdbmngr.SelectQuery(cmd).Tables[0];
            }
            else
            {
                cmd = new MySqlCommand("SELECT   ROUND(SUM(tripsubdata.Qty), 2) AS dispatchqty, tripdat.AssignDate, dispatch.BranchID, products_subcategory.SubCatName, branchdata.BranchName FROM  dispatch INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN (SELECT Sno, EmpId, DATE_FORMAT(AssignDate, '%m %d %y') AS AssignDate FROM  tripdata WHERE (AssignDate BETWEEN @d1 AND @d2)) tripdat ON triproutes.Tripdata_sno = tripdat.Sno INNER JOIN tripsubdata ON tripdat.Sno = tripsubdata.Tripdata_sno INNER JOIN productsdata ON tripsubdata.ProductId = productsdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN branchdata ON branchdata.sno = dispatch.BranchID WHERE (dispatch.Branch_Id = @BranchID) AND (products_subcategory.sno = @subcatSno) GROUP BY tripdat.AssignDate, dispatch.BranchID ORDER BY tripdat.AssignDate");
                cmd.Parameters.AddWithValue("@subcatSno", SubCat_sno);
                cmd.Parameters.AddWithValue("@branch", BranchId);
                cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-1));
                cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-1));
                dtble = vdbmngr.SelectQuery(cmd).Tables[0];
            }
            List<LineChartValuesclass> LineChartValuelist = new List<LineChartValuesclass>();
            foreach (DataRow dr in dtble.Rows)
            {
                LineChartValuesclass getLineChart = new LineChartValuesclass();
                getLineChart.BranchName = dr["BranchName"].ToString();
                getLineChart.dispatchqty = dr["dispatchqty"].ToString();
                getLineChart.BranchID = SubCat_sno + "_" + dr["Branch_Id"].ToString() + "";// dr["Branch_id"].ToString();
                LineChartValuelist.Add(getLineChart);
            }
            string respnceString = GetJson(LineChartValuelist);
            context.Response.Write(respnceString);
        }
        catch
        {
        }
    }
    public class PieValues
    {
        public List<string> RouteName { get; set; }
        public List<string> Amount { get; set; }
        public List<string> DeliveryQty { get; set; }
        public List<string> AverageyQty { get; set; }
        public List<string> catidandBranchid { get; set; }
        public string totalqty { get; set; }
        public List<PieValueTableClass> PieValueTableClass { get; set; }
    }
    public class PieValueTableClass
    {
        public string RouteName { get; set; }
        public string Routeid { get; set; }
        public string Amount { get; set; }
        public string DeliveryQty { get; set; }
        public string AverageyQty { get; set; }
        public string SaleValue { get; set; }
        public string AvgSaleValue { get; set; }
        public string catidandBranchid { get; set; }
    }
    private void GetCategoryWiseChart(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            string categoryid = context.Request["branchname"];
            string ddlDataType = context.Request["ddlDataType"];
            string[] arr = categoryid.Split('_');
            string t1 = arr.Length.ToString();
            string branchid = "";
            if (t1 == "1")
            {
                categoryid = arr[0];
                branchid = context.Request["branchname"];
            }
            else
            {
                branchid = arr[1];
                categoryid = arr[0];
            }
            string s = context.Session["IndDate"].ToString();
            var dt = DateTime.ParseExact(s, "ddd MMM dd yyyy HH:mm:ss 'GMT'zzz", System.Globalization.CultureInfo.InvariantCulture);
            string FromDate = dt.ToString("yyyy-MM-dd");
            DateTime From_Date = Convert.ToDateTime(FromDate);

            string e = context.Session["Todate"].ToString();
            var edt = DateTime.ParseExact(e, "ddd MMM dd yyyy HH:mm:ss 'GMT'zzz", System.Globalization.CultureInfo.InvariantCulture);
            string Todate = edt.ToString("yyyy-MM-dd");
            DateTime Enddate = Convert.ToDateTime(Todate);

            TimeSpan dateSpan = Enddate.Subtract(From_Date);
            //int days=dateSpan + 1;
            int days = dateSpan.Days;
            int NoOfdays = days + 1;

            List<PieValues> lPieValueslist = new List<PieValues>();
            List<string> RouteList = new List<string>();
            List<string> AmountList = new List<string>();
            List<string> DeliveryList = new List<string>();
            List<string> AvgQtyList = new List<string>();

            List<string> categoryidlist = new List<string>();
            List<PieValueTableClass> PieValueTableClasslist = new List<PieValueTableClass>();
            DataTable dtsalevalue = new DataTable();
            DataTable dtlekages = new DataTable();
            cmd = new MySqlCommand("SELECT branchdata.sno, salestypemanagement.salestype FROM branchdata INNER JOIN salestypemanagement ON branchdata.SalesType = salestypemanagement.sno WHERE (branchdata.sno = @Branchid)");
            cmd.Parameters.AddWithValue("@Branchid", branchid);
            DataTable dttable = vdbmngr.SelectQuery(cmd).Tables[0];
            string branchtype = "";
            if (dttable.Rows.Count > 0)
            {
                branchtype = dttable.Rows[0]["salestype"].ToString();
            }
            if (branchid == "8009")
            {
                cmd = new MySqlCommand("SELECT TripInfo.Sno, ProductInfo.ProductName, ProductInfo.Categoryname, ProductInfo.productid, SUM(ProductInfo.Qty) AS DeliveryQty, SUM(ProductInfo.UnitPrice * ProductInfo.Qty) AS salevalue, TripInfo.I_Date, TripInfo.VehicleNo, TripInfo.Status, TripInfo.DispName, TripInfo.DispType,TripInfo.DispMode, ProductInfo.CatSno, TripInfo.BranchID, TripInfo.BranchName,TripInfo.Branch_Id FROM (SELECT  tripdata.Sno, tripdata.DCNo, tripdata.I_Date, tripdata.VehicleNo, tripdata.Status, dispatch.DispName, dispatch.DispType, dispatch.DispMode, branchdata.BranchName, dispatch.BranchID,dispatch.Branch_Id FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno WHERE (dispatch.GroupId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT  Categoryname, ProductName, Sno, Qty, CatSno, productid, UnitPrice FROM  (SELECT productsdata.UnitPrice, productsdata.sno AS productid, products_category.sno AS CatSno, products_category.Categoryname, productsdata.ProductName, tripdata_1.Sno, tripsubdata.Qty FROM  tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno INNER JOIN productsdata ON tripsubdata.ProductId = productsdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno WHERE (tripdata_1.AssignDate BETWEEN @d1 AND @d2) AND (products_category.sno = @categoryid)) TripSubInfo) ProductInfo ON  TripInfo.Sno = ProductInfo.Sno GROUP BY ProductInfo.CatSno,TripInfo.Branch_Id");
                cmd.Parameters.AddWithValue("@d1", GetLowDate(From_Date).AddDays(-1));
                cmd.Parameters.AddWithValue("@d2", GetHighDate(Enddate).AddDays(-1));
                cmd.Parameters.AddWithValue("@categoryid", categoryid);
                cmd.Parameters.AddWithValue("@branch", branchid);
                DataTable dtsale_value = vdbmngr.SelectQuery(cmd).Tables[0];
                //dtAll.Merge(dtsale_value);
                //}
                DataView view = new DataView(dtsale_value);
                DataTable distinctproducts = view.ToTable(true, "CatSno", "BranchName");
                double totalqty = 0;
                double totalsalevalue = 0;
                foreach (DataRow dr in distinctproducts.Rows)
                {

                    foreach (DataRow drr in dtsale_value.Select("CatSno='" + dr["CatSno"].ToString() + "'AND BranchName='" + dr["BranchName"].ToString() + "'"))
                    {
                        if (ddlDataType == "Quantity")
                        {
                            double DeliveryQty = 0;
                            double.TryParse(drr["DeliveryQty"].ToString(), out DeliveryQty);
                            totalqty += DeliveryQty;
                            totalqty = Math.Round(totalqty, 2);
                        }
                        else
                        {

                            double SaleValue = 0;
                            double.TryParse(drr["salevalue"].ToString(), out SaleValue);
                            totalsalevalue += SaleValue;
                            totalsalevalue = Math.Round(totalsalevalue, 2);
                        }
                    }
                }
                foreach (DataRow dr in distinctproducts.Rows)
                {

                    foreach (DataRow drr in dtsale_value.Select("CatSno='" + dr["CatSno"].ToString() + "'AND BranchName='" + dr["BranchName"].ToString() + "'"))
                    {
                        string BranchName = ""; string BranchID = "";
                        foreach (DataRow drbranchid in dtsale_value.Select("BranchName='" + dr["BranchName"].ToString() + "'"))
                        {
                            BranchName = drbranchid["BranchName"].ToString();
                            BranchID = drbranchid["Branch_id"].ToString();
                            RouteList.Add(BranchName);
                        }
                        PieValueTableClass obj1 = new PieValueTableClass();
                        if (ddlDataType == "Quantity")
                        {
                            double DeliveryQty = 0;
                            double.TryParse(drr["DeliveryQty"].ToString(), out DeliveryQty);
                            double avgqty = 0;
                            avgqty = DeliveryQty / NoOfdays;
                            double percent = 0;
                            percent = (DeliveryQty / totalqty) * 100;
                            percent = Math.Round(percent, 2);
                            avgqty = Math.Round(avgqty, 2);
                            string Amount = percent.ToString();
                            if (Amount == "")
                            {
                                Amount = "0";
                            }
                            AmountList.Add(DeliveryQty.ToString());
                            AvgQtyList.Add(avgqty.ToString());
                            DeliveryList.Add(drr["DeliveryQty"].ToString());
                            categoryidlist.Add("" + drr["CatSno"].ToString() + "_" + BranchID + "");
                            obj1.RouteName = BranchName;
                            obj1.DeliveryQty = DeliveryQty.ToString();
                            obj1.AverageyQty = avgqty.ToString();
                            obj1.Routeid = "" + drr["CatSno"].ToString() + "_" + BranchID + "";
                        }
                        else
                        {
                            double SaleValue = 0;
                            double.TryParse(drr["salevalue"].ToString(), out SaleValue);
                            double avgvalue = 0;
                            avgvalue = SaleValue / NoOfdays;
                            double valuepercentage = 0;
                            valuepercentage = (SaleValue / totalsalevalue) * 100;
                            valuepercentage = Math.Round(valuepercentage, 2);
                            string Amount = valuepercentage.ToString();
                            if (Amount == "")
                            {
                                Amount = "0";
                            }
                            avgvalue = Math.Round(avgvalue, 2);
                            AmountList.Add(SaleValue.ToString());
                            AvgQtyList.Add(avgvalue.ToString());
                            DeliveryList.Add(drr["salevalue"].ToString());
                            categoryidlist.Add("" + drr["CatSno"].ToString() + "_" + BranchID + "");
                            obj1.RouteName = BranchName;
                            obj1.SaleValue = SaleValue.ToString();
                            obj1.AvgSaleValue = avgvalue.ToString();
                            obj1.Routeid = "" + drr["CatSno"].ToString() + "_" + BranchID + "";
                        }
                        PieValueTableClasslist.Add(obj1);
                    }
                }
                PieValues GetPieValues = new PieValues();
                GetPieValues.RouteName = RouteList;
                GetPieValues.Amount = AmountList;
                GetPieValues.catidandBranchid = categoryidlist;
                GetPieValues.totalqty = totalqty.ToString();
                GetPieValues.DeliveryQty = DeliveryList;
                GetPieValues.AverageyQty = AvgQtyList;
                GetPieValues.PieValueTableClass = PieValueTableClasslist;
                lPieValueslist.Add(GetPieValues);
                string errresponse = GetJson(lPieValueslist);
                context.Response.Write(errresponse);
            }
            else if (branchtype == "Plant")
            {

                cmd = new MySqlCommand("SELECT  TripInfo.Sno, ProductInfo.ProductName, ProductInfo.Categoryname, ProductInfo.productid, SUM(ProductInfo.Qty) AS DeliveryQty, SUM(ProductInfo.UnitPrice * ProductInfo.Qty) AS salevalue, TripInfo.I_Date, TripInfo.VehicleNo, TripInfo.Status, TripInfo.DispName, TripInfo.DispType, TripInfo.DispMode, ProductInfo.CatSno, TripInfo.BranchID, TripInfo.BranchName FROM  (SELECT tripdata.Sno, tripdata.DCNo, tripdata.I_Date, tripdata.VehicleNo, tripdata.Status, dispatch.DispName, dispatch.DispType, dispatch.DispMode, branchdata.BranchName, dispatch.BranchID FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno WHERE (dispatch.Branch_Id = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT Categoryname, ProductName, Sno, Qty, CatSno, productid, UnitPrice FROM  (SELECT productsdata.UnitPrice, productsdata.sno AS productid, products_category.sno AS CatSno, products_category.Categoryname, productsdata.ProductName, tripdata_1.Sno, tripsubdata.Qty FROM  tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno INNER JOIN productsdata ON tripsubdata.ProductId = productsdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno WHERE (tripdata_1.AssignDate BETWEEN @d1 AND @d2) AND (products_category.sno = @categoryid)) TripSubInfo) ProductInfo ON  TripInfo.Sno = ProductInfo.Sno GROUP BY TripInfo.BranchID");
                cmd.Parameters.AddWithValue("@d1", GetLowDate(From_Date).AddDays(-1));
                cmd.Parameters.AddWithValue("@d2", GetHighDate(Enddate).AddDays(-1));
                cmd.Parameters.AddWithValue("@categoryid", categoryid);
                cmd.Parameters.AddWithValue("@branch", branchid);
                DataTable routes = vdbmngr.SelectQuery(cmd).Tables[0];
                double totalqty = 0;
                double totalsalevalue = 0;
                foreach (DataRow dr in routes.Rows)
                {


                    if (ddlDataType == "Quantity")
                    {
                        double DeliveryQty = 0;
                        double.TryParse(dr["DeliveryQty"].ToString(), out DeliveryQty);
                        totalqty += DeliveryQty;
                        totalqty = Math.Round(totalqty, 2);
                    }
                    else
                    {
                        double SaleValue = 0;
                        double.TryParse(dr["salevalue"].ToString(), out SaleValue);
                        totalsalevalue += SaleValue;
                        totalsalevalue = Math.Round(totalsalevalue, 2);
                    }
                }
                foreach (DataRow dr in routes.Rows)
                {

                    cmd = new MySqlCommand("SELECT   sno,BranchName FROM branchdata WHERE  (sno = @BranchID)");
                    cmd.Parameters.AddWithValue("@BranchID", dr["BranchID"].ToString());
                    DataTable dtbranchname = vdbmngr.SelectQuery(cmd).Tables[0];
                    string BranchName = dtbranchname.Rows[0]["BranchName"].ToString();
                    string Branchid = dtbranchname.Rows[0]["sno"].ToString();
                    RouteList.Add(BranchName);
                    PieValueTableClass obj1 = new PieValueTableClass();
                    if (ddlDataType == "Quantity")
                    {
                        double DeliveryQty = 0;
                        double.TryParse(dr["DeliveryQty"].ToString(), out DeliveryQty);
                        double avgqty = 0;
                        avgqty = DeliveryQty / NoOfdays;
                        double percent = 0;
                        percent = (DeliveryQty / totalqty) * 100;
                        percent = Math.Round(percent, 2);
                        avgqty = Math.Round(avgqty, 2);
                        string Amount = percent.ToString();
                        if (Amount == "")
                        {
                            Amount = "0";
                        }
                        AmountList.Add(DeliveryQty.ToString());
                        AvgQtyList.Add(avgqty.ToString());
                        DeliveryList.Add(dr["DeliveryQty"].ToString());
                        categoryidlist.Add("" + dr["CatSno"].ToString() + "_" + dr["BranchID"].ToString() + "");
                        obj1.RouteName = BranchName;
                        obj1.DeliveryQty = DeliveryQty.ToString();
                        obj1.AverageyQty = avgqty.ToString();
                        obj1.Routeid = "" + dr["CatSno"].ToString() + "_" + dr["BranchID"].ToString() + "";
                        PieValueTableClasslist.Add(obj1);
                    }
                    else
                    {
                        double SaleValue = 0;
                        double.TryParse(dr["salevalue"].ToString(), out SaleValue);
                        double avgvalue = 0;
                        avgvalue = SaleValue / NoOfdays;
                        double valuepercentage = 0;
                        valuepercentage = (SaleValue / totalsalevalue) * 100;
                        valuepercentage = Math.Round(valuepercentage, 2);
                        string Amount = valuepercentage.ToString();
                        if (Amount == "")
                        {
                            Amount = "0";
                        }
                        avgvalue = Math.Round(avgvalue, 2);
                        AmountList.Add(SaleValue.ToString());
                        AvgQtyList.Add(avgvalue.ToString());
                        DeliveryList.Add(dr["salevalue"].ToString());
                        categoryidlist.Add("" + dr["CatSno"].ToString() + "_" + dr["BranchID"].ToString() + "");
                        obj1.RouteName = BranchName;
                        obj1.SaleValue = SaleValue.ToString();
                        obj1.AvgSaleValue = avgvalue.ToString();
                        obj1.Routeid = "" + dr["CatSno"].ToString() + "_" + dr["BranchID"].ToString() + "";
                        PieValueTableClasslist.Add(obj1);
                    }
                }
                PieValues GetPieValues = new PieValues();
                GetPieValues.RouteName = RouteList;
                GetPieValues.Amount = AmountList;
                GetPieValues.catidandBranchid = categoryidlist;
                GetPieValues.totalqty = totalqty.ToString();
                GetPieValues.DeliveryQty = DeliveryList;
                GetPieValues.AverageyQty = AvgQtyList;
                GetPieValues.PieValueTableClass = PieValueTableClasslist;
                lPieValueslist.Add(GetPieValues);
                string errresponse = GetJson(lPieValueslist);
                context.Response.Write(errresponse);
            }
            else if (branchtype == "SALES OFFICE")
            {
                cmd = new MySqlCommand("SELECT  modifiedroutes.Sno, modifiedroutes.RouteName, indents_subtable.Product_sno, productsdata.ProductName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty, ROUND(SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost), 2) AS salevalue, products_category.sno AS CatSno FROM modifiedroutes INNER JOIN modifiedroutesubtable ON modifiedroutes.Sno = modifiedroutesubtable.RefNo INNER JOIN branchdata ON modifiedroutesubtable.BranchID = branchdata.sno INNER JOIN (SELECT IndentNo, Branch_id, I_date FROM  indents WHERE  (I_date BETWEEN @d1 AND @d2)) indent ON branchdata.sno = indent.Branch_id INNER JOIN indents_subtable ON indent.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno INNER JOIN products_subcategory ON products_subcategory.sno = productsdata.SubCat_sno INNER JOIN products_category ON products_category.sno = products_subcategory.category_sno INNER JOIN tripdata ON indents_subtable.DTripId = tripdata.Sno WHERE  (modifiedroutes.BranchID = @BranchID) AND (modifiedroutesubtable.EDate IS NULL) AND (modifiedroutesubtable.CDate <= @d1) AND  (products_category.sno = @categoryid) OR (modifiedroutes.BranchID = @BranchID) AND (modifiedroutesubtable.EDate > @d1) AND (modifiedroutesubtable.CDate <= @d1) AND  (products_category.sno = @categoryid) GROUP BY modifiedroutes.Sno, products_category.sno");
                cmd.Parameters.AddWithValue("@d1", GetLowDate(From_Date).AddDays(-1));
                cmd.Parameters.AddWithValue("@d2", GetHighDate(Enddate).AddDays(-1));
                cmd.Parameters.AddWithValue("@categoryid", categoryid);
                cmd.Parameters.AddWithValue("@BranchID", branchid);
                DataTable routes = vdbmngr.SelectQuery(cmd).Tables[0];
                double totalqty = 0;
                double totalsalevalue = 0;
                foreach (DataRow dr in routes.Rows)
                {
                    if (ddlDataType == "Quantity")
                    {
                        double DeliveryQty = 0;
                        double.TryParse(dr["DeliveryQty"].ToString(), out DeliveryQty);
                        totalqty += DeliveryQty;
                        totalqty = Math.Round(totalqty, 2);
                    }
                    else
                    {
                        double SaleValue = 0;
                        double.TryParse(dr["salevalue"].ToString(), out SaleValue);
                        totalsalevalue += SaleValue;
                        totalsalevalue = Math.Round(totalsalevalue, 2);
                    }
                }
                foreach (DataRow dr in routes.Rows)
                {
                    PieValueTableClass obj1 = new PieValueTableClass();
                    RouteList.Add(dr["RouteName"].ToString());
                    if (ddlDataType == "Quantity")
                    {
                        double DeliveryQty = 0;
                        double.TryParse(dr["DeliveryQty"].ToString(), out DeliveryQty);
                        double avgqty = 0;
                        avgqty = DeliveryQty / NoOfdays;
                        double percent = 0;
                        percent = (DeliveryQty / totalqty) * 100;
                        percent = Math.Round(percent, 2);
                        avgqty = Math.Round(avgqty, 2);
                        string Amount = percent.ToString();
                        if (Amount == "")
                        {
                            Amount = "0";
                        }
                        AmountList.Add(DeliveryQty.ToString());
                        AvgQtyList.Add(avgqty.ToString());
                        DeliveryList.Add(dr["DeliveryQty"].ToString());
                        categoryidlist.Add("" + dr["CatSno"].ToString() + "_" + dr["Sno"].ToString() + "");
                        obj1.RouteName = dr["RouteName"].ToString();
                        obj1.DeliveryQty = DeliveryQty.ToString();
                        obj1.AverageyQty = avgqty.ToString();
                        obj1.Routeid = "" + dr["CatSno"].ToString() + "_" + dr["Sno"].ToString() + "";
                    }
                    else
                    {
                        double SaleValue = 0;
                        double.TryParse(dr["salevalue"].ToString(), out SaleValue);
                        double avgvalue = 0;
                        avgvalue = SaleValue / NoOfdays;
                        double valuepercentage = 0;
                        valuepercentage = (SaleValue / totalsalevalue) * 100;
                        valuepercentage = Math.Round(valuepercentage, 2);
                        string Amount = valuepercentage.ToString();
                        if (Amount == "")
                        {
                            Amount = "0";
                        }
                        AmountList.Add(SaleValue.ToString());
                        AvgQtyList.Add(avgvalue.ToString());
                        DeliveryList.Add(dr["SaleValue"].ToString());
                        categoryidlist.Add("" + dr["CatSno"].ToString() + "_" + dr["Sno"].ToString() + "");
                        obj1.RouteName = dr["RouteName"].ToString();
                        obj1.DeliveryQty = SaleValue.ToString();
                        obj1.AverageyQty = avgvalue.ToString();
                        obj1.Routeid = "" + dr["CatSno"].ToString() + "_" + dr["Sno"].ToString() + "";
                    }
                    PieValueTableClasslist.Add(obj1);
                }
                PieValues GetPieValues = new PieValues();
                GetPieValues.RouteName = RouteList;
                GetPieValues.Amount = AmountList;
                GetPieValues.catidandBranchid = categoryidlist;
                GetPieValues.totalqty = totalqty.ToString();
                GetPieValues.DeliveryQty = DeliveryList;
                GetPieValues.AverageyQty = AvgQtyList;
                GetPieValues.PieValueTableClass = PieValueTableClasslist;
                lPieValueslist.Add(GetPieValues);
                string errresponse = GetJson(lPieValueslist);
                context.Response.Write(errresponse);
            }
            else
            {
                cmd = new MySqlCommand("SELECT  modifiedroutes.Sno, modifiedroutes.RouteName,products_category.sno AS CatSno, indents_subtable.Product_sno, productsdata.ProductName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty, ROUND(SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost), 2) AS salevalue, branchdata.BranchName FROM modifiedroutes INNER JOIN modifiedroutesubtable ON modifiedroutes.Sno = modifiedroutesubtable.RefNo INNER JOIN branchdata ON modifiedroutesubtable.BranchID = branchdata.sno INNER JOIN (SELECT IndentNo, Branch_id, I_date FROM  indents WHERE  (I_date BETWEEN @d1 AND @d2)) indent ON branchdata.sno = indent.Branch_id INNER JOIN indents_subtable ON indent.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno INNER JOIN products_subcategory ON products_subcategory.sno = productsdata.SubCat_sno INNER JOIN products_category ON products_category.sno = products_subcategory.category_sno INNER JOIN tripdata ON indents_subtable.DTripId = tripdata.Sno WHERE (modifiedroutesubtable.EDate IS NULL) AND (modifiedroutesubtable.CDate <= @d1) AND (modifiedroutes.Sno = @BranchID) AND  (products_category.sno = @categoryid) OR (modifiedroutesubtable.EDate > @d1) AND (modifiedroutesubtable.CDate <= @d1) AND (modifiedroutes.Sno = @BranchID) AND  (products_category.sno = @categoryid) GROUP BY modifiedroutesubtable.BranchID, products_category.sno");
                cmd.Parameters.AddWithValue("@d1", GetLowDate(From_Date).AddDays(-1));
                cmd.Parameters.AddWithValue("@d2", GetHighDate(Enddate).AddDays(-1));
                cmd.Parameters.AddWithValue("@categoryid", categoryid);
                cmd.Parameters.AddWithValue("@BranchID", branchid);
                DataTable routes = vdbmngr.SelectQuery(cmd).Tables[0];
                double totalqty = 0; double totalsalevalue = 0;
                foreach (DataRow dr in routes.Rows)
                {
                    if (ddlDataType == "Quantity")
                    {
                        double DeliveryQty = 0;
                        double.TryParse(dr["DeliveryQty"].ToString(), out DeliveryQty);
                        totalqty += DeliveryQty;
                        totalqty = Math.Round(totalqty, 2);
                    }
                    else
                    {
                        double SaleValue = 0;
                        double.TryParse(dr["salevalue"].ToString(), out SaleValue);
                        totalsalevalue += SaleValue;
                        totalsalevalue = Math.Round(totalsalevalue, 2);
                    }
                }
                foreach (DataRow dr in routes.Rows)
                {

                    RouteList.Add(dr["BranchName"].ToString());
                    PieValueTableClass obj1 = new PieValueTableClass();
                    if (ddlDataType == "Quantity")
                    {
                        double DeliveryQty = 0;
                        double.TryParse(dr["DeliveryQty"].ToString(), out DeliveryQty);
                        double avgqty = 0;
                        avgqty = DeliveryQty / NoOfdays;
                        double percent = 0;
                        percent = (DeliveryQty / totalqty) * 100;
                        percent = Math.Round(percent, 2);
                        avgqty = Math.Round(avgqty, 2);
                        string Amount = percent.ToString();
                        if (Amount == "")
                        {
                            Amount = "0";
                        }
                        AmountList.Add(DeliveryQty.ToString());
                        AvgQtyList.Add(avgqty.ToString());
                        DeliveryList.Add(dr["DeliveryQty"].ToString());
                        categoryidlist.Add("" + dr["Sno"].ToString() + "_" + dr["CatSno"].ToString() + "");
                        obj1.RouteName = dr["BranchName"].ToString();
                        obj1.DeliveryQty = DeliveryQty.ToString();
                        obj1.AverageyQty = avgqty.ToString();
                        obj1.Routeid = "" + dr["Sno"].ToString() + "_" + dr["CatSno"].ToString() + "";
                    }
                    else
                    {
                        double SaleValue = 0;
                        double.TryParse(dr["salevalue"].ToString(), out SaleValue);
                        double avgvalue = 0;
                        avgvalue = SaleValue / NoOfdays;
                        double valuepercentage = 0;
                        valuepercentage = (SaleValue / totalsalevalue) * 100;
                        string Amount = valuepercentage.ToString();
                        if (Amount == "")
                        {
                            Amount = "0";
                        }
                        AmountList.Add(SaleValue.ToString());
                        AvgQtyList.Add(avgvalue.ToString());
                        DeliveryList.Add(dr["SaleValue"].ToString());
                        categoryidlist.Add("" + dr["Sno"].ToString() + "_" + dr["CatSno"].ToString() + "");
                        obj1.SaleValue = SaleValue.ToString();
                        obj1.AvgSaleValue = avgvalue.ToString();
                        obj1.Routeid = "" + dr["Sno"].ToString() + "_" + dr["CatSno"].ToString() + "";
                    }
                    PieValueTableClasslist.Add(obj1);
                }
                PieValues GetPieValues = new PieValues();
                GetPieValues.RouteName = RouteList;
                GetPieValues.Amount = AmountList;
                GetPieValues.catidandBranchid = categoryidlist;
                GetPieValues.totalqty = totalqty.ToString();
                GetPieValues.DeliveryQty = DeliveryList;
                GetPieValues.AverageyQty = AvgQtyList;
                GetPieValues.PieValueTableClass = PieValueTableClasslist;
                lPieValueslist.Add(GetPieValues);
                //}
                string errresponse = GetJson(lPieValueslist);
                context.Response.Write(errresponse);
            }
        }
        catch
        {
        }
    }
    private void Get_Dispatch_Sale_CategoryWise(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            DataTable Report = new DataTable();
            Report.Columns.Add("DispatchQty");
            Report.Columns.Add("SaleValue");
            Report.Columns.Add("ThisMonthDispatchQty");
            Report.Columns.Add("ThisWeakDispatchQty");
            Report.Columns.Add("ThisMonthSaleValue");
            Report.Columns.Add("ThisWeakSaleValue");
            Report.Columns.Add("MilkQty");
            Report.Columns.Add("CurdQty");
            Report.Columns.Add("OthersQty");
            Report.Columns.Add("CollectionAmount");
            string type = context.Request["ddltype"];
            string SalesType = context.Session["salestype"].ToString();
            string s = context.Request["FromDate"];
            var dt = DateTime.ParseExact(s, "ddd MMM dd yyyy HH:mm:ss 'GMT'zzz", System.Globalization.CultureInfo.InvariantCulture);
            string FromDate = dt.ToString("yyyy-MM-dd");
            DateTime From_Date = Convert.ToDateTime(FromDate);
            string e = context.Request["Todate"];
            var edt = DateTime.ParseExact(e, "ddd MMM dd yyyy HH:mm:ss 'GMT'zzz", System.Globalization.CultureInfo.InvariantCulture);
            string Todate = edt.ToString("yyyy-MM-dd");
            DateTime Enddate = Convert.ToDateTime(Todate);
            string branchid = context.Request["BranchId"];
            DataTable dtcollection = new DataTable();
            DataTable dtctegorywisedispatch = new DataTable();
            DataTable dtAll = new DataTable();
            DataTable dtGroupBranchCollection = new DataTable();
            if (branchid == "8009")
            {
                cmd = new MySqlCommand("SELECT  branchmappingtable.SubBranch, branchmappingtable.SuperBranch, branchmappingtable.SubBranch AS Expr1, branchdata.BranchName,branchdata.SalesType FROM  branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno WHERE  (branchmappingtable.SuperBranch = @Branchid) GROUP BY branchmappingtable.SubBranch");
                cmd.Parameters.AddWithValue("@Branchid", branchid);
                DataTable BtGroupBranches = vdbmngr.SelectQuery(cmd).Tables[0];
                foreach (DataRow drgrbranch in BtGroupBranches.Rows)
                {
                    if (drgrbranch["SubBranch"].ToString() == "172")
                    {
                        cmd = new MySqlCommand("SELECT    branchmappingtable.SuperBranch, ROUND(SUM(colltion.AmountPaid) / 2, 2) AS AmountPaid FROM  branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN modifiedroutes ON branchmappingtable.SubBranch = modifiedroutes.BranchID INNER JOIN (SELECT  RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo INNER JOIN (SELECT  Branchid, AmountPaid, PaidDate FROM  collections WHERE (PaymentType <> 'Incentive') AND (PaymentType <> 'Bank Transfer') AND (PaymentType <> 'Cheque') AND (PaidDate BETWEEN @d1 AND @d2)) colltion ON modifidroutssubtab.BranchID = colltion.Branchid WHERE (branchmappingtable.SuperBranch = @BranchId) AND (branchmappingtable.SubBranch NOT IN (538,  1801, 3625)) GROUP BY branchmappingtable.SuperBranch");
                        cmd.Parameters.AddWithValue("@BranchID", drgrbranch["SubBranch"].ToString());
                        cmd.Parameters.AddWithValue("@starttime", GetLowDate(From_Date));
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(From_Date));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(Enddate));
                        dtGroupBranchCollection = vdbmngr.SelectQuery(cmd).Tables[0];
                    }
                    else if (drgrbranch["SubBranch"].ToString() == "3625")
                    {
                        cmd = new MySqlCommand("SELECT    branchmappingtable.SuperBranch, ROUND(SUM(colltion.AmountPaid) / 2, 2) AS AmountPaid FROM  branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN modifiedroutes ON branchmappingtable.SubBranch = modifiedroutes.BranchID INNER JOIN (SELECT  RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo INNER JOIN (SELECT  Branchid, AmountPaid, PaidDate FROM  collections WHERE (PaymentType <> 'Incentive') AND (PaymentType <> 'Bank Transfer') AND (PaymentType <> 'Cheque') AND (PaidDate BETWEEN @d1 AND @d2)) colltion ON modifidroutssubtab.BranchID = colltion.Branchid WHERE (branchmappingtable.SuperBranch = @BranchId) AND (branchmappingtable.SubBranch IN (4609,3625)) GROUP BY branchmappingtable.SuperBranch");
                        cmd.Parameters.AddWithValue("@BranchID", drgrbranch["SubBranch"].ToString());
                        cmd.Parameters.AddWithValue("@starttime", GetLowDate(From_Date));
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(From_Date));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(Enddate));
                        dtGroupBranchCollection = vdbmngr.SelectQuery(cmd).Tables[0];
                    }
                    else if (drgrbranch["SubBranch"].ToString() == "1801")
                    {
                        cmd = new MySqlCommand("SELECT    branchmappingtable.SuperBranch, ROUND(SUM(colltion.AmountPaid) / 2, 2) AS AmountPaid FROM  branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN modifiedroutes ON branchmappingtable.SubBranch = modifiedroutes.BranchID INNER JOIN (SELECT  RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo INNER JOIN (SELECT  Branchid, AmountPaid, PaidDate FROM  collections WHERE (PaymentType <> 'Incentive') AND (PaymentType <> 'Bank Transfer') AND (PaymentType <> 'Cheque') AND (PaidDate BETWEEN @d1 AND @d2)) colltion ON modifidroutssubtab.BranchID = colltion.Branchid WHERE (branchmappingtable.SuperBranch = @BranchId)  GROUP BY branchmappingtable.SuperBranch");
                        cmd.Parameters.AddWithValue("@BranchID", drgrbranch["SubBranch"].ToString());
                        cmd.Parameters.AddWithValue("@starttime", GetLowDate(From_Date));
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(From_Date));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(Enddate));
                        dtGroupBranchCollection = vdbmngr.SelectQuery(cmd).Tables[0];
                    }
                    else if (drgrbranch["SubBranch"].ToString() == "158" || drgrbranch["SubBranch"].ToString() == "4626")
                    {
                        cmd = new MySqlCommand("SELECT    branchmappingtable.SuperBranch, ROUND(SUM(colltion.AmountPaid) / 2, 2) AS AmountPaid FROM  branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN modifiedroutes ON branchmappingtable.SubBranch = modifiedroutes.BranchID INNER JOIN (SELECT  RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo INNER JOIN (SELECT  Branchid, AmountPaid, PaidDate FROM  collections WHERE (PaymentType <> 'Incentive') AND (PaymentType <> 'Bank Transfer') AND (PaymentType <> 'Cheque') AND (PaidDate BETWEEN @d1 AND @d2)) colltion ON modifidroutssubtab.BranchID = colltion.Branchid WHERE (branchmappingtable.SuperBranch = @BranchId)  GROUP BY branchmappingtable.SuperBranch");
                        cmd.Parameters.AddWithValue("@BranchID", drgrbranch["SubBranch"].ToString());
                        cmd.Parameters.AddWithValue("@starttime", GetLowDate(From_Date));
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(From_Date));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(Enddate));
                        dtGroupBranchCollection = vdbmngr.SelectQuery(cmd).Tables[0];
                    }
                    dtAll.Merge(dtGroupBranchCollection);
                }
                cmd = new MySqlCommand("SELECT  TripInfo.Sno, TripInfo.DCNo, ProductInfo.Categoryname, ProductInfo.productid, SUM(ProductInfo.Qty) AS DeliveryQty, SUM(ProductInfo.UnitPrice * ProductInfo.Qty) AS salevalue, TripInfo.I_Date, TripInfo.VehicleNo, TripInfo.Status, TripInfo.DispName, TripInfo.DispType, TripInfo.DispMode, ProductInfo.CatSno FROM (SELECT  tripdata.Sno, tripdata.DCNo, tripdata.I_Date, tripdata.VehicleNo, tripdata.Status, dispatch.DispName, dispatch.DispType, dispatch.DispMode FROM  branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno WHERE (dispatch.GroupId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT Categoryname, ProductName, UnitPrice, Sno, Qty, CatSno, productid FROM  (SELECT  productsdata.UnitPrice, productsdata.sno AS productid, products_category.sno AS CatSno, products_category.Categoryname, productsdata.ProductName, tripdata_1.Sno, tripsubdata.Qty FROM  tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno INNER JOIN productsdata ON tripsubdata.ProductId = productsdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno WHERE (tripdata_1.AssignDate BETWEEN @d1 AND @d2)) TripSubInfo) ProductInfo ON TripInfo.Sno = ProductInfo.Sno GROUP BY ProductInfo.CatSno ORDER BY ProductInfo.CatSno, ProductInfo.ProductName");
                cmd.Parameters.AddWithValue("@branch", branchid);
                cmd.Parameters.AddWithValue("@SOID", branchid);
                cmd.Parameters.AddWithValue("@d1", GetLowDate(From_Date).AddDays(-1));
                cmd.Parameters.AddWithValue("@d2", GetHighDate(Enddate).AddDays(-1));
                dtctegorywisedispatch = vdbmngr.SelectQuery(cmd).Tables[0];
            }
            else if (branchid == "8012" || branchid == "8013")
            {
                cmd = new MySqlCommand("SELECT  branchmappingtable.SubBranch, branchmappingtable.SuperBranch, branchmappingtable.SubBranch AS Expr1, branchdata.BranchName,branchdata.SalesType FROM  branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno WHERE  (branchmappingtable.SuperBranch = @Branchid) GROUP BY branchmappingtable.SubBranch");
                cmd.Parameters.AddWithValue("@Branchid", branchid);
                DataTable BtGroupBranches = vdbmngr.SelectQuery(cmd).Tables[0];
                foreach (DataRow drgrbranch in BtGroupBranches.Rows)
                {
                    if (drgrbranch["SubBranch"].ToString() == "172")
                    {
                        cmd = new MySqlCommand("SELECT    branchmappingtable.SuperBranch, ROUND(SUM(colltion.AmountPaid) / 2, 2) AS AmountPaid FROM  branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN modifiedroutes ON branchmappingtable.SubBranch = modifiedroutes.BranchID INNER JOIN (SELECT  RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo INNER JOIN (SELECT  Branchid, AmountPaid, PaidDate FROM  collections WHERE (PaymentType <> 'Incentive') AND (PaymentType <> 'Bank Transfer') AND (PaymentType <> 'Cheque') AND (PaidDate BETWEEN @d1 AND @d2)) colltion ON modifidroutssubtab.BranchID = colltion.Branchid WHERE (branchmappingtable.SuperBranch = @BranchId) AND (branchmappingtable.SubBranch NOT IN (538,  1801, 3625)) GROUP BY branchmappingtable.SuperBranch");
                        cmd.Parameters.AddWithValue("@BranchID", drgrbranch["SubBranch"].ToString());
                        cmd.Parameters.AddWithValue("@starttime", GetLowDate(From_Date));
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(From_Date));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(Enddate));
                        dtGroupBranchCollection = vdbmngr.SelectQuery(cmd).Tables[0];
                    }
                    else if (drgrbranch["SubBranch"].ToString() == "3625")
                    {
                        cmd = new MySqlCommand("SELECT    branchmappingtable.SuperBranch, ROUND(SUM(colltion.AmountPaid) / 2, 2) AS AmountPaid FROM  branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN modifiedroutes ON branchmappingtable.SubBranch = modifiedroutes.BranchID INNER JOIN (SELECT  RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo INNER JOIN (SELECT  Branchid, AmountPaid, PaidDate FROM  collections WHERE (PaymentType <> 'Incentive') AND (PaymentType <> 'Bank Transfer') AND (PaymentType <> 'Cheque') AND (PaidDate BETWEEN @d1 AND @d2)) colltion ON modifidroutssubtab.BranchID = colltion.Branchid WHERE (branchmappingtable.SuperBranch = @BranchId) AND (branchmappingtable.SubBranch IN (4609,3625)) GROUP BY branchmappingtable.SuperBranch");
                        cmd.Parameters.AddWithValue("@BranchID", drgrbranch["SubBranch"].ToString());
                        cmd.Parameters.AddWithValue("@starttime", GetLowDate(From_Date));
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(From_Date));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(Enddate));
                        dtGroupBranchCollection = vdbmngr.SelectQuery(cmd).Tables[0];
                    }
                    else if (drgrbranch["SubBranch"].ToString() == "1801")
                    {
                        cmd = new MySqlCommand("SELECT    branchmappingtable.SuperBranch, ROUND(SUM(colltion.AmountPaid) / 2, 2) AS AmountPaid FROM  branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN modifiedroutes ON branchmappingtable.SubBranch = modifiedroutes.BranchID INNER JOIN (SELECT  RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo INNER JOIN (SELECT  Branchid, AmountPaid, PaidDate FROM  collections WHERE (PaymentType <> 'Incentive') AND (PaymentType <> 'Bank Transfer') AND (PaymentType <> 'Cheque') AND (PaidDate BETWEEN @d1 AND @d2)) colltion ON modifidroutssubtab.BranchID = colltion.Branchid WHERE (branchmappingtable.SuperBranch = @BranchId)  GROUP BY branchmappingtable.SuperBranch");
                        cmd.Parameters.AddWithValue("@BranchID", drgrbranch["SubBranch"].ToString());
                        cmd.Parameters.AddWithValue("@starttime", GetLowDate(From_Date));
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(From_Date));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(Enddate));
                        dtGroupBranchCollection = vdbmngr.SelectQuery(cmd).Tables[0];
                    }
                    else if (drgrbranch["SubBranch"].ToString() == "158" || drgrbranch["SubBranch"].ToString() == "4626")
                    {
                        cmd = new MySqlCommand("SELECT    branchmappingtable.SuperBranch, ROUND(SUM(colltion.AmountPaid) / 2, 2) AS AmountPaid FROM  branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN modifiedroutes ON branchmappingtable.SubBranch = modifiedroutes.BranchID INNER JOIN (SELECT  RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo INNER JOIN (SELECT  Branchid, AmountPaid, PaidDate FROM  collections WHERE (PaymentType <> 'Incentive') AND (PaymentType <> 'Bank Transfer') AND (PaymentType <> 'Cheque') AND (PaidDate BETWEEN @d1 AND @d2)) colltion ON modifidroutssubtab.BranchID = colltion.Branchid WHERE (branchmappingtable.SuperBranch = @BranchId)  GROUP BY branchmappingtable.SuperBranch");
                        cmd.Parameters.AddWithValue("@BranchID", drgrbranch["SubBranch"].ToString());
                        cmd.Parameters.AddWithValue("@starttime", GetLowDate(From_Date));
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(From_Date));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(Enddate));
                        dtGroupBranchCollection = vdbmngr.SelectQuery(cmd).Tables[0];
                    }
                    dtAll.Merge(dtGroupBranchCollection);
                }
                cmd = new MySqlCommand("SELECT  TripInfo.Sno, TripInfo.DCNo, ProductInfo.Categoryname, ProductInfo.productid, SUM(ProductInfo.Qty) AS DeliveryQty, SUM(ProductInfo.UnitPrice * ProductInfo.Qty) AS salevalue, TripInfo.I_Date, TripInfo.VehicleNo, TripInfo.Status, TripInfo.DispName, TripInfo.DispType, TripInfo.DispMode, ProductInfo.CatSno FROM (SELECT  tripdata.Sno, tripdata.DCNo, tripdata.I_Date, tripdata.VehicleNo, tripdata.Status, dispatch.DispName, dispatch.DispType, dispatch.DispMode FROM  branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno WHERE (dispatch.CompanyId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT Categoryname, ProductName, UnitPrice, Sno, Qty, CatSno, productid FROM  (SELECT  productsdata.UnitPrice, productsdata.sno AS productid, products_category.sno AS CatSno, products_category.Categoryname, productsdata.ProductName, tripdata_1.Sno, tripsubdata.Qty FROM  tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno INNER JOIN productsdata ON tripsubdata.ProductId = productsdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno WHERE (tripdata_1.AssignDate BETWEEN @d1 AND @d2)) TripSubInfo) ProductInfo ON TripInfo.Sno = ProductInfo.Sno GROUP BY ProductInfo.CatSno ORDER BY ProductInfo.CatSno, ProductInfo.ProductName");
                cmd.Parameters.AddWithValue("@branch", branchid);
                cmd.Parameters.AddWithValue("@SOID", branchid);
                cmd.Parameters.AddWithValue("@d1", GetLowDate(From_Date).AddDays(-1));
                cmd.Parameters.AddWithValue("@d2", GetHighDate(Enddate).AddDays(-1));
                dtctegorywisedispatch = vdbmngr.SelectQuery(cmd).Tables[0];
            }
            else if (SalesType == "Plant")
            {
                if (branchid == "172")
                {
                    cmd = new MySqlCommand("SELECT    branchmappingtable.SuperBranch, ROUND(SUM(colltion.AmountPaid) / 2, 2) AS AmountPaid FROM  branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN modifiedroutes ON branchmappingtable.SubBranch = modifiedroutes.BranchID INNER JOIN (SELECT  RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo INNER JOIN (SELECT  Branchid, AmountPaid, PaidDate FROM  collections WHERE (PaymentType <> 'Incentive') AND (PaymentType <> 'Bank Transfer') AND (PaymentType <> 'Cheque') AND (PaidDate BETWEEN @d1 AND @d2)) colltion ON modifidroutssubtab.BranchID = colltion.Branchid WHERE (branchmappingtable.SuperBranch = @BranchId) AND (branchmappingtable.SubBranch NOT IN (538,  1801, 3625)) GROUP BY branchmappingtable.SuperBranch");
                    cmd.Parameters.AddWithValue("@BranchID", branchid);
                    cmd.Parameters.AddWithValue("@starttime", GetLowDate(From_Date));
                    cmd.Parameters.AddWithValue("@d1", GetLowDate(From_Date));
                    cmd.Parameters.AddWithValue("@d2", GetHighDate(Enddate));
                    dtcollection = vdbmngr.SelectQuery(cmd).Tables[0];
                }
                else if (branchid == "3625")
                {
                    cmd = new MySqlCommand("SELECT    branchmappingtable.SuperBranch, ROUND(SUM(colltion.AmountPaid) / 2, 2) AS AmountPaid FROM  branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN modifiedroutes ON branchmappingtable.SubBranch = modifiedroutes.BranchID INNER JOIN (SELECT  RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo INNER JOIN (SELECT  Branchid, AmountPaid, PaidDate FROM  collections WHERE (PaymentType <> 'Incentive') AND (PaymentType <> 'Bank Transfer') AND (PaymentType <> 'Cheque') AND (PaidDate BETWEEN @d1 AND @d2)) colltion ON modifidroutssubtab.BranchID = colltion.Branchid WHERE (branchmappingtable.SuperBranch = @BranchId) AND (branchmappingtable.SubBranch IN (4609, 3625)) GROUP BY branchmappingtable.SuperBranch");
                    cmd.Parameters.AddWithValue("@BranchID", branchid);
                    cmd.Parameters.AddWithValue("@starttime", GetLowDate(From_Date));
                    cmd.Parameters.AddWithValue("@d1", GetLowDate(From_Date));
                    cmd.Parameters.AddWithValue("@d2", GetHighDate(Enddate));
                    dtcollection = vdbmngr.SelectQuery(cmd).Tables[0];
                }
                else if (branchid == "1801")
                {
                    cmd = new MySqlCommand("SELECT    branchmappingtable.SuperBranch, ROUND(SUM(colltion.AmountPaid) / 2, 2) AS AmountPaid FROM  branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN modifiedroutes ON branchmappingtable.SubBranch = modifiedroutes.BranchID INNER JOIN (SELECT  RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo INNER JOIN (SELECT  Branchid, AmountPaid, PaidDate FROM  collections WHERE (PaymentType <> 'Incentive') AND (PaymentType <> 'Bank Transfer') AND (PaymentType <> 'Cheque') AND (PaidDate BETWEEN @d1 AND @d2)) colltion ON modifidroutssubtab.BranchID = colltion.Branchid WHERE (branchmappingtable.SuperBranch = @BranchId)  GROUP BY branchmappingtable.SuperBranch");
                    cmd.Parameters.AddWithValue("@BranchID", branchid);
                    cmd.Parameters.AddWithValue("@starttime", GetLowDate(From_Date));
                    cmd.Parameters.AddWithValue("@d1", GetLowDate(From_Date));
                    cmd.Parameters.AddWithValue("@d2", GetHighDate(Enddate));
                    dtcollection = vdbmngr.SelectQuery(cmd).Tables[0];
                }
                else
                {
                    cmd = new MySqlCommand("SELECT    branchmappingtable.SuperBranch, ROUND(SUM(colltion.AmountPaid) / 2, 2) AS AmountPaid FROM  branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN modifiedroutes ON branchmappingtable.SubBranch = modifiedroutes.BranchID INNER JOIN (SELECT  RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo INNER JOIN (SELECT  Branchid, AmountPaid, PaidDate FROM  collections WHERE (PaymentType <> 'Incentive') AND (PaymentType <> 'Bank Transfer') AND (PaymentType <> 'Cheque') AND (PaidDate BETWEEN @d1 AND @d2)) colltion ON modifidroutssubtab.BranchID = colltion.Branchid WHERE (branchmappingtable.SuperBranch = @BranchId)  GROUP BY branchmappingtable.SuperBranch");
                    cmd.Parameters.AddWithValue("@BranchID", branchid);
                    cmd.Parameters.AddWithValue("@starttime", GetLowDate(From_Date));
                    cmd.Parameters.AddWithValue("@d1", GetLowDate(From_Date));
                    cmd.Parameters.AddWithValue("@d2", GetHighDate(Enddate));
                    dtcollection = vdbmngr.SelectQuery(cmd).Tables[0];
                }
                cmd = new MySqlCommand("SELECT  TripInfo.Sno, TripInfo.DCNo, ProductInfo.Categoryname, ProductInfo.productid, SUM(ProductInfo.Qty) AS DeliveryQty, SUM(ProductInfo.UnitPrice * ProductInfo.Qty) AS salevalue, TripInfo.I_Date, TripInfo.VehicleNo, TripInfo.Status, TripInfo.DispName, TripInfo.DispType, TripInfo.DispMode, ProductInfo.CatSno FROM  (SELECT  tripdata.Sno, tripdata.DCNo, tripdata.I_Date, tripdata.VehicleNo, tripdata.Status, dispatch.DispName, dispatch.DispType, dispatch.DispMode FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN  tripdata ON triproutes.Tripdata_sno = tripdata.Sno WHERE (dispatch.Branch_Id = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT Categoryname, ProductName, UnitPrice, Sno, Qty, CatSno, productid FROM  (SELECT productsdata.UnitPrice, productsdata.sno AS productid, products_category.sno AS CatSno, products_category.Categoryname, productsdata.ProductName, tripdata_1.Sno, tripsubdata.Qty FROM  tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno INNER JOIN productsdata ON tripsubdata.ProductId = productsdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno WHERE     (tripdata_1.AssignDate BETWEEN @d1 AND @d2)) TripSubInfo) ProductInfo ON TripInfo.Sno = ProductInfo.Sno GROUP BY ProductInfo.CatSno ORDER BY ProductInfo.CatSno, ProductInfo.ProductName");
                cmd.Parameters.AddWithValue("@branch", branchid);
                cmd.Parameters.AddWithValue("@SOID", branchid);
                cmd.Parameters.AddWithValue("@d1", GetLowDate(From_Date).AddDays(-1));
                cmd.Parameters.AddWithValue("@d2", GetHighDate(Enddate).AddDays(-1));
                dtctegorywisedispatch = vdbmngr.SelectQuery(cmd).Tables[0];
            }
            else
            {
                cmd = new MySqlCommand("SELECT   branchmappingtable.SubBranch, ROUND(SUM(colltion.AmountPaid) / 2, 2) AS AmountPaid FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SuperBranch = branchdata.sno INNER JOIN modifiedroutes ON branchmappingtable.SubBranch = modifiedroutes.BranchID INNER JOIN (SELECT RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo INNER JOIN (SELECT  Branchid, AmountPaid, PaidDate FROM  collections WHERE  (PaymentType <> 'Incentive') AND (PaymentType <> 'Bank Transfer') AND (PaymentType <> 'Cheque') AND (PaidDate BETWEEN @d1 AND @d2)) colltion ON modifidroutssubtab.BranchID = colltion.Branchid WHERE (branchmappingtable.SubBranch = @BranchId) GROUP BY branchmappingtable.SubBranch");
                cmd.Parameters.AddWithValue("@BranchID", branchid);
                cmd.Parameters.AddWithValue("@starttime", GetLowDate(From_Date));
                cmd.Parameters.AddWithValue("@d1", GetLowDate(From_Date));
                cmd.Parameters.AddWithValue("@d2", GetHighDate(Enddate));
                dtcollection = vdbmngr.SelectQuery(cmd).Tables[0];

                cmd = new MySqlCommand("SELECT  TripInfo.Sno, TripInfo.DCNo, ProductInfo.Categoryname, ProductInfo.productid, SUM(ProductInfo.Qty) AS DeliveryQty, SUM(ProductInfo.UnitPrice * ProductInfo.Qty) AS salevalue, TripInfo.I_Date, TripInfo.VehicleNo, TripInfo.Status, TripInfo.DispName, TripInfo.DispType, TripInfo.DispMode, ProductInfo.CatSno FROM  (SELECT  tripdata.Sno, tripdata.DCNo, tripdata.I_Date, tripdata.VehicleNo, tripdata.Status, dispatch.DispName, dispatch.DispType, dispatch.DispMode FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN  tripdata ON triproutes.Tripdata_sno = tripdata.Sno WHERE (dispatch.branchid = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT Categoryname, ProductName, UnitPrice, Sno, Qty, CatSno, productid FROM  (SELECT productsdata.UnitPrice, productsdata.sno AS productid, products_category.sno AS CatSno, products_category.Categoryname, productsdata.ProductName, tripdata_1.Sno, tripsubdata.Qty FROM  tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno INNER JOIN productsdata ON tripsubdata.ProductId = productsdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno WHERE     (tripdata_1.AssignDate BETWEEN @d1 AND @d2)) TripSubInfo) ProductInfo ON TripInfo.Sno = ProductInfo.Sno GROUP BY ProductInfo.CatSno ORDER BY ProductInfo.CatSno, ProductInfo.ProductName");
                cmd.Parameters.AddWithValue("@branch", branchid);
                cmd.Parameters.AddWithValue("@SOID", branchid);
                cmd.Parameters.AddWithValue("@d1", GetLowDate(From_Date).AddDays(-1));
                cmd.Parameters.AddWithValue("@d2", GetHighDate(Enddate).AddDays(-1));
                dtctegorywisedispatch = vdbmngr.SelectQuery(cmd).Tables[0];
            }
            List<VoucherClass> Voucherlist = new List<VoucherClass>();
            DataView view = new DataView(dtctegorywisedispatch);
            DataTable distinctcategory = view.ToTable(true, "Categoryname");
            double duevalue = 0; Double GroupCollection = 0;
            if (dtctegorywisedispatch.Rows.Count > 0)
            {
                double tothersqty = 0; double totalqty = 0; double tsalevalue = 0;
                double curdqty = 0; double milkqty = 0;
                foreach (DataRow drtotal in dtctegorywisedispatch.Rows)
                {
                    if (drtotal["Categoryname"].ToString() == "MILK")
                    {
                        double.TryParse(drtotal["DeliveryQty"].ToString(), out milkqty); ;
                    }
                    else if (drtotal["Categoryname"].ToString() == "CURD")
                    {
                        double.TryParse(drtotal["DeliveryQty"].ToString(), out curdqty); ;
                    }
                    else
                    {
                        double othersqty = 0;
                        double.TryParse(drtotal["DeliveryQty"].ToString(), out othersqty); ;
                        tothersqty += othersqty;
                    }
                    double qty = 0;
                    double.TryParse(drtotal["DeliveryQty"].ToString(), out qty); ;
                    totalqty += qty;
                    double salevalue = 0;
                    double.TryParse(drtotal["salevalue"].ToString(), out salevalue); ;
                    tsalevalue += salevalue;
                }
                DataRow newrow = Report.NewRow();
                string tmilkqty = Math.Round(milkqty, 2).ToString();
                string tcurdqty = Math.Round(curdqty, 2).ToString();
                string ttothersqty = Math.Round(tothersqty, 2).ToString();
                string ttotalqty = Math.Round(totalqty, 2).ToString();
                string totsalevalue = Math.Round(tsalevalue, 2).ToString();
                double amount = 0;

                if (branchid == "8009" || branchid == "8012" || branchid == "8013")
                {
                    foreach (DataRow drcoll in dtAll.Rows)
                    {
                        double temgcoll = 0;
                        double.TryParse(drcoll["AmountPaid"].ToString(), out temgcoll); ;
                        GroupCollection += temgcoll;
                    }
                    newrow["CollectionAmount"] = GroupCollection;
                    duevalue = tsalevalue - GroupCollection;
                }
                else
                {
                    if (dtcollection.Rows.Count > 0)
                    {
                        newrow["CollectionAmount"] = dtcollection.Rows[0]["AmountPaid"].ToString();//Math.Round(collectedamount, 2);
                        string AmountPaid = dtcollection.Rows[0]["AmountPaid"].ToString();
                        double.TryParse(AmountPaid, out GroupCollection);
                        duevalue = tsalevalue - GroupCollection;
                    }
                }
                List<routeleaks> routeleakslist = new List<routeleaks>();
                routeleaks getcategorywiseqty = new routeleaks();
                CultureInfo hindi = new CultureInfo("hi-IN");
                if (tmilkqty != "")
                {
                    decimal MilkQty = decimal.Parse(tmilkqty, CultureInfo.InvariantCulture);
                    getcategorywiseqty.MilkQty = string.Format(hindi, "{0:#,#}", MilkQty);
                }
                else
                {
                    getcategorywiseqty.MilkQty = "0";
                }
                if (tcurdqty != "")
                {
                    decimal CurdQty = decimal.Parse(tcurdqty, CultureInfo.InvariantCulture);
                    getcategorywiseqty.CurdQty = string.Format(hindi, "{0:#,#}", CurdQty);
                }
                else
                {
                    getcategorywiseqty.CurdQty = "0";

                }
                if (ttothersqty != "")
                {
                    decimal OthersQty = decimal.Parse(ttothersqty, CultureInfo.InvariantCulture);
                    getcategorywiseqty.OtherQty = string.Format(hindi, "{0:#,#}", OthersQty);
                }
                else
                {
                    getcategorywiseqty.OtherQty = "0";

                }
                if (ttotalqty != "")
                {
                    decimal DispatchQty = decimal.Parse(ttotalqty, CultureInfo.InvariantCulture);
                    getcategorywiseqty.DispatchQty = string.Format(hindi, "{0:#,#}", DispatchQty);
                }
                else
                {
                    getcategorywiseqty.DispatchQty = "0";

                }
                if (totsalevalue != "")
                {
                    decimal SaleValue = decimal.Parse(totsalevalue, CultureInfo.InvariantCulture);
                    getcategorywiseqty.SaleValue = string.Format(hindi, "{0:#,#}", SaleValue);
                }
                else
                {
                    getcategorywiseqty.SaleValue = "0";

                }
                if (amount.ToString() != "")
                {
                    decimal CollectionAmount = decimal.Parse(GroupCollection.ToString(), CultureInfo.InvariantCulture);
                    getcategorywiseqty.amount = string.Format(hindi, "{0:#,#}", CollectionAmount);
                }
                else
                {
                    getcategorywiseqty.amount = "0";

                }
                if (duevalue.ToString() != "")
                {
                    decimal dueamount = decimal.Parse(duevalue.ToString(), CultureInfo.InvariantCulture);
                    getcategorywiseqty.dueamount = string.Format(hindi, "{0:#,#}", dueamount);
                }
                else
                {
                    getcategorywiseqty.dueamount = "0";

                }
                routeleakslist.Add(getcategorywiseqty);
                string response = GetJson(routeleakslist);
                context.Response.Write(response);
            }
        }
        catch
        {
        }
    }
    private void branchwise_Dispatch_milk_qty(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            string BranchId = context.Request["BranchId"];
            string ddlDataType = context.Request["ddlDataType"];
            DateTime ServerDateCurrentdate = VehicleDBMgr.GetTime(vdbmngr.conn);
            string s = context.Session["IndDate"].ToString();
            var dt = DateTime.ParseExact(s, "ddd MMM dd yyyy HH:mm:ss 'GMT'zzz", System.Globalization.CultureInfo.InvariantCulture);
            string Fdate = dt.ToString("yyyy-MM-dd");
            DateTime FromDate = Convert.ToDateTime(Fdate);
            string e = context.Session["Todate"].ToString();
            var edt = DateTime.ParseExact(e, "ddd MMM dd yyyy HH:mm:ss 'GMT'zzz", System.Globalization.CultureInfo.InvariantCulture);
            string Tdate = edt.ToString("yyyy-MM-dd");
            DateTime ToDate = Convert.ToDateTime(Tdate);
            string SalesType = context.Session["salestype"].ToString();
            DataTable dtble = new DataTable();
            string type = "";
            if (BranchId == "8009")
            {
                cmd = new MySqlCommand("SELECT TripInfo.Sno, ProductInfo.Categoryname, ROUND(SUM(ProductInfo.Qty), 2) AS DeliveryQty,ROUND(SUM(ProductInfo.UnitPrice * ProductInfo.Qty), 2) AS salevalue, TripInfo.I_Date, ProductInfo.CatSno, TripInfo.BranchName, TripInfo.BranchID, TripInfo.Branch_Id FROM  (SELECT tripdata.Sno, tripdata.I_Date, branchdata_1.BranchName, dispatch.BranchID, dispatch.Branch_Id FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE (dispatch.GroupId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT  Categoryname, Sno, Qty, CatSno,UnitPrice FROM (SELECT products_category.sno AS CatSno, products_category.Categoryname, tripdata_1.Sno,productsdata.UnitPrice, tripsubdata.Qty FROM tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno INNER JOIN productsdata ON tripsubdata.ProductId = productsdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno WHERE  (tripdata_1.AssignDate BETWEEN @d1 AND @d2) AND (products_category.sno = @catsno)) TripSubInfo) ProductInfo ON  TripInfo.Sno = ProductInfo.Sno GROUP BY ProductInfo.CatSno, TripInfo.Branch_Id ORDER BY ProductInfo.CatSno, TripInfo.Branch_Id");
                cmd.Parameters.AddWithValue("@branch", BranchId);
                cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-1));
                cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-1));
                cmd.Parameters.AddWithValue("@catsno", "9");
                dtble = vdbmngr.SelectQuery(cmd).Tables[0];
                type = "GroupWise";
            }
            else if (BranchId == "8012" || BranchId == "8013")
            {
                cmd = new MySqlCommand("SELECT TripInfo.Sno, ProductInfo.Categoryname, ROUND(SUM(ProductInfo.Qty), 2) AS DeliveryQty,ROUND(SUM(ProductInfo.UnitPrice * ProductInfo.Qty), 2) AS salevalue, TripInfo.I_Date, ProductInfo.CatSno, TripInfo.BranchName, TripInfo.BranchID, TripInfo.Branch_Id FROM  (SELECT tripdata.Sno, tripdata.I_Date, branchdata_1.BranchName, dispatch.BranchID, dispatch.Branch_Id FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE (dispatch.CompanyId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT  Categoryname, Sno, Qty, CatSno,UnitPrice FROM (SELECT products_category.sno AS CatSno, products_category.Categoryname, tripdata_1.Sno, tripsubdata.Qty,productsdata.UnitPrice FROM tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno INNER JOIN productsdata ON tripsubdata.ProductId = productsdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno WHERE  (tripdata_1.AssignDate BETWEEN @d1 AND @d2) AND (products_category.sno = @catsno)) TripSubInfo) ProductInfo ON  TripInfo.Sno = ProductInfo.Sno GROUP BY ProductInfo.CatSno, TripInfo.Branch_Id ORDER BY ProductInfo.CatSno, TripInfo.Branch_Id");
                cmd.Parameters.AddWithValue("@branch", BranchId);
                cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-1));
                cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-1));
                cmd.Parameters.AddWithValue("@catsno", "9");
                dtble = vdbmngr.SelectQuery(cmd).Tables[0];
                type = "CompanyWise";
            }
            else if (SalesType == "Plant")
            {
                cmd = new MySqlCommand("SELECT    TripInfo.Sno, TripInfo.DCNo, ProductInfo.Categoryname, Round(SUM(ProductInfo.Qty),2) AS DeliveryQty, Round(SUM(ProductInfo.UnitPrice * ProductInfo.Qty),2) AS salevalue,TripInfo.I_Date, TripInfo.VehicleNo, TripInfo.Status, TripInfo.DispName, TripInfo.DispType, TripInfo.DispMode, ProductInfo.CatSno, TripInfo.BranchName, TripInfo.BranchID FROM (SELECT tripdata.Sno, tripdata.DCNo, tripdata.I_Date, tripdata.VehicleNo, tripdata.Status, dispatch.DispName, dispatch.DispType, dispatch.DispMode, branchdata_1.BranchName, dispatch.BranchID FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.BranchID = branchdata_1.sno WHERE (dispatch.Branch_Id = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT Categoryname, ProductName, UnitPrice, Sno, Qty, CatSno, productid FROM (SELECT productsdata.UnitPrice, productsdata.sno AS productid, products_category.sno AS CatSno, products_category.Categoryname,productsdata.ProductName, tripdata_1.Sno, tripsubdata.Qty FROM tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno INNER JOIN productsdata ON tripsubdata.ProductId = productsdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno WHERE  (tripdata_1.AssignDate BETWEEN @d1 AND @d2) AND (products_category.sno = @catsno)) TripSubInfo) ProductInfo ON  TripInfo.Sno = ProductInfo.Sno GROUP BY ProductInfo.CatSno, TripInfo.BranchID ORDER BY ProductInfo.CatSno, TripInfo.BranchID");
                cmd.Parameters.AddWithValue("@branch", BranchId);
                cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-1));
                cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-1));
                cmd.Parameters.AddWithValue("@catsno", "9");
                dtble = vdbmngr.SelectQuery(cmd).Tables[0];
            }
            else
            {
                cmd = new MySqlCommand("SELECT    modifiedroutes.RouteName As BranchName , Round(SUM(indents_subtable.DeliveryQty),2) AS DeliveryQty, Round(SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost),2) AS salevalue, modifiedroutes.Sno AS BranchID, modifidroutssubtab.BranchID AS bid, branchdata_2.BranchName As RouteName, branchdata_2.flag, branchdata_1.sno AS routeid, branchdata_2.SalesType AS SalesTypeId FROM  branchdata branchdata_2 RIGHT OUTER JOIN branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT  RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo ON  branchdata_2.sno = modifidroutssubtab.BranchID LEFT OUTER JOIN indents_subtable INNER JOIN (SELECT IndentNo, I_date, Branch_id FROM  indents WHERE  (I_date BETWEEN @starttime AND @endtime)) indt ON indents_subtable.IndentNo = indt.IndentNo ON  modifidroutssubtab.BranchID = indt.Branch_id INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno WHERE  (branchdata.SalesType IS NOT NULL) AND (indents_subtable.DeliveryQty <> 0) AND (products_category.sno = @catsno) AND (modifiedroutes.BranchID = @BranchID) GROUP BY modifiedroutes.Sno ORDER BY branchdata_2.RouteID, branchdata_2.RouteID");
                cmd.Parameters.AddWithValue("@BranchID", BranchId);
                cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate).AddDays(-1));
                cmd.Parameters.AddWithValue("@endtime", GetHighDate(ToDate).AddDays(-1));
                cmd.Parameters.AddWithValue("@catsno", "9");
                dtble = vdbmngr.SelectQuery(cmd).Tables[0];
            }

            List<LineChartValuesclass> LineChartValuelist = new List<LineChartValuesclass>();
            foreach (DataRow dr in dtble.Rows)
            {
                LineChartValuesclass getLineChart = new LineChartValuesclass();
                if (ddlDataType == "Quantity")
                {
                    getLineChart.BranchName = dr["BranchName"].ToString(); ;
                    if (BranchId == "8009" || BranchId == "8012" || BranchId == "8013")
                    {
                        getLineChart.BranchID = dr["branch_id"].ToString();
                    }
                    else
                    {
                        getLineChart.BranchID = dr["BranchID"].ToString();
                    }
                    getLineChart.type = type;

                    double tempqty = 0;
                    double.TryParse(dr["DeliveryQty"].ToString(), out tempqty); ;
                    double AvgQty = tempqty / 2;
                    AvgQty = Math.Round(AvgQty, 2);
                    getLineChart.AvgQty = AvgQty.ToString();
                    if (dr["DeliveryQty"].ToString() != "")
                    {
                        CultureInfo hindi = new CultureInfo("hi-IN");
                        decimal DeliveryQty = decimal.Parse(dr["DeliveryQty"].ToString(), CultureInfo.InvariantCulture);
                        getLineChart.dispatchqty = string.Format(hindi, "{0:#,#}", DeliveryQty);
                    }
                    else
                    {
                        getLineChart.dispatchqty = "0";
                    }
                }
                else
                {
                    getLineChart.BranchName = dr["BranchName"].ToString(); ;
                    if (BranchId == "8009" || BranchId == "8012" || BranchId == "8013")
                    {
                        getLineChart.BranchID = dr["branch_id"].ToString();
                    }
                    else
                    {
                        getLineChart.BranchID = dr["BranchID"].ToString();
                    }
                    getLineChart.type = type;
                    double tempsalevalue = 0;
                    double.TryParse(dr["salevalue"].ToString(), out tempsalevalue); ;
                    double AvgSale = tempsalevalue / 2;
                    AvgSale = Math.Round(AvgSale, 2);
                    getLineChart.AvgSaleValue = AvgSale.ToString();
                    if (dr["salevalue"].ToString() != "")
                    {
                        CultureInfo hindi = new CultureInfo("hi-IN");
                        decimal salevalue = decimal.Parse(dr["salevalue"].ToString(), CultureInfo.InvariantCulture);
                        getLineChart.dispatchvalue = string.Format(hindi, "{0:#,#}", salevalue);
                    }
                    else
                    {
                        getLineChart.dispatchvalue = "0";
                    }
                }
                LineChartValuelist.Add(getLineChart);
            }
            string respnceString = GetJson(LineChartValuelist);
            context.Response.Write(respnceString);
        }
        catch
        {
        }
    }
    private void Route_Wise_Milk_SaleQty(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            string BranchId = context.Request["BranchId"];
            string ddlDataType = context.Request["ddlDataType"];
            DateTime ServerDateCurrentdate = VehicleDBMgr.GetTime(vdbmngr.conn);
            string s = context.Session["IndDate"].ToString();
            var dt = DateTime.ParseExact(s, "ddd MMM dd yyyy HH:mm:ss 'GMT'zzz", System.Globalization.CultureInfo.InvariantCulture);
            string Fdate = dt.ToString("yyyy-MM-dd");
            DateTime FromDate = Convert.ToDateTime(Fdate);
            string e = context.Session["Todate"].ToString();
            var edt = DateTime.ParseExact(e, "ddd MMM dd yyyy HH:mm:ss 'GMT'zzz", System.Globalization.CultureInfo.InvariantCulture);
            string Tdate = edt.ToString("yyyy-MM-dd");
            DateTime ToDate = Convert.ToDateTime(Tdate);
            DataTable dtble = new DataTable();
            string SalesType = context.Session["salestype"].ToString();
            if (SalesType == "Plant")
            {
                cmd = new MySqlCommand("SELECT    modifiedroutes.RouteName, Round(SUM(indents_subtable.DeliveryQty),2) AS saleQty, Round(SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost),2) AS salevalue, modifiedroutes.Sno AS routeid, modifidroutssubtab.BranchID AS bid, branchdata_2.BranchName, branchdata_2.flag, branchdata_1.sno AS BranchID, branchdata_2.SalesType AS SalesTypeId FROM  branchdata branchdata_2 RIGHT OUTER JOIN branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT  RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo ON  branchdata_2.sno = modifidroutssubtab.BranchID LEFT OUTER JOIN indents_subtable INNER JOIN (SELECT IndentNo, I_date, Branch_id FROM  indents WHERE  (I_date BETWEEN @starttime AND @endtime)) indt ON indents_subtable.IndentNo = indt.IndentNo ON  modifidroutssubtab.BranchID = indt.Branch_id INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno WHERE  (branchdata.SalesType IS NOT NULL) AND (indents_subtable.DeliveryQty <> 0) AND (products_category.sno = @catsno) AND (modifiedroutes.BranchID = @BranchID) GROUP BY modifiedroutes.Sno ORDER BY branchdata_2.RouteID, branchdata_2.RouteID");
                cmd.Parameters.AddWithValue("@BranchID", BranchId);
                cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate).AddDays(-1));
                cmd.Parameters.AddWithValue("@endtime", GetHighDate(ToDate).AddDays(-1));
                cmd.Parameters.AddWithValue("@catsno", "9");
                dtble = vdbmngr.SelectQuery(cmd).Tables[0];
            }
            else
            {
                cmd = new MySqlCommand("SELECT   modifiedroutes.RouteName As BranchName, ROUND(SUM(indents_subtable.DeliveryQty),2) AS saleQty, Round(SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost),2) AS salevalue, modifiedroutes.Sno AS routeid, modifidroutssubtab.BranchID AS routeid, branchdata_2.BranchName As RouteName, branchdata_2.flag, branchdata_1.sno AS BranchID, branchdata_2.SalesType AS SalesTypeId FROM  branchdata branchdata_2 RIGHT OUTER JOIN branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT  RefNo, Rank, LevelType, BranchID, CDate, EDate FROM   modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo ON  branchdata_2.sno = modifidroutssubtab.BranchID LEFT OUTER JOIN indents_subtable INNER JOIN (SELECT   IndentNo, I_date, Branch_id FROM   indents WHERE  (I_date BETWEEN @starttime AND @endtime)) indt ON indents_subtable.IndentNo = indt.IndentNo ON  modifidroutssubtab.BranchID = indt.Branch_id INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno WHERE  (branchdata.SalesType IS NOT NULL) AND (indents_subtable.DeliveryQty <> 0) AND (modifiedroutes.Sno = @BranchID) AND (products_category.sno = @catsno) GROUP BY modifidroutssubtab.BranchID ORDER BY branchdata_2.RouteID, branchdata_2.RouteID");
                cmd.Parameters.AddWithValue("@BranchID", BranchId);
                cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate).AddDays(-1));
                cmd.Parameters.AddWithValue("@endtime", GetHighDate(ToDate).AddDays(-1));
                cmd.Parameters.AddWithValue("@catsno", "9");
                dtble = vdbmngr.SelectQuery(cmd).Tables[0];
            }
            List<LineChartValuesclass> LineChartValuelist = new List<LineChartValuesclass>();
            foreach (DataRow dr in dtble.Rows)
            {
                LineChartValuesclass getLineChart = new LineChartValuesclass();
                if (ddlDataType == "Quantity")
                {
                    getLineChart.BranchName = dr["RouteName"].ToString(); ;
                    getLineChart.BranchID = dr["routeid"].ToString();
                    double tempqty = 0;
                    double.TryParse(dr["saleQty"].ToString(), out tempqty); ;
                    double AvgQty = tempqty / 2;
                    AvgQty = Math.Round(AvgQty, 2);
                    getLineChart.AvgQty = AvgQty.ToString();
                    if (dr["saleQty"].ToString() != "")
                    {
                        CultureInfo hindi = new CultureInfo("hi-IN");
                        decimal DeliveryQty = decimal.Parse(dr["saleQty"].ToString(), CultureInfo.InvariantCulture);
                        getLineChart.dispatchqty = string.Format(hindi, "{0:#,#}", DeliveryQty);
                    }
                    else
                    {
                        getLineChart.dispatchqty = "0";
                    }
                }
                else
                {
                    getLineChart.BranchName = dr["RouteName"].ToString(); ;
                    getLineChart.BranchID = dr["routeid"].ToString();
                    double tempsalevalue = 0;
                    double.TryParse(dr["salevalue"].ToString(), out tempsalevalue); ;
                    double AvgSale = tempsalevalue / 2;
                    AvgSale = Math.Round(AvgSale, 2);
                    getLineChart.AvgSaleValue = AvgSale.ToString();
                    if (dr["saleQty"].ToString() != "")
                    {
                        CultureInfo hindi = new CultureInfo("hi-IN");
                        decimal salevalue = decimal.Parse(dr["salevalue"].ToString(), CultureInfo.InvariantCulture);
                        getLineChart.dispatchvalue = string.Format(hindi, "{0:#,#}", salevalue);
                    }
                    else
                    {
                        getLineChart.dispatchvalue = "0";
                    }
                }
                LineChartValuelist.Add(getLineChart);
            }
            string respnceString = GetJson(LineChartValuelist);
            context.Response.Write(respnceString);
        }
        catch
        {
        }
    }
    private void Agent_Wise_Milk_SaleQty(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            string BranchId = context.Request["BranchId"];
            string ddlDataType = context.Request["ddlDataType"];
            DateTime ServerDateCurrentdate = VehicleDBMgr.GetTime(vdbmngr.conn);
            string s = context.Session["IndDate"].ToString();
            var dt = DateTime.ParseExact(s, "ddd MMM dd yyyy HH:mm:ss 'GMT'zzz", System.Globalization.CultureInfo.InvariantCulture);
            string Fdate = dt.ToString("yyyy-MM-dd");
            DateTime FromDate = Convert.ToDateTime(Fdate);
            string e = context.Session["Todate"].ToString();
            var edt = DateTime.ParseExact(e, "ddd MMM dd yyyy HH:mm:ss 'GMT'zzz", System.Globalization.CultureInfo.InvariantCulture);
            string Tdate = edt.ToString("yyyy-MM-dd");
            DateTime ToDate = Convert.ToDateTime(Tdate);
            cmd = new MySqlCommand("SELECT   modifiedroutes.RouteName, ROUND(SUM(indents_subtable.DeliveryQty),2) AS saleQty, SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost) AS salevalue, modifiedroutes.Sno AS routeid, modifidroutssubtab.BranchID AS bid, branchdata_2.BranchName, branchdata_2.flag, branchdata_1.sno AS BranchID, branchdata_2.SalesType AS SalesTypeId FROM  branchdata branchdata_2 RIGHT OUTER JOIN branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT  RefNo, Rank, LevelType, BranchID, CDate, EDate FROM   modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo ON  branchdata_2.sno = modifidroutssubtab.BranchID LEFT OUTER JOIN indents_subtable INNER JOIN (SELECT   IndentNo, I_date, Branch_id FROM   indents WHERE  (I_date BETWEEN @starttime AND @endtime)) indt ON indents_subtable.IndentNo = indt.IndentNo ON  modifidroutssubtab.BranchID = indt.Branch_id INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno WHERE  (branchdata.SalesType IS NOT NULL) AND (indents_subtable.DeliveryQty <> 0) AND (modifiedroutes.Sno = @BranchID) AND (products_category.sno = @catsno) GROUP BY modifidroutssubtab.BranchID ORDER BY branchdata_2.RouteID, branchdata_2.RouteID");
            cmd.Parameters.AddWithValue("@BranchID", BranchId);
            cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate).AddDays(-1));
            cmd.Parameters.AddWithValue("@endtime", GetHighDate(ToDate).AddDays(-1));
            cmd.Parameters.AddWithValue("@catsno", "9");
            DataTable dtble = vdbmngr.SelectQuery(cmd).Tables[0];
            List<LineChartValuesclass> LineChartValuelist = new List<LineChartValuesclass>();
            foreach (DataRow dr in dtble.Rows)
            {
                LineChartValuesclass getLineChart = new LineChartValuesclass();
                if (ddlDataType == "Quantity")
                {
                    getLineChart.BranchName = dr["BranchName"].ToString(); ;
                    getLineChart.BranchID = dr["BranchID"].ToString();
                    double tempqty = 0;
                    double.TryParse(dr["saleQty"].ToString(), out tempqty); ;
                    double AvgQty = tempqty / 2;
                    AvgQty = Math.Round(AvgQty, 2);
                    getLineChart.AvgQty = AvgQty.ToString();
                    if (dr["saleQty"].ToString() != "")
                    {
                        CultureInfo hindi = new CultureInfo("hi-IN");
                        decimal DeliveryQty = decimal.Parse(dr["saleQty"].ToString(), CultureInfo.InvariantCulture);
                        getLineChart.dispatchqty = string.Format(hindi, "{0:#,#}", DeliveryQty);
                    }
                    else
                    {
                        getLineChart.dispatchqty = "0";
                    }

                }
                else
                {
                    getLineChart.BranchName = dr["BranchName"].ToString(); ;
                    getLineChart.BranchID = dr["BranchID"].ToString();
                    double tempsalevalue = 0;
                    double.TryParse(dr["salevalue"].ToString(), out tempsalevalue); ;
                    double AvgSale = tempsalevalue / 2;
                    AvgSale = Math.Round(AvgSale, 2);
                    getLineChart.AvgSaleValue = AvgSale.ToString();
                    if (dr["salevalue"].ToString() != "")
                    {
                        CultureInfo hindi = new CultureInfo("hi-IN");
                        decimal salevalue = decimal.Parse(dr["salevalue"].ToString(), CultureInfo.InvariantCulture);
                        getLineChart.dispatchvalue = string.Format(hindi, "{0:#,#}", salevalue);
                    }
                    else
                    {
                        getLineChart.dispatchvalue = "0";
                    }
                }
                LineChartValuelist.Add(getLineChart);
            }
            string respnceString = GetJson(LineChartValuelist);
            context.Response.Write(respnceString);
        }
        catch
        {
        }
    }
    private void branchwise_Curd_Dispatch_qty(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            string BranchId = context.Request["BranchId"];
            string ddlDataType = context.Request["ddlDataType"];
            DateTime ServerDateCurrentdate = VehicleDBMgr.GetTime(vdbmngr.conn);
            string s = context.Session["IndDate"].ToString();
            var dt = DateTime.ParseExact(s, "ddd MMM dd yyyy HH:mm:ss 'GMT'zzz", System.Globalization.CultureInfo.InvariantCulture);
            string Fdate = dt.ToString("yyyy-MM-dd");
            DateTime FromDate = Convert.ToDateTime(Fdate);
            string e = context.Session["Todate"].ToString();
            var edt = DateTime.ParseExact(e, "ddd MMM dd yyyy HH:mm:ss 'GMT'zzz", System.Globalization.CultureInfo.InvariantCulture);
            string Tdate = edt.ToString("yyyy-MM-dd");
            DateTime ToDate = Convert.ToDateTime(Tdate);
            string SalesType = context.Session["salestype"].ToString();
            DataTable dtble = new DataTable();
            string type = "";
            if (BranchId == "8009")
            {
                cmd = new MySqlCommand("SELECT TripInfo.Sno, ProductInfo.Categoryname, ROUND(SUM(ProductInfo.Qty), 2) AS DeliveryQty,ROUND(SUM(ProductInfo.UnitPrice * ProductInfo.Qty), 2) AS salevalue, TripInfo.I_Date, ProductInfo.CatSno, TripInfo.BranchName, TripInfo.BranchID, TripInfo.Branch_Id FROM  (SELECT tripdata.Sno, tripdata.I_Date, branchdata_1.BranchName, dispatch.BranchID, dispatch.Branch_Id FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE (dispatch.GroupId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT  Categoryname, Sno, Qty, CatSno,UnitPrice FROM (SELECT products_category.sno AS CatSno, products_category.Categoryname, tripdata_1.Sno, tripsubdata.Qty,productsdata.UnitPrice FROM tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno INNER JOIN productsdata ON tripsubdata.ProductId = productsdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno WHERE  (tripdata_1.AssignDate BETWEEN @d1 AND @d2) AND (products_category.sno = @catsno)) TripSubInfo) ProductInfo ON  TripInfo.Sno = ProductInfo.Sno GROUP BY ProductInfo.CatSno, TripInfo.Branch_Id ORDER BY ProductInfo.CatSno, TripInfo.Branch_Id");
                cmd.Parameters.AddWithValue("@branch", BranchId);
                cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-1));
                cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-1));
                cmd.Parameters.AddWithValue("@catsno", "10");
                dtble = vdbmngr.SelectQuery(cmd).Tables[0];
                type = "GroupWise";
            }
            else if (BranchId == "8012" || BranchId == "8013")
            {
                cmd = new MySqlCommand("SELECT TripInfo.Sno, ProductInfo.Categoryname, ROUND(SUM(ProductInfo.Qty), 2) AS DeliveryQty,ROUND(SUM(ProductInfo.UnitPrice * ProductInfo.Qty), 2) AS salevalue, TripInfo.I_Date, ProductInfo.CatSno, TripInfo.BranchName, TripInfo.BranchID, TripInfo.Branch_Id FROM  (SELECT tripdata.Sno, tripdata.I_Date, branchdata_1.BranchName, dispatch.BranchID, dispatch.Branch_Id FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE (dispatch.CompanyId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT  Categoryname, Sno, Qty, CatSno,UnitPrice FROM (SELECT products_category.sno AS CatSno, products_category.Categoryname, tripdata_1.Sno, tripsubdata.Qty,productsdata.UnitPrice FROM tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno INNER JOIN productsdata ON tripsubdata.ProductId = productsdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno WHERE  (tripdata_1.AssignDate BETWEEN @d1 AND @d2) AND (products_category.sno = @catsno)) TripSubInfo) ProductInfo ON  TripInfo.Sno = ProductInfo.Sno GROUP BY ProductInfo.CatSno, TripInfo.Branch_Id ORDER BY ProductInfo.CatSno, TripInfo.Branch_Id");
                cmd.Parameters.AddWithValue("@branch", BranchId);
                cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-1));
                cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-1));
                cmd.Parameters.AddWithValue("@catsno", "10");
                dtble = vdbmngr.SelectQuery(cmd).Tables[0];
                type = "CompanyWise";
            }
            else if (SalesType == "Plant")
            {
                cmd = new MySqlCommand("SELECT    TripInfo.Sno, TripInfo.DCNo, ProductInfo.Categoryname, Round(SUM(ProductInfo.Qty),2) AS DeliveryQty, Round(SUM(ProductInfo.UnitPrice * ProductInfo.Qty),2) AS salevalue,TripInfo.I_Date, TripInfo.VehicleNo, TripInfo.Status, TripInfo.DispName, TripInfo.DispType, TripInfo.DispMode, ProductInfo.CatSno, TripInfo.BranchName, TripInfo.BranchID FROM (SELECT tripdata.Sno, tripdata.DCNo, tripdata.I_Date, tripdata.VehicleNo, tripdata.Status, dispatch.DispName, dispatch.DispType, dispatch.DispMode, branchdata_1.BranchName, dispatch.BranchID FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.BranchID = branchdata_1.sno WHERE (dispatch.Branch_Id = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT Categoryname, ProductName, UnitPrice, Sno, Qty, CatSno, productid FROM (SELECT productsdata.UnitPrice, productsdata.sno AS productid, products_category.sno AS CatSno, products_category.Categoryname,productsdata.ProductName, tripdata_1.Sno, tripsubdata.Qty FROM tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno INNER JOIN productsdata ON tripsubdata.ProductId = productsdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno WHERE  (tripdata_1.AssignDate BETWEEN @d1 AND @d2) AND (products_category.sno = @catsno)) TripSubInfo) ProductInfo ON  TripInfo.Sno = ProductInfo.Sno GROUP BY ProductInfo.CatSno, TripInfo.BranchID ORDER BY ProductInfo.CatSno, TripInfo.BranchID");
                cmd.Parameters.AddWithValue("@branch", BranchId);
                cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-1));
                cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-1));
                cmd.Parameters.AddWithValue("@catsno", "10");
                dtble = vdbmngr.SelectQuery(cmd).Tables[0];
            }
            else
            {
                cmd = new MySqlCommand("SELECT    modifiedroutes.RouteName As BranchName, ROUND(SUM(indents_subtable.DeliveryQty),2) AS DeliveryQty, SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost) AS salevalue, modifiedroutes.Sno AS BranchID, modifidroutssubtab.BranchID AS bid, branchdata_2.BranchName As RouteName, branchdata_2.flag, branchdata_1.sno  As routeid, branchdata_2.SalesType AS SalesTypeId FROM  branchdata branchdata_2 RIGHT OUTER JOIN branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT  RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo ON  branchdata_2.sno = modifidroutssubtab.BranchID LEFT OUTER JOIN indents_subtable INNER JOIN (SELECT IndentNo, I_date, Branch_id FROM  indents WHERE  (I_date BETWEEN @starttime AND @endtime)) indt ON indents_subtable.IndentNo = indt.IndentNo ON  modifidroutssubtab.BranchID = indt.Branch_id INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno WHERE  (branchdata.SalesType IS NOT NULL) AND (indents_subtable.DeliveryQty <> 0) AND (products_category.sno = @catsno) AND (modifiedroutes.BranchID = @BranchID) GROUP BY modifiedroutes.Sno ORDER BY branchdata_2.RouteID, branchdata_2.RouteID");
                cmd.Parameters.AddWithValue("@BranchID", BranchId);
                cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate).AddDays(-1));
                cmd.Parameters.AddWithValue("@endtime", GetHighDate(ToDate).AddDays(-1));
                cmd.Parameters.AddWithValue("@catsno", "10");
                dtble = vdbmngr.SelectQuery(cmd).Tables[0];
            }
            List<LineChartValuesclass> LineChartValuelist = new List<LineChartValuesclass>();
            foreach (DataRow dr in dtble.Rows)
            {
                LineChartValuesclass getLineChart = new LineChartValuesclass();
                if (ddlDataType == "Quantity")
                {
                    getLineChart.BranchName = dr["BranchName"].ToString(); ;
                    if (BranchId == "8009" || BranchId == "8012" || BranchId == "8013")
                    {
                        getLineChart.BranchID = dr["branch_id"].ToString();
                    }
                    else
                    {

                        getLineChart.BranchID = dr["BranchID"].ToString();
                    }
                    getLineChart.type = type;
                    double tempqty = 0;
                    double.TryParse(dr["DeliveryQty"].ToString(), out tempqty); ;
                    double AvgQty = tempqty / 2;
                    AvgQty = Math.Round(AvgQty, 2);
                    getLineChart.AvgQty = AvgQty.ToString();
                    if (dr["DeliveryQty"].ToString() != "")
                    {
                        CultureInfo hindi = new CultureInfo("hi-IN");
                        decimal DeliveryQty = decimal.Parse(dr["DeliveryQty"].ToString(), CultureInfo.InvariantCulture);
                        getLineChart.dispatchqty = string.Format(hindi, "{0:#,#}", DeliveryQty);
                    }
                    else
                    {
                        getLineChart.dispatchqty = "0";
                    }
                }
                else
                {
                    getLineChart.BranchName = dr["BranchName"].ToString(); ;
                    if (BranchId == "8009" || BranchId == "8012" || BranchId == "8013")
                    {
                        getLineChart.BranchID = dr["branch_id"].ToString();
                    }
                    else
                    {

                        getLineChart.BranchID = dr["BranchID"].ToString();
                    }
                    getLineChart.type = type;
                    double tempsalevalue = 0;
                    double.TryParse(dr["salevalue"].ToString(), out tempsalevalue); ;
                    double AvgSale = tempsalevalue / 2;
                    AvgSale = Math.Round(AvgSale, 2);
                    getLineChart.AvgSaleValue = AvgSale.ToString();
                    if (dr["salevalue"].ToString() != "")
                    {
                        CultureInfo hindi = new CultureInfo("hi-IN");
                        decimal salevalue = decimal.Parse(dr["salevalue"].ToString(), CultureInfo.InvariantCulture);
                        getLineChart.dispatchvalue = string.Format(hindi, "{0:#,#}", salevalue);
                    }
                    else
                    {
                        getLineChart.dispatchvalue = "0";
                    }
                }
                LineChartValuelist.Add(getLineChart);
            }
            string respnceString = GetJson(LineChartValuelist);
            context.Response.Write(respnceString);
        }
        catch
        {
        }
    }
    private void Route_Wise_Curd_SaleQty(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            string BranchId = context.Request["BranchId"];
            string ddlDataType = context.Request["ddlDataType"];
            DateTime ServerDateCurrentdate = VehicleDBMgr.GetTime(vdbmngr.conn);
            string s = context.Session["IndDate"].ToString();
            var dt = DateTime.ParseExact(s, "ddd MMM dd yyyy HH:mm:ss 'GMT'zzz", System.Globalization.CultureInfo.InvariantCulture);
            string Fdate = dt.ToString("yyyy-MM-dd");
            DateTime FromDate = Convert.ToDateTime(Fdate);
            string e = context.Session["Todate"].ToString();
            var edt = DateTime.ParseExact(e, "ddd MMM dd yyyy HH:mm:ss 'GMT'zzz", System.Globalization.CultureInfo.InvariantCulture);
            string Tdate = edt.ToString("yyyy-MM-dd");
            DateTime ToDate = Convert.ToDateTime(Tdate);
            string SalesType = context.Session["salestype"].ToString();
            DataTable dtble = new DataTable();
            if (SalesType == "Plant")
            {
                cmd = new MySqlCommand("SELECT    modifiedroutes.RouteName, ROUND(SUM(indents_subtable.DeliveryQty),2) AS saleQty, SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost) AS salevalue, modifiedroutes.Sno AS routeid, modifidroutssubtab.BranchID AS bid, branchdata_2.BranchName, branchdata_2.flag, branchdata_1.sno AS BranchID, branchdata_2.SalesType AS SalesTypeId FROM  branchdata branchdata_2 RIGHT OUTER JOIN branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT  RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo ON  branchdata_2.sno = modifidroutssubtab.BranchID LEFT OUTER JOIN indents_subtable INNER JOIN (SELECT IndentNo, I_date, Branch_id FROM  indents WHERE  (I_date BETWEEN @starttime AND @endtime)) indt ON indents_subtable.IndentNo = indt.IndentNo ON  modifidroutssubtab.BranchID = indt.Branch_id INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno WHERE  (branchdata.SalesType IS NOT NULL) AND (indents_subtable.DeliveryQty <> 0) AND (products_category.sno = @catsno) AND (modifiedroutes.BranchID = @BranchID) GROUP BY modifiedroutes.Sno ORDER BY branchdata_2.RouteID, branchdata_2.RouteID");
                cmd.Parameters.AddWithValue("@BranchID", BranchId);
                cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate).AddDays(-1));
                cmd.Parameters.AddWithValue("@endtime", GetHighDate(ToDate).AddDays(-1));
                cmd.Parameters.AddWithValue("@catsno", "10");
                dtble = vdbmngr.SelectQuery(cmd).Tables[0];
            }
            else
            {
                cmd = new MySqlCommand("SELECT   modifiedroutes.RouteName As BranchName, ROUND(SUM(indents_subtable.DeliveryQty),2) AS saleQty, SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost) AS salevalue, modifiedroutes.Sno AS BranchId, modifidroutssubtab.BranchID AS routeid, branchdata_2.BranchName As RouteName, branchdata_2.flag, branchdata_1.sno AS bid, branchdata_2.SalesType AS SalesTypeId FROM  branchdata branchdata_2 RIGHT OUTER JOIN branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT  RefNo, Rank, LevelType, BranchID, CDate, EDate FROM   modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo ON  branchdata_2.sno = modifidroutssubtab.BranchID LEFT OUTER JOIN indents_subtable INNER JOIN (SELECT   IndentNo, I_date, Branch_id FROM   indents WHERE  (I_date BETWEEN @starttime AND @endtime)) indt ON indents_subtable.IndentNo = indt.IndentNo ON  modifidroutssubtab.BranchID = indt.Branch_id INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno WHERE  (branchdata.SalesType IS NOT NULL) AND (indents_subtable.DeliveryQty <> 0) AND (modifiedroutes.Sno = @BranchID) AND (products_category.sno = @catsno) GROUP BY modifidroutssubtab.BranchID ORDER BY branchdata_2.RouteID, branchdata_2.RouteID");
                cmd.Parameters.AddWithValue("@BranchID", BranchId);
                cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate).AddDays(-1));
                cmd.Parameters.AddWithValue("@endtime", GetHighDate(ToDate).AddDays(-1));
                cmd.Parameters.AddWithValue("@catsno", "10");
                dtble = vdbmngr.SelectQuery(cmd).Tables[0];
            }
            List<LineChartValuesclass> LineChartValuelist = new List<LineChartValuesclass>();
            foreach (DataRow dr in dtble.Rows)
            {
                LineChartValuesclass getLineChart = new LineChartValuesclass();
                if (ddlDataType == "Quantity")
                {
                    getLineChart.BranchName = dr["RouteName"].ToString(); ;
                    getLineChart.BranchID = dr["routeid"].ToString();
                    double tempqty = 0;
                    double.TryParse(dr["saleQty"].ToString(), out tempqty); ;
                    double AvgQty = tempqty / 2;
                    AvgQty = Math.Round(AvgQty, 2);
                    getLineChart.AvgQty = AvgQty.ToString();
                    if (dr["saleQty"].ToString() != "")
                    {
                        CultureInfo hindi = new CultureInfo("hi-IN");
                        decimal DeliveryQty = decimal.Parse(dr["saleQty"].ToString(), CultureInfo.InvariantCulture);
                        getLineChart.dispatchqty = string.Format(hindi, "{0:#,#}", DeliveryQty);
                    }
                    else
                    {
                        getLineChart.dispatchqty = "0";
                    }
                }
                else
                {
                    getLineChart.BranchName = dr["RouteName"].ToString(); ;
                    getLineChart.BranchID = dr["routeid"].ToString();
                    double tempsalevalue = 0;
                    double.TryParse(dr["salevalue"].ToString(), out tempsalevalue); ;
                    double AvgSale = tempsalevalue / 2;
                    AvgSale = Math.Round(AvgSale, 2);
                    getLineChart.AvgSaleValue = AvgSale.ToString();
                    if (dr["salevalue"].ToString() != "")
                    {
                        CultureInfo hindi = new CultureInfo("hi-IN");
                        decimal salevalue = decimal.Parse(dr["salevalue"].ToString(), CultureInfo.InvariantCulture);
                        getLineChart.dispatchvalue = string.Format(hindi, "{0:#,#}", salevalue);
                    }
                    else
                    {
                        getLineChart.dispatchvalue = "0";
                    }
                }
                LineChartValuelist.Add(getLineChart);
            }
            string respnceString = GetJson(LineChartValuelist);
            context.Response.Write(respnceString);
        }
        catch
        {
        }
    }
    private void Agent_Wise_Curd_SaleQty(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            string BranchId = context.Request["BranchId"];
            string ddlDataType = context.Request["ddlDataType"];
            DateTime ServerDateCurrentdate = VehicleDBMgr.GetTime(vdbmngr.conn);
            string s = context.Session["IndDate"].ToString();
            var dt = DateTime.ParseExact(s, "ddd MMM dd yyyy HH:mm:ss 'GMT'zzz", System.Globalization.CultureInfo.InvariantCulture);
            string Fdate = dt.ToString("yyyy-MM-dd");
            DateTime FromDate = Convert.ToDateTime(Fdate);
            string e = context.Session["Todate"].ToString();
            var edt = DateTime.ParseExact(e, "ddd MMM dd yyyy HH:mm:ss 'GMT'zzz", System.Globalization.CultureInfo.InvariantCulture);
            string Tdate = edt.ToString("yyyy-MM-dd");
            DateTime ToDate = Convert.ToDateTime(Tdate);
            cmd = new MySqlCommand("SELECT   modifiedroutes.RouteName, ROUND(SUM(indents_subtable.DeliveryQty),2) saleQty, Round(SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost),2) AS salevalue, modifiedroutes.Sno AS routeid, modifidroutssubtab.BranchID AS bid, branchdata_2.BranchName, branchdata_2.flag, branchdata_1.sno AS BranchID, branchdata_2.SalesType AS SalesTypeId FROM  branchdata branchdata_2 RIGHT OUTER JOIN branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT  RefNo, Rank, LevelType, BranchID, CDate, EDate FROM   modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo ON  branchdata_2.sno = modifidroutssubtab.BranchID LEFT OUTER JOIN indents_subtable INNER JOIN (SELECT   IndentNo, I_date, Branch_id FROM   indents WHERE  (I_date BETWEEN @starttime AND @endtime)) indt ON indents_subtable.IndentNo = indt.IndentNo ON  modifidroutssubtab.BranchID = indt.Branch_id INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno WHERE  (branchdata.SalesType IS NOT NULL) AND (indents_subtable.DeliveryQty <> 0) AND (modifiedroutes.Sno = @BranchID) AND (products_category.sno = @catsno) GROUP BY modifidroutssubtab.BranchID ORDER BY branchdata_2.RouteID, branchdata_2.RouteID");
            cmd.Parameters.AddWithValue("@BranchID", BranchId);
            cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate).AddDays(-1));
            cmd.Parameters.AddWithValue("@endtime", GetHighDate(ToDate).AddDays(-1));
            cmd.Parameters.AddWithValue("@catsno", "10");
            DataTable dtble = vdbmngr.SelectQuery(cmd).Tables[0];
            List<LineChartValuesclass> LineChartValuelist = new List<LineChartValuesclass>();
            foreach (DataRow dr in dtble.Rows)
            {
                LineChartValuesclass getLineChart = new LineChartValuesclass();
                if (ddlDataType == "Quantity")
                {
                    getLineChart.BranchName = dr["BranchName"].ToString(); ;
                    getLineChart.BranchID = dr["BranchID"].ToString();
                    double tempqty = 0;
                    double.TryParse(dr["saleQty"].ToString(), out tempqty); ;
                    double AvgQty = tempqty / 2;
                    AvgQty = Math.Round(AvgQty, 2);
                    getLineChart.AvgQty = AvgQty.ToString();
                    if (dr["saleQty"].ToString() != "")
                    {
                        CultureInfo hindi = new CultureInfo("hi-IN");
                        decimal DeliveryQty = decimal.Parse(dr["saleQty"].ToString(), CultureInfo.InvariantCulture);
                        getLineChart.dispatchqty = string.Format(hindi, "{0:#,#}", DeliveryQty);
                    }
                    else
                    {
                        getLineChart.dispatchqty = "0";
                    }
                }
                else
                {
                    getLineChart.BranchName = dr["BranchName"].ToString(); ;
                    getLineChart.BranchID = dr["BranchID"].ToString();
                    double tempsalevalue = 0;
                    double.TryParse(dr["salevalue"].ToString(), out tempsalevalue); ;
                    double AvgSale = tempsalevalue / 2;
                    AvgSale = Math.Round(AvgSale, 2);
                    getLineChart.AvgSaleValue = AvgSale.ToString();
                    if (dr["salevalue"].ToString() != "")
                    {
                        CultureInfo hindi = new CultureInfo("hi-IN");
                        decimal salevalue = decimal.Parse(dr["salevalue"].ToString(), CultureInfo.InvariantCulture);
                        getLineChart.dispatchvalue = string.Format(hindi, "{0:#,#}", salevalue);
                    }
                    else
                    {
                        getLineChart.dispatchvalue = "0";
                    }
                }
                LineChartValuelist.Add(getLineChart);
            }
            string respnceString = GetJson(LineChartValuelist);
            context.Response.Write(respnceString);
        }
        catch
        {
        }
    }
    private void branchwise_Others_Dispatch_qty(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            string BranchId = context.Request["BranchId"];
            string routeid = "";
            string Catsno = "";

            string[] arr = BranchId.Split('_');
            string t1 = arr.Length.ToString();
            if (t1 == "3")
            {
                Catsno = arr[1];
                routeid = arr[0];
            }
            else
            {
                Catsno = arr[0];
                BranchId = arr[1];
            }


            string ddlDataType = context.Request["ddlDataType"];
            DateTime ServerDateCurrentdate = VehicleDBMgr.GetTime(vdbmngr.conn);
            string s = context.Session["IndDate"].ToString();
            var dt = DateTime.ParseExact(s, "ddd MMM dd yyyy HH:mm:ss 'GMT'zzz", System.Globalization.CultureInfo.InvariantCulture);
            string Fdate = dt.ToString("yyyy-MM-dd");
            DateTime FromDate = Convert.ToDateTime(Fdate);
            string e = context.Session["Todate"].ToString();
            var edt = DateTime.ParseExact(e, "ddd MMM dd yyyy HH:mm:ss 'GMT'zzz", System.Globalization.CultureInfo.InvariantCulture);
            string Tdate = edt.ToString("yyyy-MM-dd");
            DateTime ToDate = Convert.ToDateTime(Tdate);
            string SalesType = context.Session["salestype"].ToString();
            DataTable dtble = new DataTable();
            string type = "";
            if (BranchId == "8009")
            {
                cmd = new MySqlCommand("SELECT TripInfo.Sno, ProductInfo.Categoryname, ROUND(SUM(ProductInfo.Qty), 2) AS DeliveryQty,ROUND(SUM(ProductInfo.UnitPrice * ProductInfo.Qty), 2) AS salevalue, TripInfo.I_Date, ProductInfo.CatSno, TripInfo.BranchName, TripInfo.BranchID, TripInfo.Branch_Id,ProductInfo.ProductSno,ProductInfo.ProductName FROM  (SELECT tripdata.Sno, tripdata.I_Date, branchdata_1.BranchName, dispatch.BranchID, dispatch.Branch_Id FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE (dispatch.GroupId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT  Categoryname, Sno, Qty, CatSno,UnitPrice,ProductSno,ProductName FROM (SELECT products_category.sno AS CatSno, products_category.Categoryname, tripdata_1.Sno, tripsubdata.Qty,productsdata.UnitPrice,productsdata.sno As ProductSno,productsdata.ProductName FROM tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno INNER JOIN productsdata ON tripsubdata.ProductId = productsdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno WHERE  (tripdata_1.AssignDate BETWEEN @d1 AND @d2) AND (productsdata.sno=@Catsno)) TripSubInfo) ProductInfo ON  TripInfo.Sno = ProductInfo.Sno GROUP BY TripInfo.Branch_Id ORDER BY  TripInfo.BranchName");
                cmd.Parameters.AddWithValue("@branch", BranchId);
                cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-1));
                cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-1));
                cmd.Parameters.AddWithValue("@Catsno", Catsno);
                dtble = vdbmngr.SelectQuery(cmd).Tables[0];
                type = "GroupWise";
            }
            else if (BranchId == "8012" || BranchId == "8013")
            {
                cmd = new MySqlCommand("SELECT TripInfo.Sno, ProductInfo.Categoryname, ROUND(SUM(ProductInfo.Qty), 2) AS DeliveryQty,ROUND(SUM(ProductInfo.UnitPrice * ProductInfo.Qty), 2) AS salevalue, TripInfo.I_Date, ProductInfo.CatSno, TripInfo.BranchName, TripInfo.BranchID, TripInfo.Branch_Id,ProductInfo.ProductSno,ProductInfo.ProductName FROM  (SELECT tripdata.Sno, tripdata.I_Date, branchdata_1.BranchName, dispatch.BranchID, dispatch.Branch_Id FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE (dispatch.CompanyId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT  Categoryname, Sno, Qty, CatSno,UnitPrice,ProductSno,ProductName FROM (SELECT products_category.sno AS CatSno, products_category.Categoryname, tripdata_1.Sno, tripsubdata.Qty,productsdata.UnitPrice,productsdata.sno As ProductSno,productsdata.ProductName FROM tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno INNER JOIN productsdata ON tripsubdata.ProductId = productsdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno WHERE  (tripdata_1.AssignDate BETWEEN @d1 AND @d2) AND (productsdata.sno=@Catsno)) TripSubInfo) ProductInfo ON  TripInfo.Sno = ProductInfo.Sno GROUP BY TripInfo.Branch_Id ORDER BY  TripInfo.BranchName");
                cmd.Parameters.AddWithValue("@branch", BranchId);
                cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-1));
                cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-1));
                cmd.Parameters.AddWithValue("@Catsno", Catsno);
                dtble = vdbmngr.SelectQuery(cmd).Tables[0];
                type = "CompanyWise";
            }
            else if (SalesType == "Plant")
            {
                cmd = new MySqlCommand("SELECT    TripInfo.Sno, TripInfo.DCNo, ProductInfo.Categoryname, Round(SUM(ProductInfo.Qty),2) AS DeliveryQty, SUM(ProductInfo.UnitPrice * ProductInfo.Qty) AS salevalue, TripInfo.I_Date, TripInfo.VehicleNo, TripInfo.Status, TripInfo.DispName, TripInfo.DispType, TripInfo.DispMode, ProductInfo.CatSno,ProductInfo.ProductSno,ProductInfo.ProductName, TripInfo.BranchName, TripInfo.BranchID FROM (SELECT        tripdata.Sno, tripdata.DCNo, tripdata.I_Date, tripdata.VehicleNo, tripdata.Status, dispatch.DispName, dispatch.DispType, dispatch.DispMode,branchdata_1.BranchName, dispatch.BranchID FROM  branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.BranchID = branchdata_1.sno WHERE (dispatch.Branch_Id = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT Categoryname, ProductName, UnitPrice,ProductSno,Sno, Qty, CatSno, productid FROM  (SELECT productsdata.UnitPrice, productsdata.sno AS productid, products_category.sno AS CatSno, products_category.Categoryname, productsdata.ProductName,productsdata.sno As ProductSno, tripdata_1.Sno, tripsubdata.Qty FROM  tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno INNER JOIN productsdata ON tripsubdata.ProductId = productsdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno  WHERE (tripdata_1.AssignDate BETWEEN @d1 AND @d2) AND (productsdata.sno=@Catsno)) TripSubInfo) ProductInfo ON TripInfo.Sno = ProductInfo.Sno GROUP BY TripInfo.BranchID ORDER BY ProductInfo.CatSno, TripInfo.BranchID");
                cmd.Parameters.AddWithValue("@branch", BranchId);
                cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-1));
                cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-1));
                cmd.Parameters.AddWithValue("@Catsno", Catsno);
                dtble = vdbmngr.SelectQuery(cmd).Tables[0];
            }
            else
            {
                cmd = new MySqlCommand("SELECT    modifiedroutes.RouteName As BranchName, Round(SUM(indents_subtable.DeliveryQty),2) AS DeliveryQty, SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost) AS salevalue, modifiedroutes.Sno AS BranchID, modifidroutssubtab.BranchID AS bid, branchdata_2.BranchName As RouteName, branchdata_2.flag, branchdata_1.sno AS routeid, branchdata_2.SalesType AS SalesTypeId FROM  branchdata branchdata_2 RIGHT OUTER JOIN branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT  RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo ON  branchdata_2.sno = modifidroutssubtab.BranchID LEFT OUTER JOIN indents_subtable INNER JOIN (SELECT IndentNo, I_date, Branch_id FROM  indents WHERE  (I_date BETWEEN @starttime AND @endtime)) indt ON indents_subtable.IndentNo = indt.IndentNo ON  modifidroutssubtab.BranchID = indt.Branch_id INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno WHERE  (branchdata.SalesType IS NOT NULL) AND (indents_subtable.DeliveryQty <> 0) AND (products_category.sno <> '9') AND (products_category.sno <> '10') AND (modifiedroutes.BranchID = @BranchID) GROUP BY modifiedroutes.Sno ORDER BY branchdata_2.RouteID, branchdata_2.RouteID");
                cmd.Parameters.AddWithValue("@BranchID", BranchId);
                cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate).AddDays(-1));
                cmd.Parameters.AddWithValue("@endtime", GetHighDate(ToDate).AddDays(-1));
                dtble = vdbmngr.SelectQuery(cmd).Tables[0];
            }
            List<LineChartValuesclass> LineChartValuelist = new List<LineChartValuesclass>();
            foreach (DataRow dr in dtble.Rows)
            {
                LineChartValuesclass getLineChart = new LineChartValuesclass();
                if (ddlDataType == "Quantity")
                {
                    getLineChart.BranchName = dr["BranchName"].ToString(); ;
                    if (BranchId == "8009" || BranchId == "8012" || BranchId == "8013")
                    {
                        getLineChart.BranchID = "" + dr["ProductSno"].ToString() + "_" + dr["branch_id"].ToString() + "";// dr["branch_id"].ToString();
                    }
                    else
                    {

                        getLineChart.BranchID = "" + dr["ProductSno"].ToString() + "_" + dr["BranchID"].ToString() + "";// dr["BranchID"].ToString();

                    }
                    getLineChart.type = type;
                    double tempqty = 0;
                    double.TryParse(dr["DeliveryQty"].ToString(), out tempqty); ;
                    double AvgQty = tempqty / 2;
                    AvgQty = Math.Round(AvgQty, 2);
                    getLineChart.AvgQty = AvgQty.ToString();
                    if (dr["DeliveryQty"].ToString() != "")
                    {
                        CultureInfo hindi = new CultureInfo("hi-IN");
                        decimal DeliveryQty = decimal.Parse(dr["DeliveryQty"].ToString(), CultureInfo.InvariantCulture);
                        getLineChart.dispatchqty = string.Format(hindi, "{0:#,#}", DeliveryQty);
                    }
                    else
                    {
                        getLineChart.dispatchqty = "0";
                    }
                }
                else
                {
                    getLineChart.BranchName = dr["BranchName"].ToString(); ;
                    if (BranchId == "8009" || BranchId == "8012" || BranchId == "8013")
                    {
                        getLineChart.BranchID = dr["branch_id"].ToString();
                    }
                    else
                    {

                        getLineChart.BranchID = dr["BranchID"].ToString();
                    }
                    getLineChart.type = type;
                    double tempsalevalue = 0;
                    double.TryParse(dr["salevalue"].ToString(), out tempsalevalue); ;
                    double AvgSale = tempsalevalue / 2;
                    AvgSale = Math.Round(AvgSale, 2);
                    getLineChart.AvgSaleValue = AvgSale.ToString();
                    if (dr["salevalue"].ToString() != "")
                    {
                        CultureInfo hindi = new CultureInfo("hi-IN");
                        decimal salevalue = decimal.Parse(dr["salevalue"].ToString(), CultureInfo.InvariantCulture);
                        getLineChart.dispatchvalue = string.Format(hindi, "{0:#,#}", salevalue);
                    }
                    else
                    {
                        getLineChart.dispatchvalue = "0";
                    }
                }
                LineChartValuelist.Add(getLineChart);
            }
            string respnceString = GetJson(LineChartValuelist);
            context.Response.Write(respnceString);
        }
        catch
        {
        }
    }
    private void branchwise_Others_Dispatch_qty1(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            string BranchId = context.Request["BranchId"];
            string Catsno = "";
            string temp = context.Request["temp"];
            string temp1 = context.Request["temp1"];
            if (temp != null)
            {
                if (temp == "ProductWise")
                {
                    string[] arr = BranchId.Split('_');
                    string t1 = arr.Length.ToString();
                    if (t1 == "3")
                    {
                        Catsno = arr[1];

                    }
                    else
                    {
                        Catsno = arr[0];
                        BranchId = arr[1];
                    }
                }
                else
                {
                    BranchId = context.Request["BranchId"];
                }
            }
            else
            {
                BranchId = context.Request["BranchId"];
            }
            string ddlDataType = context.Request["ddlDataType"];
            DateTime ServerDateCurrentdate = VehicleDBMgr.GetTime(vdbmngr.conn);
            string s = context.Request["IndDate"].ToString();
            var dt = DateTime.ParseExact(s, "ddd MMM dd yyyy HH:mm:ss 'GMT'zzz", System.Globalization.CultureInfo.InvariantCulture);
            string Fdate = dt.ToString("yyyy-MM-dd");
            DateTime FromDate = Convert.ToDateTime(Fdate);
            string e = context.Request["Todate"].ToString();
            var edt = DateTime.ParseExact(e, "ddd MMM dd yyyy HH:mm:ss 'GMT'zzz", System.Globalization.CultureInfo.InvariantCulture);
            string Tdate = edt.ToString("yyyy-MM-dd");
            DateTime ToDate = Convert.ToDateTime(Tdate);
            DataTable dtble = new DataTable();
            string type = "";
            TimeSpan dateSpan2 = ToDate.Subtract(FromDate);
            int NoOfdays = dateSpan2.Days + 1;
            if (temp == null)
            {

                if (temp == "ProductWise")
                {

                    if (BranchId == "8009")
                    {
                        cmd = new MySqlCommand("SELECT TripInfo.Sno, ProductInfo.Categoryname, ROUND(SUM(ProductInfo.Qty), 2) AS DeliveryQty,ROUND(SUM(ProductInfo.UnitPrice * ProductInfo.Qty), 2) AS salevalue, TripInfo.I_Date, ProductInfo.CatSno, TripInfo.BranchName, TripInfo.BranchID, TripInfo.Branch_Id FROM  (SELECT tripdata.Sno, tripdata.I_Date, branchdata_1.BranchName, dispatch.BranchID, dispatch.Branch_Id FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE (dispatch.GroupId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT  Categoryname, Sno, Qty, CatSno,UnitPrice FROM (SELECT products_category.sno AS CatSno, products_category.Categoryname, tripdata_1.Sno, tripsubdata.Qty,productsdata.UnitPrice FROM tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno INNER JOIN productsdata ON tripsubdata.ProductId = productsdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno WHERE  (tripdata_1.AssignDate BETWEEN @d1 AND @d2) AND (products_category.sno=@Catsno)) TripSubInfo) ProductInfo ON  TripInfo.Sno = ProductInfo.Sno GROUP BY TripInfo.Branch_Id ORDER BY  TripInfo.BranchName");
                        cmd.Parameters.AddWithValue("@branch", BranchId);
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-1));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-1));
                        cmd.Parameters.AddWithValue("@Catsno", Catsno);
                        dtble = vdbmngr.SelectQuery(cmd).Tables[0];
                        type = "GroupWise";
                    }
                    else if (BranchId == "8012" || BranchId == "8013")
                    {
                        cmd = new MySqlCommand("SELECT TripInfo.Sno, ProductInfo.Categoryname, ROUND(SUM(ProductInfo.Qty), 2) AS DeliveryQty,ROUND(SUM(ProductInfo.UnitPrice * ProductInfo.Qty), 2) AS salevalue, TripInfo.I_Date, ProductInfo.CatSno, TripInfo.BranchName, TripInfo.BranchID, TripInfo.Branch_Id FROM  (SELECT tripdata.Sno, tripdata.I_Date, branchdata_1.BranchName, dispatch.BranchID, dispatch.Branch_Id FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE (dispatch.CompanyId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT  Categoryname, Sno, Qty, CatSno,UnitPrice FROM (SELECT products_category.sno AS CatSno, products_category.Categoryname, tripdata_1.Sno, tripsubdata.Qty,productsdata.UnitPrice FROM tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno INNER JOIN productsdata ON tripsubdata.ProductId = productsdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno WHERE  (tripdata_1.AssignDate BETWEEN @d1 AND @d2) AND (products_category.sno=@Catsno)) TripSubInfo) ProductInfo ON  TripInfo.Sno = ProductInfo.Sno GROUP BY TripInfo.Branch_Id ORDER BY  TripInfo.BranchName");
                        cmd.Parameters.AddWithValue("@branch", BranchId);
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-1));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-1));
                        cmd.Parameters.AddWithValue("@Catsno", Catsno);
                        dtble = vdbmngr.SelectQuery(cmd).Tables[0];
                        type = "CompanyWise";
                    }
                }
                else
                {
                    if (BranchId == "8009")
                    {
                        cmd = new MySqlCommand("SELECT    TripInfo.Sno, ProductInfo.Categoryname, ROUND(SUM(ProductInfo.Qty), 2) AS DeliveryQty, ROUND(SUM(ProductInfo.UnitPrice * ProductInfo.Qty), 2) AS salevalue, TripInfo.I_Date, ProductInfo.CatSno, ProductInfo.tempsubcatsno, TripInfo.BranchName, TripInfo.BranchID, TripInfo.GroupId, TripInfo.Branch_Id FROM  (SELECT tripdata.Sno, tripdata.I_Date, branchdata_1.BranchName, dispatch.BranchID, dispatch.GroupId, dispatch.Branch_Id FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE (dispatch.GroupId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT  Categoryname, Sno, Qty, CatSno, UnitPrice, tempsubcatsno FROM  (SELECT products_category.tempcatsno AS CatSno, products_category.description AS Categoryname, tripdata_1.Sno, tripsubdata.Qty, productsdata.UnitPrice, productsdata.tempsubcatsno FROM tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno INNER JOIN productsdata ON tripsubdata.ProductId = productsdata.sno INNER JOIN products_subcategory ON productsdata.tempsubcatsno = products_subcategory.tempsub_catsno INNER JOIN products_category ON products_subcategory.tempcatsno = products_category.tempcatsno WHERE (tripdata_1.AssignDate BETWEEN @d1 AND @d2) AND (products_category.tempcatsno <> '1') AND (products_category.tempcatsno <> '2')) TripSubInfo) ProductInfo ON  TripInfo.Sno = ProductInfo.Sno GROUP BY ProductInfo.CatSno, TripInfo.GroupId ORDER BY TripInfo.BranchName");
                        cmd.Parameters.AddWithValue("@branch", BranchId);
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-1));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-1));
                        dtble = vdbmngr.SelectQuery(cmd).Tables[0];
                        type = "GroupWise";
                    }
                    else if (BranchId == "8012" || BranchId == "8013")
                    {
                        cmd = new MySqlCommand("SELECT TripInfo.Sno, ProductInfo.Categoryname, ROUND(SUM(ProductInfo.Qty), 2) AS DeliveryQty,ROUND(SUM(ProductInfo.UnitPrice * ProductInfo.Qty), 2) AS salevalue, TripInfo.I_Date, ProductInfo.CatSno,ProductInfo.tempsubcatsno, TripInfo.BranchName, TripInfo.BranchID, TripInfo.CompanyId As GroupId,TripInfo.Branch_Id FROM  (SELECT tripdata.Sno, tripdata.I_Date, branchdata_1.BranchName, dispatch.BranchID,dispatch.CompanyId, dispatch.Branch_Id FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE (dispatch.CompanyId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT  Categoryname, Sno, Qty, CatSno,UnitPrice,tempsubcatsno FROM (SELECT products_category.sno AS CatSno, products_category.Categoryname, tripdata_1.Sno, tripsubdata.Qty,productsdata.UnitPrice,productsdata.tempsubcatsno FROM tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno INNER JOIN productsdata ON tripsubdata.ProductId = productsdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno WHERE  (tripdata_1.AssignDate BETWEEN @d1 AND @d2) AND (products_category.sno <> '9') AND (products_category.sno <> '10')) TripSubInfo) ProductInfo ON  TripInfo.Sno = ProductInfo.Sno GROUP BY ProductInfo.CatSno,GroupId ORDER BY  TripInfo.BranchName");
                        cmd.Parameters.AddWithValue("@branch", BranchId);
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-1));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-1));
                        cmd.Parameters.AddWithValue("@catsno", "10");
                        dtble = vdbmngr.SelectQuery(cmd).Tables[0];
                        type = "CompanyWise";
                    }
                }
            }
            if (temp == "ProductWise")
            {

                if (BranchId == "8009")
                {

                    if (temp1 == "catType")
                    {
                        cmd = new MySqlCommand("SELECT   TripInfo.Sno, ProductInfo.Categoryname, ROUND(SUM(ProductInfo.Qty), 2) AS DeliveryQty, ROUND(SUM(ProductInfo.UnitPrice * ProductInfo.Qty), 2) AS salevalue, TripInfo.I_Date, ProductInfo.ProductSno,ProductInfo.ProductName, ProductInfo.CatSno, TripInfo.BranchName, TripInfo.BranchID, TripInfo.GroupId, TripInfo.Branch_Id FROM (SELECT tripdata.Sno, tripdata.I_Date, branchdata_1.BranchName, dispatch.BranchID, dispatch.GroupId, dispatch.Branch_Id FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE  (dispatch.GroupId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT Categoryname, Sno, Qty, CatSno, UnitPrice, ProductName, ProductSno FROM (SELECT   products_category.tempcatsno AS CatSno, products_category.description AS Categoryname, tripdata_1.Sno, productsdata.sno AS ProductSno, productsdata.ProductName, tripsubdata.Qty, productsdata.UnitPrice FROM tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno INNER JOIN productsdata ON tripsubdata.ProductId = productsdata.sno INNER JOIN products_subcategory ON productsdata.tempsubcatsno = products_subcategory.tempsub_catsno INNER JOIN products_category ON products_subcategory.tempcatsno = products_category.tempcatsno WHERE (tripdata_1.AssignDate BETWEEN @d1 AND @d2) AND (products_category.tempcatsno = @CatSno)) TripSubInfo) ProductInfo ON TripInfo.Sno = ProductInfo.Sno GROUP BY ProductInfo.ProductSno, TripInfo.GroupId ORDER BY TripInfo.BranchName");
                        cmd.Parameters.AddWithValue("@branch", BranchId);
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-1));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-1));
                        cmd.Parameters.AddWithValue("@Catsno", Catsno);
                        dtble = vdbmngr.SelectQuery(cmd).Tables[0];
                        type = "GroupWise";
                    }
                    else
                    {

                        cmd = new MySqlCommand("SELECT TripInfo.Sno, ProductInfo.Categoryname, ROUND(SUM(ProductInfo.Qty), 2) AS DeliveryQty,ROUND(SUM(ProductInfo.UnitPrice * ProductInfo.Qty), 2) AS salevalue, TripInfo.I_Date, ProductInfo.CatSno, TripInfo.BranchName, TripInfo.BranchID, TripInfo.Branch_Id FROM  (SELECT tripdata.Sno, tripdata.I_Date, branchdata_1.BranchName, dispatch.BranchID, dispatch.Branch_Id FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE (dispatch.GroupId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT  Categoryname, Sno, Qty, CatSno,UnitPrice FROM (SELECT products_category.sno AS CatSno, products_category.Categoryname, tripdata_1.Sno, tripsubdata.Qty,productsdata.UnitPrice FROM tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno INNER JOIN productsdata ON tripsubdata.ProductId = productsdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno WHERE  (tripdata_1.AssignDate BETWEEN @d1 AND @d2) AND (products_category.sno=@Catsno)) TripSubInfo) ProductInfo ON  TripInfo.Sno = ProductInfo.Sno GROUP BY TripInfo.Branch_Id ORDER BY  TripInfo.BranchName");
                        cmd.Parameters.AddWithValue("@branch", BranchId);
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-1));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-1));
                        cmd.Parameters.AddWithValue("@Catsno", Catsno);
                        dtble = vdbmngr.SelectQuery(cmd).Tables[0];
                        type = "GroupWise";
                    }
                }
                else if (BranchId == "8012" || BranchId == "8013")
                {
                    if (temp1 == "catType")
                    {
                        cmd = new MySqlCommand("SELECT TripInfo.Sno, ProductInfo.Categoryname, ROUND(SUM(ProductInfo.Qty), 2) AS DeliveryQty,ROUND(SUM(ProductInfo.UnitPrice * ProductInfo.Qty), 2) AS salevalue,ProductInfo.ProductSno,ProductInfo.ProductName,TripInfo.I_Date, ProductInfo.CatSno, TripInfo.BranchName, TripInfo.BranchID, TripInfo.CompanyId As GroupId,TripInfo.Branch_Id FROM  (SELECT tripdata.Sno, tripdata.I_Date, branchdata_1.BranchName, dispatch.BranchID,dispatch.CompanyId, dispatch.Branch_Id FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE (dispatch.CompanyId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT  Categoryname, Sno, Qty, CatSno,UnitPrice,ProductName,ProductSno FROM (SELECT products_category.sno AS CatSno, products_category.Categoryname, tripdata_1.Sno,productsdata.sno As ProductSno,productsdata.ProductName, tripsubdata.Qty,productsdata.UnitPrice FROM tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno INNER JOIN productsdata ON tripsubdata.ProductId = productsdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno WHERE  (tripdata_1.AssignDate BETWEEN @d1 AND @d2) AND (products_category.sno=@CatSno)) TripSubInfo) ProductInfo ON  TripInfo.Sno = ProductInfo.Sno GROUP BY ProductInfo.ProductSno,GroupId ORDER BY  TripInfo.BranchName");
                        cmd.Parameters.AddWithValue("@branch", BranchId);
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-1));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-1));
                        cmd.Parameters.AddWithValue("@Catsno", Catsno);
                        dtble = vdbmngr.SelectQuery(cmd).Tables[0];
                        type = "CompanyWise";
                    }
                    else
                    {

                        cmd = new MySqlCommand("SELECT TripInfo.Sno, ProductInfo.Categoryname, ROUND(SUM(ProductInfo.Qty), 2) AS DeliveryQty,ROUND(SUM(ProductInfo.UnitPrice * ProductInfo.Qty), 2) AS salevalue, TripInfo.I_Date, ProductInfo.CatSno, TripInfo.BranchName, TripInfo.BranchID, TripInfo.Branch_Id FROM  (SELECT tripdata.Sno, tripdata.I_Date, branchdata_1.BranchName, dispatch.BranchID, dispatch.Branch_Id FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE (dispatch.CompanyId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT  Categoryname, Sno, Qty, CatSno,UnitPrice FROM (SELECT products_category.sno AS CatSno, products_category.Categoryname, tripdata_1.Sno, tripsubdata.Qty,productsdata.UnitPrice FROM tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno INNER JOIN productsdata ON tripsubdata.ProductId = productsdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno WHERE  (tripdata_1.AssignDate BETWEEN @d1 AND @d2) AND (products_category.sno=@Catsno)) TripSubInfo) ProductInfo ON  TripInfo.Sno = ProductInfo.Sno GROUP BY TripInfo.Branch_Id ORDER BY  TripInfo.BranchName");
                        cmd.Parameters.AddWithValue("@branch", BranchId);
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-1));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-1));
                        cmd.Parameters.AddWithValue("@Catsno", Catsno);
                        dtble = vdbmngr.SelectQuery(cmd).Tables[0];
                        type = "CompanyWise";
                    }
                }
            }
            List<LineChartValuesclass> LineChartValuelist = new List<LineChartValuesclass>();
            double yesterdaysum = Convert.ToDouble(dtble.Compute("SUM(SaleValue)", "GroupId=" + BranchId + ""));
            cmd = new MySqlCommand("SELECT     products_subcategory.sno, products_subcategory.category_sno, products_subcategory.SubCatName, products_subcategory.Flag, products_subcategory.userdata_sno, products_subcategory.fat,products_subcategory.description, products_subcategory.rank, products_subcategory.tempcatsno, products_subcategory.tempsub_catsno, products_category.description AS CateName FROM    products_subcategory INNER JOIN  products_category ON products_subcategory.tempcatsno = products_category.tempcatsno WHERE (products_subcategory.tempsub_catsno IS NOT NULL)");
            DataTable dtcategory = vdbmngr.SelectQuery(cmd).Tables[0];
            foreach (DataRow dr in dtble.Rows)
            {
                LineChartValuesclass getLineChart = new LineChartValuesclass();
                if (ddlDataType == "Quantity")
                {
                    if (temp != "ProductWise")
                    {
                        getLineChart.BranchName = dr["Categoryname"].ToString(); ;
                        if (BranchId == "8009" || BranchId == "8012" || BranchId == "8013")
                        {
                            if (temp1 == "catType")
                            {
                                getLineChart.BranchID = "" + dr["ProductSno"].ToString() + "_" + dr["GroupId"].ToString() + "";
                                getLineChart.temp1 = "catType";
                            }
                            else
                            {
                                getLineChart.BranchID = "" + dr["CatSno"].ToString() + "_" + dr["GroupId"].ToString() + "";
                                getLineChart.temp1 = "catType";
                            }
                        }
                        else
                        {
                            getLineChart.BranchID = "" + dr["CatSno"].ToString() + "_" + dr["Branch_Id"].ToString() + "";// dr["CatSno"].ToString();
                        }
                    }
                    else
                    {
                        getLineChart.BranchName = dr["BranchName"].ToString(); ;
                        if (BranchId == "8009" || BranchId == "8012" || BranchId == "8013")
                        {
                            if (temp1 == "catType")
                            {
                                getLineChart.BranchName = dr["ProductName"].ToString();
                                getLineChart.BranchID = "" + dr["ProductSno"].ToString() + "_" + dr["GroupId"].ToString() + "";
                                getLineChart.temp1 = "catType";
                            }
                            else
                            {

                                getLineChart.BranchID = "" + dr["CatSno"].ToString() + "_" + dr["Branch_Id"].ToString() + "";
                            }
                        }
                        else
                        {
                            getLineChart.BranchID = "" + dr["CatSno"].ToString() + "_" + dr["Branch_Id"].ToString() + "";// dr["CatSno"].ToString();
                        }
                        getLineChart.temp = temp;
                    }
                    getLineChart.type = type;
                    double tempqty = 0;
                    double.TryParse(dr["DeliveryQty"].ToString(), out tempqty); ;
                    double AvgQty = tempqty / NoOfdays;
                    AvgQty = Math.Round(AvgQty, 2);
                    getLineChart.AvgQty = AvgQty.ToString();
                    if (dr["DeliveryQty"].ToString() != "")
                    {
                        CultureInfo hindi = new CultureInfo("hi-IN");
                        decimal DeliveryQty = decimal.Parse(dr["DeliveryQty"].ToString(), CultureInfo.InvariantCulture);
                        getLineChart.dispatchqty = string.Format(hindi, "{0:#,#}", DeliveryQty);
                    }
                    else
                    {
                        getLineChart.dispatchqty = "0";
                    }
                }
                else
                {
                    getLineChart.BranchName = dr["Categoryname"].ToString(); ;
                    if (BranchId == "8009" || BranchId == "8012" || BranchId == "8013")
                    {
                        getLineChart.BranchID = "" + dr["CatSno"].ToString() + "_" + dr["GroupId"].ToString() + ""; ;
                    }
                    else
                    {
                        getLineChart.BranchID = "" + dr["CatSno"].ToString() + "_" + dr["Branch_Id"].ToString() + ""; ;
                    }
                    getLineChart.type = type;
                    double tempsalevalue = 0;
                    double.TryParse(dr["salevalue"].ToString(), out tempsalevalue); ;
                    double AvgSale = tempsalevalue / NoOfdays;
                    AvgSale = Math.Round(AvgSale, 2);
                    getLineChart.AvgSaleValue = AvgSale.ToString();
                    if (dr["salevalue"].ToString() != "")
                    {
                        CultureInfo hindi = new CultureInfo("hi-IN");
                        decimal salevalue = decimal.Parse(dr["salevalue"].ToString(), CultureInfo.InvariantCulture);
                        getLineChart.dispatchvalue = string.Format(hindi, "{0:#,#}", salevalue);
                    }
                    else
                    {
                        getLineChart.dispatchvalue = "0";
                    }
                }
                LineChartValuelist.Add(getLineChart);
            }
            string respnceString = GetJson(LineChartValuelist);
            context.Response.Write(respnceString);
        }
        catch
        {
        }
    }
    private void Route_Wise_Other_SaleQty(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            string BranchId = context.Request["BranchId"];
            string temp = context.Request["temp"];
            string Catsno = "";
            string[] arr = BranchId.Split('_');
            string t1 = arr.Length.ToString();
            if (t1 == "3")
            {
                Catsno = arr[1];
            }
            else
            {
                Catsno = arr[0];
                BranchId = arr[1];
            }


            string ddlDataType = context.Request["ddlDataType"];
            DateTime ServerDateCurrentdate = VehicleDBMgr.GetTime(vdbmngr.conn);
            string s = context.Session["IndDate"].ToString();
            var dt = DateTime.ParseExact(s, "ddd MMM dd yyyy HH:mm:ss 'GMT'zzz", System.Globalization.CultureInfo.InvariantCulture);
            string Fdate = dt.ToString("yyyy-MM-dd");
            DateTime FromDate = Convert.ToDateTime(Fdate);
            string e = context.Session["Todate"].ToString();
            var edt = DateTime.ParseExact(e, "ddd MMM dd yyyy HH:mm:ss 'GMT'zzz", System.Globalization.CultureInfo.InvariantCulture);
            string Tdate = edt.ToString("yyyy-MM-dd");
            DateTime ToDate = Convert.ToDateTime(Tdate);

            string SalesType = context.Session["salestype"].ToString();
            DataTable dtble = new DataTable();
            if (temp == "ProductWise")
            {
                if (SalesType == "Plant")
                {
                    cmd = new MySqlCommand("SELECT    modifiedroutes.RouteName,productsdata.sno As ProductSno, Round(SUM(indents_subtable.DeliveryQty),2) AS saleQty, SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost) AS salevalue, modifiedroutes.Sno AS routeid, modifidroutssubtab.BranchID AS bid, branchdata_2.BranchName, branchdata_2.flag, branchdata_1.sno AS BranchID, branchdata_2.SalesType AS SalesTypeId FROM  branchdata branchdata_2 RIGHT OUTER JOIN branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT  RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo ON  branchdata_2.sno = modifidroutssubtab.BranchID LEFT OUTER JOIN indents_subtable INNER JOIN (SELECT IndentNo, I_date, Branch_id FROM  indents WHERE  (I_date BETWEEN @starttime AND @endtime)) indt ON indents_subtable.IndentNo = indt.IndentNo ON  modifidroutssubtab.BranchID = indt.Branch_id INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno WHERE  (branchdata.SalesType IS NOT NULL) AND (indents_subtable.DeliveryQty <> 0) AND (productsdata.sno =@Catsno) AND (modifiedroutes.BranchID = @BranchID) GROUP BY modifiedroutes.Sno ORDER BY branchdata_2.RouteID, branchdata_2.RouteID");
                    cmd.Parameters.AddWithValue("@BranchID", BranchId);
                    cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate).AddDays(-1));
                    cmd.Parameters.AddWithValue("@endtime", GetHighDate(ToDate).AddDays(-1));
                    cmd.Parameters.AddWithValue("@Catsno", Catsno);
                    dtble = vdbmngr.SelectQuery(cmd).Tables[0];
                }
                else
                {
                    cmd = new MySqlCommand("SELECT   modifiedroutes.RouteName As BranchName,productsdata.sno As ProductSno, Round(SUM(indents_subtable.DeliveryQty),2) AS saleQty, SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost) AS salevalue, modifiedroutes.Sno AS bid, modifidroutssubtab.BranchID AS routeid, branchdata_2.BranchName As RouteName, branchdata_2.flag, branchdata_1.sno AS BranchID, branchdata_2.SalesType AS SalesTypeId FROM  branchdata branchdata_2 RIGHT OUTER JOIN branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT  RefNo, Rank, LevelType, BranchID, CDate, EDate FROM   modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo ON  branchdata_2.sno = modifidroutssubtab.BranchID LEFT OUTER JOIN indents_subtable INNER JOIN (SELECT   IndentNo, I_date, Branch_id FROM   indents WHERE  (I_date BETWEEN @starttime AND @endtime)) indt ON indents_subtable.IndentNo = indt.IndentNo ON  modifidroutssubtab.BranchID = indt.Branch_id INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno WHERE  (branchdata.SalesType IS NOT NULL) AND (indents_subtable.DeliveryQty <> 0) AND (modifiedroutes.Sno = @BranchID) AND (productsdata.sno =@Catsno) GROUP BY modifidroutssubtab.BranchID ORDER BY branchdata_2.RouteID, branchdata_2.RouteID");
                    cmd.Parameters.AddWithValue("@BranchID", BranchId);
                    cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate).AddDays(-1));
                    cmd.Parameters.AddWithValue("@endtime", GetHighDate(ToDate).AddDays(-1));
                    cmd.Parameters.AddWithValue("@Catsno", Catsno);
                    dtble = vdbmngr.SelectQuery(cmd).Tables[0];
                }
            }
            else
            {
                cmd = new MySqlCommand("SELECT    modifiedroutes.RouteName,productsdata.sno As ProductSno, Round(SUM(indents_subtable.DeliveryQty),2) AS saleQty, SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost) AS salevalue, modifiedroutes.Sno AS routeid, modifidroutssubtab.BranchID AS bid, branchdata_2.BranchName, branchdata_2.flag, branchdata_1.sno AS BranchID, branchdata_2.SalesType AS SalesTypeId FROM  branchdata branchdata_2 RIGHT OUTER JOIN branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT  RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo ON  branchdata_2.sno = modifidroutssubtab.BranchID LEFT OUTER JOIN indents_subtable INNER JOIN (SELECT IndentNo, I_date, Branch_id FROM  indents WHERE  (I_date BETWEEN @starttime AND @endtime)) indt ON indents_subtable.IndentNo = indt.IndentNo ON  modifidroutssubtab.BranchID = indt.Branch_id INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno WHERE  (branchdata.SalesType IS NOT NULL) AND (indents_subtable.DeliveryQty <> 0) AND (productsdata.sno =@Catsno) AND (modifiedroutes.BranchID = @BranchID) GROUP BY modifiedroutes.Sno ORDER BY branchdata_2.RouteID, branchdata_2.RouteID");
                cmd.Parameters.AddWithValue("@BranchID", BranchId);
                cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate).AddDays(-1));
                cmd.Parameters.AddWithValue("@endtime", GetHighDate(ToDate).AddDays(-1));
                cmd.Parameters.AddWithValue("@Catsno", Catsno);
                dtble = vdbmngr.SelectQuery(cmd).Tables[0];
            }
            List<LineChartValuesclass> LineChartValuelist = new List<LineChartValuesclass>();
            foreach (DataRow dr in dtble.Rows)
            {
                LineChartValuesclass getLineChart = new LineChartValuesclass();
                if (ddlDataType == "Quantity")
                {
                    getLineChart.BranchName = dr["RouteName"].ToString(); ;
                    getLineChart.BranchID = "" + dr["ProductSno"].ToString() + "_" + dr["routeid"].ToString() + "";// dr["routeid"].ToString();
                    double tempqty = 0;
                    double.TryParse(dr["saleQty"].ToString(), out tempqty); ;
                    double AvgQty = tempqty / 2;
                    AvgQty = Math.Round(AvgQty, 2);
                    getLineChart.AvgQty = AvgQty.ToString();
                    if (dr["saleQty"].ToString() != "")
                    {
                        CultureInfo hindi = new CultureInfo("hi-IN");
                        decimal DeliveryQty = decimal.Parse(dr["saleQty"].ToString(), CultureInfo.InvariantCulture);
                        getLineChart.dispatchqty = string.Format(hindi, "{0:#,#}", DeliveryQty);
                    }
                    else
                    {
                        getLineChart.dispatchqty = "0";
                    }

                }
                else
                {
                    getLineChart.BranchName = dr["RouteName"].ToString(); ;
                    getLineChart.BranchID = "" + dr["ProductSno"].ToString() + "_" + dr["routeid"].ToString() + ""; //dr["routeid"].ToString();
                    double tempsalevalue = 0;
                    double.TryParse(dr["salevalue"].ToString(), out tempsalevalue); ;
                    double AvgSale = tempsalevalue / 2;
                    AvgSale = Math.Round(AvgSale, 2);
                    getLineChart.AvgSaleValue = AvgSale.ToString();
                    if (dr["salevalue"].ToString() != "")
                    {
                        CultureInfo hindi = new CultureInfo("hi-IN");
                        decimal salevalue = decimal.Parse(dr["salevalue"].ToString(), CultureInfo.InvariantCulture);
                        getLineChart.dispatchvalue = string.Format(hindi, "{0:#,#}", salevalue);
                    }
                    else
                    {
                        getLineChart.dispatchvalue = "0";
                    }
                }

                LineChartValuelist.Add(getLineChart);
            }
            string respnceString = GetJson(LineChartValuelist);
            context.Response.Write(respnceString);
        }
        catch
        {
        }
    }
    private void Agent_Wise_Other_SaleQty(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            string BranchId = context.Request["BranchId"];
            string Catsno = "";
            string[] arr = BranchId.Split('_');
            string t1 = arr.Length.ToString();
            if (t1 == "3")
            {
                Catsno = arr[1];
            }
            else
            {
                Catsno = arr[0];
                BranchId = arr[1];
            }

            string ddlDataType = context.Request["ddlDataType"];
            DateTime ServerDateCurrentdate = VehicleDBMgr.GetTime(vdbmngr.conn);
            string s = context.Session["IndDate"].ToString();
            var dt = DateTime.ParseExact(s, "ddd MMM dd yyyy HH:mm:ss 'GMT'zzz", System.Globalization.CultureInfo.InvariantCulture);
            string Fdate = dt.ToString("yyyy-MM-dd");
            DateTime FromDate = Convert.ToDateTime(Fdate);
            string e = context.Session["Todate"].ToString();
            var edt = DateTime.ParseExact(e, "ddd MMM dd yyyy HH:mm:ss 'GMT'zzz", System.Globalization.CultureInfo.InvariantCulture);
            string Tdate = edt.ToString("yyyy-MM-dd");
            DateTime ToDate = Convert.ToDateTime(Tdate);
            cmd = new MySqlCommand("SELECT   modifiedroutes.RouteName, Round(SUM(indents_subtable.DeliveryQty),2) AS saleQty, SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost) AS salevalue, modifiedroutes.Sno AS routeid, modifidroutssubtab.BranchID AS bid, branchdata_2.BranchName, branchdata_2.flag, branchdata_1.sno AS BranchID, branchdata_2.SalesType AS SalesTypeId FROM  branchdata branchdata_2 RIGHT OUTER JOIN branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT  RefNo, Rank, LevelType, BranchID, CDate, EDate FROM   modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo ON  branchdata_2.sno = modifidroutssubtab.BranchID LEFT OUTER JOIN indents_subtable INNER JOIN (SELECT   IndentNo, I_date, Branch_id FROM   indents WHERE  (I_date BETWEEN @starttime AND @endtime)) indt ON indents_subtable.IndentNo = indt.IndentNo ON  modifidroutssubtab.BranchID = indt.Branch_id INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno WHERE  (branchdata.SalesType IS NOT NULL) AND (indents_subtable.DeliveryQty <> 0) AND (modifiedroutes.Sno = @BranchID) AND (productsdata.sno =@Catsno) GROUP BY modifidroutssubtab.BranchID ORDER BY branchdata_2.RouteID, branchdata_2.RouteID");
            cmd.Parameters.AddWithValue("@BranchID", BranchId);
            cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate).AddDays(-1));
            cmd.Parameters.AddWithValue("@endtime", GetHighDate(ToDate).AddDays(-1));
            cmd.Parameters.AddWithValue("@Catsno", Catsno);
            DataTable dtble = vdbmngr.SelectQuery(cmd).Tables[0];
            List<LineChartValuesclass> LineChartValuelist = new List<LineChartValuesclass>();
            foreach (DataRow dr in dtble.Rows)
            {
                LineChartValuesclass getLineChart = new LineChartValuesclass();
                if (ddlDataType == "Quantity")
                {
                    getLineChart.BranchName = dr["BranchName"].ToString(); ;
                    getLineChart.BranchID = dr["BranchID"].ToString();
                    double tempqty = 0;
                    double.TryParse(dr["saleQty"].ToString(), out tempqty); ;
                    double AvgQty = tempqty / 2;
                    AvgQty = Math.Round(AvgQty, 2);
                    getLineChart.AvgQty = AvgQty.ToString();
                    if (dr["saleQty"].ToString() != "")
                    {
                        CultureInfo hindi = new CultureInfo("hi-IN");
                        decimal DeliveryQty = decimal.Parse(dr["saleQty"].ToString(), CultureInfo.InvariantCulture);
                        getLineChart.dispatchqty = string.Format(hindi, "{0:#,#}", DeliveryQty);
                    }
                    else
                    {
                        getLineChart.dispatchqty = "0";
                    }
                }
                else
                {
                    getLineChart.BranchName = dr["BranchName"].ToString(); ;
                    getLineChart.BranchID = dr["BranchID"].ToString();
                    double tempsalevalue = 0;
                    double.TryParse(dr["salevalue"].ToString(), out tempsalevalue); ;
                    double AvgSale = tempsalevalue / 2;
                    AvgSale = Math.Round(AvgSale, 2);
                    getLineChart.AvgSaleValue = AvgSale.ToString();
                    if (dr["salevalue"].ToString() != "")
                    {
                        CultureInfo hindi = new CultureInfo("hi-IN");
                        decimal salevalue = decimal.Parse(dr["salevalue"].ToString(), CultureInfo.InvariantCulture);
                        getLineChart.dispatchvalue = string.Format(hindi, "{0:#,#}", salevalue);

                    }
                    else
                    {
                        getLineChart.dispatchvalue = "0";
                    }
                }
                LineChartValuelist.Add(getLineChart);
            }
            string respnceString = GetJson(LineChartValuelist);
            context.Response.Write(respnceString);
        }
        catch
        {
        }
    }
    private void branchwise_SaleValue(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            string Branch_Id = context.Request["Branch_Id"];
            string BranchId = "";
            if (Branch_Id != null)
            {
                BranchId = Branch_Id;
            }
            else
            {
                BranchId = context.Session["ClickedBranchid"].ToString();
            }
            DateTime ServerDateCurrentdate = VehicleDBMgr.GetTime(vdbmngr.conn);
            string s = context.Session["IndDate"].ToString();
            var dt = DateTime.ParseExact(s, "ddd MMM dd yyyy HH:mm:ss 'GMT'zzz", System.Globalization.CultureInfo.InvariantCulture);
            string Fdate = dt.ToString("yyyy-MM-dd");
            DateTime FromDate = Convert.ToDateTime(Fdate);
            string e = context.Session["Todate"].ToString();
            var edt = DateTime.ParseExact(e, "ddd MMM dd yyyy HH:mm:ss 'GMT'zzz", System.Globalization.CultureInfo.InvariantCulture);
            string Tdate = edt.ToString("yyyy-MM-dd");
            DateTime ToDate = Convert.ToDateTime(Tdate);
            string SalesType = context.Session["salestype"].ToString();
            DataTable dtble = new DataTable();
            string type = "";
            if (BranchId == "8009")
            {
                cmd = new MySqlCommand("SELECT   TripInfo.Sno, TripInfo.DCNo, ROUND(SUM(ProductInfo.Qty), 2) AS DeliveryQty, ROUND(SUM(ProductInfo.UnitPrice * ProductInfo.Qty), 2) AS salevalue, TripInfo.I_Date, TripInfo.VehicleNo, TripInfo.Status, TripInfo.DispName, TripInfo.DispType, TripInfo.DispMode, TripInfo.BranchID, TripInfo.BranchName, TripInfo.Branch_Id FROM (SELECT   tripdata.Sno, tripdata.DCNo, tripdata.I_Date, tripdata.VehicleNo, tripdata.Status, dispatch.DispName, dispatch.DispType, dispatch.DispMode, dispatch.BranchID, branchdata_1.BranchName, dispatch.Branch_Id FROM  branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE (dispatch.GroupId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT Qty, UnitPrice, Sno FROM (SELECT   tripdata_1.Sno, tripsubdata.Qty, productsdata.UnitPrice FROM tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno INNER JOIN productsdata ON tripsubdata.ProductId = productsdata.sno WHERE (tripdata_1.AssignDate BETWEEN @d1 AND @d2)) TripSubInfo) ProductInfo ON TripInfo.Sno = ProductInfo.Sno GROUP BY TripInfo.Branch_Id");
                cmd.Parameters.AddWithValue("@branch", BranchId);
                cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-1));
                cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-1));
                dtble = vdbmngr.SelectQuery(cmd).Tables[0];
                type = "GroupWise";
            }
            else if (BranchId == "8012" || BranchId == "8013")
            {
                cmd = new MySqlCommand("SELECT   TripInfo.Sno, TripInfo.DCNo, ROUND(SUM(ProductInfo.Qty), 2) AS DeliveryQty, ROUND(SUM(ProductInfo.UnitPrice * ProductInfo.Qty), 2) AS salevalue, TripInfo.I_Date, TripInfo.VehicleNo, TripInfo.Status, TripInfo.DispName, TripInfo.DispType, TripInfo.DispMode, TripInfo.BranchID, TripInfo.BranchName, TripInfo.Branch_Id FROM (SELECT   tripdata.Sno, tripdata.DCNo, tripdata.I_Date, tripdata.VehicleNo, tripdata.Status, dispatch.DispName, dispatch.DispType, dispatch.DispMode, dispatch.BranchID, branchdata_1.BranchName, dispatch.Branch_Id FROM  branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE (dispatch.CompanyId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT Qty, UnitPrice, Sno FROM (SELECT   tripdata_1.Sno, tripsubdata.Qty, productsdata.UnitPrice FROM tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno INNER JOIN productsdata ON tripsubdata.ProductId = productsdata.sno WHERE (tripdata_1.AssignDate BETWEEN @d1 AND @d2)) TripSubInfo) ProductInfo ON TripInfo.Sno = ProductInfo.Sno GROUP BY TripInfo.Branch_Id");
                cmd.Parameters.AddWithValue("@branch", BranchId);
                cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-1));
                cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-1));
                dtble = vdbmngr.SelectQuery(cmd).Tables[0];
                type = "CompanyWise";
            }
            else if (SalesType == "Plant")
            {
                if (BranchId == "172")
                {
                    cmd = new MySqlCommand("SELECT  branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty),2) AS SaleValue, branchdata.sno FROM  branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (branchmappingtable.SuperBranch = @BranchID) AND (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SubBranch NOT IN (2749,2948,538,3625)) GROUP BY branchdata.sno");
                    cmd.Parameters.AddWithValue("@BranchID", BranchId);
                    cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-1));
                    cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-1));
                    dtble = vdbmngr.SelectQuery(cmd).Tables[0];
                }
                else if (BranchId == "3625")
                {
                    cmd = new MySqlCommand("SELECT  branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty),2) AS SaleValue, branchdata.sno FROM  branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (branchmappingtable.SuperBranch = @BranchID) AND (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SubBranch IN (4609,3625)) GROUP BY branchdata.sno");
                    cmd.Parameters.AddWithValue("@BranchID", BranchId);
                    cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-1));
                    cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-1));
                    dtble = vdbmngr.SelectQuery(cmd).Tables[0];
                }
                else if (BranchId == "1801")
                {
                    cmd = new MySqlCommand("SELECT  branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty),2) AS SaleValue, branchdata.sno FROM  branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (branchmappingtable.SuperBranch = @BranchID) AND (indents.I_date BETWEEN @d1 AND @d2) GROUP BY branchdata.sno");
                    cmd.Parameters.AddWithValue("@BranchID", BranchId);
                    cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-1));
                    cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-1));
                    dtble = vdbmngr.SelectQuery(cmd).Tables[0];
                }
                else if (BranchId == "4626" || BranchId == "158")
                {
                    cmd = new MySqlCommand("SELECT  branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty),2) AS SaleValue, branchdata.sno FROM  branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (branchmappingtable.SuperBranch = @BranchID) AND (indents.I_date BETWEEN @d1 AND @d2) GROUP BY branchdata.sno");
                    cmd.Parameters.AddWithValue("@BranchID", BranchId);
                    cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-1));
                    cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-1));
                    dtble = vdbmngr.SelectQuery(cmd).Tables[0];
                }
            }
            else
            {
                cmd = new MySqlCommand("SELECT    modifiedroutes.RouteName As BranchName, Round(SUM(indents_subtable.DeliveryQty),0) AS saleQty, Round(SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost),2) AS salevalue, modifiedroutes.Sno AS sno, modifidroutssubtab.BranchID AS bid, branchdata_1.sno AS BranchID, branchdata_2.SalesType AS SalesTypeId FROM  branchdata branchdata_2 RIGHT OUTER JOIN branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT  RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo ON  branchdata_2.sno = modifidroutssubtab.BranchID LEFT OUTER JOIN indents_subtable INNER JOIN (SELECT  IndentNo, I_date, Branch_id FROM  indents WHERE  (I_date BETWEEN @starttime AND @endtime)) indt ON indents_subtable.IndentNo = indt.IndentNo ON  modifidroutssubtab.BranchID = indt.Branch_id INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno WHERE  (branchdata.SalesType IS NOT NULL) AND (indents_subtable.DeliveryQty <> 0) AND (modifiedroutes.BranchID = @BranchID) GROUP BY modifiedroutes.Sno ORDER BY branchdata_2.RouteID, branchdata_2.RouteID");
                cmd.Parameters.AddWithValue("@BranchID", BranchId);
                cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate).AddDays(-1));
                cmd.Parameters.AddWithValue("@endtime", GetHighDate(ToDate).AddDays(-1));
                dtble = vdbmngr.SelectQuery(cmd).Tables[0];
            }
            List<LineChartValuesclass> LineChartValuelist = new List<LineChartValuesclass>();
            foreach (DataRow dr in dtble.Rows)
            {
                LineChartValuesclass getLineChart = new LineChartValuesclass();
                getLineChart.BranchName = dr["BranchName"].ToString(); ;
                if (BranchId == "8009" || BranchId == "8012" || BranchId == "8013")
                {
                    getLineChart.BranchID = dr["branch_id"].ToString();
                }
                else
                {
                    getLineChart.BranchID = dr["sno"].ToString();
                }
                getLineChart.type = type;
                if (dr["salevalue"].ToString() != "")
                {
                    CultureInfo hindi = new CultureInfo("hi-IN");
                    decimal DeliveryQty = decimal.Parse(dr["salevalue"].ToString(), CultureInfo.InvariantCulture);
                    getLineChart.dispatchqty = string.Format(hindi, "{0:#,#}", DeliveryQty);
                }
                else
                {
                    getLineChart.dispatchqty = "0";
                }

                LineChartValuelist.Add(getLineChart);
            }
            string respnceString = GetJson(LineChartValuelist);
            context.Response.Write(respnceString);
        }
        catch
        {
        }
    }
    private void Route_Wise_SaleValue(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            string BranchId = context.Request["BranchId"];
            DateTime ServerDateCurrentdate = VehicleDBMgr.GetTime(vdbmngr.conn);
            string s = context.Session["IndDate"].ToString();
            var dt = DateTime.ParseExact(s, "ddd MMM dd yyyy HH:mm:ss 'GMT'zzz", System.Globalization.CultureInfo.InvariantCulture);
            string Fdate = dt.ToString("yyyy-MM-dd");
            DateTime FromDate = Convert.ToDateTime(Fdate);
            string e = context.Session["Todate"].ToString();
            var edt = DateTime.ParseExact(e, "ddd MMM dd yyyy HH:mm:ss 'GMT'zzz", System.Globalization.CultureInfo.InvariantCulture);
            string Tdate = edt.ToString("yyyy-MM-dd");
            DateTime ToDate = Convert.ToDateTime(Tdate);
            string SalesType = context.Session["salestype"].ToString();
            DataTable dtble = new DataTable();
            if (SalesType == "Plant")
            {
                cmd = new MySqlCommand("SELECT    modifiedroutes.RouteName, Round(SUM(indents_subtable.DeliveryQty),0) AS saleQty, Round(SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost),2) AS salevalue, modifiedroutes.Sno AS routeid, modifidroutssubtab.BranchID AS bid, branchdata_1.sno AS BranchID, branchdata_2.SalesType AS SalesTypeId FROM  branchdata branchdata_2 RIGHT OUTER JOIN branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT  RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo ON  branchdata_2.sno = modifidroutssubtab.BranchID LEFT OUTER JOIN indents_subtable INNER JOIN (SELECT  IndentNo, I_date, Branch_id FROM  indents WHERE  (I_date BETWEEN @starttime AND @endtime)) indt ON indents_subtable.IndentNo = indt.IndentNo ON  modifidroutssubtab.BranchID = indt.Branch_id INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno WHERE  (branchdata.SalesType IS NOT NULL) AND (indents_subtable.DeliveryQty <> 0) AND (modifiedroutes.BranchID = @BranchID) GROUP BY modifiedroutes.Sno ORDER BY branchdata_2.RouteID, branchdata_2.RouteID");
                cmd.Parameters.AddWithValue("@BranchID", BranchId);
                cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate).AddDays(-1));
                cmd.Parameters.AddWithValue("@endtime", GetHighDate(ToDate).AddDays(-1));
                dtble = vdbmngr.SelectQuery(cmd).Tables[0];
            }
            else
            {
                cmd = new MySqlCommand("SELECT     modifiedroutes.RouteName As BranchName, Round(SUM(indents_subtable.DeliveryQty),0) AS saleQty, Round(SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost),2) AS salevalue, modifiedroutes.Sno AS R, modifidroutssubtab.BranchID AS routeid, branchdata_2.BranchName AS RouteName, branchdata_2.flag, branchdata_1.sno AS bid,  branchdata_2.SalesType AS SalesTypeId FROM  branchdata branchdata_2 RIGHT OUTER JOIN branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT   RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo ON  branchdata_2.sno = modifidroutssubtab.BranchID LEFT OUTER JOIN indents_subtable INNER JOIN (SELECT  IndentNo, I_date, Branch_id FROM   indents WHERE  (I_date BETWEEN @starttime AND @endtime)) indt ON indents_subtable.IndentNo = indt.IndentNo ON  modifidroutssubtab.BranchID = indt.Branch_id INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno WHERE  (branchdata.SalesType IS NOT NULL) AND (indents_subtable.DeliveryQty <> 0) AND (modifiedroutes.Sno = @BranchID) GROUP BY modifidroutssubtab.BranchID ORDER BY branchdata_2.RouteID, branchdata_2.RouteID");
                cmd.Parameters.AddWithValue("@BranchID", BranchId);
                cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate).AddDays(-1));
                cmd.Parameters.AddWithValue("@endtime", GetHighDate(ToDate).AddDays(-1));
                dtble = vdbmngr.SelectQuery(cmd).Tables[0];
            }
            List<LineChartValuesclass> LineChartValuelist = new List<LineChartValuesclass>();
            foreach (DataRow dr in dtble.Rows)
            {
                LineChartValuesclass getLineChart = new LineChartValuesclass();
                getLineChart.BranchName = dr["RouteName"].ToString(); ;
                getLineChart.BranchID = dr["routeid"].ToString();
                CultureInfo hindi = new CultureInfo("hi-IN");
                if (dr["salevalue"].ToString() != "")
                {
                    decimal DeliveryQty = decimal.Parse(dr["salevalue"].ToString(), CultureInfo.InvariantCulture);
                    getLineChart.dispatchqty = string.Format(hindi, "{0:#,#}", DeliveryQty);
                }
                else
                {
                    getLineChart.dispatchqty = "0";
                }

                if (dr["saleQty"].ToString() != "")
                {
                    decimal SaleQty = decimal.Parse(dr["saleQty"].ToString(), CultureInfo.InvariantCulture);
                    getLineChart.SaleQty = string.Format(hindi, "{0:#,#}", SaleQty);
                }
                else
                {
                    getLineChart.SaleQty = "0";
                }

                LineChartValuelist.Add(getLineChart);
            }
            string respnceString = GetJson(LineChartValuelist);
            context.Response.Write(respnceString);
        }
        catch
        {
        }
    }
    private void Agent_Wise_SaleValue(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            string BranchId = context.Request["BranchId"];
            DateTime ServerDateCurrentdate = VehicleDBMgr.GetTime(vdbmngr.conn);
            string s = context.Session["IndDate"].ToString();
            var dt = DateTime.ParseExact(s, "ddd MMM dd yyyy HH:mm:ss 'GMT'zzz", System.Globalization.CultureInfo.InvariantCulture);
            string Fdate = dt.ToString("yyyy-MM-dd");
            DateTime FromDate = Convert.ToDateTime(Fdate);
            string e = context.Session["Todate"].ToString();
            var edt = DateTime.ParseExact(e, "ddd MMM dd yyyy HH:mm:ss 'GMT'zzz", System.Globalization.CultureInfo.InvariantCulture);
            string Tdate = edt.ToString("yyyy-MM-dd");
            DateTime ToDate = Convert.ToDateTime(Tdate);
            string SalesType = context.Session["salestype"].ToString();
            cmd = new MySqlCommand("SELECT     modifiedroutes.RouteName, Round(SUM(indents_subtable.DeliveryQty),0) AS saleQty, Round(SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost),2) AS salevalue, modifiedroutes.Sno AS routeid, modifidroutssubtab.BranchID AS bid, branchdata_2.BranchName, branchdata_2.flag, branchdata_1.sno AS BranchID,  branchdata_2.SalesType AS SalesTypeId FROM  branchdata branchdata_2 RIGHT OUTER JOIN branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT   RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo ON  branchdata_2.sno = modifidroutssubtab.BranchID LEFT OUTER JOIN indents_subtable INNER JOIN (SELECT  IndentNo, I_date, Branch_id FROM   indents WHERE  (I_date BETWEEN @starttime AND @endtime)) indt ON indents_subtable.IndentNo = indt.IndentNo ON  modifidroutssubtab.BranchID = indt.Branch_id INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno WHERE  (branchdata.SalesType IS NOT NULL) AND (indents_subtable.DeliveryQty <> 0) AND (modifiedroutes.Sno = @BranchID) GROUP BY modifidroutssubtab.BranchID ORDER BY branchdata_2.RouteID, branchdata_2.RouteID");
            cmd.Parameters.AddWithValue("@BranchID", BranchId);
            cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate).AddDays(-1));
            cmd.Parameters.AddWithValue("@endtime", GetHighDate(ToDate).AddDays(-1));
            DataTable dtble = vdbmngr.SelectQuery(cmd).Tables[0];
            List<LineChartValuesclass> LineChartValuelist = new List<LineChartValuesclass>();
            foreach (DataRow dr in dtble.Rows)
            {
                LineChartValuesclass getLineChart = new LineChartValuesclass();

                getLineChart.BranchName = dr["BranchName"].ToString(); ;
                getLineChart.BranchID = dr["BranchID"].ToString();
                CultureInfo hindi = new CultureInfo("hi-IN");
                if (dr["salevalue"].ToString() != "")
                {
                    decimal DeliveryQty = decimal.Parse(dr["salevalue"].ToString(), CultureInfo.InvariantCulture);
                    getLineChart.dispatchqty = string.Format(hindi, "{0:#,#}", DeliveryQty);
                }
                else
                {
                    getLineChart.dispatchqty = "0";
                }

                if (dr["saleQty"].ToString() != "")
                {
                    decimal SaleQty = decimal.Parse(dr["saleQty"].ToString(), CultureInfo.InvariantCulture);
                    getLineChart.SaleQty = string.Format(hindi, "{0:#,#}", SaleQty);
                }
                else
                {
                    getLineChart.SaleQty = "0";
                }

                LineChartValuelist.Add(getLineChart);
            }
            string respnceString = GetJson(LineChartValuelist);
            context.Response.Write(respnceString);
        }
        catch
        {
        }
    }
    private void Branch_Wise_Collection(HttpContext context)
    {
        try
        {
            DataTable Report = new DataTable();
            Report.Columns.Add("Branchid");
            Report.Columns.Add("BranchName");
            Report.Columns.Add("Amount");
            vdbmngr = new VehicleDBMgr();
            string Branch_Id = context.Request["BranchId"];
            string BranchId = "";
            if (Branch_Id != null)
            {
                BranchId = Branch_Id;
            }
            else
            {
                BranchId = context.Session["ClickedBranchid"].ToString();
            }
            DateTime ServerDateCurrentdate = VehicleDBMgr.GetTime(vdbmngr.conn);
            string s = context.Session["IndDate"].ToString();
            var dt = DateTime.ParseExact(s, "ddd MMM dd yyyy HH:mm:ss 'GMT'zzz", System.Globalization.CultureInfo.InvariantCulture);
            string Fdate = dt.ToString("yyyy-MM-dd");
            DateTime FromDate = Convert.ToDateTime(Fdate);
            string e = context.Session["Todate"].ToString();
            var edt = DateTime.ParseExact(e, "ddd MMM dd yyyy HH:mm:ss 'GMT'zzz", System.Globalization.CultureInfo.InvariantCulture);
            string Tdate = edt.ToString("yyyy-MM-dd");
            DateTime ToDate = Convert.ToDateTime(Tdate);
            DataTable dtble = new DataTable();
            string SalesType = context.Session["salestype"].ToString();
            DataTable dtGroupBranchCollection = new DataTable();
            string type = "";
            if (BranchId == "8009")
            {
                type = "GroupWise";
                cmd = new MySqlCommand("SELECT  branchmappingtable.SubBranch, branchmappingtable.SuperBranch, branchmappingtable.SubBranch AS Expr1, branchdata.BranchName,branchdata.SalesType FROM  branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno WHERE  (branchmappingtable.SuperBranch = @Branchid) GROUP BY branchmappingtable.SubBranch");
                cmd.Parameters.AddWithValue("@Branchid", BranchId);
                DataTable BtGroupBranches = vdbmngr.SelectQuery(cmd).Tables[0];
                foreach (DataRow drgrbranch in BtGroupBranches.Rows)
                {
                    if (drgrbranch["SubBranch"].ToString() == "172")
                    {
                        cmd = new MySqlCommand("SELECT    branchmappingtable.SuperBranch As SubBranch, ROUND(SUM(colltion.AmountPaid) / 2, 2) AS AmountPaid,branchdata.BranchName FROM  branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch INNER JOIN branchdata ON branchmappingtable.SuperBranch = branchdata.sno INNER JOIN modifiedroutes ON branchmappingtable.SubBranch = modifiedroutes.BranchID INNER JOIN (SELECT  RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo INNER JOIN (SELECT  Branchid, AmountPaid, PaidDate FROM  collections WHERE (PaymentType <> 'Incentive') AND (PaymentType <> 'Bank Transfer') AND (PaymentType <> 'Cheque') AND (PaidDate BETWEEN @d1 AND @d2)) colltion ON modifidroutssubtab.BranchID = colltion.Branchid WHERE (branchmappingtable.SuperBranch = @BranchId) AND (branchmappingtable.SubBranch NOT IN (538,  1801, 3625)) GROUP BY branchmappingtable.SuperBranch");
                        cmd.Parameters.AddWithValue("@BranchID", drgrbranch["SubBranch"].ToString());
                        cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate));
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate));
                        dtGroupBranchCollection = vdbmngr.SelectQuery(cmd).Tables[0];
                    }
                    else if (drgrbranch["SubBranch"].ToString() == "3625")
                    {
                        cmd = new MySqlCommand("SELECT    branchmappingtable.SuperBranch As SubBranch, ROUND(SUM(colltion.AmountPaid) / 2, 2) AS AmountPaid,branchdata.BranchName FROM  branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch INNER JOIN branchdata ON branchmappingtable.SuperBranch = branchdata.sno INNER JOIN modifiedroutes ON branchmappingtable.SubBranch = modifiedroutes.BranchID INNER JOIN (SELECT  RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo INNER JOIN (SELECT  Branchid, AmountPaid, PaidDate FROM  collections WHERE (PaymentType <> 'Incentive') AND (PaymentType <> 'Bank Transfer') AND (PaymentType <> 'Cheque') AND (PaidDate BETWEEN @d1 AND @d2)) colltion ON modifidroutssubtab.BranchID = colltion.Branchid WHERE (branchmappingtable.SuperBranch = @BranchId) AND (branchmappingtable.SubBranch IN (4609, 3625)) GROUP BY branchmappingtable.SuperBranch");
                        cmd.Parameters.AddWithValue("@BranchID", drgrbranch["SubBranch"].ToString());
                        cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate));
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate));
                        dtGroupBranchCollection = vdbmngr.SelectQuery(cmd).Tables[0];
                    }
                    else if (drgrbranch["SubBranch"].ToString() == "1801")
                    {
                        cmd = new MySqlCommand("SELECT    branchmappingtable.SuperBranch As SubBranch, ROUND(SUM(colltion.AmountPaid) / 4, 2) AS AmountPaid,branchdata.BranchName FROM  branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch INNER JOIN branchdata ON branchmappingtable.SuperBranch = branchdata.sno INNER JOIN modifiedroutes ON branchmappingtable.SubBranch = modifiedroutes.BranchID INNER JOIN (SELECT  RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo INNER JOIN (SELECT  Branchid, AmountPaid, PaidDate FROM  collections WHERE (PaymentType <> 'Incentive') AND (PaymentType <> 'Bank Transfer') AND (PaymentType <> 'Cheque') AND (PaidDate BETWEEN @d1 AND @d2)) colltion ON modifidroutssubtab.BranchID = colltion.Branchid WHERE (branchmappingtable.SuperBranch = @BranchId)  GROUP BY branchmappingtable.SuperBranch");
                        cmd.Parameters.AddWithValue("@BranchID", drgrbranch["SubBranch"].ToString());
                        cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate));
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate));
                        dtGroupBranchCollection = vdbmngr.SelectQuery(cmd).Tables[0];
                    }
                    else if (drgrbranch["SubBranch"].ToString() == "158" || drgrbranch["SubBranch"].ToString() == "4626")
                    {
                        cmd = new MySqlCommand("SELECT    branchmappingtable.SuperBranch As SubBranch, ROUND(SUM(colltion.AmountPaid) / 2, 2) AS AmountPaid,branchdata.BranchName FROM  branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch INNER JOIN branchdata ON branchmappingtable.SuperBranch = branchdata.sno INNER JOIN modifiedroutes ON branchmappingtable.SubBranch = modifiedroutes.BranchID INNER JOIN (SELECT  RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo INNER JOIN (SELECT  Branchid, AmountPaid, PaidDate FROM  collections WHERE (PaymentType <> 'Incentive') AND (PaymentType <> 'Bank Transfer') AND (PaymentType <> 'Cheque') AND (PaidDate BETWEEN @d1 AND @d2)) colltion ON modifidroutssubtab.BranchID = colltion.Branchid WHERE (branchmappingtable.SuperBranch = @BranchId)  GROUP BY branchmappingtable.SuperBranch");
                        cmd.Parameters.AddWithValue("@BranchID", drgrbranch["SubBranch"].ToString());
                        cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate));
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate));
                        dtGroupBranchCollection = vdbmngr.SelectQuery(cmd).Tables[0];
                    }
                    dtble.Merge(dtGroupBranchCollection);
                }
            }
            else if (BranchId == "8012" || BranchId == "8013")
            {
                type = "CompanyWise";
                cmd = new MySqlCommand("SELECT  branchmappingtable.SubBranch, branchmappingtable.SuperBranch, branchmappingtable.SubBranch AS Expr1, branchdata.BranchName,branchdata.SalesType FROM  branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno WHERE  (branchmappingtable.SuperBranch = @Branchid) GROUP BY branchmappingtable.SubBranch");
                cmd.Parameters.AddWithValue("@Branchid", BranchId);
                DataTable BtGroupBranches = vdbmngr.SelectQuery(cmd).Tables[0];
                foreach (DataRow drgrbranch in BtGroupBranches.Rows)
                {
                    if (drgrbranch["SubBranch"].ToString() == "172")
                    {
                        cmd = new MySqlCommand("SELECT    branchmappingtable.SuperBranch As SubBranch, ROUND(SUM(colltion.AmountPaid) / 2, 2) AS AmountPaid,branchdata.BranchName FROM  branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch INNER JOIN branchdata ON branchmappingtable.SuperBranch = branchdata.sno INNER JOIN modifiedroutes ON branchmappingtable.SubBranch = modifiedroutes.BranchID INNER JOIN (SELECT  RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo INNER JOIN (SELECT  Branchid, AmountPaid, PaidDate FROM  collections WHERE (PaymentType <> 'Incentive') AND (PaymentType <> 'Bank Transfer') AND (PaymentType <> 'Cheque') AND (PaidDate BETWEEN @d1 AND @d2)) colltion ON modifidroutssubtab.BranchID = colltion.Branchid WHERE (branchmappingtable.SuperBranch = @BranchId) AND (branchmappingtable.SubBranch NOT IN (538,  1801, 3625)) GROUP BY branchmappingtable.SuperBranch");
                        cmd.Parameters.AddWithValue("@BranchID", drgrbranch["SubBranch"].ToString());
                        cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate));
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate));
                        dtGroupBranchCollection = vdbmngr.SelectQuery(cmd).Tables[0];
                    }
                    else if (drgrbranch["SubBranch"].ToString() == "3625")
                    {
                        cmd = new MySqlCommand("SELECT    branchmappingtable.SuperBranch As SubBranch, ROUND(SUM(colltion.AmountPaid) / 2, 2) AS AmountPaid,branchdata.BranchName FROM  branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch INNER JOIN branchdata ON branchmappingtable.SuperBranch = branchdata.sno INNER JOIN modifiedroutes ON branchmappingtable.SubBranch = modifiedroutes.BranchID INNER JOIN (SELECT  RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo INNER JOIN (SELECT  Branchid, AmountPaid, PaidDate FROM  collections WHERE (PaymentType <> 'Incentive') AND (PaymentType <> 'Bank Transfer') AND (PaymentType <> 'Cheque') AND (PaidDate BETWEEN @d1 AND @d2)) colltion ON modifidroutssubtab.BranchID = colltion.Branchid WHERE (branchmappingtable.SuperBranch = @BranchId) AND (branchmappingtable.SubBranch IN (4609, 3625)) GROUP BY branchmappingtable.SuperBranch");
                        cmd.Parameters.AddWithValue("@BranchID", drgrbranch["SubBranch"].ToString());
                        cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate));
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate));
                        dtGroupBranchCollection = vdbmngr.SelectQuery(cmd).Tables[0];
                    }
                    else if (drgrbranch["SubBranch"].ToString() == "1801")
                    {
                        cmd = new MySqlCommand("SELECT    branchmappingtable.SuperBranch As SubBranch, ROUND(SUM(colltion.AmountPaid) / 4, 2) AS AmountPaid,branchdata.BranchName FROM  branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch INNER JOIN branchdata ON branchmappingtable.SuperBranch = branchdata.sno INNER JOIN modifiedroutes ON branchmappingtable.SubBranch = modifiedroutes.BranchID INNER JOIN (SELECT  RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo INNER JOIN (SELECT  Branchid, AmountPaid, PaidDate FROM  collections WHERE (PaymentType <> 'Incentive') AND (PaymentType <> 'Bank Transfer') AND (PaymentType <> 'Cheque') AND (PaidDate BETWEEN @d1 AND @d2)) colltion ON modifidroutssubtab.BranchID = colltion.Branchid WHERE (branchmappingtable.SuperBranch = @BranchId)  GROUP BY branchmappingtable.SuperBranch");
                        cmd.Parameters.AddWithValue("@BranchID", drgrbranch["SubBranch"].ToString());
                        cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate));
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate));
                        dtGroupBranchCollection = vdbmngr.SelectQuery(cmd).Tables[0];
                    }
                    else if (drgrbranch["SubBranch"].ToString() == "158" || drgrbranch["SubBranch"].ToString() == "4626")
                    {
                        cmd = new MySqlCommand("SELECT    branchmappingtable.SuperBranch As SubBranch, ROUND(SUM(colltion.AmountPaid) / 2, 2) AS AmountPaid,branchdata.BranchName FROM  branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch INNER JOIN branchdata ON branchmappingtable.SuperBranch = branchdata.sno INNER JOIN modifiedroutes ON branchmappingtable.SubBranch = modifiedroutes.BranchID INNER JOIN (SELECT  RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo INNER JOIN (SELECT  Branchid, AmountPaid, PaidDate FROM  collections WHERE (PaymentType <> 'Incentive') AND (PaymentType <> 'Bank Transfer') AND (PaymentType <> 'Cheque') AND (PaidDate BETWEEN @d1 AND @d2)) colltion ON modifidroutssubtab.BranchID = colltion.Branchid WHERE (branchmappingtable.SuperBranch = @BranchId)  GROUP BY branchmappingtable.SuperBranch");
                        cmd.Parameters.AddWithValue("@BranchID", drgrbranch["SubBranch"].ToString());
                        cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate));
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate));
                        dtGroupBranchCollection = vdbmngr.SelectQuery(cmd).Tables[0];
                    }
                    dtble.Merge(dtGroupBranchCollection);
                }
            }
            else if (SalesType == "Plant")
            {
                if (BranchId == "172")
                {
                    cmd = new MySqlCommand("SELECT    branchmappingtable.SubBranch, branchmappingtable.SuperBranch, SUM(colltion.AmountPaid) / 2 AS AmountPaid, branchdata.BranchName FROM  branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN modifiedroutes ON branchmappingtable.SubBranch = modifiedroutes.BranchID INNER JOIN (SELECT  RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo INNER JOIN (SELECT  Branchid, AmountPaid, PaidDate FROM  collections WHERE (PaymentType <> 'Incentive') AND (PaymentType <> 'Bank Transfer') AND (PaymentType <> 'Cheque') AND (PaidDate BETWEEN @d1 AND @d2)) colltion ON modifidroutssubtab.BranchID = colltion.Branchid WHERE (branchmappingtable.SuperBranch = @BranchId) AND (branchmappingtable.SubBranch NOT IN (538,  1801, 3625)) GROUP BY branchmappingtable.SubBranch,branchdata.BranchName");
                    cmd.Parameters.AddWithValue("@BranchID", BranchId);
                    cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate));
                    cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate));
                    cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate));
                    dtble = vdbmngr.SelectQuery(cmd).Tables[0];
                }
                else if (BranchId == "3625")
                {
                    cmd = new MySqlCommand("SELECT    branchmappingtable.SubBranch, branchmappingtable.SuperBranch, SUM(colltion.AmountPaid) / 2 AS AmountPaid, branchdata.BranchName FROM  branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN modifiedroutes ON branchmappingtable.SubBranch = modifiedroutes.BranchID INNER JOIN (SELECT  RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo INNER JOIN (SELECT  Branchid, AmountPaid, PaidDate FROM  collections WHERE (PaymentType <> 'Incentive') AND (PaymentType <> 'Bank Transfer') AND (PaymentType <> 'Cheque') AND (PaidDate BETWEEN @d1 AND @d2)) colltion ON modifidroutssubtab.BranchID = colltion.Branchid WHERE (branchmappingtable.SuperBranch = @BranchId) AND (branchmappingtable.SubBranch IN (4609, 3625)) GROUP BY branchmappingtable.SubBranch,branchdata.BranchName");
                    cmd.Parameters.AddWithValue("@BranchID", BranchId);
                    cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate));
                    cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate));
                    cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate));
                    dtble = vdbmngr.SelectQuery(cmd).Tables[0];
                }
                else if (BranchId == "1801")
                {
                    cmd = new MySqlCommand("SELECT    branchmappingtable.SubBranch, branchmappingtable.SuperBranch, SUM(colltion.AmountPaid) / 4 AS AmountPaid, branchdata.BranchName FROM  branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN modifiedroutes ON branchmappingtable.SubBranch = modifiedroutes.BranchID INNER JOIN (SELECT  RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo INNER JOIN (SELECT  Branchid, AmountPaid, PaidDate FROM  collections WHERE (PaymentType <> 'Incentive') AND (PaymentType <> 'Bank Transfer') AND (PaymentType <> 'Cheque') AND (PaidDate BETWEEN @d1 AND @d2)) colltion ON modifidroutssubtab.BranchID = colltion.Branchid WHERE (branchmappingtable.SuperBranch = @BranchId)  GROUP BY branchmappingtable.SubBranch,branchdata.BranchName");
                    cmd.Parameters.AddWithValue("@BranchID", BranchId);
                    cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate));
                    cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate));
                    cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate));
                    dtble = vdbmngr.SelectQuery(cmd).Tables[0];
                }
                else
                {
                    cmd = new MySqlCommand("SELECT    branchmappingtable.SubBranch, branchmappingtable.SuperBranch, SUM(colltion.AmountPaid) / 2 AS AmountPaid, branchdata.BranchName FROM  branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN modifiedroutes ON branchmappingtable.SubBranch = modifiedroutes.BranchID INNER JOIN (SELECT  RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo INNER JOIN (SELECT  Branchid, AmountPaid, PaidDate FROM  collections WHERE (PaymentType <> 'Incentive') AND (PaymentType <> 'Bank Transfer') AND (PaymentType <> 'Cheque') AND (PaidDate BETWEEN @d1 AND @d2)) colltion ON modifidroutssubtab.BranchID = colltion.Branchid WHERE (branchmappingtable.SuperBranch = @BranchId)  GROUP BY branchmappingtable.SubBranch,branchdata.BranchName");
                    cmd.Parameters.AddWithValue("@BranchID", BranchId);
                    cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate));
                    cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate));
                    cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate));
                    dtble = vdbmngr.SelectQuery(cmd).Tables[0];
                }
            }
            else
            {
                cmd = new MySqlCommand("SELECT   branchdata.BranchName As RouteName, branchdata.sno, modifiedroutes.RouteName As BranchName, modifidroutssubtab.BranchID, modifiedroutes.Sno AS SubBranch, Round(SUM(colltion.AmountPaid),2) AS AmountPaid FROM  branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT  RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo INNER JOIN (SELECT  Branchid, AmountPaid, PaidDate FROM  collections WHERE  (PaymentType <> 'Incentive') AND  (PaymentType <> 'Bank Transfer') AND (PaymentType <> 'Cheque') AND (PaidDate BETWEEN @d1 AND @d2)) colltion ON modifidroutssubtab.BranchID = colltion.Branchid WHERE  (branchdata.SalesType IS NOT NULL) AND (branchdata.sno = @BranchID) GROUP BY modifiedroutes.Sno ORDER BY branchdata.sno");
                cmd.Parameters.AddWithValue("@BranchID", BranchId);
                cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate));
                cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate));
                cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate));
                dtble = vdbmngr.SelectQuery(cmd).Tables[0];
            }
            List<LineChartValuesclass> LineChartValuelist = new List<LineChartValuesclass>();
            foreach (DataRow drr in dtble.Rows)
            {
                LineChartValuesclass getLineChart = new LineChartValuesclass();
                getLineChart.BranchName = drr["BranchName"].ToString(); ;
                getLineChart.BranchID = drr["SubBranch"].ToString();
                getLineChart.type = type;
                if (drr["AmountPaid"].ToString() != "")
                {
                    CultureInfo hindi = new CultureInfo("hi-IN");
                    decimal DeliveryQty = decimal.Parse(drr["AmountPaid"].ToString(), CultureInfo.InvariantCulture);
                    getLineChart.dispatchqty = string.Format(hindi, "{0:#,#}", DeliveryQty);
                }
                else
                {
                    getLineChart.dispatchqty = "0";
                }

                LineChartValuelist.Add(getLineChart);
            }
            string respnceString = GetJson(LineChartValuelist);
            context.Response.Write(respnceString);
        }
        catch
        {
        }
    }
    private void Route_Wise_Collection(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            string BranchId = context.Request["BranchId"];
            DateTime ServerDateCurrentdate = VehicleDBMgr.GetTime(vdbmngr.conn);
            string s = context.Session["IndDate"].ToString();
            var dt = DateTime.ParseExact(s, "ddd MMM dd yyyy HH:mm:ss 'GMT'zzz", System.Globalization.CultureInfo.InvariantCulture);
            string Fdate = dt.ToString("yyyy-MM-dd");
            DateTime FromDate = Convert.ToDateTime(Fdate);
            string e = context.Session["Todate"].ToString();
            var edt = DateTime.ParseExact(e, "ddd MMM dd yyyy HH:mm:ss 'GMT'zzz", System.Globalization.CultureInfo.InvariantCulture);
            string Tdate = edt.ToString("yyyy-MM-dd");
            DateTime ToDate = Convert.ToDateTime(Tdate);
            DataTable dtble = new DataTable();
            string SalesType = context.Session["salestype"].ToString();
            if (SalesType == "Plant")
            {
                if (BranchId == "3928")
                {
                    cmd = new MySqlCommand("SELECT   branchdata.BranchName, branchdata.sno, modifiedroutes.RouteName, modifidroutssubtab.BranchID, modifiedroutes.Sno AS routeid, Round(SUM(colltion.AmountPaid)/2,2) AS AmountPaid FROM  branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT  RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo INNER JOIN (SELECT  Branchid, AmountPaid, PaidDate FROM  collections WHERE  (PaymentType <> 'Incentive') AND  (PaymentType <> 'Bank Transfer') AND (PaymentType <> 'Cheque') AND (PaidDate BETWEEN @d1 AND @d2)) colltion ON modifidroutssubtab.BranchID = colltion.Branchid WHERE  (branchdata.SalesType IS NOT NULL) AND (branchdata.sno = @BranchID) GROUP BY modifiedroutes.Sno ORDER BY branchdata.sno");
                    cmd.Parameters.AddWithValue("@BranchID", BranchId);
                    cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate));
                    cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate));
                    cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate));
                    dtble = vdbmngr.SelectQuery(cmd).Tables[0];
                }
                else if (BranchId == "538")
                {
                    cmd = new MySqlCommand("SELECT   branchdata.BranchName, branchdata.sno, modifiedroutes.RouteName, modifidroutssubtab.BranchID, modifiedroutes.Sno AS routeid, Round(SUM(colltion.AmountPaid)/2,2) AS AmountPaid FROM  branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT  RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo INNER JOIN (SELECT  Branchid, AmountPaid, PaidDate FROM  collections WHERE  (PaymentType <> 'Incentive') AND  (PaymentType <> 'Bank Transfer') AND (PaymentType <> 'Cheque') AND (PaidDate BETWEEN @d1 AND @d2)) colltion ON modifidroutssubtab.BranchID = colltion.Branchid WHERE  (branchdata.SalesType IS NOT NULL) AND (branchdata.sno = @BranchID) GROUP BY modifiedroutes.Sno ORDER BY branchdata.sno");
                    cmd.Parameters.AddWithValue("@BranchID", BranchId);
                    cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate));
                    cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate));
                    cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate));
                    dtble = vdbmngr.SelectQuery(cmd).Tables[0];
                }
                else if (BranchId == "2749")
                {
                    cmd = new MySqlCommand("SELECT   branchdata.BranchName, branchdata.sno, modifiedroutes.RouteName, modifidroutssubtab.BranchID, modifiedroutes.Sno AS routeid, Round(SUM(colltion.AmountPaid)/2,2) AS AmountPaid FROM  branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT  RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo INNER JOIN (SELECT  Branchid, AmountPaid, PaidDate FROM  collections WHERE  (PaymentType <> 'Incentive') AND  (PaymentType <> 'Bank Transfer') AND (PaymentType <> 'Cheque') AND (PaidDate BETWEEN @d1 AND @d2)) colltion ON modifidroutssubtab.BranchID = colltion.Branchid WHERE  (branchdata.SalesType IS NOT NULL) AND (branchdata.sno = @BranchID) GROUP BY modifiedroutes.Sno ORDER BY branchdata.sno");
                    cmd.Parameters.AddWithValue("@BranchID", BranchId);
                    cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate));
                    cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate));
                    cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate));
                    dtble = vdbmngr.SelectQuery(cmd).Tables[0];
                }
                else
                {
                    cmd = new MySqlCommand("SELECT   branchdata.BranchName, branchdata.sno, modifiedroutes.RouteName, modifidroutssubtab.BranchID, modifiedroutes.Sno AS routeid, Round(SUM(colltion.AmountPaid),2) AS AmountPaid FROM  branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT  RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo INNER JOIN (SELECT  Branchid, AmountPaid, PaidDate FROM  collections WHERE  (PaymentType <> 'Incentive') AND  (PaymentType <> 'Bank Transfer') AND (PaymentType <> 'Cheque') AND (PaidDate BETWEEN @d1 AND @d2)) colltion ON modifidroutssubtab.BranchID = colltion.Branchid WHERE  (branchdata.SalesType IS NOT NULL) AND (branchdata.sno = @BranchID) GROUP BY modifiedroutes.Sno ORDER BY branchdata.sno");
                    cmd.Parameters.AddWithValue("@BranchID", BranchId);
                    cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate));
                    cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate));
                    cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate));
                    dtble = vdbmngr.SelectQuery(cmd).Tables[0];
                }
            }
            else
            {
                cmd = new MySqlCommand("SELECT    branchdata.sno As routeid, modifiedroutes.RouteName As BranchName, modifidroutssubtab.BranchID, modifiedroutes.Sno AS routesno, Round(SUM(colltion.AmountPaid),2) AS AmountPaid, branchdata_2.branchname As RouteName FROM branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT  RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo INNER JOIN (SELECT  Branchid, AmountPaid, PaidDate FROM  collections WHERE (PaymentType <> 'Incentive') AND  (PaymentType <> 'Bank Transfer') AND (PaymentType <> 'Cheque') AND (PaymentType <> 'DUE') AND (PaidDate BETWEEN @d1 AND @d2) AND (AmountPaid <> 0)) colltion ON  modifidroutssubtab.BranchID = colltion.Branchid INNER JOIN branchdata branchdata_2 ON branchdata_2.sno = modifidroutssubtab.BranchID WHERE  (modifiedroutes.Sno = @BranchID) GROUP BY modifidroutssubtab.BranchID ORDER BY branchdata.sno");
                cmd.Parameters.AddWithValue("@BranchID", BranchId);
                cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate));
                cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate));
                cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate));
                dtble = vdbmngr.SelectQuery(cmd).Tables[0];

            }
            List<LineChartValuesclass> LineChartValuelist = new List<LineChartValuesclass>();
            foreach (DataRow dr in dtble.Rows)
            {
                LineChartValuesclass getLineChart = new LineChartValuesclass();
                getLineChart.BranchName = dr["RouteName"].ToString(); ;
                getLineChart.BranchID = dr["routeid"].ToString();
                if (dr["AmountPaid"].ToString() != "")
                {
                    CultureInfo hindi = new CultureInfo("hi-IN");
                    decimal DeliveryQty = decimal.Parse(dr["AmountPaid"].ToString(), CultureInfo.InvariantCulture);
                    getLineChart.dispatchqty = string.Format(hindi, "{0:#,#}", DeliveryQty);
                }
                else
                {
                    getLineChart.dispatchqty = "0";
                }

                LineChartValuelist.Add(getLineChart);
            }
            string respnceString = GetJson(LineChartValuelist);
            context.Response.Write(respnceString);
        }
        catch
        {
        }
    }
    private void Agent_Wise_Collection(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            string BranchId = context.Request["BranchId"];
            DateTime ServerDateCurrentdate = VehicleDBMgr.GetTime(vdbmngr.conn);
            string s = context.Session["IndDate"].ToString();
            var dt = DateTime.ParseExact(s, "ddd MMM dd yyyy HH:mm:ss 'GMT'zzz", System.Globalization.CultureInfo.InvariantCulture);
            string Fdate = dt.ToString("yyyy-MM-dd");
            DateTime FromDate = Convert.ToDateTime(Fdate);
            string e = context.Session["Todate"].ToString();
            var edt = DateTime.ParseExact(e, "ddd MMM dd yyyy HH:mm:ss 'GMT'zzz", System.Globalization.CultureInfo.InvariantCulture);
            string Tdate = edt.ToString("yyyy-MM-dd");
            DateTime ToDate = Convert.ToDateTime(Tdate);
            cmd = new MySqlCommand("SELECT    branchdata.sno, modifiedroutes.RouteName, modifidroutssubtab.BranchID, modifiedroutes.Sno AS routesno, Round(SUM(colltion.AmountPaid),2) AS AmountPaid, branchdata_2.branchname FROM branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT  RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo INNER JOIN (SELECT  Branchid, AmountPaid, PaidDate FROM  collections WHERE (PaymentType <> 'Incentive') AND  (PaymentType <> 'Bank Transfer') AND (PaymentType <> 'Cheque') AND (PaymentType <> 'DUE') AND (PaidDate BETWEEN @d1 AND @d2) AND (AmountPaid <> 0)) colltion ON  modifidroutssubtab.BranchID = colltion.Branchid INNER JOIN branchdata branchdata_2 ON branchdata_2.sno = modifidroutssubtab.BranchID WHERE  (modifiedroutes.Sno = @BranchID) GROUP BY modifidroutssubtab.BranchID ORDER BY branchdata.sno");
            cmd.Parameters.AddWithValue("@BranchID", BranchId);
            cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate));
            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate));
            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate));
            DataTable dtble = vdbmngr.SelectQuery(cmd).Tables[0];
            List<LineChartValuesclass> LineChartValuelist = new List<LineChartValuesclass>();
            foreach (DataRow dr in dtble.Rows)
            {
                LineChartValuesclass getLineChart = new LineChartValuesclass();
                getLineChart.BranchName = dr["branchname"].ToString(); ;
                getLineChart.BranchID = dr["BranchID"].ToString();
                if (dr["AmountPaid"].ToString() != "")
                {
                    CultureInfo hindi = new CultureInfo("hi-IN");
                    decimal DeliveryQty = decimal.Parse(dr["AmountPaid"].ToString(), CultureInfo.InvariantCulture);
                    getLineChart.dispatchqty = string.Format(hindi, "{0:#,#}", DeliveryQty);
                }
                else
                {
                    getLineChart.dispatchqty = "0";
                }
                LineChartValuelist.Add(getLineChart);
            }
            string respnceString = GetJson(LineChartValuelist);
            context.Response.Write(respnceString);
        }
        catch
        {
        }
    }
    private void Branch_Wise_DueAmount(HttpContext context)
    {
        try
        {
            DataTable Report = new DataTable();
            Report.Columns.Add("Branchid");
            Report.Columns.Add("BranchName");
            Report.Columns.Add("SaleValue");
            Report.Columns.Add("Amount");
            Report.Columns.Add("DueValue");
            vdbmngr = new VehicleDBMgr();
            string Branch_Id = context.Request["BranchId"];
            string BranchId = "";
            if (Branch_Id != null)
            {
                BranchId = Branch_Id;
            }
            else
            {
                BranchId = context.Session["ClickedBranchid"].ToString();
            }
            DateTime ServerDateCurrentdate = VehicleDBMgr.GetTime(vdbmngr.conn);
            string s = context.Session["IndDate"].ToString();
            var dt = DateTime.ParseExact(s, "ddd MMM dd yyyy HH:mm:ss 'GMT'zzz", System.Globalization.CultureInfo.InvariantCulture);
            string Fdate = dt.ToString("yyyy-MM-dd");
            DateTime FromDate = Convert.ToDateTime(Fdate);
            string e = context.Session["Todate"].ToString();
            var edt = DateTime.ParseExact(e, "ddd MMM dd yyyy HH:mm:ss 'GMT'zzz", System.Globalization.CultureInfo.InvariantCulture);
            string Tdate = edt.ToString("yyyy-MM-dd");
            DateTime ToDate = Convert.ToDateTime(Tdate);
            DataTable dtble = new DataTable();
            string SalesType = context.Session["salestype"].ToString();
            DataTable dtbranchwisesale = new DataTable();
            DataTable dtGroupBranchCollection = new DataTable();
            string type = "";
            string type1 = "";
            if (BranchId == "8009")
            {
                cmd = new MySqlCommand("SELECT  branchmappingtable.SubBranch, branchmappingtable.SuperBranch, branchmappingtable.SubBranch AS Expr1, branchdata.BranchName,branchdata.SalesType FROM  branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno WHERE  (branchmappingtable.SuperBranch = @Branchid) GROUP BY branchmappingtable.SubBranch");
                cmd.Parameters.AddWithValue("@Branchid", BranchId);
                DataTable BtGroupBranches = vdbmngr.SelectQuery(cmd).Tables[0];
                foreach (DataRow drgrbranch in BtGroupBranches.Rows)
                {
                    if (drgrbranch["SubBranch"].ToString() == "172")
                    {
                        cmd = new MySqlCommand("SELECT    branchmappingtable.SuperBranch As SubBranch, ROUND(SUM(colltion.AmountPaid) / 2, 2) AS AmountPaid,branchdata.BranchName FROM  branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch INNER JOIN branchdata ON branchmappingtable.SuperBranch = branchdata.sno INNER JOIN modifiedroutes ON branchmappingtable.SubBranch = modifiedroutes.BranchID INNER JOIN (SELECT  RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo INNER JOIN (SELECT  Branchid, AmountPaid, PaidDate FROM  collections WHERE (PaymentType <> 'Incentive') AND (PaymentType <> 'Bank Transfer') AND (PaymentType <> 'Cheque') AND (PaidDate BETWEEN @d1 AND @d2)) colltion ON modifidroutssubtab.BranchID = colltion.Branchid WHERE (branchmappingtable.SuperBranch = @BranchId) AND (branchmappingtable.SubBranch NOT IN (538,  1801, 3625)) GROUP BY branchmappingtable.SuperBranch");
                        cmd.Parameters.AddWithValue("@BranchID", drgrbranch["SubBranch"].ToString());
                        cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate));
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate));
                        dtGroupBranchCollection = vdbmngr.SelectQuery(cmd).Tables[0];
                    }
                    else if (drgrbranch["SubBranch"].ToString() == "3625")
                    {
                        cmd = new MySqlCommand("SELECT    branchmappingtable.SuperBranch As SubBranch, ROUND(SUM(colltion.AmountPaid) / 2, 2) AS AmountPaid,branchdata.BranchName FROM  branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch INNER JOIN branchdata ON branchmappingtable.SuperBranch = branchdata.sno INNER JOIN modifiedroutes ON branchmappingtable.SubBranch = modifiedroutes.BranchID INNER JOIN (SELECT  RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo INNER JOIN (SELECT  Branchid, AmountPaid, PaidDate FROM  collections WHERE (PaymentType <> 'Incentive') AND (PaymentType <> 'Bank Transfer') AND (PaymentType <> 'Cheque') AND (PaidDate BETWEEN @d1 AND @d2)) colltion ON modifidroutssubtab.BranchID = colltion.Branchid WHERE (branchmappingtable.SuperBranch = @BranchId) AND (branchmappingtable.SubBranch IN (4609, 3625)) GROUP BY branchmappingtable.SuperBranch");
                        cmd.Parameters.AddWithValue("@BranchID", drgrbranch["SubBranch"].ToString());
                        cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate));
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate));
                        dtGroupBranchCollection = vdbmngr.SelectQuery(cmd).Tables[0];
                    }
                    else if (drgrbranch["SubBranch"].ToString() == "1801")
                    {
                        cmd = new MySqlCommand("SELECT    branchmappingtable.SuperBranch As SubBranch, ROUND(SUM(colltion.AmountPaid) / 2, 2) AS AmountPaid,branchdata.BranchName FROM  branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch INNER JOIN branchdata ON branchmappingtable.SuperBranch = branchdata.sno INNER JOIN modifiedroutes ON branchmappingtable.SubBranch = modifiedroutes.BranchID INNER JOIN (SELECT  RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo INNER JOIN (SELECT  Branchid, AmountPaid, PaidDate FROM  collections WHERE (PaymentType <> 'Incentive') AND (PaymentType <> 'Bank Transfer') AND (PaymentType <> 'Cheque') AND (PaidDate BETWEEN @d1 AND @d2)) colltion ON modifidroutssubtab.BranchID = colltion.Branchid WHERE (branchmappingtable.SuperBranch = @BranchId)  GROUP BY branchmappingtable.SuperBranch");
                        cmd.Parameters.AddWithValue("@BranchID", drgrbranch["SubBranch"].ToString());
                        cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate));
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate));
                        dtGroupBranchCollection = vdbmngr.SelectQuery(cmd).Tables[0];
                    }
                    else if (drgrbranch["SubBranch"].ToString() == "158" || drgrbranch["SubBranch"].ToString() == "4626")
                    {
                        cmd = new MySqlCommand("SELECT    branchmappingtable.SuperBranch As SubBranch, ROUND(SUM(colltion.AmountPaid) / 2, 2) AS AmountPaid,branchdata.BranchName FROM  branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch INNER JOIN branchdata ON branchmappingtable.SuperBranch = branchdata.sno INNER JOIN modifiedroutes ON branchmappingtable.SubBranch = modifiedroutes.BranchID INNER JOIN (SELECT  RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo INNER JOIN (SELECT  Branchid, AmountPaid, PaidDate FROM  collections WHERE (PaymentType <> 'Incentive') AND (PaymentType <> 'Bank Transfer') AND (PaymentType <> 'Cheque') AND (PaidDate BETWEEN @d1 AND @d2)) colltion ON modifidroutssubtab.BranchID = colltion.Branchid WHERE (branchmappingtable.SuperBranch = @BranchId)  GROUP BY branchmappingtable.SuperBranch");
                        cmd.Parameters.AddWithValue("@BranchID", drgrbranch["SubBranch"].ToString());
                        cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate));
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate));
                        dtGroupBranchCollection = vdbmngr.SelectQuery(cmd).Tables[0];
                    }
                    dtble.Merge(dtGroupBranchCollection);
                }
                cmd = new MySqlCommand("SELECT   TripInfo.Sno, TripInfo.DCNo, ROUND(SUM(ProductInfo.Qty), 2) AS DeliveryQty, ROUND(SUM(ProductInfo.UnitPrice * ProductInfo.Qty), 2) AS salevalue, TripInfo.I_Date, TripInfo.VehicleNo, TripInfo.Status, TripInfo.DispName, TripInfo.DispType, TripInfo.DispMode, TripInfo.BranchID, TripInfo.BranchName, TripInfo.Branch_Id FROM (SELECT   tripdata.Sno, tripdata.DCNo, tripdata.I_Date, tripdata.VehicleNo, tripdata.Status, dispatch.DispName, dispatch.DispType, dispatch.DispMode, dispatch.BranchID, branchdata_1.BranchName, dispatch.Branch_Id FROM  branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE (dispatch.GroupId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT Qty, UnitPrice, Sno FROM (SELECT   tripdata_1.Sno, tripsubdata.Qty, productsdata.UnitPrice FROM tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno INNER JOIN productsdata ON tripsubdata.ProductId = productsdata.sno WHERE (tripdata_1.AssignDate BETWEEN @d1 AND @d2)) TripSubInfo) ProductInfo ON TripInfo.Sno = ProductInfo.Sno GROUP BY TripInfo.Branch_Id");
                cmd.Parameters.AddWithValue("@branch", BranchId);
                cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-1));
                cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-1));
                dtbranchwisesale = vdbmngr.SelectQuery(cmd).Tables[0];
                type = "GroupWise";
            }
            else if (BranchId == "8012" || BranchId == "8013")
            {
                cmd = new MySqlCommand("SELECT  branchmappingtable.SubBranch, branchmappingtable.SuperBranch, branchmappingtable.SubBranch AS Expr1, branchdata.BranchName,branchdata.SalesType FROM  branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno WHERE  (branchmappingtable.SuperBranch = @Branchid) GROUP BY branchmappingtable.SubBranch");
                cmd.Parameters.AddWithValue("@Branchid", BranchId);
                DataTable BtGroupBranches = vdbmngr.SelectQuery(cmd).Tables[0];
                foreach (DataRow drgrbranch in BtGroupBranches.Rows)
                {
                    if (drgrbranch["SubBranch"].ToString() == "172")
                    {
                        cmd = new MySqlCommand("SELECT    branchmappingtable.SuperBranch As SubBranch, ROUND(SUM(colltion.AmountPaid) / 2, 2) AS AmountPaid,branchdata.BranchName FROM  branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch INNER JOIN branchdata ON branchmappingtable.SuperBranch = branchdata.sno INNER JOIN modifiedroutes ON branchmappingtable.SubBranch = modifiedroutes.BranchID INNER JOIN (SELECT  RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo INNER JOIN (SELECT  Branchid, AmountPaid, PaidDate FROM  collections WHERE (PaymentType <> 'Incentive') AND (PaymentType <> 'Bank Transfer') AND (PaymentType <> 'Cheque') AND (PaidDate BETWEEN @d1 AND @d2)) colltion ON modifidroutssubtab.BranchID = colltion.Branchid WHERE (branchmappingtable.SuperBranch = @BranchId) AND (branchmappingtable.SubBranch NOT IN (538,  1801, 3625)) GROUP BY branchmappingtable.SuperBranch");
                        cmd.Parameters.AddWithValue("@BranchID", drgrbranch["SubBranch"].ToString());
                        cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate));
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate));
                        dtGroupBranchCollection = vdbmngr.SelectQuery(cmd).Tables[0];
                    }
                    else if (drgrbranch["SubBranch"].ToString() == "3625")
                    {
                        cmd = new MySqlCommand("SELECT    branchmappingtable.SuperBranch As SubBranch, ROUND(SUM(colltion.AmountPaid) / 2, 2) AS AmountPaid,branchdata.BranchName FROM  branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch INNER JOIN branchdata ON branchmappingtable.SuperBranch = branchdata.sno INNER JOIN modifiedroutes ON branchmappingtable.SubBranch = modifiedroutes.BranchID INNER JOIN (SELECT  RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo INNER JOIN (SELECT  Branchid, AmountPaid, PaidDate FROM  collections WHERE (PaymentType <> 'Incentive') AND (PaymentType <> 'Bank Transfer') AND (PaymentType <> 'Cheque') AND (PaidDate BETWEEN @d1 AND @d2)) colltion ON modifidroutssubtab.BranchID = colltion.Branchid WHERE (branchmappingtable.SuperBranch = @BranchId) AND (branchmappingtable.SubBranch IN (4609, 3625)) GROUP BY branchmappingtable.SuperBranch");
                        cmd.Parameters.AddWithValue("@BranchID", drgrbranch["SubBranch"].ToString());
                        cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate));
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate));
                        dtGroupBranchCollection = vdbmngr.SelectQuery(cmd).Tables[0];
                    }
                    else if (drgrbranch["SubBranch"].ToString() == "1801")
                    {
                        cmd = new MySqlCommand("SELECT    branchmappingtable.SuperBranch As SubBranch, ROUND(SUM(colltion.AmountPaid) / 2, 2) AS AmountPaid,branchdata.BranchName FROM  branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch INNER JOIN branchdata ON branchmappingtable.SuperBranch = branchdata.sno INNER JOIN modifiedroutes ON branchmappingtable.SubBranch = modifiedroutes.BranchID INNER JOIN (SELECT  RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo INNER JOIN (SELECT  Branchid, AmountPaid, PaidDate FROM  collections WHERE (PaymentType <> 'Incentive') AND (PaymentType <> 'Bank Transfer') AND (PaymentType <> 'Cheque') AND (PaidDate BETWEEN @d1 AND @d2)) colltion ON modifidroutssubtab.BranchID = colltion.Branchid WHERE (branchmappingtable.SuperBranch = @BranchId)  GROUP BY branchmappingtable.SuperBranch");
                        cmd.Parameters.AddWithValue("@BranchID", drgrbranch["SubBranch"].ToString());
                        cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate));
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate));
                        dtGroupBranchCollection = vdbmngr.SelectQuery(cmd).Tables[0];
                    }
                    else if (drgrbranch["SubBranch"].ToString() == "158" || drgrbranch["SubBranch"].ToString() == "4626")
                    {
                        cmd = new MySqlCommand("SELECT    branchmappingtable.SuperBranch As SubBranch, ROUND(SUM(colltion.AmountPaid) / 2, 2) AS AmountPaid,branchdata.BranchName FROM  branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch INNER JOIN branchdata ON branchmappingtable.SuperBranch = branchdata.sno INNER JOIN modifiedroutes ON branchmappingtable.SubBranch = modifiedroutes.BranchID INNER JOIN (SELECT  RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo INNER JOIN (SELECT  Branchid, AmountPaid, PaidDate FROM  collections WHERE (PaymentType <> 'Incentive') AND (PaymentType <> 'Bank Transfer') AND (PaymentType <> 'Cheque') AND (PaidDate BETWEEN @d1 AND @d2)) colltion ON modifidroutssubtab.BranchID = colltion.Branchid WHERE (branchmappingtable.SuperBranch = @BranchId)  GROUP BY branchmappingtable.SuperBranch");
                        cmd.Parameters.AddWithValue("@BranchID", drgrbranch["SubBranch"].ToString());
                        cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate));
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate));
                        dtGroupBranchCollection = vdbmngr.SelectQuery(cmd).Tables[0];
                    }
                    dtble.Merge(dtGroupBranchCollection);
                }
                cmd = new MySqlCommand("SELECT   TripInfo.Sno, TripInfo.DCNo, ROUND(SUM(ProductInfo.Qty), 2) AS DeliveryQty, ROUND(SUM(ProductInfo.UnitPrice * ProductInfo.Qty), 2) AS salevalue, TripInfo.I_Date, TripInfo.VehicleNo, TripInfo.Status, TripInfo.DispName, TripInfo.DispType, TripInfo.DispMode, TripInfo.BranchID, TripInfo.BranchName, TripInfo.Branch_Id FROM (SELECT   tripdata.Sno, tripdata.DCNo, tripdata.I_Date, tripdata.VehicleNo, tripdata.Status, dispatch.DispName, dispatch.DispType, dispatch.DispMode, dispatch.BranchID, branchdata_1.BranchName, dispatch.Branch_Id FROM  branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE (dispatch.CompanyId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT Qty, UnitPrice, Sno FROM (SELECT   tripdata_1.Sno, tripsubdata.Qty, productsdata.UnitPrice FROM tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno INNER JOIN productsdata ON tripsubdata.ProductId = productsdata.sno WHERE (tripdata_1.AssignDate BETWEEN @d1 AND @d2)) TripSubInfo) ProductInfo ON TripInfo.Sno = ProductInfo.Sno GROUP BY TripInfo.Branch_Id");
                cmd.Parameters.AddWithValue("@branch", BranchId);
                cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-1));
                cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-1));
                dtbranchwisesale = vdbmngr.SelectQuery(cmd).Tables[0];
                type = "CompanyWise";
            }
            else if (SalesType == "Plant")
            {
                if (BranchId == "172")
                {
                    cmd = new MySqlCommand("SELECT    branchmappingtable.SubBranch, branchmappingtable.SuperBranch, ROUND(SUM(colltion.AmountPaid) / 2,2) AS AmountPaid, branchdata.BranchName FROM  branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN modifiedroutes ON branchmappingtable.SubBranch = modifiedroutes.BranchID INNER JOIN (SELECT  RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo INNER JOIN (SELECT  Branchid, AmountPaid, PaidDate FROM  collections WHERE (PaymentType <> 'Incentive') AND (PaymentType <> 'Bank Transfer') AND (PaymentType <> 'Cheque') AND (PaidDate BETWEEN @d1 AND @d2)) colltion ON modifidroutssubtab.BranchID = colltion.Branchid WHERE (branchmappingtable.SuperBranch = @BranchId) AND (branchmappingtable.SubBranch NOT IN (538,  1801, 3625)) GROUP BY branchmappingtable.SubBranch,branchdata.BranchName");
                    cmd.Parameters.AddWithValue("@BranchID", BranchId);
                    cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate));
                    cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate));
                    cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate));
                    dtble = vdbmngr.SelectQuery(cmd).Tables[0];
                }
                else if (BranchId == "3625")
                {
                    cmd = new MySqlCommand("SELECT    branchmappingtable.SubBranch, branchmappingtable.SuperBranch, ROUND(SUM(colltion.AmountPaid) / 2,2) AS AmountPaid, branchdata.BranchName FROM  branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN modifiedroutes ON branchmappingtable.SubBranch = modifiedroutes.BranchID INNER JOIN (SELECT  RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo INNER JOIN (SELECT  Branchid, AmountPaid, PaidDate FROM  collections WHERE (PaymentType <> 'Incentive') AND (PaymentType <> 'Bank Transfer') AND (PaymentType <> 'Cheque') AND (PaidDate BETWEEN @d1 AND @d2)) colltion ON modifidroutssubtab.BranchID = colltion.Branchid WHERE (branchmappingtable.SuperBranch = @BranchId) AND (branchmappingtable.SubBranch IN (4609, 3625)) GROUP BY branchmappingtable.SubBranch,branchdata.BranchName");
                    cmd.Parameters.AddWithValue("@BranchID", BranchId);
                    cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate));
                    cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate));
                    cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate));
                    dtble = vdbmngr.SelectQuery(cmd).Tables[0];
                }
                else if (BranchId == "1801")
                {
                    cmd = new MySqlCommand("SELECT    branchmappingtable.SubBranch, branchmappingtable.SuperBranch, ROUND(SUM(colltion.AmountPaid) / 2,2) AS AmountPaid, branchdata.BranchName FROM  branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN modifiedroutes ON branchmappingtable.SubBranch = modifiedroutes.BranchID INNER JOIN (SELECT  RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo INNER JOIN (SELECT  Branchid, AmountPaid, PaidDate FROM  collections WHERE (PaymentType <> 'Incentive') AND (PaymentType <> 'Bank Transfer') AND (PaymentType <> 'Cheque') AND (PaidDate BETWEEN @d1 AND @d2)) colltion ON modifidroutssubtab.BranchID = colltion.Branchid WHERE (branchmappingtable.SuperBranch = @BranchId)  GROUP BY branchmappingtable.SubBranch,branchdata.BranchName");
                    cmd.Parameters.AddWithValue("@BranchID", BranchId);
                    cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate));
                    cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate));
                    cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate));
                    dtble = vdbmngr.SelectQuery(cmd).Tables[0];
                }
                else
                {
                    cmd = new MySqlCommand("SELECT    branchmappingtable.SubBranch, branchmappingtable.SuperBranch, ROUND(SUM(colltion.AmountPaid) / 2,2) AS AmountPaid, branchdata.BranchName FROM  branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN modifiedroutes ON branchmappingtable.SubBranch = modifiedroutes.BranchID INNER JOIN (SELECT  RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo INNER JOIN (SELECT  Branchid, AmountPaid, PaidDate FROM  collections WHERE (PaymentType <> 'Incentive') AND (PaymentType <> 'Bank Transfer') AND (PaymentType <> 'Cheque') AND (PaidDate BETWEEN @d1 AND @d2)) colltion ON modifidroutssubtab.BranchID = colltion.Branchid WHERE (branchmappingtable.SuperBranch = @BranchId)  GROUP BY branchmappingtable.SubBranch,branchdata.BranchName");
                    cmd.Parameters.AddWithValue("@BranchID", BranchId);
                    cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate));
                    cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate));
                    cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate));
                    dtble = vdbmngr.SelectQuery(cmd).Tables[0];
                }
                cmd = new MySqlCommand("SELECT  branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty),2) AS SaleValue, branchdata.sno FROM  branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (branchmappingtable.SuperBranch = @BranchID) AND (indents.I_date BETWEEN @d1 AND @d2) GROUP BY branchdata.sno");
                cmd.Parameters.AddWithValue("@BranchID", BranchId);
                cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-1));
                cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-1));
                dtbranchwisesale = vdbmngr.SelectQuery(cmd).Tables[0];
            }
            else
            {
                cmd = new MySqlCommand("SELECT   modifiedroutes.RouteName, SUM(indents_subtable.DeliveryQty) AS saleQty, SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost) AS salevalue, modifiedroutes.Sno AS routeid, modifidroutssubtab.BranchID AS bid, branchdata_2.BranchName, branchdata_2.flag, branchdata_1.sno AS BranchID, branchdata_2.SalesType AS SalesTypeId FROM branchdata branchdata_2 RIGHT OUTER JOIN branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT  RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo ON  branchdata_2.sno = modifidroutssubtab.BranchID LEFT OUTER JOIN indents_subtable INNER JOIN (SELECT  IndentNo, I_date, Branch_id FROM   indents WHERE  (I_date BETWEEN @starttime AND @endtime)) indt ON indents_subtable.IndentNo = indt.IndentNo ON  modifidroutssubtab.BranchID = indt.Branch_id WHERE   (branchdata.SalesType IS NOT NULL) AND (indents_subtable.DeliveryQty <> 0) AND (branchdata.sno = @BranchID) GROUP BY modifidroutssubtab.BranchID ORDER BY branchdata.sno, branchdata_2.RouteID");
                cmd.Parameters.AddWithValue("@SOID", BranchId);
                cmd.Parameters.AddWithValue("@BranchID", BranchId);
                cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate.AddDays(-1)));
                cmd.Parameters.AddWithValue("@endtime", GetHighDate(ToDate.AddDays(-1)));
                dtbranchwisesale = vdbmngr.SelectQuery(cmd).Tables[0];
                cmd = new MySqlCommand("SELECT   branchdata.BranchName, branchdata.sno, modifiedroutes.RouteName, modifidroutssubtab.BranchID, modifiedroutes.Sno AS routeid, SUM(colltion.AmountPaid) AS AmountPaid FROM  branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT RefNo, Rank, LevelType, BranchID, CDate, EDate FROM   modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo INNER JOIN (SELECT  Branchid, AmountPaid, PaidDate FROM   collections WHERE  (PaymentType <> 'Cheque') AND (PaidDate BETWEEN @d1 AND @d2)) colltion ON modifidroutssubtab.BranchID = colltion.Branchid WHERE (branchdata.SalesType IS NOT NULL) AND (branchdata.sno = @BranchID) GROUP BY modifidroutssubtab.BranchID ORDER BY branchdata.sno");
                cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate.AddDays(-1)));
                cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate));
                cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate));
                cmd.Parameters.AddWithValue("@SOID", BranchId);
                cmd.Parameters.AddWithValue("@BranchID", BranchId);
                dtble = vdbmngr.SelectQuery(cmd).Tables[0];
                type1 = "BranchWise";
            }
            cmd = new MySqlCommand("SELECT  sno, salestype, flag, UserData_sno, status, rank, club_code FROM salestypemanagement where (status = 1) ORDER BY salestype DESC");
            DataTable dtsalestype = vdbmngr.SelectQuery(cmd).Tables[0];
            if (type1 == "BranchWise")
            {
                double Totcompassamount = 0;
                double Totfhamount = 0;
                double Totcateringamount = 0;
                double Totinstituteamount = 0;
                double Totdueagentamount = 0;
                double TotCRagentamount = 0;
                double Totcashamount = 0;
                double Totcompassvalue = 0;
                double Totfhvalue = 0;
                double Totcateringvalue = 0;
                double Totinstitutevalue = 0;
                double Totdueagentvalue = 0;
                double TotCRagentvalue = 0;
                double Totcashvalue = 0;
                if (dtbranchwisesale.Rows.Count > 0)
                {
                    Report = new DataTable();
                    Report.Columns.Add("SNo");
                    Report.Columns.Add("Route Name");
                    Report.Columns.Add("SalesType");
                    Report.Columns.Add("Sale");
                    Report.Columns.Add("SalestypeId");
                    Report.Columns.Add("Totalamount");
                    Report.Columns.Add("RouteId");
                    Report.Columns.Add("BranchID");
                    DataView view = new DataView(dtbranchwisesale);
                    DataTable distinctroutename = view.ToTable(true, "RouteName", "routeid", "BranchID");
                    DataView view1 = new DataView(dtbranchwisesale);
                    DataTable distincttable = view1.ToTable(true, "SalesTypeId");
                    string Salestype = "";
                    string routename = "";
                    string SalestypeId = "";
                    string routeid = "";
                    string BranchID = "";
                    foreach (DataRow drroute in distinctroutename.Rows)
                    {
                        int j = 1; double totalsalevalues = 0; double totalamount = 0;
                        foreach (DataRow drstype in distincttable.Rows)
                        {
                            DataRow[] drsalestype = dtbranchwisesale.Select("SalesTypeId='" + drstype["SalesTypeId"].ToString() + "'AND RouteName='" + drroute["RouteName"].ToString() + "'");
                            if (drsalestype.Length > 0)
                            {
                                foreach (DataRow drtype in dtsalestype.Select("sno='" + drstype["SalesTypeId"].ToString() + "'"))
                                {
                                    Salestype = drtype["salestype"].ToString();
                                    SalestypeId = drtype["sno"].ToString();
                                    routename = drroute["RouteName"].ToString();
                                    routeid = drroute["routeid"].ToString();
                                    BranchID = drroute["BranchID"].ToString();
                                    j++;
                                }
                                DataRow newRow1 = Report.NewRow();
                                foreach (DataRow drvalue in dtbranchwisesale.Select("SalesTypeId='" + drstype["SalesTypeId"].ToString() + "' AND RouteName='" + drroute["RouteName"].ToString() + "'"))
                                {
                                    float salevalue = 0;
                                    float.TryParse(drvalue["salevalue"].ToString(), out salevalue);
                                    float amount = 0;
                                    foreach (DataRow dramount in dtble.Select("BranchID='" + drvalue["bid"].ToString() + "' AND RouteName='" + drroute["RouteName"].ToString() + "'"))
                                    {
                                        amount = 0;
                                        float.TryParse(dramount["AmountPaid"].ToString(), out amount);
                                    }
                                    if (drvalue["SalesTypeId"].ToString() == "20")
                                    {
                                        Totcashvalue += salevalue;
                                        Totcashamount += amount;
                                    }
                                    if (drvalue["SalesTypeId"].ToString() == "36")
                                    {
                                        Totfhvalue += salevalue;
                                        Totfhamount += amount;
                                    }
                                    if (drvalue["SalesTypeId"].ToString() == "32")
                                    {
                                        Totcateringvalue += salevalue;
                                        Totcateringamount += amount;
                                    }
                                    if (drvalue["SalesTypeId"].ToString() == "37")
                                    {
                                        Totcompassvalue += salevalue;
                                        Totcompassamount += amount;
                                    }
                                    if (drvalue["SalesTypeId"].ToString() == "18")
                                    {
                                        Totinstitutevalue += salevalue;
                                        Totinstituteamount += amount;
                                    }
                                    if (drvalue["SalesTypeId"].ToString() == "33")
                                    {
                                        Totdueagentvalue += salevalue;
                                        Totdueagentamount += amount;
                                    }
                                    if (drvalue["SalesTypeId"].ToString() == "42")
                                    {
                                        TotCRagentvalue += salevalue;
                                        TotCRagentamount += amount;
                                    }
                                    totalsalevalues += salevalue;
                                    totalamount += amount;
                                }

                                newRow1["Sale"] = Math.Round(totalsalevalues, 2);
                                totalsalevalues = 0;
                                newRow1["Totalamount"] = Math.Round(totalamount, 2);
                                totalamount = 0;
                                newRow1["SalesType"] = Salestype;
                                newRow1["Route Name"] = routename;
                                newRow1["RouteId"] = routeid;
                                newRow1["SalestypeId"] = SalestypeId;
                                newRow1["BranchID"] = BranchID;
                                //routename = "";
                                Report.Rows.Add(newRow1);
                            }
                        }

                    }
                }
                List<LineChartValuesclass> LineChartValuelist = new List<LineChartValuesclass>();
                foreach (DataRow dr in Report.Rows)
                {
                    LineChartValuesclass obj1 = new LineChartValuesclass();
                    obj1.BranchName = dr["Route Name"].ToString();
                    obj1.BranchID = dr["RouteId"].ToString();
                    obj1.type1 = type1;
                    obj1.SalesType = dr["SalesType"].ToString();
                    float salevalue = 0;
                    float.TryParse(dr["Sale"].ToString(), out salevalue);
                    float amount = 0;
                    float.TryParse(dr["Totalamount"].ToString(), out amount);
                    float difference = salevalue - amount;
                    obj1.salestypeid = "" + dr["RouteId"].ToString() + "_" + dr["SalestypeId"].ToString() + "_" + dr["BranchID"].ToString() + "";// "" + dr["SalestypeId"].ToString() + "_" + dr["BranchID"].ToString() + "";//dr["SalestypeId"].ToString();
                    obj1.dispatchqty = difference.ToString();
                    LineChartValuelist.Add(obj1);
                }
                string response = GetJson(LineChartValuelist);
                context.Response.Write(response);
            }
            else
            {
                foreach (DataRow dr in dtble.Rows)
                {
                    DataRow newrow = Report.NewRow();
                    newrow["Branchid"] = dr["SubBranch"].ToString();
                    newrow["BranchName"] = dr["BranchName"].ToString();
                    newrow["Amount"] = dr["AmountPaid"].ToString();
                    double sale = 0;
                    if (BranchId == "8009" || BranchId == "8012" || BranchId == "8013")
                    {
                        foreach (DataRow drdtclubtotal in dtbranchwisesale.Select("Branch_id='" + dr["SubBranch"].ToString() + "'"))
                        {
                            newrow["SaleValue"] = drdtclubtotal["salevalue"].ToString();
                            double.TryParse(drdtclubtotal["SaleValue"].ToString(), out sale);
                        }
                    }
                    else
                    {
                        foreach (DataRow drdtclubtotal in dtbranchwisesale.Select("sno='" + dr["SubBranch"].ToString() + "'"))
                        {
                            newrow["SaleValue"] = drdtclubtotal["SaleValue"].ToString();
                            double.TryParse(drdtclubtotal["SaleValue"].ToString(), out sale);
                        }
                    }
                    double amount = 0;
                    string AmountPaid = dr["AmountPaid"].ToString();
                    double.TryParse(AmountPaid, out amount); ;

                    double temduevalue = sale - amount;
                    newrow["DueValue"] = Math.Round(temduevalue, 2);
                    Report.Rows.Add(newrow);
                }
                List<LineChartValuesclass> LineChartValuelist = new List<LineChartValuesclass>();
                foreach (DataRow drr in Report.Rows)
                {
                    LineChartValuesclass getLineChart = new LineChartValuesclass();
                    getLineChart.BranchName = drr["BranchName"].ToString(); ;
                    getLineChart.BranchID = drr["Branchid"].ToString();
                    getLineChart.type = type;

                    if (drr["DueValue"].ToString() != "")
                    {
                        CultureInfo hindi = new CultureInfo("hi-IN");
                        decimal DeliveryQty = decimal.Parse(drr["DueValue"].ToString(), CultureInfo.InvariantCulture);
                        getLineChart.dispatchqty = string.Format(hindi, "{0:#,#}", DeliveryQty);
                    }
                    else
                    {
                        getLineChart.dispatchqty = "0";
                    }
                    LineChartValuelist.Add(getLineChart);
                }
                string respnceString = GetJson(LineChartValuelist);
                context.Response.Write(respnceString);
            }
        }
        catch
        {
        }
    }
    private void Route_Wise_DueAmount(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            DataTable Report = new DataTable();
            Report.Columns.Add("Branchid");
            Report.Columns.Add("BranchName");
            Report.Columns.Add("SaleValue");
            Report.Columns.Add("Amount");
            Report.Columns.Add("DueValue");
            string BranchId = context.Request["BranchId"];
            DateTime ServerDateCurrentdate = VehicleDBMgr.GetTime(vdbmngr.conn);
            string s = context.Session["IndDate"].ToString();
            var dt = DateTime.ParseExact(s, "ddd MMM dd yyyy HH:mm:ss 'GMT'zzz", System.Globalization.CultureInfo.InvariantCulture);
            string Fdate = dt.ToString("yyyy-MM-dd");
            DateTime FromDate = Convert.ToDateTime(Fdate);
            string e = context.Session["Todate"].ToString();
            var edt = DateTime.ParseExact(e, "ddd MMM dd yyyy HH:mm:ss 'GMT'zzz", System.Globalization.CultureInfo.InvariantCulture);
            string Tdate = edt.ToString("yyyy-MM-dd");
            DateTime ToDate = Convert.ToDateTime(Tdate);
            DataTable routewisecoll = new DataTable();
            string SalesType = context.Session["salestype"].ToString();
            DataTable routewisesale = new DataTable();
            string type1 = "";
            if (SalesType == "Plant")
            {
                cmd = new MySqlCommand("SELECT   modifiedroutes.RouteName, SUM(indents_subtable.DeliveryQty) AS saleQty, SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost) AS salevalue, modifiedroutes.Sno AS routeid, modifidroutssubtab.BranchID AS bid, branchdata_2.BranchName, branchdata_2.flag, branchdata_1.sno AS BranchID, branchdata_2.SalesType AS SalesTypeId FROM branchdata branchdata_2 RIGHT OUTER JOIN branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT  RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo ON  branchdata_2.sno = modifidroutssubtab.BranchID LEFT OUTER JOIN indents_subtable INNER JOIN (SELECT  IndentNo, I_date, Branch_id FROM   indents WHERE  (I_date BETWEEN @starttime AND @endtime)) indt ON indents_subtable.IndentNo = indt.IndentNo ON  modifidroutssubtab.BranchID = indt.Branch_id WHERE   (branchdata.SalesType IS NOT NULL) AND (indents_subtable.DeliveryQty <> 0) AND (branchdata.sno = @BranchID) GROUP BY modifidroutssubtab.BranchID ORDER BY branchdata.sno, branchdata_2.RouteID");
                cmd.Parameters.AddWithValue("@SOID", BranchId);
                cmd.Parameters.AddWithValue("@BranchID", BranchId);
                cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate.AddDays(-1)));
                cmd.Parameters.AddWithValue("@endtime", GetHighDate(ToDate.AddDays(-1)));
                routewisesale = vdbmngr.SelectQuery(cmd).Tables[0];
                cmd = new MySqlCommand("SELECT   branchdata.BranchName, branchdata.sno, modifiedroutes.RouteName, modifidroutssubtab.BranchID, modifiedroutes.Sno AS routeid, SUM(colltion.AmountPaid) AS AmountPaid FROM  branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT RefNo, Rank, LevelType, BranchID, CDate, EDate FROM   modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo INNER JOIN (SELECT  Branchid, AmountPaid, PaidDate FROM   collections WHERE  (PaymentType <> 'Cheque') AND (PaidDate BETWEEN @d1 AND @d2)) colltion ON modifidroutssubtab.BranchID = colltion.Branchid WHERE (branchdata.SalesType IS NOT NULL) AND (branchdata.sno = @BranchID) GROUP BY modifidroutssubtab.BranchID ORDER BY branchdata.sno");
                cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate.AddDays(-1)));
                cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate));
                cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate));
                cmd.Parameters.AddWithValue("@SOID", BranchId);
                cmd.Parameters.AddWithValue("@BranchID", BranchId);
                routewisecoll = vdbmngr.SelectQuery(cmd).Tables[0];
                type1 = "RouteClassification";
            }
            else
            {
                cmd = new MySqlCommand("SELECT     modifiedroutes.RouteName As BranchName, ROUND(SUM(indents_subtable.DeliveryQty),2) AS saleQty, SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost) AS salevalue,  modifidroutssubtab.BranchID AS routeid, branchdata_2.BranchName As RouteName, branchdata_2.flag, branchdata_1.sno AS BranchID,  branchdata_2.SalesType AS SalesTypeId FROM  branchdata branchdata_2 RIGHT OUTER JOIN branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT   RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo ON  branchdata_2.sno = modifidroutssubtab.BranchID LEFT OUTER JOIN indents_subtable INNER JOIN (SELECT  IndentNo, I_date, Branch_id FROM   indents WHERE  (I_date BETWEEN @starttime AND @endtime)) indt ON indents_subtable.IndentNo = indt.IndentNo ON  modifidroutssubtab.BranchID = indt.Branch_id INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno WHERE  (branchdata.SalesType IS NOT NULL) AND (indents_subtable.DeliveryQty <> 0) AND (modifiedroutes.Sno = @BranchID) GROUP BY modifidroutssubtab.BranchID ORDER BY branchdata_2.RouteID, branchdata_2.RouteID");
                cmd.Parameters.AddWithValue("@BranchID", BranchId);
                cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate).AddDays(-1));
                cmd.Parameters.AddWithValue("@endtime", GetHighDate(ToDate).AddDays(-1));
                routewisesale = vdbmngr.SelectQuery(cmd).Tables[0];
                cmd = new MySqlCommand("SELECT    branchdata.sno As routeid, modifiedroutes.RouteName, modifidroutssubtab.BranchID, modifiedroutes.Sno AS routesno, SUM(colltion.AmountPaid) AS AmountPaid, branchdata_2.branchname FROM branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT  RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo INNER JOIN (SELECT  Branchid, AmountPaid, PaidDate FROM  collections WHERE (PaymentType <> 'Incentive') AND  (PaymentType <> 'Bank Transfer') AND (PaymentType <> 'Cheque') AND (PaymentType <> 'DUE') AND (PaidDate BETWEEN @d1 AND @d2) AND (AmountPaid <> 0)) colltion ON  modifidroutssubtab.BranchID = colltion.Branchid INNER JOIN branchdata branchdata_2 ON branchdata_2.sno = modifidroutssubtab.BranchID WHERE  (modifiedroutes.Sno = @BranchID) GROUP BY modifidroutssubtab.BranchID ORDER BY branchdata.sno");
                cmd.Parameters.AddWithValue("@BranchID", BranchId);
                cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate));
                cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate));
                cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate));
                routewisecoll = vdbmngr.SelectQuery(cmd).Tables[0];
            }
            cmd = new MySqlCommand("SELECT  sno, salestype, flag, UserData_sno, status, rank, club_code FROM salestypemanagement where (status = 1) ORDER BY salestype DESC");
            DataTable dtsalestype = vdbmngr.SelectQuery(cmd).Tables[0];
            List<LineChartValuesclass> LineChartValuelist = new List<LineChartValuesclass>();
            if (type1 != "RouteClassification")
            {
                foreach (DataRow dr in routewisesale.Rows)
                {
                    DataRow newrow = Report.NewRow();
                    newrow["Branchid"] = dr["routeid"].ToString();
                    newrow["BranchName"] = dr["RouteName"].ToString();
                    newrow["Amount"] = dr["salevalue"].ToString();
                    double collection = 0;
                    foreach (DataRow drdtclubtotal in routewisecoll.Select("routeid='" + dr["routeid"].ToString() + "'"))
                    {
                        newrow["SaleValue"] = drdtclubtotal["AmountPaid"].ToString();
                        double.TryParse(drdtclubtotal["AmountPaid"].ToString(), out collection);
                    }
                    double salevalue = 0;
                    string tempsale = dr["salevalue"].ToString();
                    double.TryParse(tempsale, out salevalue); ;
                    double temduevalue = salevalue - collection;
                    newrow["DueValue"] = Math.Round(temduevalue, 2);
                    Report.Rows.Add(newrow);
                }
                foreach (DataRow dr in Report.Rows)
                {
                    LineChartValuesclass getLineChart = new LineChartValuesclass();
                    getLineChart.BranchName = dr["BranchName"].ToString(); ;
                    getLineChart.BranchID = dr["Branchid"].ToString();
                    getLineChart.type1 = type1;
                    if (dr["DueValue"].ToString() != "")
                    {
                        CultureInfo hindi = new CultureInfo("hi-IN");
                        decimal DeliveryQty = decimal.Parse(dr["DueValue"].ToString(), CultureInfo.InvariantCulture);
                        getLineChart.dispatchqty = string.Format(hindi, "{0:#,#}", DeliveryQty);
                    }
                    else
                    {
                        getLineChart.dispatchqty = "0";
                    }
                    LineChartValuelist.Add(getLineChart);
                }
                string respnceString = GetJson(LineChartValuelist);
                context.Response.Write(respnceString);
            }
            else
            {
                double Totcompassamount = 0;
                double Totfhamount = 0;
                double Totcateringamount = 0;
                double Totinstituteamount = 0;
                double Totdueagentamount = 0;
                double TotCRagentamount = 0;
                double Totcashamount = 0;
                double Totcompassvalue = 0;
                double Totfhvalue = 0;
                double Totcateringvalue = 0;
                double Totinstitutevalue = 0;
                double Totdueagentvalue = 0;
                double TotCRagentvalue = 0;
                double Totcashvalue = 0;
                if (routewisesale.Rows.Count > 0)
                {
                    Report = new DataTable();
                    Report.Columns.Add("SNo");
                    Report.Columns.Add("Route Name");
                    Report.Columns.Add("SalesType");
                    Report.Columns.Add("Sale");
                    Report.Columns.Add("SalestypeId");
                    Report.Columns.Add("Totalamount");
                    Report.Columns.Add("RouteId");
                    Report.Columns.Add("BranchID");
                    DataView view = new DataView(routewisesale);
                    DataTable distinctroutename = view.ToTable(true, "RouteName", "routeid", "BranchID");
                    DataView view1 = new DataView(routewisesale);
                    DataTable distincttable = view1.ToTable(true, "SalesTypeId");
                    string Salestype = "";
                    string routename = "";
                    string SalestypeId = "";
                    string routeid = "";
                    string BranchID = "";
                    foreach (DataRow drroute in distinctroutename.Rows)
                    {
                        int j = 1; double totalsalevalues = 0; double totalamount = 0;
                        foreach (DataRow drstype in distincttable.Rows)
                        {
                            DataRow[] drsalestype = routewisesale.Select("SalesTypeId='" + drstype["SalesTypeId"].ToString() + "'AND RouteName='" + drroute["RouteName"].ToString() + "'");
                            if (drsalestype.Length > 0)
                            {
                                foreach (DataRow drtype in dtsalestype.Select("sno='" + drstype["SalesTypeId"].ToString() + "'"))
                                {
                                    Salestype = drtype["salestype"].ToString();
                                    SalestypeId = drtype["sno"].ToString();
                                    routename = drroute["RouteName"].ToString();
                                    routeid = drroute["routeid"].ToString();
                                    BranchID = drroute["BranchID"].ToString();
                                    j++;
                                }
                                DataRow newRow1 = Report.NewRow();
                                foreach (DataRow drvalue in routewisesale.Select("SalesTypeId='" + drstype["SalesTypeId"].ToString() + "' AND RouteName='" + drroute["RouteName"].ToString() + "'"))
                                {
                                    float salevalue = 0;
                                    float.TryParse(drvalue["salevalue"].ToString(), out salevalue);
                                    float amount = 0;
                                    foreach (DataRow dramount in routewisecoll.Select("BranchID='" + drvalue["bid"].ToString() + "' AND RouteName='" + drroute["RouteName"].ToString() + "'"))
                                    {
                                        amount = 0;
                                        float.TryParse(dramount["AmountPaid"].ToString(), out amount);
                                    }
                                    if (drvalue["SalesTypeId"].ToString() == "20")
                                    {
                                        Totcashvalue += salevalue;
                                        Totcashamount += amount;
                                    }
                                    if (drvalue["SalesTypeId"].ToString() == "36")
                                    {
                                        Totfhvalue += salevalue;
                                        Totfhamount += amount;
                                    }
                                    if (drvalue["SalesTypeId"].ToString() == "32")
                                    {
                                        Totcateringvalue += salevalue;
                                        Totcateringamount += amount;
                                    }
                                    if (drvalue["SalesTypeId"].ToString() == "37")
                                    {
                                        Totcompassvalue += salevalue;
                                        Totcompassamount += amount;
                                    }
                                    if (drvalue["SalesTypeId"].ToString() == "18")
                                    {
                                        Totinstitutevalue += salevalue;
                                        Totinstituteamount += amount;
                                    }
                                    if (drvalue["SalesTypeId"].ToString() == "33")
                                    {
                                        Totdueagentvalue += salevalue;
                                        Totdueagentamount += amount;
                                    }
                                    if (drvalue["SalesTypeId"].ToString() == "42")
                                    {
                                        TotCRagentvalue += salevalue;
                                        TotCRagentamount += amount;
                                    }
                                    totalsalevalues += salevalue;
                                    totalamount += amount;
                                }

                                newRow1["Sale"] = Math.Round(totalsalevalues, 2);
                                totalsalevalues = 0;
                                newRow1["Totalamount"] = Math.Round(totalamount, 2);
                                totalamount = 0;
                                newRow1["SalesType"] = Salestype;
                                newRow1["Route Name"] = routename;
                                newRow1["RouteId"] = routeid;
                                newRow1["SalestypeId"] = SalestypeId;
                                newRow1["BranchID"] = BranchID;
                                //routename = "";
                                Report.Rows.Add(newRow1);
                            }
                        }

                    }
                }

                foreach (DataRow dr in Report.Rows)
                {
                    LineChartValuesclass obj1 = new LineChartValuesclass();
                    obj1.BranchName = dr["Route Name"].ToString();
                    obj1.BranchID = dr["RouteId"].ToString();
                    obj1.type1 = type1;
                    obj1.SalesType = dr["SalesType"].ToString();
                    float salevalue = 0;
                    float.TryParse(dr["Sale"].ToString(), out salevalue);
                    float amount = 0;
                    float.TryParse(dr["Totalamount"].ToString(), out amount);
                    float difference = salevalue - amount;
                    obj1.salestypeid = "" + dr["RouteId"].ToString() + "_" + dr["SalestypeId"].ToString() + "_" + dr["BranchID"].ToString() + "";// "" + dr["SalestypeId"].ToString() + "_" + dr["BranchID"].ToString() + "";//dr["SalestypeId"].ToString();
                    obj1.dispatchqty = difference.ToString();
                    LineChartValuelist.Add(obj1);
                }
                string response = GetJson(LineChartValuelist);
                context.Response.Write(response);
            }
        }
        catch
        {
        }
    }
    private void Agent_Wise_DueAmount(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            DataTable Report = new DataTable();
            string BranchId = context.Request["BranchId"];
            DateTime ServerDateCurrentdate = VehicleDBMgr.GetTime(vdbmngr.conn);
            string s = context.Session["IndDate"].ToString();
            var dt = DateTime.ParseExact(s, "ddd MMM dd yyyy HH:mm:ss 'GMT'zzz", System.Globalization.CultureInfo.InvariantCulture);
            string Fdate = dt.ToString("yyyy-MM-dd");
            DateTime FromDate = Convert.ToDateTime(Fdate);
            string e = context.Session["Todate"].ToString();
            var edt = DateTime.ParseExact(e, "ddd MMM dd yyyy HH:mm:ss 'GMT'zzz", System.Globalization.CultureInfo.InvariantCulture);
            string Tdate = edt.ToString("yyyy-MM-dd");
            DateTime ToDate = Convert.ToDateTime(Tdate);
            string[] arr = BranchId.Split('_');
            string t1 = arr.Length.ToString();
            string routeid = "";
            string salestype = "";
            if (t1 == "3")
            {
                salestype = arr[1];
                routeid = arr[0];

            }
            else
            {
                salestype = arr[0];
                BranchId = arr[1];
            }
            DataTable dtroutesale = new DataTable();
            DataTable dtpaidamount = new DataTable();
            cmd = new MySqlCommand("SELECT  modifiedroutes.RouteName, SUM(indents_subtable.DeliveryQty) AS saleQty, SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost) AS salevalue, modifiedroutes.Sno AS routeid, modifidroutssubtab.BranchID AS bid, branchdata_2.BranchName, branchdata_2.flag, branchdata_1.sno AS BranchID,  branchdata_2.SalesType, empmanage.EmpName, branchdata_2.SalesRepresentative FROM  branchdata branchdata_2 RIGHT OUTER JOIN branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT   RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo ON  branchdata_2.sno = modifidroutssubtab.BranchID LEFT OUTER JOIN indents_subtable INNER JOIN (SELECT  IndentNo, I_date, Branch_id FROM  indents WHERE  (I_date BETWEEN @starttime AND @endtime)) indt ON indents_subtable.IndentNo = indt.IndentNo ON  modifidroutssubtab.BranchID = indt.Branch_id INNER JOIN tripdata ON tripdata.Sno = indents_subtable.DTripId INNER JOIN empmanage ON tripdata.EmpId = empmanage.Sno WHERE  (branchdata.SalesType IS NOT NULL) AND (indents_subtable.DeliveryQty <> 0) AND (branchdata_2.SalesType = @salestype) AND (modifiedroutes.Sno = @BranchID) GROUP BY modifidroutssubtab.BranchID ORDER BY branchdata.sno, branchdata_2.RouteID");
            cmd.Parameters.AddWithValue("@BranchID", routeid);
            cmd.Parameters.AddWithValue("@salestype", salestype);
            cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate.AddDays(-1)));
            cmd.Parameters.AddWithValue("@endtime", GetHighDate(ToDate.AddDays(-1)));
            dtroutesale = vdbmngr.SelectQuery(cmd).Tables[0];
            cmd = new MySqlCommand("SELECT   branchdata.BranchName, branchdata.sno, modifiedroutes.RouteName, modifidroutssubtab.BranchID, modifiedroutes.Sno AS routesno, SUM(colltion.AmountPaid) AS AmountPaid FROM  branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT  RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo INNER JOIN (SELECT   Branchid, AmountPaid, PaidDate FROM   collections WHERE  (PaymentType <> 'Cheque') AND (PaymentType <> 'DUE') AND (PaidDate BETWEEN @d1 AND @d2)) colltion ON  modifidroutssubtab.BranchID = colltion.Branchid WHERE  (modifiedroutes.Sno = @BranchID) GROUP BY modifidroutssubtab.BranchID ORDER BY branchdata.sno");
            cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate.AddDays(-1)));
            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate));
            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate));
            cmd.Parameters.AddWithValue("@BranchID", routeid);
            dtpaidamount = vdbmngr.SelectQuery(cmd).Tables[0];
            List<LineChartValuesclass> LineChartValuelist = new List<LineChartValuesclass>();
            foreach (DataRow dr in dtroutesale.Rows)
            {
                LineChartValuesclass obj1 = new LineChartValuesclass();
                float salevalue = 0;
                float.TryParse(dr["salevalue"].ToString(), out salevalue);
                float amount = 0;
                foreach (DataRow drvalue in dtpaidamount.Select("Branchid='" + dr["bid"].ToString() + "'"))
                {
                    amount = 0;
                    float.TryParse(drvalue["AmountPaid"].ToString(), out amount);
                }
                float difference = salevalue - amount;
                if (salevalue > amount)
                {
                    obj1.BranchName = dr["BranchName"].ToString();
                    obj1.dispatchqty = difference.ToString();
                    LineChartValuelist.Add(obj1);
                }
            }
            string response = GetJson(LineChartValuelist);
            context.Response.Write(response);
        }
        catch
        {
        }
    }
    private void Branch_Wise_DayComparism(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            DateTime ServerDateCurrentdate = VehicleDBMgr.GetTime(vdbmngr.conn);
            string BranchId = context.Request["BranchId"];
            string test = context.Request["test"];
            string SectedDataType = "Daily";

            DateTime FromDate = new DateTime();
            DateTime ToDate = new DateTime();
            string Datatype = "";
            if (test != "Report")
            {
                string s = context.Request["FromDate"];
                var dt = DateTime.ParseExact(s, "ddd MMM dd yyyy HH:mm:ss 'GMT'zzz", System.Globalization.CultureInfo.InvariantCulture);
                string Fdate = dt.ToString("yyyy-MM-dd");
                FromDate = Convert.ToDateTime(Fdate);
                string e = context.Request["Todate"];
                var edt = DateTime.ParseExact(e, "ddd MMM dd yyyy HH:mm:ss 'GMT'zzz", System.Globalization.CultureInfo.InvariantCulture);
                string Tdate = edt.ToString("yyyy-MM-dd");
                ToDate = Convert.ToDateTime(Tdate);

                int Ndays = (ToDate - FromDate).Days;
                int countdays = Ndays + 1;

                if (countdays <= 7)
                {
                    Datatype = "Monthly";
                }
                else if (countdays <= 30 || countdays <= 8)
                {
                    Datatype = "Week";
                }
                else if (countdays == 364 || countdays >= 364)
                {
                    Datatype = "Year";
                }
                else
                {
                    Datatype = "Monthly";
                }
            }
            else
            {
                string s = context.Request["FromDate"];
                FromDate = Convert.ToDateTime(s);
                string e = context.Request["Todate"];
                ToDate = Convert.ToDateTime(e);
                //From_Date = Convert.ToDateTime(s).AddDays(-365);
            }

            List<LineChartValuesclass> LineChartValuelist = new List<LineChartValuesclass>();
            List<DayWiseDatescls> datelist = new List<DayWiseDatescls>();
            List<MainComaparisonDetails> maindaywiseproductdetailslst = new List<MainComaparisonDetails>();

            string SalesType = context.Session["salestype"].ToString();
            DataTable Dt_PresentWeak = new DataTable();
            DataTable dtSub_LastWeekData = new DataTable();

            DataTable Dt_PresentMonth = new DataTable();
            DataTable Dt_LastSixthMonth = new DataTable();
            DataTable Dt_PresentYear = new DataTable();

            DataTable dtSub_yesterdayData = new DataTable();
            DataTable dtSub_lastMonthData = new DataTable();
            DataTable dtSub_lastYearData = new DataTable();
            DataTable dtALL = new DataTable();
            string type = "";
            double yesterdaygrandtotal = 0; double lastweekgrandtotal = 0;
            double lastmonthgrandtotal = 0; double lastyeargrandtotal = 0;
            #region
            if (Datatype == "Daily")
            {
                if (BranchId == "8009")
                {
                    cmd = new MySqlCommand("SELECT    TripInfo.Sno, TripInfo.DCNo, ROUND(SUM(ProductInfo.Qty), 2) AS DeliveryQty,ROUND(AVG(ProductInfo.Qty), 2) AS AvgQty, TripInfo.I_Date, TripInfo.VehicleNo, TripInfo.Status, TripInfo.DispName, TripInfo.DispType, TripInfo.DispMode, TripInfo.BranchID As Branch_id, TripInfo.BranchName, TripInfo.Branch_Id As BranchID FROM (SELECT  tripdata.Sno, tripdata.DCNo, tripdata.I_Date, tripdata.VehicleNo, tripdata.Status, dispatch.DispName, dispatch.DispType, dispatch.DispMode, dispatch.BranchID, branchdata_1.BranchName, dispatch.Branch_Id FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE  (dispatch.GroupId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT Qty, Sno FROM (SELECT tripdata_1.Sno, tripsubdata.Qty FROM  tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno WHERE (tripdata_1.AssignDate BETWEEN @d1 AND @d2)) TripSubInfo) ProductInfo ON TripInfo.Sno = ProductInfo.Sno GROUP BY TripInfo.Branch_Id");
                    cmd.Parameters.AddWithValue("@branch", BranchId);
                    cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-2));
                    cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-2));
                    dtSub_yesterdayData = vdbmngr.SelectQuery(cmd).Tables[0];
                    cmd = new MySqlCommand("SELECT    TripInfo.Sno, TripInfo.DCNo, ROUND(SUM(ProductInfo.Qty), 2) AS DeliveryQty,ROUND(AVG(ProductInfo.Qty), 2) AS AvgQty, TripInfo.I_Date, TripInfo.VehicleNo, TripInfo.Status, TripInfo.DispName, TripInfo.DispType, TripInfo.DispMode, TripInfo.BranchID As Branch_id, TripInfo.BranchName, TripInfo.Branch_Id As BranchID FROM (SELECT  tripdata.Sno, tripdata.DCNo, tripdata.I_Date, tripdata.VehicleNo, tripdata.Status, dispatch.DispName, dispatch.DispType, dispatch.DispMode, dispatch.BranchID, branchdata_1.BranchName, dispatch.Branch_Id FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE  (dispatch.GroupId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT Qty, Sno FROM (SELECT tripdata_1.Sno, tripsubdata.Qty FROM  tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno WHERE (tripdata_1.AssignDate BETWEEN @d1 AND @d2)) TripSubInfo) ProductInfo ON TripInfo.Sno = ProductInfo.Sno GROUP BY TripInfo.Branch_Id");
                    cmd.Parameters.AddWithValue("@branch", BranchId);
                    cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-8));
                    cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-8));
                    dtSub_LastWeekData = vdbmngr.SelectQuery(cmd).Tables[0];
                    cmd = new MySqlCommand("SELECT    TripInfo.Sno, TripInfo.DCNo, ROUND(SUM(ProductInfo.Qty), 2) AS DeliveryQty,ROUND(AVG(ProductInfo.Qty), 2) AS AvgQty, TripInfo.I_Date, TripInfo.VehicleNo, TripInfo.Status, TripInfo.DispName, TripInfo.DispType, TripInfo.DispMode, TripInfo.BranchID As Branch_id, TripInfo.BranchName, TripInfo.Branch_Id As BranchID FROM (SELECT  tripdata.Sno, tripdata.DCNo, tripdata.I_Date, tripdata.VehicleNo, tripdata.Status, dispatch.DispName, dispatch.DispType, dispatch.DispMode, dispatch.BranchID, branchdata_1.BranchName, dispatch.Branch_Id FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE  (dispatch.GroupId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT Qty, Sno FROM (SELECT tripdata_1.Sno, tripsubdata.Qty FROM  tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno WHERE (tripdata_1.AssignDate BETWEEN @d1 AND @d2)) TripSubInfo) ProductInfo ON TripInfo.Sno = ProductInfo.Sno GROUP BY TripInfo.Branch_Id");
                    cmd.Parameters.AddWithValue("@branch", BranchId);
                    cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-30));
                    cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-30));
                    dtSub_lastMonthData = vdbmngr.SelectQuery(cmd).Tables[0];
                    cmd = new MySqlCommand("SELECT    TripInfo.Sno, TripInfo.DCNo, ROUND(SUM(ProductInfo.Qty), 2) AS DeliveryQty,ROUND(AVG(ProductInfo.Qty), 2) AS AvgQty, TripInfo.I_Date, TripInfo.VehicleNo, TripInfo.Status, TripInfo.DispName, TripInfo.DispType, TripInfo.DispMode, TripInfo.BranchID As Branch_id, TripInfo.BranchName, TripInfo.Branch_Id As BranchID FROM (SELECT  tripdata.Sno, tripdata.DCNo, tripdata.I_Date, tripdata.VehicleNo, tripdata.Status, dispatch.DispName, dispatch.DispType, dispatch.DispMode, dispatch.BranchID, branchdata_1.BranchName, dispatch.Branch_Id FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE  (dispatch.GroupId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT Qty, Sno FROM (SELECT tripdata_1.Sno, tripsubdata.Qty FROM  tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno WHERE (tripdata_1.AssignDate BETWEEN @d1 AND @d2)) TripSubInfo) ProductInfo ON TripInfo.Sno = ProductInfo.Sno GROUP BY TripInfo.Branch_Id");
                    cmd.Parameters.AddWithValue("@branch", BranchId);
                    cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-365));
                    cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-365));
                    dtSub_lastYearData = vdbmngr.SelectQuery(cmd).Tables[0];
                    type = "GroupWise";
                }
                else if (BranchId == "8012" || BranchId == "8013")
                {
                    cmd = new MySqlCommand("SELECT    TripInfo.Sno, TripInfo.DCNo, ROUND(SUM(ProductInfo.Qty), 2) AS DeliveryQty,ROUND(AVG(ProductInfo.Qty), 2) AS AvgQty, TripInfo.I_Date, TripInfo.VehicleNo, TripInfo.Status, TripInfo.DispName, TripInfo.DispType, TripInfo.DispMode, TripInfo.BranchID As Branch_id, TripInfo.BranchName, TripInfo.Branch_Id As BranchID FROM (SELECT  tripdata.Sno, tripdata.DCNo, tripdata.I_Date, tripdata.VehicleNo, tripdata.Status, dispatch.DispName, dispatch.DispType, dispatch.DispMode, dispatch.BranchID, branchdata_1.BranchName, dispatch.Branch_Id FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE  (dispatch.CompanyId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT Qty, Sno FROM (SELECT tripdata_1.Sno, tripsubdata.Qty FROM  tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno WHERE (tripdata_1.AssignDate BETWEEN @d1 AND @d2)) TripSubInfo) ProductInfo ON TripInfo.Sno = ProductInfo.Sno GROUP BY TripInfo.Branch_Id");
                    cmd.Parameters.AddWithValue("@branch", BranchId);
                    cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-2));
                    cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-2));
                    dtSub_yesterdayData = vdbmngr.SelectQuery(cmd).Tables[0];
                    cmd = new MySqlCommand("SELECT    TripInfo.Sno, TripInfo.DCNo, ROUND(SUM(ProductInfo.Qty), 2) AS DeliveryQty,ROUND(AVG(ProductInfo.Qty), 2) AS AvgQty, TripInfo.I_Date, TripInfo.VehicleNo, TripInfo.Status, TripInfo.DispName, TripInfo.DispType, TripInfo.DispMode, TripInfo.BranchID As Branch_id, TripInfo.BranchName, TripInfo.Branch_Id As BranchID FROM (SELECT  tripdata.Sno, tripdata.DCNo, tripdata.I_Date, tripdata.VehicleNo, tripdata.Status, dispatch.DispName, dispatch.DispType, dispatch.DispMode, dispatch.BranchID, branchdata_1.BranchName, dispatch.Branch_Id FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE  (dispatch.CompanyId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT Qty, Sno FROM (SELECT tripdata_1.Sno, tripsubdata.Qty FROM  tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno WHERE (tripdata_1.AssignDate BETWEEN @d1 AND @d2)) TripSubInfo) ProductInfo ON TripInfo.Sno = ProductInfo.Sno GROUP BY TripInfo.Branch_Id");
                    cmd.Parameters.AddWithValue("@branch", BranchId);
                    cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-8));
                    cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-8));
                    dtSub_LastWeekData = vdbmngr.SelectQuery(cmd).Tables[0];
                    cmd = new MySqlCommand("SELECT    TripInfo.Sno, TripInfo.DCNo, ROUND(SUM(ProductInfo.Qty), 2) AS DeliveryQty,ROUND(AVG(ProductInfo.Qty), 2) AS AvgQty, TripInfo.I_Date, TripInfo.VehicleNo, TripInfo.Status, TripInfo.DispName, TripInfo.DispType, TripInfo.DispMode, TripInfo.BranchID As Branch_id, TripInfo.BranchName, TripInfo.Branch_Id As BranchID FROM (SELECT  tripdata.Sno, tripdata.DCNo, tripdata.I_Date, tripdata.VehicleNo, tripdata.Status, dispatch.DispName, dispatch.DispType, dispatch.DispMode, dispatch.BranchID, branchdata_1.BranchName, dispatch.Branch_Id FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE  (dispatch.CompanyId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT Qty, Sno FROM (SELECT tripdata_1.Sno, tripsubdata.Qty FROM  tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno WHERE (tripdata_1.AssignDate BETWEEN @d1 AND @d2)) TripSubInfo) ProductInfo ON TripInfo.Sno = ProductInfo.Sno GROUP BY TripInfo.Branch_Id");
                    cmd.Parameters.AddWithValue("@branch", BranchId);
                    cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-31));
                    cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-31));
                    dtSub_lastMonthData = vdbmngr.SelectQuery(cmd).Tables[0];
                    cmd = new MySqlCommand("SELECT    TripInfo.Sno, TripInfo.DCNo, ROUND(SUM(ProductInfo.Qty), 2) AS DeliveryQty,ROUND(AVG(ProductInfo.Qty), 2) AS AvgQty, TripInfo.I_Date, TripInfo.VehicleNo, TripInfo.Status, TripInfo.DispName, TripInfo.DispType, TripInfo.DispMode, TripInfo.BranchID As Branch_id, TripInfo.BranchName, TripInfo.Branch_Id As BranchID FROM (SELECT  tripdata.Sno, tripdata.DCNo, tripdata.I_Date, tripdata.VehicleNo, tripdata.Status, dispatch.DispName, dispatch.DispType, dispatch.DispMode, dispatch.BranchID, branchdata_1.BranchName, dispatch.Branch_Id FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE  (dispatch.CompanyId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT Qty, Sno FROM (SELECT tripdata_1.Sno, tripsubdata.Qty FROM  tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno WHERE (tripdata_1.AssignDate BETWEEN @d1 AND @d2)) TripSubInfo) ProductInfo ON TripInfo.Sno = ProductInfo.Sno GROUP BY TripInfo.Branch_Id");
                    cmd.Parameters.AddWithValue("@branch", BranchId);
                    cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-365));
                    cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-365));
                    dtSub_lastYearData = vdbmngr.SelectQuery(cmd).Tables[0];
                    type = "CompanyWise";
                }
                else if (SalesType == "Plant")
                {
                    if (BranchId == "172")
                    {
                        cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty), 2) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty), 2) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch NOT IN (538,  1801, 3625)) GROUP BY branchdata.sno");
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-2));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-2));
                        cmd.Parameters.AddWithValue("@BranchID", BranchId);
                        dtSub_yesterdayData = vdbmngr.SelectQuery(cmd).Tables[0];
                    }
                    else if (BranchId == "3625")
                    {
                        cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty), 2) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty), 2) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch IN (4609, 3625)) GROUP BY branchdata.sno");
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-2));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-2));
                        cmd.Parameters.AddWithValue("@BranchID", BranchId);
                        dtSub_yesterdayData = vdbmngr.SelectQuery(cmd).Tables[0];
                    }
                    else if (BranchId == "1801")
                    {
                        cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty), 2) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty), 2) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID)  GROUP BY branchdata.sno");
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-2));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-2));
                        cmd.Parameters.AddWithValue("@BranchID", BranchId);
                        dtSub_yesterdayData = vdbmngr.SelectQuery(cmd).Tables[0];
                    }
                    else
                    {
                        cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty), 2) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty), 2) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID)  GROUP BY branchdata.sno");
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-2));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-2));
                        cmd.Parameters.AddWithValue("@BranchID", BranchId);
                        dtSub_yesterdayData = vdbmngr.SelectQuery(cmd).Tables[0];
                    }


                    if (BranchId == "172")
                    {
                        cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty), 2) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty), 2) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch NOT IN (538,  1801, 3625)) GROUP BY branchdata.sno");
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-8));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-8));
                        cmd.Parameters.AddWithValue("@BranchID", BranchId);
                        dtSub_LastWeekData = vdbmngr.SelectQuery(cmd).Tables[0];
                    }
                    else if (BranchId == "3625")
                    {
                        cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty), 2) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty), 2) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch IN (4609, 3625)) GROUP BY branchdata.sno");
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-8));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-8));
                        cmd.Parameters.AddWithValue("@BranchID", BranchId);
                        dtSub_LastWeekData = vdbmngr.SelectQuery(cmd).Tables[0];
                    }
                    else if (BranchId == "1801")
                    {
                        cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty), 2) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty), 2) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID)  GROUP BY branchdata.sno");
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-8));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-8));
                        cmd.Parameters.AddWithValue("@BranchID", BranchId);
                        dtSub_LastWeekData = vdbmngr.SelectQuery(cmd).Tables[0];
                    }
                    else
                    {
                        cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty), 2) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty), 2) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID)  GROUP BY branchdata.sno");
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-8));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-8));
                        cmd.Parameters.AddWithValue("@BranchID", BranchId);
                        dtSub_LastWeekData = vdbmngr.SelectQuery(cmd).Tables[0];
                    }

                    if (BranchId == "172")
                    {
                        cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty), 2) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty), 2) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch NOT IN (538,  1801, 3625)) GROUP BY branchdata.sno");
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-30));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-30));
                        cmd.Parameters.AddWithValue("@BranchID", BranchId);
                        dtSub_lastMonthData = vdbmngr.SelectQuery(cmd).Tables[0];
                    }
                    else if (BranchId == "3625")
                    {
                        cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty), 2) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty), 2) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch IN (4609, 3625)) GROUP BY branchdata.sno");
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-30));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-30));
                        cmd.Parameters.AddWithValue("@BranchID", BranchId);
                        dtSub_lastMonthData = vdbmngr.SelectQuery(cmd).Tables[0];
                    }
                    else if (BranchId == "1801")
                    {
                        cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty), 2) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty), 2) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID)  GROUP BY branchdata.sno");
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-30));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-30));
                        cmd.Parameters.AddWithValue("@BranchID", BranchId);
                        dtSub_lastMonthData = vdbmngr.SelectQuery(cmd).Tables[0];
                    }
                    else
                    {
                        cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty), 2) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty), 2) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID)  GROUP BY branchdata.sno");
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-30));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-30));
                        cmd.Parameters.AddWithValue("@BranchID", BranchId);
                        dtSub_lastMonthData = vdbmngr.SelectQuery(cmd).Tables[0];
                    }
                    if (BranchId == "172")
                    {
                        cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty), 2) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty), 2) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch NOT IN (538,  1801, 3625)) GROUP BY branchdata.sno");
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-365));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-365));
                        cmd.Parameters.AddWithValue("@BranchID", BranchId);
                        dtSub_lastYearData = vdbmngr.SelectQuery(cmd).Tables[0];
                    }
                    else if (BranchId == "3625")
                    {
                        cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty), 2) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty), 2) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch NOT IN (4609, 3625)) GROUP BY branchdata.sno");
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-365));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-365));
                        cmd.Parameters.AddWithValue("@BranchID", BranchId);
                        dtSub_lastYearData = vdbmngr.SelectQuery(cmd).Tables[0];
                    }
                    else if (BranchId == "1801")
                    {
                        cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty), 2) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty), 2) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID)  GROUP BY branchdata.sno");
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-365));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-365));
                        cmd.Parameters.AddWithValue("@BranchID", BranchId);
                        dtSub_lastYearData = vdbmngr.SelectQuery(cmd).Tables[0];
                    }
                    else
                    {
                        cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty), 2) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty), 2) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID)  GROUP BY branchdata.sno");
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-365));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-365));
                        cmd.Parameters.AddWithValue("@BranchID", BranchId);
                        dtSub_lastYearData = vdbmngr.SelectQuery(cmd).Tables[0];
                    }
                }
                else
                {
                    cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty), 2) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty), 2) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SubBranch = @BranchID) GROUP BY branchdata.sno");
                    cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-2));
                    cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-2));
                    cmd.Parameters.AddWithValue("@BranchID", BranchId);
                    dtSub_yesterdayData = vdbmngr.SelectQuery(cmd).Tables[0];

                    cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty), 2) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty), 2) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SubBranch = @BranchID) GROUP BY branchdata.sno");
                    cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-8));
                    cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-8));
                    cmd.Parameters.AddWithValue("@BranchID", BranchId);
                    dtSub_LastWeekData = vdbmngr.SelectQuery(cmd).Tables[0];

                    cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty), 2) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty), 2) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SubBranch = @BranchID) GROUP BY branchdata.sno");
                    cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-31));
                    cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-31));
                    cmd.Parameters.AddWithValue("@BranchID", BranchId);
                    dtSub_lastMonthData = vdbmngr.SelectQuery(cmd).Tables[0];

                    cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty), 2) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty), 2) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SubBranch = @BranchID) GROUP BY branchdata.sno");
                    cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-365));
                    cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-365));
                    cmd.Parameters.AddWithValue("@BranchID", BranchId);
                    dtSub_lastYearData = vdbmngr.SelectQuery(cmd).Tables[0];
                }

                dtALL.Merge(dtSub_yesterdayData);
                dtALL.Merge(dtSub_LastWeekData);
                dtALL.Merge(dtSub_lastMonthData);
                dtALL.Merge(dtSub_lastYearData);
                DataTable disticntbarnchname = new DataTable();
                if (BranchId == "8009" || BranchId == "8012" || BranchId == "8013")
                {
                    DataView view = new DataView(dtALL);
                    disticntbarnchname = view.ToTable(true, "BranchName", "BranchID");
                }
                else
                {
                    DataView view = new DataView(dtALL);
                    disticntbarnchname = view.ToTable(true, "BranchName", "sno");
                }
                Report = new DataTable();
                Report.Columns.Add("BranchName");
                Report.Columns.Add("BranchId");
                Report.Columns.Add("Yester Day").DataType = typeof(Double);
                Report.Columns.Add("Yester Day Avg").DataType = typeof(Double);
                Report.Columns.Add("Last Week").DataType = typeof(Double);
                Report.Columns.Add("Last Week Avg").DataType = typeof(Double);
                Report.Columns.Add("Last Month").DataType = typeof(Double);
                Report.Columns.Add("Last Month Avg").DataType = typeof(Double);
                Report.Columns.Add("Last Year").DataType = typeof(Double);
                Report.Columns.Add("Last Year Avg").DataType = typeof(Double);
                DataRow newrow = Report.NewRow();
                if (BranchId == "8009" || BranchId == "8012" || BranchId == "8013")
                {
                    foreach (DataRow branch in disticntbarnchname.Rows)
                    {
                        DataRow newrow1 = Report.NewRow();
                        newrow1["BranchName"] = branch["BranchName"].ToString();
                        newrow1["BranchId"] = branch["BranchID"].ToString();
                        float DispQty = 0;
                        foreach (DataRow drSubData in dtSub_yesterdayData.Rows)
                        {
                            if (branch["BranchID"].ToString() == drSubData["BranchID"].ToString())
                            {
                                float.TryParse(drSubData["DeliveryQty"].ToString(), out DispQty);
                                if (DispQty > 0)
                                {
                                    newrow1["Yester Day"] = drSubData["DeliveryQty"].ToString();
                                    newrow1["Yester Day Avg"] = drSubData["AvgQty"].ToString();
                                    yesterdaygrandtotal += DispQty;
                                }
                            }
                        }
                        foreach (DataRow drSubData in dtSub_LastWeekData.Rows)
                        {
                            if (branch["BranchID"].ToString() == drSubData["BranchID"].ToString())
                            {
                                float.TryParse(drSubData["DeliveryQty"].ToString(), out DispQty);
                                if (DispQty > 0)
                                {
                                    newrow1["Last Week"] = drSubData["DeliveryQty"].ToString();
                                    newrow1["Last Week Avg"] = drSubData["AvgQty"].ToString();
                                    lastweekgrandtotal += DispQty;

                                }
                            }
                        }
                        foreach (DataRow drSubData in dtSub_lastMonthData.Rows)
                        {
                            if (branch["BranchID"].ToString() == drSubData["BranchID"].ToString())
                            {
                                float.TryParse(drSubData["DeliveryQty"].ToString(), out DispQty);
                                if (DispQty > 0)
                                {
                                    newrow1["Last Month"] = drSubData["DeliveryQty"].ToString();
                                    newrow1["Last Month Avg"] = drSubData["AvgQty"].ToString();
                                    lastmonthgrandtotal += DispQty;
                                }
                            }
                        }

                        foreach (DataRow drSubData in dtSub_lastYearData.Rows)
                        {
                            if (branch["BranchID"].ToString() == drSubData["BranchID"].ToString())
                            {
                                float.TryParse(drSubData["DeliveryQty"].ToString(), out DispQty);
                                if (DispQty > 0)
                                {
                                    newrow1["Last Year"] = drSubData["DeliveryQty"].ToString();
                                    newrow1["Last Year Avg"] = drSubData["AvgQty"].ToString();
                                    lastyeargrandtotal += DispQty;
                                }
                            }
                        }
                        Report.Rows.Add(newrow1);
                    }
                }
                else
                {
                    foreach (DataRow branch in disticntbarnchname.Rows)
                    {
                        DataRow newrow1 = Report.NewRow();
                        newrow1["BranchName"] = branch["BranchName"].ToString();
                        newrow1["BranchId"] = branch["sno"].ToString();
                        float DispQty = 0;
                        foreach (DataRow drSubData in dtSub_yesterdayData.Rows)
                        {
                            if (branch["sno"].ToString() == drSubData["sno"].ToString())
                            {
                                float.TryParse(drSubData["DeliveryQty"].ToString(), out DispQty);
                                if (DispQty > 0)
                                {
                                    newrow1["Yester Day"] = drSubData["DeliveryQty"].ToString();
                                    newrow1["Yester Day Avg"] = drSubData["AvgQty"].ToString();
                                    yesterdaygrandtotal += DispQty;
                                }
                            }
                        }
                        foreach (DataRow drSubData in dtSub_LastWeekData.Rows)
                        {
                            if (branch["sno"].ToString() == drSubData["sno"].ToString())
                            {
                                float.TryParse(drSubData["DeliveryQty"].ToString(), out DispQty);
                                if (DispQty > 0)
                                {
                                    newrow1["Last Week"] = drSubData["DeliveryQty"].ToString();
                                    newrow1["Last Week Avg"] = drSubData["AvgQty"].ToString();
                                    lastweekgrandtotal += DispQty;
                                }
                            }
                        }
                        foreach (DataRow drSubData in dtSub_lastMonthData.Rows)
                        {
                            if (branch["sno"].ToString() == drSubData["sno"].ToString())
                            {
                                float.TryParse(drSubData["DeliveryQty"].ToString(), out DispQty);
                                if (DispQty > 0)
                                {
                                    newrow1["Last Month"] = drSubData["DeliveryQty"].ToString();
                                    newrow1["Last Month Avg"] = drSubData["AvgQty"].ToString();
                                    lastmonthgrandtotal += DispQty;
                                }
                            }
                        }
                        foreach (DataRow drSubData in dtSub_lastYearData.Rows)
                        {
                            if (branch["sno"].ToString() == drSubData["sno"].ToString())
                            {
                                float.TryParse(drSubData["DeliveryQty"].ToString(), out DispQty);
                                if (DispQty > 0)
                                {
                                    newrow1["Last Year"] = drSubData["DeliveryQty"].ToString();
                                    newrow1["Last Year Avg"] = drSubData["AvgQty"].ToString();
                                    lastyeargrandtotal += DispQty;
                                }
                            }
                        }
                        Report.Rows.Add(newrow1);
                    }
                }
                foreach (DataRow dr in Report.Rows)
                {
                    LineChartValuesclass getLineChart = new LineChartValuesclass();
                    getLineChart.BranchName = dr["BranchName"].ToString(); ;
                    getLineChart.BranchID = dr["BranchId"].ToString(); ;
                    getLineChart.type = type;
                    getLineChart.DataType = Datatype;
                    double Percentage = 0; double tempPercentage = 0;
                    CultureInfo hindi = new CultureInfo("hi-IN");
                    if (dr["Yester Day"].ToString() != "")
                    {
                        double temp = 0;
                        double.TryParse(dr["Yester Day"].ToString(), out temp);
                        tempPercentage = (temp / yesterdaygrandtotal) * 100;
                        Percentage = Math.Round(tempPercentage, 2);
                        double avgqty = 0;
                        avgqty = temp / 2;
                        decimal yesterindent = decimal.Parse(dr["Yester Day"].ToString(), CultureInfo.InvariantCulture);
                        getLineChart.yesterindent = string.Format(hindi, "{0:#,#}", yesterindent);
                        getLineChart.yesterdaypercentage = Percentage.ToString();
                        getLineChart.yesterdayaverage = avgqty.ToString();
                    }
                    else
                    {
                        getLineChart.yesterindent = "0";
                        getLineChart.yesterdayaverage = "0";
                        getLineChart.yesterdaypercentage = "0";
                    }
                    if (dr["Last Week"].ToString() != "")
                    {
                        double temp = 0;
                        double.TryParse(dr["Last Week"].ToString(), out temp);
                        tempPercentage = (temp / lastweekgrandtotal) * 100;
                        Percentage = Math.Round(tempPercentage, 2);
                        double avgqty = 0;
                        avgqty = temp / 2;
                        decimal lastweekindent = decimal.Parse(dr["Last Week"].ToString(), CultureInfo.InvariantCulture);
                        getLineChart.lastweekindent = string.Format(hindi, "{0:#,#}", lastweekindent);
                        getLineChart.lastweekpercentage = Percentage.ToString();
                        getLineChart.lastweekaverage = avgqty.ToString();
                    }
                    else
                    {
                        getLineChart.lastweekindent = "0";
                        getLineChart.lastweekaverage = "0";
                        getLineChart.lastweekpercentage = "0";
                    }
                    if (dr["Last Month"].ToString() != "")
                    {
                        double temp = 0;
                        double.TryParse(dr["Last Month"].ToString(), out temp);
                        tempPercentage = (temp / lastmonthgrandtotal) * 100;
                        Percentage = Math.Round(tempPercentage, 2);
                        double avgqty = 0;
                        avgqty = temp / 2;
                        decimal lastmonthindent = decimal.Parse(dr["Last Month"].ToString(), CultureInfo.InvariantCulture);
                        getLineChart.lastmonthindent = string.Format(hindi, "{0:#,#}", lastmonthindent);
                        getLineChart.lastmonthpercentage = Percentage.ToString();
                        getLineChart.lastmonthaverage = avgqty.ToString();
                    }
                    else
                    {
                        getLineChart.lastmonthindent = "0";
                        getLineChart.lastmonthaverage = "0";
                        getLineChart.lastmonthpercentage = "0";
                    }
                    if (dr["Last Year"].ToString() != "")
                    {
                        double temp = 0;
                        double.TryParse(dr["Last Year"].ToString(), out temp);
                        tempPercentage = (temp / lastyeargrandtotal) * 100;
                        Percentage = Math.Round(tempPercentage, 2);
                        double avgqty = 0;
                        avgqty = temp / 2;
                        decimal lastyearindent = decimal.Parse(dr["Last Year"].ToString(), CultureInfo.InvariantCulture);
                        getLineChart.lastyearindent = string.Format(hindi, "{0:#,#}", lastyearindent);
                        getLineChart.lastyearpercentage = Percentage.ToString();
                        getLineChart.lastyearaverage = avgqty.ToString();
                    }
                    else
                    {
                        getLineChart.lastyearindent = "0";
                        getLineChart.lastyearaverage = "0";
                        getLineChart.lastyearpercentage = "0";
                    }
                    LineChartValuelist.Add(getLineChart);
                }
            }
            #endregion
            #region
            else if (Datatype == "Week")
            {
                if (BranchId == "8009")
                {
                    cmd = new MySqlCommand("SELECT    TripInfo.Sno, TripInfo.DCNo, ROUND(SUM(ProductInfo.Qty), 2) AS DeliveryQty,ROUND(AVG(ProductInfo.Qty), 2) AS AvgQty, TripInfo.I_Date, TripInfo.VehicleNo, TripInfo.Status, TripInfo.DispName, TripInfo.DispType, TripInfo.DispMode, TripInfo.BranchID As Branch_id, TripInfo.BranchName, TripInfo.Branch_Id As BranchID FROM (SELECT  tripdata.Sno, tripdata.DCNo, tripdata.I_Date, tripdata.VehicleNo, tripdata.Status, dispatch.DispName, dispatch.DispType, dispatch.DispMode, dispatch.BranchID, branchdata_1.BranchName, dispatch.Branch_Id FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE  (dispatch.GroupId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT Qty, Sno FROM (SELECT tripdata_1.Sno, tripsubdata.Qty FROM  tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno WHERE (tripdata_1.AssignDate BETWEEN @d1 AND @d2)) TripSubInfo) ProductInfo ON TripInfo.Sno = ProductInfo.Sno GROUP BY TripInfo.Branch_Id");
                    cmd.Parameters.AddWithValue("@branch", BranchId);
                    cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate));
                    cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate));
                    Dt_PresentWeak = vdbmngr.SelectQuery(cmd).Tables[0];
                    cmd = new MySqlCommand("SELECT    TripInfo.Sno, TripInfo.DCNo, ROUND(SUM(ProductInfo.Qty), 2) AS DeliveryQty,ROUND(AVG(ProductInfo.Qty), 2) AS AvgQty, TripInfo.I_Date, TripInfo.VehicleNo, TripInfo.Status, TripInfo.DispName, TripInfo.DispType, TripInfo.DispMode, TripInfo.BranchID As Branch_id, TripInfo.BranchName, TripInfo.Branch_Id As BranchID FROM (SELECT  tripdata.Sno, tripdata.DCNo, tripdata.I_Date, tripdata.VehicleNo, tripdata.Status, dispatch.DispName, dispatch.DispType, dispatch.DispMode, dispatch.BranchID, branchdata_1.BranchName, dispatch.Branch_Id FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE  (dispatch.GroupId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT Qty, Sno FROM (SELECT tripdata_1.Sno, tripsubdata.Qty FROM  tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno WHERE (tripdata_1.AssignDate BETWEEN @d1 AND @d2)) TripSubInfo) ProductInfo ON TripInfo.Sno = ProductInfo.Sno GROUP BY TripInfo.Branch_Id");
                    cmd.Parameters.AddWithValue("@branch", BranchId);
                    cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-8));
                    cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-8));
                    dtSub_LastWeekData = vdbmngr.SelectQuery(cmd).Tables[0];
                    cmd = new MySqlCommand("SELECT    TripInfo.Sno, TripInfo.DCNo, ROUND(SUM(ProductInfo.Qty), 2) AS DeliveryQty,ROUND(AVG(ProductInfo.Qty), 2) AS AvgQty, TripInfo.I_Date, TripInfo.VehicleNo, TripInfo.Status, TripInfo.DispName, TripInfo.DispType, TripInfo.DispMode, TripInfo.BranchID As Branch_id, TripInfo.BranchName, TripInfo.Branch_Id As BranchID FROM (SELECT  tripdata.Sno, tripdata.DCNo, tripdata.I_Date, tripdata.VehicleNo, tripdata.Status, dispatch.DispName, dispatch.DispType, dispatch.DispMode, dispatch.BranchID, branchdata_1.BranchName, dispatch.Branch_Id FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE  (dispatch.GroupId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT Qty, Sno FROM (SELECT tripdata_1.Sno, tripsubdata.Qty FROM  tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno WHERE (tripdata_1.AssignDate BETWEEN @d1 AND @d2)) TripSubInfo) ProductInfo ON TripInfo.Sno = ProductInfo.Sno GROUP BY TripInfo.Branch_Id");
                    cmd.Parameters.AddWithValue("@branch", BranchId);
                    cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-31));
                    cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-31));
                    dtSub_lastMonthData = vdbmngr.SelectQuery(cmd).Tables[0];
                    cmd = new MySqlCommand("SELECT    TripInfo.Sno, TripInfo.DCNo, ROUND(SUM(ProductInfo.Qty), 2) AS DeliveryQty,ROUND(AVG(ProductInfo.Qty), 2) AS AvgQty, TripInfo.I_Date, TripInfo.VehicleNo, TripInfo.Status, TripInfo.DispName, TripInfo.DispType, TripInfo.DispMode, TripInfo.BranchID As Branch_id, TripInfo.BranchName, TripInfo.Branch_Id As BranchID FROM (SELECT  tripdata.Sno, tripdata.DCNo, tripdata.I_Date, tripdata.VehicleNo, tripdata.Status, dispatch.DispName, dispatch.DispType, dispatch.DispMode, dispatch.BranchID, branchdata_1.BranchName, dispatch.Branch_Id FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE  (dispatch.GroupId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT Qty, Sno FROM (SELECT tripdata_1.Sno, tripsubdata.Qty FROM  tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno WHERE (tripdata_1.AssignDate BETWEEN @d1 AND @d2)) TripSubInfo) ProductInfo ON TripInfo.Sno = ProductInfo.Sno GROUP BY TripInfo.Branch_Id");
                    cmd.Parameters.AddWithValue("@branch", BranchId);
                    cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-365));
                    cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-365));
                    dtSub_lastYearData = vdbmngr.SelectQuery(cmd).Tables[0];
                    type = "GroupWise";
                }
                else if (BranchId == "8012" || BranchId == "8013")
                {
                    cmd = new MySqlCommand("SELECT    TripInfo.Sno, TripInfo.DCNo, ROUND(SUM(ProductInfo.Qty), 2) AS DeliveryQty,ROUND(AVG(ProductInfo.Qty), 2) AS AvgQty, TripInfo.I_Date, TripInfo.VehicleNo, TripInfo.Status, TripInfo.DispName, TripInfo.DispType, TripInfo.DispMode, TripInfo.BranchID As Branch_id, TripInfo.BranchName, TripInfo.Branch_Id As BranchID FROM (SELECT  tripdata.Sno, tripdata.DCNo, tripdata.I_Date, tripdata.VehicleNo, tripdata.Status, dispatch.DispName, dispatch.DispType, dispatch.DispMode, dispatch.BranchID, branchdata_1.BranchName, dispatch.Branch_Id FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE  (dispatch.CompanyId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT Qty, Sno FROM (SELECT tripdata_1.Sno, tripsubdata.Qty FROM  tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno WHERE (tripdata_1.AssignDate BETWEEN @d1 AND @d2)) TripSubInfo) ProductInfo ON TripInfo.Sno = ProductInfo.Sno GROUP BY TripInfo.Branch_Id");
                    cmd.Parameters.AddWithValue("@branch", BranchId);
                    cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate));
                    cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate));
                    Dt_PresentWeak = vdbmngr.SelectQuery(cmd).Tables[0];
                    cmd = new MySqlCommand("SELECT    TripInfo.Sno, TripInfo.DCNo, ROUND(SUM(ProductInfo.Qty), 2) AS DeliveryQty,ROUND(AVG(ProductInfo.Qty), 2) AS AvgQty, TripInfo.I_Date, TripInfo.VehicleNo, TripInfo.Status, TripInfo.DispName, TripInfo.DispType, TripInfo.DispMode, TripInfo.BranchID As Branch_id, TripInfo.BranchName, TripInfo.Branch_Id As BranchID FROM (SELECT  tripdata.Sno, tripdata.DCNo, tripdata.I_Date, tripdata.VehicleNo, tripdata.Status, dispatch.DispName, dispatch.DispType, dispatch.DispMode, dispatch.BranchID, branchdata_1.BranchName, dispatch.Branch_Id FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE  (dispatch.CompanyId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT Qty, Sno FROM (SELECT tripdata_1.Sno, tripsubdata.Qty FROM  tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno WHERE (tripdata_1.AssignDate BETWEEN @d1 AND @d2)) TripSubInfo) ProductInfo ON TripInfo.Sno = ProductInfo.Sno GROUP BY TripInfo.Branch_Id");
                    cmd.Parameters.AddWithValue("@branch", BranchId);
                    cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-8));
                    cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-8));
                    dtSub_LastWeekData = vdbmngr.SelectQuery(cmd).Tables[0];
                    cmd = new MySqlCommand("SELECT   TripInfo.Sno, TripInfo.DCNo, ROUND(SUM(ProductInfo.Qty), 2) AS DeliveryQty,ROUND(AVG(ProductInfo.Qty), 2) AS AvgQty, TripInfo.I_Date, TripInfo.VehicleNo, TripInfo.Status, TripInfo.DispName, TripInfo.DispType, TripInfo.DispMode, TripInfo.BranchID As Branch_id, TripInfo.BranchName, TripInfo.Branch_Id As BranchID FROM (SELECT  tripdata.Sno, tripdata.DCNo, tripdata.I_Date, tripdata.VehicleNo, tripdata.Status, dispatch.DispName, dispatch.DispType, dispatch.DispMode, dispatch.BranchID, branchdata_1.BranchName, dispatch.Branch_Id FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE  (dispatch.CompanyId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT Qty, Sno FROM (SELECT tripdata_1.Sno, tripsubdata.Qty FROM  tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno WHERE (tripdata_1.AssignDate BETWEEN @d1 AND @d2)) TripSubInfo) ProductInfo ON TripInfo.Sno = ProductInfo.Sno GROUP BY TripInfo.Branch_Id");
                    cmd.Parameters.AddWithValue("@branch", BranchId);
                    cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-31));
                    cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-31));
                    dtSub_lastMonthData = vdbmngr.SelectQuery(cmd).Tables[0];
                    cmd = new MySqlCommand("SELECT    TripInfo.Sno, TripInfo.DCNo, ROUND(SUM(ProductInfo.Qty), 2) AS DeliveryQty,ROUND(AVG(ProductInfo.Qty), 2) AS AvgQty, TripInfo.I_Date, TripInfo.VehicleNo, TripInfo.Status, TripInfo.DispName, TripInfo.DispType, TripInfo.DispMode, TripInfo.BranchID As Branch_id, TripInfo.BranchName, TripInfo.Branch_Id As BranchID FROM (SELECT  tripdata.Sno, tripdata.DCNo, tripdata.I_Date, tripdata.VehicleNo, tripdata.Status, dispatch.DispName, dispatch.DispType, dispatch.DispMode, dispatch.BranchID, branchdata_1.BranchName, dispatch.Branch_Id FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE  (dispatch.CompanyId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT Qty, Sno FROM (SELECT tripdata_1.Sno, tripsubdata.Qty FROM  tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno WHERE (tripdata_1.AssignDate BETWEEN @d1 AND @d2)) TripSubInfo) ProductInfo ON TripInfo.Sno = ProductInfo.Sno GROUP BY TripInfo.Branch_Id");
                    cmd.Parameters.AddWithValue("@branch", BranchId);
                    cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-365));
                    cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-365));
                    dtSub_lastYearData = vdbmngr.SelectQuery(cmd).Tables[0];
                    type = "CompanyWise";
                }
                else if (SalesType == "Plant")
                {
                    if (BranchId == "172")
                    {
                        cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty), 2) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty), 2) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch NOT IN (538,  1801, 3625)) GROUP BY branchdata.sno");
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate));
                        cmd.Parameters.AddWithValue("@BranchID", BranchId);
                        Dt_PresentWeak = vdbmngr.SelectQuery(cmd).Tables[0];
                    }
                    else if (BranchId == "3625")
                    {
                        cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty), 2) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty), 2) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch IN (4609, 3625)) GROUP BY branchdata.sno");
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate));
                        cmd.Parameters.AddWithValue("@BranchID", BranchId);
                        Dt_PresentWeak = vdbmngr.SelectQuery(cmd).Tables[0];
                    }
                    else if (BranchId == "1801")
                    {
                        cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty), 2) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty), 2) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID)  GROUP BY branchdata.sno");
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate));
                        cmd.Parameters.AddWithValue("@BranchID", BranchId);
                        Dt_PresentWeak = vdbmngr.SelectQuery(cmd).Tables[0];
                    }
                    else
                    {
                        cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty), 2) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty), 2) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID)  GROUP BY branchdata.sno");
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate));
                        cmd.Parameters.AddWithValue("@BranchID", BranchId);
                        Dt_PresentWeak = vdbmngr.SelectQuery(cmd).Tables[0];
                    }
                    if (BranchId == "172")
                    {
                        cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty), 2) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty), 2) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch NOT IN (538,  1801, 3625)) GROUP BY branchdata.sno");
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-8));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-8));
                        cmd.Parameters.AddWithValue("@BranchID", BranchId);
                        dtSub_LastWeekData = vdbmngr.SelectQuery(cmd).Tables[0];
                    }
                    else if (BranchId == "3625")
                    {
                        cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty), 2) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty), 2) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch IN (4609, 3625)) GROUP BY branchdata.sno");
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-8));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-8));
                        cmd.Parameters.AddWithValue("@BranchID", BranchId);
                        dtSub_LastWeekData = vdbmngr.SelectQuery(cmd).Tables[0];
                    }
                    else if (BranchId == "1801")
                    {
                        cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty), 2) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty), 2) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID)  GROUP BY branchdata.sno");
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-8));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-8));
                        cmd.Parameters.AddWithValue("@BranchID", BranchId);
                        dtSub_LastWeekData = vdbmngr.SelectQuery(cmd).Tables[0];
                    }
                    else
                    {
                        cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty), 2) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty), 2) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID)  GROUP BY branchdata.sno");
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-8));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-8));
                        cmd.Parameters.AddWithValue("@BranchID", BranchId);
                        dtSub_LastWeekData = vdbmngr.SelectQuery(cmd).Tables[0];
                    }
                    if (BranchId == "172")
                    {
                        cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty), 2) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty), 2) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch NOT IN (538,  1801, 3625)) GROUP BY branchdata.sno");
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-30));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-30));
                        cmd.Parameters.AddWithValue("@BranchID", BranchId);
                        dtSub_lastMonthData = vdbmngr.SelectQuery(cmd).Tables[0];
                    }
                    else if (BranchId == "3625")
                    {
                        cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty), 2) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty), 2) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch IN (4609, 3625)) GROUP BY branchdata.sno");
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-30));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-30));
                        cmd.Parameters.AddWithValue("@BranchID", BranchId);
                        dtSub_lastMonthData = vdbmngr.SelectQuery(cmd).Tables[0];
                    }
                    else if (BranchId == "1801")
                    {
                        cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty), 2) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty), 2) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID)  GROUP BY branchdata.sno");
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-30));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-30));
                        cmd.Parameters.AddWithValue("@BranchID", BranchId);
                        dtSub_lastMonthData = vdbmngr.SelectQuery(cmd).Tables[0];
                    }
                    else
                    {
                        cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty), 2) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty), 2) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID)  GROUP BY branchdata.sno");
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-30));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-30));
                        cmd.Parameters.AddWithValue("@BranchID", BranchId);
                        dtSub_lastMonthData = vdbmngr.SelectQuery(cmd).Tables[0];
                    }
                    if (BranchId == "172")
                    {
                        cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty), 2) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty), 2) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch NOT IN (538,  1801, 3625)) GROUP BY branchdata.sno");
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-365));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-365));
                        cmd.Parameters.AddWithValue("@BranchID", BranchId);
                        dtSub_lastYearData = vdbmngr.SelectQuery(cmd).Tables[0];
                    }
                    else if (BranchId == "3625")
                    {
                        cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty), 2) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty), 2) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch NOT IN (4609, 3625)) GROUP BY branchdata.sno");
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-365));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-365));
                        cmd.Parameters.AddWithValue("@BranchID", BranchId);
                        dtSub_lastYearData = vdbmngr.SelectQuery(cmd).Tables[0];
                    }
                    else if (BranchId == "1801")
                    {
                        cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty), 2) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty), 2) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID)  GROUP BY branchdata.sno");
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-365));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-365));
                        cmd.Parameters.AddWithValue("@BranchID", BranchId);
                        dtSub_lastYearData = vdbmngr.SelectQuery(cmd).Tables[0];
                    }
                    else
                    {
                        cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty), 2) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty), 2) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID)  GROUP BY branchdata.sno");
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-365));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-365));
                        cmd.Parameters.AddWithValue("@BranchID", BranchId);
                        dtSub_lastYearData = vdbmngr.SelectQuery(cmd).Tables[0];
                    }
                }
                else
                {
                    cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty), 2) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty), 2) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SubBranch = @BranchID) GROUP BY branchdata.sno");
                    cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate));
                    cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate));
                    cmd.Parameters.AddWithValue("@BranchID", BranchId);
                    Dt_PresentWeak = vdbmngr.SelectQuery(cmd).Tables[0];
                    cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty), 2) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty), 2) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SubBranch = @BranchID) GROUP BY branchdata.sno");
                    cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-8));
                    cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-8));
                    cmd.Parameters.AddWithValue("@BranchID", BranchId);
                    dtSub_LastWeekData = vdbmngr.SelectQuery(cmd).Tables[0];
                    cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty), 2) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty), 2) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SubBranch = @BranchID) GROUP BY branchdata.sno");
                    cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-31));
                    cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-31));
                    cmd.Parameters.AddWithValue("@BranchID", BranchId);
                    dtSub_lastMonthData = vdbmngr.SelectQuery(cmd).Tables[0];
                    cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty), 2) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty), 2) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SubBranch = @BranchID) GROUP BY branchdata.sno");
                    cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-365));
                    cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-365));
                    cmd.Parameters.AddWithValue("@BranchID", BranchId);
                    dtSub_lastYearData = vdbmngr.SelectQuery(cmd).Tables[0];
                }
                dtALL.Merge(Dt_PresentWeak);
                dtALL.Merge(dtSub_LastWeekData);
                dtALL.Merge(dtSub_lastMonthData);
                dtALL.Merge(dtSub_lastYearData);
                DataTable disticntbarnchname = new DataTable();
                if (BranchId == "8009" || BranchId == "8012" || BranchId == "8013")
                {
                    DataView view = new DataView(dtALL);
                    disticntbarnchname = view.ToTable(true, "BranchName", "BranchID");
                }
                else
                {
                    DataView view = new DataView(dtALL);
                    disticntbarnchname = view.ToTable(true, "BranchName", "sno");
                }
                Report = new DataTable();
                Report.Columns.Add("BranchName");
                Report.Columns.Add("BranchId");
                Report.Columns.Add("Present Week").DataType = typeof(Double);
                Report.Columns.Add("Yester Day Avg").DataType = typeof(Double);
                Report.Columns.Add("Last Week").DataType = typeof(Double);
                Report.Columns.Add("Last Week Avg").DataType = typeof(Double);
                Report.Columns.Add("Last Month").DataType = typeof(Double);
                Report.Columns.Add("Last Month Avg").DataType = typeof(Double);
                Report.Columns.Add("Last Year").DataType = typeof(Double);
                Report.Columns.Add("Last Year Avg").DataType = typeof(Double);
                DataRow newrow = Report.NewRow();
                if (BranchId == "8009" || BranchId == "8012" || BranchId == "8013")
                {
                    foreach (DataRow branch in disticntbarnchname.Rows)
                    {
                        DataRow newrow1 = Report.NewRow();
                        newrow1["BranchName"] = branch["BranchName"].ToString();
                        newrow1["BranchId"] = branch["BranchID"].ToString();
                        float DispQty = 0;
                        foreach (DataRow drSubData in Dt_PresentWeak.Rows)
                        {
                            if (branch["BranchID"].ToString() == drSubData["BranchID"].ToString())
                            {
                                float.TryParse(drSubData["DeliveryQty"].ToString(), out DispQty);
                                if (DispQty > 0)
                                {
                                    newrow1["Present Week"] = drSubData["DeliveryQty"].ToString();
                                    newrow1["Yester Day Avg"] = drSubData["AvgQty"].ToString();
                                    yesterdaygrandtotal += DispQty;
                                }
                            }
                        }
                        foreach (DataRow drSubData in dtSub_LastWeekData.Rows)
                        {
                            if (branch["BranchID"].ToString() == drSubData["BranchID"].ToString())
                            {
                                float.TryParse(drSubData["DeliveryQty"].ToString(), out DispQty);
                                if (DispQty > 0)
                                {
                                    newrow1["Last Week"] = drSubData["DeliveryQty"].ToString();
                                    newrow1["Last Week Avg"] = drSubData["AvgQty"].ToString();
                                    lastweekgrandtotal += DispQty;

                                }
                            }
                        }
                        foreach (DataRow drSubData in dtSub_lastMonthData.Rows)
                        {
                            if (branch["BranchID"].ToString() == drSubData["BranchID"].ToString())
                            {
                                float.TryParse(drSubData["DeliveryQty"].ToString(), out DispQty);
                                if (DispQty > 0)
                                {
                                    newrow1["Last Month"] = drSubData["DeliveryQty"].ToString();
                                    newrow1["Last Month Avg"] = drSubData["AvgQty"].ToString();
                                    lastmonthgrandtotal += DispQty;
                                }
                            }
                        }

                        foreach (DataRow drSubData in dtSub_lastYearData.Rows)
                        {
                            if (branch["BranchID"].ToString() == drSubData["BranchID"].ToString())
                            {
                                float.TryParse(drSubData["DeliveryQty"].ToString(), out DispQty);
                                if (DispQty > 0)
                                {
                                    newrow1["Last Year"] = drSubData["DeliveryQty"].ToString();
                                    newrow1["Last Year Avg"] = drSubData["AvgQty"].ToString();
                                    lastyeargrandtotal += DispQty;


                                }
                            }
                        }
                        Report.Rows.Add(newrow1);
                    }
                }
                else
                {
                    foreach (DataRow branch in disticntbarnchname.Rows)
                    {
                        DataRow newrow1 = Report.NewRow();
                        newrow1["BranchName"] = branch["BranchName"].ToString();
                        newrow1["BranchId"] = branch["sno"].ToString();
                        float DispQty = 0;
                        foreach (DataRow drSubData in Dt_PresentWeak.Rows)
                        {
                            if (branch["sno"].ToString() == drSubData["sno"].ToString())
                            {
                                float.TryParse(drSubData["DeliveryQty"].ToString(), out DispQty);
                                if (DispQty > 0)
                                {
                                    newrow1["Present Week"] = drSubData["DeliveryQty"].ToString();
                                    newrow1["Yester Day Avg"] = drSubData["AvgQty"].ToString();
                                    yesterdaygrandtotal += DispQty;
                                }
                            }
                        }
                        foreach (DataRow drSubData in dtSub_LastWeekData.Rows)
                        {
                            if (branch["sno"].ToString() == drSubData["sno"].ToString())
                            {
                                float.TryParse(drSubData["DeliveryQty"].ToString(), out DispQty);
                                if (DispQty > 0)
                                {
                                    newrow1["Last Week"] = drSubData["DeliveryQty"].ToString();
                                    newrow1["Last Week Avg"] = drSubData["AvgQty"].ToString();
                                    lastweekgrandtotal += DispQty;
                                }
                            }
                        }
                        foreach (DataRow drSubData in dtSub_lastMonthData.Rows)
                        {
                            if (branch["sno"].ToString() == drSubData["sno"].ToString())
                            {
                                float.TryParse(drSubData["DeliveryQty"].ToString(), out DispQty);
                                if (DispQty > 0)
                                {
                                    newrow1["Last Month"] = drSubData["DeliveryQty"].ToString();
                                    newrow1["Last Month Avg"] = drSubData["AvgQty"].ToString();
                                    lastmonthgrandtotal += DispQty;
                                }
                            }
                        }
                        foreach (DataRow drSubData in dtSub_lastYearData.Rows)
                        {
                            if (branch["sno"].ToString() == drSubData["sno"].ToString())
                            {
                                float.TryParse(drSubData["DeliveryQty"].ToString(), out DispQty);
                                if (DispQty > 0)
                                {
                                    newrow1["Last Year"] = drSubData["DeliveryQty"].ToString();
                                    newrow1["Last Year Avg"] = drSubData["AvgQty"].ToString();
                                    lastyeargrandtotal += DispQty;

                                }
                            }
                        }
                        Report.Rows.Add(newrow1);
                    }
                }
                foreach (DataRow dr in Report.Rows)
                {
                    LineChartValuesclass getLineChart = new LineChartValuesclass();
                    getLineChart.BranchName = dr["BranchName"].ToString(); ;
                    getLineChart.BranchID = dr["BranchId"].ToString(); ;
                    getLineChart.type = type;
                    getLineChart.DataType = Datatype;
                    double Percentage = 0; double tempPercentage = 0;
                    CultureInfo hindi = new CultureInfo("hi-IN");
                    if (dr["Present Week"].ToString() != "")
                    {
                        double temp = 0;
                        double.TryParse(dr["Present Week"].ToString(), out temp);
                        tempPercentage = (temp / yesterdaygrandtotal) * 100;
                        Percentage = Math.Round(tempPercentage, 2);
                        double avgqty = 0;
                        avgqty = temp / 2;
                        decimal yesterindent = decimal.Parse(dr["Present Week"].ToString(), CultureInfo.InvariantCulture);
                        getLineChart.presentweakindent = string.Format(hindi, "{0:#,#}", yesterindent);
                        getLineChart.presentweakpercentage = Percentage.ToString();
                        getLineChart.presentweakavg = avgqty.ToString();
                    }
                    else
                    {
                        getLineChart.yesterindent = "0";
                        getLineChart.presentweakavg = "0";
                        getLineChart.presentweakpercentage = "0";
                    }
                    if (dr["Last Week"].ToString() != "")
                    {

                        double temp = 0;
                        double.TryParse(dr["Last Week"].ToString(), out temp);
                        tempPercentage = (temp / lastweekgrandtotal) * 100;
                        Percentage = Math.Round(tempPercentage, 2);
                        double avgqty = 0;
                        avgqty = temp / 2;
                        decimal lastweekindent = decimal.Parse(dr["Last Week"].ToString(), CultureInfo.InvariantCulture);
                        getLineChart.lastweekindent = string.Format(hindi, "{0:#,#}", lastweekindent);
                        getLineChart.lastweekpercentage = Percentage.ToString();
                        getLineChart.lastweekaverage = avgqty.ToString();
                    }
                    else
                    {
                        getLineChart.lastweekindent = "0";
                        getLineChart.lastweekaverage = "0";
                        getLineChart.lastweekpercentage = "0";
                    }
                    if (dr["Last Month"].ToString() != "")
                    {
                        double temp = 0;
                        double.TryParse(dr["Last Month"].ToString(), out temp);
                        tempPercentage = (temp / lastmonthgrandtotal) * 100;
                        Percentage = Math.Round(tempPercentage, 2);
                        double avgqty = 0;
                        avgqty = temp / 2;
                        decimal lastmonthindent = decimal.Parse(dr["Last Month"].ToString(), CultureInfo.InvariantCulture);
                        getLineChart.lastmonthweekindent = string.Format(hindi, "{0:#,#}", lastmonthindent);
                        getLineChart.lastmonthweekpercentage = Percentage.ToString();
                        getLineChart.lastmonthweekaverage = avgqty.ToString();
                    }
                    else
                    {
                        getLineChart.lastmonthweekindent = "0";
                        getLineChart.lastmonthweekaverage = "0";
                        getLineChart.lastmonthweekpercentage = "0";
                    }
                    if (dr["Last Year"].ToString() != "")
                    {
                        double temp = 0;
                        double.TryParse(dr["Last Year"].ToString(), out temp);
                        tempPercentage = (temp / lastyeargrandtotal) * 100;
                        Percentage = Math.Round(tempPercentage, 2);
                        double avgqty = 0;
                        avgqty = temp / 2;
                        decimal lastyearindent = decimal.Parse(dr["Last Year"].ToString(), CultureInfo.InvariantCulture);
                        getLineChart.lastyearweekindent = string.Format(hindi, "{0:#,#}", lastyearindent);
                        getLineChart.lastyearweekpercentage = Percentage.ToString();
                        getLineChart.lastyearweekaverage = avgqty.ToString();
                    }
                    else
                    {
                        getLineChart.lastyearweekindent = "0";
                        getLineChart.lastyearweekaverage = "0";
                        getLineChart.lastyearweekpercentage = "0";
                    }
                    LineChartValuelist.Add(getLineChart);
                }
            }
            #endregion
            #region
            else if (Datatype == "Monthly")
            {
                #region
                if (SectedDataType == "Daily")
                {
                    if (BranchId == "8009")
                    {
                        cmd = new MySqlCommand("SELECT    TripInfo.Sno, TripInfo.DCNo, ROUND(SUM(ProductInfo.Qty), 2) AS DeliveryQty,ROUND(AVG(ProductInfo.Qty), 2) AS AvgQty, TripInfo.I_Date, TripInfo.VehicleNo, TripInfo.Status, TripInfo.DispName, TripInfo.DispType, TripInfo.DispMode, TripInfo.BranchID As Branch_id, TripInfo.BranchName, TripInfo.Branch_Id As BranchID FROM (SELECT  tripdata.Sno, tripdata.DCNo, tripdata.I_Date, tripdata.VehicleNo, tripdata.Status, dispatch.DispName, dispatch.DispType, dispatch.DispMode, dispatch.BranchID, branchdata_1.BranchName, dispatch.Branch_Id FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE  (dispatch.GroupId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT Qty, Sno FROM (SELECT tripdata_1.Sno, tripsubdata.Qty FROM  tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno WHERE (tripdata_1.AssignDate BETWEEN @d1 AND @d2)) TripSubInfo) ProductInfo ON TripInfo.Sno = ProductInfo.Sno GROUP BY  DATE(TripInfo.I_Date),TripInfo.Branch_Id");
                        cmd.Parameters.AddWithValue("@branch", BranchId);
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate));
                        Dt_PresentMonth = vdbmngr.SelectQuery(cmd).Tables[0];

                        cmd = new MySqlCommand("SELECT    TripInfo.Sno, TripInfo.DCNo, ROUND(SUM(ProductInfo.Qty), 2) AS DeliveryQty,ROUND(AVG(ProductInfo.Qty), 2) AS AvgQty, TripInfo.I_Date, TripInfo.VehicleNo, TripInfo.Status, TripInfo.DispName, TripInfo.DispType, TripInfo.DispMode, TripInfo.BranchID As Branch_id, TripInfo.BranchName, TripInfo.Branch_Id As BranchID FROM (SELECT  tripdata.Sno, tripdata.DCNo, tripdata.I_Date, tripdata.VehicleNo, tripdata.Status, dispatch.DispName, dispatch.DispType, dispatch.DispMode, dispatch.BranchID, branchdata_1.BranchName, dispatch.Branch_Id FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE  (dispatch.GroupId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT Qty, Sno FROM (SELECT tripdata_1.Sno, tripsubdata.Qty FROM  tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno WHERE (tripdata_1.AssignDate BETWEEN @d1 AND @d2)) TripSubInfo) ProductInfo ON TripInfo.Sno = ProductInfo.Sno GROUP BY DATE(TripInfo.I_Date),TripInfo.Branch_Id");
                        cmd.Parameters.AddWithValue("@branch", BranchId);
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-30));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-30));
                        dtSub_lastMonthData = vdbmngr.SelectQuery(cmd).Tables[0];
                        cmd = new MySqlCommand("SELECT    TripInfo.Sno, TripInfo.DCNo, ROUND(SUM(ProductInfo.Qty), 2) AS DeliveryQty,ROUND(AVG(ProductInfo.Qty), 2) AS AvgQty, TripInfo.I_Date, TripInfo.VehicleNo, TripInfo.Status, TripInfo.DispName, TripInfo.DispType, TripInfo.DispMode, TripInfo.BranchID As Branch_id, TripInfo.BranchName, TripInfo.Branch_Id As BranchID FROM (SELECT  tripdata.Sno, tripdata.DCNo, tripdata.I_Date, tripdata.VehicleNo, tripdata.Status, dispatch.DispName, dispatch.DispType, dispatch.DispMode, dispatch.BranchID, branchdata_1.BranchName, dispatch.Branch_Id FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE  (dispatch.GroupId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT Qty, Sno FROM (SELECT tripdata_1.Sno, tripsubdata.Qty FROM  tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno WHERE (tripdata_1.AssignDate BETWEEN @d1 AND @d2)) TripSubInfo) ProductInfo ON TripInfo.Sno = ProductInfo.Sno GROUP BY DATE(TripInfo.I_Date),TripInfo.Branch_Id");
                        cmd.Parameters.AddWithValue("@branch", BranchId);
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-365));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-365));
                        dtSub_lastYearData = vdbmngr.SelectQuery(cmd).Tables[0];
                        type = "GroupWise";
                    }
                    else if (BranchId == "8012" || BranchId == "8013")
                    {
                        cmd = new MySqlCommand("SELECT    TripInfo.Sno, TripInfo.DCNo, ROUND(SUM(ProductInfo.Qty), 2) AS DeliveryQty,ROUND(AVG(ProductInfo.Qty), 2) AS AvgQty, TripInfo.I_Date, TripInfo.VehicleNo, TripInfo.Status, TripInfo.DispName, TripInfo.DispType, TripInfo.DispMode, TripInfo.BranchID As Branch_id, TripInfo.BranchName, TripInfo.Branch_Id As BranchID FROM (SELECT  tripdata.Sno, tripdata.DCNo, tripdata.I_Date, tripdata.VehicleNo, tripdata.Status, dispatch.DispName, dispatch.DispType, dispatch.DispMode, dispatch.BranchID, branchdata_1.BranchName, dispatch.Branch_Id FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE  (dispatch.CompanyId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT Qty, Sno FROM (SELECT tripdata_1.Sno, tripsubdata.Qty FROM  tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno WHERE (tripdata_1.AssignDate BETWEEN @d1 AND @d2)) TripSubInfo) ProductInfo ON TripInfo.Sno = ProductInfo.Sno GROUP BY DATE(TripInfo.I_Date),TripInfo.Branch_Id");
                        cmd.Parameters.AddWithValue("@branch", BranchId);
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate));
                        Dt_PresentMonth = vdbmngr.SelectQuery(cmd).Tables[0];
                        cmd = new MySqlCommand("SELECT    TripInfo.Sno, TripInfo.DCNo, ROUND(SUM(ProductInfo.Qty), 2) AS DeliveryQty,ROUND(AVG(ProductInfo.Qty), 2) AS AvgQty, TripInfo.I_Date, TripInfo.VehicleNo, TripInfo.Status, TripInfo.DispName, TripInfo.DispType, TripInfo.DispMode, TripInfo.BranchID As Branch_id, TripInfo.BranchName, TripInfo.Branch_Id As BranchID FROM (SELECT  tripdata.Sno, tripdata.DCNo, tripdata.I_Date, tripdata.VehicleNo, tripdata.Status, dispatch.DispName, dispatch.DispType, dispatch.DispMode, dispatch.BranchID, branchdata_1.BranchName, dispatch.Branch_Id FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE  (dispatch.CompanyId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT Qty, Sno FROM (SELECT tripdata_1.Sno, tripsubdata.Qty FROM  tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno WHERE (tripdata_1.AssignDate BETWEEN @d1 AND @d2)) TripSubInfo) ProductInfo ON TripInfo.Sno = ProductInfo.Sno GROUP BY DATE(TripInfo.I_Date),TripInfo.Branch_Id");
                        cmd.Parameters.AddWithValue("@branch", BranchId);
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-31));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-31));
                        dtSub_lastMonthData = vdbmngr.SelectQuery(cmd).Tables[0];
                        cmd = new MySqlCommand("SELECT    TripInfo.Sno, TripInfo.DCNo, ROUND(SUM(ProductInfo.Qty), 2) AS DeliveryQty,ROUND(AVG(ProductInfo.Qty), 2) AS AvgQty, TripInfo.I_Date, TripInfo.VehicleNo, TripInfo.Status, TripInfo.DispName, TripInfo.DispType, TripInfo.DispMode, TripInfo.BranchID As Branch_id, TripInfo.BranchName, TripInfo.Branch_Id As BranchID FROM (SELECT  tripdata.Sno, tripdata.DCNo, tripdata.I_Date, tripdata.VehicleNo, tripdata.Status, dispatch.DispName, dispatch.DispType, dispatch.DispMode, dispatch.BranchID, branchdata_1.BranchName, dispatch.Branch_Id FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE  (dispatch.CompanyId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT Qty, Sno FROM (SELECT tripdata_1.Sno, tripsubdata.Qty FROM  tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno WHERE (tripdata_1.AssignDate BETWEEN @d1 AND @d2)) TripSubInfo) ProductInfo ON TripInfo.Sno = ProductInfo.Sno GROUP BY DATE(TripInfo.I_Date),TripInfo.Branch_Id");
                        cmd.Parameters.AddWithValue("@branch", BranchId);
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-365));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-365));
                        dtSub_lastYearData = vdbmngr.SelectQuery(cmd).Tables[0];
                        type = "CompanyWise";
                    }
                    else if (SalesType == "Plant")
                    {
                        if (BranchId == "172")
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty), 2) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty), 2) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch NOT IN (538,  1801, 3625)) GROUP BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate));
                            cmd.Parameters.AddWithValue("@BranchID", BranchId);
                            Dt_PresentMonth = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else if (BranchId == "3625")
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty), 2) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty), 2) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch IN (4609, 3625)) GROUP BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate));
                            cmd.Parameters.AddWithValue("@BranchID", BranchId);
                            Dt_PresentMonth = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else if (BranchId == "1801")
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty), 2) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty), 2) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID)  GROUP BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate));
                            cmd.Parameters.AddWithValue("@BranchID", BranchId);
                            Dt_PresentMonth = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty), 2) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty), 2) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID)  GROUP BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate));
                            cmd.Parameters.AddWithValue("@BranchID", BranchId);
                            Dt_PresentMonth = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        if (BranchId == "172")
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty), 2) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty), 2) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch NOT IN (538,  1801, 3625)) GROUP BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-180));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-180));
                            cmd.Parameters.AddWithValue("@BranchID", BranchId);
                            Dt_LastSixthMonth = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else if (BranchId == "3625")
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty), 2) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty), 2) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch IN (4609, 3625)) GROUP BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-180));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-180));
                            cmd.Parameters.AddWithValue("@BranchID", BranchId);
                            Dt_LastSixthMonth = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else if (BranchId == "1801")
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty), 2) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty), 2) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID)  GROUP BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-180));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-180));
                            cmd.Parameters.AddWithValue("@BranchID", BranchId);
                            Dt_LastSixthMonth = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty), 2) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty), 2) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID)  GROUP BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-180));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-180));
                            cmd.Parameters.AddWithValue("@BranchID", BranchId);
                            Dt_LastSixthMonth = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        if (BranchId == "172")
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty), 2) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty), 2) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch NOT IN (538,  1801, 3625)) GROUP BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-30));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-30));
                            cmd.Parameters.AddWithValue("@BranchID", BranchId);
                            dtSub_lastMonthData = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else if (BranchId == "3625")
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty), 2) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty), 2) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch IN (4609, 3625)) GROUP BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-30));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-30));
                            cmd.Parameters.AddWithValue("@BranchID", BranchId);
                            dtSub_lastMonthData = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else if (BranchId == "1801")
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty), 2) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty), 2) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID)  GROUP BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-30));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-30));
                            cmd.Parameters.AddWithValue("@BranchID", BranchId);
                            dtSub_lastMonthData = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty), 2) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty), 2) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID)  GROUP BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-30));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-30));
                            cmd.Parameters.AddWithValue("@BranchID", BranchId);
                            dtSub_lastMonthData = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        if (BranchId == "172")
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty), 2) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty), 2) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch NOT IN (538,  1801, 3625)) GROUP BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-365));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-365));
                            cmd.Parameters.AddWithValue("@BranchID", BranchId);
                            dtSub_lastYearData = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else if (BranchId == "3625")
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty), 2) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty), 2) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch NOT IN (4609, 3625)) GROUP BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-365));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-365));
                            cmd.Parameters.AddWithValue("@BranchID", BranchId);
                            dtSub_lastYearData = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else if (BranchId == "1801")
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty), 2) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty), 2) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID)  GROUP BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-365));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-365));
                            cmd.Parameters.AddWithValue("@BranchID", BranchId);
                            dtSub_lastYearData = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty), 2) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty), 2) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID)  GROUP BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-365));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-365));
                            cmd.Parameters.AddWithValue("@BranchID", BranchId);
                            dtSub_lastYearData = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                    }
                    else
                    {
                        cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty), 2) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty), 2) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SubBranch = @BranchID) GROUP BY branchdata.sno");
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate));
                        cmd.Parameters.AddWithValue("@BranchID", BranchId);
                        Dt_PresentMonth = vdbmngr.SelectQuery(cmd).Tables[0];
                        cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty), 2) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty), 2) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SubBranch = @BranchID) GROUP BY branchdata.sno");
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-31));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-31));
                        cmd.Parameters.AddWithValue("@BranchID", BranchId);
                        dtSub_lastMonthData = vdbmngr.SelectQuery(cmd).Tables[0];
                        cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty), 2) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty), 2) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SubBranch = @BranchID) GROUP BY branchdata.sno");
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-180));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-180));
                        cmd.Parameters.AddWithValue("@BranchID", BranchId);
                        Dt_LastSixthMonth = vdbmngr.SelectQuery(cmd).Tables[0];
                        cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty), 2) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty), 2) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SubBranch = @BranchID) GROUP BY branchdata.sno");
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-365));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-365));
                        cmd.Parameters.AddWithValue("@BranchID", BranchId);
                        dtSub_lastYearData = vdbmngr.SelectQuery(cmd).Tables[0];
                    }

                    dtALL.Merge(Dt_PresentMonth);
                    dtALL.Merge(dtSub_lastMonthData);
                    dtALL.Merge(Dt_LastSixthMonth);
                    dtALL.Merge(dtSub_lastYearData);
                    DataTable disticntbarnchname = new DataTable();
                    DataTable disticntbarnchname1 = new DataTable();
                    if (BranchId == "8009" || BranchId == "8012" || BranchId == "8013")
                    {
                        DataView view = new DataView(dtALL);
                        disticntbarnchname = view.ToTable(true, "BranchName", "BranchID");
                        DataView view3 = new DataView(dtALL);
                        disticntbarnchname1 = view3.ToTable(true, "I_Date");
                    }
                    else
                    {
                        DataView view = new DataView(dtALL);
                        disticntbarnchname = view.ToTable(true, "BranchName", "sno");
                    }
                    DataTable Report1 = new DataTable();
                    Report1.Columns.Add("Date");
                    foreach (DataRow branch in disticntbarnchname1.Rows)
                    {
                        DataRow newrow = Report1.NewRow();
                        DateTime dtDoe = Convert.ToDateTime(branch["i_date"].ToString());
                        string strdate = dtDoe.ToString("dd");
                        newrow["Date"] = strdate;
                        Report1.Rows.Add(newrow); ;
                    }
                    DataView view4 = new DataView(Report1);
                    DataTable disticntbarnchname4 = view4.ToTable(true, "Date");
                    Report = new DataTable();
                    Report.Columns.Add("DataType");
                    foreach (DataRow branch in disticntbarnchname4.Rows)
                    {
                        Report.Columns.Add(branch["Date"].ToString());
                    }
                    Report.Columns.Add("BranchName");
                    Report.Columns.Add("BranchId");
                    Report.Columns.Add("This Month").DataType = typeof(Double);
                    Report.Columns.Add("ThisMonthType");
                    Report.Columns.Add("LastMonthType");
                    Report.Columns.Add("LastYearType");
                    Report.Columns.Add("ThisMonthDate");
                    Report.Columns.Add("LastMonthDate");
                    Report.Columns.Add("LastYearDate");
                    Report.Columns.Add("Last Sixth Month").DataType = typeof(Double);
                    Report.Columns.Add("Last Week Avg").DataType = typeof(Double);
                    Report.Columns.Add("Last Month").DataType = typeof(Double);
                    Report.Columns.Add("Last Month Avg").DataType = typeof(Double);
                    Report.Columns.Add("Last Year").DataType = typeof(Double);
                    Report.Columns.Add("Last Year Avg").DataType = typeof(Double);
                    if (BranchId == "8009" || BranchId == "8012" || BranchId == "8013")
                    {
                        int j = 1;
                        foreach (DataRow branch in disticntbarnchname.Rows)
                        {
                            DataRow newrow1 = Report.NewRow();
                            if (j == 1)
                            {
                                newrow1["DataType"] = "This Month";

                            }
                            newrow1["BranchName"] = branch["BranchName"].ToString();
                            float DispQty = 0;
                            foreach (DataRow drSubData in Dt_PresentMonth.Rows)
                            {
                                if (branch["BranchID"].ToString() == drSubData["BranchID"].ToString())
                                {
                                    float.TryParse(drSubData["DeliveryQty"].ToString(), out DispQty);
                                    if (DispQty > 0)
                                    {
                                        DateTime dtDoe = Convert.ToDateTime(drSubData["i_date"].ToString());
                                        string strdate = dtDoe.ToString("dd");
                                        newrow1[strdate] = drSubData["DeliveryQty"].ToString();
                                        yesterdaygrandtotal += DispQty;
                                    }
                                }
                            }
                            Report.Rows.Add(newrow1);
                            j++;
                        }
                        int j1 = 1;
                        foreach (DataRow branch in disticntbarnchname.Rows)
                        {
                            DataRow newrow1 = Report.NewRow();
                            if (j1 == 1)
                            {
                                newrow1["DataType"] = "Last Month";
                            }
                            newrow1["BranchName"] = branch["BranchName"].ToString();
                            float DispQty = 0;
                            foreach (DataRow drSubData in dtSub_lastMonthData.Rows)
                            {
                                if (branch["BranchID"].ToString() == drSubData["BranchID"].ToString())
                                {
                                    float.TryParse(drSubData["DeliveryQty"].ToString(), out DispQty);
                                    if (DispQty > 0)
                                    {
                                        DateTime dtDoe = Convert.ToDateTime(drSubData["i_date"].ToString());
                                        string strdate = dtDoe.ToString("dd");
                                        newrow1[strdate] = drSubData["DeliveryQty"].ToString();
                                        lastmonthgrandtotal += DispQty;
                                    }
                                }
                            }
                            Report.Rows.Add(newrow1);
                            j1++;
                        }
                        int j2 = 1;
                        foreach (DataRow branch in disticntbarnchname.Rows)
                        {
                            DataRow newrow1 = Report.NewRow();
                            if (j2 == 1)
                            {
                                newrow1["DataType"] = "Last Year";
                            }
                            newrow1["BranchName"] = branch["BranchName"].ToString();
                            float DispQty = 0;
                            foreach (DataRow drSubData in dtSub_lastYearData.Rows)
                            {
                                if (branch["BranchID"].ToString() == drSubData["BranchID"].ToString())
                                {
                                    float.TryParse(drSubData["DeliveryQty"].ToString(), out DispQty);
                                    if (DispQty > 0)
                                    {
                                        DateTime dtDoe = Convert.ToDateTime(drSubData["i_date"].ToString());
                                        string strdate = dtDoe.ToString("dd");
                                        newrow1[strdate] = drSubData["DeliveryQty"].ToString();
                                        lastyeargrandtotal += DispQty;
                                    }
                                }
                            }
                            if (DispQty > 0)
                            {
                                Report.Rows.Add(newrow1);
                                j2++;
                            }
                        }
                    }
                    else
                    {
                        foreach (DataRow branch in disticntbarnchname.Rows)
                        {
                            DataRow newrow1 = Report.NewRow();
                            newrow1["BranchName"] = branch["BranchName"].ToString();
                            newrow1["BranchId"] = branch["sno"].ToString();
                            float DispQty = 0;
                            foreach (DataRow drSubData in Dt_PresentMonth.Rows)
                            {
                                if (branch["sno"].ToString() == drSubData["sno"].ToString())
                                {
                                    float.TryParse(drSubData["DeliveryQty"].ToString(), out DispQty);
                                    if (DispQty > 0)
                                    {
                                        newrow1["This Month"] = drSubData["DeliveryQty"].ToString();
                                        newrow1["ThisMonthType"] = "ThisMonth";
                                        DateTime dtDoe = Convert.ToDateTime(drSubData["i_date"].ToString());
                                        string strdate = dtDoe.ToString("dd/MMM");
                                        newrow1["ThisMonthDate"] = strdate;
                                        yesterdaygrandtotal += DispQty;
                                    }
                                }
                            }
                            foreach (DataRow drSubData in dtSub_lastMonthData.Rows)
                            {
                                if (branch["sno"].ToString() == drSubData["sno"].ToString())
                                {
                                    float.TryParse(drSubData["DeliveryQty"].ToString(), out DispQty);
                                    if (DispQty > 0)
                                    {
                                        newrow1["Last Month"] = drSubData["DeliveryQty"].ToString();
                                        newrow1["LastMonthType"] = "LastMonth";
                                        DateTime dtDoe = Convert.ToDateTime(drSubData["i_date"].ToString());
                                        string strdate = dtDoe.ToString("dd/MMM");
                                        newrow1["LastMonthDate"] = strdate;
                                        lastmonthgrandtotal += DispQty;
                                    }
                                }
                            }
                            foreach (DataRow drSubData in dtSub_lastYearData.Rows)
                            {
                                if (branch["sno"].ToString() == drSubData["sno"].ToString())
                                {
                                    float.TryParse(drSubData["DeliveryQty"].ToString(), out DispQty);
                                    if (DispQty > 0)
                                    {
                                        newrow1["Last Year"] = drSubData["DeliveryQty"].ToString();
                                        newrow1["LastYearType"] = "LastYear";
                                        DateTime dtDoe = Convert.ToDateTime(drSubData["i_date"].ToString());
                                        string strdate = dtDoe.ToString("dd/MMM");
                                        newrow1["LastYearDate"] = strdate;
                                        lastyeargrandtotal += DispQty;

                                    }
                                }
                            }
                            Report.Rows.Add(newrow1);
                        }
                    }
                    context.Session["BranchComparisonData"] = Report;
                }
                #endregion
                #region
                else if (SectedDataType == "Weekly")
                {
                    if (BranchId == "8009")
                    {
                        cmd = new MySqlCommand("SELECT    TripInfo.Sno, TripInfo.DCNo, ROUND(SUM(ProductInfo.Qty), 2) AS DeliveryQty,ROUND(AVG(ProductInfo.Qty), 2) AS AvgQty, TripInfo.I_Date, TripInfo.VehicleNo, TripInfo.Status, TripInfo.DispName, TripInfo.DispType, TripInfo.DispMode, TripInfo.BranchID As Branch_id, TripInfo.BranchName, TripInfo.Branch_Id As BranchID FROM (SELECT  tripdata.Sno, tripdata.DCNo, tripdata.I_Date, tripdata.VehicleNo, tripdata.Status, dispatch.DispName, dispatch.DispType, dispatch.DispMode, dispatch.BranchID, branchdata_1.BranchName, dispatch.Branch_Id FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE  (dispatch.GroupId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT Qty, Sno FROM (SELECT tripdata_1.Sno, tripsubdata.Qty FROM  tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno WHERE (tripdata_1.AssignDate BETWEEN @d1 AND @d2)) TripSubInfo) ProductInfo ON TripInfo.Sno = ProductInfo.Sno GROUP BY TripInfo.Branch_Id");
                        cmd.Parameters.AddWithValue("@branch", BranchId);
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate));
                        Dt_PresentMonth = vdbmngr.SelectQuery(cmd).Tables[0];
                        cmd = new MySqlCommand("SELECT    TripInfo.Sno, TripInfo.DCNo, ROUND(SUM(ProductInfo.Qty), 2) AS DeliveryQty,ROUND(AVG(ProductInfo.Qty), 2) AS AvgQty, TripInfo.I_Date, TripInfo.VehicleNo, TripInfo.Status, TripInfo.DispName, TripInfo.DispType, TripInfo.DispMode, TripInfo.BranchID As Branch_id, TripInfo.BranchName, TripInfo.Branch_Id As BranchID FROM (SELECT  tripdata.Sno, tripdata.DCNo, tripdata.I_Date, tripdata.VehicleNo, tripdata.Status, dispatch.DispName, dispatch.DispType, dispatch.DispMode, dispatch.BranchID, branchdata_1.BranchName, dispatch.Branch_Id FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE  (dispatch.GroupId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT Qty, Sno FROM (SELECT tripdata_1.Sno, tripsubdata.Qty FROM  tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno WHERE (tripdata_1.AssignDate BETWEEN @d1 AND @d2)) TripSubInfo) ProductInfo ON TripInfo.Sno = ProductInfo.Sno GROUP BY TripInfo.Branch_Id");
                        cmd.Parameters.AddWithValue("@branch", BranchId);
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-31));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-31));
                        dtSub_lastMonthData = vdbmngr.SelectQuery(cmd).Tables[0];
                        cmd = new MySqlCommand("SELECT    TripInfo.Sno, TripInfo.DCNo, ROUND(SUM(ProductInfo.Qty), 2) AS DeliveryQty,ROUND(AVG(ProductInfo.Qty), 2) AS AvgQty, TripInfo.I_Date, TripInfo.VehicleNo, TripInfo.Status, TripInfo.DispName, TripInfo.DispType, TripInfo.DispMode, TripInfo.BranchID As Branch_id, TripInfo.BranchName, TripInfo.Branch_Id As BranchID FROM (SELECT  tripdata.Sno, tripdata.DCNo, tripdata.I_Date, tripdata.VehicleNo, tripdata.Status, dispatch.DispName, dispatch.DispType, dispatch.DispMode, dispatch.BranchID, branchdata_1.BranchName, dispatch.Branch_Id FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE  (dispatch.GroupId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT Qty, Sno FROM (SELECT tripdata_1.Sno, tripsubdata.Qty FROM  tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno WHERE (tripdata_1.AssignDate BETWEEN @d1 AND @d2)) TripSubInfo) ProductInfo ON TripInfo.Sno = ProductInfo.Sno GROUP BY TripInfo.Branch_Id");
                        cmd.Parameters.AddWithValue("@branch", BranchId);
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-180));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-180));
                        Dt_LastSixthMonth = vdbmngr.SelectQuery(cmd).Tables[0];
                        cmd = new MySqlCommand("SELECT    TripInfo.Sno, TripInfo.DCNo, ROUND(SUM(ProductInfo.Qty), 2) AS DeliveryQty,ROUND(AVG(ProductInfo.Qty), 2) AS AvgQty, TripInfo.I_Date, TripInfo.VehicleNo, TripInfo.Status, TripInfo.DispName, TripInfo.DispType, TripInfo.DispMode, TripInfo.BranchID As Branch_id, TripInfo.BranchName, TripInfo.Branch_Id As BranchID FROM (SELECT  tripdata.Sno, tripdata.DCNo, tripdata.I_Date, tripdata.VehicleNo, tripdata.Status, dispatch.DispName, dispatch.DispType, dispatch.DispMode, dispatch.BranchID, branchdata_1.BranchName, dispatch.Branch_Id FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE  (dispatch.GroupId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT Qty, Sno FROM (SELECT tripdata_1.Sno, tripsubdata.Qty FROM  tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno WHERE (tripdata_1.AssignDate BETWEEN @d1 AND @d2)) TripSubInfo) ProductInfo ON TripInfo.Sno = ProductInfo.Sno GROUP BY TripInfo.Branch_Id");
                        cmd.Parameters.AddWithValue("@branch", BranchId);
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-365));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-365));
                        dtSub_lastYearData = vdbmngr.SelectQuery(cmd).Tables[0];
                        type = "GroupWise";
                    }
                    else if (BranchId == "8012" || BranchId == "8013")
                    {
                        cmd = new MySqlCommand("SELECT    TripInfo.Sno, TripInfo.DCNo, ROUND(SUM(ProductInfo.Qty), 2) AS DeliveryQty,ROUND(AVG(ProductInfo.Qty), 2) AS AvgQty, TripInfo.I_Date, TripInfo.VehicleNo, TripInfo.Status, TripInfo.DispName, TripInfo.DispType, TripInfo.DispMode, TripInfo.BranchID As Branch_id, TripInfo.BranchName, TripInfo.Branch_Id As BranchID FROM (SELECT  tripdata.Sno, tripdata.DCNo, tripdata.I_Date, tripdata.VehicleNo, tripdata.Status, dispatch.DispName, dispatch.DispType, dispatch.DispMode, dispatch.BranchID, branchdata_1.BranchName, dispatch.Branch_Id FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE  (dispatch.CompanyId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT Qty, Sno FROM (SELECT tripdata_1.Sno, tripsubdata.Qty FROM  tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno WHERE (tripdata_1.AssignDate BETWEEN @d1 AND @d2)) TripSubInfo) ProductInfo ON TripInfo.Sno = ProductInfo.Sno GROUP BY TripInfo.Branch_Id");
                        cmd.Parameters.AddWithValue("@branch", BranchId);
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate));
                        Dt_PresentMonth = vdbmngr.SelectQuery(cmd).Tables[0];
                        cmd = new MySqlCommand("SELECT    TripInfo.Sno, TripInfo.DCNo, ROUND(SUM(ProductInfo.Qty), 2) AS DeliveryQty,ROUND(AVG(ProductInfo.Qty), 2) AS AvgQty, TripInfo.I_Date, TripInfo.VehicleNo, TripInfo.Status, TripInfo.DispName, TripInfo.DispType, TripInfo.DispMode, TripInfo.BranchID As Branch_id, TripInfo.BranchName, TripInfo.Branch_Id As BranchID FROM (SELECT  tripdata.Sno, tripdata.DCNo, tripdata.I_Date, tripdata.VehicleNo, tripdata.Status, dispatch.DispName, dispatch.DispType, dispatch.DispMode, dispatch.BranchID, branchdata_1.BranchName, dispatch.Branch_Id FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE  (dispatch.CompanyId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT Qty, Sno FROM (SELECT tripdata_1.Sno, tripsubdata.Qty FROM  tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno WHERE (tripdata_1.AssignDate BETWEEN @d1 AND @d2)) TripSubInfo) ProductInfo ON TripInfo.Sno = ProductInfo.Sno GROUP BY TripInfo.Branch_Id");
                        cmd.Parameters.AddWithValue("@branch", BranchId);
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-31));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-31));
                        dtSub_lastMonthData = vdbmngr.SelectQuery(cmd).Tables[0];
                        cmd = new MySqlCommand("SELECT    TripInfo.Sno, TripInfo.DCNo, ROUND(SUM(ProductInfo.Qty), 2) AS DeliveryQty,ROUND(AVG(ProductInfo.Qty), 2) AS AvgQty, TripInfo.I_Date, TripInfo.VehicleNo, TripInfo.Status, TripInfo.DispName, TripInfo.DispType, TripInfo.DispMode, TripInfo.BranchID As Branch_id, TripInfo.BranchName, TripInfo.Branch_Id As BranchID FROM (SELECT  tripdata.Sno, tripdata.DCNo, tripdata.I_Date, tripdata.VehicleNo, tripdata.Status, dispatch.DispName, dispatch.DispType, dispatch.DispMode, dispatch.BranchID, branchdata_1.BranchName, dispatch.Branch_Id FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE  (dispatch.CompanyId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT Qty, Sno FROM (SELECT tripdata_1.Sno, tripsubdata.Qty FROM  tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno WHERE (tripdata_1.AssignDate BETWEEN @d1 AND @d2)) TripSubInfo) ProductInfo ON TripInfo.Sno = ProductInfo.Sno GROUP BY TripInfo.Branch_Id");
                        cmd.Parameters.AddWithValue("@branch", BranchId);
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-180));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-180));
                        Dt_LastSixthMonth = vdbmngr.SelectQuery(cmd).Tables[0];
                        cmd = new MySqlCommand("SELECT    TripInfo.Sno, TripInfo.DCNo, ROUND(SUM(ProductInfo.Qty), 2) AS DeliveryQty,ROUND(AVG(ProductInfo.Qty), 2) AS AvgQty, TripInfo.I_Date, TripInfo.VehicleNo, TripInfo.Status, TripInfo.DispName, TripInfo.DispType, TripInfo.DispMode, TripInfo.BranchID As Branch_id, TripInfo.BranchName, TripInfo.Branch_Id As BranchID FROM (SELECT  tripdata.Sno, tripdata.DCNo, tripdata.I_Date, tripdata.VehicleNo, tripdata.Status, dispatch.DispName, dispatch.DispType, dispatch.DispMode, dispatch.BranchID, branchdata_1.BranchName, dispatch.Branch_Id FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE  (dispatch.CompanyId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT Qty, Sno FROM (SELECT tripdata_1.Sno, tripsubdata.Qty FROM  tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno WHERE (tripdata_1.AssignDate BETWEEN @d1 AND @d2)) TripSubInfo) ProductInfo ON TripInfo.Sno = ProductInfo.Sno GROUP BY TripInfo.Branch_Id");
                        cmd.Parameters.AddWithValue("@branch", BranchId);
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-365));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-365));
                        dtSub_lastYearData = vdbmngr.SelectQuery(cmd).Tables[0];
                        type = "CompanyWise";
                    }
                    else if (SalesType == "Plant")
                    {
                        if (BranchId == "172")
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty), 2) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty), 2) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch NOT IN (538,  1801, 3625)) GROUP BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate));
                            cmd.Parameters.AddWithValue("@BranchID", BranchId);
                            Dt_PresentMonth = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else if (BranchId == "3625")
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty), 2) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty), 2) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch IN (4609, 3625)) GROUP BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate));
                            cmd.Parameters.AddWithValue("@BranchID", BranchId);
                            Dt_PresentMonth = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else if (BranchId == "1801")
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty), 2) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty), 2) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID)  GROUP BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate));
                            cmd.Parameters.AddWithValue("@BranchID", BranchId);
                            Dt_PresentMonth = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty), 2) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty), 2) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID)  GROUP BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate));
                            cmd.Parameters.AddWithValue("@BranchID", BranchId);
                            Dt_PresentMonth = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        if (BranchId == "172")
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty), 2) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty), 2) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch NOT IN (538,  1801, 3625)) GROUP BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-180));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-180));
                            cmd.Parameters.AddWithValue("@BranchID", BranchId);
                            Dt_LastSixthMonth = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else if (BranchId == "3625")
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty), 2) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty), 2) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch IN (4609, 3625)) GROUP BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-180));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-180));
                            cmd.Parameters.AddWithValue("@BranchID", BranchId);
                            Dt_LastSixthMonth = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else if (BranchId == "1801")
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty), 2) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty), 2) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID)  GROUP BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-180));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-180));
                            cmd.Parameters.AddWithValue("@BranchID", BranchId);
                            Dt_LastSixthMonth = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty), 2) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty), 2) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID)  GROUP BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-180));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-180));
                            cmd.Parameters.AddWithValue("@BranchID", BranchId);
                            Dt_LastSixthMonth = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        if (BranchId == "172")
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty), 2) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty), 2) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch NOT IN (538,  1801, 3625)) GROUP BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-30));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-30));
                            cmd.Parameters.AddWithValue("@BranchID", BranchId);
                            dtSub_lastMonthData = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else if (BranchId == "3625")
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty), 2) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty), 2) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch IN (4609, 3625)) GROUP BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-30));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-30));
                            cmd.Parameters.AddWithValue("@BranchID", BranchId);
                            dtSub_lastMonthData = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else if (BranchId == "1801")
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty), 2) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty), 2) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID)  GROUP BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-30));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-30));
                            cmd.Parameters.AddWithValue("@BranchID", BranchId);
                            dtSub_lastMonthData = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty), 2) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty), 2) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID)  GROUP BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-30));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-30));
                            cmd.Parameters.AddWithValue("@BranchID", BranchId);
                            dtSub_lastMonthData = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        if (BranchId == "172")
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty), 2) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty), 2) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch NOT IN (538,  1801, 3625)) GROUP BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-365));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-365));
                            cmd.Parameters.AddWithValue("@BranchID", BranchId);
                            dtSub_lastYearData = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else if (BranchId == "3625")
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty), 2) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty), 2) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch NOT IN (4609, 3625)) GROUP BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-365));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-365));
                            cmd.Parameters.AddWithValue("@BranchID", BranchId);
                            dtSub_lastYearData = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else if (BranchId == "1801")
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty), 2) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty), 2) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID)  GROUP BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-365));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-365));
                            cmd.Parameters.AddWithValue("@BranchID", BranchId);
                            dtSub_lastYearData = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty), 2) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty), 2) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID)  GROUP BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-365));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-365));
                            cmd.Parameters.AddWithValue("@BranchID", BranchId);
                            dtSub_lastYearData = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                    }
                    else
                    {
                        cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty), 2) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty), 2) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SubBranch = @BranchID) GROUP BY branchdata.sno");
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate));
                        cmd.Parameters.AddWithValue("@BranchID", BranchId);
                        Dt_PresentMonth = vdbmngr.SelectQuery(cmd).Tables[0];
                        cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty), 2) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty), 2) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SubBranch = @BranchID) GROUP BY branchdata.sno");
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-31));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-31));
                        cmd.Parameters.AddWithValue("@BranchID", BranchId);
                        dtSub_lastMonthData = vdbmngr.SelectQuery(cmd).Tables[0];
                        cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty), 2) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty), 2) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SubBranch = @BranchID) GROUP BY branchdata.sno");
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-180));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-180));
                        cmd.Parameters.AddWithValue("@BranchID", BranchId);
                        Dt_LastSixthMonth = vdbmngr.SelectQuery(cmd).Tables[0];
                        cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty), 2) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty), 2) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SubBranch = @BranchID) GROUP BY branchdata.sno");
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-365));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-365));
                        cmd.Parameters.AddWithValue("@BranchID", BranchId);
                        dtSub_lastYearData = vdbmngr.SelectQuery(cmd).Tables[0];
                    }

                    dtALL.Merge(Dt_PresentMonth);
                    dtALL.Merge(dtSub_lastMonthData);
                    dtALL.Merge(Dt_LastSixthMonth);
                    dtALL.Merge(dtSub_lastYearData);
                    DataTable disticntbarnchname = new DataTable();
                    if (BranchId == "8009" || BranchId == "8012" || BranchId == "8013")
                    {
                        DataView view = new DataView(dtALL);
                        disticntbarnchname = view.ToTable(true, "BranchName", "BranchID");
                    }
                    else
                    {
                        DataView view = new DataView(dtALL);
                        disticntbarnchname = view.ToTable(true, "BranchName", "sno");
                    }
                    Report = new DataTable();
                    Report.Columns.Add("BranchName");
                    Report.Columns.Add("BranchId");
                    Report.Columns.Add("This Month").DataType = typeof(Double);
                    Report.Columns.Add("Yester Day Avg").DataType = typeof(Double);
                    Report.Columns.Add("Last Sixth Month").DataType = typeof(Double);
                    Report.Columns.Add("Last Week Avg").DataType = typeof(Double);
                    Report.Columns.Add("Last Month").DataType = typeof(Double);
                    Report.Columns.Add("Last Month Avg").DataType = typeof(Double);
                    Report.Columns.Add("Last Year").DataType = typeof(Double);
                    Report.Columns.Add("Last Year Avg").DataType = typeof(Double);
                    DataRow newrow = Report.NewRow();
                    if (BranchId == "8009" || BranchId == "8012" || BranchId == "8013")
                    {
                        foreach (DataRow branch in disticntbarnchname.Rows)
                        {
                            DataRow newrow1 = Report.NewRow();
                            newrow1["BranchName"] = branch["BranchName"].ToString();
                            newrow1["BranchId"] = branch["BranchID"].ToString();
                            float DispQty = 0;
                            foreach (DataRow drSubData in Dt_PresentMonth.Rows)
                            {
                                if (branch["BranchID"].ToString() == drSubData["BranchID"].ToString())
                                {
                                    float.TryParse(drSubData["DeliveryQty"].ToString(), out DispQty);
                                    if (DispQty > 0)
                                    {
                                        newrow1["This Month"] = drSubData["DeliveryQty"].ToString();
                                        newrow1["Yester Day Avg"] = drSubData["AvgQty"].ToString();
                                        yesterdaygrandtotal += DispQty;
                                    }
                                }
                            }
                            foreach (DataRow drSubData in dtSub_lastMonthData.Rows)
                            {
                                if (branch["BranchID"].ToString() == drSubData["BranchID"].ToString())
                                {
                                    float.TryParse(drSubData["DeliveryQty"].ToString(), out DispQty);
                                    if (DispQty > 0)
                                    {
                                        newrow1["Last Month"] = drSubData["DeliveryQty"].ToString();
                                        newrow1["Last Month Avg"] = drSubData["AvgQty"].ToString();
                                        lastmonthgrandtotal += DispQty;
                                    }
                                }
                            }
                            foreach (DataRow drSubData in Dt_LastSixthMonth.Rows)
                            {
                                if (branch["BranchID"].ToString() == drSubData["BranchID"].ToString())
                                {
                                    float.TryParse(drSubData["DeliveryQty"].ToString(), out DispQty);
                                    if (DispQty > 0)
                                    {
                                        newrow1["Last Sixth Month"] = drSubData["DeliveryQty"].ToString();
                                        newrow1["Last Week Avg"] = drSubData["AvgQty"].ToString();
                                        lastweekgrandtotal += DispQty;
                                    }
                                }
                            }
                            foreach (DataRow drSubData in dtSub_lastYearData.Rows)
                            {
                                if (branch["BranchID"].ToString() == drSubData["BranchID"].ToString())
                                {
                                    float.TryParse(drSubData["DeliveryQty"].ToString(), out DispQty);
                                    if (DispQty > 0)
                                    {
                                        newrow1["Last Year"] = drSubData["DeliveryQty"].ToString();
                                        newrow1["Last Year Avg"] = drSubData["AvgQty"].ToString();
                                        lastyeargrandtotal += DispQty;
                                    }
                                }
                            }
                            Report.Rows.Add(newrow1);
                        }
                    }
                    else
                    {
                        foreach (DataRow branch in disticntbarnchname.Rows)
                        {
                            DataRow newrow1 = Report.NewRow();
                            newrow1["BranchName"] = branch["BranchName"].ToString();
                            newrow1["BranchId"] = branch["sno"].ToString();
                            float DispQty = 0;
                            foreach (DataRow drSubData in Dt_PresentMonth.Rows)
                            {
                                if (branch["sno"].ToString() == drSubData["sno"].ToString())
                                {
                                    float.TryParse(drSubData["DeliveryQty"].ToString(), out DispQty);
                                    if (DispQty > 0)
                                    {
                                        newrow1["This Month"] = drSubData["DeliveryQty"].ToString();
                                        newrow1["Yester Day Avg"] = drSubData["AvgQty"].ToString();
                                        yesterdaygrandtotal += DispQty;
                                    }
                                }
                            }
                            foreach (DataRow drSubData in Dt_LastSixthMonth.Rows)
                            {
                                if (branch["sno"].ToString() == drSubData["sno"].ToString())
                                {
                                    float.TryParse(drSubData["DeliveryQty"].ToString(), out DispQty);
                                    if (DispQty > 0)
                                    {
                                        newrow1["Last Sixth Month"] = drSubData["DeliveryQty"].ToString();
                                        newrow1["Last Week Avg"] = drSubData["AvgQty"].ToString();
                                        lastweekgrandtotal += DispQty;
                                    }
                                }
                            }
                            foreach (DataRow drSubData in dtSub_lastMonthData.Rows)
                            {
                                if (branch["sno"].ToString() == drSubData["sno"].ToString())
                                {
                                    float.TryParse(drSubData["DeliveryQty"].ToString(), out DispQty);
                                    if (DispQty > 0)
                                    {
                                        newrow1["Last Month"] = drSubData["DeliveryQty"].ToString();
                                        newrow1["Last Month Avg"] = drSubData["AvgQty"].ToString();
                                        lastmonthgrandtotal += DispQty;
                                    }
                                }
                            }
                            foreach (DataRow drSubData in dtSub_lastYearData.Rows)
                            {
                                if (branch["sno"].ToString() == drSubData["sno"].ToString())
                                {
                                    float.TryParse(drSubData["DeliveryQty"].ToString(), out DispQty);
                                    if (DispQty > 0)
                                    {
                                        newrow1["Last Year"] = drSubData["DeliveryQty"].ToString();
                                        newrow1["Last Year Avg"] = drSubData["AvgQty"].ToString();
                                        lastyeargrandtotal += DispQty;

                                    }
                                }
                            }
                            Report.Rows.Add(newrow1);
                        }
                    }
                    foreach (DataRow dr in Report.Rows)
                    {
                        LineChartValuesclass getLineChart = new LineChartValuesclass();
                        getLineChart.BranchName = dr["BranchName"].ToString(); ;
                        getLineChart.BranchID = dr["BranchId"].ToString(); ;
                        getLineChart.type = type;
                        getLineChart.DataType = Datatype;
                        double Percentage = 0; double tempPercentage = 0;
                        CultureInfo hindi = new CultureInfo("hi-IN");
                        if (dr["This Month"].ToString() != "")
                        {
                            double temp = 0;
                            double.TryParse(dr["This Month"].ToString(), out temp);
                            tempPercentage = (temp / yesterdaygrandtotal) * 100;
                            Percentage = Math.Round(tempPercentage, 2);
                            double avgqty = 0;
                            avgqty = temp / 2;
                            decimal yesterindent = decimal.Parse(dr["This Month"].ToString(), CultureInfo.InvariantCulture);
                            getLineChart.presentmonthindent = string.Format(hindi, "{0:#,#}", yesterindent);
                            getLineChart.presentmonthpercentage = Percentage.ToString();
                            getLineChart.presentmonthavg = avgqty.ToString();
                        }
                        else
                        {
                            getLineChart.presentmonthindent = "0";
                            getLineChart.presentmonthpercentage = "0";
                            getLineChart.presentmonthavg = "0";
                        }
                        if (dr["Last Month"].ToString() != "")
                        {
                            double temp = 0;
                            double.TryParse(dr["Last Month"].ToString(), out temp);
                            tempPercentage = (temp / lastmonthgrandtotal) * 100;
                            Percentage = Math.Round(tempPercentage, 2);
                            double avgqty = 0;
                            avgqty = temp / 2;
                            decimal lastmonthindent = decimal.Parse(dr["Last Month"].ToString(), CultureInfo.InvariantCulture);
                            getLineChart.lastmonthindent = string.Format(hindi, "{0:#,#}", lastmonthindent);
                            getLineChart.lastmonthpercentage = Percentage.ToString();
                            getLineChart.lastmonthaverage = avgqty.ToString();
                        }
                        else
                        {
                            getLineChart.lastmonthindent = "0";
                            getLineChart.lastmonthaverage = "0";
                            getLineChart.lastmonthpercentage = "0";
                        }
                        if (dr["Last Sixth Month"].ToString() != "")
                        {
                            double temp = 0;
                            double.TryParse(dr["Last Sixth Month"].ToString(), out temp);
                            tempPercentage = (temp / lastweekgrandtotal) * 100;
                            Percentage = Math.Round(tempPercentage, 2);
                            double avgqty = 0;
                            avgqty = temp / 2;
                            decimal lastweekindent = decimal.Parse(dr["Last Sixth Month"].ToString(), CultureInfo.InvariantCulture);
                            getLineChart.lastsixthmonthindent = string.Format(hindi, "{0:#,#}", lastweekindent);
                            getLineChart.lastsixthmonthpercentage = Percentage.ToString();
                            getLineChart.lastsixthmonthaverage = avgqty.ToString();
                        }
                        else
                        {
                            getLineChart.lastsixthmonthindent = "0";
                            getLineChart.lastsixthmonthpercentage = "0";
                            getLineChart.lastsixthmonthaverage = "0";
                        }

                        if (dr["Last Year"].ToString() != "")
                        {
                            double temp = 0;
                            double.TryParse(dr["Last Year"].ToString(), out temp);
                            tempPercentage = (temp / lastyeargrandtotal) * 100;
                            Percentage = Math.Round(tempPercentage, 2);
                            double avgqty = 0;
                            avgqty = temp / 2;
                            decimal lastyearindent = decimal.Parse(dr["Last Year"].ToString(), CultureInfo.InvariantCulture);
                            getLineChart.lastyearmonthindent = string.Format(hindi, "{0:#,#}", lastyearindent);
                            getLineChart.lastyearmonthpercentage = Percentage.ToString();
                            getLineChart.lastyearmonthaverage = avgqty.ToString();
                        }
                        else
                        {
                            getLineChart.lastyearmonthindent = "0";
                            getLineChart.lastyearmonthpercentage = "0";
                            getLineChart.lastyearmonthaverage = "0";
                        }
                        LineChartValuelist.Add(getLineChart);
                    }
                }
                #endregion
                #region
                else if (SectedDataType == "Monthly")
                {
                    if (BranchId == "8009")
                    {
                        cmd = new MySqlCommand("SELECT    TripInfo.Sno, TripInfo.DCNo, ROUND(SUM(ProductInfo.Qty), 2) AS DeliveryQty,ROUND(AVG(ProductInfo.Qty), 2) AS AvgQty, TripInfo.I_Date, TripInfo.VehicleNo, TripInfo.Status, TripInfo.DispName, TripInfo.DispType, TripInfo.DispMode, TripInfo.BranchID As Branch_id, TripInfo.BranchName, TripInfo.Branch_Id As BranchID FROM (SELECT  tripdata.Sno, tripdata.DCNo, tripdata.I_Date, tripdata.VehicleNo, tripdata.Status, dispatch.DispName, dispatch.DispType, dispatch.DispMode, dispatch.BranchID, branchdata_1.BranchName, dispatch.Branch_Id FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE  (dispatch.GroupId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT Qty, Sno FROM (SELECT tripdata_1.Sno, tripsubdata.Qty FROM  tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno WHERE (tripdata_1.AssignDate BETWEEN @d1 AND @d2)) TripSubInfo) ProductInfo ON TripInfo.Sno = ProductInfo.Sno GROUP BY TripInfo.Branch_Id");
                        cmd.Parameters.AddWithValue("@branch", BranchId);
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate));
                        Dt_PresentMonth = vdbmngr.SelectQuery(cmd).Tables[0];
                        cmd = new MySqlCommand("SELECT    TripInfo.Sno, TripInfo.DCNo, ROUND(SUM(ProductInfo.Qty), 2) AS DeliveryQty,ROUND(AVG(ProductInfo.Qty), 2) AS AvgQty, TripInfo.I_Date, TripInfo.VehicleNo, TripInfo.Status, TripInfo.DispName, TripInfo.DispType, TripInfo.DispMode, TripInfo.BranchID As Branch_id, TripInfo.BranchName, TripInfo.Branch_Id As BranchID FROM (SELECT  tripdata.Sno, tripdata.DCNo, tripdata.I_Date, tripdata.VehicleNo, tripdata.Status, dispatch.DispName, dispatch.DispType, dispatch.DispMode, dispatch.BranchID, branchdata_1.BranchName, dispatch.Branch_Id FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE  (dispatch.GroupId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT Qty, Sno FROM (SELECT tripdata_1.Sno, tripsubdata.Qty FROM  tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno WHERE (tripdata_1.AssignDate BETWEEN @d1 AND @d2)) TripSubInfo) ProductInfo ON TripInfo.Sno = ProductInfo.Sno GROUP BY TripInfo.Branch_Id");
                        cmd.Parameters.AddWithValue("@branch", BranchId);
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-31));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-31));
                        dtSub_lastMonthData = vdbmngr.SelectQuery(cmd).Tables[0];
                        cmd = new MySqlCommand("SELECT    TripInfo.Sno, TripInfo.DCNo, ROUND(SUM(ProductInfo.Qty), 2) AS DeliveryQty,ROUND(AVG(ProductInfo.Qty), 2) AS AvgQty, TripInfo.I_Date, TripInfo.VehicleNo, TripInfo.Status, TripInfo.DispName, TripInfo.DispType, TripInfo.DispMode, TripInfo.BranchID As Branch_id, TripInfo.BranchName, TripInfo.Branch_Id As BranchID FROM (SELECT  tripdata.Sno, tripdata.DCNo, tripdata.I_Date, tripdata.VehicleNo, tripdata.Status, dispatch.DispName, dispatch.DispType, dispatch.DispMode, dispatch.BranchID, branchdata_1.BranchName, dispatch.Branch_Id FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE  (dispatch.GroupId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT Qty, Sno FROM (SELECT tripdata_1.Sno, tripsubdata.Qty FROM  tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno WHERE (tripdata_1.AssignDate BETWEEN @d1 AND @d2)) TripSubInfo) ProductInfo ON TripInfo.Sno = ProductInfo.Sno GROUP BY TripInfo.Branch_Id");
                        cmd.Parameters.AddWithValue("@branch", BranchId);
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-180));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-180));
                        Dt_LastSixthMonth = vdbmngr.SelectQuery(cmd).Tables[0];
                        cmd = new MySqlCommand("SELECT    TripInfo.Sno, TripInfo.DCNo, ROUND(SUM(ProductInfo.Qty), 2) AS DeliveryQty,ROUND(AVG(ProductInfo.Qty), 2) AS AvgQty, TripInfo.I_Date, TripInfo.VehicleNo, TripInfo.Status, TripInfo.DispName, TripInfo.DispType, TripInfo.DispMode, TripInfo.BranchID As Branch_id, TripInfo.BranchName, TripInfo.Branch_Id As BranchID FROM (SELECT  tripdata.Sno, tripdata.DCNo, tripdata.I_Date, tripdata.VehicleNo, tripdata.Status, dispatch.DispName, dispatch.DispType, dispatch.DispMode, dispatch.BranchID, branchdata_1.BranchName, dispatch.Branch_Id FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE  (dispatch.GroupId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT Qty, Sno FROM (SELECT tripdata_1.Sno, tripsubdata.Qty FROM  tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno WHERE (tripdata_1.AssignDate BETWEEN @d1 AND @d2)) TripSubInfo) ProductInfo ON TripInfo.Sno = ProductInfo.Sno GROUP BY TripInfo.Branch_Id");
                        cmd.Parameters.AddWithValue("@branch", BranchId);
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-365));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-365));
                        dtSub_lastYearData = vdbmngr.SelectQuery(cmd).Tables[0];
                        type = "GroupWise";
                    }
                    else if (BranchId == "8012" || BranchId == "8013")
                    {
                        cmd = new MySqlCommand("SELECT    TripInfo.Sno, TripInfo.DCNo, ROUND(SUM(ProductInfo.Qty), 2) AS DeliveryQty,ROUND(AVG(ProductInfo.Qty), 2) AS AvgQty, TripInfo.I_Date, TripInfo.VehicleNo, TripInfo.Status, TripInfo.DispName, TripInfo.DispType, TripInfo.DispMode, TripInfo.BranchID As Branch_id, TripInfo.BranchName, TripInfo.Branch_Id As BranchID FROM (SELECT  tripdata.Sno, tripdata.DCNo, tripdata.I_Date, tripdata.VehicleNo, tripdata.Status, dispatch.DispName, dispatch.DispType, dispatch.DispMode, dispatch.BranchID, branchdata_1.BranchName, dispatch.Branch_Id FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE  (dispatch.CompanyId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT Qty, Sno FROM (SELECT tripdata_1.Sno, tripsubdata.Qty FROM  tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno WHERE (tripdata_1.AssignDate BETWEEN @d1 AND @d2)) TripSubInfo) ProductInfo ON TripInfo.Sno = ProductInfo.Sno GROUP BY TripInfo.Branch_Id");
                        cmd.Parameters.AddWithValue("@branch", BranchId);
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate));
                        Dt_PresentMonth = vdbmngr.SelectQuery(cmd).Tables[0];
                        cmd = new MySqlCommand("SELECT    TripInfo.Sno, TripInfo.DCNo, ROUND(SUM(ProductInfo.Qty), 2) AS DeliveryQty,ROUND(AVG(ProductInfo.Qty), 2) AS AvgQty, TripInfo.I_Date, TripInfo.VehicleNo, TripInfo.Status, TripInfo.DispName, TripInfo.DispType, TripInfo.DispMode, TripInfo.BranchID As Branch_id, TripInfo.BranchName, TripInfo.Branch_Id As BranchID FROM (SELECT  tripdata.Sno, tripdata.DCNo, tripdata.I_Date, tripdata.VehicleNo, tripdata.Status, dispatch.DispName, dispatch.DispType, dispatch.DispMode, dispatch.BranchID, branchdata_1.BranchName, dispatch.Branch_Id FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE  (dispatch.CompanyId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT Qty, Sno FROM (SELECT tripdata_1.Sno, tripsubdata.Qty FROM  tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno WHERE (tripdata_1.AssignDate BETWEEN @d1 AND @d2)) TripSubInfo) ProductInfo ON TripInfo.Sno = ProductInfo.Sno GROUP BY TripInfo.Branch_Id");
                        cmd.Parameters.AddWithValue("@branch", BranchId);
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-31));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-31));
                        dtSub_lastMonthData = vdbmngr.SelectQuery(cmd).Tables[0];
                        cmd = new MySqlCommand("SELECT    TripInfo.Sno, TripInfo.DCNo, ROUND(SUM(ProductInfo.Qty), 2) AS DeliveryQty,ROUND(AVG(ProductInfo.Qty), 2) AS AvgQty, TripInfo.I_Date, TripInfo.VehicleNo, TripInfo.Status, TripInfo.DispName, TripInfo.DispType, TripInfo.DispMode, TripInfo.BranchID As Branch_id, TripInfo.BranchName, TripInfo.Branch_Id As BranchID FROM (SELECT  tripdata.Sno, tripdata.DCNo, tripdata.I_Date, tripdata.VehicleNo, tripdata.Status, dispatch.DispName, dispatch.DispType, dispatch.DispMode, dispatch.BranchID, branchdata_1.BranchName, dispatch.Branch_Id FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE  (dispatch.CompanyId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT Qty, Sno FROM (SELECT tripdata_1.Sno, tripsubdata.Qty FROM  tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno WHERE (tripdata_1.AssignDate BETWEEN @d1 AND @d2)) TripSubInfo) ProductInfo ON TripInfo.Sno = ProductInfo.Sno GROUP BY TripInfo.Branch_Id");
                        cmd.Parameters.AddWithValue("@branch", BranchId);
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-180));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-180));
                        Dt_LastSixthMonth = vdbmngr.SelectQuery(cmd).Tables[0];
                        cmd = new MySqlCommand("SELECT    TripInfo.Sno, TripInfo.DCNo, ROUND(SUM(ProductInfo.Qty), 2) AS DeliveryQty,ROUND(AVG(ProductInfo.Qty), 2) AS AvgQty, TripInfo.I_Date, TripInfo.VehicleNo, TripInfo.Status, TripInfo.DispName, TripInfo.DispType, TripInfo.DispMode, TripInfo.BranchID As Branch_id, TripInfo.BranchName, TripInfo.Branch_Id As BranchID FROM (SELECT  tripdata.Sno, tripdata.DCNo, tripdata.I_Date, tripdata.VehicleNo, tripdata.Status, dispatch.DispName, dispatch.DispType, dispatch.DispMode, dispatch.BranchID, branchdata_1.BranchName, dispatch.Branch_Id FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE  (dispatch.CompanyId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT Qty, Sno FROM (SELECT tripdata_1.Sno, tripsubdata.Qty FROM  tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno WHERE (tripdata_1.AssignDate BETWEEN @d1 AND @d2)) TripSubInfo) ProductInfo ON TripInfo.Sno = ProductInfo.Sno GROUP BY TripInfo.Branch_Id");
                        cmd.Parameters.AddWithValue("@branch", BranchId);
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-365));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-365));
                        dtSub_lastYearData = vdbmngr.SelectQuery(cmd).Tables[0];
                        type = "CompanyWise";
                    }
                    else if (SalesType == "Plant")
                    {
                        if (BranchId == "172")
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty), 2) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty), 2) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch NOT IN (538,  1801, 3625)) GROUP BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate));
                            cmd.Parameters.AddWithValue("@BranchID", BranchId);
                            Dt_PresentMonth = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else if (BranchId == "3625")
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty), 2) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty), 2) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch IN (4609, 3625)) GROUP BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate));
                            cmd.Parameters.AddWithValue("@BranchID", BranchId);
                            Dt_PresentMonth = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else if (BranchId == "1801")
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty), 2) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty), 2) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID)  GROUP BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate));
                            cmd.Parameters.AddWithValue("@BranchID", BranchId);
                            Dt_PresentMonth = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty), 2) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty), 2) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID)  GROUP BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate));
                            cmd.Parameters.AddWithValue("@BranchID", BranchId);
                            Dt_PresentMonth = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        if (BranchId == "172")
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty), 2) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty), 2) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch NOT IN (538,  1801, 3625)) GROUP BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-180));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-180));
                            cmd.Parameters.AddWithValue("@BranchID", BranchId);
                            Dt_LastSixthMonth = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else if (BranchId == "3625")
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty), 2) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty), 2) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch IN (4609, 3625)) GROUP BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-180));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-180));
                            cmd.Parameters.AddWithValue("@BranchID", BranchId);
                            Dt_LastSixthMonth = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else if (BranchId == "1801")
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty), 2) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty), 2) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID)  GROUP BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-180));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-180));
                            cmd.Parameters.AddWithValue("@BranchID", BranchId);
                            Dt_LastSixthMonth = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty), 2) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty), 2) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID)  GROUP BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-180));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-180));
                            cmd.Parameters.AddWithValue("@BranchID", BranchId);
                            Dt_LastSixthMonth = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        if (BranchId == "172")
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty), 2) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty), 2) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch NOT IN (538,  1801, 3625)) GROUP BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-30));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-30));
                            cmd.Parameters.AddWithValue("@BranchID", BranchId);
                            dtSub_lastMonthData = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else if (BranchId == "3625")
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty), 2) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty), 2) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch IN (4609, 3625)) GROUP BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-30));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-30));
                            cmd.Parameters.AddWithValue("@BranchID", BranchId);
                            dtSub_lastMonthData = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else if (BranchId == "1801")
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty), 2) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty), 2) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID)  GROUP BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-30));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-30));
                            cmd.Parameters.AddWithValue("@BranchID", BranchId);
                            dtSub_lastMonthData = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty), 2) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty), 2) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID)  GROUP BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-30));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-30));
                            cmd.Parameters.AddWithValue("@BranchID", BranchId);
                            dtSub_lastMonthData = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        if (BranchId == "172")
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty), 2) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty), 2) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch NOT IN (538,  1801, 3625)) GROUP BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-365));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-365));
                            cmd.Parameters.AddWithValue("@BranchID", BranchId);
                            dtSub_lastYearData = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else if (BranchId == "3625")
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty), 2) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty), 2) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch NOT IN (4609, 3625)) GROUP BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-365));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-365));
                            cmd.Parameters.AddWithValue("@BranchID", BranchId);
                            dtSub_lastYearData = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else if (BranchId == "1801")
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty), 2) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty), 2) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID)  GROUP BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-365));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-365));
                            cmd.Parameters.AddWithValue("@BranchID", BranchId);
                            dtSub_lastYearData = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty), 2) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty), 2) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID)  GROUP BY branchdata.sno");
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-365));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-365));
                            cmd.Parameters.AddWithValue("@BranchID", BranchId);
                            dtSub_lastYearData = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                    }
                    else
                    {
                        cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty), 2) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty), 2) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SubBranch = @BranchID) GROUP BY branchdata.sno");
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate));
                        cmd.Parameters.AddWithValue("@BranchID", BranchId);
                        Dt_PresentMonth = vdbmngr.SelectQuery(cmd).Tables[0];
                        cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty), 2) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty), 2) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SubBranch = @BranchID) GROUP BY branchdata.sno");
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-31));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-31));
                        cmd.Parameters.AddWithValue("@BranchID", BranchId);
                        dtSub_lastMonthData = vdbmngr.SelectQuery(cmd).Tables[0];
                        cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty), 2) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty), 2) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SubBranch = @BranchID) GROUP BY branchdata.sno");
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-180));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-180));
                        cmd.Parameters.AddWithValue("@BranchID", BranchId);
                        Dt_LastSixthMonth = vdbmngr.SelectQuery(cmd).Tables[0];
                        cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty), 2) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty), 2) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SubBranch = @BranchID) GROUP BY branchdata.sno");
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-365));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-365));
                        cmd.Parameters.AddWithValue("@BranchID", BranchId);
                        dtSub_lastYearData = vdbmngr.SelectQuery(cmd).Tables[0];
                    }

                    dtALL.Merge(Dt_PresentMonth);
                    dtALL.Merge(dtSub_lastMonthData);
                    dtALL.Merge(Dt_LastSixthMonth);
                    dtALL.Merge(dtSub_lastYearData);
                    DataTable disticntbarnchname = new DataTable();
                    if (BranchId == "8009" || BranchId == "8012" || BranchId == "8013")
                    {
                        DataView view = new DataView(dtALL);
                        disticntbarnchname = view.ToTable(true, "BranchName", "BranchID");
                    }
                    else
                    {
                        DataView view = new DataView(dtALL);
                        disticntbarnchname = view.ToTable(true, "BranchName", "sno");
                    }
                    Report = new DataTable();
                    Report.Columns.Add("BranchName");
                    Report.Columns.Add("BranchId");
                    Report.Columns.Add("This Month").DataType = typeof(Double);
                    Report.Columns.Add("Yester Day Avg").DataType = typeof(Double);
                    Report.Columns.Add("Last Sixth Month").DataType = typeof(Double);
                    Report.Columns.Add("Last Week Avg").DataType = typeof(Double);
                    Report.Columns.Add("Last Month").DataType = typeof(Double);
                    Report.Columns.Add("Last Month Avg").DataType = typeof(Double);
                    Report.Columns.Add("Last Year").DataType = typeof(Double);
                    Report.Columns.Add("Last Year Avg").DataType = typeof(Double);
                    DataRow newrow = Report.NewRow();
                    if (BranchId == "8009" || BranchId == "8012" || BranchId == "8013")
                    {
                        foreach (DataRow branch in disticntbarnchname.Rows)
                        {
                            DataRow newrow1 = Report.NewRow();
                            newrow1["BranchName"] = branch["BranchName"].ToString();
                            newrow1["BranchId"] = branch["BranchID"].ToString();
                            float DispQty = 0;
                            foreach (DataRow drSubData in Dt_PresentMonth.Rows)
                            {
                                if (branch["BranchID"].ToString() == drSubData["BranchID"].ToString())
                                {
                                    float.TryParse(drSubData["DeliveryQty"].ToString(), out DispQty);
                                    if (DispQty > 0)
                                    {
                                        newrow1["This Month"] = drSubData["DeliveryQty"].ToString();
                                        newrow1["Yester Day Avg"] = drSubData["AvgQty"].ToString();
                                        yesterdaygrandtotal += DispQty;
                                    }
                                }
                            }
                            foreach (DataRow drSubData in dtSub_lastMonthData.Rows)
                            {
                                if (branch["BranchID"].ToString() == drSubData["BranchID"].ToString())
                                {
                                    float.TryParse(drSubData["DeliveryQty"].ToString(), out DispQty);
                                    if (DispQty > 0)
                                    {
                                        newrow1["Last Month"] = drSubData["DeliveryQty"].ToString();
                                        newrow1["Last Month Avg"] = drSubData["AvgQty"].ToString();
                                        lastmonthgrandtotal += DispQty;
                                    }
                                }
                            }
                            foreach (DataRow drSubData in Dt_LastSixthMonth.Rows)
                            {
                                if (branch["BranchID"].ToString() == drSubData["BranchID"].ToString())
                                {
                                    float.TryParse(drSubData["DeliveryQty"].ToString(), out DispQty);
                                    if (DispQty > 0)
                                    {
                                        newrow1["Last Sixth Month"] = drSubData["DeliveryQty"].ToString();
                                        newrow1["Last Week Avg"] = drSubData["AvgQty"].ToString();
                                        lastweekgrandtotal += DispQty;

                                    }
                                }
                            }
                            foreach (DataRow drSubData in dtSub_lastYearData.Rows)
                            {
                                if (branch["BranchID"].ToString() == drSubData["BranchID"].ToString())
                                {
                                    float.TryParse(drSubData["DeliveryQty"].ToString(), out DispQty);
                                    if (DispQty > 0)
                                    {
                                        newrow1["Last Year"] = drSubData["DeliveryQty"].ToString();
                                        newrow1["Last Year Avg"] = drSubData["AvgQty"].ToString();
                                        lastyeargrandtotal += DispQty;
                                    }
                                }
                            }
                            Report.Rows.Add(newrow1);
                        }
                    }
                    else
                    {
                        foreach (DataRow branch in disticntbarnchname.Rows)
                        {
                            DataRow newrow1 = Report.NewRow();
                            newrow1["BranchName"] = branch["BranchName"].ToString();
                            newrow1["BranchId"] = branch["sno"].ToString();
                            float DispQty = 0;
                            foreach (DataRow drSubData in Dt_PresentMonth.Rows)
                            {
                                if (branch["sno"].ToString() == drSubData["sno"].ToString())
                                {
                                    float.TryParse(drSubData["DeliveryQty"].ToString(), out DispQty);
                                    if (DispQty > 0)
                                    {
                                        newrow1["This Month"] = drSubData["DeliveryQty"].ToString();
                                        newrow1["Yester Day Avg"] = drSubData["AvgQty"].ToString();
                                        yesterdaygrandtotal += DispQty;
                                    }
                                }
                            }
                            foreach (DataRow drSubData in Dt_LastSixthMonth.Rows)
                            {
                                if (branch["sno"].ToString() == drSubData["sno"].ToString())
                                {
                                    float.TryParse(drSubData["DeliveryQty"].ToString(), out DispQty);
                                    if (DispQty > 0)
                                    {
                                        newrow1["Last Sixth Month"] = drSubData["DeliveryQty"].ToString();
                                        newrow1["Last Week Avg"] = drSubData["AvgQty"].ToString();
                                        lastweekgrandtotal += DispQty;
                                    }
                                }
                            }
                            foreach (DataRow drSubData in dtSub_lastMonthData.Rows)
                            {
                                if (branch["sno"].ToString() == drSubData["sno"].ToString())
                                {
                                    float.TryParse(drSubData["DeliveryQty"].ToString(), out DispQty);
                                    if (DispQty > 0)
                                    {
                                        newrow1["Last Month"] = drSubData["DeliveryQty"].ToString();
                                        newrow1["Last Month Avg"] = drSubData["AvgQty"].ToString();
                                        lastmonthgrandtotal += DispQty;
                                    }
                                }
                            }
                            foreach (DataRow drSubData in dtSub_lastYearData.Rows)
                            {
                                if (branch["sno"].ToString() == drSubData["sno"].ToString())
                                {
                                    float.TryParse(drSubData["DeliveryQty"].ToString(), out DispQty);
                                    if (DispQty > 0)
                                    {
                                        newrow1["Last Year"] = drSubData["DeliveryQty"].ToString();
                                        newrow1["Last Year Avg"] = drSubData["AvgQty"].ToString();
                                        lastyeargrandtotal += DispQty;
                                    }
                                }
                            }
                            Report.Rows.Add(newrow1);
                        }
                    }

                    foreach (DataRow dr in Report.Rows)
                    {
                        LineChartValuesclass getLineChart = new LineChartValuesclass();
                        getLineChart.BranchName = dr["BranchName"].ToString(); ;
                        getLineChart.BranchID = dr["BranchId"].ToString(); ;
                        getLineChart.type = type;
                        getLineChart.DataType = Datatype;
                        double Percentage = 0; double tempPercentage = 0;
                        CultureInfo hindi = new CultureInfo("hi-IN");
                        if (dr["This Month"].ToString() != "")
                        {
                            double temp = 0;
                            double.TryParse(dr["This Month"].ToString(), out temp);
                            tempPercentage = (temp / yesterdaygrandtotal) * 100;
                            Percentage = Math.Round(tempPercentage, 2);
                            double avgqty = 0;
                            avgqty = temp / 2;
                            decimal yesterindent = decimal.Parse(dr["This Month"].ToString(), CultureInfo.InvariantCulture);
                            getLineChart.presentmonthindent = string.Format(hindi, "{0:#,#}", yesterindent);
                            getLineChart.presentmonthpercentage = Percentage.ToString();
                            getLineChart.presentmonthavg = avgqty.ToString();
                        }
                        else
                        {
                            getLineChart.presentmonthindent = "0";
                            getLineChart.presentmonthpercentage = "0";
                            getLineChart.presentmonthavg = "0";
                        }
                        if (dr["Last Month"].ToString() != "")
                        {
                            double temp = 0;
                            double.TryParse(dr["Last Month"].ToString(), out temp);
                            tempPercentage = (temp / lastmonthgrandtotal) * 100;
                            Percentage = Math.Round(tempPercentage, 2);
                            double avgqty = 0;
                            avgqty = temp / 2;
                            decimal lastmonthindent = decimal.Parse(dr["Last Month"].ToString(), CultureInfo.InvariantCulture);
                            getLineChart.lastmonthindent = string.Format(hindi, "{0:#,#}", lastmonthindent);
                            getLineChart.lastmonthpercentage = Percentage.ToString();
                            getLineChart.lastmonthaverage = avgqty.ToString();
                        }
                        else
                        {
                            getLineChart.lastmonthindent = "0";
                            getLineChart.lastmonthaverage = "0";
                            getLineChart.lastmonthpercentage = "0";
                        }
                        if (dr["Last Sixth Month"].ToString() != "")
                        {
                            double temp = 0;
                            double.TryParse(dr["Last Sixth Month"].ToString(), out temp);
                            tempPercentage = (temp / lastweekgrandtotal) * 100;
                            Percentage = Math.Round(tempPercentage, 2);
                            double avgqty = 0;
                            avgqty = temp / 2;
                            decimal lastweekindent = decimal.Parse(dr["Last Sixth Month"].ToString(), CultureInfo.InvariantCulture);
                            getLineChart.lastsixthmonthindent = string.Format(hindi, "{0:#,#}", lastweekindent);
                            getLineChart.lastsixthmonthpercentage = Percentage.ToString();
                            getLineChart.lastsixthmonthaverage = avgqty.ToString();
                        }
                        else
                        {
                            getLineChart.lastsixthmonthindent = "0";
                            getLineChart.lastsixthmonthpercentage = "0";
                            getLineChart.lastsixthmonthaverage = "0";
                        }

                        if (dr["Last Year"].ToString() != "")
                        {
                            double temp = 0;
                            double.TryParse(dr["Last Year"].ToString(), out temp);
                            tempPercentage = (temp / lastyeargrandtotal) * 100;
                            Percentage = Math.Round(tempPercentage, 2);
                            double avgqty = 0;
                            avgqty = temp / 2;
                            decimal lastyearindent = decimal.Parse(dr["Last Year"].ToString(), CultureInfo.InvariantCulture);
                            getLineChart.lastyearmonthindent = string.Format(hindi, "{0:#,#}", lastyearindent);
                            getLineChart.lastyearmonthpercentage = Percentage.ToString();
                            getLineChart.lastyearmonthaverage = avgqty.ToString();
                        }
                        else
                        {
                            getLineChart.lastyearmonthindent = "0";
                            getLineChart.lastyearmonthpercentage = "0";
                            getLineChart.lastyearmonthaverage = "0";
                        }
                        LineChartValuelist.Add(getLineChart);
                    }
                }
                #endregion
                else
                {

                }
            }
            #endregion
            #region
            else
            {
                if (BranchId == "8009")
                {
                    cmd = new MySqlCommand("SELECT    TripInfo.Sno, TripInfo.DCNo, ROUND(SUM(ProductInfo.Qty), 2) AS DeliveryQty,ROUND(AVG(ProductInfo.Qty), 2) AS AvgQty, TripInfo.I_Date, TripInfo.VehicleNo, TripInfo.Status, TripInfo.DispName, TripInfo.DispType, TripInfo.DispMode, TripInfo.BranchID As Branch_id, TripInfo.BranchName, TripInfo.Branch_Id As BranchID FROM (SELECT  tripdata.Sno, tripdata.DCNo, tripdata.I_Date, tripdata.VehicleNo, tripdata.Status, dispatch.DispName, dispatch.DispType, dispatch.DispMode, dispatch.BranchID, branchdata_1.BranchName, dispatch.Branch_Id FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE  (dispatch.GroupId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT Qty, Sno FROM (SELECT tripdata_1.Sno, tripsubdata.Qty FROM  tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno WHERE (tripdata_1.AssignDate BETWEEN @d1 AND @d2)) TripSubInfo) ProductInfo ON TripInfo.Sno = ProductInfo.Sno GROUP BY TripInfo.Branch_Id");
                    cmd.Parameters.AddWithValue("@branch", BranchId);
                    cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate));
                    cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate));
                    Dt_PresentYear = vdbmngr.SelectQuery(cmd).Tables[0];
                    cmd = new MySqlCommand("SELECT    TripInfo.Sno, TripInfo.DCNo, ROUND(SUM(ProductInfo.Qty), 2) AS DeliveryQty,ROUND(AVG(ProductInfo.Qty), 2) AS AvgQty, TripInfo.I_Date, TripInfo.VehicleNo, TripInfo.Status, TripInfo.DispName, TripInfo.DispType, TripInfo.DispMode, TripInfo.BranchID As Branch_id, TripInfo.BranchName, TripInfo.Branch_Id As BranchID FROM (SELECT  tripdata.Sno, tripdata.DCNo, tripdata.I_Date, tripdata.VehicleNo, tripdata.Status, dispatch.DispName, dispatch.DispType, dispatch.DispMode, dispatch.BranchID, branchdata_1.BranchName, dispatch.Branch_Id FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE  (dispatch.GroupId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT Qty, Sno FROM (SELECT tripdata_1.Sno, tripsubdata.Qty FROM  tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno WHERE (tripdata_1.AssignDate BETWEEN @d1 AND @d2)) TripSubInfo) ProductInfo ON TripInfo.Sno = ProductInfo.Sno GROUP BY TripInfo.Branch_Id");
                    cmd.Parameters.AddWithValue("@branch", BranchId);
                    cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-365));
                    cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-365));
                    dtSub_lastYearData = vdbmngr.SelectQuery(cmd).Tables[0];
                    type = "GroupWise";
                }
                else if (BranchId == "8012" || BranchId == "8013")
                {
                    cmd = new MySqlCommand("SELECT    TripInfo.Sno, TripInfo.DCNo, ROUND(SUM(ProductInfo.Qty), 2) AS DeliveryQty,ROUND(AVG(ProductInfo.Qty), 2) AS AvgQty, TripInfo.I_Date, TripInfo.VehicleNo, TripInfo.Status, TripInfo.DispName, TripInfo.DispType, TripInfo.DispMode, TripInfo.BranchID As Branch_id, TripInfo.BranchName, TripInfo.Branch_Id As BranchID FROM (SELECT  tripdata.Sno, tripdata.DCNo, tripdata.I_Date, tripdata.VehicleNo, tripdata.Status, dispatch.DispName, dispatch.DispType, dispatch.DispMode, dispatch.BranchID, branchdata_1.BranchName, dispatch.Branch_Id FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE  (dispatch.CompanyId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT Qty, Sno FROM (SELECT tripdata_1.Sno, tripsubdata.Qty FROM  tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno WHERE (tripdata_1.AssignDate BETWEEN @d1 AND @d2)) TripSubInfo) ProductInfo ON TripInfo.Sno = ProductInfo.Sno GROUP BY TripInfo.Branch_Id");
                    cmd.Parameters.AddWithValue("@branch", BranchId);
                    cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate));
                    cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate));
                    Dt_PresentYear = vdbmngr.SelectQuery(cmd).Tables[0];
                    cmd = new MySqlCommand("SELECT    TripInfo.Sno, TripInfo.DCNo, ROUND(SUM(ProductInfo.Qty), 2) AS DeliveryQty,ROUND(AVG(ProductInfo.Qty), 2) AS AvgQty, TripInfo.I_Date, TripInfo.VehicleNo, TripInfo.Status, TripInfo.DispName, TripInfo.DispType, TripInfo.DispMode, TripInfo.BranchID As Branch_id, TripInfo.BranchName, TripInfo.Branch_Id As BranchID FROM (SELECT  tripdata.Sno, tripdata.DCNo, tripdata.I_Date, tripdata.VehicleNo, tripdata.Status, dispatch.DispName, dispatch.DispType, dispatch.DispMode, dispatch.BranchID, branchdata_1.BranchName, dispatch.Branch_Id FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE  (dispatch.CompanyId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT Qty, Sno FROM (SELECT tripdata_1.Sno, tripsubdata.Qty FROM  tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno WHERE (tripdata_1.AssignDate BETWEEN @d1 AND @d2)) TripSubInfo) ProductInfo ON TripInfo.Sno = ProductInfo.Sno GROUP BY TripInfo.Branch_Id");
                    cmd.Parameters.AddWithValue("@branch", BranchId);
                    cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-365));
                    cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-365));
                    dtSub_lastYearData = vdbmngr.SelectQuery(cmd).Tables[0];
                    type = "CompanyWise";
                }
                else if (SalesType == "Plant")
                {
                    if (BranchId == "172")
                    {
                        cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty), 2) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty), 2) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch NOT IN (538,  1801, 3625)) GROUP BY branchdata.sno");
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate));
                        cmd.Parameters.AddWithValue("@BranchID", BranchId);
                        Dt_PresentYear = vdbmngr.SelectQuery(cmd).Tables[0];
                    }
                    else if (BranchId == "3625")
                    {
                        cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty), 2) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty), 2) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch IN (4609, 3625)) GROUP BY branchdata.sno");
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate));
                        cmd.Parameters.AddWithValue("@BranchID", BranchId);
                        Dt_PresentYear = vdbmngr.SelectQuery(cmd).Tables[0];
                    }
                    else if (BranchId == "1801")
                    {
                        cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty), 2) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty), 2) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID)  GROUP BY branchdata.sno");
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate));
                        cmd.Parameters.AddWithValue("@BranchID", BranchId);
                        Dt_PresentYear = vdbmngr.SelectQuery(cmd).Tables[0];
                    }
                    else
                    {
                        cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty), 2) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty), 2) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID)  GROUP BY branchdata.sno");
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate));
                        cmd.Parameters.AddWithValue("@BranchID", BranchId);
                        Dt_PresentYear = vdbmngr.SelectQuery(cmd).Tables[0];
                    }
                    if (BranchId == "172")
                    {
                        cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty), 2) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty), 2) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch NOT IN (538,  1801, 3625)) GROUP BY branchdata.sno");
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-365));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-365));
                        cmd.Parameters.AddWithValue("@BranchID", BranchId);
                        dtSub_lastYearData = vdbmngr.SelectQuery(cmd).Tables[0];
                    }
                    else if (BranchId == "3625")
                    {
                        cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty), 2) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty), 2) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch NOT IN (4609, 3625)) GROUP BY branchdata.sno");
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-365));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-365));
                        cmd.Parameters.AddWithValue("@BranchID", BranchId);
                        dtSub_lastYearData = vdbmngr.SelectQuery(cmd).Tables[0];
                    }
                    else if (BranchId == "1801")
                    {
                        cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty), 2) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty), 2) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID)  GROUP BY branchdata.sno");
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-365));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-365));
                        cmd.Parameters.AddWithValue("@BranchID", BranchId);
                        dtSub_lastYearData = vdbmngr.SelectQuery(cmd).Tables[0];
                    }
                    else
                    {
                        cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty), 2) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty), 2) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID)  GROUP BY branchdata.sno");
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-365));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-365));
                        cmd.Parameters.AddWithValue("@BranchID", BranchId);
                        dtSub_lastYearData = vdbmngr.SelectQuery(cmd).Tables[0];
                    }
                }
                else
                {
                    cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty), 2) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty), 2) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SubBranch = @BranchID) GROUP BY branchdata.sno");
                    cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate));
                    cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate));
                    cmd.Parameters.AddWithValue("@BranchID", BranchId);
                    Dt_PresentYear = vdbmngr.SelectQuery(cmd).Tables[0];
                    cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty), 2) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty), 2) AS SaleValue, branchdata.sno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SubBranch = @BranchID) GROUP BY branchdata.sno");
                    cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-365));
                    cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-365));
                    cmd.Parameters.AddWithValue("@BranchID", BranchId);
                    dtSub_lastYearData = vdbmngr.SelectQuery(cmd).Tables[0];
                }
                dtALL.Merge(Dt_PresentYear);
                dtALL.Merge(dtSub_lastYearData);
                DataTable disticntbarnchname = new DataTable();
                if (BranchId == "8009" || BranchId == "8012" || BranchId == "8013")
                {
                    DataView view = new DataView(dtALL);
                    disticntbarnchname = view.ToTable(true, "BranchName", "BranchID");
                }
                else
                {
                    DataView view = new DataView(dtALL);
                    disticntbarnchname = view.ToTable(true, "BranchName", "sno");
                }
                Report = new DataTable();
                Report.Columns.Add("BranchName");
                Report.Columns.Add("BranchId");
                Report.Columns.Add("Yester Day").DataType = typeof(Double);
                Report.Columns.Add("Yester Day Avg").DataType = typeof(Double);
                Report.Columns.Add("Last Week").DataType = typeof(Double);
                Report.Columns.Add("Last Week Avg").DataType = typeof(Double);
                Report.Columns.Add("Last Month").DataType = typeof(Double);
                Report.Columns.Add("Last Month Avg").DataType = typeof(Double);
                Report.Columns.Add("This Year").DataType = typeof(Double);
                Report.Columns.Add("This Year Avg").DataType = typeof(Double);
                Report.Columns.Add("Last Year").DataType = typeof(Double);
                Report.Columns.Add("Last Year Avg").DataType = typeof(Double);
                DataRow newrow = Report.NewRow();
                if (BranchId == "8009" || BranchId == "8012" || BranchId == "8013")
                {
                    foreach (DataRow branch in disticntbarnchname.Rows)
                    {
                        DataRow newrow1 = Report.NewRow();
                        newrow1["BranchName"] = branch["BranchName"].ToString();
                        newrow1["BranchId"] = branch["BranchID"].ToString();
                        float DispQty = 0;
                        foreach (DataRow drSubData in Dt_PresentYear.Rows)
                        {
                            if (branch["BranchID"].ToString() == drSubData["BranchID"].ToString())
                            {
                                float.TryParse(drSubData["DeliveryQty"].ToString(), out DispQty);
                                if (DispQty > 0)
                                {
                                    newrow1["This Year"] = drSubData["DeliveryQty"].ToString();
                                    newrow1["Last Month Avg"] = drSubData["AvgQty"].ToString();
                                    lastmonthgrandtotal += DispQty;
                                }
                            }
                        }

                        foreach (DataRow drSubData in dtSub_lastYearData.Rows)
                        {
                            if (branch["BranchID"].ToString() == drSubData["BranchID"].ToString())
                            {
                                float.TryParse(drSubData["DeliveryQty"].ToString(), out DispQty);
                                if (DispQty > 0)
                                {
                                    newrow1["Last Year"] = drSubData["DeliveryQty"].ToString();
                                    newrow1["Last Year Avg"] = drSubData["AvgQty"].ToString();
                                    lastyeargrandtotal += DispQty;
                                }
                            }
                        }
                        Report.Rows.Add(newrow1);
                    }
                }
                else
                {
                    foreach (DataRow branch in disticntbarnchname.Rows)
                    {
                        DataRow newrow1 = Report.NewRow();
                        newrow1["BranchName"] = branch["BranchName"].ToString();
                        newrow1["BranchId"] = branch["sno"].ToString();
                        float DispQty = 0;
                        foreach (DataRow drSubData in Dt_PresentYear.Rows)
                        {
                            if (branch["sno"].ToString() == drSubData["sno"].ToString())
                            {
                                float.TryParse(drSubData["DeliveryQty"].ToString(), out DispQty);
                                if (DispQty > 0)
                                {
                                    newrow1["This Year"] = drSubData["DeliveryQty"].ToString();
                                    newrow1["Last Month Avg"] = drSubData["AvgQty"].ToString();
                                    lastmonthgrandtotal += DispQty;
                                }
                            }
                        }

                        foreach (DataRow drSubData in dtSub_lastYearData.Rows)
                        {
                            if (branch["sno"].ToString() == drSubData["sno"].ToString())
                            {
                                float.TryParse(drSubData["DeliveryQty"].ToString(), out DispQty);
                                if (DispQty > 0)
                                {
                                    newrow1["Last Year"] = drSubData["DeliveryQty"].ToString();
                                    newrow1["Last Year Avg"] = drSubData["AvgQty"].ToString();
                                    lastyeargrandtotal += DispQty;
                                }
                            }
                        }
                        Report.Rows.Add(newrow1);
                    }
                }

                foreach (DataRow dr in Report.Rows)
                {
                    LineChartValuesclass getLineChart = new LineChartValuesclass();
                    getLineChart.BranchName = dr["BranchName"].ToString(); ;
                    getLineChart.BranchID = dr["BranchId"].ToString(); ;
                    getLineChart.type = type;
                    getLineChart.DataType = Datatype;
                    double Percentage = 0; double tempPercentage = 0;
                    CultureInfo hindi = new CultureInfo("hi-IN");
                    if (dr["This Year"].ToString() != "")
                    {
                        double temp = 0;
                        double.TryParse(dr["This Year"].ToString(), out temp);
                        tempPercentage = (temp / lastmonthgrandtotal) * 100;
                        Percentage = Math.Round(tempPercentage, 2);
                        double avgqty = 0;
                        avgqty = temp / 2;
                        decimal lastmonthindent = decimal.Parse(dr["This Year"].ToString(), CultureInfo.InvariantCulture);
                        getLineChart.presentyearindent = string.Format(hindi, "{0:#,#}", lastmonthindent);
                        getLineChart.presentyearpercentage = Percentage.ToString();
                        getLineChart.presentyearhavg = avgqty.ToString();
                    }
                    else
                    {
                        getLineChart.presentyearindent = "0";
                        getLineChart.presentyearpercentage = "0";
                        getLineChart.presentyearhavg = "0";
                    }
                    if (dr["Last Year"].ToString() != "")
                    {
                        double temp = 0;
                        double.TryParse(dr["Last Year"].ToString(), out temp);
                        tempPercentage = (temp / lastyeargrandtotal) * 100;
                        Percentage = Math.Round(tempPercentage, 2);
                        double avgqty = 0;
                        avgqty = temp / 2;
                        decimal lastyearindent = decimal.Parse(dr["Last Year"].ToString(), CultureInfo.InvariantCulture);
                        getLineChart.lastyearindent = string.Format(hindi, "{0:#,#}", lastyearindent);
                        getLineChart.lastyearpercentage = Percentage.ToString();
                        getLineChart.lastyearaverage = avgqty.ToString();
                    }
                    else
                    {
                        getLineChart.lastyearindent = "0";
                        getLineChart.lastyearaverage = "0";
                        getLineChart.lastyearpercentage = "0";
                    }
                    LineChartValuelist.Add(getLineChart);
                }
                #endregion

            }
            string msg = "ok";
            string respnceString = GetJson(msg);
            context.Response.Write(respnceString);
        }
        catch
        {
        }
    }
    private void get_RouteWiseDay_Comparison(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            DateTime ServerDateCurrentdate = VehicleDBMgr.GetTime(vdbmngr.conn);
            string BranchId = context.Request["BranchId"];
            string test = context.Request["test"];
            DateTime FromDate = new DateTime();
            DateTime ToDate = new DateTime();
            if (test != "Report")
            {
                string s = context.Request["FromDate"];
                var dt = DateTime.ParseExact(s, "ddd MMM dd yyyy HH:mm:ss 'GMT'zzz", System.Globalization.CultureInfo.InvariantCulture);
                string Fdate = dt.ToString("yyyy-MM-dd");
                FromDate = Convert.ToDateTime(Fdate);
                string e = context.Request["Todate"];
                var edt = DateTime.ParseExact(e, "ddd MMM dd yyyy HH:mm:ss 'GMT'zzz", System.Globalization.CultureInfo.InvariantCulture);
                string Tdate = edt.ToString("yyyy-MM-dd");
                ToDate = Convert.ToDateTime(Tdate);
            }
            else
            {
                string s = context.Request["FromDate"];
                FromDate = Convert.ToDateTime(s);
                string e = context.Request["Todate"];
                ToDate = Convert.ToDateTime(e);
            }
            double yesterdaygrandtotal = 0; double lastweekgrandtotal = 0;
            double lastmonthgrandtotal = 0; double lastyeargrandtotal = 0;
            cmd = new MySqlCommand("SELECT   modifiedroutes.RouteName, ROUND(SUM(indents_subtable.DeliveryQty),2) AS saleQty,ROUND(AVG(indents_subtable.DeliveryQty), 2) AS AvgQty, SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost) AS salevalue, modifiedroutes.Sno AS routeid, modifidroutssubtab.BranchID AS bid, branchdata_2.BranchName, branchdata_2.flag, branchdata_1.sno AS BranchID, branchdata_2.SalesType AS SalesTypeId FROM branchdata branchdata_2 RIGHT OUTER JOIN branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT  RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo ON  branchdata_2.sno = modifidroutssubtab.BranchID LEFT OUTER JOIN indents_subtable INNER JOIN (SELECT  IndentNo, I_date, Branch_id FROM   indents WHERE  (I_date BETWEEN @starttime AND @endtime)) indt ON indents_subtable.IndentNo = indt.IndentNo ON  modifidroutssubtab.BranchID = indt.Branch_id WHERE   (branchdata.SalesType IS NOT NULL) AND (indents_subtable.DeliveryQty <> 0) AND (branchdata.sno = @BranchID) GROUP BY SalesTypeId ORDER BY  SalesTypeId");
            cmd.Parameters.AddWithValue("@SOID", BranchId);
            cmd.Parameters.AddWithValue("@BranchID", BranchId);
            cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate.AddDays(-2)));
            cmd.Parameters.AddWithValue("@endtime", GetHighDate(ToDate.AddDays(-2)));
            DataTable dtyesterdayroutesale = vdbmngr.SelectQuery(cmd).Tables[0];
            cmd = new MySqlCommand("SELECT   branchdata.BranchName, branchdata.sno, modifiedroutes.RouteName, modifidroutssubtab.BranchID, modifiedroutes.Sno AS routeid, SUM(colltion.AmountPaid) AS AmountPaid FROM  branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT RefNo, Rank, LevelType, BranchID, CDate, EDate FROM   modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo INNER JOIN (SELECT  Branchid, AmountPaid, PaidDate FROM   collections WHERE  (PaymentType <> 'Cheque') AND (PaidDate BETWEEN @d1 AND @d2)) colltion ON modifidroutssubtab.BranchID = colltion.Branchid WHERE (branchdata.SalesType IS NOT NULL) AND (branchdata.sno = @BranchID) GROUP BY modifidroutssubtab.BranchID ORDER BY branchdata.sno");
            cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate.AddDays(-1)));
            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-1));
            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-1));
            cmd.Parameters.AddWithValue("@SOID", BranchId);
            cmd.Parameters.AddWithValue("@BranchID", BranchId);
            DataTable dtyesterdaypaidamount = vdbmngr.SelectQuery(cmd).Tables[0];
            cmd = new MySqlCommand("SELECT   modifiedroutes.RouteName, ROUND(SUM(indents_subtable.DeliveryQty),2) AS saleQty,ROUND(AVG(indents_subtable.DeliveryQty), 2) AS AvgQty, SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost) AS salevalue, modifiedroutes.Sno AS routeid, modifidroutssubtab.BranchID AS bid, branchdata_2.BranchName, branchdata_2.flag, branchdata_1.sno AS BranchID, branchdata_2.SalesType AS SalesTypeId FROM branchdata branchdata_2 RIGHT OUTER JOIN branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT  RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo ON  branchdata_2.sno = modifidroutssubtab.BranchID LEFT OUTER JOIN indents_subtable INNER JOIN (SELECT  IndentNo, I_date, Branch_id FROM   indents WHERE  (I_date BETWEEN @starttime AND @endtime)) indt ON indents_subtable.IndentNo = indt.IndentNo ON  modifidroutssubtab.BranchID = indt.Branch_id WHERE   (branchdata.SalesType IS NOT NULL) AND (indents_subtable.DeliveryQty <> 0) AND (branchdata.sno = @BranchID) GROUP BY SalesTypeId ORDER BY SalesTypeId");
            cmd.Parameters.AddWithValue("@SOID", BranchId);
            cmd.Parameters.AddWithValue("@BranchID", BranchId);
            cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate.AddDays(-8)));
            cmd.Parameters.AddWithValue("@endtime", GetHighDate(ToDate.AddDays(-8)));
            DataTable dtLastweakroutesale = vdbmngr.SelectQuery(cmd).Tables[0];
            cmd = new MySqlCommand("SELECT   branchdata.BranchName, branchdata.sno, modifiedroutes.RouteName, modifidroutssubtab.BranchID, modifiedroutes.Sno AS routeid, SUM(colltion.AmountPaid) AS AmountPaid FROM  branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT RefNo, Rank, LevelType, BranchID, CDate, EDate FROM   modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo INNER JOIN (SELECT  Branchid, AmountPaid, PaidDate FROM   collections WHERE  (PaymentType <> 'Cheque') AND (PaidDate BETWEEN @d1 AND @d2)) colltion ON modifidroutssubtab.BranchID = colltion.Branchid WHERE (branchdata.SalesType IS NOT NULL) AND (branchdata.sno = @BranchID) GROUP BY modifidroutssubtab.BranchID ORDER BY branchdata.sno");
            cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate.AddDays(-7)));
            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-7));
            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-7));
            cmd.Parameters.AddWithValue("@SOID", BranchId);
            cmd.Parameters.AddWithValue("@BranchID", BranchId);
            DataTable dtLastWeakpaidamount = vdbmngr.SelectQuery(cmd).Tables[0];
            cmd = new MySqlCommand("SELECT   modifiedroutes.RouteName, ROUND(SUM(indents_subtable.DeliveryQty),2) AS saleQty,ROUND(AVG(indents_subtable.DeliveryQty), 2) AS AvgQty, SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost) AS salevalue, modifiedroutes.Sno AS routeid, modifidroutssubtab.BranchID AS bid, branchdata_2.BranchName, branchdata_2.flag, branchdata_1.sno AS BranchID, branchdata_2.SalesType AS SalesTypeId FROM branchdata branchdata_2 RIGHT OUTER JOIN branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT  RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo ON  branchdata_2.sno = modifidroutssubtab.BranchID LEFT OUTER JOIN indents_subtable INNER JOIN (SELECT  IndentNo, I_date, Branch_id FROM   indents WHERE  (I_date BETWEEN @starttime AND @endtime)) indt ON indents_subtable.IndentNo = indt.IndentNo ON  modifidroutssubtab.BranchID = indt.Branch_id WHERE   (branchdata.SalesType IS NOT NULL) AND (indents_subtable.DeliveryQty <> 0) AND (branchdata.sno = @BranchID) GROUP BY SalesTypeId ORDER BY SalesTypeId");
            cmd.Parameters.AddWithValue("@SOID", BranchId);
            cmd.Parameters.AddWithValue("@BranchID", BranchId);
            cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate.AddDays(-31)));
            cmd.Parameters.AddWithValue("@endtime", GetHighDate(ToDate.AddDays(-31)));
            DataTable dtLastMonthroutesale = vdbmngr.SelectQuery(cmd).Tables[0];
            cmd = new MySqlCommand("SELECT   branchdata.BranchName, branchdata.sno, modifiedroutes.RouteName, modifidroutssubtab.BranchID, modifiedroutes.Sno AS routeid, SUM(colltion.AmountPaid) AS AmountPaid FROM  branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT RefNo, Rank, LevelType, BranchID, CDate, EDate FROM   modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo INNER JOIN (SELECT  Branchid, AmountPaid, PaidDate FROM   collections WHERE  (PaymentType <> 'Cheque') AND (PaidDate BETWEEN @d1 AND @d2)) colltion ON modifidroutssubtab.BranchID = colltion.Branchid WHERE (branchdata.SalesType IS NOT NULL) AND (branchdata.sno = @BranchID) GROUP BY modifidroutssubtab.BranchID ORDER BY branchdata.sno");
            cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate.AddDays(-30)));
            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-30));
            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-30));
            cmd.Parameters.AddWithValue("@SOID", BranchId);
            cmd.Parameters.AddWithValue("@BranchID", BranchId);
            DataTable dtLastMonthpaidamount = vdbmngr.SelectQuery(cmd).Tables[0];
            cmd = new MySqlCommand("SELECT   modifiedroutes.RouteName, ROUND(SUM(indents_subtable.DeliveryQty),2) AS saleQty, ROUND(AVG(indents_subtable.DeliveryQty), 2) AS AvgQty,SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost) AS salevalue, modifiedroutes.Sno AS routeid, modifidroutssubtab.BranchID AS bid, branchdata_2.BranchName, branchdata_2.flag, branchdata_1.sno AS BranchID, branchdata_2.SalesType AS SalesTypeId FROM branchdata branchdata_2 RIGHT OUTER JOIN branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT  RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo ON  branchdata_2.sno = modifidroutssubtab.BranchID LEFT OUTER JOIN indents_subtable INNER JOIN (SELECT  IndentNo, I_date, Branch_id FROM   indents WHERE  (I_date BETWEEN @starttime AND @endtime)) indt ON indents_subtable.IndentNo = indt.IndentNo ON  modifidroutssubtab.BranchID = indt.Branch_id WHERE   (branchdata.SalesType IS NOT NULL) AND (indents_subtable.DeliveryQty <> 0) AND (branchdata.sno = @BranchID) GROUP BY SalesTypeId ORDER BY SalesTypeId");
            cmd.Parameters.AddWithValue("@SOID", BranchId);
            cmd.Parameters.AddWithValue("@BranchID", BranchId);
            cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate.AddDays(-365)));
            cmd.Parameters.AddWithValue("@endtime", GetHighDate(ToDate.AddDays(-365)));
            DataTable dtLastYearroutesale = vdbmngr.SelectQuery(cmd).Tables[0];
            cmd = new MySqlCommand("SELECT   branchdata.BranchName, branchdata.sno, modifiedroutes.RouteName, modifidroutssubtab.BranchID, modifiedroutes.Sno AS routeid, SUM(colltion.AmountPaid) AS AmountPaid FROM  branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT RefNo, Rank, LevelType, BranchID, CDate, EDate FROM   modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo INNER JOIN (SELECT  Branchid, AmountPaid, PaidDate FROM   collections WHERE  (PaymentType <> 'Cheque') AND (PaidDate BETWEEN @d1 AND @d2)) colltion ON modifidroutssubtab.BranchID = colltion.Branchid WHERE (branchdata.SalesType IS NOT NULL) AND (branchdata.sno = @BranchID) GROUP BY modifidroutssubtab.BranchID ORDER BY branchdata.sno");
            cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate.AddDays(-364)));
            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate).AddDays(-364));
            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate).AddDays(-364));
            cmd.Parameters.AddWithValue("@SOID", BranchId);
            cmd.Parameters.AddWithValue("@BranchID", BranchId);
            DataTable dtLastYearhpaidamount = vdbmngr.SelectQuery(cmd).Tables[0];
            cmd = new MySqlCommand("SELECT  sno, salestype, flag, UserData_sno, status, rank, club_code FROM salestypemanagement where (status = 1) ORDER BY salestype DESC");
            cmd.Parameters.AddWithValue("@BranchID", BranchId);
            DataTable dtsalestype = vdbmngr.SelectQuery(cmd).Tables[0];
            DataTable dtAll = new DataTable();
            dtAll.Merge(dtyesterdayroutesale);
            dtAll.Merge(dtLastweakroutesale);
            dtAll.Merge(dtLastMonthroutesale);
            dtAll.Merge(dtLastYearroutesale);
            DataView view = new DataView(dtAll);
            DataTable distincttable = view.ToTable(true, "SalesTypeId");
            DataTable DayReport = new DataTable();
            DataTable lastweakReport = new DataTable();
            DataTable LastMonthReport = new DataTable();
            DataTable LastYearReport = new DataTable();
            DataTable MainReport = new DataTable();
            MainReport.Columns.Add("RouteName");
            MainReport.Columns.Add("SalesType");
            MainReport.Columns.Add("SalestypeId");
            MainReport.Columns.Add("Branchid");
            MainReport.Columns.Add("Routeid");
            MainReport.Columns.Add("Yester Day").DataType = typeof(Double);
            MainReport.Columns.Add("Yester Day Avg").DataType = typeof(Double);
            MainReport.Columns.Add("Last Week").DataType = typeof(Double);
            MainReport.Columns.Add("Last Week Avg").DataType = typeof(Double);
            MainReport.Columns.Add("Last Month Avg").DataType = typeof(Double);
            MainReport.Columns.Add("Last Month").DataType = typeof(Double);
            MainReport.Columns.Add("Last Year").DataType = typeof(Double);
            MainReport.Columns.Add("Last Year Avg").DataType = typeof(Double);

            foreach (DataRow dr in distincttable.Rows)
            {
                DataRow newrow = MainReport.NewRow();

                string SalestypeId = dr["SalestypeId"].ToString();
                foreach (DataRow drsalestype in dtsalestype.Select("sno='" + SalestypeId + "'"))
                {
                    string Salestype = drsalestype["salestype"].ToString();
                    foreach (DataRow dramount in dtyesterdayroutesale.Select("SalestypeId='" + SalestypeId + "'"))
                    {
                        float amount = 0;
                        float.TryParse(dramount["saleQty"].ToString(), out amount);
                        newrow["Yester Day"] = Math.Round(amount, 2); ;
                        newrow["Yester Day Avg"] = dramount["AvgQty"].ToString();
                        newrow["Branchid"] = dramount["BranchID"].ToString();
                        newrow["SalestypeId"] = SalestypeId;
                        newrow["SalesType"] = Salestype;
                        yesterdaygrandtotal += amount;
                    }
                    foreach (DataRow dramount in dtLastweakroutesale.Select("SalestypeId='" + SalestypeId + "'"))
                    {
                        float amount = 0;
                        float.TryParse(dramount["saleQty"].ToString(), out amount);
                        newrow["Last Week"] = Math.Round(amount, 2);
                        newrow["Last Week Avg"] = dramount["AvgQty"].ToString();
                        newrow["Branchid"] = dramount["BranchID"].ToString();
                        newrow["SalestypeId"] = SalestypeId;
                        newrow["SalesType"] = Salestype;
                        lastweekgrandtotal += amount;
                    }
                    foreach (DataRow dramount in dtLastMonthroutesale.Select("SalestypeId='" + SalestypeId + "'"))
                    {
                        float amount = 0;
                        float.TryParse(dramount["saleQty"].ToString(), out amount);
                        newrow["Last Month"] = Math.Round(amount, 2); ;
                        newrow["Last Month Avg"] = dramount["AvgQty"].ToString();
                        newrow["Branchid"] = dramount["BranchID"].ToString();
                        newrow["SalestypeId"] = SalestypeId;
                        newrow["SalesType"] = Salestype;
                        lastmonthgrandtotal += amount;
                    }
                    foreach (DataRow dramount in dtLastYearroutesale.Select("SalestypeId='" + SalestypeId + "'"))
                    {
                        float amount = 0;
                        float.TryParse(dramount["saleQty"].ToString(), out amount);
                        newrow["Last Year"] = Math.Round(amount, 2); ;
                        newrow["Last Year Avg"] = dramount["AvgQty"].ToString();
                        newrow["Branchid"] = dramount["BranchID"].ToString();
                        newrow["SalestypeId"] = SalestypeId;
                        newrow["SalesType"] = Salestype;
                        lastyeargrandtotal += amount;
                    }
                    MainReport.Rows.Add(newrow);
                }
            }
            #region

            List<LineChartValuesclass> LineChartValuelist = new List<LineChartValuesclass>();
            #endregion

            foreach (DataRow drr in MainReport.Rows)
            {
                double Percentage = 0; double tempPercentage = 0;
                LineChartValuesclass getLineChartobj = new LineChartValuesclass();
                if (drr["Yester Day"].ToString() != "")
                {
                    double temp = 0;
                    double.TryParse(drr["Yester Day"].ToString(), out temp);
                    tempPercentage = (temp / yesterdaygrandtotal) * 100;
                    Percentage = Math.Round(tempPercentage, 2);
                    double avgqty = 0;
                    avgqty = temp / 2;
                    getLineChartobj.yesterdayaverage = avgqty.ToString();
                    getLineChartobj.yesterindent = drr["Yester Day"].ToString();
                    getLineChartobj.yesterdaypercentage = Percentage.ToString();
                }
                else
                {
                    getLineChartobj.yesterindent = "0";
                    getLineChartobj.yesterdayaverage = "0";
                    getLineChartobj.yesterdaypercentage = "0";
                }
                if (drr["Last Week"].ToString() != "")
                {
                    double temp = 0;
                    double.TryParse(drr["Last Week"].ToString(), out temp);
                    tempPercentage = (temp / lastweekgrandtotal) * 100;
                    Percentage = Math.Round(tempPercentage, 2);
                    double avgqty = 0;
                    avgqty = temp / 2;
                    getLineChartobj.lastweekindent = drr["Last Week"].ToString();
                    getLineChartobj.lastweekaverage = avgqty.ToString();
                    getLineChartobj.lastweekpercentage = Percentage.ToString();
                }
                else
                {
                    getLineChartobj.lastweekindent = "0";
                    getLineChartobj.lastweekaverage = "0";
                    getLineChartobj.lastweekpercentage = "0";
                }
                if (drr["Last Month"].ToString() != "")
                {
                    double temp = 0;
                    double.TryParse(drr["Last Month"].ToString(), out temp);
                    tempPercentage = (temp / lastmonthgrandtotal) * 100;
                    Percentage = Math.Round(tempPercentage, 2);
                    double avgqty = 0;
                    avgqty = temp / 2;
                    getLineChartobj.lastmonthindent = drr["Last Month"].ToString();
                    getLineChartobj.lastmonthaverage = avgqty.ToString();
                    getLineChartobj.lastmonthpercentage = Percentage.ToString();
                }
                else
                {
                    getLineChartobj.lastmonthindent = "0";
                    getLineChartobj.lastmonthaverage = "0";
                    getLineChartobj.lastmonthpercentage = "0";
                }
                if (drr["Last Year"].ToString() != "")
                {
                    double temp = 0;
                    double.TryParse(drr["Last Year"].ToString(), out temp);
                    tempPercentage = (temp / lastyeargrandtotal) * 100;
                    Percentage = Math.Round(tempPercentage, 2);
                    double avgqty = 0;
                    avgqty = temp / 2;
                    getLineChartobj.lastyearindent = drr["Last Year"].ToString();
                    getLineChartobj.lastyearaverage = avgqty.ToString();
                    getLineChartobj.lastyearpercentage = Percentage.ToString();
                }
                else
                {
                    getLineChartobj.lastyearindent = "0";
                    getLineChartobj.lastyearaverage = "0";
                    getLineChartobj.lastyearpercentage = "0";
                }
                getLineChartobj.salestypeid = "" + drr["SalestypeId"].ToString() + "_" + drr["Branchid"].ToString() + "";
                getLineChartobj.SalesType = drr["SalesType"].ToString();
                LineChartValuelist.Add(getLineChartobj);
            }
            string respnceString = GetJson(LineChartValuelist);
            context.Response.Write(respnceString);
        }
        catch
        {
        }
    }
    private void Get_AgentWiseDay_Comparison(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            DateTime ServerDateCurrentdate = VehicleDBMgr.GetTime(vdbmngr.conn);
            string BranchId = context.Request["BranchId"];
            string test = context.Request["test"];
            DateTime FromDate = new DateTime();
            DateTime ToDate = new DateTime();
            if (test != "Report")
            {
                string s = context.Request["FromDate"];
                var dt = DateTime.ParseExact(s, "ddd MMM dd yyyy HH:mm:ss 'GMT'zzz", System.Globalization.CultureInfo.InvariantCulture);
                string Fdate = dt.ToString("yyyy-MM-dd");
                FromDate = Convert.ToDateTime(Fdate);
                string e = context.Request["Todate"];
                var edt = DateTime.ParseExact(e, "ddd MMM dd yyyy HH:mm:ss 'GMT'zzz", System.Globalization.CultureInfo.InvariantCulture);
                string Tdate = edt.ToString("yyyy-MM-dd");
                ToDate = Convert.ToDateTime(Tdate);
            }
            else
            {
                string s = context.Request["FromDate"];
                FromDate = Convert.ToDateTime(s);
                string e = context.Request["Todate"];
                ToDate = Convert.ToDateTime(e);
            }
            string[] arr = BranchId.Split('_');
            string t1 = arr.Length.ToString();
            string routeid = "";
            string salestype = "";
            if (t1 == "3")
            {
                salestype = arr[1];
                routeid = arr[0];
            }
            else
            {
                salestype = arr[0];
                BranchId = arr[1];
            }
            double yesterdaygrandtotal = 0; double lastweekgrandtotal = 0;
            double lastmonthgrandtotal = 0; double lastyeargrandtotal = 0;

            cmd = new MySqlCommand("SELECT  modifiedroutes.RouteName, ROUND(SUM(indents_subtable.DeliveryQty),2) AS saleQty,ROUND(AVG(indents_subtable.DeliveryQty), 2) AS AvgQty, SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost) AS salevalue, modifiedroutes.Sno AS routeid, modifidroutssubtab.BranchID AS bid, branchdata_2.BranchName, branchdata_2.flag, branchdata_1.sno AS BranchID,  branchdata_2.SalesType, empmanage.EmpName, branchdata_2.SalesRepresentative FROM  branchdata branchdata_2 RIGHT OUTER JOIN branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT   RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo ON  branchdata_2.sno = modifidroutssubtab.BranchID LEFT OUTER JOIN indents_subtable INNER JOIN (SELECT  IndentNo, I_date, Branch_id FROM  indents WHERE  (I_date BETWEEN @starttime AND @endtime)) indt ON indents_subtable.IndentNo = indt.IndentNo ON  modifidroutssubtab.BranchID = indt.Branch_id INNER JOIN tripdata ON tripdata.Sno = indents_subtable.DTripId INNER JOIN empmanage ON tripdata.EmpId = empmanage.Sno WHERE  (branchdata.SalesType IS NOT NULL) AND (indents_subtable.DeliveryQty <> 0) AND (branchdata_2.SalesType = @salestype) AND (modifiedroutes.Branchid = @BranchID) GROUP BY modifidroutssubtab.BranchID ORDER BY  routeid");
            cmd.Parameters.AddWithValue("@salestype", salestype);
            cmd.Parameters.AddWithValue("@BranchID", BranchId);
            cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate.AddDays(-2)));
            cmd.Parameters.AddWithValue("@endtime", GetHighDate(ToDate.AddDays(-2)));
            DataTable dtyesterdayroutesale = vdbmngr.SelectQuery(cmd).Tables[0];
            cmd = new MySqlCommand("SELECT  modifiedroutes.RouteName, ROUND(SUM(indents_subtable.DeliveryQty),2) AS saleQty,ROUND(AVG(indents_subtable.DeliveryQty), 2) AS AvgQty, SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost) AS salevalue, modifiedroutes.Sno AS routeid, modifidroutssubtab.BranchID AS bid, branchdata_2.BranchName, branchdata_2.flag, branchdata_1.sno AS BranchID,  branchdata_2.SalesType, empmanage.EmpName, branchdata_2.SalesRepresentative FROM  branchdata branchdata_2 RIGHT OUTER JOIN branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT   RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo ON  branchdata_2.sno = modifidroutssubtab.BranchID LEFT OUTER JOIN indents_subtable INNER JOIN (SELECT  IndentNo, I_date, Branch_id FROM  indents WHERE  (I_date BETWEEN @starttime AND @endtime)) indt ON indents_subtable.IndentNo = indt.IndentNo ON  modifidroutssubtab.BranchID = indt.Branch_id INNER JOIN tripdata ON tripdata.Sno = indents_subtable.DTripId INNER JOIN empmanage ON tripdata.EmpId = empmanage.Sno WHERE  (branchdata.SalesType IS NOT NULL) AND (indents_subtable.DeliveryQty <> 0) AND (branchdata_2.SalesType = @salestype) AND (modifiedroutes.Branchid = @BranchID) GROUP BY modifidroutssubtab.BranchID ORDER BY  routeid");
            cmd.Parameters.AddWithValue("@salestype", salestype);
            cmd.Parameters.AddWithValue("@BranchID", BranchId);
            cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate.AddDays(-8)));
            cmd.Parameters.AddWithValue("@endtime", GetHighDate(ToDate.AddDays(-8)));
            DataTable dtLastweakroutesale = vdbmngr.SelectQuery(cmd).Tables[0];
            cmd = new MySqlCommand("SELECT  modifiedroutes.RouteName, ROUND(SUM(indents_subtable.DeliveryQty),2) AS saleQty,ROUND(AVG(indents_subtable.DeliveryQty), 2) AS AvgQty, SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost) AS salevalue, modifiedroutes.Sno AS routeid, modifidroutssubtab.BranchID AS bid, branchdata_2.BranchName, branchdata_2.flag, branchdata_1.sno AS BranchID,  branchdata_2.SalesType, empmanage.EmpName, branchdata_2.SalesRepresentative FROM  branchdata branchdata_2 RIGHT OUTER JOIN branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT   RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo ON  branchdata_2.sno = modifidroutssubtab.BranchID LEFT OUTER JOIN indents_subtable INNER JOIN (SELECT  IndentNo, I_date, Branch_id FROM  indents WHERE  (I_date BETWEEN @starttime AND @endtime)) indt ON indents_subtable.IndentNo = indt.IndentNo ON  modifidroutssubtab.BranchID = indt.Branch_id INNER JOIN tripdata ON tripdata.Sno = indents_subtable.DTripId INNER JOIN empmanage ON tripdata.EmpId = empmanage.Sno WHERE  (branchdata.SalesType IS NOT NULL) AND (indents_subtable.DeliveryQty <> 0) AND (branchdata_2.SalesType = @salestype) AND (modifiedroutes.Branchid = @BranchID) GROUP BY modifidroutssubtab.BranchID ORDER BY  routeid");
            cmd.Parameters.AddWithValue("@salestype", salestype);
            cmd.Parameters.AddWithValue("@BranchID", BranchId);
            cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate.AddDays(-31)));
            cmd.Parameters.AddWithValue("@endtime", GetHighDate(ToDate.AddDays(-31)));
            DataTable dtLastMonthroutesale = vdbmngr.SelectQuery(cmd).Tables[0];
            cmd = new MySqlCommand("SELECT  modifiedroutes.RouteName, ROUND(SUM(indents_subtable.DeliveryQty),2) AS saleQty,ROUND(AVG(indents_subtable.DeliveryQty), 2) AS AvgQty, SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost) AS salevalue, modifiedroutes.Sno AS routeid, modifidroutssubtab.BranchID AS bid, branchdata_2.BranchName, branchdata_2.flag, branchdata_1.sno AS BranchID,  branchdata_2.SalesType, empmanage.EmpName, branchdata_2.SalesRepresentative FROM  branchdata branchdata_2 RIGHT OUTER JOIN branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT   RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo ON  branchdata_2.sno = modifidroutssubtab.BranchID LEFT OUTER JOIN indents_subtable INNER JOIN (SELECT  IndentNo, I_date, Branch_id FROM  indents WHERE  (I_date BETWEEN @starttime AND @endtime)) indt ON indents_subtable.IndentNo = indt.IndentNo ON  modifidroutssubtab.BranchID = indt.Branch_id INNER JOIN tripdata ON tripdata.Sno = indents_subtable.DTripId INNER JOIN empmanage ON tripdata.EmpId = empmanage.Sno WHERE  (branchdata.SalesType IS NOT NULL) AND (indents_subtable.DeliveryQty <> 0) AND (branchdata_2.SalesType = @salestype) AND (modifiedroutes.Branchid = @BranchID) GROUP BY modifidroutssubtab.BranchID ORDER BY  routeid");
            cmd.Parameters.AddWithValue("@salestype", salestype);
            cmd.Parameters.AddWithValue("@BranchID", BranchId);
            cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate.AddDays(-365)));
            cmd.Parameters.AddWithValue("@endtime", GetHighDate(ToDate.AddDays(-365)));
            DataTable dtLastYearroutesale = vdbmngr.SelectQuery(cmd).Tables[0];
            DataTable dtAll = new DataTable();
            dtAll.Merge(dtyesterdayroutesale);
            dtAll.Merge(dtLastweakroutesale);
            dtAll.Merge(dtLastMonthroutesale);
            dtAll.Merge(dtLastYearroutesale);

            DataView TotalView = new DataView(dtAll);
            DataTable dtdistinctRoutename = TotalView.ToTable(true, "SalesType", "bid", "BranchName", "RouteName", "routeid");
            DataView dv = dtdistinctRoutename.DefaultView;
            dv.Sort = "routeid ASC";
            DataTable sortedProductDT = dv.ToTable();
            DataTable MainReport = new DataTable();
            MainReport.Columns.Add("RouteName");
            MainReport.Columns.Add("AgentName");
            MainReport.Columns.Add("SalesType");
            MainReport.Columns.Add("SalestypeId");
            MainReport.Columns.Add("Branchid");
            MainReport.Columns.Add("Routeid");
            MainReport.Columns.Add("Yester Day").DataType = typeof(Double);
            MainReport.Columns.Add("Yester Day Avg").DataType = typeof(Double);
            MainReport.Columns.Add("Last Week").DataType = typeof(Double);
            MainReport.Columns.Add("Last Week Avg").DataType = typeof(Double);
            MainReport.Columns.Add("Last Month").DataType = typeof(Double);
            MainReport.Columns.Add("Last Month Avg").DataType = typeof(Double);
            MainReport.Columns.Add("Last Year").DataType = typeof(Double);
            MainReport.Columns.Add("Last Year Avg").DataType = typeof(Double);
            foreach (DataRow drroute in sortedProductDT.Rows)
            {
                string Agentid = drroute["bid"].ToString();
                string AgentName = drroute["BranchName"].ToString();
                string Salestype = drroute["SalesType"].ToString();
                string RouteName = drroute["RouteName"].ToString();
                DataRow newRow1 = MainReport.NewRow();
                newRow1["AgentName"] = AgentName;
                newRow1["RouteName"] = RouteName;
                foreach (DataRow dramount in dtyesterdayroutesale.Select("bid='" + Agentid + "' AND salestype='" + Salestype + "'"))
                {
                    float amount = 0;
                    float.TryParse(dramount["saleQty"].ToString(), out amount);
                    newRow1["Yester Day"] = Math.Round(amount, 2);
                    newRow1["Yester Day Avg"] = dramount["AvgQty"].ToString();
                    newRow1["Branchid"] = dramount["bid"].ToString();
                    yesterdaygrandtotal += amount;
                }
                foreach (DataRow dramount in dtLastweakroutesale.Select("bid='" + Agentid + "' AND salestype='" + Salestype + "'"))
                {
                    float amount = 0;
                    float.TryParse(dramount["saleQty"].ToString(), out amount);
                    newRow1["Last Week"] = Math.Round(amount, 2);
                    newRow1["Last Week Avg"] = dramount["AvgQty"].ToString();
                    newRow1["Branchid"] = dramount["bid"].ToString();
                    lastweekgrandtotal += amount;
                }
                foreach (DataRow dramount in dtLastMonthroutesale.Select("bid='" + Agentid + "' AND salestype='" + Salestype + "'"))
                {
                    float amount = 0;
                    float.TryParse(dramount["saleQty"].ToString(), out amount);
                    newRow1["Last Month"] = Math.Round(amount, 2); ;
                    newRow1["Last Month Avg"] = dramount["AvgQty"].ToString();
                    newRow1["Branchid"] = dramount["bid"].ToString();
                    lastmonthgrandtotal += amount;
                }
                foreach (DataRow dramount in dtLastYearroutesale.Select("bid='" + Agentid + "' AND salestype='" + Salestype + "'"))
                {
                    float amount = 0;
                    float.TryParse(dramount["saleQty"].ToString(), out amount);
                    newRow1["Last Year"] = Math.Round(amount, 2); ;
                    newRow1["Last Year Avg"] = dramount["AvgQty"].ToString();
                    newRow1["Branchid"] = dramount["bid"].ToString();
                    lastyeargrandtotal += amount;
                }
                MainReport.Rows.Add(newRow1);
            }
            List<LineChartValuesclass> LineChartValuelist = new List<LineChartValuesclass>();
            foreach (DataRow dr in MainReport.Rows)
            {
                LineChartValuesclass getLineChartobj = new LineChartValuesclass();
                double Percentage = 0; double tempPercentage = 0;
                if (dr["Yester Day"].ToString() != "")
                {
                    double temp = 0;
                    double.TryParse(dr["Yester Day"].ToString(), out temp);
                    tempPercentage = (temp / yesterdaygrandtotal) * 100;
                    Percentage = Math.Round(tempPercentage, 2);
                    double avgqty = 0;
                    avgqty = temp / 2;
                    getLineChartobj.yesterdayaverage = avgqty.ToString();
                    getLineChartobj.yesterindent = dr["Yester Day"].ToString();
                    getLineChartobj.yesterdaypercentage = Percentage.ToString();
                }
                else
                {
                    getLineChartobj.yesterindent = "0";
                    getLineChartobj.yesterdayaverage = "0";
                    getLineChartobj.yesterdaypercentage = "0";
                }
                if (dr["Last Week"].ToString() != "")
                {
                    double temp = 0;
                    double.TryParse(dr["Last Week"].ToString(), out temp);
                    tempPercentage = (temp / lastweekgrandtotal) * 100;
                    Percentage = Math.Round(tempPercentage, 2);
                    double avgqty = 0;
                    avgqty = temp / 2;
                    getLineChartobj.lastweekindent = dr["Last Week"].ToString();
                    getLineChartobj.lastweekaverage = avgqty.ToString();
                    getLineChartobj.lastweekpercentage = Percentage.ToString();
                }
                else
                {
                    getLineChartobj.lastweekindent = "0";
                    getLineChartobj.lastweekaverage = "0";
                    getLineChartobj.lastweekpercentage = "0";
                }
                if (dr["Last Month"].ToString() != "")
                {
                    double temp = 0;
                    double.TryParse(dr["Last Month"].ToString(), out temp);
                    tempPercentage = (temp / lastmonthgrandtotal) * 100;
                    Percentage = Math.Round(tempPercentage, 2);
                    double avgqty = 0;
                    avgqty = temp / 2;
                    getLineChartobj.lastmonthindent = dr["Last Month"].ToString();
                    getLineChartobj.lastmonthaverage = avgqty.ToString();
                    getLineChartobj.lastmonthpercentage = Percentage.ToString();
                }
                else
                {
                    getLineChartobj.lastmonthindent = "0";
                    getLineChartobj.lastmonthaverage = "0";
                    getLineChartobj.lastmonthpercentage = "0";
                }
                if (dr["Last Year"].ToString() != "")
                {
                    double temp = 0;
                    double.TryParse(dr["Last Year"].ToString(), out temp);
                    tempPercentage = (temp / lastyeargrandtotal) * 100;
                    Percentage = Math.Round(tempPercentage, 2);
                    double avgqty = 0;
                    avgqty = temp / 2;
                    getLineChartobj.lastyearindent = dr["Last Year"].ToString();
                    getLineChartobj.lastyearaverage = avgqty.ToString();
                    getLineChartobj.lastyearpercentage = Percentage.ToString();
                }
                else
                {
                    getLineChartobj.lastyearindent = "0";
                    getLineChartobj.lastyearaverage = "0";
                    getLineChartobj.lastyearpercentage = "0";
                }

                getLineChartobj.AgentId = dr["Branchid"].ToString(); ;
                getLineChartobj.AgentName = dr["AgentName"].ToString(); ;
                getLineChartobj.routename = dr["RouteName"].ToString();
                LineChartValuelist.Add(getLineChartobj);
            }
            string respnceString = GetJson(LineChartValuelist);
            context.Response.Write(respnceString);
        }
        catch
        {
        }
    }
    private void Get_AgentWiseDayProduct_Comparison(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            DateTime ServerDateCurrentdate = VehicleDBMgr.GetTime(vdbmngr.conn);
            string BranchId = context.Request["BranchId"];
            string test = context.Request["test"];
            DateTime FromDate = new DateTime();
            DateTime ToDate = new DateTime();
            if (test != "Report")
            {
                string s = context.Request["FromDate"];
                var dt = DateTime.ParseExact(s, "ddd MMM dd yyyy HH:mm:ss 'GMT'zzz", System.Globalization.CultureInfo.InvariantCulture);
                string Fdate = dt.ToString("yyyy-MM-dd");
                FromDate = Convert.ToDateTime(Fdate);
                string e = context.Request["Todate"];
                var edt = DateTime.ParseExact(e, "ddd MMM dd yyyy HH:mm:ss 'GMT'zzz", System.Globalization.CultureInfo.InvariantCulture);
                string Tdate = edt.ToString("yyyy-MM-dd");
                ToDate = Convert.ToDateTime(Tdate);
            }
            else
            {
                string s = context.Request["FromDate"];
                FromDate = Convert.ToDateTime(s);
                string e = context.Request["Todate"];
                ToDate = Convert.ToDateTime(e);

            }
            cmd = new MySqlCommand("SELECT     indents.Branch_id,products_subcategory.SubCatName, products_category.Categoryname, productsdata.ProductName, ROUND(SUM(indents_subtable.DeliveryQty),2) AS DeliveryQty, indents.I_date, indents_subtable.Product_sno, productsdata.sno, branchdata.BranchName FROM indents INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno INNER JOIN branchdata ON indents.Branch_id = branchdata.sno WHERE  (indents.I_date BETWEEN @starttime AND @endtime) AND (indents.Branch_id = @BranchID) GROUP BY indents.I_date, productsdata.sno");
            cmd.Parameters.AddWithValue("@BranchID", BranchId);
            cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate.AddDays(-2)));
            cmd.Parameters.AddWithValue("@endtime", GetHighDate(ToDate.AddDays(-2)));
            DataTable dtyesterdayroutesale = vdbmngr.SelectQuery(cmd).Tables[0];
            cmd = new MySqlCommand("SELECT     indents.Branch_id,products_subcategory.SubCatName, products_category.Categoryname, productsdata.ProductName, ROUND(SUM(indents_subtable.DeliveryQty),2) AS DeliveryQty, indents.I_date, indents_subtable.Product_sno, productsdata.sno, branchdata.BranchName FROM indents INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno INNER JOIN branchdata ON indents.Branch_id = branchdata.sno WHERE  (indents.I_date BETWEEN @starttime AND @endtime) AND (indents.Branch_id = @BranchID) GROUP BY indents.I_date, productsdata.sno");
            cmd.Parameters.AddWithValue("@BranchID", BranchId);
            cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate.AddDays(-8)));
            cmd.Parameters.AddWithValue("@endtime", GetHighDate(ToDate.AddDays(-8)));
            DataTable dtLastweakroutesale = vdbmngr.SelectQuery(cmd).Tables[0];
            cmd = new MySqlCommand("SELECT      indents.Branch_id,products_subcategory.SubCatName, products_category.Categoryname, productsdata.ProductName, ROUND(SUM(indents_subtable.DeliveryQty),2) AS DeliveryQty, indents.I_date, indents_subtable.Product_sno, productsdata.sno, branchdata.BranchName FROM indents INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno INNER JOIN branchdata ON indents.Branch_id = branchdata.sno WHERE  (indents.I_date BETWEEN @starttime AND @endtime) AND (indents.Branch_id = @BranchID) GROUP BY indents.I_date, productsdata.sno");
            cmd.Parameters.AddWithValue("@BranchID", BranchId);
            cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate.AddDays(-31)));
            cmd.Parameters.AddWithValue("@endtime", GetHighDate(ToDate.AddDays(-31)));
            DataTable dtLastMonthroutesale = vdbmngr.SelectQuery(cmd).Tables[0];
            cmd = new MySqlCommand("SELECT     indents.Branch_id,products_subcategory.SubCatName, products_category.Categoryname, productsdata.ProductName, ROUND(SUM(indents_subtable.DeliveryQty),2) AS DeliveryQty, indents.I_date, indents_subtable.Product_sno, productsdata.sno, branchdata.BranchName FROM indents INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno INNER JOIN branchdata ON indents.Branch_id = branchdata.sno WHERE  (indents.I_date BETWEEN @starttime AND @endtime) AND (indents.Branch_id = @BranchID) GROUP BY indents.I_date, productsdata.sno");
            cmd.Parameters.AddWithValue("@BranchID", BranchId);
            cmd.Parameters.AddWithValue("@starttime", GetLowDate(FromDate.AddDays(-365)));
            cmd.Parameters.AddWithValue("@endtime", GetHighDate(ToDate.AddDays(-365)));
            DataTable dtLastYearroutesale = vdbmngr.SelectQuery(cmd).Tables[0];
            DataTable dtAll = new DataTable();
            dtAll.Merge(dtyesterdayroutesale);
            dtAll.Merge(dtLastweakroutesale);
            dtAll.Merge(dtLastMonthroutesale);
            dtAll.Merge(dtLastYearroutesale);
            DataView TotalView = new DataView(dtAll);
            DataTable dtdistinctRoutename = TotalView.ToTable(true, "Product_sno", "ProductName");

            DataTable MainReport = new DataTable();
            MainReport.Columns.Add("ProductName");
            MainReport.Columns.Add("Branchid");
            MainReport.Columns.Add("ProductId");
            MainReport.Columns.Add("Yester Day").DataType = typeof(Double);
            MainReport.Columns.Add("Last Week").DataType = typeof(Double);
            MainReport.Columns.Add("Last Month").DataType = typeof(Double);
            MainReport.Columns.Add("Last Year").DataType = typeof(Double);
            foreach (DataRow drroute in dtdistinctRoutename.Rows)
            {
                string ProductId = drroute["Product_sno"].ToString();
                string ProductName = drroute["ProductName"].ToString();
                DataRow newRow1 = MainReport.NewRow();
                newRow1["ProductName"] = ProductName;
                newRow1["ProductId"] = ProductId;
                foreach (DataRow dramount in dtyesterdayroutesale.Select("Product_sno='" + ProductId + "'"))
                {
                    float amount = 0;
                    float.TryParse(dramount["DeliveryQty"].ToString(), out amount);
                    newRow1["Yester Day"] = amount;
                    newRow1["Branchid"] = dramount["Branch_id"].ToString();
                }
                foreach (DataRow dramount in dtLastweakroutesale.Select("Product_sno='" + ProductId + "'"))
                {
                    float amount = 0;
                    float.TryParse(dramount["DeliveryQty"].ToString(), out amount);
                    newRow1["Last Week"] = amount;
                    newRow1["Branchid"] = dramount["Branch_id"].ToString();
                }
                foreach (DataRow dramount in dtLastMonthroutesale.Select("Product_sno='" + ProductId + "'"))
                {
                    float amount = 0;
                    float.TryParse(dramount["DeliveryQty"].ToString(), out amount);
                    newRow1["Last Month"] = amount;
                    newRow1["Branchid"] = dramount["Branch_id"].ToString();
                }
                foreach (DataRow dramount in dtLastYearroutesale.Select("Product_sno='" + ProductId + "'"))
                {
                    float amount = 0;
                    float.TryParse(dramount["DeliveryQty"].ToString(), out amount);
                    newRow1["Last Year"] = amount;
                    newRow1["Branchid"] = dramount["Branch_id"].ToString();
                }
                MainReport.Rows.Add(newRow1);
            }
            List<LineChartValuesclass> LineChartValuelist = new List<LineChartValuesclass>();
            foreach (DataRow dr in MainReport.Rows)
            {
                LineChartValuesclass getLineChart = new LineChartValuesclass();
                getLineChart.ProductName = dr["ProductName"].ToString(); ;
                getLineChart.ProductId = "" + dr["ProductId"].ToString() + "_" + dr["BranchID"].ToString() + "_" + dr["ProductName"].ToString() + "";//dr["SalestypeId"].ToString();
                double tempyeserday = 0; double tempweak = 0; double tempmonth = 0;
                double tempyear = 0; double tempyeserday1 = 0; double tempweak1 = 0; double tempmonth1 = 0;
                double tempyear1 = 0;
                double.TryParse(dr["Yester Day"].ToString(), out tempyeserday);
                double.TryParse(dr["Last Week"].ToString(), out tempweak);
                double.TryParse(dr["Last Month"].ToString(), out tempmonth);
                double.TryParse(dr["Last Year"].ToString(), out tempyear);
                tempyeserday1 = Math.Round(tempyeserday, 2);
                tempweak1 = Math.Round(tempweak, 2);
                tempmonth1 = Math.Round(tempmonth, 2);
                tempyear1 = Math.Round(tempyear, 2);
                getLineChart.yesterindent = tempyeserday1.ToString();
                getLineChart.lastweekindent = tempweak1.ToString();
                getLineChart.lastmonthindent = tempmonth1.ToString();
                getLineChart.lastyearindent = tempyear1.ToString();
                LineChartValuelist.Add(getLineChart);
            }
            string respnceString = GetJson(LineChartValuelist);
            context.Response.Write(respnceString);
        }
        catch
        {
        }
    }
    private void Get_AgentWiseBetweenDayProduct_Comparison(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            DateTime ServerDateCurrentdate = VehicleDBMgr.GetTime(vdbmngr.conn);
            string BranchId = context.Session["Agentid"].ToString();
            string test = context.Request["test"];
            DateTime fromdate = DateTime.Now;
            DateTime todate = VehicleDBMgr.GetTime(vdbmngr.conn);
            DateTime frmdate = todate.AddDays(-15);
            string Product_Id = "";
            string DayType = "DayWise";
            string ProductName = "";
            string DelQty = "";
            double totalqty = 0;
            #region
            if (test != "Report")
            {
                if (DayType == "DayWise")
                {

                    cmd = new MySqlCommand("SELECT     indents.Branch_id,products_subcategory.SubCatName, products_category.Categoryname, productsdata.ProductName, SUM(indents_subtable.DeliveryQty) AS DeliveryQty, indents.I_date, indents_subtable.Product_sno, productsdata.sno, branchdata.BranchName FROM indents INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno INNER JOIN branchdata ON indents.Branch_id = branchdata.sno WHERE  (indents.I_date BETWEEN @starttime AND @endtime) AND (indents.Branch_id = @BranchID) GROUP BY indents.I_date");
                    cmd.Parameters.AddWithValue("@BranchID", BranchId);
                    cmd.Parameters.AddWithValue("@starttime", GetLowDate(frmdate.AddDays(-2)));
                    cmd.Parameters.AddWithValue("@endtime", GetHighDate(todate.AddDays(-1)));
                    DataTable dtyesterdayroutesale = vdbmngr.SelectQuery(cmd).Tables[0];
                    List<LineChartValuesclass> LineChartValuelist = new List<LineChartValuesclass>();
                    List<TotalProductclass> Categeorylist = new List<TotalProductclass>();
                    List<MainComaparisonDetails> Mainlist = new List<MainComaparisonDetails>();
                    if (dtyesterdayroutesale.Rows.Count > 0)
                    {
                        LineChartValuesclass getLineChart = new LineChartValuesclass();
                        List<string> unitlist = new List<string>();
                        List<string> Deliverlist = new List<string>();
                        List<string> Datelist = new List<string>();
                        List<string> Statuslist = new List<string>();
                        List<string> ActMillist = new List<string>();
                        string IndDate = "";
                        double avgSaleQty = 0;
                        int count = 0;
                        foreach (DataRow dr in dtyesterdayroutesale.Rows)
                        {
                            string DeliveryQty = dr["DeliveryQty"].ToString();
                            DelQty += DeliveryQty + ",";
                            double milltr = 0;
                            double.TryParse(dr["DeliveryQty"].ToString(), out milltr);
                            avgSaleQty += milltr;
                            string IndentDate = dr["I_date"].ToString();
                            DateTime now = Convert.ToDateTime(IndentDate).AddDays(1);
                            string dayname = now.DayOfWeek.ToString();
                            DateTime dtIndentDate = Convert.ToDateTime(IndentDate).AddDays(1);
                            string ChangedTime = dtIndentDate.ToString("dd");
                            string newdate = ChangedTime + "/" + dayname;
                            IndDate += newdate + ",";
                            count++;
                        }
                       
                        IndDate = IndDate.Substring(0, IndDate.Length - 1);
                        getLineChart.IndentDate = IndDate;
                        getLineChart.dqty = DelQty;
                        getLineChart.ProductName = ProductName;
                        LineChartValuelist.Add(getLineChart);
                    }
                    cmd = new MySqlCommand("SELECT     indents.Branch_id,products_subcategory.SubCatName, products_category.Categoryname, productsdata.ProductName, SUM(indents_subtable.DeliveryQty) AS DeliveryQty, indents.I_date, indents_subtable.Product_sno, productsdata.sno, branchdata.BranchName FROM indents INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno INNER JOIN branchdata ON indents.Branch_id = branchdata.sno WHERE  (indents.I_date BETWEEN @starttime AND @endtime) AND (indents.Branch_id = @BranchID) GROUP BY productsdata.sno");
                    cmd.Parameters.AddWithValue("@BranchID", BranchId);
                    cmd.Parameters.AddWithValue("@starttime", GetLowDate(fromdate.AddDays(-2)));
                    cmd.Parameters.AddWithValue("@endtime", GetHighDate(todate.AddDays(-1)));
                    DataTable dtyester_dayroutesale = vdbmngr.SelectQuery(cmd).Tables[0];
                    foreach (DataRow dr in dtyester_dayroutesale.Rows)
                    {
                        TotalProductclass GetProduct = new TotalProductclass();
                        GetProduct.Qty = dr["DeliveryQty"].ToString();
                        string tempqty = dr["DeliveryQty"].ToString();
                        double actualqty = 0;
                        double.TryParse(tempqty, out actualqty);
                        double Percen = 0;
                        Percen = (actualqty / totalqty) * 100;
                        Percen = Math.Round(Percen, 2);
                        GetProduct.CategeoryName = dr["ProductName"].ToString();
                        GetProduct.CatSno = dr["sno"].ToString();
                        GetProduct.TotQty = totalqty.ToString();
                        Categeorylist.Add(GetProduct);
                    }
                    MainComaparisonDetails obj = new MainComaparisonDetails();
                    obj.TotalProductclass = Categeorylist;
                    obj.linechartvaluesclass = LineChartValuelist;
                    Mainlist.Add(obj);
                    string response = GetJson(Mainlist);
                    context.Response.Write(response);
                }
                else if (DayType == "WeakWise")
                {
                    cmd = new MySqlCommand("SELECT     indents.Branch_id,products_subcategory.SubCatName, products_category.Categoryname, productsdata.ProductName, SUM(indents_subtable.DeliveryQty) AS DeliveryQty, indents.I_date, indents_subtable.Product_sno, productsdata.sno, branchdata.BranchName FROM indents INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno INNER JOIN branchdata ON indents.Branch_id = branchdata.sno WHERE  (indents.I_date BETWEEN @starttime AND @endtime) AND (indents.Branch_id = @BranchID) AND (indents_subtable.Product_sno = @ProductId) GROUP BY indents.I_date, productsdata.sno");
                    cmd.Parameters.AddWithValue("@BranchID", BranchId);
                    cmd.Parameters.AddWithValue("@ProductId", Product_Id);
                    cmd.Parameters.AddWithValue("@starttime", GetLowDate(frmdate.AddDays(-8)));
                    cmd.Parameters.AddWithValue("@endtime", GetHighDate(todate));
                    DataTable dtLastweakroutesale = vdbmngr.SelectQuery(cmd).Tables[0];
                    List<LineChartValuesclass> LineChartValuelist = new List<LineChartValuesclass>();
                    if (dtLastweakroutesale.Rows.Count > 0)
                    {
                        LineChartValuesclass getLineChart = new LineChartValuesclass();
                        List<string> unitlist = new List<string>();
                        List<string> Deliverlist = new List<string>();
                        List<string> Datelist = new List<string>();
                        List<string> Statuslist = new List<string>();
                        List<string> ActMillist = new List<string>();
                        string IndDate = "";
                        double avgSaleQty = 0;
                        int count = 0;
                        foreach (DataRow dr in dtLastweakroutesale.Rows)
                        {
                            string DeliveryQty = dr["DeliveryQty"].ToString();
                            DelQty += DeliveryQty + ",";
                            double milltr = 0;
                            double.TryParse(dr["DeliveryQty"].ToString(), out milltr);
                            avgSaleQty += milltr;
                            string IndentDate = dr["I_date"].ToString();
                            DateTime now = Convert.ToDateTime(IndentDate).AddDays(1);
                            string dayname = now.DayOfWeek.ToString();
                            DateTime dtIndentDate = Convert.ToDateTime(IndentDate).AddDays(1);
                            string ChangedTime = dtIndentDate.ToString("dd");
                            string newdate = ChangedTime + "/" + dayname;
                            IndDate += newdate + ",";
                            count++;
                        }
                        IndDate = IndDate.Substring(0, IndDate.Length - 1);
                        getLineChart.IndentDate = IndDate;
                        getLineChart.dqty = DelQty;
                        getLineChart.ProductName = ProductName;
                        LineChartValuelist.Add(getLineChart);
                    }
                    string response = GetJson(LineChartValuelist);
                    context.Response.Write(response);
                }
                else if (DayType == "MonthWise")
                {
                    cmd = new MySqlCommand("SELECT     indents.Branch_id,products_subcategory.SubCatName, products_category.Categoryname, productsdata.ProductName, SUM(indents_subtable.DeliveryQty) AS DeliveryQty, indents.I_date, indents_subtable.Product_sno, productsdata.sno, branchdata.BranchName FROM indents INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno INNER JOIN branchdata ON indents.Branch_id = branchdata.sno WHERE  (indents.I_date BETWEEN @starttime AND @endtime) AND (indents.Branch_id = @BranchID) AND (indents_subtable.Product_sno = @ProductId) GROUP BY indents.I_date, productsdata.sno");
                    cmd.Parameters.AddWithValue("@BranchID", BranchId);
                    cmd.Parameters.AddWithValue("@ProductId", Product_Id);
                    cmd.Parameters.AddWithValue("@starttime", GetLowDate(frmdate).AddDays(-31));
                    cmd.Parameters.AddWithValue("@endtime", GetHighDate(todate));
                    DataTable dtLastMonthroutesale = vdbmngr.SelectQuery(cmd).Tables[0];
                    List<LineChartValuesclass> LineChartValuelist = new List<LineChartValuesclass>();
                    if (dtLastMonthroutesale.Rows.Count > 0)
                    {
                        LineChartValuesclass getLineChart = new LineChartValuesclass();
                        List<string> unitlist = new List<string>();
                        List<string> Deliverlist = new List<string>();
                        List<string> Datelist = new List<string>();
                        List<string> Statuslist = new List<string>();
                        List<string> ActMillist = new List<string>();
                        string IndDate = "";
                        double avgSaleQty = 0;
                        int count = 0;
                        foreach (DataRow dr in dtLastMonthroutesale.Rows)
                        {
                            string DeliveryQty = dr["DeliveryQty"].ToString();
                            DelQty += DeliveryQty + ",";
                            double milltr = 0;
                            double.TryParse(dr["DeliveryQty"].ToString(), out milltr);
                            avgSaleQty += milltr;
                            string IndentDate = dr["I_date"].ToString();
                            DateTime now = Convert.ToDateTime(IndentDate).AddDays(1);
                            string dayname = now.DayOfWeek.ToString();
                            DateTime dtIndentDate = Convert.ToDateTime(IndentDate).AddDays(1);
                            string ChangedTime = dtIndentDate.ToString("dd");
                            string newdate = ChangedTime + "/" + dayname;
                            IndDate += newdate + ",";
                            count++;
                        }
                       
                        IndDate = IndDate.Substring(0, IndDate.Length - 1);
                        getLineChart.IndentDate = IndDate;
                        getLineChart.dqty = DelQty;
                        getLineChart.ProductName = ProductName;
                        LineChartValuelist.Add(getLineChart);
                    }
                    string response = GetJson(LineChartValuelist);
                    context.Response.Write(response);
                }
                else if (DayType == "YearWise")
                {
                    cmd = new MySqlCommand("SELECT     indents.Branch_id,products_subcategory.SubCatName, products_category.Categoryname, productsdata.ProductName, SUM(indents_subtable.DeliveryQty) AS DeliveryQty, indents.I_date, indents_subtable.Product_sno, productsdata.sno, branchdata.BranchName FROM indents INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno INNER JOIN branchdata ON indents.Branch_id = branchdata.sno WHERE  (indents.I_date BETWEEN @starttime AND @endtime) AND (indents.Branch_id = @BranchID) AND (indents_subtable.Product_sno = @ProductId) GROUP BY indents.I_date, productsdata.sno");
                    cmd.Parameters.AddWithValue("@starttime", GetLowDate(frmdate).AddDays(-365));
                    cmd.Parameters.AddWithValue("@endtime", GetHighDate(todate));
                    DataTable dtLastYearroutesale = vdbmngr.SelectQuery(cmd).Tables[0];
                    List<LineChartValuesclass> LineChartValuelist = new List<LineChartValuesclass>();
                    if (dtLastYearroutesale.Rows.Count > 0)
                    {
                        LineChartValuesclass getLineChart = new LineChartValuesclass();
                        List<string> unitlist = new List<string>();
                        List<string> Deliverlist = new List<string>();
                        List<string> Datelist = new List<string>();
                        List<string> Statuslist = new List<string>();
                        List<string> ActMillist = new List<string>();

                        string IndDate = "";
                        double avgSaleQty = 0;
                        int count = 0;
                        foreach (DataRow dr in dtLastYearroutesale.Rows)
                        {
                            string DeliveryQty = dr["DeliveryQty"].ToString();
                            DelQty += DeliveryQty + ",";
                            double milltr = 0;
                            double.TryParse(dr["DeliveryQty"].ToString(), out milltr);
                            avgSaleQty += milltr;
                            string IndentDate = dr["I_date"].ToString();
                            DateTime now = Convert.ToDateTime(IndentDate).AddDays(1);
                            string dayname = now.DayOfWeek.ToString();
                            DateTime dtIndentDate = Convert.ToDateTime(IndentDate).AddDays(1);
                            string ChangedTime = dtIndentDate.ToString("dd");
                            string newdate = ChangedTime + "/" + dayname;
                            IndDate += newdate + ",";
                            count++;
                        }
                        IndDate = IndDate.Substring(0, IndDate.Length - 1);
                        getLineChart.IndentDate = IndDate;
                        getLineChart.dqty = DelQty;
                        getLineChart.ProductName = ProductName;
                        LineChartValuelist.Add(getLineChart);
                    }
                    string response = GetJson(LineChartValuelist);
                    context.Response.Write(response);
                }
            }
            #endregion
            #region
            else
            {
                if (DayType == "DayWise")
                {

                    cmd = new MySqlCommand("SELECT     indents.Branch_id,products_subcategory.SubCatName, products_category.Categoryname, productsdata.ProductName, SUM(indents_subtable.DeliveryQty) AS DeliveryQty, indents.I_date, indents_subtable.Product_sno, productsdata.sno, branchdata.BranchName FROM indents INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno INNER JOIN branchdata ON indents.Branch_id = branchdata.sno WHERE  (indents.I_date BETWEEN @starttime AND @endtime) AND (indents.Branch_id = @BranchID) AND (indents_subtable.Product_sno = @ProductId) GROUP BY indents.I_date, productsdata.sno");
                    cmd.Parameters.AddWithValue("@BranchID", BranchId);
                    cmd.Parameters.AddWithValue("@ProductId", Product_Id);
                    cmd.Parameters.AddWithValue("@starttime", GetLowDate(frmdate.AddDays(-2)));
                    cmd.Parameters.AddWithValue("@endtime", GetHighDate(todate.AddDays(-1)));
                    DataTable dtyesterdayroutesale = vdbmngr.SelectQuery(cmd).Tables[0];
                    DataView view = new DataView(dtyesterdayroutesale);
                    DataTable dtDates = view.ToTable(true, "I_date");
                    List<DayWiseDatescls> datelist = new List<DayWiseDatescls>();
                    List<DayWiseProductcls> productlist = new List<DayWiseProductcls>();
                    List<MainDayWiseProductDetails> maindaywiseproductdetailslst = new List<MainDayWiseProductDetails>();
                    if (dtyesterdayroutesale.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dtDates.Rows)
                        {
                            DayWiseDatescls obj1 = new DayWiseDatescls();

                            DateTime dtDoe = Convert.ToDateTime(dr["i_date"].ToString());
                            string strdate = dtDoe.ToString("dd/MMM");
                            obj1.DeliveryDates = strdate;
                            datelist.Add(obj1);
                        }
                        foreach (DataRow drr in dtyesterdayroutesale.Rows)
                        {
                            DayWiseProductcls obj2 = new DayWiseProductcls();
                            string DeliveryQty = drr["DeliveryQty"].ToString();
                            obj2.ProductName = drr["ProductName"].ToString();
                            obj2.DeliveryQty = drr["DeliveryQty"].ToString();
                            DateTime dtDoe = Convert.ToDateTime(drr["i_date"].ToString());
                            string strdate = dtDoe.ToString("dd/MMM");
                            obj2.Date = strdate;
                            productlist.Add(obj2);

                        }
                        MainDayWiseProductDetails obj3 = new MainDayWiseProductDetails();
                        obj3.daywisedatescls = datelist;
                        obj3.daywiseproductcls = productlist;
                        maindaywiseproductdetailslst.Add(obj3);
                    }
                    string response = GetJson(maindaywiseproductdetailslst);
                    context.Response.Write(response);
                }
                else if (DayType == "WeakWise")
                {
                    cmd = new MySqlCommand("SELECT     indents.Branch_id,products_subcategory.SubCatName, products_category.Categoryname, productsdata.ProductName, SUM(indents_subtable.DeliveryQty) AS DeliveryQty, indents.I_date, indents_subtable.Product_sno, productsdata.sno, branchdata.BranchName FROM indents INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno INNER JOIN branchdata ON indents.Branch_id = branchdata.sno WHERE  (indents.I_date BETWEEN @starttime AND @endtime) AND (indents.Branch_id = @BranchID) AND (indents_subtable.Product_sno = @ProductId) GROUP BY indents.I_date, productsdata.sno");
                    cmd.Parameters.AddWithValue("@BranchID", BranchId);
                    cmd.Parameters.AddWithValue("@ProductId", Product_Id);
                    cmd.Parameters.AddWithValue("@starttime", GetLowDate(frmdate.AddDays(-8)));
                    cmd.Parameters.AddWithValue("@endtime", GetHighDate(todate));
                    DataTable dtLastweakroutesale = vdbmngr.SelectQuery(cmd).Tables[0];
                    DataView view = new DataView(dtLastweakroutesale);
                    DataTable dtDates = view.ToTable(true, "I_date");
                    List<DayWiseDatescls> datelist = new List<DayWiseDatescls>();
                    List<DayWiseProductcls> productlist = new List<DayWiseProductcls>();
                    List<MainDayWiseProductDetails> maindaywiseproductdetailslst = new List<MainDayWiseProductDetails>();
                    if (dtLastweakroutesale.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dtDates.Rows)
                        {
                            DayWiseDatescls obj1 = new DayWiseDatescls();
                            DateTime dtDoe = Convert.ToDateTime(dr["i_date"].ToString());
                            string strdate = dtDoe.ToString("dd/MMM");
                            obj1.DeliveryDates = strdate;
                            datelist.Add(obj1);
                        }
                        foreach (DataRow drr in dtLastweakroutesale.Rows)
                        {
                            DayWiseProductcls obj2 = new DayWiseProductcls();
                            string DeliveryQty = drr["DeliveryQty"].ToString();
                            obj2.ProductName = drr["ProductName"].ToString();
                            obj2.DeliveryQty = drr["DeliveryQty"].ToString();
                            DateTime dtDoe = Convert.ToDateTime(drr["i_date"].ToString());
                            string strdate = dtDoe.ToString("dd/MMM");
                            obj2.Date = strdate;
                            productlist.Add(obj2);
                        }
                        MainDayWiseProductDetails obj3 = new MainDayWiseProductDetails();
                        obj3.daywisedatescls = datelist;
                        obj3.daywiseproductcls = productlist;
                        maindaywiseproductdetailslst.Add(obj3);
                    }
                    string response = GetJson(maindaywiseproductdetailslst);
                    context.Response.Write(response);
                }
                else if (DayType == "MonthWise")
                {
                    cmd = new MySqlCommand("SELECT     indents.Branch_id,products_subcategory.SubCatName, products_category.Categoryname, productsdata.ProductName, SUM(indents_subtable.DeliveryQty) AS DeliveryQty, indents.I_date, indents_subtable.Product_sno, productsdata.sno, branchdata.BranchName FROM indents INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno INNER JOIN branchdata ON indents.Branch_id = branchdata.sno WHERE  (indents.I_date BETWEEN @starttime AND @endtime) AND (indents.Branch_id = @BranchID) AND (indents_subtable.Product_sno = @ProductId) GROUP BY indents.I_date, productsdata.sno");
                    cmd.Parameters.AddWithValue("@BranchID", BranchId);
                    cmd.Parameters.AddWithValue("@ProductId", Product_Id);
                    cmd.Parameters.AddWithValue("@starttime", GetLowDate(frmdate).AddDays(-31));
                    cmd.Parameters.AddWithValue("@endtime", GetHighDate(todate));
                    DataTable dtLastMonthroutesale = vdbmngr.SelectQuery(cmd).Tables[0];
                    DataView view = new DataView(dtLastMonthroutesale);
                    DataTable dtDates = view.ToTable(true, "I_date");
                    List<DayWiseDatescls> datelist = new List<DayWiseDatescls>();
                    List<DayWiseProductcls> productlist = new List<DayWiseProductcls>();
                    List<MainDayWiseProductDetails> maindaywiseproductdetailslst = new List<MainDayWiseProductDetails>();
                    if (dtLastMonthroutesale.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dtDates.Rows)
                        {
                            DayWiseDatescls obj1 = new DayWiseDatescls();
                            DateTime dtDoe = Convert.ToDateTime(dr["i_date"].ToString());
                            string strdate = dtDoe.ToString("dd/MMM");
                            obj1.DeliveryDates = strdate;
                            datelist.Add(obj1);
                        }
                        foreach (DataRow drr in dtLastMonthroutesale.Rows)
                        {
                            DayWiseProductcls obj2 = new DayWiseProductcls();
                            string DeliveryQty = drr["DeliveryQty"].ToString();
                            obj2.ProductName = drr["ProductName"].ToString();
                            obj2.DeliveryQty = drr["DeliveryQty"].ToString();
                            DateTime dtDoe = Convert.ToDateTime(drr["i_date"].ToString());
                            string strdate = dtDoe.ToString("dd/MMM");
                            obj2.Date = strdate;
                            productlist.Add(obj2);
                        }
                        MainDayWiseProductDetails obj3 = new MainDayWiseProductDetails();
                        obj3.daywisedatescls = datelist;
                        obj3.daywiseproductcls = productlist;
                        maindaywiseproductdetailslst.Add(obj3);
                    }
                    string response = GetJson(maindaywiseproductdetailslst);
                    context.Response.Write(response);
                }
                else if (DayType == "YearWise")
                {
                    DateTime Enddate = DateTime.Now;
                    DataTable Report = new DataTable();
                    DateTime firstmonth = new DateTime();
                    DateTime lastmonth = new DateTime();
                    Enddate = Enddate.AddMonths(1);
                    TimeSpan dateSpan = Enddate.Subtract(frmdate);
                    int years = (dateSpan.Days / 365);
                    int months = ((dateSpan.Days % 365) / 31) + (years * 12);
                    Report.Columns.Add("I_date");
                    Report.Columns.Add("ProductName");
                    Report.Columns.Add("DeliveryQty");
                    if (months != 0)
                    {
                        for (int j = 0; j < months; j++)
                        {
                            firstmonth = GetLowMonthRetrive(frmdate.AddMonths(j));
                            lastmonth = GetHighMonth(firstmonth);
                            DateTime dtF = firstmonth.AddDays(-1);
                            cmd = new MySqlCommand("SELECT     indents.Branch_id,products_subcategory.SubCatName, products_category.Categoryname, productsdata.ProductName, SUM(indents_subtable.DeliveryQty) AS DeliveryQty, indents.I_date, indents_subtable.Product_sno, productsdata.sno, branchdata.BranchName FROM indents INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno INNER JOIN branchdata ON indents.Branch_id = branchdata.sno WHERE  (indents.I_date BETWEEN @starttime AND @endtime) AND (indents.Branch_id = @BranchID) AND (indents_subtable.Product_sno = @ProductId) GROUP BY  productsdata.sno");
                            cmd.Parameters.AddWithValue("@BranchID", BranchId);
                            cmd.Parameters.AddWithValue("@ProductId", Product_Id);
                            cmd.Parameters.AddWithValue("@starttime", dtF);
                            cmd.Parameters.AddWithValue("@endtime", lastmonth);
                            DataTable dtLastYearroutesale = vdbmngr.SelectQuery(cmd).Tables[0];
                            if (dtLastYearroutesale.Rows.Count > 0)
                            {
                                foreach (DataRow drtemp in dtLastYearroutesale.Rows)
                                {
                                    DataRow newrow = Report.NewRow();
                                    newrow["ProductName"] = drtemp["ProductName"].ToString();
                                    newrow["I_date"] = drtemp["I_date"].ToString();
                                    newrow["DeliveryQty"] = drtemp["DeliveryQty"].ToString();
                                    Report.Rows.Add(newrow);
                                }
                            }
                        }
                    }
                    DataView view = new DataView(Report);
                    DataTable dtDates = view.ToTable(true, "I_date");
                    List<DayWiseDatescls> datelist = new List<DayWiseDatescls>();
                    List<DayWiseProductcls> productlist = new List<DayWiseProductcls>();
                    List<MainDayWiseProductDetails> maindaywiseproductdetailslst = new List<MainDayWiseProductDetails>();
                    if (Report.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dtDates.Rows)
                        {
                            DayWiseDatescls obj1 = new DayWiseDatescls();
                            DateTime dtDoe = Convert.ToDateTime(dr["i_date"].ToString());
                            string strdate = dtDoe.ToString("MMM/yyyy");
                            obj1.DeliveryDates = strdate;
                            datelist.Add(obj1);
                        }
                        foreach (DataRow drr in Report.Rows)
                        {
                            DayWiseProductcls obj2 = new DayWiseProductcls();
                            string DeliveryQty = drr["DeliveryQty"].ToString();
                            obj2.ProductName = drr["ProductName"].ToString();
                            obj2.DeliveryQty = drr["DeliveryQty"].ToString();
                            DateTime dtDoe = Convert.ToDateTime(drr["i_date"].ToString());
                            string strdate = dtDoe.ToString("MMM/yyyy");
                            obj2.Date = strdate;
                            productlist.Add(obj2);
                        }
                        MainDayWiseProductDetails obj3 = new MainDayWiseProductDetails();
                        obj3.daywisedatescls = datelist;
                        obj3.daywiseproductcls = productlist;
                        maindaywiseproductdetailslst.Add(obj3);
                    }
                    string response = GetJson(maindaywiseproductdetailslst);
                    context.Response.Write(response);
                }
                #endregion
            }

        }
        catch
        {
        }
    }
    private void Get_SalesOfficeBetweenDayProduct_Comparison(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            DateTime ServerDateCurrentdate = VehicleDBMgr.GetTime(vdbmngr.conn);
            string BranchId = context.Session["ClickBranchid"].ToString();
            string FRDATE = context.Session["LDFD"].ToString();
            string TRDATE = context.Session["LDTD"].ToString();
            DateTime frmdate = Convert.ToDateTime(FRDATE);
            DateTime todate = Convert.ToDateTime(TRDATE);
            string DayType = "DayWise";
            string ProductName = "";
            string DelQty = "";
            double totalqty = 0;
            #region
            if (DayType == "DayWise")
            {

                cmd = new MySqlCommand("SELECT    branchmappingtable.SuperBranch, branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) / 2, 2) AS DeliveryQty, ROUND(AVG(indents_subtable.DeliveryQty), 2) AS AvgQty,ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) / 2, 2) AS SaleValue, branchdata.sno,indents.I_date FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SubBranch = @BranchId) GROUP BY branchmappingtable.SubBranch,DATE_FORMAT(indents.I_date, '%Y%m%d')");
                cmd.Parameters.AddWithValue("@BranchId", BranchId);
                cmd.Parameters.AddWithValue("@d1", GetLowDate(frmdate.AddDays(-1)));
                cmd.Parameters.AddWithValue("@d2", GetHighDate(todate.AddDays(-1)));
                DataTable dtyesterdayroutesale = vdbmngr.SelectQuery(cmd).Tables[0];
                List<LineChartValuesclass> LineChartValuelist = new List<LineChartValuesclass>();
                List<TotalProductclass> Categeorylist = new List<TotalProductclass>();
                List<MainComaparisonDetails> Mainlist = new List<MainComaparisonDetails>();
                if (dtyesterdayroutesale.Rows.Count > 0)
                {
                    LineChartValuesclass getLineChart = new LineChartValuesclass();
                    List<string> unitlist = new List<string>();
                    List<string> Deliverlist = new List<string>();
                    List<string> Datelist = new List<string>();
                    List<string> Statuslist = new List<string>();
                    List<string> ActMillist = new List<string>();
                    string IndDate = "";
                    double avgSaleQty = 0;
                    int count = 0;
                    if (BranchId == "174")
                    {
                        DataTable Dtreport = new DataTable();
                        Dtreport.Columns.Add("branchid");
                        Dtreport.Columns.Add("DeliveryQty");
                        Dtreport.Columns.Add("I_date");
                        foreach (DataRow drr in dtyesterdayroutesale.Rows)
                        {
                            DataRow newrow = Dtreport.NewRow();
                            newrow["branchid"] = "174";
                            newrow["DeliveryQty"] = drr["DeliveryQty"].ToString();
                            newrow["I_date"] = drr["I_date"].ToString();
                            Dtreport.Rows.Add(newrow);
                        }
                        foreach (DataRow dr in dtyesterdayroutesale.Rows)
                        {
                            string DeliveryQty = dr["DeliveryQty"].ToString();
                            DelQty += DeliveryQty + ",";
                            double milltr = 0;
                            double.TryParse(dr["DeliveryQty"].ToString(), out milltr);
                            avgSaleQty += milltr;
                            string IndentDate = dr["I_date"].ToString();
                            DateTime now = Convert.ToDateTime(IndentDate).AddDays(1);
                            string dayname = now.DayOfWeek.ToString();
                            DateTime dtIndentDate = Convert.ToDateTime(IndentDate).AddDays(1);
                            string ChangedTime = dtIndentDate.ToString("dd");
                            string newdate = ChangedTime + "/" + dayname;
                            IndDate += newdate + ",";
                            count++;
                        }
                    }
                    else
                    {
                        foreach (DataRow dr in dtyesterdayroutesale.Rows)
                        {
                            string DeliveryQty = dr["DeliveryQty"].ToString();
                            DelQty += DeliveryQty + ",";
                            double milltr = 0;
                            double.TryParse(dr["DeliveryQty"].ToString(), out milltr);
                            avgSaleQty += milltr;
                            string IndentDate = dr["I_date"].ToString();
                            DateTime now = Convert.ToDateTime(IndentDate).AddDays(1);
                            string dayname = now.DayOfWeek.ToString();
                            DateTime dtIndentDate = Convert.ToDateTime(IndentDate).AddDays(1);
                            string ChangedTime = dtIndentDate.ToString("dd");
                            string newdate = ChangedTime + "/" + dayname;
                            IndDate += newdate + ",";
                            count++;
                        }
                    }
                    IndDate = IndDate.Substring(0, IndDate.Length - 1);
                    getLineChart.IndentDate = IndDate;
                    getLineChart.dqty = DelQty;
                    getLineChart.ProductName = ProductName;
                    LineChartValuelist.Add(getLineChart);
                }
                cmd = new MySqlCommand("SELECT  ROUND(indents_subtable.UnitCost, 2) AS cost, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty, ROUND(SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost), 2) AS salevalue, products_category.Categoryname, productsdata.ProductName, productsdata.sno AS productid, products_category.sno AS catsno FROM  indents INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno INNER JOIN branchmappingtable ON indents.Branch_id = branchmappingtable.SubBranch WHERE (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @Branchid) GROUP BY products_category.Categoryname, productsdata.sno, products_category.sno ORDER BY catsno, productid");
                cmd.Parameters.AddWithValue("@Branchid", BranchId);
                cmd.Parameters.AddWithValue("@d1", GetLowDate(frmdate.AddDays(-1)));
                cmd.Parameters.AddWithValue("@d2", GetHighDate(frmdate.AddDays(-1)));
                DataTable dtyester_dayroutesale = vdbmngr.SelectQuery(cmd).Tables[0];
                foreach (DataRow dr in dtyester_dayroutesale.Rows)
                {
                    TotalProductclass GetProduct = new TotalProductclass();
                    GetProduct.Qty = dr["DeliveryQty"].ToString();
                    string tempqty = dr["DeliveryQty"].ToString();
                    double actualqty = 0;
                    double.TryParse(tempqty, out actualqty);
                    double Percen = 0;
                    Percen = (actualqty / totalqty) * 100;
                    Percen = Math.Round(Percen, 2);
                    GetProduct.CategeoryName = dr["ProductName"].ToString();
                    GetProduct.CatSno = dr["catsno"].ToString();
                    GetProduct.TotQty = totalqty.ToString();
                    Categeorylist.Add(GetProduct);
                }
                MainComaparisonDetails obj = new MainComaparisonDetails();
                obj.TotalProductclass = Categeorylist;
                obj.linechartvaluesclass = LineChartValuelist;
                Mainlist.Add(obj);
                string response = GetJson(Mainlist);
                context.Response.Write(response);
            }
            #endregion
        }
        catch
        {
        }
    }
    private void Get_SalesTypeBetweenDayProduct_Comparison(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            DateTime ServerDateCurrentdate = VehicleDBMgr.GetTime(vdbmngr.conn);
            string BranchId = context.Session["ClickBranchid"].ToString();
            string SalesTypeId = context.Session["SalesTypeId"].ToString();
            DateTime fromdate = DateTime.Now;
            DateTime todate = VehicleDBMgr.GetTime(vdbmngr.conn);
            DateTime frmdate = todate.AddDays(-15);
            string DayType = "DayWise";
            string ProductName = "";
            string DelQty = "";
            double totalqty = 0;
            #region
            if (DayType == "DayWise")
            {

                cmd = new MySqlCommand("SELECT    indt.I_date,modifiedroutes.BranchID AS SuperBranch, modifiedroutes.RouteName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS saleQty, ROUND(AVG(indents_subtable.DeliveryQty), 2) AS AvgQty, SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost) AS salevalue, modifiedroutes.Sno AS routeid, modifidroutssubtab.BranchID AS bid, branchdata_2.BranchName, branchdata_2.flag, branchdata_1.sno AS BranchID, branchdata_2.SalesType AS SalesTypeId FROM branchdata branchdata_2 RIGHT OUTER JOIN branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT  RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE (EDate IS NULL) AND (CDate <= @d1) OR (EDate > @d2) AND (CDate <= @d1)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo ON branchdata_2.sno = modifidroutssubtab.BranchID LEFT OUTER JOIN indents_subtable INNER JOIN (SELECT  IndentNo, I_date, Branch_id FROM  indents WHERE   (I_date BETWEEN @d1 AND @d2)) indt ON indents_subtable.IndentNo = indt.IndentNo ON modifidroutssubtab.BranchID = indt.Branch_id WHERE  (branchdata.SalesType IS NOT NULL) AND (indents_subtable.DeliveryQty <> 0) AND (branchdata.sno = @Branchid) AND (branchdata_2.SalesType = @SalesType) GROUP BY SalesTypeId,DATE_FORMAT(indt.I_date, '%Y%m%d') ORDER BY SalesTypeId,indt.I_date");
                cmd.Parameters.AddWithValue("@Branchid", BranchId);
                cmd.Parameters.AddWithValue("@Salestype", SalesTypeId);
                cmd.Parameters.AddWithValue("@d1", GetLowDate(frmdate.AddDays(-2)));
                cmd.Parameters.AddWithValue("@d2", GetHighDate(todate.AddDays(-1)));
                DataTable dtyesterdayroutesale = vdbmngr.SelectQuery(cmd).Tables[0];
                List<LineChartValuesclass> LineChartValuelist = new List<LineChartValuesclass>();
                List<TotalProductclass> Categeorylist = new List<TotalProductclass>();
                List<MainComaparisonDetails> Mainlist = new List<MainComaparisonDetails>();
                if (dtyesterdayroutesale.Rows.Count > 0)
                {
                    LineChartValuesclass getLineChart = new LineChartValuesclass();
                    List<string> unitlist = new List<string>();
                    List<string> Deliverlist = new List<string>();
                    List<string> Datelist = new List<string>();
                    List<string> Statuslist = new List<string>();
                    List<string> ActMillist = new List<string>();
                    string IndDate = "";
                    double avgSaleQty = 0;
                    int count = 0;
                    foreach (DataRow dr in dtyesterdayroutesale.Rows)
                    {
                        string DeliveryQty = dr["saleQty"].ToString();
                        DelQty += DeliveryQty + ",";
                        double milltr = 0;
                        double.TryParse(dr["saleQty"].ToString(), out milltr);
                        avgSaleQty += milltr;
                        string IndentDate = dr["I_date"].ToString();
                        DateTime now = Convert.ToDateTime(IndentDate).AddDays(1);
                        string dayname = now.DayOfWeek.ToString();
                        DateTime dtIndentDate = Convert.ToDateTime(IndentDate).AddDays(1);
                        string ChangedTime = dtIndentDate.ToString("dd");
                        string newdate = ChangedTime + "/" + dayname;
                        IndDate += newdate + ",";
                        count++;
                    }
                    IndDate = IndDate.Substring(0, IndDate.Length - 1);
                    getLineChart.IndentDate = IndDate;
                    getLineChart.dqty = DelQty;
                    getLineChart.ProductName = ProductName;
                    LineChartValuelist.Add(getLineChart);
                }
                cmd = new MySqlCommand("SELECT   modifiedroutes.BranchID AS SuperBranch, modifiedroutes.RouteName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS saleQty, ROUND(AVG(indents_subtable.DeliveryQty), 2) AS AvgQty, SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost) AS salevalue, modifiedroutes.Sno AS routeid, modifidroutssubtab.BranchID AS bid, branchdata_2.BranchName, branchdata_2.flag, branchdata_1.sno AS BranchID, branchdata_2.SalesType AS SalesTypeId, productsdata.productname FROM branchdata branchdata_2 RIGHT OUTER JOIN branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT   RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @d1) OR (EDate > @d1) AND (CDate <= @d1)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo ON branchdata_2.sno = modifidroutssubtab.BranchID LEFT OUTER JOIN indents_subtable INNER JOIN productsdata ON productsdata.sno = indents_subtable.Product_sno INNER JOIN (SELECT   IndentNo, I_date, Branch_id FROM  indents WHERE  (I_date BETWEEN @d1 AND @d2)) indt ON indents_subtable.IndentNo = indt.IndentNo ON modifidroutssubtab.BranchID = indt.Branch_id WHERE  (branchdata.SalesType IS NOT NULL) AND (indents_subtable.DeliveryQty <> 0) AND (branchdata.sno = @BranchID) AND (branchdata_2.SalesType = @SalesType) GROUP BY SalesTypeId, productsdata.sno ORDER BY SalesTypeId");
                cmd.Parameters.AddWithValue("@Branchid", BranchId);
                cmd.Parameters.AddWithValue("@d1", GetLowDate(fromdate.AddDays(-2)));
                cmd.Parameters.AddWithValue("@d2", GetHighDate(fromdate.AddDays(-1)));
                cmd.Parameters.AddWithValue("@Salestype", SalesTypeId);
                DataTable dtyester_dayroutesale = vdbmngr.SelectQuery(cmd).Tables[0];
                foreach (DataRow dr in dtyester_dayroutesale.Rows)
                {
                    TotalProductclass GetProduct = new TotalProductclass();
                    GetProduct.Qty = dr["saleQty"].ToString();
                    string tempqty = dr["saleQty"].ToString();
                    double actualqty = 0;
                    double.TryParse(tempqty, out actualqty);
                    double Percen = 0;
                    Percen = (actualqty / totalqty) * 100;
                    Percen = Math.Round(Percen, 2);
                    GetProduct.CategeoryName = dr["ProductName"].ToString();
                    GetProduct.CatSno = dr["SuperBranch"].ToString();
                    GetProduct.TotQty = totalqty.ToString();
                    Categeorylist.Add(GetProduct);
                }
                MainComaparisonDetails obj = new MainComaparisonDetails();
                obj.TotalProductclass = Categeorylist;
                obj.linechartvaluesclass = LineChartValuelist;
                Mainlist.Add(obj);
                string response = GetJson(Mainlist);
                context.Response.Write(response);
            }
            #endregion
        }
        catch
        {
        }
    }
    private void Get_RouteWiseBetweenDayProduct_Comparison(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            DateTime ServerDateCurrentdate = VehicleDBMgr.GetTime(vdbmngr.conn);
            string BranchId = context.Session["RouteId"].ToString();
            string SalesTypeId = context.Session["SalesTypeId"].ToString();
            DateTime fromdate = DateTime.Now;
            DateTime todate = VehicleDBMgr.GetTime(vdbmngr.conn);
            DateTime frmdate = todate.AddDays(-15);
            string DayType = "DayWise";
            string ProductName = "";
            string DelQty = "";
            double totalqty = 0;
            #region
            if (DayType == "DayWise")
            {
                cmd = new MySqlCommand("SELECT    indt.I_date,modifiedroutes.BranchID AS SuperBranch, modifiedroutes.RouteName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS saleQty, ROUND(AVG(indents_subtable.DeliveryQty), 2) AS AvgQty, SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost) AS salevalue, modifiedroutes.Sno AS routeid, modifidroutssubtab.BranchID AS bid, branchdata_2.BranchName, branchdata_2.flag, branchdata_1.sno AS BranchID, branchdata_2.SalesType AS SalesTypeId FROM branchdata branchdata_2 RIGHT OUTER JOIN branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT  RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE (EDate IS NULL) AND (CDate <= @d1) OR (EDate > @d2) AND (CDate <= @d1)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo ON branchdata_2.sno = modifidroutssubtab.BranchID LEFT OUTER JOIN indents_subtable INNER JOIN (SELECT  IndentNo, I_date, Branch_id FROM  indents WHERE   (I_date BETWEEN @d1 AND @d2)) indt ON indents_subtable.IndentNo = indt.IndentNo ON modifidroutssubtab.BranchID = indt.Branch_id WHERE  (branchdata.SalesType IS NOT NULL) AND (indents_subtable.DeliveryQty <> 0) AND (modifiedroutes.sno = @Branchid) AND (branchdata_2.SalesType = @SalesType) GROUP BY SalesTypeId,DATE_FORMAT(indt.I_date, '%Y%m%d') ORDER BY SalesTypeId,indt.I_date");
                cmd.Parameters.AddWithValue("@Branchid", BranchId);
                cmd.Parameters.AddWithValue("@Salestype", SalesTypeId);
                cmd.Parameters.AddWithValue("@d1", GetLowDate(frmdate.AddDays(-2)));
                cmd.Parameters.AddWithValue("@d2", GetHighDate(todate.AddDays(-1)));
                DataTable dtyesterdayroutesale = vdbmngr.SelectQuery(cmd).Tables[0];
                List<LineChartValuesclass> LineChartValuelist = new List<LineChartValuesclass>();
                List<TotalProductclass> Categeorylist = new List<TotalProductclass>();
                List<MainComaparisonDetails> Mainlist = new List<MainComaparisonDetails>();
                if (dtyesterdayroutesale.Rows.Count > 0)
                {
                    LineChartValuesclass getLineChart = new LineChartValuesclass();
                    List<string> unitlist = new List<string>();
                    List<string> Deliverlist = new List<string>();
                    List<string> Datelist = new List<string>();
                    List<string> Statuslist = new List<string>();
                    List<string> ActMillist = new List<string>();
                    string IndDate = "";
                    double avgSaleQty = 0;
                    int count = 0;
                    foreach (DataRow dr in dtyesterdayroutesale.Rows)
                    {
                        string DeliveryQty = dr["saleQty"].ToString();
                        DelQty += DeliveryQty + ",";
                        double milltr = 0;
                        double.TryParse(dr["saleQty"].ToString(), out milltr);
                        avgSaleQty += milltr;
                        string IndentDate = dr["I_date"].ToString();
                        DateTime now = Convert.ToDateTime(IndentDate).AddDays(1);
                        string dayname = now.DayOfWeek.ToString();
                        DateTime dtIndentDate = Convert.ToDateTime(IndentDate).AddDays(1);
                        string ChangedTime = dtIndentDate.ToString("dd");
                        string newdate = ChangedTime + "/" + dayname;
                        IndDate += newdate + ",";
                        count++;
                    }
                    IndDate = IndDate.Substring(0, IndDate.Length - 1);
                    getLineChart.IndentDate = IndDate;
                    getLineChart.dqty = DelQty;
                    getLineChart.ProductName = ProductName;
                    LineChartValuelist.Add(getLineChart);
                }
                cmd = new MySqlCommand("SELECT   modifiedroutes.BranchID AS SuperBranch, modifiedroutes.RouteName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS saleQty, ROUND(AVG(indents_subtable.DeliveryQty), 2) AS AvgQty, SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost) AS salevalue, modifiedroutes.Sno AS routeid, modifidroutssubtab.BranchID AS bid, branchdata_2.BranchName, branchdata_2.flag, branchdata_1.sno AS BranchID, branchdata_2.SalesType AS SalesTypeId, productsdata.productname FROM branchdata branchdata_2 RIGHT OUTER JOIN branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN modifiedroutes ON branchdata.sno = modifiedroutes.BranchID INNER JOIN (SELECT   RefNo, Rank, LevelType, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE  (EDate IS NULL) AND (CDate <= @d1) OR (EDate > @d1) AND (CDate <= @d1)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo ON branchdata_2.sno = modifidroutssubtab.BranchID LEFT OUTER JOIN indents_subtable INNER JOIN productsdata ON productsdata.sno = indents_subtable.Product_sno INNER JOIN (SELECT   IndentNo, I_date, Branch_id FROM  indents WHERE  (I_date BETWEEN @d1 AND @d2)) indt ON indents_subtable.IndentNo = indt.IndentNo ON modifidroutssubtab.BranchID = indt.Branch_id WHERE  (branchdata.SalesType IS NOT NULL) AND (indents_subtable.DeliveryQty <> 0) AND (modifiedroutes.sno = @BranchID) AND (branchdata_2.SalesType = @SalesType) GROUP BY SalesTypeId, productsdata.sno ORDER BY SalesTypeId");
                cmd.Parameters.AddWithValue("@Branchid", BranchId);
                cmd.Parameters.AddWithValue("@d1", GetLowDate(fromdate.AddDays(-2)));
                cmd.Parameters.AddWithValue("@d2", GetHighDate(fromdate.AddDays(-1)));
                cmd.Parameters.AddWithValue("@Salestype", SalesTypeId);
                DataTable dtyester_dayroutesale = vdbmngr.SelectQuery(cmd).Tables[0];
                foreach (DataRow dr in dtyester_dayroutesale.Rows)
                {
                    TotalProductclass GetProduct = new TotalProductclass();
                    GetProduct.Qty = dr["saleQty"].ToString();
                    string tempqty = dr["saleQty"].ToString();
                    double actualqty = 0;
                    double.TryParse(tempqty, out actualqty);
                    double Percen = 0;
                    Percen = (actualqty / totalqty) * 100;
                    Percen = Math.Round(Percen, 2);
                    GetProduct.CategeoryName = dr["ProductName"].ToString();
                    GetProduct.CatSno = dr["SuperBranch"].ToString();
                    GetProduct.TotQty = totalqty.ToString();
                    Categeorylist.Add(GetProduct);
                }
                MainComaparisonDetails obj = new MainComaparisonDetails();
                obj.TotalProductclass = Categeorylist;
                obj.linechartvaluesclass = LineChartValuelist;
                Mainlist.Add(obj);
                string response = GetJson(Mainlist);
                context.Response.Write(response);
            }
            #endregion
        }
        catch
        {
        }
    }
    public class IndentClass
    {
        public string RouteName { get; set; }
        public string unitQty { get; set; }
        public string ProductName { get; set; }
        public string Qty { get; set; }
        public string totalqty { get; set; }
        public string Categoryname { get; set; }
        public string SubCatName { get; set; }
        public string BranchName { get; set; }
        public string gtotqty { get; set; }
        public string AgentName { get; set; }
        public string sno { get; set; }
        public string Route_id { get; set; }
    }
    private void getAgent_Name(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            DataTable dtRoutedata = new DataTable();
            string IndentType = context.Request["IndentType"];
            string RouteID = context.Request["Routeid"];
            IndentType = "Indent1";
            cmd = new MySqlCommand("SELECT branchdata.sno, branchdata.BranchName FROM dispatch INNER JOIN dispatch_sub ON dispatch.sno = dispatch_sub.dispatch_sno INNER JOIN branchroutes ON dispatch_sub.Route_id = branchroutes.Sno INNER JOIN branchroutesubtable ON branchroutes.Sno = branchroutesubtable.RefNo INNER JOIN branchdata ON branchroutesubtable.BranchID = branchdata.sno WHERE (dispatch.sno = @dispsno)");
            cmd.Parameters.AddWithValue("@dispsno", RouteID);
            dtRoutedata = vdbmngr.SelectQuery(cmd).Tables[0];
            List<IndentClass> Indentlist = new List<IndentClass>();
            if (dtRoutedata.Rows.Count > 0)
            {
                foreach (DataRow dr in dtRoutedata.Rows)
                {
                    IndentClass GetIndentrout = new IndentClass();
                    GetIndentrout.AgentName = dr["BranchName"].ToString();
                    GetIndentrout.sno = dr["sno"].ToString();
                    Indentlist.Add(GetIndentrout);
                }
            }
            string response = GetJson(Indentlist);
            context.Response.Write(response);
        }
        catch
        {
        }
    }
    #endregion
    private void saveBankDetails(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            string name = context.Request["Name"];
            string code = context.Request["Code"];
            string status = context.Request["status"];
            DateTime createdon = DateTime.Now;
            string btn_save = context.Request["btnVal"];
            if (btn_save == "save")
            {
                cmd = new MySqlCommand("insert into bankmaster (bankname,code,status) values (@bankname,@code,@status)");
                cmd.Parameters.AddWithValue("@bankname", name);
                cmd.Parameters.AddWithValue("@code", code);
                cmd.Parameters.AddWithValue("@status", status);
                vdbmngr.insert(cmd);
                string msg = "Bank detailes successfully saved";
                string Response = GetJson(msg);
                context.Response.Write(Response);
            }
            else
            {
                string sno = context.Request["sno"];
                cmd = new MySqlCommand("Update bankmaster set  code=@code,status=@status,bankname=@bankname where sno=@sno");
                cmd.Parameters.AddWithValue("@bankname", name);
                cmd.Parameters.AddWithValue("@code", code);
                cmd.Parameters.AddWithValue("@status", status);
                cmd.Parameters.AddWithValue("@sno", sno);
                vdbmngr.Update(cmd);
                string msg = "Bank successfully updated";
                string Response = GetJson(msg);
                context.Response.Write(Response);
            }
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }
    public class BankMaster
    {
        public string name { get; set; }
        public string Code { get; set; }
        public string sno { get; set; }
        public string status { get; set; }
        public string code { get; set; }
    }
    private void get_bank_details(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            cmd = new MySqlCommand("SELECT sno,bankname, code, status FROM bankmaster");
            DataTable routes = vdbmngr.SelectQuery(cmd).Tables[0];
            List<BankMaster> bankMasterlist = new List<BankMaster>();
            foreach (DataRow dr in routes.Rows)
            {
                BankMaster getbankdetails = new BankMaster();
                getbankdetails.name = dr["bankname"].ToString();
                getbankdetails.code = dr["code"].ToString();
                getbankdetails.status = dr["status"].ToString();
                getbankdetails.sno = dr["sno"].ToString();
                bankMasterlist.Add(getbankdetails);
            }
            string response = GetJson(bankMasterlist);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);

        }
    }
    private void get_Employees_leveltypes(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            string Branchid = context.Request["branchid"].ToString();
            cmd = new MySqlCommand("SELECT Sno, UserName, Password, LevelType, Branch, flag, Userdata_sno, Owner, EmpName, Address, Mobno, Email, LWC, RefName, Dept_Sno, MTarget, WTarget,DTarget, EmpType, Role, empid FROM   empmanage WHERE  (Branch = @Brnchid) GROUP BY LevelType");
            cmd.Parameters.AddWithValue("@Brnchid", Branchid);
            DataTable dtaddress = vdbmngr.SelectQuery(cmd).Tables[0];
            List<employeesmgnt> Otherslist = new List<employeesmgnt>();
            foreach (DataRow dr in dtaddress.Rows)
            {
                employeesmgnt obj1 = new employeesmgnt();
                obj1.sno = dr["sno"].ToString();
                obj1.LevelType = dr["LevelType"].ToString();
                Otherslist.Add(obj1);
            }
            string response = GetJson(Otherslist);
            context.Response.Write(response);
        }
        catch
        {
        }
    }
    private void get_Indent_Employees(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            string Branchid = context.Session["branch"].ToString();
            cmd = new MySqlCommand("SELECT Sno, UserName, Password, LevelType, Branch, flag, Userdata_sno, Owner, EmpName, Address, Mobno, Email, LWC, RefName, Dept_Sno, MTarget, WTarget,DTarget, EmpType, Role, empid FROM   empmanage WHERE  (Branch = @Brnchid) AND (LevelType = 'Opperations')");
            cmd.Parameters.AddWithValue("@Brnchid", Branchid);
            DataTable dtaddress = vdbmngr.SelectQuery(cmd).Tables[0];
            List<employeesmgnt> Otherslist = new List<employeesmgnt>();
            foreach (DataRow dr in dtaddress.Rows)
            {
                employeesmgnt obj1 = new employeesmgnt();
                obj1.sno = dr["sno"].ToString();
                obj1.EmpName = dr["EmpName"].ToString();
                Otherslist.Add(obj1);
            }
            string response = GetJson(Otherslist);
            context.Response.Write(response);
        }
        catch
        {
        }
    }
    public class Indclass
    {
        public string sno { get; set; }
        public string EmpName { get; set; }
        public string empid { get; set; }
        public string date { get; set; }
        public string btnVal { get; set; }
        public List<SubIndclass> Dispatcharr { get; set; }
    }
    public class SubIndclass
    {
        public string DispName { get; set; }
        public string BranchName { get; set; }
        public string dispatchid { get; set; }
    }
    private void Save_Dispatch_Assign_Details(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            var js = new JavaScriptSerializer();
            var title1 = context.Request.Params[1];
            Indclass obj = js.Deserialize<Indclass>(title1);
            string empid = obj.empid;
            string btnVal = obj.btnVal;
            string date = obj.date;
            DateTime dtfrom = Convert.ToDateTime(date);
            DateTime ServerDateCurrentdate = VehicleDBMgr.GetTime(vdbmngr.conn);
            string BranchID = context.Session["branch"].ToString();
            if (btnVal == "Save")
            {
                foreach (SubIndclass si in obj.Dispatcharr)
                {
                    cmd = new MySqlCommand("SELECT empmanage.UserName, dispatch.DispName, tripdata.Sno, tripdata.Status, DATE_FORMAT(tripdata.Cdate, '%d %b %y') AS Canceldate, tripdata.CollectedAmount, tripdata.SubmittedAmount FROM tripdata INNER JOIN empmanage ON tripdata.EmpId = empmanage.Sno INNER JOIN triproutes ON tripdata.Sno = triproutes.Tripdata_sno INNER JOIN dispatch ON triproutes.RouteID = dispatch.sno INNER JOIN branchdata ON empmanage.Branch = branchdata.sno INNER JOIN branchdata branchdata_1 ON empmanage.Branch = branchdata_1.sno WHERE (tripdata.I_Date BETWEEN @d1 AND @d2) AND (dispatch.sno = @BranchID) OR (tripdata.I_Date BETWEEN @d1 AND @d2) AND (dispatch.sno = @BranchID) order by dispatch.DispName");
                    cmd.Parameters.AddWithValue("@d1", dtfrom);
                    cmd.Parameters.AddWithValue("@d2", dtfrom);
                    cmd.Parameters.AddWithValue("@BranchID", si.dispatchid);
                    DataTable dtTrip = vdbmngr.SelectQuery(cmd).Tables[0];
                    if (dtTrip.Rows.Count > 0)
                    {
                        string tripdata_sno = dtTrip.Rows[0]["Sno"].ToString();
                        cmd = new MySqlCommand("Update tripdata set EmpId=@EmpId where sno=@sno ");
                        cmd.Parameters.AddWithValue("@EmpId", empid);
                        cmd.Parameters.AddWithValue("@sno", tripdata_sno);
                        vdbmngr.Update(cmd);
                    }
                }
                string msg = "Indent successfully Assigned";
                string response = GetJson(msg);
                context.Response.Write(response);
            }
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }
    public class DispatchClass
    {
        public string empid { get; set; }
        public string btnVal { get; set; }
        public string dispatchid { get; set; }
        public string[] dataarr { get; set; }
    }
    private void Svae_Indent_Assign_Details(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            var js = new JavaScriptSerializer();
            var title1 = context.Request.Params[1];
            DispatchClass obj1 = js.Deserialize<DispatchClass>(title1);
            string empid = obj1.empid;
            string btnVal = obj1.btnVal;
            DateTime ServerDateCurrentdate = VehicleDBMgr.GetTime(vdbmngr.conn);
            string BranchID = context.Session["branch"].ToString();
            if (btnVal == "Save")
            {
                foreach (string o in obj1.dataarr)
                {
                    cmd = new MySqlCommand("insert into tripdata (EmpId,AssignDate,Status,Permissions) values (@EmpId,@AssignDate,@Status,@Permissions)");
                    cmd.Parameters.AddWithValue("@empid", empid);
                    cmd.Parameters.AddWithValue("@AssignDate", ServerDateCurrentdate);
                    cmd.Parameters.AddWithValue("@Status", "A");
                    cmd.Parameters.AddWithValue("@Permissions", "O");
                    long tripdata_sno = vdbmngr.insertScalar(cmd);
                    cmd = new MySqlCommand("insert into triproutes (Tripdata_sno,RouteID) values (@Tripdata_sno,@RouteID)");
                    cmd.Parameters.AddWithValue("@Tripdata_sno", tripdata_sno);
                    cmd.Parameters.AddWithValue("@RouteID", o);
                    vdbmngr.insert(cmd);
                }
                string msg = "Indent successfully Assigned";
                string response = GetJson(msg);
                context.Response.Write(response);
            }
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }
    public class OthersMaster
    {
        public string sno { get; set; }
        public string ledgercode { get; set; }
        public string ledgename { get; set; }
        public string btnVal { get; set; }
        public string name { get; set; }
    }
    private void Svae_Others_Details(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            string ledgercode = context.Request["ledgercode"];
            string ledgename = context.Request["ledgename"];
            string btnVal = context.Request["btnVal"];
            string sno = context.Request["sno"];
            if (btnVal == "save")
            {
                cmd = new MySqlCommand("insert into othercolletion_name (name,ledgercode) values (@name,@ledgercode)");
                cmd.Parameters.AddWithValue("@ledgercode", ledgercode);
                cmd.Parameters.AddWithValue("@name", ledgename);
                vdbmngr.insert(cmd);
                string msg = "Others detailes successfully Saved";
                string response = GetJson(msg);
                context.Response.Write(response);
            }
            else
            {
                cmd = new MySqlCommand("Update othercolletion_name set ledgercode=@ledgercode,name=@name where sno=@sno ");
                cmd.Parameters.AddWithValue("@ledgercode", ledgercode);
                cmd.Parameters.AddWithValue("@name", ledgename);
                cmd.Parameters.AddWithValue("@sno", sno);
                vdbmngr.Update(cmd);
                string msg = "Others detailes successfully Updated";
                string response = GetJson(msg);
                context.Response.Write(response);
            }
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }
    private void get_Others_Details(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            cmd = new MySqlCommand("SELECT  sno,ledgercode,name FROM  othercolletion_name");
            DataTable dtaddress = vdbmngr.SelectQuery(cmd).Tables[0];
            List<OthersMaster> Otherslist = new List<OthersMaster>();
            foreach (DataRow dr in dtaddress.Rows)
            {
                OthersMaster obj1 = new OthersMaster();
                obj1.sno = dr["sno"].ToString();
                obj1.ledgercode = dr["ledgercode"].ToString();
                obj1.name = dr["name"].ToString();
                Otherslist.Add(obj1);
            }
            string response = GetJson(Otherslist);
            context.Response.Write(response);
        }
        catch
        {
        }
    }
    public class AgentInvoiceDetails
    {
        public List<Aagent_Invoice> Aagent_Invoice { get; set; }
        public List<Aagent_Invoice_item_det> Aagent_Invoice_item_det { get; set; }
        public List<Aagent_Inventary> Aagent_Inventary { get; set; }
    }

    public class Aagent_Invoice_item_det
    {
        public string sno { get; set; }
        public string ProductName { get; set; }
        public string Description { get; set; }
        public string qty { get; set; }
        public string price { get; set; }
        public string Vat { get; set; }
        public string rate { get; set; }
        public string uomqty { get; set; }
        public string hsncode { get; set; }
        public string uom { get; set; }
        public string discount { get; set; }
        public string taxablevalue { get; set; }
        public string sgst { get; set; }
        public string sgstamount { get; set; }
        public string cgst { get; set; }
        public string cgstamount { get; set; }
        public string igst { get; set; }
        public string igstamount { get; set; }
        public string itemcode { get; set; }
        public string totalamount { get; set; }
        public string dctype { get; set; }
        public string invoiceno { get; set; }
        public string pktqty { get; set; }
        public string TempInvoice { get; set; }
    }
    public class Aagent_Invoice
    {
        public string TinNumber { get; set; }
        public string address { get; set; }
        public string AgentName { get; set; }
        public string city { get; set; }
        public string companyphone { get; set; }
        public string companyemail { get; set; }
        public string AgentAddress { get; set; }
        public string BranchAddress { get; set; }
        public string ponumber { get; set; }
        public string invoiceno { get; set; }
        public string invoicedate { get; set; }
        public string DCNumber { get; set; }
        public string total { get; set; }
        public string companytinno { get; set; }
        public string companypanno { get; set; }
        public string buyerTinNumber { get; set; }
        public string quatationno { get; set; }
        public string pono { get; set; }
        public string grnno { get; set; }
        public string salestype { get; set; }
        public string titlename { get; set; }
        public string togstin { get; set; }
        public string fromgstn { get; set; }
        public string frmstatename { get; set; }
        public string frmstatecode { get; set; }
        public string tostatename { get; set; }
        public string tostatecode { get; set; }
        public string phoneno { get; set; }
        public string email { get; set; }
        public string dctype { get; set; }
        public string branchname { get; set; }
        public string buyercompanyname { get; set; }
        public string Op_balance { get; set; }
        public string TempInvoice { get; set; }
    }
    public class Aagent_Inventary
    {
        public string InvName { get; set; }
        public string Opqty { get; set; }
        public string Issueqty { get; set; }
        public string Receivedqty { get; set; }
        public string cloqty { get; set; }
    }
    public class customer_document_details
    {
        public string empsno { get; set; }
        public string employee_name { get; set; }
        public string documentid { get; set; }
        public string documentname { get; set; }
        public string ftplocation { get; set; }
        public string photo { get; set; }
    }
    private void getcustomer_Uploaded_Documents(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            string CustomerSno = context.Request["CustomerSno"];
            cmd = new MySqlCommand("SELECT sno, CustomerSno, documentpath, doe, entryby, documentid FROM customer_documents where CustomerSno=@CustomerSno");
            cmd.Parameters.AddWithValue("@CustomerSno", CustomerSno);
            DataTable dtemp = vdbmngr.SelectQuery(cmd).Tables[0];
            List<customer_document_details> bankMasterlist = new List<customer_document_details>();
            if (dtemp.Rows.Count > 0)
            {
                foreach (DataRow dr in dtemp.Rows)
                {
                    customer_document_details GetEmployee = new customer_document_details();
                    GetEmployee.empsno = dr["CustomerSno"].ToString();
                    GetEmployee.documentid = dr["documentid"].ToString();
                    GetEmployee.ftplocation = "ftp://223.196.32.30:21/Sales/";
                    GetEmployee.photo = dr["documentpath"].ToString();
                    bankMasterlist.Add(GetEmployee);
                }
            }
            string response = GetJson(bankMasterlist);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }
    private void save_customerdocument(HttpContext context)
    {
        try
        {
            if (context.Request.Files.Count > 0)
            {
                vdbmngr = new VehicleDBMgr();
                string CustomerSno = context.Request["CustomerSno"];
                CustomerSno = CustomerSno.TrimEnd();
                string Customer_Code = context.Request["Customer_Code"];
                Customer_Code = Customer_Code.TrimEnd();
                string documentname = context.Request["documentname"];
                documentname = documentname.TrimEnd();
                string documentid = context.Request["documentid"];
                documentid = documentid.TrimEnd();
                string entryby = context.Session["UserSno"].ToString();
                HttpFileCollection files = context.Request.Files;
                DateTime ServerDateCurrentdate = VehicleDBMgr.GetTime(vdbmngr.conn);
                for (int i = 0; i < files.Count; i++)
                {
                    HttpPostedFile file = files[i];
                    string[] extension = file.FileName.Split('.');
                    string upload_filename = Customer_Code + documentname + documentid + CustomerSno + ".jpeg";// +extension[extension.Length - 1];
                    if (UploadToFTP(file, upload_filename))
                    {
                        cmd = new MySqlCommand("update  customer_documents set documentpath=@documentpath where CustomerSno=@CustomerSno and documentid=@documentid");
                        cmd.Parameters.AddWithValue("@CustomerSno", CustomerSno);
                        cmd.Parameters.AddWithValue("@documentpath", upload_filename);
                        cmd.Parameters.AddWithValue("@documentid", documentid);
                        if (vdbmngr.Update(cmd) == 0)
                        {
                            cmd = new MySqlCommand("insert into customer_documents (CustomerSno,documentpath,doe,entryby,documentid) values (@CustomerSno,@documentpath,@doe,@entryby,@documentid)");
                            cmd.Parameters.AddWithValue("@CustomerSno", CustomerSno);
                            cmd.Parameters.AddWithValue("@documentpath", upload_filename);
                            cmd.Parameters.AddWithValue("@documentid", documentid);
                            cmd.Parameters.AddWithValue("@doe", ServerDateCurrentdate);
                            cmd.Parameters.AddWithValue("@entryby", entryby);
                            vdbmngr.insert(cmd);
                        }
                    }
                }
                context.Response.ContentType = "text/plain";
                context.Response.Write("File Uploaded Successfully!");
            }

        }
        catch (Exception ex)
        {
            string response = GetJson(ex.Message);
            context.Response.Write(response);
        }
    }
    private void btnUpdateQuotationPoNumbers(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            string AgentId = context.Request["BranchID"];
            string soid = context.Request["soid"];

            string quotano = context.Request["quotano"];
            string pono = context.Request["pono"];
            string grnno = context.Request["grnno"];
            string i_date = context.Request["indentdate"];
            DateTime Inddate = Convert.ToDateTime(i_date);
            cmd = new MySqlCommand("SELECT  IndentNo, Branch_id, TotalQty, TotalPrice, I_date, D_date, Status, UserData_sno, PaymentStatus, I_createdby, I_modifiedby, IndentType, IndentStatus FROM indents WHERE (I_date BETWEEN @d1 AND @d2) AND (Branch_id = @Branch_id)");
            cmd.Parameters.AddWithValue("@Branch_id", AgentId);
            cmd.Parameters.AddWithValue("@d1", GetLowDate(Inddate));
            cmd.Parameters.AddWithValue("@d2", GetHighDate(Inddate));
            DataTable dtbrnchindent = vdbmngr.SelectQuery(cmd).Tables[0];
            string indentno = dtbrnchindent.Rows[0]["IndentNo"].ToString();
            cmd = new MySqlCommand("update indents set quatationno=@quatationno,pono=@pono,grnno=@grnno where IndentNo= @IndentNo And Branch_id=@Branchid");
            cmd.Parameters.AddWithValue("@quatationno", quotano);
            cmd.Parameters.AddWithValue("@pono", pono);
            cmd.Parameters.AddWithValue("@grnno", grnno);
            cmd.Parameters.AddWithValue("@IndentNo", indentno);
            cmd.Parameters.AddWithValue("@Branchid", AgentId);
            vdbmngr.Update(cmd);
            string msg = "Po Number successfully Updated";
            string response = GetJson(msg);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string msg = ex.Message;
            string response = GetJson(msg);
            context.Response.Write(response);
        }
    }
    private void btnAgent_indent_Invoice_click(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            SalesDBManager SalesDB = new SalesDBManager();
            DataTable Report1 = new DataTable();
            DataTable dtTotalDispatches = new DataTable();
            Report = new DataTable();
            string titlename = context.Session["TitleName"].ToString();
            string SOID = context.Request["SOID"];

            if (SOID == "572" || SOID == "3")
            {
                SOID = "7";
            }

            string DcType = context.Request["DcType"];
            string AgentId = context.Request["AgentId"];
            string from_date = context.Request["FromDate"];
            DateTime fromdate = Convert.ToDateTime(from_date);
            string tostate = "";
            DateTime ServerDateCurrentdate = VehicleDBMgr.GetTime(vdbmngr.conn);
            DateTime dtapril = new DateTime();
            DateTime dtmarch = new DateTime();
            int currentyear = ServerDateCurrentdate.Year;
            int nextyear = ServerDateCurrentdate.Year + 1;
            int currntyearnum = 0;
            int nextyearnum = 0;
            if (ServerDateCurrentdate.Month > 3)
            {
                string apr = "4/1/" + currentyear;
                dtapril = DateTime.Parse(apr);
                string march = "3/31/" + nextyear;
                dtmarch = DateTime.Parse(march);
                currntyearnum = currentyear;
                nextyearnum = nextyear;
            }
            if (ServerDateCurrentdate.Month <= 3)
            {
                if (ServerDateCurrentdate.Day == 31 && ServerDateCurrentdate.Month == 3)
                {
                    string apr = "3/31/" + currentyear;
                    dtapril = DateTime.Parse(apr);
                    string march = "3/31/" + nextyear;
                    dtmarch = DateTime.Parse(march);
                }
                else
                {
                    string apr = "4/1/" + (currentyear - 1);
                    dtapril = DateTime.Parse(apr);
                    string march = "3/31/" + (nextyear - 1);
                    dtmarch = DateTime.Parse(march);
                }
            }
            cmd = new MySqlCommand("SELECT indents_subtable.pkt_qty,indents_subtable.IndentNo,sum(indents_subtable.unitQty * indents_subtable.UnitCost )AS Amount,IFNULL(branchproducts.VatPercent, 0) AS VatPercent,productsdata.units,productsdata.qty as uomqty, productsdata.ProductName,productsdata.invqty,productsdata.Qty as rawqty, SUM(indents_subtable.unitQty) AS DeliveryQty,SUM(indents_subtable.unitQty) AS IndentQty,sum(indents_subtable.unitQty * indents_subtable.UnitCost )AS indAmount, indents_subtable.UnitCost, DATE_FORMAT(indents.I_date, '%d %b %y') AS IndentDate,branchdata.stateid, productsdata.itemcode,productsdata.hsncode,productsdata.igst,productsdata.cgst,productsdata.sgst,productsdata.SubCat_sno as subcatid  FROM  productsdata INNER JOIN indents_subtable ON productsdata.sno = indents_subtable.Product_sno INNER JOIN indents ON indents_subtable.IndentNo = indents.IndentNo INNER JOIN  branchdata ON indents.Branch_id = branchdata.sno INNER JOIN branchmappingtable ON branchdata.sno = branchmappingtable.SubBranch INNER JOIN branchproducts ON branchmappingtable.SuperBranch = branchproducts.branch_sno AND productsdata.sno = branchproducts.product_sno WHERE (indents.I_date BETWEEN @d1 AND @d2) AND (branchdata.sno = @BranchID) AND (indents_subtable.unitQty>0)  GROUP BY productsdata.ProductName ORDER BY branchproducts.Rank");
            cmd.Parameters.Add("@BranchID", AgentId);
            cmd.Parameters.Add("@d1", GetLowDate(fromdate));
            cmd.Parameters.Add("@d2", GetHighDate(fromdate));
            DataTable dtInvoice = vdbmngr.SelectQuery(cmd).Tables[0];

            cmd = new MySqlCommand("select products_category.sno as catsno,products_subcategory.sno as subcatsno from products_category inner join products_subcategory on products_category.sno = products_subcategory.category_sno");
            DataTable dtcategory = vdbmngr.SelectQuery(cmd).Tables[0];
            List<Aagent_Invoice> Agent_invoicelist = new List<Aagent_Invoice>();
            Report.Columns.Add("Sl No");
            Report.Columns.Add("itemcode");
            Report.Columns.Add("Product Name");
            Report.Columns.Add("HSN Code");
            Report.Columns.Add("Uom");
            Report.Columns.Add("Qty(pkts)");
            Report.Columns.Add("Qty");
            Report.Columns.Add("Rate");
            Report.Columns.Add("Discount");
            Report.Columns.Add("Taxable Value").DataType = typeof(Double);
            Report.Columns.Add("SGST");
            Report.Columns.Add("SGSTamount");
            Report.Columns.Add("CGST");
            Report.Columns.Add("CGSTamount");
            Report.Columns.Add("IGST");
            Report.Columns.Add("IGSTamount");
            Report.Columns.Add("totalamount");
            string DcNo = "";
            if (DcType == "NonTax")
            {
                if (dtInvoice.Rows.Count > 0)
                {
                    cmd = new MySqlCommand("SELECT branchdata.stateid, branchdata.SalesType, branchdata.BranchName, branchdata.TinNumber, branchdata.Address, branchdata.tbranchname, branchdata.sno, indents.I_date, indents.quatationno, indents.pono, indents.grnno,  indents.IndentNo, indents.Branch_id, statemastar.statename, statemastar.gststatecode, branchdata.gstno, branchdata.email, branchdata.phonenumber, branchdata.doorno, branchdata.area, branchdata.street,  branchdata.city, branchdata.mandal, branchdata.district, branchdata.pincode FROM branchdata INNER JOIN indents ON branchdata.sno = indents.Branch_id INNER JOIN statemastar ON branchdata.stateid = statemastar.sno WHERE (indents.I_date BETWEEN @d1 AND @d2) AND (indents.Branch_id = @AgentID)");
                    cmd.Parameters.Add("@AgentID", AgentId);
                    cmd.Parameters.Add("@d1", GetLowDate(fromdate));
                    cmd.Parameters.Add("@d2", GetHighDate(fromdate));
                    DataTable dtAddress = vdbmngr.SelectQuery(cmd).Tables[0];
                    string AgentAddress = "";
                    string AgentName = "";
                    string quatationno = "";
                    string pono = "";
                    string grnno = "";
                    string salestype = "";
                    string buyerTinNumber = "";
                    string companycode = "";
                    string stateid = "";
                    if (dtAddress.Rows.Count > 0)
                    {
                        AgentAddress = dtAddress.Rows[0]["doorno"].ToString() + "," + dtAddress.Rows[0]["street"].ToString() + "," + dtAddress.Rows[0]["area"].ToString() + "," + dtAddress.Rows[0]["city"].ToString() + "," + dtAddress.Rows[0]["mandal"].ToString() + "," + dtAddress.Rows[0]["district"].ToString() + "," + dtAddress.Rows[0]["pincode"].ToString() + ",phone" + dtAddress.Rows[0]["phonenumber"].ToString() + ",email" + dtAddress.Rows[0]["email"].ToString();// dtAddress.Rows[0]["Address"].ToString();
                        AgentName = dtAddress.Rows[0]["BranchName"].ToString();
                        quatationno = dtAddress.Rows[0]["quatationno"].ToString();
                        pono = dtAddress.Rows[0]["pono"].ToString();
                        grnno = dtAddress.Rows[0]["grnno"].ToString();
                        salestype = dtAddress.Rows[0]["salestype"].ToString();
                        buyerTinNumber = dtAddress.Rows[0]["TinNumber"].ToString();
                    }
                    cmd = new MySqlCommand("SELECT branchdata.companycode, branchdata.phonenumber,branchdata.email, branchdata.sno,branchdata.stateid, branchdata.Address, branchdata.TinNumber, branchdata.panno, branchdata.BranchCode, statemastar.statename, statemastar.gststatecode, branchdata.phonenumber, branchdata.emailid,  branchdata.street, branchdata.city, branchdata.mandal, branchdata.district, branchdata.pincode, branchdata.gstno, branchdata.doorno, branchdata.area FROM branchdata INNER JOIN statemastar ON branchdata.stateid = statemastar.sno WHERE (branchdata.sno = @branchsno)");
                    cmd.Parameters.Add("@branchsno", SOID);
                    DataTable dtbrnchaddress = vdbmngr.SelectQuery(cmd).Tables[0];
                    string BranchAddress = dtbrnchaddress.Rows[0]["Address"].ToString();
                    companycode = dtbrnchaddress.Rows[0]["companycode"].ToString();
                    stateid = dtbrnchaddress.Rows[0]["gststatecode"].ToString();
                    int i = 1;

                    cmd = new MySqlCommand("SELECT MAX(agentdcno) as agentdcno FROM  agentdc WHERE (BranchId = @BranchId) AND (IndDate BETWEEN @d1 AND @d2) AND (indentno=@indentno) AND (agentdcno>0)");
                    cmd.Parameters.Add("@BranchId", AgentId);
                    cmd.Parameters.Add("@d1", GetLowDate(fromdate));
                    cmd.Parameters.Add("@d2", GetHighDate(fromdate));
                    cmd.Parameters.Add("@indentno", dtInvoice.Rows[0]["IndentNo"].ToString());
                    DataTable dtnDc = vdbmngr.SelectQuery(cmd).Tables[0];
                    if (dtnDc.Rows.Count > 0)
                    {
                        DcNo = dtnDc.Rows[0]["agentdcno"].ToString();
                    }
                    else
                    {
                        if (ServerDateCurrentdate.ToString("dd/MM/yyyy") == fromdate.ToString("dd/MM/yyyy"))
                        {
                            cmd = new MySqlCommand("SELECT IFNULL(MAX(agentdcno), 0) + 1 AS Sno FROM agentdc WHERE (soid = @BranchId)  AND (IndDate BETWEEN @d1 AND @d2)");
                            cmd.Parameters.Add("@BranchId", SOID);
                            if (ServerDateCurrentdate.Day == 31 && ServerDateCurrentdate.Month == 3)
                            {
                                cmd.Parameters.Add("@d1", GetLowDate(dtapril));
                                cmd.Parameters.Add("@d2", GetHighDate(dtmarch));
                            }
                            else
                            {
                                cmd.Parameters.Add("@d1", GetLowDate(dtapril.AddDays(-1)));
                                cmd.Parameters.Add("@d2", GetHighDate(dtmarch.AddDays(-1)));
                            }
                            DataTable dtadcno = vdbmngr.SelectQuery(cmd).Tables[0];
                            string agentdcNo = dtadcno.Rows[0]["Sno"].ToString();
                            cmd = new MySqlCommand("Insert Into Agentdc (BranchId,IndDate,agentdcno,soid,stateid,companycode,moduleid,doe,invoicetype,indentno) Values(@BranchId,@IndDate,@agentdcno,@soid,@stateid,@companycode,@moduleid,@doe,@invoicetype,@indentno)");
                            cmd.Parameters.Add("@BranchId", AgentId);
                            cmd.Parameters.Add("@IndDate", GetLowDate(fromdate));
                            cmd.Parameters.Add("@agentdcno", agentdcNo);
                            cmd.Parameters.Add("@soid", SOID);
                            cmd.Parameters.Add("@stateid", stateid);
                            cmd.Parameters.Add("@companycode", companycode);
                            cmd.Parameters.Add("@doe", ServerDateCurrentdate);
                            cmd.Parameters.Add("@moduleid", context.Session["moduleid"].ToString());
                            cmd.Parameters.Add("@invoicetype", "IndentInvoice");
                            cmd.Parameters.Add("@indentno", dtInvoice.Rows[0]["IndentNo"].ToString());
                            vdbmngr.insert(cmd);
                            DcNo = agentdcNo;
                        }
                    }
                    if (DcNo == "")
                    {
                        cmd = new MySqlCommand("SELECT IFNULL(MAX(agentdcno), 0) + 1 AS Sno FROM agentdc WHERE (soid = @BranchId) AND (IndDate BETWEEN @d1 AND @d2)");
                        cmd.Parameters.Add("@BranchId", SOID);
                        if (ServerDateCurrentdate.Day == 31 && ServerDateCurrentdate.Month == 3)
                        {
                            cmd.Parameters.Add("@d1", GetLowDate(dtapril));
                            cmd.Parameters.Add("@d2", GetHighDate(dtmarch));
                        }
                        else
                        {
                            cmd.Parameters.Add("@d1", GetLowDate(dtapril.AddDays(-1)));
                            cmd.Parameters.Add("@d2", GetHighDate(dtmarch.AddDays(-1)));
                        }
                        DataTable dtadcno = vdbmngr.SelectQuery(cmd).Tables[0];
                        string agentdcNo = dtadcno.Rows[0]["Sno"].ToString();
                        cmd = new MySqlCommand("Insert Into Agentdc (BranchId,IndDate,agentdcno,soid,stateid,companycode,moduleid,doe,invoicetype,indentno) Values(@BranchId,@IndDate,@agentdcno,@soid,@stateid,@companycode,@moduleid,@doe,@invoicetype,@indentno)");
                        cmd.Parameters.Add("@BranchId", AgentId);
                        cmd.Parameters.Add("@IndDate", GetLowDate(fromdate));
                        cmd.Parameters.Add("@agentdcno", agentdcNo);
                        cmd.Parameters.Add("@soid", SOID);
                        cmd.Parameters.Add("@stateid", stateid);
                        cmd.Parameters.Add("@companycode", companycode);
                        cmd.Parameters.Add("@doe", ServerDateCurrentdate);
                        cmd.Parameters.Add("@moduleid", context.Session["moduleid"].ToString());
                        cmd.Parameters.Add("@invoicetype", "IndentInvoice");
                        cmd.Parameters.Add("@indentno", dtInvoice.Rows[0]["IndentNo"].ToString());
                        vdbmngr.insert(cmd);
                        DcNo = agentdcNo;
                        //}
                    }
                    int countdc = 0;
                    int.TryParse(DcNo, out countdc);
                    if (countdc <= 10)
                    {
                        DcNo = "0000" + countdc;
                    }
                    if (countdc >= 10 && countdc <= 99)
                    {
                        DcNo = "000" + countdc;
                    }
                    if (countdc >= 99 && countdc <= 999)
                    {
                        DcNo = "00" + countdc;
                    }
                    if (countdc > 999 && countdc <= 9999)
                    {
                        DcNo = "0" + countdc;
                    }
                    if (countdc > 9999)
                    {
                        DcNo = "" + countdc;
                    }
                    Aagent_Invoice obj1 = new Aagent_Invoice();

                    cmd = new MySqlCommand("SELECT * FROM agent_bal_trans WHERE agentid=@agentid and  inddate between @d1 and @d2");
                    cmd.Parameters.Add("@agentid", AgentId);
                    cmd.Parameters.AddWithValue("@d1", GetLowDate(fromdate.AddDays(-1)));
                    cmd.Parameters.AddWithValue("@d2", GetHighDate(fromdate.AddDays(-1)));
                    DataTable dtagenttrans = vdbmngr.SelectQuery(cmd).Tables[0];
                    //DataRow[] dragenttrans = dtagenttrans.Select("agentid='" + AgentId + "'");
                    if (dtagenttrans.Rows.Count == 0)
                    {
                        cmd = new MySqlCommand("SELECT MAX(sno) as sno FROM agent_bal_trans WHERE agentid=@Branchid AND (inddate < @d1)");
                        cmd.Parameters.AddWithValue("@Branchid", AgentId);
                        cmd.Parameters.AddWithValue("@d1", fromdate.AddDays(-1));
                        DataTable dtPrev_trans = vdbmngr.SelectQuery(cmd).Tables[0];
                        if (dtPrev_trans.Rows.Count > 0)
                        {
                            string sno = dtPrev_trans.Rows[0]["sno"].ToString();
                            if (sno == "")
                            {
                                obj1.Op_balance = "0"; ;
                            }
                            else
                            {
                                cmd = new MySqlCommand("SELECT agentid, opp_balance, inddate, salesvalue, clo_balance FROM agent_bal_trans WHERE sno=@sno");
                                cmd.Parameters.AddWithValue("@sno", dtPrev_trans.Rows[0]["sno"].ToString());
                                DataTable dtagent_value = vdbmngr.SelectQuery(cmd).Tables[0];
                                if (dtagent_value.Rows.Count > 0)
                                {
                                    double closingbalance = 0;
                                    double.TryParse(dtagent_value.Rows[0]["clo_balance"].ToString(), out closingbalance);
                                    string inddate = dtagent_value.Rows[0]["inddate"].ToString();
                                    DateTime dtinddate = Convert.ToDateTime(inddate);
                                    if (dtinddate < fromdate)
                                    {
                                        obj1.Op_balance = Math.Round(closingbalance, 2).ToString();
                                    }
                                    else
                                    {
                                        obj1.Op_balance = "0";
                                    }
                                }
                            }
                        }
                        else
                        {
                            obj1.Op_balance = "0";
                        }
                    }
                    else
                    {
                        obj1.Op_balance = dtagenttrans.Rows[0]["opp_balance"].ToString();
                    }

                    string BranchId = context.Session["branch"].ToString();
                    DcNo = dtbrnchaddress.Rows[0]["BranchCode"].ToString() + "/" + dtapril.ToString("yy") + "-" + dtmarch.ToString("yy") + "N/" + DcNo;
                    string fromstate = dtbrnchaddress.Rows[0]["stateid"].ToString();
                    obj1.AgentAddress = AgentAddress;
                    string address = dtbrnchaddress.Rows[0]["doorno"].ToString() + "," + dtbrnchaddress.Rows[0]["street"].ToString() + "," + dtbrnchaddress.Rows[0]["area"].ToString() + "," + dtbrnchaddress.Rows[0]["city"].ToString() + "," + dtbrnchaddress.Rows[0]["mandal"].ToString() + "," + dtbrnchaddress.Rows[0]["district"].ToString() + "," + dtbrnchaddress.Rows[0]["pincode"].ToString() + "," + dtbrnchaddress.Rows[0]["phonenumber"].ToString() + "," + dtbrnchaddress.Rows[0]["emailid"].ToString();
                    obj1.BranchAddress = address;
                    obj1.AgentName = AgentName;
                    obj1.quatationno = quatationno;
                    obj1.buyerTinNumber = buyerTinNumber;
                    obj1.titlename = titlename;
                    obj1.salestype = salestype;
                    obj1.ponumber = pono;
                    obj1.grnno = grnno;
                    obj1.invoiceno = DcNo;
                    obj1.TempInvoice = countdc.ToString();
                    obj1.city = dtbrnchaddress.Rows[0]["city"].ToString();
                    obj1.invoicedate = fromdate.AddDays(1).ToString("dd/MM/yyyy");
                    obj1.frmstatename = dtbrnchaddress.Rows[0]["statename"].ToString();
                    obj1.frmstatecode = dtbrnchaddress.Rows[0]["gststatecode"].ToString();
                    obj1.fromgstn = dtbrnchaddress.Rows[0]["gstno"].ToString();
                    tostate = dtAddress.Rows[0]["stateid"].ToString();
                    obj1.tostatename = dtAddress.Rows[0]["statename"].ToString();
                    obj1.tostatecode = dtAddress.Rows[0]["gststatecode"].ToString();
                    obj1.togstin = dtAddress.Rows[0]["gstno"].ToString();
                    obj1.phoneno = dtAddress.Rows[0]["phonenumber"].ToString();
                    obj1.email = dtAddress.Rows[0]["email"].ToString();
                    obj1.companyphone = dtbrnchaddress.Rows[0]["phonenumber"].ToString();
                    obj1.companyemail = dtbrnchaddress.Rows[0]["email"].ToString();
                    obj1.dctype = "Bill Of Supply";
                    Agent_invoicelist.Add(obj1);
                    List<Aagent_Invoice_item_det> Aagent_Invoice_item_det = new List<Aagent_Invoice_item_det>();
                    foreach (DataRow dr in dtInvoice.Rows)
                    {
                        if (dr["Igst"].ToString() == "0")
                        {
                            DataRow newrow = Report.NewRow();
                            newrow["Sl No"] = i++.ToString();
                            newrow["itemcode"] = dr["itemcode"].ToString();
                            newrow["Product Name"] = dr["ProductName"].ToString();
                            newrow["HSN Code"] = dr["hsncode"].ToString();
                            newrow["Uom"] = dr["Units"].ToString();
                            float pktqty = 0;
                            float qty = 0;
                            float.TryParse(dr["DeliveryQty"].ToString(), out qty);
                            float.TryParse(dr["pkt_qty"].ToString(), out pktqty);
                            if (dr["Units"].ToString() == "Nos" || dr["Units"].ToString() == "Box")
                            {

                                float invqty = 0;
                                float.TryParse(dr["invqty"].ToString(), out invqty);
                                float rawqty = 0;
                                float.TryParse(dr["rawqty"].ToString(), out rawqty);
                                float pktval = (qty / rawqty) * 1000;
                                float prate = 0;
                                float.TryParse(dr["Unitcost"].ToString(), out prate);
                                double rate = Math.Round(prate, 2);
                                newrow["Discount"] = 0;
                                double sgst = 0;
                                double sgstamount = 0;
                                double cgst = 0;
                                double cgstamount = 0;
                                double Igst = 0;
                                double Igstamount = 0;
                                double totRate = 0;
                                double.TryParse(dr["Igst"].ToString(), out Igst);
                                double Igstcon = 100 + Igst;
                                Igstamount = (rate / Igstcon) * Igst;
                                Igstamount = Math.Round(Igstamount, 2);
                                totRate = Igstamount;

                                double Vatrate = rate - totRate;
                                Vatrate = Math.Round(Vatrate, 2);
                                newrow["Rate"] = Vatrate.ToString();
                                double PAmount = qty * Vatrate; //changed by akbar
                                newrow["Taxable Value"] = Math.Round(PAmount, 2);
                                double tot_vatamount = (PAmount * Igst) / 100;
                                if (fromstate == tostate)
                                {
                                    sgstamount = (tot_vatamount / 2);
                                    sgstamount = Math.Round(sgstamount, 2);
                                    newrow["sgst"] = dr["sgst"].ToString();
                                    newrow["sgstamount"] = sgstamount.ToString();
                                    cgstamount = (tot_vatamount / 2);
                                    cgstamount = Math.Round(cgstamount, 2);
                                    newrow["cgst"] = dr["cgst"].ToString();
                                    newrow["cgstamount"] = cgstamount.ToString();
                                    newrow["Igst"] = 0;
                                    newrow["Igstamount"] = 0;
                                }
                                else
                                {
                                    newrow["sgst"] = 0;
                                    newrow["sgstamount"] = 0;
                                    newrow["cgst"] = 0;
                                    newrow["cgstamount"] = 0;
                                    newrow["Igst"] = dr["Igst"].ToString();
                                    tot_vatamount = Math.Round(tot_vatamount, 2);
                                    newrow["Igstamount"] = tot_vatamount.ToString();
                                }
                                double tot_amount = PAmount + tot_vatamount;
                                tot_amount = Math.Round(tot_amount, 2);
                                newrow["totalamount"] = tot_amount;
                                newrow["Qty(pkts)"] = Math.Round(pktqty, 2);
                                newrow["Qty"] = Math.Round(qty, 2);

                            }
                            else
                            {
                                float invqty = 0;
                                float.TryParse(dr["invqty"].ToString(), out invqty);
                                float rawqty = 0;
                                float.TryParse(dr["rawqty"].ToString(), out rawqty);
                                float pktval = (qty / rawqty) * 1000;
                                float prate = 0;
                                float.TryParse(dr["Unitcost"].ToString(), out prate);
                                double rate = Math.Round(prate, 2);
                                newrow["Qty(pkts)"] = Math.Round(qty, 2);
                                newrow["Qty"] = Math.Round(qty, 2);
                                newrow["Discount"] = 0;
                                double sgst = 0;
                                double sgstamount = 0;
                                double cgst = 0;
                                double cgstamount = 0;
                                double Igst = 0;
                                double Igstamount = 0;
                                double totRate = 0;
                                double.TryParse(dr["Igst"].ToString(), out Igst);
                                double Igstcon = 100 + Igst;
                                Igstamount = (rate / Igstcon) * Igst;
                                Igstamount = Math.Round(Igstamount, 2);
                                totRate = Igstamount;
                                double Vatrate = rate - totRate;
                                Vatrate = Math.Round(Vatrate, 2);
                                newrow["Rate"] = Vatrate.ToString();
                                double PAmount = qty * Vatrate; //changed by akbar
                                newrow["Taxable Value"] = Math.Round(PAmount, 2);
                                double tot_vatamount = (PAmount * Igst) / 100;
                                if (fromstate == tostate)
                                {
                                    sgstamount = (tot_vatamount / 2);
                                    sgstamount = Math.Round(sgstamount, 2);
                                    newrow["sgst"] = dr["sgst"].ToString();
                                    newrow["sgstamount"] = sgstamount.ToString();
                                    cgstamount = (tot_vatamount / 2);
                                    cgstamount = Math.Round(cgstamount, 2);
                                    newrow["cgst"] = dr["cgst"].ToString();
                                    newrow["cgstamount"] = cgstamount.ToString();
                                    newrow["Igst"] = 0;
                                    newrow["Igstamount"] = 0;
                                }
                                else
                                {
                                    newrow["sgst"] = 0;
                                    newrow["sgstamount"] = 0;
                                    newrow["cgst"] = 0;
                                    newrow["cgstamount"] = 0;
                                    newrow["Igst"] = dr["Igst"].ToString();
                                    tot_vatamount = Math.Round(tot_vatamount, 2);
                                    newrow["Igstamount"] = tot_vatamount.ToString();
                                }
                                double tot_amount = PAmount + tot_vatamount;
                                tot_amount = Math.Round(tot_amount, 2);
                                newrow["totalamount"] = tot_amount;
                            }
                            Report.Rows.Add(newrow); ;
                        }
                        else
                        {
                            DateTime dtjuly = new DateTime();
                            string jul = "7/18/2022";
                            dtjuly = DateTime.Parse(jul);
                            if (dtjuly > fromdate.AddDays(1))
                            {
                                string categoryid = "";
                                foreach (DataRow drcate in dtcategory.Select("subcatsno='" + dr["subcatid"].ToString() + "'"))
                                {
                                    categoryid = drcate["catsno"].ToString();
                                }
                                string[] catarr = { "2", "12", "39", "47", "48" };
                                if (catarr.Contains(categoryid))
                                {
                                    DataRow newrow = Report.NewRow();
                                    newrow["Sl No"] = i++.ToString();
                                    newrow["itemcode"] = dr["itemcode"].ToString();
                                    newrow["Product Name"] = dr["ProductName"].ToString();
                                    newrow["HSN Code"] = dr["hsncode"].ToString();
                                    newrow["Uom"] = dr["Units"].ToString();
                                    float pktqty = 0;
                                    float qty = 0;
                                    float.TryParse(dr["DeliveryQty"].ToString(), out qty);
                                    float.TryParse(dr["pkt_qty"].ToString(), out pktqty);
                                    if (dr["Units"].ToString() == "Nos" || dr["Units"].ToString() == "Box")
                                    {

                                        float invqty = 0;
                                        float.TryParse(dr["invqty"].ToString(), out invqty);

                                        float rawqty = 0;
                                        float.TryParse(dr["rawqty"].ToString(), out rawqty);
                                        float pktval = (qty / rawqty) * 1000;
                                        float prate = 0;
                                        float.TryParse(dr["Unitcost"].ToString(), out prate);
                                        double rate = Math.Round(prate, 2);
                                        newrow["Discount"] = 0;
                                        double sgst = 0;
                                        double sgstamount = 0;
                                        double cgst = 0;
                                        double cgstamount = 0;
                                        double Igst = 0;
                                        double Igstamount = 0;
                                        double totRate = 0;
                                        double.TryParse(dr["Igst"].ToString(), out Igst);
                                        double Igstcon = 100 + Igst;
                                        Igstamount = (rate / Igstcon) * Igst;
                                        Igstamount = Math.Round(Igstamount, 2);
                                        totRate = Igstamount;

                                        double Vatrate = rate - totRate;
                                        Vatrate = Math.Round(Vatrate, 2);
                                        newrow["Rate"] = Vatrate.ToString();
                                        double PAmount = qty * Vatrate; //changed by akbar
                                        newrow["Taxable Value"] = Math.Round(PAmount, 2);
                                        double tot_vatamount = (PAmount * Igst) / 100;
                                        if (fromstate == tostate)
                                        {
                                            sgstamount = (tot_vatamount / 2);
                                            sgstamount = Math.Round(sgstamount, 2);
                                            newrow["sgst"] = dr["sgst"].ToString();
                                            newrow["sgstamount"] = sgstamount.ToString();
                                            cgstamount = (tot_vatamount / 2);
                                            cgstamount = Math.Round(cgstamount, 2);
                                            newrow["cgst"] = dr["cgst"].ToString();
                                            newrow["cgstamount"] = cgstamount.ToString();
                                            newrow["Igst"] = 0;
                                            newrow["Igstamount"] = 0;
                                        }
                                        else
                                        {
                                            newrow["sgst"] = 0;
                                            newrow["sgstamount"] = 0;
                                            newrow["cgst"] = 0;
                                            newrow["cgstamount"] = 0;
                                            newrow["Igst"] = dr["Igst"].ToString();
                                            tot_vatamount = Math.Round(tot_vatamount, 2);
                                            newrow["Igstamount"] = tot_vatamount.ToString();
                                        }
                                        double tot_amount = PAmount + tot_vatamount;
                                        tot_amount = Math.Round(tot_amount, 2);
                                        newrow["totalamount"] = tot_amount;
                                        newrow["Qty(pkts)"] = Math.Round(pktqty, 2);
                                        newrow["Qty"] = Math.Round(qty, 2);
                                    }
                                    else
                                    {
                                        float invqty = 0;
                                        float.TryParse(dr["invqty"].ToString(), out invqty);
                                        float rawqty = 0;
                                        float.TryParse(dr["rawqty"].ToString(), out rawqty);
                                        float pktval = (qty / rawqty) * 1000;
                                        float prate = 0;
                                        float.TryParse(dr["Unitcost"].ToString(), out prate);
                                        double rate = Math.Round(prate, 2);
                                        newrow["Qty(pkts)"] = Math.Round(qty, 2);
                                        newrow["Qty"] = Math.Round(qty, 2);
                                        newrow["Discount"] = 0;
                                        double sgst = 0;
                                        double sgstamount = 0;
                                        double cgst = 0;
                                        double cgstamount = 0;
                                        double Igst = 0;
                                        double Igstamount = 0;
                                        double totRate = 0;
                                        double.TryParse(dr["Igst"].ToString(), out Igst);
                                        double Igstcon = 100 + Igst;
                                        Igstamount = (rate / Igstcon) * Igst;
                                        Igstamount = Math.Round(Igstamount, 2);
                                        totRate = Igstamount;
                                        double Vatrate = rate - totRate;
                                        Vatrate = Math.Round(Vatrate, 2);
                                        newrow["Rate"] = Vatrate.ToString();
                                        double PAmount = qty * Vatrate; //changed by akbar
                                        newrow["Taxable Value"] = Math.Round(PAmount, 2);
                                        double tot_vatamount = (PAmount * Igst) / 100;
                                        if (fromstate == tostate)
                                        {
                                            sgstamount = (tot_vatamount / 2);
                                            sgstamount = Math.Round(sgstamount, 2);
                                            newrow["sgst"] = 0;
                                            newrow["sgstamount"] = 0;
                                            cgstamount = (tot_vatamount / 2);
                                            cgstamount = Math.Round(cgstamount, 2);
                                            newrow["cgst"] = 0;
                                            newrow["cgstamount"] = 0;
                                            newrow["Igst"] = 0;
                                            newrow["Igstamount"] = 0;
                                        }
                                        else
                                        {
                                            newrow["sgst"] = 0;
                                            newrow["sgstamount"] = 0;
                                            newrow["cgst"] = 0;
                                            newrow["cgstamount"] = 0;
                                            newrow["Igst"] = 0;
                                            tot_vatamount = Math.Round(tot_vatamount, 2);
                                            newrow["Igstamount"] = 0;
                                        }
                                        double tot_amount = PAmount;
                                        tot_amount = Math.Round(tot_amount, 2);
                                        newrow["totalamount"] = tot_amount;
                                    }
                                    Report.Rows.Add(newrow); ;
                                }
                            }
                        }
                    }
                    List<Aagent_Invoice_item_det> Aagent_Invoice_item_list = new List<Aagent_Invoice_item_det>();
                    foreach (DataRow dr in Report.Rows)
                    {
                        Aagent_Invoice_item_det getProducts = new Aagent_Invoice_item_det();
                        getProducts.sno = dr["Sl No"].ToString();
                        getProducts.itemcode = dr["itemcode"].ToString();
                        getProducts.ProductName = dr["Product Name"].ToString();
                        getProducts.pktqty = dr["Qty(pkts)"].ToString();
                        getProducts.qty = dr["Qty"].ToString();
                        getProducts.hsncode = dr["HSN Code"].ToString();
                        getProducts.uom = dr["Uom"].ToString();
                        getProducts.rate = dr["Rate"].ToString();
                        getProducts.discount = dr["Discount"].ToString();
                        getProducts.taxablevalue = dr["Taxable Value"].ToString();
                        getProducts.sgst = dr["sgst"].ToString();
                        getProducts.sgstamount = dr["sgstamount"].ToString();
                        getProducts.cgst = dr["cgst"].ToString();
                        getProducts.cgstamount = dr["cgstamount"].ToString();
                        getProducts.igst = dr["igst"].ToString();
                        getProducts.igstamount = dr["igstamount"].ToString();
                        getProducts.totalamount = dr["totalamount"].ToString();
                        Aagent_Invoice_item_list.Add(getProducts);
                    }
                    cmd = new MySqlCommand("SELECT invtras.TransType, invtras.FromTran, invtras.ToTran, invtras.Qty, invtras.DOE, invmaster.sno AS invsno, invmaster.InvName FROM (SELECT TransType, FromTran, ToTran, Qty, EmpID, VarifyStatus, VTripId, VEmpId, Sno, B_inv_sno, DOE, VQty FROM invtransactions12 WHERE (ToTran = @branchid) AND (DOE BETWEEN @d1 AND @d2) AND (Qty <> 0) OR (DOE BETWEEN @d1 AND @d2) AND (Qty <> 0) AND (FromTran = @branchid)) invtras INNER JOIN invmaster ON invtras.B_inv_sno = invmaster.sno ORDER BY invtras.DOE");
                    DateTime dtmin = GetLowDate(fromdate.AddDays(-1));
                    DateTime dtmax = GetLowDate(fromdate);
                    cmd.Parameters.Add("@d1", dtmin.AddHours(15));
                    cmd.Parameters.Add("@d2", dtmax.AddHours(15));
                    cmd.Parameters.Add("@branchid", AgentId);
                    DataTable dtInventoryDC = vdbmngr.SelectQuery(cmd).Tables[0];
                    cmd = new MySqlCommand("SELECT invtran.TransType, invtran.FromTran, invtran.ToTran, invtran.Qty, invtran.DOE, invmaster.sno AS invsno, invmaster.InvName FROM (SELECT TransType, FromTran, ToTran, Qty, EmpID, VarifyStatus, VTripId, VEmpId, Sno, B_inv_sno, DOE, VQty FROM invtransactions12 WHERE (ToTran = @branchid) AND (DOE BETWEEN @d1 AND @d2) OR (DOE BETWEEN @d1 AND @d2) AND (FromTran = @branchid)) invtran INNER JOIN invmaster ON invtran.B_inv_sno = invmaster.sno ORDER BY invtran.DOE");
                    DateTime dt1 = GetLowDate(fromdate.AddDays(-1));
                    DateTime dt2 = GetLowDate(ServerDateCurrentdate);
                    cmd.Parameters.Add("@d1", dt1.AddHours(15));
                    cmd.Parameters.Add("@d2", dt2.AddHours(15));
                    cmd.Parameters.Add("@branchid", AgentId);
                    DataTable dtprevinventoryDC = vdbmngr.SelectQuery(cmd).Tables[0];
                    cmd = new MySqlCommand("SELECT inventory_monitor.Inv_Sno, invmaster.InvName, inventory_monitor.Qty FROM inventory_monitor INNER JOIN invmaster ON inventory_monitor.Inv_Sno = invmaster.sno WHERE (inventory_monitor.BranchId = @branchid)");
                    cmd.Parameters.Add("@branchid", AgentId);
                    DataTable dtAgentinventory = vdbmngr.SelectQuery(cmd).Tables[0];
                    List<Aagent_Inventary> aagent_inventary_list = new List<Aagent_Inventary>();
                    Aagent_Inventary agent_inv = new Aagent_Inventary();
                    agent_inv.InvName = "Inventory";
                    agent_inv.Opqty = "Opp Bal";
                    agent_inv.Issueqty = "Issued";
                    agent_inv.Receivedqty = "Received";
                    agent_inv.cloqty = "Clo Bal";
                    aagent_inventary_list.Add(agent_inv);
                    foreach (DataRow dragentinv in dtAgentinventory.Rows)
                    {
                        int oppcrates = 0;
                        int Ctotcrates = 0;
                        int Dtotcrates = 0;
                        int prevDtotcrates = 0;
                        int prevCtotcrates = 0;
                        string invname = dragentinv["InvName"].ToString();
                        int.TryParse(dragentinv["Qty"].ToString(), out oppcrates);
                        foreach (DataRow drprev in dtprevinventoryDC.Select("invsno='" + dragentinv["Inv_Sno"].ToString() + "'"))
                        {
                            if (drprev["TransType"].ToString() == "2")
                            {
                                int prevDcrates = 0;
                                int.TryParse(drprev["Qty"].ToString(), out prevDcrates);
                                prevDtotcrates += prevDcrates;
                            }
                            if (drprev["TransType"].ToString() == "1" || drprev["TransType"].ToString() == "3")
                            {
                                int prevCcrates = 0;
                                int.TryParse(drprev["Qty"].ToString(), out prevCcrates);
                                prevCtotcrates += prevCcrates;
                            }
                        }
                        foreach (DataRow dr in dtInventoryDC.Select("invsno='" + dragentinv["Inv_Sno"].ToString() + "'"))
                        {
                            if (dr["TransType"].ToString() == "2")
                            {
                                int Dcrates = 0;
                                int.TryParse(dr["Qty"].ToString(), out Dcrates);
                                Dtotcrates += Dcrates;
                            }
                            if (dr["TransType"].ToString() == "1" || dr["TransType"].ToString() == "3")
                            {
                                int Ccrates = 0;
                                int.TryParse(dr["Qty"].ToString(), out Ccrates);
                                Ctotcrates += Ccrates;
                            }
                        }
                        oppcrates = oppcrates + prevCtotcrates - prevDtotcrates;
                        int CratesClo = oppcrates + Dtotcrates - Ctotcrates;
                        Aagent_Inventary get_inv = new Aagent_Inventary();
                        if (oppcrates.ToString() == "0" && Dtotcrates.ToString() == "0" && Ctotcrates.ToString() == "0" && CratesClo.ToString() == "0")
                        {
                        }
                        else
                        {
                            get_inv.InvName = invname;
                            get_inv.Opqty = oppcrates.ToString();
                            get_inv.Issueqty = Dtotcrates.ToString();
                            get_inv.Receivedqty = Ctotcrates.ToString();
                            get_inv.cloqty = CratesClo.ToString();
                            aagent_inventary_list.Add(get_inv);
                        }
                    }
                    List<AgentInvoiceDetails> agentinvoicedetails_list = new List<AgentInvoiceDetails>();
                    AgentInvoiceDetails getinvoicelist = new AgentInvoiceDetails();
                    getinvoicelist.Aagent_Invoice = Agent_invoicelist;
                    getinvoicelist.Aagent_Invoice_item_det = Aagent_Invoice_item_list;
                    getinvoicelist.Aagent_Inventary = aagent_inventary_list;
                    agentinvoicedetails_list.Add(getinvoicelist);
                    string response = GetJson(agentinvoicedetails_list);
                    context.Response.Write(response);
                }
                else
                {
                    string msg = "Data not found";
                    string response = GetJson(msg);
                    context.Response.Write(response);
                }
            }
            else
            {
                if (dtInvoice.Rows.Count > 0)
                {
                    //cmd = new MySqlCommand("SELECT  branchdata.salestype,branchdata.BranchName,branchdata.TinNumber, branchdata.Address, branchdata.tbranchname, branchdata.sno, indents.I_date, indents.quatationno, indents.pono, indents.grnno,indents.IndentNo, indents.Branch_id FROM  branchdata INNER JOIN indents ON branchdata.sno = indents.Branch_id WHERE (indents.I_date BETWEEN @d1 AND @d2) AND (indents.Branch_id = @AgentID)");
                    cmd = new MySqlCommand("SELECT branchdata.stateid, branchdata.SalesType, branchdata.BranchName, branchdata.TinNumber, branchdata.Address, branchdata.tbranchname, branchdata.sno, indents.I_date, indents.quatationno, indents.pono, indents.grnno,  indents.IndentNo, indents.Branch_id, statemastar.statename, statemastar.gststatecode, branchdata.gstno, branchdata.email, branchdata.phonenumber, branchdata.doorno, branchdata.area, branchdata.street,  branchdata.city, branchdata.mandal, branchdata.district, branchdata.pincode FROM branchdata INNER JOIN indents ON branchdata.sno = indents.Branch_id INNER JOIN statemastar ON branchdata.stateid = statemastar.sno WHERE (indents.I_date BETWEEN @d1 AND @d2) AND (indents.Branch_id = @AgentID)");
                    cmd.Parameters.Add("@AgentID", AgentId);
                    cmd.Parameters.Add("@d1", GetLowDate(fromdate));
                    cmd.Parameters.Add("@d2", GetHighDate(fromdate));
                    DataTable dtAddress = vdbmngr.SelectQuery(cmd).Tables[0];
                    string AgentAddress = "";
                    string AgentName = "";
                    string quatationno = "";
                    string pono = "";
                    string grnno = "";
                    string salestype = "";
                    string buyerTinNumber = "";
                    string companycode = "";
                    string stateid = "";
                    if (dtAddress.Rows.Count > 0)
                    {
                        AgentAddress = dtAddress.Rows[0]["doorno"].ToString() + "," + dtAddress.Rows[0]["street"].ToString() + "," + dtAddress.Rows[0]["area"].ToString() + "," + dtAddress.Rows[0]["city"].ToString() + "," + dtAddress.Rows[0]["mandal"].ToString() + "," + dtAddress.Rows[0]["district"].ToString() + "," + dtAddress.Rows[0]["pincode"].ToString() + ",phone" + dtAddress.Rows[0]["phonenumber"].ToString() + ",email" + dtAddress.Rows[0]["email"].ToString();// dtAddress.Rows[0]["Address"].ToString();
                        AgentName = dtAddress.Rows[0]["BranchName"].ToString();
                        quatationno = dtAddress.Rows[0]["quatationno"].ToString();
                        pono = dtAddress.Rows[0]["pono"].ToString();
                        grnno = dtAddress.Rows[0]["grnno"].ToString();
                        salestype = dtAddress.Rows[0]["salestype"].ToString();
                        buyerTinNumber = dtAddress.Rows[0]["TinNumber"].ToString();
                    }
                    cmd = new MySqlCommand("SELECT branchdata.companycode, branchdata.phonenumber,branchdata.email, branchdata.sno,branchdata.stateid, branchdata.Address, branchdata.TinNumber, branchdata.panno, branchdata.BranchCode, statemastar.statename, statemastar.gststatecode, branchdata.phonenumber, branchdata.emailid,  branchdata.street, branchdata.city, branchdata.mandal, branchdata.district, branchdata.pincode, branchdata.gstno, branchdata.doorno, branchdata.area FROM branchdata INNER JOIN statemastar ON branchdata.stateid = statemastar.sno WHERE (branchdata.sno = @branchsno)");
                    cmd.Parameters.Add("@branchsno", SOID);
                    DataTable dtbrnchaddress = vdbmngr.SelectQuery(cmd).Tables[0];
                    string BranchAddress = dtbrnchaddress.Rows[0]["Address"].ToString();
                    companycode = dtbrnchaddress.Rows[0]["companycode"].ToString();
                    stateid = dtbrnchaddress.Rows[0]["gststatecode"].ToString();
                    int i = 1;

                    cmd = new MySqlCommand("SELECT MAX(agentdcno) as agentdcno FROM  agenttaxdc WHERE (BranchId = @BranchId)  AND (IndDate BETWEEN @d1 AND @d2) AND (indentno=@indentno) and (agentdcno>0)");
                    cmd.Parameters.Add("@BranchId", AgentId);
                    cmd.Parameters.Add("@d1", GetLowDate(fromdate));
                    cmd.Parameters.Add("@d2", GetHighDate(fromdate));
                    cmd.Parameters.Add("@indentno", dtInvoice.Rows[0]["IndentNo"].ToString());
                    DataTable dtnDc = vdbmngr.SelectQuery(cmd).Tables[0];
                    //string dcnumber = "";
                    if (dtnDc.Rows.Count > 0)
                    {
                        DcNo = dtnDc.Rows[0]["agentdcno"].ToString();
                    }
                    else
                    {
                        if (ServerDateCurrentdate.ToString("dd/MM/yyyy") == fromdate.ToString("dd/MM/yyyy"))
                        {
                            cmd = new MySqlCommand("SELECT IFNULL(MAX(agentdcno), 0) + 1 AS Sno FROM agenttaxdc WHERE (soid = @BranchId)  AND (IndDate BETWEEN @d1 AND @d2)");
                            cmd.Parameters.Add("@BranchId", SOID);
                            if (ServerDateCurrentdate.Day == 31 && ServerDateCurrentdate.Month == 3)
                            {
                                cmd.Parameters.Add("@d1", GetLowDate(dtapril));
                                cmd.Parameters.Add("@d2", GetHighDate(dtmarch));
                            }
                            else
                            {
                                cmd.Parameters.Add("@d1", GetLowDate(dtapril.AddDays(-1)));
                                cmd.Parameters.Add("@d2", GetHighDate(dtmarch.AddDays(-1)));
                            }
                            DataTable dtadcno = vdbmngr.SelectQuery(cmd).Tables[0];
                            string agentdcNo = dtadcno.Rows[0]["Sno"].ToString();
                            cmd = new MySqlCommand("Insert Into agenttaxdc (BranchId,IndDate,agentdcno,soid,stateid,companycode,moduleid,doe,invoicetype,indentno) Values(@BranchId,@IndDate,@agentdcno,@soid,@stateid,@companycode,@moduleid,@doe,@invoicetype,@indentno)");
                            cmd.Parameters.Add("@BranchId", AgentId);
                            cmd.Parameters.Add("@IndDate", GetLowDate(fromdate));
                            cmd.Parameters.Add("@agentdcno", agentdcNo);
                            cmd.Parameters.Add("@soid", SOID);
                            cmd.Parameters.Add("@stateid", stateid);
                            cmd.Parameters.Add("@companycode", companycode);
                            cmd.Parameters.Add("@doe", ServerDateCurrentdate);
                            cmd.Parameters.Add("@moduleid", context.Session["moduleid"].ToString());
                            cmd.Parameters.Add("@invoicetype", "IndentInvoice");
                            cmd.Parameters.Add("@indentno", dtInvoice.Rows[0]["IndentNo"].ToString());
                            vdbmngr.insert(cmd);
                            DcNo = agentdcNo;
                        }
                    }
                    if (DcNo == "")
                    {
                        if (ServerDateCurrentdate.ToString("dd/MM/yyyy") == fromdate.ToString("dd/MM/yyyy"))
                        {
                            cmd = new MySqlCommand("SELECT IFNULL(MAX(agentdcno), 0) + 1 AS Sno FROM agenttaxdc WHERE (soid = @BranchId) AND (IndDate BETWEEN @d1 AND @d2)");
                            cmd.Parameters.Add("@BranchId", SOID);
                            if (ServerDateCurrentdate.Day == 31 && ServerDateCurrentdate.Month == 3)
                            {
                                cmd.Parameters.Add("@d1", GetLowDate(dtapril));
                                cmd.Parameters.Add("@d2", GetHighDate(dtmarch));
                            }
                            else
                            {
                                cmd.Parameters.Add("@d1", GetLowDate(dtapril.AddDays(-1)));
                                cmd.Parameters.Add("@d2", GetHighDate(dtmarch.AddDays(-1)));
                            }
                            DataTable dtadcno = vdbmngr.SelectQuery(cmd).Tables[0];
                            string agentdcNo = dtadcno.Rows[0]["Sno"].ToString();
                            cmd = new MySqlCommand("Insert Into agenttaxdc (BranchId,IndDate,agentdcno,soid,stateid,companycode,moduleid,doe,invoicetype,indentno) Values(@BranchId,@IndDate,@agentdcno,@soid,@stateid,@companycode,@moduleid,@doe,@invoicetype,@indentno)");
                            cmd.Parameters.Add("@BranchId", AgentId);
                            cmd.Parameters.Add("@IndDate", GetLowDate(fromdate));
                            cmd.Parameters.Add("@agentdcno", agentdcNo);
                            cmd.Parameters.Add("@soid", SOID);
                            cmd.Parameters.Add("@stateid", stateid);
                            cmd.Parameters.Add("@companycode", companycode);
                            cmd.Parameters.Add("@doe", ServerDateCurrentdate);
                            cmd.Parameters.Add("@moduleid", context.Session["moduleid"].ToString());
                            cmd.Parameters.Add("@invoicetype", "IndentInvoice");
                            cmd.Parameters.Add("@indentno", dtInvoice.Rows[0]["IndentNo"].ToString());
                            vdbmngr.insert(cmd);
                            DcNo = agentdcNo;
                        }
                    }

                    int countdc = 0;
                    int.TryParse(DcNo, out countdc);
                    if (countdc <= 10)
                    {
                        DcNo = "0000" + countdc;
                    }
                    if (countdc >= 10 && countdc <= 99)
                    {
                        DcNo = "000" + countdc;
                    }
                    if (countdc >= 99 && countdc <= 999)
                    {
                        DcNo = "00" + countdc;
                    }
                    if (countdc > 999 && countdc <= 9999)
                    {
                        DcNo = "0" + countdc;
                    }
                    if (countdc > 9999)
                    {
                        DcNo = "" + countdc;
                    }
                    string BranchId = context.Session["branch"].ToString();
                    DcNo = dtbrnchaddress.Rows[0]["BranchCode"].ToString() + "/" + dtapril.ToString("yy") + "-" + dtmarch.ToString("yy") + "T/" + DcNo;
                    string fromstate = dtbrnchaddress.Rows[0]["stateid"].ToString();
                    Aagent_Invoice obj1 = new Aagent_Invoice();
                    obj1.AgentAddress = AgentAddress;
                    string address = dtbrnchaddress.Rows[0]["doorno"].ToString() + "," + dtbrnchaddress.Rows[0]["street"].ToString() + "," + dtbrnchaddress.Rows[0]["area"].ToString() + "," + dtbrnchaddress.Rows[0]["city"].ToString() + "," + dtbrnchaddress.Rows[0]["mandal"].ToString() + "," + dtbrnchaddress.Rows[0]["district"].ToString() + "," + dtbrnchaddress.Rows[0]["pincode"].ToString() + "," + dtbrnchaddress.Rows[0]["phonenumber"].ToString() + "," + dtbrnchaddress.Rows[0]["emailid"].ToString();
                    obj1.BranchAddress = address;
                    obj1.AgentName = AgentName;
                    obj1.quatationno = quatationno;
                    obj1.buyerTinNumber = buyerTinNumber;
                    obj1.titlename = titlename;
                    obj1.salestype = salestype;
                    obj1.ponumber = pono;
                    obj1.grnno = grnno;
                    obj1.TempInvoice = countdc.ToString();
                    obj1.invoiceno = DcNo;
                    obj1.city = dtbrnchaddress.Rows[0]["city"].ToString();
                    obj1.invoicedate = fromdate.AddDays(1).ToString("dd/MM/yyyy");
                    obj1.frmstatename = dtbrnchaddress.Rows[0]["statename"].ToString();
                    obj1.frmstatecode = dtbrnchaddress.Rows[0]["gststatecode"].ToString();
                    obj1.fromgstn = dtbrnchaddress.Rows[0]["gstno"].ToString();
                    tostate = dtAddress.Rows[0]["stateid"].ToString();
                    obj1.tostatename = dtAddress.Rows[0]["statename"].ToString();
                    obj1.tostatecode = dtAddress.Rows[0]["gststatecode"].ToString();
                    obj1.togstin = dtAddress.Rows[0]["gstno"].ToString();
                    obj1.phoneno = dtAddress.Rows[0]["phonenumber"].ToString();
                    obj1.email = dtAddress.Rows[0]["email"].ToString();
                    obj1.companyphone = dtbrnchaddress.Rows[0]["phonenumber"].ToString();
                    obj1.companyemail = dtbrnchaddress.Rows[0]["email"].ToString();
                    obj1.dctype = "Tax Invoice";
                    Agent_invoicelist.Add(obj1);
                    List<Aagent_Invoice_item_det> Aagent_Invoice_item_det = new List<Aagent_Invoice_item_det>();
                    foreach (DataRow dr in dtInvoice.Rows)
                    {

                        DateTime dtjuly = new DateTime();
                        string jul = "7/18/2022";
                        dtjuly = DateTime.Parse(jul);
                        if (dtjuly > fromdate.AddDays(1))
                        {
                            string categoryid = "";
                            foreach (DataRow drcate in dtcategory.Select("subcatsno='" + dr["subcatid"].ToString() + "'"))
                            {
                                categoryid = drcate["catsno"].ToString();
                            }
                            string[] catarr = { "2", "12", "39", "47", "48" };
                            if (catarr.Contains(categoryid))
                            {

                            }
                            else
                            {
                                if (dr["Igst"].ToString() != "0")
                                {
                                    DataRow newrow = Report.NewRow();
                                    newrow["Sl No"] = i++.ToString();
                                    newrow["itemcode"] = dr["itemcode"].ToString();
                                    newrow["Product Name"] = dr["ProductName"].ToString();
                                    newrow["HSN Code"] = dr["hsncode"].ToString();
                                    newrow["Uom"] = dr["Units"].ToString();
                                    float qty = 0;
                                    float.TryParse(dr["DeliveryQty"].ToString(), out qty);
                                    float rate = 0;
                                    float.TryParse(dr["Unitcost"].ToString(), out rate);
                                    newrow["Qty"] = Math.Round(qty, 2);
                                    newrow["Discount"] = 0;
                                    double sgst = 0;
                                    double sgstamount = 0;
                                    double cgst = 0;
                                    double cgstamount = 0;
                                    double Igst = 0;
                                    double Igstamount = 0;
                                    double totRate = 0;
                                    double.TryParse(dr["Igst"].ToString(), out Igst);
                                    double Igstcon = 100 + Igst;
                                    Igstamount = (rate / Igstcon) * Igst;
                                    Igstamount = Math.Round(Igstamount, 2);
                                    totRate = Igstamount;
                                    double Vatrate = rate - totRate;
                                    Vatrate = Math.Round(Vatrate, 2);
                                    newrow["Rate"] = Vatrate.ToString();
                                    double PAmount = qty * Vatrate;
                                    newrow["Taxable Value"] = Math.Round(PAmount, 2);
                                    double tot_vatamount = (PAmount * Igst) / 100;
                                    if (fromstate == tostate)
                                    {
                                        sgstamount = (tot_vatamount / 2);
                                        sgstamount = Math.Round(sgstamount, 2);
                                        newrow["sgst"] = dr["sgst"].ToString();
                                        newrow["sgstamount"] = sgstamount.ToString();
                                        cgstamount = (tot_vatamount / 2);
                                        cgstamount = Math.Round(cgstamount, 2);
                                        newrow["cgst"] = dr["cgst"].ToString();
                                        newrow["cgstamount"] = cgstamount.ToString();
                                        newrow["Igst"] = 0;
                                        newrow["Igstamount"] = 0;
                                    }
                                    else
                                    {
                                        newrow["sgst"] = 0;
                                        newrow["sgstamount"] = 0;
                                        newrow["cgst"] = 0;
                                        newrow["cgstamount"] = 0;
                                        newrow["Igst"] = dr["Igst"].ToString();
                                        tot_vatamount = Math.Round(tot_vatamount, 2);
                                        newrow["Igstamount"] = tot_vatamount.ToString();
                                    }
                                    double tot_amount = PAmount + tot_vatamount;
                                    tot_amount = Math.Round(tot_amount, 2);
                                    newrow["totalamount"] = tot_amount;
                                    Report.Rows.Add(newrow); ;
                                }
                            }
                        }
                        else
                        {
                            if (dr["Igst"].ToString() != "0")
                            {
                                DataRow newrow = Report.NewRow();
                                newrow["Sl No"] = i++.ToString();
                                newrow["itemcode"] = dr["itemcode"].ToString();
                                newrow["Product Name"] = dr["ProductName"].ToString();
                                newrow["HSN Code"] = dr["hsncode"].ToString();
                                newrow["Uom"] = dr["Units"].ToString();
                                float qty = 0;
                                float.TryParse(dr["DeliveryQty"].ToString(), out qty);
                                float rate = 0;
                                float.TryParse(dr["Unitcost"].ToString(), out rate);
                                newrow["Qty"] = Math.Round(qty, 2);
                                newrow["Discount"] = 0;
                                double sgst = 0;
                                double sgstamount = 0;
                                double cgst = 0;
                                double cgstamount = 0;
                                double Igst = 0;
                                double Igstamount = 0;
                                double totRate = 0;
                                double.TryParse(dr["Igst"].ToString(), out Igst);
                                double Igstcon = 100 + Igst;
                                Igstamount = (rate / Igstcon) * Igst;
                                Igstamount = Math.Round(Igstamount, 2);
                                totRate = Igstamount;
                                double Vatrate = rate - totRate;
                                Vatrate = Math.Round(Vatrate, 2);
                                newrow["Rate"] = Vatrate.ToString();
                                double PAmount = qty * Vatrate;
                                newrow["Taxable Value"] = Math.Round(PAmount, 2);
                                double tot_vatamount = (PAmount * Igst) / 100;
                                if (fromstate == tostate)
                                {
                                    sgstamount = (tot_vatamount / 2);
                                    sgstamount = Math.Round(sgstamount, 2);
                                    newrow["sgst"] = dr["sgst"].ToString();
                                    newrow["sgstamount"] = sgstamount.ToString();
                                    cgstamount = (tot_vatamount / 2);
                                    cgstamount = Math.Round(cgstamount, 2);
                                    newrow["cgst"] = dr["cgst"].ToString();
                                    newrow["cgstamount"] = cgstamount.ToString();
                                    newrow["Igst"] = 0;
                                    newrow["Igstamount"] = 0;
                                }
                                else
                                {
                                    newrow["sgst"] = 0;
                                    newrow["sgstamount"] = 0;
                                    newrow["cgst"] = 0;
                                    newrow["cgstamount"] = 0;
                                    newrow["Igst"] = dr["Igst"].ToString();
                                    tot_vatamount = Math.Round(tot_vatamount, 2);
                                    newrow["Igstamount"] = tot_vatamount.ToString();
                                }
                                double tot_amount = PAmount + tot_vatamount;
                                tot_amount = Math.Round(tot_amount, 2);
                                newrow["totalamount"] = tot_amount;
                                Report.Rows.Add(newrow); ;
                            }
                        }
                    }
                    List<Aagent_Invoice_item_det> Aagent_Invoice_item_list = new List<Aagent_Invoice_item_det>();
                    foreach (DataRow dr in Report.Rows)
                    {
                        Aagent_Invoice_item_det getProducts = new Aagent_Invoice_item_det();
                        getProducts.sno = dr["Sl No"].ToString();
                        getProducts.itemcode = dr["itemcode"].ToString();
                        getProducts.ProductName = dr["Product Name"].ToString();
                        getProducts.qty = dr["Qty"].ToString();
                        getProducts.hsncode = dr["HSN Code"].ToString();
                        getProducts.uom = dr["Uom"].ToString();
                        getProducts.rate = dr["Rate"].ToString();
                        getProducts.discount = dr["Discount"].ToString();
                        getProducts.taxablevalue = dr["Taxable Value"].ToString();
                        getProducts.sgst = dr["sgst"].ToString();
                        getProducts.sgstamount = dr["sgstamount"].ToString();
                        getProducts.cgst = dr["cgst"].ToString();
                        getProducts.cgstamount = dr["cgstamount"].ToString();
                        getProducts.igst = dr["igst"].ToString();
                        getProducts.igstamount = dr["igstamount"].ToString();
                        getProducts.totalamount = dr["totalamount"].ToString();
                        Aagent_Invoice_item_list.Add(getProducts);
                    }
                    cmd = new MySqlCommand("SELECT invtras.TransType, invtras.FromTran, invtras.ToTran, invtras.Qty, invtras.DOE, invmaster.sno AS invsno, invmaster.InvName FROM (SELECT TransType, FromTran, ToTran, Qty, EmpID, VarifyStatus, VTripId, VEmpId, Sno, B_inv_sno, DOE, VQty FROM invtransactions12 WHERE (ToTran = @branchid) AND (DOE BETWEEN @d1 AND @d2) AND (Qty <> 0) OR (DOE BETWEEN @d1 AND @d2) AND (Qty <> 0) AND (FromTran = @branchid)) invtras INNER JOIN invmaster ON invtras.B_inv_sno = invmaster.sno ORDER BY invtras.DOE");
                    DateTime dtmin = GetLowDate(fromdate.AddDays(-1));
                    DateTime dtmax = GetLowDate(fromdate);
                    cmd.Parameters.Add("@d1", dtmin.AddHours(15));
                    cmd.Parameters.Add("@d2", dtmax.AddHours(15));
                    cmd.Parameters.Add("@branchid", AgentId);
                    DataTable dtInventoryDC = vdbmngr.SelectQuery(cmd).Tables[0];
                    cmd = new MySqlCommand("SELECT invtran.TransType, invtran.FromTran, invtran.ToTran, invtran.Qty, invtran.DOE, invmaster.sno AS invsno, invmaster.InvName FROM (SELECT TransType, FromTran, ToTran, Qty, EmpID, VarifyStatus, VTripId, VEmpId, Sno, B_inv_sno, DOE, VQty FROM invtransactions12 WHERE (ToTran = @branchid) AND (DOE BETWEEN @d1 AND @d2) OR (DOE BETWEEN @d1 AND @d2) AND (FromTran = @branchid)) invtran INNER JOIN invmaster ON invtran.B_inv_sno = invmaster.sno ORDER BY invtran.DOE");
                    DateTime dt1 = GetLowDate(fromdate.AddDays(-1));
                    DateTime dt2 = GetLowDate(ServerDateCurrentdate);
                    cmd.Parameters.Add("@d1", dt1.AddHours(15));
                    cmd.Parameters.Add("@d2", dt2.AddHours(15));
                    cmd.Parameters.Add("@branchid", AgentId);
                    DataTable dtprevinventoryDC = vdbmngr.SelectQuery(cmd).Tables[0];

                    cmd = new MySqlCommand("SELECT inventory_monitor.Inv_Sno, invmaster.InvName, inventory_monitor.Qty FROM inventory_monitor INNER JOIN invmaster ON inventory_monitor.Inv_Sno = invmaster.sno WHERE (inventory_monitor.BranchId = @branchid)");
                    cmd.Parameters.Add("@branchid", AgentId);
                    DataTable dtAgentinventory = vdbmngr.SelectQuery(cmd).Tables[0];

                    List<Aagent_Inventary> aagent_inventary_list = new List<Aagent_Inventary>();
                    Aagent_Inventary agent_inv = new Aagent_Inventary();
                    agent_inv.InvName = "Inventory";
                    agent_inv.Opqty = "Opp Bal";
                    agent_inv.Issueqty = "Issued";
                    agent_inv.Receivedqty = "Received";
                    agent_inv.cloqty = "Clo Bal";
                    aagent_inventary_list.Add(agent_inv);
                    foreach (DataRow dragentinv in dtAgentinventory.Rows)
                    {
                        int oppcrates = 0;
                        int Ctotcrates = 0;
                        int Dtotcrates = 0;
                        int prevDtotcrates = 0;
                        int prevCtotcrates = 0;
                        string invname = dragentinv["InvName"].ToString();
                        int.TryParse(dragentinv["Qty"].ToString(), out oppcrates);
                        foreach (DataRow drprev in dtprevinventoryDC.Select("invsno='" + dragentinv["Inv_Sno"].ToString() + "'"))
                        {
                            if (drprev["TransType"].ToString() == "2")
                            {
                                int prevDcrates = 0;
                                int.TryParse(drprev["Qty"].ToString(), out prevDcrates);
                                prevDtotcrates += prevDcrates;
                            }
                            if (drprev["TransType"].ToString() == "1" || drprev["TransType"].ToString() == "3")
                            {
                                int prevCcrates = 0;
                                int.TryParse(drprev["Qty"].ToString(), out prevCcrates);
                                prevCtotcrates += prevCcrates;
                            }
                        }
                        foreach (DataRow dr in dtInventoryDC.Select("invsno='" + dragentinv["Inv_Sno"].ToString() + "'"))
                        {
                            if (dr["TransType"].ToString() == "2")
                            {
                                int Dcrates = 0;
                                int.TryParse(dr["Qty"].ToString(), out Dcrates);
                                Dtotcrates += Dcrates;
                            }
                            if (dr["TransType"].ToString() == "1" || dr["TransType"].ToString() == "3")
                            {
                                int Ccrates = 0;
                                int.TryParse(dr["Qty"].ToString(), out Ccrates);
                                Ctotcrates += Ccrates;
                            }
                        }
                        oppcrates = oppcrates + prevCtotcrates - prevDtotcrates;
                        int CratesClo = oppcrates + Dtotcrates - Ctotcrates;

                        Aagent_Inventary get_inv = new Aagent_Inventary();
                        if (oppcrates.ToString() == "0" && Dtotcrates.ToString() == "0" && Ctotcrates.ToString() == "0" && CratesClo.ToString() == "0")
                        {
                        }
                        else
                        {
                            get_inv.InvName = invname;
                            get_inv.Opqty = oppcrates.ToString();
                            get_inv.Issueqty = Dtotcrates.ToString();
                            get_inv.Receivedqty = Ctotcrates.ToString();
                            get_inv.cloqty = CratesClo.ToString();
                            aagent_inventary_list.Add(get_inv);
                        }
                    }
                    List<AgentInvoiceDetails> agentinvoicedetails_list = new List<AgentInvoiceDetails>();
                    AgentInvoiceDetails getinvoicelist = new AgentInvoiceDetails();
                    getinvoicelist.Aagent_Invoice = Agent_invoicelist;
                    getinvoicelist.Aagent_Invoice_item_det = Aagent_Invoice_item_list;
                    getinvoicelist.Aagent_Inventary = aagent_inventary_list;
                    agentinvoicedetails_list.Add(getinvoicelist);
                    string response = GetJson(agentinvoicedetails_list);
                    context.Response.Write(response);
                }
                else
                {
                    string msg = "Data not found";
                    string response = GetJson(msg);
                    context.Response.Write(response);
                }

            }
        }
        catch (Exception ex)
        {
            string msg = ex.Message;
            string response = GetJson(msg);
            context.Response.Write(response);
        }
    }
    private void btnAgentInvoice_click(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            SalesDBManager SalesDB = new SalesDBManager();
            DataTable Report1 = new DataTable();
            DataTable dtTotalDispatches = new DataTable();
            Report = new DataTable();
            string titlename = context.Session["TitleName"].ToString();
            string SOID = context.Request["SOID"];
            if (SOID == "572" || SOID == "3")
            {
                SOID = "158";
            }
            string AgentId = context.Request["AgentId"];
            string from_date = context.Request["FromDate"];
            string ddltype = context.Request["ddltype"];
            string ddltaxtype = context.Request["ddltaxtype"];

            DateTime fromdate = Convert.ToDateTime(from_date);
            string tostate = "";
            DateTime ServerDateCurrentdate = VehicleDBMgr.GetTime(vdbmngr.conn);
            DateTime dtapril = new DateTime();
            DateTime dtmarch = new DateTime();
            int currentyear = ServerDateCurrentdate.Year;
            int nextyear = ServerDateCurrentdate.Year + 1;
            int currntyearnum = 0;
            int nextyearnum = 0;
            if (ServerDateCurrentdate.Month > 3)
            {
                string apr = "4/1/" + currentyear;
                dtapril = DateTime.Parse(apr);
                string march = "3/31/" + nextyear;
                dtmarch = DateTime.Parse(march);
                currntyearnum = currentyear;
                nextyearnum = nextyear;
            }
            if (ServerDateCurrentdate.Month <= 3)
            {
                string apr = "4/1/" + (currentyear - 1);
                dtapril = DateTime.Parse(apr);
                string march = "3/31/" + (nextyear - 1);
                dtmarch = DateTime.Parse(march);

            }

            cmd = new MySqlCommand("select* from products_category inner join products_subcategory on products_category.sno = products_subcategory.category_sno where products_subcategory.category_sno = '47';");
            cmd = new MySqlCommand("SELECT indents_subtable.IndentNo,sum(indents_subtable.DeliveryQty * indents_subtable.UnitCost )AS Amount,IFNULL(branchproducts.VatPercent, 0) AS VatPercent,productsdata.sno AS ProductSno,productsdata.units,productsdata.qty as uomqty, productsdata.ProductName,productsdata.description, SUM(indents_subtable.DeliveryQty) AS DeliveryQty,SUM(indents_subtable.unitQty) AS IndentQty,sum(indents_subtable.unitQty * indents_subtable.UnitCost )AS indAmount, indents_subtable.UnitCost, DATE_FORMAT(indents.I_date, '%d %b %y') AS IndentDate,branchdata.stateid, productsdata.itemcode,productsdata.hsncode,productsdata.igst,productsdata.cgst,productsdata.sgst,productsdata.SubCat_sno as subcatid FROM  productsdata INNER JOIN indents_subtable ON productsdata.sno = indents_subtable.Product_sno INNER JOIN indents ON indents_subtable.IndentNo = indents.IndentNo INNER JOIN  branchdata ON indents.Branch_id = branchdata.sno INNER JOIN branchmappingtable ON branchdata.sno = branchmappingtable.SubBranch INNER JOIN branchproducts ON branchmappingtable.SuperBranch = branchproducts.branch_sno AND productsdata.sno = branchproducts.product_sno WHERE (indents.I_date BETWEEN @d1 AND @d2) AND (branchdata.sno = @BranchID) AND (indents_subtable.DeliveryQty>0)  GROUP BY productsdata.ProductName ORDER BY branchproducts.Rank");
            cmd.Parameters.AddWithValue("@BranchID", AgentId);
            cmd.Parameters.AddWithValue("@d1", GetLowDate(fromdate).AddDays(-1));
            cmd.Parameters.AddWithValue("@d2", GetHighDate(fromdate).AddDays(-1));
            DataTable dtInvoice = vdbmngr.SelectQuery(cmd).Tables[0];
            cmd = new MySqlCommand("select products_category.sno as catsno,products_subcategory.sno as subcatsno from products_category inner join products_subcategory on products_category.sno = products_subcategory.category_sno");
            DataTable dtcategory = vdbmngr.SelectQuery(cmd).Tables[0];
            List<Aagent_Invoice> Agent_invoicelist = new List<Aagent_Invoice>();
            Report.Columns.Add("Sl No");
            Report.Columns.Add("itemcode");
            Report.Columns.Add("Product Name");
            Report.Columns.Add("Description");
            Report.Columns.Add("HSN Code");
            Report.Columns.Add("Uom");
            Report.Columns.Add("uomqty");
            Report.Columns.Add("Qty");
            Report.Columns.Add("Rate");
            Report.Columns.Add("Discount");
            Report.Columns.Add("Taxable Value").DataType = typeof(Double);
            Report.Columns.Add("SGST");
            Report.Columns.Add("SGSTamount");
            Report.Columns.Add("CGST");
            Report.Columns.Add("CGSTamount");
            Report.Columns.Add("IGST");
            Report.Columns.Add("IGSTamount");
            Report.Columns.Add("totalamount");
            Report.Columns.Add("invoiceno");
            Report.Columns.Add("TempInvoice");
            string DcNo = "";
            if (dtInvoice.Rows.Count > 0)
            {
                cmd = new MySqlCommand("SELECT branchdata.regtype,branchdata.stateid,branchdata.address,branchdata.SalesType, branchdata.BranchName, branchdata.TinNumber, branchdata.Address, branchdata.tbranchname, branchdata.sno, indents.I_date, indents.quatationno, indents.pono, indents.grnno,  indents.IndentNo, indents.Branch_id, statemastar.statename, statemastar.gststatecode, branchdata.gstno, branchdata.email, branchdata.phonenumber, branchdata.doorno, branchdata.area, branchdata.street,  branchdata.city, branchdata.mandal, branchdata.district, branchdata.pincode FROM branchdata INNER JOIN indents ON branchdata.sno = indents.Branch_id INNER JOIN statemastar ON branchdata.stateid = statemastar.sno WHERE (indents.I_date BETWEEN @d1 AND @d2) AND (indents.Branch_id = @AgentID)");
                cmd.Parameters.AddWithValue("@AgentID", AgentId);
                cmd.Parameters.AddWithValue("@d1", GetLowDate(fromdate).AddDays(-1));
                cmd.Parameters.AddWithValue("@d2", GetHighDate(fromdate).AddDays(-1));
                DataTable dtAddress = vdbmngr.SelectQuery(cmd).Tables[0];
                string AgentAddress = "";
                string AgentName = "";
                string quatationno = "";
                string pono = "";
                string grnno = "";
                string salestype = "";
                string buyerTinNumber = "";
                string stateid = "";
                string companycode = "";
                string companytinno = "";
                string companypanno = "";
                string buyercompanyname = "";
                string regtype = "";
                if (dtAddress.Rows.Count > 0)
                {
                    AgentAddress = dtAddress.Rows[0]["doorno"].ToString() + ", " + dtAddress.Rows[0]["street"].ToString() + ", " + dtAddress.Rows[0]["area"].ToString() + ", " + dtAddress.Rows[0]["city"].ToString() + ", " + dtAddress.Rows[0]["mandal"].ToString() + ", " + dtAddress.Rows[0]["district"].ToString() + ", " + dtAddress.Rows[0]["pincode"].ToString();// dtAddress.Rows[0]["Address"].ToString();
                    AgentName = dtAddress.Rows[0]["BranchName"].ToString();
                    quatationno = dtAddress.Rows[0]["quatationno"].ToString();
                    pono = dtAddress.Rows[0]["pono"].ToString();
                    grnno = dtAddress.Rows[0]["grnno"].ToString();
                    // grnno = dtAddress.Rows[0]["grnno"].ToString();
                    salestype = dtAddress.Rows[0]["salestype"].ToString();
                    buyerTinNumber = dtAddress.Rows[0]["TinNumber"].ToString();
                    buyercompanyname = dtAddress.Rows[0]["address"].ToString();
                    regtype = dtAddress.Rows[0]["regtype"].ToString();
                }
                DataTable dtbrnchaddress = new DataTable();
                DataTable dtbranchcode = new DataTable();
                string branchname = "";
                //string branchname = "";
                if (ddltaxtype == "PoNumbers")
                {
                    cmd = new MySqlCommand("SELECT   statemastar.gststatecode FROM branchdata INNER JOIN statemastar ON branchdata.stateid = statemastar.sno WHERE (branchdata.sno = @branchsno)");
                    cmd.Parameters.AddWithValue("@branchsno", SOID);
                    DataTable dtstate = vdbmngr.SelectQuery(cmd).Tables[0];
                    string state = dtstate.Rows[0]["gststatecode"].ToString();
                    if (state == "33")  ////Hardcore this are the Tamlnadu State wise same Address For Three Branches Kanch,Ambur,Chennai.so for GST CompasInvoice purpose we need to If Conditions  below processs
                    {
                        cmd = new MySqlCommand("SELECT branchdata.companycode, branchdata.phonenumber,branchdata.email, branchdata.sno,branchdata.stateid, branchdata.Address, branchdata.TinNumber, branchdata.panno, branchdata.BranchCode,statemastar.statecode, statemastar.statename, statemastar.gststatecode, branchdata.phonenumber, branchdata.emailid,  branchdata.street, branchdata.city, branchdata.mandal, branchdata.district, branchdata.pincode, branchdata.gstno, branchdata.doorno, branchdata.area FROM branchdata INNER JOIN statemastar ON branchdata.stateid = statemastar.sno WHERE (branchdata.sno = @branchsno)");
                        cmd.Parameters.AddWithValue("@branchsno", SOID);
                        dtbrnchaddress = vdbmngr.SelectQuery(cmd).Tables[0];
                        branchname = "Chennai";

                        cmd = new MySqlCommand("SELECT  sno, BranchCode FROM  branchdata WHERE (sno = @branchsno)");
                        cmd.Parameters.AddWithValue("@branchsno", SOID);
                        dtbranchcode = vdbmngr.SelectQuery(cmd).Tables[0];
                    }
                    else
                    {
                        cmd = new MySqlCommand("SELECT branchdata.companycode, branchdata.phonenumber,branchdata.email, branchdata.sno,branchdata.stateid, branchdata.Address, branchdata.TinNumber, branchdata.panno, branchdata.BranchCode,statemastar.statecode, statemastar.statename, statemastar.gststatecode, branchdata.phonenumber, branchdata.emailid,  branchdata.street, branchdata.city, branchdata.mandal, branchdata.district, branchdata.pincode, branchdata.gstno, branchdata.doorno, branchdata.area FROM branchdata INNER JOIN statemastar ON branchdata.stateid = statemastar.sno WHERE (branchdata.sno = @branchsno)");
                        cmd.Parameters.AddWithValue("@branchsno", SOID);
                        dtbrnchaddress = vdbmngr.SelectQuery(cmd).Tables[0];
                        branchname = "Bangalore";

                        cmd = new MySqlCommand("SELECT  sno, BranchCode FROM  branchdata WHERE (sno = @branchsno)");
                        cmd.Parameters.AddWithValue("@branchsno", SOID);
                        dtbranchcode = vdbmngr.SelectQuery(cmd).Tables[0];
                    }
                }
                else
                {
                    cmd = new MySqlCommand("SELECT branchdata.companycode, branchdata.phonenumber,branchdata.email, branchdata.sno,branchdata.stateid, branchdata.Address, branchdata.TinNumber, branchdata.panno, branchdata.BranchCode,statemastar.statecode, statemastar.statename, statemastar.gststatecode, branchdata.phonenumber, branchdata.emailid,  branchdata.street, branchdata.city, branchdata.mandal, branchdata.district, branchdata.pincode, branchdata.gstno, branchdata.doorno, branchdata.area FROM branchdata INNER JOIN statemastar ON branchdata.stateid = statemastar.sno WHERE (branchdata.sno = @branchsno)");
                    cmd.Parameters.AddWithValue("@branchsno", SOID);
                    dtbrnchaddress = vdbmngr.SelectQuery(cmd).Tables[0];
                }
                string BranchAddress = dtbrnchaddress.Rows[0]["Address"].ToString();
                companycode = dtbrnchaddress.Rows[0]["companycode"].ToString();
                companytinno = dtbrnchaddress.Rows[0]["TinNumber"].ToString();
                companypanno = dtbrnchaddress.Rows[0]["panno"].ToString();
                stateid = dtbrnchaddress.Rows[0]["gststatecode"].ToString();
                List<Aagent_Invoice_item_det> Aagent_Invoice_item_list = new List<Aagent_Invoice_item_det>();
                int i = 1;
                if (ddltype == "NonTax")
                {
                    string DCNO = "0";
                    string BranchId = context.Session["branch"].ToString();
                    string fromstate = dtbrnchaddress.Rows[0]["stateid"].ToString();
                    Aagent_Invoice obj1 = new Aagent_Invoice();
                    obj1.AgentAddress = AgentAddress;
                    string address = dtbrnchaddress.Rows[0]["doorno"].ToString() + ", " + dtbrnchaddress.Rows[0]["street"].ToString() + ", " + dtbrnchaddress.Rows[0]["area"].ToString() + ", " + dtbrnchaddress.Rows[0]["city"].ToString() + ", " + dtbrnchaddress.Rows[0]["mandal"].ToString() + ", " + dtbrnchaddress.Rows[0]["district"].ToString() + ", " + dtbrnchaddress.Rows[0]["pincode"].ToString() + ", " + dtbrnchaddress.Rows[0]["phonenumber"].ToString() + ", " + dtbrnchaddress.Rows[0]["emailid"].ToString();
                    obj1.BranchAddress = address;
                    obj1.AgentName = AgentName;
                    obj1.quatationno = quatationno;
                    obj1.titlename = titlename;
                    obj1.salestype = salestype;
                    obj1.ponumber = pono;
                    obj1.buyerTinNumber = buyerTinNumber;
                    obj1.buyercompanyname = buyercompanyname;
                    obj1.companypanno = companypanno;
                    obj1.companytinno = companytinno;
                    obj1.grnno = grnno;
                    obj1.city = dtAddress.Rows[0]["city"].ToString();
                    obj1.invoicedate = fromdate.ToString("dd/MM/yyyy");
                    obj1.frmstatename = dtbrnchaddress.Rows[0]["statename"].ToString();
                    obj1.frmstatecode = dtbrnchaddress.Rows[0]["gststatecode"].ToString();
                    obj1.fromgstn = dtbrnchaddress.Rows[0]["gstno"].ToString();
                    tostate = dtAddress.Rows[0]["stateid"].ToString();
                    obj1.tostatename = dtAddress.Rows[0]["statename"].ToString();
                    obj1.tostatecode = dtAddress.Rows[0]["gststatecode"].ToString();
                    obj1.togstin = dtAddress.Rows[0]["gstno"].ToString();
                    obj1.phoneno = dtAddress.Rows[0]["phonenumber"].ToString();
                    obj1.email = dtAddress.Rows[0]["email"].ToString();
                    obj1.companyphone = dtbrnchaddress.Rows[0]["phonenumber"].ToString();
                    obj1.companyemail = dtbrnchaddress.Rows[0]["email"].ToString();
                    obj1.branchname = branchname;
                    Agent_invoicelist.Add(obj1);
                    List<Aagent_Invoice_item_det> Aagent_Invoice_item_det = new List<Aagent_Invoice_item_det>();
                    foreach (DataRow dr in dtInvoice.Rows)
                    {
                        if (dr["Igst"].ToString() == "0")
                        {
                            DataRow newrow = Report.NewRow();
                            newrow["Sl No"] = i++.ToString();
                            newrow["itemcode"] = dr["itemcode"].ToString();
                            newrow["Product Name"] = dr["ProductName"].ToString();
                            newrow["Description"] = dr["description"].ToString();
                            newrow["HSN Code"] = dr["hsncode"].ToString();
                            newrow["Uom"] = dr["Units"].ToString();
                            newrow["uomqty"] = dr["uomqty"].ToString();
                            float qty = 0; float rate = 0;
                            if (AgentId == "7804" && dr["ProductSno"].ToString() == "240")
                            {
                                float tempqty = 0;
                                float.TryParse(dr["DeliveryQty"].ToString(), out tempqty);
                                float temprate = 0;
                                float.TryParse(dr["Unitcost"].ToString(), out temprate);
                                qty = tempqty / 6;
                                rate = temprate * 6;
                            }
                            else
                            {
                                float.TryParse(dr["DeliveryQty"].ToString(), out qty);
                                float.TryParse(dr["Unitcost"].ToString(), out rate);
                            }

                            newrow["Qty"] = Math.Round(qty, 2);
                            newrow["Discount"] = 0;
                            double sgstamount = 0;
                            double cgstamount = 0;
                            double Igst = 0;
                            double Igstamount = 0;
                            double totRate = 0;
                            double.TryParse(dr["Igst"].ToString(), out Igst);
                            double Igstcon = 100 + Igst;
                            Igstamount = (rate / Igstcon) * Igst;
                            Igstamount = Math.Round(Igstamount, 2);
                            totRate = Igstamount;
                            double Vatrate = rate - totRate;
                            Vatrate = Math.Round(Vatrate, 2);
                            newrow["Rate"] = Vatrate.ToString();
                            double PAmount = qty * Vatrate;
                            newrow["Taxable Value"] = Math.Round(PAmount, 2);
                            double tot_vatamount = (PAmount * Igst) / 100;
                            if (fromstate == tostate)
                            {
                                sgstamount = (tot_vatamount / 2);
                                sgstamount = Math.Round(sgstamount, 2);
                                newrow["sgst"] = dr["sgst"].ToString();
                                newrow["sgstamount"] = sgstamount.ToString();
                                cgstamount = (tot_vatamount / 2);
                                cgstamount = Math.Round(cgstamount, 2);
                                newrow["cgst"] = dr["cgst"].ToString();
                                newrow["cgstamount"] = cgstamount.ToString();
                                newrow["Igst"] = 0;
                                newrow["Igstamount"] = 0;
                            }
                            else
                            {
                                newrow["sgst"] = 0;
                                newrow["sgstamount"] = 0;
                                newrow["cgst"] = 0;
                                newrow["cgstamount"] = 0;
                                newrow["Igst"] = dr["Igst"].ToString();
                                tot_vatamount = Math.Round(tot_vatamount, 2);
                                newrow["Igstamount"] = tot_vatamount.ToString();
                            }
                            double tot_amount = PAmount + tot_vatamount;
                            tot_amount = Math.Round(tot_amount, 2);
                            newrow["totalamount"] = tot_amount;
                            cmd = new MySqlCommand("SELECT MAX(agentdcno) as agentdcno FROM  Agentdc WHERE  (BranchId=@BranchId) AND (IndDate BETWEEN @d1 AND @d2) and (agentdcno>0)");
                            cmd.Parameters.AddWithValue("@BranchId", AgentId);
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(fromdate).AddDays(-1));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(fromdate).AddDays(-1));
                            DataTable dtnDc = vdbmngr.SelectQuery(cmd).Tables[0];
                            //string dcnumber = "";
                            if (dtnDc.Rows.Count > 0)
                            {
                                DcNo = dtnDc.Rows[0]["agentdcno"].ToString();
                            }
                            else
                            {
                                int taxval = 1;
                                DataRow[] drInvoice = dtInvoice.Select("IGST<'" + taxval + "'");
                                if (drInvoice.Length > 0)
                                {
                                    if (ServerDateCurrentdate.ToString("dd/MM/yyyy") == fromdate.ToString("dd/MM/yyyy"))
                                    {
                                        cmd = new MySqlCommand("SELECT IFNULL(MAX(agentdcno), 0) + 1 AS Sno FROM Agentdc WHERE (soid = @BranchId) AND (IndDate BETWEEN @d1 AND @d2)");
                                        cmd.Parameters.AddWithValue("@BranchId", SOID);
                                        cmd.Parameters.AddWithValue("@d1", GetLowDate(dtapril.AddDays(-1)));
                                        cmd.Parameters.AddWithValue("@d2", GetHighDate(dtmarch.AddDays(-1)));
                                        DataTable dtadcno = vdbmngr.SelectQuery(cmd).Tables[0];
                                        string agentdcNo = dtadcno.Rows[0]["Sno"].ToString();
                                        cmd = new MySqlCommand("Insert Into Agentdc (BranchId,IndDate,agentdcno,soid,stateid,companycode,moduleid,doe,invoicetype) Values(@BranchId,@IndDate,@agentdcno,@soid,@stateid,@companycode,@moduleid,@doe,@invoicetype)");
                                        cmd.Parameters.AddWithValue("@BranchId", AgentId);
                                        cmd.Parameters.AddWithValue("@IndDate", GetLowDate(fromdate).AddDays(-1));
                                        cmd.Parameters.AddWithValue("@agentdcno", agentdcNo);
                                        cmd.Parameters.AddWithValue("@soid", SOID);
                                        cmd.Parameters.AddWithValue("@stateid", stateid);
                                        cmd.Parameters.AddWithValue("@companycode", companycode);
                                        cmd.Parameters.AddWithValue("@moduleid", context.Session["moduleid"].ToString());
                                        cmd.Parameters.AddWithValue("@doe", ServerDateCurrentdate);
                                        cmd.Parameters.AddWithValue("@invoicetype", "AgentInvoice");
                                        vdbmngr.insert(cmd);
                                        DcNo = agentdcNo;
                                    }
                                }
                            }
                            if (DcNo == "")
                            {
                                int taxval = 1;
                                DataRow[] drInvoice = dtInvoice.Select("IGST<'" + taxval + "'");
                                if (drInvoice.Length > 0)
                                {
                                    if (ServerDateCurrentdate.ToString("dd/MM/yyyy") == fromdate.ToString("dd/MM/yyyy"))
                                    {
                                        cmd = new MySqlCommand("SELECT IFNULL(MAX(agentdcno), 0) + 1 AS Sno FROM Agentdc WHERE (soid = @BranchId) AND (IndDate BETWEEN @d1 AND @d2)");
                                        cmd.Parameters.AddWithValue("@BranchId", SOID);
                                        cmd.Parameters.AddWithValue("@d1", GetLowDate(dtapril.AddDays(-1)));
                                        cmd.Parameters.AddWithValue("@d2", GetHighDate(dtmarch.AddDays(-1)));
                                        DataTable dtadcno = vdbmngr.SelectQuery(cmd).Tables[0];
                                        string agentdcNo = dtadcno.Rows[0]["Sno"].ToString();
                                        cmd = new MySqlCommand("Insert Into Agentdc (BranchId,IndDate,agentdcno,soid,stateid,companycode,moduleid,doe,invoicetype) Values(@BranchId,@IndDate,@agentdcno,@soid,@stateid,@companycode,@moduleid,@doe,@invoicetype)");
                                        cmd.Parameters.AddWithValue("@BranchId", AgentId);
                                        cmd.Parameters.AddWithValue("@IndDate", GetLowDate(fromdate).AddDays(-1));
                                        cmd.Parameters.AddWithValue("@agentdcno", agentdcNo);
                                        cmd.Parameters.AddWithValue("@soid", SOID);
                                        cmd.Parameters.AddWithValue("@stateid", stateid);
                                        cmd.Parameters.AddWithValue("@companycode", companycode);
                                        cmd.Parameters.AddWithValue("@moduleid", context.Session["moduleid"].ToString());
                                        cmd.Parameters.AddWithValue("@doe", ServerDateCurrentdate);
                                        cmd.Parameters.AddWithValue("@invoicetype", "AgentInvoice");
                                        vdbmngr.insert(cmd);
                                        DcNo = agentdcNo;
                                    }
                                }
                            }
                            int countdc = 0;
                            int.TryParse(DcNo, out countdc);
                            if (countdc <= 10)
                            {
                                DCNO = "0000" + countdc;
                            }
                            if (countdc >= 10 && countdc <= 99)
                            {
                                DCNO = "000" + countdc;
                            }
                            if (countdc >= 99 && countdc <= 999)
                            {
                                DCNO = "00" + countdc;
                            }
                            if (countdc > 999 && countdc <= 9999)
                            {
                                DCNO = "0" + countdc;
                            }
                            if (countdc > 9999)
                            {
                                DCNO = "" + countdc;
                            }
                            if (ddltaxtype == "PoNumbers")
                            {
                                if (fromdate.Month > 3)
                                {
                                    DcNo = dtbranchcode.Rows[0]["BranchCode"].ToString() + "/" + dtapril.ToString("yy") + "-" + dtmarch.ToString("yy") + "N/" + DCNO;
                                }
                                else
                                {
                                    if (fromdate.Month < 3)
                                    {
                                        DcNo = dtbranchcode.Rows[0]["BranchCode"].ToString() + "/" + dtapril.ToString("yy") + "-" + dtmarch.ToString("yy") + "N/" + DCNO;
                                    }
                                    else
                                    {
                                        DcNo = dtbranchcode.Rows[0]["BranchCode"].ToString() + "/" + dtapril.AddYears(-1).ToString("yy") + "-" + dtmarch.AddYears(-1).ToString("yy") + "N/" + DCNO;
                                    }
                                }
                            }
                            else
                            {
                                if (fromdate.Month > 3)
                                {

                                    DcNo = dtbrnchaddress.Rows[0]["BranchCode"].ToString() + "/" + dtapril.ToString("yy") + "-" + dtmarch.ToString("yy") + "N/" + DCNO;
                                }
                                else
                                {
                                    if (fromdate.Month < 3)
                                    {
                                        DcNo = dtbrnchaddress.Rows[0]["BranchCode"].ToString() + "/" + dtapril.ToString("yy") + "-" + dtmarch.ToString("yy") + "N/" + DCNO;
                                    }
                                    else
                                    {
                                        DcNo = dtbrnchaddress.Rows[0]["BranchCode"].ToString() + "/" + dtapril.AddYears(-1).ToString("yy") + "-" + dtmarch.AddYears(-1).ToString("yy") + "N/" + DCNO;
                                    }
                                }
                            }
                            //DcNo = dtbranchcode.Rows[0]["BranchCode"].ToString() + "/" + dtapril.ToString("yy") + "-" + dtmarch.ToString("yy") + "N/" + DCNO;
                            newrow["invoiceno"] = DcNo;
                            newrow["TempInvoice"] = countdc;

                            Report.Rows.Add(newrow);
                        }
                        else
                        {
                            DateTime dtjuly = new DateTime();
                            string jul = "7/18/2022";
                            dtjuly = DateTime.Parse(jul);
                            if (dtjuly > fromdate)
                            {
                                string categoryid = "";
                                foreach (DataRow drcate in dtcategory.Select("subcatsno='" + dr["subcatid"].ToString() + "'"))
                                {
                                    categoryid = drcate["catsno"].ToString();
                                }
                                string[] catarr = { "2", "12", "39", "47", "48" };
                                if (catarr.Contains(categoryid))
                                {
                                    DataRow newrow = Report.NewRow();
                                    newrow["Sl No"] = i++.ToString();
                                    newrow["itemcode"] = dr["itemcode"].ToString();
                                    newrow["Product Name"] = dr["ProductName"].ToString();
                                    newrow["Description"] = dr["description"].ToString();
                                    newrow["HSN Code"] = dr["hsncode"].ToString();
                                    newrow["Uom"] = dr["Units"].ToString();
                                    newrow["uomqty"] = dr["uomqty"].ToString();



                                    float qty = 0; float rate = 0;
                                    if (AgentId == "7804" && dr["ProductSno"].ToString() == "240")
                                    {
                                        float tempqty = 0;
                                        float.TryParse(dr["DeliveryQty"].ToString(), out tempqty);
                                        float temprate = 0;
                                        float.TryParse(dr["Unitcost"].ToString(), out temprate);
                                        qty = tempqty / 6;
                                        rate = temprate * 6;
                                    }
                                    else
                                    {
                                        float.TryParse(dr["DeliveryQty"].ToString(), out qty);
                                        float.TryParse(dr["Unitcost"].ToString(), out rate);
                                    }

                                    newrow["Qty"] = Math.Round(qty, 2);
                                    newrow["Discount"] = 0;
                                    double sgstamount = 0;
                                    double cgstamount = 0;
                                    double Igst = 0;
                                    double Igstamount = 0;
                                    double totRate = 0;
                                    double.TryParse(dr["Igst"].ToString(), out Igst);
                                    double Igstcon = 100 + Igst;
                                    Igstamount = (rate / Igstcon) * Igst;
                                    Igstamount = Math.Round(Igstamount, 2);
                                    totRate = Igstamount;
                                    double Vatrate = rate - totRate;
                                    Vatrate = Math.Round(Vatrate, 2);
                                    newrow["Rate"] = Vatrate.ToString();
                                    double PAmount = qty * Vatrate;
                                    newrow["Taxable Value"] = Math.Round(PAmount, 2);
                                    double tot_vatamount = (PAmount * Igst) / 100;
                                    if (fromstate == tostate)
                                    {
                                        sgstamount = (tot_vatamount / 2);
                                        sgstamount = Math.Round(sgstamount, 2);
                                        newrow["sgst"] = 0;
                                        newrow["sgstamount"] = 0;
                                        cgstamount = (tot_vatamount / 2);
                                        cgstamount = Math.Round(cgstamount, 2);
                                        newrow["cgst"] = 0;
                                        newrow["cgstamount"] = 0;
                                        newrow["Igst"] = 0;
                                        newrow["Igstamount"] = 0;
                                    }
                                    else
                                    {
                                        newrow["sgst"] = 0;
                                        newrow["sgstamount"] = 0;
                                        newrow["cgst"] = 0;
                                        newrow["cgstamount"] = 0;
                                        newrow["Igst"] = 0;
                                        tot_vatamount = Math.Round(tot_vatamount, 2);
                                        newrow["Igstamount"] = 0;
                                    }
                                    double tot_amount = PAmount;
                                    tot_amount = Math.Round(tot_amount, 2);
                                    newrow["totalamount"] = tot_amount;
                                    cmd = new MySqlCommand("SELECT MAX(agentdcno) as agentdcno FROM  Agentdc WHERE  (BranchId=@BranchId) AND (IndDate BETWEEN @d1 AND @d2) and (agentdcno>0)");
                                    cmd.Parameters.AddWithValue("@BranchId", AgentId);
                                    cmd.Parameters.AddWithValue("@d1", GetLowDate(fromdate).AddDays(-1));
                                    cmd.Parameters.AddWithValue("@d2", GetHighDate(fromdate).AddDays(-1));
                                    DataTable dtnDc = vdbmngr.SelectQuery(cmd).Tables[0];
                                    //string dcnumber = "";
                                    if (dtnDc.Rows.Count > 0)
                                    {
                                        DcNo = dtnDc.Rows[0]["agentdcno"].ToString();
                                    }
                                    else
                                    {
                                        int taxval = 1;
                                        DataRow[] drInvoice = dtInvoice.Select("IGST<'" + taxval + "'");
                                        if (drInvoice.Length > 0)
                                        {
                                            if (ServerDateCurrentdate.ToString("dd/MM/yyyy") == fromdate.ToString("dd/MM/yyyy"))
                                            {
                                                cmd = new MySqlCommand("SELECT IFNULL(MAX(agentdcno), 0) + 1 AS Sno FROM Agentdc WHERE (soid = @BranchId) AND (IndDate BETWEEN @d1 AND @d2)");
                                                cmd.Parameters.AddWithValue("@BranchId", SOID);
                                                cmd.Parameters.AddWithValue("@d1", GetLowDate(dtapril.AddDays(-1)));
                                                cmd.Parameters.AddWithValue("@d2", GetHighDate(dtmarch.AddDays(-1)));
                                                DataTable dtadcno = vdbmngr.SelectQuery(cmd).Tables[0];
                                                string agentdcNo = dtadcno.Rows[0]["Sno"].ToString();
                                                cmd = new MySqlCommand("Insert Into Agentdc (BranchId,IndDate,agentdcno,soid,stateid,companycode,moduleid,doe,invoicetype) Values(@BranchId,@IndDate,@agentdcno,@soid,@stateid,@companycode,@moduleid,@doe,@invoicetype)");
                                                cmd.Parameters.AddWithValue("@BranchId", AgentId);
                                                cmd.Parameters.AddWithValue("@IndDate", GetLowDate(fromdate).AddDays(-1));
                                                cmd.Parameters.AddWithValue("@agentdcno", agentdcNo);
                                                cmd.Parameters.AddWithValue("@soid", SOID);
                                                cmd.Parameters.AddWithValue("@stateid", stateid);
                                                cmd.Parameters.AddWithValue("@companycode", companycode);
                                                cmd.Parameters.AddWithValue("@moduleid", context.Session["moduleid"].ToString());
                                                cmd.Parameters.AddWithValue("@doe", ServerDateCurrentdate);
                                                cmd.Parameters.AddWithValue("@invoicetype", "AgentInvoice");
                                                vdbmngr.insert(cmd);
                                                DcNo = agentdcNo;
                                            }
                                        }
                                    }
                                    if (DcNo == "")
                                    {
                                        int taxval = 1;
                                        DataRow[] drInvoice = dtInvoice.Select("IGST<'" + taxval + "'");
                                        if (drInvoice.Length > 0)
                                        {
                                            if (ServerDateCurrentdate.ToString("dd/MM/yyyy") == fromdate.ToString("dd/MM/yyyy"))
                                            {
                                                cmd = new MySqlCommand("SELECT IFNULL(MAX(agentdcno), 0) + 1 AS Sno FROM Agentdc WHERE (soid = @BranchId) AND (IndDate BETWEEN @d1 AND @d2)");
                                                cmd.Parameters.AddWithValue("@BranchId", SOID);
                                                cmd.Parameters.AddWithValue("@d1", GetLowDate(dtapril.AddDays(-1)));
                                                cmd.Parameters.AddWithValue("@d2", GetHighDate(dtmarch.AddDays(-1)));
                                                DataTable dtadcno = vdbmngr.SelectQuery(cmd).Tables[0];
                                                string agentdcNo = dtadcno.Rows[0]["Sno"].ToString();
                                                cmd = new MySqlCommand("Insert Into Agentdc (BranchId,IndDate,agentdcno,soid,stateid,companycode,moduleid,doe,invoicetype) Values(@BranchId,@IndDate,@agentdcno,@soid,@stateid,@companycode,@moduleid,@doe,@invoicetype)");
                                                cmd.Parameters.AddWithValue("@BranchId", AgentId);
                                                cmd.Parameters.AddWithValue("@IndDate", GetLowDate(fromdate).AddDays(-1));
                                                cmd.Parameters.AddWithValue("@agentdcno", agentdcNo);
                                                cmd.Parameters.AddWithValue("@soid", SOID);
                                                cmd.Parameters.AddWithValue("@stateid", stateid);
                                                cmd.Parameters.AddWithValue("@companycode", companycode);
                                                cmd.Parameters.AddWithValue("@moduleid", context.Session["moduleid"].ToString());
                                                cmd.Parameters.AddWithValue("@doe", ServerDateCurrentdate);
                                                cmd.Parameters.AddWithValue("@invoicetype", "AgentInvoice");
                                                vdbmngr.insert(cmd);
                                                DcNo = agentdcNo;
                                            }
                                        }
                                    }
                                    int countdc = 0;
                                    int.TryParse(DcNo, out countdc);
                                    if (countdc <= 10)
                                    {
                                        DCNO = "0000" + countdc;
                                    }
                                    if (countdc >= 10 && countdc <= 99)
                                    {
                                        DCNO = "000" + countdc;
                                    }
                                    if (countdc >= 99 && countdc <= 999)
                                    {
                                        DCNO = "00" + countdc;
                                    }
                                    if (countdc > 999 && countdc <= 9999)
                                    {
                                        DCNO = "0" + countdc;
                                    }
                                    if (countdc > 9999)
                                    {
                                        DCNO = "" + countdc;
                                    }
                                    if (ddltaxtype == "PoNumbers")
                                    {
                                        if (fromdate.Month > 3)
                                        {
                                            DcNo = dtbranchcode.Rows[0]["BranchCode"].ToString() + "/" + dtapril.ToString("yy") + "-" + dtmarch.ToString("yy") + "N/" + DCNO;
                                        }
                                        else
                                        {
                                            if (fromdate.Month < 3)
                                            {
                                                DcNo = dtbranchcode.Rows[0]["BranchCode"].ToString() + "/" + dtapril.ToString("yy") + "-" + dtmarch.ToString("yy") + "N/" + DCNO;
                                            }
                                            else
                                            {
                                                DcNo = dtbranchcode.Rows[0]["BranchCode"].ToString() + "/" + dtapril.AddYears(-1).ToString("yy") + "-" + dtmarch.AddYears(-1).ToString("yy") + "N/" + DCNO;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        if (fromdate.Month > 3)
                                        {

                                            DcNo = dtbrnchaddress.Rows[0]["BranchCode"].ToString() + "/" + dtapril.ToString("yy") + "-" + dtmarch.ToString("yy") + "N/" + DCNO;
                                        }
                                        else
                                        {
                                            if (fromdate.Month < 3)
                                            {
                                                DcNo = dtbrnchaddress.Rows[0]["BranchCode"].ToString() + "/" + dtapril.ToString("yy") + "-" + dtmarch.ToString("yy") + "N/" + DCNO;
                                            }
                                            else
                                            {
                                                DcNo = dtbrnchaddress.Rows[0]["BranchCode"].ToString() + "/" + dtapril.AddYears(-1).ToString("yy") + "-" + dtmarch.AddYears(-1).ToString("yy") + "N/" + DCNO;
                                            }
                                        }
                                    }
                                    //DcNo = dtbranchcode.Rows[0]["BranchCode"].ToString() + "/" + dtapril.ToString("yy") + "-" + dtmarch.ToString("yy") + "N/" + DCNO;
                                    newrow["invoiceno"] = DcNo;
                                    newrow["TempInvoice"] = countdc;
                                    Report.Rows.Add(newrow);
                                }
                            }
                        }
                    }
                    foreach (DataRow dr in Report.Rows)
                    {
                        Aagent_Invoice_item_det getProducts = new Aagent_Invoice_item_det();
                        getProducts.sno = dr["Sl No"].ToString();
                        getProducts.itemcode = dr["itemcode"].ToString();
                        getProducts.ProductName = dr["Product Name"].ToString();
                        getProducts.qty = dr["Qty"].ToString();
                        getProducts.hsncode = dr["HSN Code"].ToString();
                        getProducts.uom = dr["Uom"].ToString();
                        getProducts.uomqty = dr["uomqty"].ToString();
                        getProducts.rate = dr["Rate"].ToString();
                        getProducts.discount = dr["Discount"].ToString();
                        getProducts.taxablevalue = dr["Taxable Value"].ToString();
                        getProducts.sgst = dr["sgst"].ToString();
                        getProducts.sgstamount = dr["sgstamount"].ToString();
                        getProducts.dctype = "Bill Of Supply";
                        getProducts.invoiceno = dr["invoiceno"].ToString();
                        getProducts.TempInvoice = dr["TempInvoice"].ToString();
                        getProducts.cgst = dr["cgst"].ToString();
                        getProducts.cgstamount = dr["cgstamount"].ToString();
                        getProducts.igst = dr["igst"].ToString();
                        getProducts.igstamount = dr["igstamount"].ToString();
                        getProducts.totalamount = dr["totalamount"].ToString();
                        getProducts.Description = dr["Description"].ToString();
                        Aagent_Invoice_item_list.Add(getProducts);
                    }
                }
                else
                {

                    string DCNO = "0";
                    string BranchId = context.Session["branch"].ToString();
                    string fromstate = dtbrnchaddress.Rows[0]["stateid"].ToString();
                    Aagent_Invoice obj1 = new Aagent_Invoice();
                    obj1.AgentAddress = AgentAddress;
                    string address = dtbrnchaddress.Rows[0]["doorno"].ToString() + ", " + dtbrnchaddress.Rows[0]["street"].ToString() + ", " + dtbrnchaddress.Rows[0]["area"].ToString() + ", " + dtbrnchaddress.Rows[0]["city"].ToString() + ", " + dtbrnchaddress.Rows[0]["mandal"].ToString() + ", " + dtbrnchaddress.Rows[0]["district"].ToString() + ", " + dtbrnchaddress.Rows[0]["pincode"].ToString() + ", " + dtbrnchaddress.Rows[0]["phonenumber"].ToString() + ", " + dtbrnchaddress.Rows[0]["emailid"].ToString();
                    obj1.BranchAddress = address;
                    obj1.AgentName = AgentName;
                    obj1.quatationno = quatationno;
                    obj1.titlename = titlename;
                    obj1.salestype = salestype;
                    obj1.ponumber = pono;
                    obj1.buyerTinNumber = buyerTinNumber;
                    obj1.buyercompanyname = buyercompanyname;
                    obj1.companypanno = companypanno;
                    obj1.companytinno = companytinno;
                    obj1.grnno = grnno;
                    //obj1.invoiceno = DcNo;
                    obj1.city = dtAddress.Rows[0]["city"].ToString();
                    obj1.invoicedate = fromdate.ToString("dd/MM/yyyy");
                    obj1.frmstatename = dtbrnchaddress.Rows[0]["statename"].ToString();
                    obj1.frmstatecode = dtbrnchaddress.Rows[0]["gststatecode"].ToString();
                    obj1.fromgstn = dtbrnchaddress.Rows[0]["gstno"].ToString();
                    tostate = dtAddress.Rows[0]["stateid"].ToString();
                    obj1.tostatename = dtAddress.Rows[0]["statename"].ToString();
                    obj1.tostatecode = dtAddress.Rows[0]["gststatecode"].ToString();
                    obj1.togstin = dtAddress.Rows[0]["gstno"].ToString();
                    obj1.phoneno = dtAddress.Rows[0]["phonenumber"].ToString();
                    obj1.email = dtAddress.Rows[0]["email"].ToString();
                    obj1.companyphone = dtbrnchaddress.Rows[0]["phonenumber"].ToString();
                    obj1.companyemail = dtbrnchaddress.Rows[0]["email"].ToString();
                    obj1.branchname = branchname;
                    Agent_invoicelist.Add(obj1);
                    List<Aagent_Invoice_item_det> Aagent_Invoice_item_det = new List<Aagent_Invoice_item_det>();
                    foreach (DataRow dr in dtInvoice.Rows)
                    {
                        DateTime dtjuly = new DateTime();
                        string jul = "7/18/2022";
                        dtjuly = DateTime.Parse(jul);
                        if (dtjuly > fromdate)
                        {
                            string categoryid = "";
                            foreach (DataRow drcate in dtcategory.Select("subcatsno='" + dr["subcatid"].ToString() + "'"))
                            {
                                categoryid = drcate["catsno"].ToString();
                            }
                            string[] catarr = { "2", "12", "39", "47", "48" };
                            if (catarr.Contains(categoryid))
                            {

                            }
                            else
                            {
                                if (dr["Igst"].ToString() != "0")
                                {
                                    DataRow newrow = Report.NewRow();
                                    newrow["Sl No"] = i++.ToString();
                                    newrow["itemcode"] = dr["itemcode"].ToString();
                                    newrow["Product Name"] = dr["ProductName"].ToString();
                                    newrow["Description"] = dr["description"].ToString();
                                    newrow["HSN Code"] = dr["hsncode"].ToString();
                                    newrow["Uom"] = dr["Units"].ToString();
                                    newrow["uomqty"] = dr["uomqty"].ToString();
                                    float qty = 0;
                                    float.TryParse(dr["DeliveryQty"].ToString(), out qty);
                                    float rate = 0;
                                    float.TryParse(dr["Unitcost"].ToString(), out rate);
                                    newrow["Qty"] = Math.Round(qty, 2);
                                    newrow["Discount"] = 0;
                                    double sgstamount = 0;
                                    double cgstamount = 0;
                                    double Igst = 0;
                                    double Igstamount = 0;
                                    double totRate = 0;
                                    double.TryParse(dr["Igst"].ToString(), out Igst);
                                    double Igstcon = 100 + Igst;
                                    Igstamount = (rate / Igstcon) * Igst;
                                    Igstamount = Math.Round(Igstamount, 2);
                                    totRate = Igstamount;
                                    double Vatrate = rate - totRate;
                                    Vatrate = Math.Round(Vatrate, 2);
                                    newrow["Rate"] = Vatrate.ToString();
                                    double PAmount = qty * Vatrate;
                                    newrow["Taxable Value"] = Math.Round(PAmount, 2);
                                    double tot_vatamount = (PAmount * Igst) / 100;
                                    if (fromstate == tostate)
                                    {
                                        if (regtype == "Special Economic Zone")
                                        {
                                            newrow["sgst"] = 0;
                                            newrow["sgstamount"] = 0;
                                            newrow["cgst"] = 0;
                                            newrow["cgstamount"] = 0;
                                            newrow["Igst"] = dr["Igst"].ToString();
                                            tot_vatamount = Math.Round(tot_vatamount, 2);
                                            newrow["Igstamount"] = tot_vatamount.ToString();
                                        }
                                        else
                                        {
                                            sgstamount = (tot_vatamount / 2);
                                            sgstamount = Math.Round(sgstamount, 2);
                                            newrow["sgst"] = dr["sgst"].ToString();
                                            newrow["sgstamount"] = sgstamount.ToString();
                                            cgstamount = (tot_vatamount / 2);
                                            cgstamount = Math.Round(cgstamount, 2);
                                            newrow["cgst"] = dr["cgst"].ToString();
                                            newrow["cgstamount"] = cgstamount.ToString();
                                            newrow["Igst"] = 0;
                                            newrow["Igstamount"] = 0;
                                        }
                                    }
                                    else
                                    {
                                        newrow["sgst"] = 0;
                                        newrow["sgstamount"] = 0;
                                        newrow["cgst"] = 0;
                                        newrow["cgstamount"] = 0;
                                        newrow["Igst"] = dr["Igst"].ToString();
                                        tot_vatamount = Math.Round(tot_vatamount, 2);
                                        newrow["Igstamount"] = tot_vatamount.ToString();
                                    }
                                    double tot_amount = PAmount + tot_vatamount;
                                    tot_amount = Math.Round(tot_amount, 2);
                                    newrow["totalamount"] = tot_amount;
                                    cmd = new MySqlCommand("SELECT MAX(agentdcno) as agentdcno FROM  agenttaxdc WHERE  (BranchId=@BranchId) AND (IndDate BETWEEN @d1 AND @d2) and (agentdcno>0)");
                                    cmd.Parameters.AddWithValue("@BranchId", AgentId);
                                    cmd.Parameters.AddWithValue("@d1", GetLowDate(fromdate).AddDays(-1));
                                    cmd.Parameters.AddWithValue("@d2", GetHighDate(fromdate).AddDays(-1));
                                    DataTable dtnDc = vdbmngr.SelectQuery(cmd).Tables[0];
                                    //string dcnumber = "";
                                    if (dtnDc.Rows.Count > 0)
                                    {
                                        DcNo = dtnDc.Rows[0]["agentdcno"].ToString();
                                    }
                                    else
                                    {
                                        int taxval = 1;
                                        DataRow[] drInvoice = dtInvoice.Select("IGST<'" + taxval + "'");
                                        if (drInvoice.Length > 0)
                                        {
                                            if (ServerDateCurrentdate.ToString("dd/MM/yyyy") == fromdate.ToString("dd/MM/yyyy"))
                                            {
                                                cmd = new MySqlCommand("SELECT IFNULL(MAX(agentdcno), 0) + 1 AS Sno FROM agenttaxdc WHERE (soid = @BranchId) AND (IndDate BETWEEN @d1 AND @d2)");
                                                cmd.Parameters.AddWithValue("@BranchId", SOID);
                                                cmd.Parameters.AddWithValue("@d1", GetLowDate(dtapril.AddDays(-1)));
                                                cmd.Parameters.AddWithValue("@d2", GetHighDate(dtmarch.AddDays(-1)));
                                                DataTable dtadcno = vdbmngr.SelectQuery(cmd).Tables[0];
                                                string agentdcNo = dtadcno.Rows[0]["Sno"].ToString();
                                                cmd = new MySqlCommand("Insert Into agenttaxdc (BranchId,IndDate,agentdcno,soid,stateid,companycode,moduleid,doe,invoicetype) Values(@BranchId,@IndDate,@agentdcno,@soid,@stateid,@companycode,@moduleid,@doe,@invoicetype)");
                                                cmd.Parameters.AddWithValue("@BranchId", AgentId);
                                                cmd.Parameters.AddWithValue("@IndDate", GetLowDate(fromdate).AddDays(-1));
                                                cmd.Parameters.AddWithValue("@agentdcno", agentdcNo);
                                                cmd.Parameters.AddWithValue("@soid", SOID);
                                                cmd.Parameters.AddWithValue("@stateid", stateid);
                                                cmd.Parameters.AddWithValue("@companycode", companycode);
                                                cmd.Parameters.AddWithValue("@moduleid", context.Session["moduleid"].ToString());
                                                cmd.Parameters.AddWithValue("@doe", ServerDateCurrentdate);
                                                cmd.Parameters.AddWithValue("@invoicetype", "AgentInvoice");
                                                vdbmngr.insert(cmd);
                                                DcNo = agentdcNo;
                                            }
                                        }
                                    }
                                    if (DcNo == "")
                                    {
                                        int taxval = 1;
                                        DataRow[] drInvoice = dtInvoice.Select("IGST<'" + taxval + "'");
                                        if (drInvoice.Length > 0)
                                        {
                                            if (ServerDateCurrentdate.ToString("dd/MM/yyyy") == fromdate.ToString("dd/MM/yyyy"))
                                            {
                                                cmd = new MySqlCommand("SELECT IFNULL(MAX(agentdcno), 0) + 1 AS Sno FROM agenttaxdc WHERE (soid = @BranchId) AND (IndDate BETWEEN @d1 AND @d2)");
                                                cmd.Parameters.AddWithValue("@BranchId", SOID);
                                                cmd.Parameters.AddWithValue("@d1", GetLowDate(dtapril.AddDays(-1)));
                                                cmd.Parameters.AddWithValue("@d2", GetHighDate(dtmarch.AddDays(-1)));
                                                DataTable dtadcno = vdbmngr.SelectQuery(cmd).Tables[0];
                                                string agentdcNo = dtadcno.Rows[0]["Sno"].ToString();
                                                cmd = new MySqlCommand("Insert Into agenttaxdc (BranchId,IndDate,agentdcno,soid,stateid,companycode,moduleid,doe,invoicetype) Values(@BranchId,@IndDate,@agentdcno,@soid,@stateid,@companycode,@moduleid,@doe,@invoicetype)");
                                                cmd.Parameters.AddWithValue("@BranchId", AgentId);
                                                cmd.Parameters.AddWithValue("@IndDate", GetLowDate(fromdate).AddDays(-1));
                                                cmd.Parameters.AddWithValue("@agentdcno", agentdcNo);
                                                cmd.Parameters.AddWithValue("@soid", SOID);
                                                cmd.Parameters.AddWithValue("@stateid", stateid);
                                                cmd.Parameters.AddWithValue("@companycode", companycode);
                                                cmd.Parameters.AddWithValue("@moduleid", context.Session["moduleid"].ToString());
                                                cmd.Parameters.AddWithValue("@doe", ServerDateCurrentdate);
                                                cmd.Parameters.AddWithValue("@invoicetype", "AgentInvoice");
                                                vdbmngr.insert(cmd);
                                                DcNo = agentdcNo;
                                            }
                                        }
                                    }
                                    int countdc = 0;
                                    int.TryParse(DcNo, out countdc);
                                    if (countdc <= 10)
                                    {
                                        DCNO = "0000" + countdc;
                                    }
                                    if (countdc >= 10 && countdc <= 99)
                                    {
                                        DCNO = "000" + countdc;
                                    }
                                    if (countdc >= 99 && countdc <= 999)
                                    {
                                        DCNO = "00" + countdc;
                                    }
                                    if (countdc > 999 && countdc <= 9999)
                                    {
                                        DCNO = "0" + countdc;
                                    }
                                    if (countdc > 9999)
                                    {
                                        DCNO = "" + countdc;
                                    }
                                    if (ddltaxtype == "PoNumbers")
                                    {
                                        if (fromdate.Month > 3)
                                        {
                                            DcNo = dtbranchcode.Rows[0]["BranchCode"].ToString() + "/" + dtapril.ToString("yy") + "-" + dtmarch.ToString("yy") + "T/" + DCNO;
                                        }
                                        else
                                        {
                                            if (fromdate.Month <= 3)
                                            {
                                                DcNo = dtbranchcode.Rows[0]["BranchCode"].ToString() + "/" + dtapril.ToString("yy") + "-" + dtmarch.ToString("yy") + "T/" + DCNO;
                                            }
                                            else
                                            {
                                                DcNo = dtbranchcode.Rows[0]["BranchCode"].ToString() + "/" + dtapril.AddYears(-1).ToString("yy") + "-" + dtmarch.AddYears(-1).ToString("yy") + "T/" + DCNO;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        if (fromdate.Month > 3)
                                        {
                                            DcNo = dtbrnchaddress.Rows[0]["BranchCode"].ToString() + "/" + dtapril.ToString("yy") + "-" + dtmarch.ToString("yy") + "T/" + DCNO;
                                        }
                                        else
                                        {
                                            if (fromdate.Month <= 3)
                                            {
                                                DcNo = dtbrnchaddress.Rows[0]["BranchCode"].ToString() + "/" + dtapril.ToString("yy") + "-" + dtmarch.ToString("yy") + "T/" + DCNO;
                                            }
                                            else
                                            {
                                                DcNo = dtbrnchaddress.Rows[0]["BranchCode"].ToString() + "/" + dtapril.AddYears(-1).ToString("yy") + "-" + dtmarch.AddYears(-1).ToString("yy") + "T/" + DCNO;
                                            }
                                        }
                                    }
                                    //DcNo = dtbrnchaddress.Rows[0]["BranchCode"].ToString() + "/" + dtapril.ToString("yy") + "-" + dtmarch.ToString("yy") + "T/" + DCNO;
                                    newrow["invoiceno"] = DcNo;
                                    newrow["TempInvoice"] = countdc;
                                    Report.Rows.Add(newrow);
                                }
                            }
                        }
                        else
                        {
                            if (dr["Igst"].ToString() != "0")
                            {
                                DataRow newrow = Report.NewRow();
                                newrow["Sl No"] = i++.ToString();
                                newrow["itemcode"] = dr["itemcode"].ToString();
                                newrow["Product Name"] = dr["ProductName"].ToString();
                                newrow["Description"] = dr["description"].ToString();
                                newrow["HSN Code"] = dr["hsncode"].ToString();
                                newrow["Uom"] = dr["Units"].ToString();
                                newrow["uomqty"] = dr["uomqty"].ToString();
                                float qty = 0;
                                float.TryParse(dr["DeliveryQty"].ToString(), out qty);
                                float rate = 0;
                                float.TryParse(dr["Unitcost"].ToString(), out rate);
                                newrow["Qty"] = Math.Round(qty, 2);
                                newrow["Discount"] = 0;
                                double sgstamount = 0;
                                double cgstamount = 0;
                                double Igst = 0;
                                double Igstamount = 0;
                                double totRate = 0;
                                double.TryParse(dr["Igst"].ToString(), out Igst);
                                double Igstcon = 100 + Igst;
                                Igstamount = (rate / Igstcon) * Igst;
                                Igstamount = Math.Round(Igstamount, 2);
                                totRate = Igstamount;
                                double Vatrate = rate - totRate;
                                Vatrate = Math.Round(Vatrate, 2);
                                newrow["Rate"] = Vatrate.ToString();
                                double PAmount = qty * Vatrate;
                                newrow["Taxable Value"] = Math.Round(PAmount, 2);
                                double tot_vatamount = (PAmount * Igst) / 100;
                                if (fromstate == tostate)
                                {
                                    if (regtype == "Special Economic Zone")
                                    {
                                        newrow["sgst"] = 0;
                                        newrow["sgstamount"] = 0;
                                        newrow["cgst"] = 0;
                                        newrow["cgstamount"] = 0;
                                        newrow["Igst"] = dr["Igst"].ToString();
                                        tot_vatamount = Math.Round(tot_vatamount, 2);
                                        newrow["Igstamount"] = tot_vatamount.ToString();
                                    }
                                    else
                                    {
                                        sgstamount = (tot_vatamount / 2);
                                        sgstamount = Math.Round(sgstamount, 2);
                                        newrow["sgst"] = dr["sgst"].ToString();
                                        newrow["sgstamount"] = sgstamount.ToString();
                                        cgstamount = (tot_vatamount / 2);
                                        cgstamount = Math.Round(cgstamount, 2);
                                        newrow["cgst"] = dr["cgst"].ToString();
                                        newrow["cgstamount"] = cgstamount.ToString();
                                        newrow["Igst"] = 0;
                                        newrow["Igstamount"] = 0;
                                    }
                                }
                                else
                                {
                                    newrow["sgst"] = 0;
                                    newrow["sgstamount"] = 0;
                                    newrow["cgst"] = 0;
                                    newrow["cgstamount"] = 0;
                                    newrow["Igst"] = dr["Igst"].ToString();
                                    tot_vatamount = Math.Round(tot_vatamount, 2);
                                    newrow["Igstamount"] = tot_vatamount.ToString();
                                }
                                double tot_amount = PAmount + tot_vatamount;
                                tot_amount = Math.Round(tot_amount, 2);
                                newrow["totalamount"] = tot_amount;
                                cmd = new MySqlCommand("SELECT MAX(agentdcno) as agentdcno FROM  agenttaxdc WHERE  (BranchId=@BranchId) AND (IndDate BETWEEN @d1 AND @d2) and (agentdcno>0)");
                                cmd.Parameters.AddWithValue("@BranchId", AgentId);
                                cmd.Parameters.AddWithValue("@d1", GetLowDate(fromdate).AddDays(-1));
                                cmd.Parameters.AddWithValue("@d2", GetHighDate(fromdate).AddDays(-1));
                                DataTable dtnDc = vdbmngr.SelectQuery(cmd).Tables[0];
                                //string dcnumber = "";
                                if (dtnDc.Rows.Count > 0)
                                {
                                    DcNo = dtnDc.Rows[0]["agentdcno"].ToString();
                                }
                                else
                                {
                                    int taxval = 1;
                                    DataRow[] drInvoice = dtInvoice.Select("IGST<'" + taxval + "'");
                                    if (drInvoice.Length > 0)
                                    {
                                        if (ServerDateCurrentdate.ToString("dd/MM/yyyy") == fromdate.ToString("dd/MM/yyyy"))
                                        {
                                            cmd = new MySqlCommand("SELECT IFNULL(MAX(agentdcno), 0) + 1 AS Sno FROM agenttaxdc WHERE (soid = @BranchId) AND (IndDate BETWEEN @d1 AND @d2)");
                                            cmd.Parameters.AddWithValue("@BranchId", SOID);
                                            cmd.Parameters.AddWithValue("@d1", GetLowDate(dtapril.AddDays(-1)));
                                            cmd.Parameters.AddWithValue("@d2", GetHighDate(dtmarch.AddDays(-1)));
                                            DataTable dtadcno = vdbmngr.SelectQuery(cmd).Tables[0];
                                            string agentdcNo = dtadcno.Rows[0]["Sno"].ToString();
                                            cmd = new MySqlCommand("Insert Into agenttaxdc (BranchId,IndDate,agentdcno,soid,stateid,companycode,moduleid,doe,invoicetype) Values(@BranchId,@IndDate,@agentdcno,@soid,@stateid,@companycode,@moduleid,@doe,@invoicetype)");
                                            cmd.Parameters.AddWithValue("@BranchId", AgentId);
                                            cmd.Parameters.AddWithValue("@IndDate", GetLowDate(fromdate).AddDays(-1));
                                            cmd.Parameters.AddWithValue("@agentdcno", agentdcNo);
                                            cmd.Parameters.AddWithValue("@soid", SOID);
                                            cmd.Parameters.AddWithValue("@stateid", stateid);
                                            cmd.Parameters.AddWithValue("@companycode", companycode);
                                            cmd.Parameters.AddWithValue("@moduleid", context.Session["moduleid"].ToString());
                                            cmd.Parameters.AddWithValue("@doe", ServerDateCurrentdate);
                                            cmd.Parameters.AddWithValue("@invoicetype", "AgentInvoice");
                                            vdbmngr.insert(cmd);
                                            DcNo = agentdcNo;
                                        }
                                    }
                                }
                                if (DcNo == "")
                                {
                                    int taxval = 1;
                                    DataRow[] drInvoice = dtInvoice.Select("IGST<'" + taxval + "'");
                                    if (drInvoice.Length > 0)
                                    {
                                        if (ServerDateCurrentdate.ToString("dd/MM/yyyy") == fromdate.ToString("dd/MM/yyyy"))
                                        {
                                            cmd = new MySqlCommand("SELECT IFNULL(MAX(agentdcno), 0) + 1 AS Sno FROM agenttaxdc WHERE (soid = @BranchId) AND (IndDate BETWEEN @d1 AND @d2)");
                                            cmd.Parameters.AddWithValue("@BranchId", SOID);
                                            cmd.Parameters.AddWithValue("@d1", GetLowDate(dtapril.AddDays(-1)));
                                            cmd.Parameters.AddWithValue("@d2", GetHighDate(dtmarch.AddDays(-1)));
                                            DataTable dtadcno = vdbmngr.SelectQuery(cmd).Tables[0];
                                            string agentdcNo = dtadcno.Rows[0]["Sno"].ToString();
                                            cmd = new MySqlCommand("Insert Into agenttaxdc (BranchId,IndDate,agentdcno,soid,stateid,companycode,moduleid,doe,invoicetype) Values(@BranchId,@IndDate,@agentdcno,@soid,@stateid,@companycode,@moduleid,@doe,@invoicetype)");
                                            cmd.Parameters.AddWithValue("@BranchId", AgentId);
                                            cmd.Parameters.AddWithValue("@IndDate", GetLowDate(fromdate).AddDays(-1));
                                            cmd.Parameters.AddWithValue("@agentdcno", agentdcNo);
                                            cmd.Parameters.AddWithValue("@soid", SOID);
                                            cmd.Parameters.AddWithValue("@stateid", stateid);
                                            cmd.Parameters.AddWithValue("@companycode", companycode);
                                            cmd.Parameters.AddWithValue("@moduleid", context.Session["moduleid"].ToString());
                                            cmd.Parameters.AddWithValue("@doe", ServerDateCurrentdate);
                                            cmd.Parameters.AddWithValue("@invoicetype", "AgentInvoice");
                                            vdbmngr.insert(cmd);
                                            DcNo = agentdcNo;
                                        }
                                    }
                                }
                                int countdc = 0;
                                int.TryParse(DcNo, out countdc);
                                if (countdc <= 10)
                                {
                                    DCNO = "0000" + countdc;
                                }
                                if (countdc >= 10 && countdc <= 99)
                                {
                                    DCNO = "000" + countdc;
                                }
                                if (countdc >= 99 && countdc <= 999)
                                {
                                    DCNO = "00" + countdc;
                                }
                                if (countdc > 999 && countdc <= 9999)
                                {
                                    DCNO = "0" + countdc;
                                }
                                if (countdc > 9999)
                                {
                                    DCNO = "" + countdc;
                                }
                                if (ddltaxtype == "PoNumbers")
                                {
                                    if (fromdate.Month > 3)
                                    {
                                        DcNo = dtbranchcode.Rows[0]["BranchCode"].ToString() + "/" + dtapril.ToString("yy") + "-" + dtmarch.ToString("yy") + "T/" + DCNO;
                                    }
                                    else
                                    {
                                        if (fromdate.Month <= 3)
                                        {
                                            DcNo = dtbranchcode.Rows[0]["BranchCode"].ToString() + "/" + dtapril.ToString("yy") + "-" + dtmarch.ToString("yy") + "T/" + DCNO;
                                        }
                                        else
                                        {
                                            DcNo = dtbranchcode.Rows[0]["BranchCode"].ToString() + "/" + dtapril.AddYears(-1).ToString("yy") + "-" + dtmarch.AddYears(-1).ToString("yy") + "T/" + DCNO;
                                        }
                                    }
                                }
                                else
                                {
                                    if (fromdate.Month > 3)
                                    {
                                        DcNo = dtbrnchaddress.Rows[0]["BranchCode"].ToString() + "/" + dtapril.ToString("yy") + "-" + dtmarch.ToString("yy") + "T/" + DCNO;
                                    }
                                    else
                                    {
                                        if (fromdate.Month <= 3)
                                        {
                                            DcNo = dtbrnchaddress.Rows[0]["BranchCode"].ToString() + "/" + dtapril.ToString("yy") + "-" + dtmarch.ToString("yy") + "T/" + DCNO;
                                        }
                                        else
                                        {
                                            DcNo = dtbrnchaddress.Rows[0]["BranchCode"].ToString() + "/" + dtapril.AddYears(-1).ToString("yy") + "-" + dtmarch.AddYears(-1).ToString("yy") + "T/" + DCNO;
                                        }
                                    }
                                }
                                //DcNo = dtbrnchaddress.Rows[0]["BranchCode"].ToString() + "/" + dtapril.ToString("yy") + "-" + dtmarch.ToString("yy") + "T/" + DCNO;
                                newrow["invoiceno"] = DcNo;
                                newrow["TempInvoice"] = countdc;
                                Report.Rows.Add(newrow);
                            }
                        }
                    }
                    foreach (DataRow dr in Report.Rows)
                    {
                        Aagent_Invoice_item_det getProducts = new Aagent_Invoice_item_det();
                        getProducts.sno = dr["Sl No"].ToString();
                        getProducts.itemcode = dr["itemcode"].ToString();
                        getProducts.ProductName = dr["Product Name"].ToString();
                        getProducts.qty = dr["Qty"].ToString();
                        getProducts.hsncode = dr["HSN Code"].ToString();
                        getProducts.uom = dr["Uom"].ToString();
                        getProducts.uomqty = dr["uomqty"].ToString();
                        getProducts.rate = dr["Rate"].ToString();
                        getProducts.discount = dr["Discount"].ToString();
                        getProducts.taxablevalue = dr["Taxable Value"].ToString();
                        getProducts.sgst = dr["sgst"].ToString();
                        getProducts.sgstamount = dr["sgstamount"].ToString();
                        getProducts.dctype = "Tax Invoice";
                        getProducts.invoiceno = dr["invoiceno"].ToString();
                        getProducts.TempInvoice = dr["TempInvoice"].ToString();

                        getProducts.cgst = dr["cgst"].ToString();
                        getProducts.cgstamount = dr["cgstamount"].ToString();
                        getProducts.igst = dr["igst"].ToString();
                        getProducts.igstamount = dr["igstamount"].ToString();
                        getProducts.totalamount = dr["totalamount"].ToString();
                        getProducts.Description = dr["Description"].ToString();
                        Aagent_Invoice_item_list.Add(getProducts);
                    }
                }
                cmd = new MySqlCommand("SELECT invtras.TransType, invtras.FromTran, invtras.ToTran, invtras.Qty, invtras.DOE, invmaster.sno AS invsno, invmaster.InvName FROM (SELECT TransType, FromTran, ToTran, Qty, EmpID, VarifyStatus, VTripId, VEmpId, Sno, B_inv_sno, DOE, VQty FROM invtransactions12 WHERE (ToTran = @branchid) AND (DOE BETWEEN @d1 AND @d2) AND (Qty <> 0) OR (DOE BETWEEN @d1 AND @d2) AND (Qty <> 0) AND (FromTran = @branchid)) invtras INNER JOIN invmaster ON invtras.B_inv_sno = invmaster.sno ORDER BY invtras.DOE");
                DateTime dtmin = GetLowDate(fromdate.AddDays(-1));
                DateTime dtmax = GetLowDate(fromdate);
                cmd.Parameters.AddWithValue("@d1", dtmin.AddHours(15));
                cmd.Parameters.AddWithValue("@d2", dtmax.AddHours(15));
                cmd.Parameters.AddWithValue("@branchid", AgentId);
                DataTable dtInventoryDC = vdbmngr.SelectQuery(cmd).Tables[0];
                cmd = new MySqlCommand("SELECT invtran.TransType, invtran.FromTran, invtran.ToTran, invtran.Qty, invtran.DOE, invmaster.sno AS invsno, invmaster.InvName FROM (SELECT TransType, FromTran, ToTran, Qty, EmpID, VarifyStatus, VTripId, VEmpId, Sno, B_inv_sno, DOE, VQty FROM invtransactions12 WHERE (ToTran = @branchid) AND (DOE BETWEEN @d1 AND @d2) OR (DOE BETWEEN @d1 AND @d2) AND (FromTran = @branchid)) invtran INNER JOIN invmaster ON invtran.B_inv_sno = invmaster.sno ORDER BY invtran.DOE");
                DateTime dt1 = GetLowDate(fromdate.AddDays(-1));
                DateTime dt2 = GetLowDate(ServerDateCurrentdate);
                cmd.Parameters.AddWithValue("@d1", dt1.AddHours(15));
                cmd.Parameters.AddWithValue("@d2", dt2.AddHours(15));
                cmd.Parameters.AddWithValue("@branchid", AgentId);
                DataTable dtprevinventoryDC = vdbmngr.SelectQuery(cmd).Tables[0];
                cmd = new MySqlCommand("SELECT inventory_monitor.Inv_Sno, invmaster.InvName, inventory_monitor.Qty FROM inventory_monitor INNER JOIN invmaster ON inventory_monitor.Inv_Sno = invmaster.sno WHERE (inventory_monitor.BranchId = @branchid)");
                cmd.Parameters.AddWithValue("@branchid", AgentId);
                DataTable dtAgentinventory = vdbmngr.SelectQuery(cmd).Tables[0];
                List<Aagent_Inventary> aagent_inventary_list = new List<Aagent_Inventary>();
                Aagent_Inventary agent_inv = new Aagent_Inventary();
                agent_inv.InvName = "Inventory";
                agent_inv.Opqty = "Opp Bal";
                agent_inv.Issueqty = "Issued";
                agent_inv.Receivedqty = "Received";
                agent_inv.cloqty = "Clo Bal";
                aagent_inventary_list.Add(agent_inv);
                foreach (DataRow dragentinv in dtAgentinventory.Rows)
                {
                    int oppcrates = 0;
                    int Ctotcrates = 0;
                    int Dtotcrates = 0;
                    int prevDtotcrates = 0;
                    int prevCtotcrates = 0;
                    string invname = dragentinv["InvName"].ToString();
                    int.TryParse(dragentinv["Qty"].ToString(), out oppcrates);
                    foreach (DataRow drprev in dtprevinventoryDC.Select("invsno='" + dragentinv["Inv_Sno"].ToString() + "'"))
                    {
                        if (drprev["TransType"].ToString() == "2")
                        {
                            int prevDcrates = 0;
                            int.TryParse(drprev["Qty"].ToString(), out prevDcrates);
                            prevDtotcrates += prevDcrates;
                        }
                        if (drprev["TransType"].ToString() == "1" || drprev["TransType"].ToString() == "3")
                        {
                            int prevCcrates = 0;
                            int.TryParse(drprev["Qty"].ToString(), out prevCcrates);
                            prevCtotcrates += prevCcrates;
                        }
                    }
                    foreach (DataRow dr in dtInventoryDC.Select("invsno='" + dragentinv["Inv_Sno"].ToString() + "'"))
                    {
                        if (dr["TransType"].ToString() == "2")
                        {
                            int Dcrates = 0;
                            int.TryParse(dr["Qty"].ToString(), out Dcrates);
                            Dtotcrates += Dcrates;
                        }
                        if (dr["TransType"].ToString() == "1" || dr["TransType"].ToString() == "3")
                        {
                            int Ccrates = 0;
                            int.TryParse(dr["Qty"].ToString(), out Ccrates);
                            Ctotcrates += Ccrates;
                        }
                    }
                    oppcrates = oppcrates + prevCtotcrates - prevDtotcrates;
                    int CratesClo = oppcrates + Dtotcrates - Ctotcrates;

                    Aagent_Inventary get_inv = new Aagent_Inventary();
                    if (oppcrates.ToString() == "0" && Dtotcrates.ToString() == "0" && Ctotcrates.ToString() == "0" && CratesClo.ToString() == "0")
                    {
                    }
                    else
                    {
                        get_inv.InvName = invname;
                        get_inv.Opqty = oppcrates.ToString();
                        get_inv.Issueqty = Dtotcrates.ToString();
                        get_inv.Receivedqty = Ctotcrates.ToString();
                        get_inv.cloqty = CratesClo.ToString();
                        aagent_inventary_list.Add(get_inv);
                    }
                }
                List<AgentInvoiceDetails> agentinvoicedetails_list = new List<AgentInvoiceDetails>();
                AgentInvoiceDetails getinvoicelist = new AgentInvoiceDetails();
                getinvoicelist.Aagent_Invoice = Agent_invoicelist;
                getinvoicelist.Aagent_Invoice_item_det = Aagent_Invoice_item_list;
                getinvoicelist.Aagent_Inventary = aagent_inventary_list;
                agentinvoicedetails_list.Add(getinvoicelist);
                string response = GetJson(agentinvoicedetails_list);
                context.Response.Write(response);
            }
            else
            {
                string msg = "Data not found";
                string response = GetJson(msg);

                context.Response.Write(response);
            }
        }
        catch (Exception ex)
        {
            string msg = ex.Message;
            string response = GetJson(msg);
            context.Response.Write(response);
        }
    }
    public class SaleRepresentive
    {
        public string AgentName { get; set; }
        public string RouteName { get; set; }
        public string Qty { get; set; }
        public string sale_representive { get; set; }
    }
    private void get_SaleRepresentive_details(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            DataTable dtTotalDispatches = new DataTable();
            string Branchid = context.Request["Branchid"];
            string from_date = context.Request["fromdate"];
            DateTime fromdate = Convert.ToDateTime(from_date);
            string todate = context.Request["todate"];
            DateTime tdate = Convert.ToDateTime(todate);
            List<SaleRepresentive> salerepresentivelist = new List<SaleRepresentive>();
            cmd = new MySqlCommand("SELECT  t1.DeliveryQty, t1.salevalue, t1.Branch_id, t1.AgentName, t2.SalesRepresentative, t2.RouteName FROM (SELECT ROUND(AVG(indents_subtable.DeliveryQty), 2) AS DeliveryQty, SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost) AS salevalue,indents.Branch_id, branchdata.BranchName AS AgentName FROM branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch INNER JOIN branchmappingtable branchmappingtable_2 ON branchmappingtable_1.SubBranch = branchmappingtable_2.SubBranch INNER JOIN indents ON branchmappingtable_2.SubBranch = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN branchdata ON indents.Branch_id = branchdata.sno WHERE (branchmappingtable.SuperBranch = @Branchid) AND (indents.I_date BETWEEN @d1 AND @d2) GROUP BY indents.Branch_id) t1 LEFT OUTER JOIN (SELECT modifiedroutes.RouteName, modifiedroutes.Sno, branchdata_1.BranchName, branchdata_1.sno AS Agentid, modifiedroutes.BranchID, branchdata_1.SalesRepresentative FROM modifiedroutes INNER JOIN modifiedroutesubtable ON modifiedroutes.Sno = modifiedroutesubtable.RefNo INNER JOIN branchdata branchdata_1 ON modifiedroutesubtable.BranchID = branchdata_1.sno WHERE (modifiedroutes.BranchID = @Branchid) AND (branchdata_1.flag <> 0) AND (modifiedroutesubtable.EDate IS NULL) AND  (modifiedroutesubtable.CDate <= @d1)) t2 ON t1.Branch_id = t2.Agentid ORDER BY t2.SalesRepresentative");
            cmd.Parameters.AddWithValue("@d1", GetLowDate(fromdate.AddDays(-1)));
            cmd.Parameters.AddWithValue("@d2", GetHighDate(tdate.AddDays(-1)));
            cmd.Parameters.AddWithValue("@Branchid", Branchid);
            DataTable dtbranchqty = vdbmngr.SelectQuery(cmd).Tables[0];
            foreach (DataRow dr in dtbranchqty.Rows)
            {
                SaleRepresentive obj = new SaleRepresentive();
                obj.AgentName = dr["AgentName"].ToString();
                string qty = dr["DeliveryQty"].ToString();
                if (qty == "")
                {
                    int quantity = 0;
                    obj.Qty = quantity.ToString();
                }
                else
                {
                    obj.Qty = dr["DeliveryQty"].ToString();
                }
                obj.RouteName = dr["RouteName"].ToString();
                obj.sale_representive = dr["SalesRepresentative"].ToString();
                salerepresentivelist.Add(obj);
            }
            string response = GetJson(salerepresentivelist);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string msg = ex.Message;
            string response = GetJson(msg);
            context.Response.Write(response);
        }
    }
    private void saveAgentRemarks(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            string AgentName = context.Request["AgentName"];
            string Remarks = context.Request["Remarks"];
            string btnSave = context.Request["btnVal"];
            DateTime doe = VehicleDBMgr.GetTime(vdbmngr.conn);
            if (btnSave == "Save")
            {
                cmd = new MySqlCommand("insert into AgentRemarks (agentid,Remarks,doe) values (@agentid,@Remarks,@doe)");
                cmd.Parameters.AddWithValue("@agentid", AgentName);
                cmd.Parameters.AddWithValue("@Remarks", Remarks);
                cmd.Parameters.AddWithValue("@doe", doe);
                vdbmngr.insert(cmd);
                string msg = "Remarks Successfully Saved";
                string response = GetJson(msg);
                context.Response.Write(response);
            }
            else
            {
            }
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }
    public class AgentRemarks
    {
        public string AgentName { get; set; }
        public string Remarks { get; set; }
        public string Date { get; set; }
    }
    private void getRemarks_click(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            DataTable dtTotalDispatches = new DataTable();
            string Agentid = context.Request["agentid"];
            string from_date = context.Request["fromdate"];
            DateTime fromdate = Convert.ToDateTime(from_date);
            string todate = context.Request["todate"];
            DateTime tdate = Convert.ToDateTime(todate);

            List<AgentRemarks> AgentRemarkslist = new List<AgentRemarks>();
            cmd = new MySqlCommand("SELECT  agentremarks.agentid,agentremarks.doe, branchdata.BranchName, agentremarks.remarks FROM agentremarks INNER JOIN branchdata ON agentremarks.agentid = branchdata.sno WHERE (agentremarks.doe BETWEEN @d1 AND @d2) AND (agentremarks.agentid = @Agentid)");
            cmd.Parameters.AddWithValue("@d1", GetLowDate(fromdate));
            cmd.Parameters.AddWithValue("@d2", GetHighDate(tdate));
            cmd.Parameters.AddWithValue("@Agentid", Agentid);
            DataTable dtDispatches = vdbmngr.SelectQuery(cmd).Tables[0];
            foreach (DataRow dr in dtDispatches.Rows)
            {
                AgentRemarks obj1 = new AgentRemarks();
                obj1.Remarks = dr["remarks"].ToString();
                obj1.AgentName = dr["BranchName"].ToString();
                string date = dr["doe"].ToString();
                DateTime Date = Convert.ToDateTime(date);
                obj1.Date = Date.ToString("dd/MM/yyyy");
                AgentRemarkslist.Add(obj1);
            }
            string response = GetJson(AgentRemarkslist);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string msg = ex.Message;
            string response = GetJson(msg);
            context.Response.Write(response);
        }
    }
    class Route
    {
        public string Route_id { set; get; }
        public string RouteName { set; get; }
    }
    private void get_Plant_Despatches(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            DataTable dtTotalDispatches = new DataTable();
            string Username = context.Session["userdata_sno"].ToString();
            List<Route> brnch = new List<Route>();
            List<Dispatchplan> DispatchplanList = new List<Dispatchplan>();
            cmd = new MySqlCommand("SELECT  sno, DispName, Branch_Id, BranchID FROM dispatch WHERE  (Branch_ID = @Branch_ID) and flag<>0");
            cmd.Parameters.AddWithValue("@Branch_ID", context.Session["branch"]);
            DataTable dtDispatches = vdbmngr.SelectQuery(cmd).Tables[0];
            int i = 1;
            foreach (DataRow dr in dtDispatches.Rows)
            {
                Dispatchplan obj1 = new Dispatchplan();
                obj1.Sno = i++.ToString();
                obj1.Route_id = dr["sno"].ToString();
                obj1.RouteName = dr["DispName"].ToString();
                DispatchplanList.Add(obj1);
            }
            string response = GetJson(DispatchplanList);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string msg = ex.Message;
            string response = GetJson(msg);
            context.Response.Write(response);
        }
    }
    public class MobileNumbers
    {
        public string sno { get; set; }
        public string dispno { get; set; }
        public string btnval { get; set; }
        public List<DispatchMobile> Mobilnumarr { get; set; }
    }
    public class DispatchMobile
    {
        public string dispatchname { get; set; }
        public string name { get; set; }
        public string MobileNumber { get; set; }
        public string emailid { get; set; }
        public string msgtype { get; set; }
        public string dispatchid { get; set; }
        public string sno { get; set; }
    }
    private void saveDispatchMobileNumbers(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            var js = new JavaScriptSerializer();
            var title1 = context.Request.Params[1];
            MobileNumbers obj = js.Deserialize<MobileNumbers>(title1);
            DateTime doe = VehicleDBMgr.GetTime(vdbmngr.conn);
            string btn_save = obj.btnval;
            string dispno = obj.dispno;
            string sno = obj.sno;
            if (btn_save == "Save")
            {
                foreach (DispatchMobile si in obj.Mobilnumarr)
                {
                    string msgtype = si.msgtype;
                    string msg1 = "";
                    if (msgtype == "Dispatch")
                    {
                        msg1 = "2";
                    }
                    if (msgtype == "Indent")
                    {
                        msg1 = "1";
                    }

                    cmd = new MySqlCommand("insert into mobilenotable(DispNo,PhoneNumber,name,EmailID,MsgType) values (@DispNo,@PhoneNumber,@name,@EmailID,@MsgType)");
                    cmd.Parameters.AddWithValue("@DispNo", si.dispatchname);
                    cmd.Parameters.AddWithValue("@PhoneNumber", si.MobileNumber);
                    cmd.Parameters.AddWithValue("@name", si.name);
                    cmd.Parameters.AddWithValue("@EmailID", si.emailid);
                    cmd.Parameters.AddWithValue("@MsgType", msg1);
                    vdbmngr.insert(cmd);
                }
                string msg = "successfully Inserted";
                string Response = GetJson(msg);
                context.Response.Write(Response);
            }
            else
            {
                cmd = new MySqlCommand("delete FROM mobilenotable WHERE (DispNo = @DispNo)");
                cmd.Parameters.AddWithValue("@DispNo", dispno);
                vdbmngr.Delete(cmd);
                foreach (DispatchMobile si in obj.Mobilnumarr)
                {
                    string msgtype = si.msgtype;
                    string msg1 = "";
                    if (msgtype == "Dispatch")
                    {
                        msg1 = "2";
                    }
                    if (msgtype == "Indent")
                    {
                        msg1 = "1";
                    }
                    cmd = new MySqlCommand("insert into mobilenotable(DispNo,PhoneNumber,name,EmailID,MsgType) values (@DispNo,@PhoneNumber,@name,@EmailID,@MsgType)");
                    cmd.Parameters.AddWithValue("@DispNo", dispno);
                    cmd.Parameters.AddWithValue("@PhoneNumber", si.MobileNumber);
                    cmd.Parameters.AddWithValue("@name", si.name);
                    cmd.Parameters.AddWithValue("@EmailID", si.emailid);
                    cmd.Parameters.AddWithValue("@MsgType", msg1);
                    vdbmngr.insert(cmd);
                }
                string msg = "updated successfully";
                string Response = GetJson(msg);
                context.Response.Write(Response);
            }
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }
    private void get_DisppatchMobienumbers(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            cmd = new MySqlCommand("SELECT  mobilenotable.PhoneNumber, mobilenotable.Sno, mobilenotable.EmpID, mobilenotable.EmailID, mobilenotable.MsgType, mobilenotable.DispNo,dispatch.DispName, dispatch.BranchID FROM mobilenotable INNER JOIN dispatch ON mobilenotable.DispNo = dispatch.sno WHERE (dispatch.Branch_ID = @Branch_ID) GROUP BY dispatch.DispName order by dispatch.DispName");
            cmd.Parameters.AddWithValue("@Branch_ID", context.Session["branch"]);
            DataTable routes = vdbmngr.SelectQuery(cmd).Tables[0];
            List<DispatchMobile> DispatchMobilelist = new List<DispatchMobile>();
            foreach (DataRow dr in routes.Rows)
            {
                DispatchMobile obj2 = new DispatchMobile();
                obj2.dispatchid = dr["DispNo"].ToString();
                obj2.dispatchname = dr["DispName"].ToString();
                string msgtype = dr["MsgType"].ToString();
                string msg = "";
                if (msgtype == "2")
                {
                    msg = "Dispatch";
                }
                if (msgtype == "1")
                {
                    msg = "Indent";
                }
                obj2.msgtype = msg;
                obj2.sno = dr["Sno"].ToString();
                DispatchMobilelist.Add(obj2);
            }
            string response = GetJson(DispatchMobilelist);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }
    private void get_DisppatchMobie_no(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            string DispNo = context.Request["DispNo"];

            cmd = new MySqlCommand("SELECT mobilenotable.PhoneNumber, mobilenotable.Sno, mobilenotable.EmpID, mobilenotable.EmailID, mobilenotable.MsgType, mobilenotable.DispNo,dispatch.DispName FROM mobilenotable INNER JOIN dispatch ON mobilenotable.DispNo = dispatch.sno where  mobilenotable.DispNo=@DispNo order by mobilenotable.MsgType");
            cmd.Parameters.AddWithValue("@DispNo", DispNo);

            DataTable routes = vdbmngr.SelectQuery(cmd).Tables[0];
            List<DispatchMobile> DispatchMobilelist = new List<DispatchMobile>();
            foreach (DataRow dr in routes.Rows)
            {
                DispatchMobile obj2 = new DispatchMobile();
                obj2.dispatchid = dr["DispNo"].ToString();
                obj2.MobileNumber = dr["PhoneNumber"].ToString();
                obj2.dispatchname = dr["DispName"].ToString();
                obj2.emailid = dr["EmailID"].ToString();
                string msgtype = dr["MsgType"].ToString();
                string msg = "";
                if (msgtype == "2")
                {
                    msg = "Dispatch";
                }
                if (msgtype == "1")
                {
                    msg = "Indent";
                }
                obj2.msgtype = msg;
                obj2.sno = dr["Sno"].ToString();
                DispatchMobilelist.Add(obj2);
            }
            string response = GetJson(DispatchMobilelist);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }
    public class AgentSale
    {
        public string ProductName { get; set; }
        public string rate { get; set; }
        public string salevalue { get; set; }
        public string Month { get; set; }
        public string str { get; set; }
    }
    public class AgentMonthlySale
    {
        public string salevalue { get; set; }
        public string Month { get; set; }
    }
    public class AgentMonthlySaleDetails
    {
        public List<BranchDetails> BranchDetails { get; set; }
        public List<AgentSale> AgentSale { get; set; }
        public List<AgentMonthlySale> AgentMonthlySale { get; set; }
        public List<AgentInentive> AgentInentive { get; set; }
    }
    public class ProductSale
    {
        public string salevalue { get; set; }
        public string ProductName { get; set; }
        public string ProductCode { get; set; }
        public string DispatchQty { get; set; }
        public string SaleQty { get; set; }
        public string productionqty { get; set; }
        public string Month { get; set; }
        public string str { get; set; }
        public string diff { get; set; }
        public string OpeningQty { get; set; }
    }

    public class ProductMonthlySale
    {
        public string salevalue { get; set; }
        public string BranchName { get; set; }
        public string Branchid { get; set; }
        public string Month { get; set; }
        public string DelivaryQty { get; set; }
    }
    public class AgentInentive
    {
        public string StructureName { get; set; }
        public string FromDate { get; set; }
        public string Todate { get; set; }
        public string leakagepercent { get; set; }
        public string TotalDiscount { get; set; }
        public string Remarks { get; set; }
    }
    public class ProductMonthlySaleDetails
    {
        public List<ProductSale> ProductSale { get; set; }
        public List<ProductMonthlySale> ProductMonthlySale { get; set; }
    }
    DataTable dtAgent = new DataTable();
    private void get_Agent_Information_Details(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            string Branchid = context.Request["agentid"];
            string frmdate = context.Request["fromdate"];
            DateTime fromdate = Convert.ToDateTime(frmdate);
            string todate = context.Request["todate"];
            DateTime tdate = Convert.ToDateTime(todate);
            Report = new DataTable();
            dtAgent = new DataTable();
            cmd = new MySqlCommand("SELECT  branchdata.sno, branchdata.BranchName, branchdata.Lat, branchdata.Lng, branchdata.phonenumber, branchdata.CollectionType, branchdata.Address,branchdata.DateOfEntry, branchdata.phonenumber2, branchroutes.RouteName, branchdata.duelimit, branchaccounts.Amount, branchdata.Due_Limit_Days, branchdata.Due_Limit_Type, branchdata.SalesRepresentative, freezer_issue.receiver_id, freezer_issue.totalamount, freezer_issue.installamount,freezer_issue.freezer_sno, freezer_detaills.companyname, freezer_detaills.freezer_type FROM branchdata INNER JOIN branchroutesubtable ON branchdata.sno = branchroutesubtable.BranchID INNER JOIN branchroutes ON branchroutesubtable.RefNo = branchroutes.Sno INNER JOIN branchaccounts ON branchdata.sno = branchaccounts.BranchId LEFT OUTER JOIN freezer_issue ON branchdata.sno = freezer_issue.receiver_id LEFT OUTER JOIN freezer_detaills ON freezer_issue.freezer_sno = freezer_detaills.sno WHERE  (branchdata.sno = @bid)");
            cmd.Parameters.AddWithValue("@bid", Branchid);
            DataTable dtagentdetails = vdbmngr.SelectQuery(cmd).Tables[0];
            cmd = new MySqlCommand("SELECT BranchId, Inv_Sno, Qty, Sno, EmpId, lostQty FROM inventory_monitor WHERE (BranchId = @bid)");
            cmd.Parameters.AddWithValue("@bid", Branchid);
            DataTable dtagentinventory = vdbmngr.SelectQuery(cmd).Tables[0];
            cmd = new MySqlCommand("SELECT productsdata.UnitPrice, branchproducts.Rank, productsdata.ProductName, productsdata.Units, productsdata.Qty, branchproducts.unitprice AS BUnitPrice,branchproducts_1.unitprice AS Aunitprice, productsdata.sno FROM branchproducts INNER JOIN branchmappingtable ON branchproducts.branch_sno = branchmappingtable.SuperBranch INNER JOIN productsdata ON branchproducts.product_sno = productsdata.sno INNER JOIN branchproducts branchproducts_1 ON branchmappingtable.SubBranch = branchproducts_1.branch_sno AND productsdata.sno = branchproducts_1.product_sno WHERE (branchproducts_1.branch_sno = @bsno) AND (branchproducts_1.flag = @flag) GROUP BY branchproducts_1.branch_sno, branchproducts_1.unitprice, productsdata.sno, branchproducts_1.flag ORDER BY branchproducts.Rank");
            cmd.Parameters.AddWithValue("@flag", 1);
            cmd.Parameters.AddWithValue("@bsno", Branchid);
            DataTable dtBranchproducts = vdbmngr.SelectQuery(cmd).Tables[0];
            cmd = new MySqlCommand("SELECT  FromDate, Todate, StructureName,  leakagepercent,TotalDiscount, Remarks FROM incentivetransactions WHERE (BranchId = @BranchID) ORDER BY sno DESC LIMIT 1");
            cmd.Parameters.AddWithValue("@BranchID", Branchid);
            DataTable dtincentiveamt = vdbmngr.SelectQuery(cmd).Tables[0];
            List<BranchDetails> BranchDetailslist = new List<BranchDetails>();
            List<AgentSale> AgentSalelist = new List<AgentSale>();
            List<AgentMonthlySaleDetails> AgentMonthlySaleDetailslist = new List<AgentMonthlySaleDetails>();
            List<AgentInentive> AgentInentivelist = new List<AgentInentive>();
            float count = 0;
            if (dtincentiveamt.Rows.Count > 0)
            {
                fromdate = Convert.ToDateTime(dtincentiveamt.Rows[0]["FromDate"].ToString());
                tdate = Convert.ToDateTime(dtincentiveamt.Rows[0]["Todate"].ToString());
                cmd = new MySqlCommand("SELECT ROUND(SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost), 2) AS Totalsalevalue, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty,products_category.Categoryname, productsdata.ProductName, productsdata.sno AS prodid  FROM productsdata INNER JOIN indents_subtable ON productsdata.sno = indents_subtable.Product_sno INNER JOIN indents ON indents_subtable.IndentNo = indents.IndentNo INNER JOIN branchdata ON indents.Branch_id = branchdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno WHERE (indents.I_date BETWEEN @d1 AND @d2) AND (branchdata.sno = @BranchID) GROUP BY productsdata.sno");
                cmd.Parameters.AddWithValue("@BranchID", Branchid);
                cmd.Parameters.AddWithValue("@d1", GetLowDate(fromdate.AddDays(-1)));
                cmd.Parameters.AddWithValue("@d2", GetHighDate(tdate.AddDays(-1)));
                dtAgent = vdbmngr.SelectQuery(cmd).Tables[0];
                count = (float)(tdate - fromdate.AddDays(-1)).TotalDays;
            }
            BranchDetails obj1 = new BranchDetails();
            foreach (DataRow dr in dtagentdetails.Rows)
            {
                obj1.BranchName = dr["BranchName"].ToString();
                obj1.phone = dr["phonenumber"].ToString();
                obj1.address = dr["Address"].ToString();
                obj1.sno = dr["sno"].ToString();
                obj1.lat = dr["lat"].ToString();
                obj1.lng = dr["lng"].ToString();
                obj1.Lat_Lng = dr["lat"].ToString() + "," + dr["lng"].ToString();
                obj1.RouteName = dr["RouteName"].ToString();
                obj1.Salesrep = dr["SalesRepresentative"].ToString();
                obj1.CompanyName = dr["companyname"].ToString();
                obj1.freezer_type = dr["freezer_type"].ToString();
                obj1.TotalAmount = dr["totalamount"].ToString();
                obj1.InstallAmount = dr["installamount"].ToString();
                if (dr["Due_Limit_Type"].ToString() == "")
                {
                    obj1.DueLimit = "Rs  " + "0";
                }
                if (dr["Due_Limit_Type"].ToString() == "Amount")
                {
                    if (dr["DueLimit"].ToString() == "")
                    {
                        obj1.DueLimit = "Rs  " + "0";
                    }
                    if (dr["DueLimit"].ToString() != "")
                    {
                        obj1.DueLimit = "Rs  " + dr["DueLimit"].ToString();
                    }
                }
                if (dr["Due_Limit_Type"].ToString() == "Days")
                {
                    if (dr["Due_Limit_Days"].ToString() == "")
                    {
                        obj1.DueLimit = "0" + "  Days";
                    }
                    if (dr["Due_Limit_Days"].ToString() != "")
                    {
                        obj1.DueLimit = dr["Due_Limit_Days"].ToString() + "  Days";
                    }
                }

                obj1.CreateDate = dr["DateOfEntry"].ToString();
                obj1.BalAmount = dr["Amount"].ToString();
            }
            if (dtagentinventory.Rows.Count > 0)
            {
                int crates = 0;
                int cans = 0;
                foreach (DataRow dr in dtagentinventory.Rows)
                {

                    int tot = 0;
                    if (dr["Inv_Sno"].ToString() == "1")
                    {
                        int.TryParse(dr["Qty"].ToString(), out crates);
                    }
                    if (dr["Inv_Sno"].ToString() == "2")
                    {
                        int.TryParse(dr["Qty"].ToString(), out tot);
                    }
                    if (dr["Inv_Sno"].ToString() == "3")
                    {
                        int.TryParse(dr["Qty"].ToString(), out tot);
                    }
                    if (dr["Inv_Sno"].ToString() == "4")
                    {
                        int.TryParse(dr["Qty"].ToString(), out tot);
                    }
                    if (dr["Inv_Sno"].ToString() == "5")
                    {
                        int.TryParse(dr["Qty"].ToString(), out tot);
                    }
                    cans += tot;
                }
                obj1.CansDue = cans.ToString();
                obj1.CratesDue = crates.ToString();
            }
            if (dtagentinventory.Rows.Count <= 0)
            {
                obj1.CansDue = "0";
                obj1.CratesDue = "0";
            }
            BranchDetailslist.Add(obj1);
            Report = new DataTable();
            Report.Columns.Add("PRODUCT NAME");
            Report.Columns.Add("RATE");
            foreach (DataRow drbp in dtBranchproducts.Rows)
            {
                DataRow newrow = Report.NewRow();
                newrow["PRODUCT NAME"] = drbp["ProductName"].ToString();
                if (drbp["Aunitprice"].ToString() == "0")
                {
                    if (drbp["BUnitPrice"].ToString() == "0")
                    {
                        if (drbp["UnitPrice"].ToString() == "0")
                        {
                            newrow["RATE"] = "0";
                        }
                        else
                        {
                            newrow["RATE"] = drbp["UnitPrice"].ToString();
                        }
                    }
                    else
                    {
                        newrow["RATE"] = drbp["BUnitPrice"].ToString();
                    }
                }
                else
                {
                    newrow["RATE"] = drbp["Aunitprice"].ToString();
                }
                Report.Rows.Add(newrow);
            }
            foreach (DataRow drr in Report.Rows)
            {
                AgentSale obj2 = new AgentSale();
                obj2.ProductName = drr["PRODUCT NAME"].ToString();
                obj2.rate = drr["RATE"].ToString();
                AgentSalelist.Add(obj2);
            }
            foreach (DataRow drincentive in dtincentiveamt.Rows)
            {
                AgentInentive obj3 = new AgentInentive();
                obj3.StructureName = drincentive["StructureName"].ToString();
                obj3.leakagepercent = drincentive["leakagepercent"].ToString();
                obj3.TotalDiscount = drincentive["TotalDiscount"].ToString();
                obj3.Remarks = drincentive["Remarks"].ToString();
                obj3.FromDate = drincentive["FromDate"].ToString();
                obj3.Todate = drincentive["Todate"].ToString();
                AgentInentivelist.Add(obj3);
            }
            AgentMonthlySaleDetails obj = new AgentMonthlySaleDetails();
            obj.BranchDetails = BranchDetailslist;
            obj.AgentSale = AgentSalelist;
            obj.AgentInentive = AgentInentivelist;

            AgentMonthlySaleDetailslist.Add(obj);
            string response = GetJson(AgentMonthlySaleDetailslist);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }
    private void get_Agent_Monthlsale_Line(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            string Branchid = context.Request["agentid"];
            string frmdate = context.Request["fromdate"];
            DateTime fromdate = Convert.ToDateTime(frmdate);
            string todate = context.Request["todate"];
            DateTime tdate = Convert.ToDateTime(todate);
            DateTime firstmonth = new DateTime();
            DateTime lastmonth = new DateTime();
            DateTime Todate = Convert.ToDateTime(todate);
            DataTable Report = new DataTable();
            Report.Columns.Add("Date");
            Report.Columns.Add("SaleValue");
            TimeSpan datespan = Todate.Subtract(fromdate);
            int NoOfdays = datespan.Days;
            if (NoOfdays > 31)
            {
                tdate = tdate.AddMonths(1);
                TimeSpan dateSpan = tdate.Subtract(fromdate);
                int years = (dateSpan.Days / 365);
                int months = ((dateSpan.Days % 365) / 31) + (years * 12);
                for (int j = 0; j < months; j++)
                {
                    firstmonth = GetLowMonthRetrive(fromdate.AddMonths(j));
                    lastmonth = GetHighMonth(firstmonth);
                    cmd = new MySqlCommand("SELECT  indents.I_date, indents.Branch_id, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty, SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost) AS salevalue FROM indents INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo WHERE (indents.I_date BETWEEN @d1 AND @d2) AND (indents.Branch_id = @branchid)");
                    DateTime dtFrom = firstmonth.AddDays(-1);
                    cmd.Parameters.AddWithValue("@d1", dtFrom);
                    cmd.Parameters.AddWithValue("@d2", lastmonth);
                    cmd.Parameters.AddWithValue("@branchid", Branchid);
                    DataTable dtAgent = vdbmngr.SelectQuery(cmd).Tables[0];
                    string ChangedTime1 = firstmonth.ToString("MMM/yy");
                    string Changedt = firstmonth.ToString("MMM");
                    DataTable routes = vdbmngr.SelectQuery(cmd).Tables[0];
                    foreach (DataRow dr in routes.Rows)
                    {
                        DataRow newrow = Report.NewRow();
                        double deliverqty = 0;
                        double.TryParse(dr["DeliveryQty"].ToString(), out deliverqty);
                        newrow["Date"] = ChangedTime1;
                        newrow["SaleValue"] = Math.Round(deliverqty, 2);
                        Report.Rows.Add(newrow);
                    }
                }
            }
            else
            {
                cmd = new MySqlCommand("SELECT  indents.I_date, indents.Branch_id, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty, SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost) AS salevalue FROM indents INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo WHERE (indents.I_date BETWEEN @d1 AND @d2) AND (indents.Branch_id = @branchid) GROUP BY indents.I_date");
                cmd.Parameters.AddWithValue("@d1", fromdate.AddDays(-1));
                cmd.Parameters.AddWithValue("@d2", tdate.AddDays(-1));
                cmd.Parameters.AddWithValue("@branchid", Branchid);
                DataTable dtAgent = vdbmngr.SelectQuery(cmd).Tables[0];
                string ChangedTime1 = fromdate.ToString("dd/MMM");
                string Changedt = fromdate.ToString("MMM");
                DataTable routes = vdbmngr.SelectQuery(cmd).Tables[0];
                foreach (DataRow dr in routes.Rows)
                {
                    DataRow newrow = Report.NewRow();
                    double deliverqty = 0;
                    double.TryParse(dr["DeliveryQty"].ToString(), out deliverqty);
                    string date = dr["I_date"].ToString();
                    DateTime i_date = Convert.ToDateTime(date);
                    newrow["Date"] = i_date.ToString("dd/MMM/yy");
                    newrow["SaleValue"] = Math.Round(deliverqty, 2);
                    Report.Rows.Add(newrow);
                }
            }
            string mon1 = ""; string Res = "";
            string Bran = ""; string bran1 = ""; string Res1 = "";
            string val1 = ""; string Res2 = "";
            List<AgentSale> AgentSalelst = new List<AgentSale>();
            List<AgentMonthlySale> AgentMonthlySalelst = new List<AgentMonthlySale>();
            List<AgentMonthlySaleDetails> AgentMonthlySaleDetailslst = new List<AgentMonthlySaleDetails>();
            foreach (DataRow drr in Report.Rows)
            {
                mon1 = drr["Date"].ToString();
                val1 = drr["SaleValue"].ToString();
                Res += mon1 + ",";
                Res2 += val1 + ",";
                if (Bran == bran1)
                {
                }
                else
                {
                    Res1 += "Qty" + ",";
                }
            }
            AgentSale obj1 = new AgentSale();
            obj1.Month = Res.ToString();
            obj1.salevalue = Res2.Substring(0, Res2.Length - 1);
            if (Res1 != "")
            {
                obj1.str = Res1.Substring(0, Res1.Length - 1);
            }
            else
            {
                Res1 += "Qty";
                obj1.str = Res1;
            }
            AgentSalelst.Add(obj1);
            foreach (DataRow drr1 in Report.Rows)
            {
                AgentMonthlySale obj2 = new AgentMonthlySale();
                obj2.Month = drr1["Date"].ToString();
                obj2.salevalue = drr1["SaleValue"].ToString();
                AgentMonthlySalelst.Add(obj2);
            }

            AgentMonthlySaleDetails obj = new AgentMonthlySaleDetails();
            obj.AgentMonthlySale = AgentMonthlySalelst;
            obj.AgentSale = AgentSalelst;
            AgentMonthlySaleDetailslst.Add(obj);
            string response = GetJson(AgentMonthlySaleDetailslst);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }
    private void get_Product(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            List<AgentSale> productlist = new List<AgentSale>();
            AgentSale obj = new AgentSale();
            context.Session["productid"] = context.Request["productid"].ToString();
            context.Session["ProductName"] = context.Request["productname"].ToString();
            obj.ProductName = context.Request["productname"].ToString();
            productlist.Add(obj);
            string response = GetJson(productlist);
            context.Response.Write(response);
        }
        catch
        {
        }
    }
    private void get_Product_Monthly_Sale_Pie(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            string Productid = context.Request["productid"];
            string frmdate = context.Request["fromdate"];
            DateTime fromdate = Convert.ToDateTime(frmdate);
            string todate = context.Request["todate"];
            DateTime tdate = Convert.ToDateTime(todate);
            DataTable Report = new DataTable();
            Report.Columns.Add("Branchid");
            Report.Columns.Add("BranchName");
            Report.Columns.Add("SaleValue");
            Report.Columns.Add("DelivaryQty");
            DateTime Todate = Convert.ToDateTime(todate);
            TimeSpan datespan = Todate.Subtract(fromdate);
            int NoOfdays = datespan.Days;
            if (context.Session["salestype"].ToString() == "Plant")
            {
                cmd = new MySqlCommand("SELECT   branchmappingtable.SubBranch, branchmappingtable.SuperBranch, branchmappingtable_1.SubBranch AS Expr1, branchdata.BranchName FROM branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch INNER JOIN branchdata ON branchmappingtable_1.SubBranch = branchdata.sno WHERE (branchmappingtable.SuperBranch = @Branchid) AND (branchdata.flag <> 0) GROUP BY branchmappingtable.SubBranch, branchmappingtable.SuperBranch, branchmappingtable_1.SubBranch, branchdata.BranchName");
                cmd.Parameters.AddWithValue("@Branchid", context.Session["branch"]);
                DataTable dtbranches = vdbmngr.SelectQuery(cmd).Tables[0];
                cmd = new MySqlCommand("SELECT  SubBranch, ROUND(SUM(DeliveryQty), 2) AS DeliveryQty, ROUND(SUM(DeliveryQty * UnitCost), 2) AS salevalue, I_date FROM (SELECT t1.SubBranch, t1.SuperBranch, t2.DeliveryQty, t2.unitQty, t2.UnitCost, t2.I_date FROM  (SELECT branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch FROM branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch WHERE (branchmappingtable_1.SuperBranch = @Branchid) GROUP BY branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch) t1 LEFT OUTER JOIN (SELECT indents_subtable.DeliveryQty, indents_subtable.unitQty, indents_subtable.UnitCost, branchmappingtable_2.SuperBranch,branchmappingtable_2.SubBranch, ind.I_date FROM branchmappingtable branchmappingtable_2 INNER JOIN (SELECT IndentNo, Branch_id, I_date FROM indents WHERE (I_date BETWEEN @d1 AND @d2)) ind ON branchmappingtable_2.SubBranch = ind.Branch_id INNER JOIN indents_subtable ON ind.IndentNo = indents_subtable.IndentNo WHERE (indents_subtable.Product_sno = @productsno) GROUP BY ind.I_date) t2 ON t2.SuperBranch = t1.SubBranch) derivedtbl_1 GROUP BY SubBranch");
                cmd.Parameters.AddWithValue("@d1", fromdate);
                cmd.Parameters.AddWithValue("@d2", tdate);
                cmd.Parameters.AddWithValue("@productsno", Productid);
                cmd.Parameters.AddWithValue("@Branchid", context.Session["branch"]);
                DataTable routes = vdbmngr.SelectQuery(cmd).Tables[0];
                foreach (DataRow dr in routes.Rows)
                {
                    DataRow newrow = Report.NewRow();
                    double deliverqty = 0;
                    double.TryParse(dr["DeliveryQty"].ToString(), out deliverqty);
                    double salevalue = 0;
                    double.TryParse(dr["salevalue"].ToString(), out salevalue);
                    string date = dr["I_date"].ToString();
                    if (date != "")
                    {
                        foreach (DataRow drr in dtbranches.Select("SubBranch='" + dr["SubBranch"].ToString() + "'"))
                        {
                            newrow["Branchid"] = dr["SubBranch"].ToString();
                            newrow["BranchName"] = drr["BranchName"].ToString();
                            newrow["DelivaryQty"] = Math.Round(deliverqty, 2);
                            newrow["SaleValue"] = Math.Round(salevalue, 2);
                            Report.Rows.Add(newrow);
                        }
                    }
                    else
                    {
                    }
                }
            }
            else
            {
                cmd = new MySqlCommand("SELECT  modifiedroutes.Sno, modifiedroutes.RouteName, indents_subtable.Product_sno, productsdata.ProductName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty,ROUND(SUM(DeliveryQty * UnitCost), 2) AS salevalue FROM modifiedroutes INNER JOIN modifiedroutesubtable ON modifiedroutes.Sno = modifiedroutesubtable.RefNo INNER JOIN branchdata ON modifiedroutesubtable.BranchID = branchdata.sno INNER JOIN (SELECT IndentNo, Branch_id, I_date FROM indents WHERE (I_date BETWEEN @d1 AND @d2)) indent ON branchdata.sno = indent.Branch_id INNER JOIN indents_subtable ON indent.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno INNER JOIN tripdata ON indents_subtable.DTripId = tripdata.Sno WHERE (modifiedroutes.BranchID = @BranchID) AND (modifiedroutesubtable.EDate IS NULL) AND (branchdata.CollectionType <> 'DUE') AND (modifiedroutesubtable.CDate <= @d1) AND (indents_subtable.Product_sno = @productsno) OR (modifiedroutes.BranchID = @BranchID) AND (modifiedroutesubtable.EDate > @d1) AND (branchdata.CollectionType <> 'DUE') AND (modifiedroutesubtable.CDate <= @d1) AND (indents_subtable.Product_sno = @ProductSno) GROUP BY modifiedroutes.Sno, productsdata.sno");
                cmd.Parameters.AddWithValue("@d1", fromdate);
                cmd.Parameters.AddWithValue("@d2", tdate);
                cmd.Parameters.AddWithValue("@productsno", Productid);
                cmd.Parameters.AddWithValue("@BranchID", context.Session["branch"]);
                DataTable routes = vdbmngr.SelectQuery(cmd).Tables[0];
                foreach (DataRow dr in routes.Rows)
                {
                    DataRow newrow = Report.NewRow();
                    double deliverqty = 0;
                    double.TryParse(dr["DeliveryQty"].ToString(), out deliverqty);
                    double salevalue = 0;
                    double.TryParse(dr["salevalue"].ToString(), out salevalue);
                    newrow["BranchName"] = dr["RouteName"].ToString();
                    newrow["DelivaryQty"] = Math.Round(deliverqty, 2);
                    newrow["SaleValue"] = Math.Round(salevalue, 2);
                    Report.Rows.Add(newrow);
                }
            }
            List<ProductMonthlySale> ProductMonthlySalelst = new List<ProductMonthlySale>();
            foreach (DataRow drr in Report.Rows)
            {
                ProductMonthlySale obj2 = new ProductMonthlySale();
                obj2.Branchid = drr["Branchid"].ToString();
                obj2.BranchName = drr["BranchName"].ToString();
                obj2.DelivaryQty = drr["DelivaryQty"].ToString();
                obj2.salevalue = drr["SaleValue"].ToString();
                ProductMonthlySalelst.Add(obj2);
            }
            string response = GetJson(ProductMonthlySalelst);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }
    private void get_Product_Routewise_Data(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            string Productid = context.Request["productid"];
            string Branchid = context.Request["Branchid"];
            string frmdate = context.Request["fromdate"];
            DateTime fromdate = Convert.ToDateTime(frmdate);
            string todate = context.Request["todate"];
            DateTime tdate = Convert.ToDateTime(todate);
            DataTable Report = new DataTable();
            Report.Columns.Add("Branchid");
            Report.Columns.Add("BranchName");
            Report.Columns.Add("SaleValue");
            Report.Columns.Add("DelivaryQty");

            DateTime Todate = Convert.ToDateTime(todate);
            TimeSpan datespan = Todate.Subtract(fromdate);
            int NoOfdays = datespan.Days;
            cmd = new MySqlCommand("SELECT modifiedroutes.Sno, modifiedroutes.RouteName, indents_subtable.Product_sno, productsdata.ProductName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty, ROUND(SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost), 2) AS salevalue FROM modifiedroutes INNER JOIN modifiedroutesubtable ON modifiedroutes.Sno = modifiedroutesubtable.RefNo INNER JOIN branchdata ON modifiedroutesubtable.BranchID = branchdata.sno INNER JOIN (SELECT IndentNo, Branch_id, I_date FROM indents WHERE (I_date BETWEEN @d1 AND @d2)) indent ON branchdata.sno = indent.Branch_id INNER JOIN indents_subtable ON indent.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno INNER JOIN tripdata ON indents_subtable.DTripId = tripdata.Sno WHERE (modifiedroutes.BranchID = @BranchID) AND (modifiedroutesubtable.EDate IS NULL)  AND  (modifiedroutesubtable.CDate <= @d1) AND (indents_subtable.Product_sno = @productsno) OR (modifiedroutes.BranchID = @BranchID) AND (modifiedroutesubtable.EDate > @d1)  AND  (modifiedroutesubtable.CDate <= @d1) AND (indents_subtable.Product_sno = @ProductSno) GROUP BY modifiedroutes.Sno, productsdata.sno");
            cmd.Parameters.AddWithValue("@d1", fromdate);
            cmd.Parameters.AddWithValue("@d2", tdate);
            cmd.Parameters.AddWithValue("@productsno", Productid);
            cmd.Parameters.AddWithValue("@BranchID", Branchid);
            DataTable routes = vdbmngr.SelectQuery(cmd).Tables[0];
            foreach (DataRow dr in routes.Rows)
            {
                DataRow newrow = Report.NewRow();
                double deliverqty = 0;
                double.TryParse(dr["DeliveryQty"].ToString(), out deliverqty);
                double salevalue = 0;
                double.TryParse(dr["salevalue"].ToString(), out salevalue);
                newrow["BranchName"] = dr["RouteName"].ToString();
                newrow["DelivaryQty"] = Math.Round(deliverqty, 2);
                newrow["SaleValue"] = Math.Round(salevalue, 2);

                Report.Rows.Add(newrow);
            }
            List<ProductMonthlySale> ProductMonthlySalelst = new List<ProductMonthlySale>();
            foreach (DataRow drr in Report.Rows)
            {
                ProductMonthlySale obj2 = new ProductMonthlySale();
                obj2.Branchid = drr["Branchid"].ToString();
                obj2.BranchName = drr["BranchName"].ToString();
                obj2.DelivaryQty = drr["DelivaryQty"].ToString();
                obj2.salevalue = drr["SaleValue"].ToString();

                ProductMonthlySalelst.Add(obj2);
            }
            string response = GetJson(ProductMonthlySalelst);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }
    private void get_Product_Monthly_Sale(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            string Productid = context.Request["productid"];
            string frmdate = context.Request["fromdate"];
            DateTime fromdate = Convert.ToDateTime(frmdate);
            string todate = context.Request["todate"];
            DateTime tdate = Convert.ToDateTime(todate);
            DateTime firstmonth = new DateTime();
            DateTime lastmonth = new DateTime();
            DataTable Report = new DataTable();
            Report.Columns.Add("Date");
            Report.Columns.Add("SaleValue");
            Report.Columns.Add("DelivaryQty");
            DateTime Todate = Convert.ToDateTime(todate);
            TimeSpan datespan = Todate.Subtract(fromdate);
            int NoOfdays = datespan.Days;
            if (context.Session["salestype"].ToString() == "Plant")
            {
                cmd = new MySqlCommand("SELECT   branchmappingtable.SubBranch, branchmappingtable.SuperBranch, branchmappingtable_1.SubBranch AS Expr1, branchdata.BranchName FROM branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch INNER JOIN branchdata ON branchmappingtable_1.SubBranch = branchdata.sno WHERE (branchmappingtable.SuperBranch = @Branchid) AND (branchdata.flag <> 0) GROUP BY branchmappingtable.SubBranch, branchmappingtable.SuperBranch, branchmappingtable_1.SubBranch, branchdata.BranchName");
                cmd.Parameters.AddWithValue("@Branchid", context.Session["branch"]);
                DataTable dtbranches = vdbmngr.SelectQuery(cmd).Tables[0];
                if (NoOfdays > 31)
                {
                    tdate = tdate.AddMonths(1);
                    TimeSpan dateSpan = tdate.Subtract(fromdate);
                    int years = (dateSpan.Days / 365);
                    int months = ((dateSpan.Days % 365) / 31) + (years * 12);
                    for (int j = 0; j < months; j++)
                    {
                        DateTime now = DateTime.Now;
                        string s = now.DayOfWeek.ToString();
                        firstmonth = GetLowMonthRetrive(fromdate.AddMonths(j));
                        lastmonth = GetHighMonth(firstmonth);
                        cmd = new MySqlCommand("SELECT   SubBranch, ROUND(SUM(DeliveryQty), 2) AS DeliveryQty, ROUND(SUM(DeliveryQty * UnitCost), 2) AS salevalue, I_date, SuperBranch FROM (SELECT t1.SubBranch, t1.SuperBranch, t2.DeliveryQty, t2.unitQty, t2.UnitCost, t2.I_date FROM (SELECT branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch FROM branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch WHERE (branchmappingtable_1.SuperBranch = @Branchid) GROUP BY branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch) t1 LEFT OUTER JOIN (SELECT indents_subtable.DeliveryQty, indents_subtable.unitQty, indents_subtable.UnitCost, branchmappingtable_2.SuperBranch, branchmappingtable_2.SubBranch, ind.I_date FROM branchmappingtable branchmappingtable_2 INNER JOIN (SELECT IndentNo, Branch_id, I_date FROM indents WHERE (I_date BETWEEN @d1 AND @d2)) ind ON branchmappingtable_2.SubBranch = ind.Branch_id INNER JOIN indents_subtable ON ind.IndentNo = indents_subtable.IndentNo WHERE (indents_subtable.Product_sno = @productsno) GROUP BY ind.I_date) t2 ON t2.SuperBranch = t1.SubBranch) derivedtbl_1 GROUP BY SuperBranch");
                        DateTime dtFrom = firstmonth.AddDays(-1);
                        cmd.Parameters.AddWithValue("@d1", dtFrom);
                        cmd.Parameters.AddWithValue("@d2", lastmonth);
                        cmd.Parameters.AddWithValue("@productsno", Productid);
                        cmd.Parameters.AddWithValue("@Branchid", context.Session["branch"]);
                        string ChangedTime1 = firstmonth.ToString("MMM/yy");
                        string Changedt = firstmonth.ToString("MMM");
                        DataTable routes = vdbmngr.SelectQuery(cmd).Tables[0];
                        foreach (DataRow dr in routes.Rows)
                        {
                            DataRow newrow = Report.NewRow();
                            double deliverqty = 0;
                            double.TryParse(dr["DeliveryQty"].ToString(), out deliverqty);
                            double salevalue = 0;
                            double.TryParse(dr["salevalue"].ToString(), out salevalue);
                            newrow["Date"] = ChangedTime1;
                            newrow["SaleValue"] = Math.Round(salevalue, 2);
                            newrow["DelivaryQty"] = Math.Round(deliverqty, 2);
                            Report.Rows.Add(newrow);
                        }
                    }
                }
                else
                {
                    cmd = new MySqlCommand("SELECT  SubBranch, ROUND(SUM(DeliveryQty), 2) AS DeliveryQty, ROUND(SUM(DeliveryQty * UnitCost), 2) AS salevalue, I_date, SuperBranch FROM (SELECT t1.SubBranch, t1.SuperBranch, t2.DeliveryQty, t2.unitQty, t2.UnitCost, t2.I_date FROM  (SELECT branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch FROM branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch WHERE (branchmappingtable_1.SuperBranch = @Branchid) GROUP BY branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch) t1 LEFT OUTER JOIN (SELECT indents_subtable.DeliveryQty, indents_subtable.unitQty, indents_subtable.UnitCost, branchmappingtable_2.SuperBranch, branchmappingtable_2.SubBranch, ind.I_date FROM  branchmappingtable branchmappingtable_2 INNER JOIN (SELECT IndentNo, Branch_id, I_date FROM indents WHERE (I_date BETWEEN @d1 AND @d2)) ind ON branchmappingtable_2.SubBranch = ind.Branch_id INNER JOIN indents_subtable ON ind.IndentNo = indents_subtable.IndentNo WHERE (indents_subtable.Product_sno = @ProductSno) GROUP BY ind.I_date) t2 ON t2.SuperBranch = t1.SubBranch) derivedtbl_1 GROUP BY SuperBranch, DATE_FORMAT(I_date, '%Y%m%d')");
                    cmd.Parameters.AddWithValue("@d1", fromdate.AddDays(-1));
                    cmd.Parameters.AddWithValue("@d2", tdate);
                    cmd.Parameters.AddWithValue("@ProductSno", Productid);
                    cmd.Parameters.AddWithValue("@Branchid", context.Session["branch"]);
                    DataTable routes = vdbmngr.SelectQuery(cmd).Tables[0];
                    foreach (DataRow dr in routes.Rows)
                    {
                        DataRow newrow = Report.NewRow();
                        double deliverqty = 0;
                        double.TryParse(dr["DeliveryQty"].ToString(), out deliverqty);
                        double salevalue = 0;
                        double.TryParse(dr["salevalue"].ToString(), out salevalue);
                        string date = dr["I_date"].ToString();
                        if (date != "")
                        {
                            DateTime i_date = Convert.ToDateTime(date);
                            newrow["Date"] = i_date.ToString("dd/MMM/yy");
                            newrow["SaleValue"] = Math.Round(salevalue, 2);
                            newrow["DelivaryQty"] = Math.Round(deliverqty, 2);
                            Report.Rows.Add(newrow);
                        }
                        else
                        {
                        }
                    }
                }
            }
            else
            {
                if (NoOfdays > 31)
                {
                    tdate = tdate.AddMonths(1);
                    TimeSpan dateSpan = tdate.Subtract(fromdate);
                    int years = (dateSpan.Days / 365);
                    int months = ((dateSpan.Days % 365) / 31) + (years * 12);
                    for (int j = 0; j < months; j++)
                    {
                        DateTime now = DateTime.Now;
                        string s = now.DayOfWeek.ToString();
                        firstmonth = GetLowMonthRetrive(fromdate.AddMonths(j));
                        lastmonth = GetHighMonth(firstmonth);
                        cmd = new MySqlCommand("SELECT ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty, SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost) AS salevalue, indents_subtable.Product_sno FROM   branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch INNER JOIN branchmappingtable branchmappingtable_2 ON branchmappingtable_1.SubBranch = branchmappingtable_2.SubBranch INNER JOIN indents ON branchmappingtable_2.SubBranch = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo WHERE  (branchmappingtable.SuperBranch = @Branchid) AND (indents.I_date BETWEEN @d1 AND @d2) AND (indents_subtable.Product_sno = @ProductSno)");
                        DateTime dtFrom = firstmonth.AddDays(-1);
                        cmd.Parameters.AddWithValue("@d1", dtFrom);
                        cmd.Parameters.AddWithValue("@d2", lastmonth);
                        cmd.Parameters.AddWithValue("@productsno", Productid);
                        cmd.Parameters.AddWithValue("@Branchid", context.Session["branch"]);
                        string ChangedTime1 = firstmonth.ToString("MMM/yy");
                        string Changedt = firstmonth.ToString("MMM");
                        DataTable routes = vdbmngr.SelectQuery(cmd).Tables[0];
                        foreach (DataRow dr in routes.Rows)
                        {
                            DataRow newrow = Report.NewRow();
                            double deliverqty = 0;
                            double.TryParse(dr["DeliveryQty"].ToString(), out deliverqty);
                            double salevalue = 0;
                            double.TryParse(dr["salevalue"].ToString(), out salevalue);
                            newrow["Date"] = ChangedTime1;
                            newrow["SaleValue"] = Math.Round(salevalue, 2);
                            newrow["DelivaryQty"] = Math.Round(deliverqty, 2);
                            Report.Rows.Add(newrow);
                        }
                    }
                }
                else
                {

                    cmd = new MySqlCommand("SELECT  ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty, SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost) AS salevalue, indents.I_date, indents_subtable.Product_sno FROM   branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch INNER JOIN branchmappingtable branchmappingtable_2 ON branchmappingtable_1.SubBranch = branchmappingtable_2.SubBranch INNER JOIN indents ON branchmappingtable_2.SubBranch = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo WHERE  (branchmappingtable.SuperBranch = @Branchid) AND (indents.I_date BETWEEN @d1 AND @d2) AND (indents_subtable.Product_sno = @ProductSno) GROUP BY  DATE(indents.I_date)");
                    cmd.Parameters.AddWithValue("@d1", fromdate.AddDays(-1));
                    cmd.Parameters.AddWithValue("@d2", tdate);
                    cmd.Parameters.AddWithValue("@ProductSno", Productid);
                    cmd.Parameters.AddWithValue("@Branchid", context.Session["branch"]);
                    string ChangedTime1 = fromdate.ToString("dd/MMM");
                    string Changedt = fromdate.ToString("MMM");
                    DataTable routes = vdbmngr.SelectQuery(cmd).Tables[0];
                    foreach (DataRow dr in routes.Rows)
                    {
                        DataRow newrow = Report.NewRow();
                        double deliverqty = 0;
                        double.TryParse(dr["DeliveryQty"].ToString(), out deliverqty);
                        double salevalue = 0;
                        double.TryParse(dr["salevalue"].ToString(), out salevalue);
                        string date = dr["I_date"].ToString();
                        DateTime i_date = Convert.ToDateTime(date);
                        newrow["Date"] = i_date.ToString("dd/MMM/yy");
                        newrow["SaleValue"] = Math.Round(salevalue, 2);
                        newrow["DelivaryQty"] = Math.Round(deliverqty, 2);
                        Report.Rows.Add(newrow);
                    }
                }
            }
            string mon1 = ""; string Res = "";
            string Bran = ""; string bran1 = ""; string Res1 = "";
            string val1 = ""; string Res2 = "";
            List<ProductSale> ProductSalelst = new List<ProductSale>();
            List<ProductMonthlySale> ProductMonthlySalelst = new List<ProductMonthlySale>();
            List<ProductMonthlySaleDetails> ProductMonthlySaleDetailslst = new List<ProductMonthlySaleDetails>();
            foreach (DataRow drr in Report.Rows)
            {
                mon1 = drr["Date"].ToString();
                //bran1 = drr["name"].ToString();
                val1 = drr["SaleValue"].ToString();
                Res += mon1 + ",";
                Res2 += val1 + ",";
                if (Bran == bran1)
                {
                }
                else
                {
                    Res1 += "Amount" + ",";
                    //Bran = bran1;
                }
            }
            ProductSale obj1 = new ProductSale();
            obj1.Month = Res.ToString();
            obj1.salevalue = Res2.Substring(0, Res2.Length - 1);
            if (Res1 != "")
            {
                obj1.str = Res1.Substring(0, Res1.Length - 1);
            }
            else
            {
                Res1 += "Amount";
                obj1.str = Res1;
            }
            ProductSalelst.Add(obj1);
            foreach (DataRow drr1 in Report.Rows)
            {
                ProductMonthlySale obj2 = new ProductMonthlySale();
                obj2.Month = drr1["Date"].ToString();
                obj2.salevalue = drr1["SaleValue"].ToString();
                obj2.DelivaryQty = drr1["DelivaryQty"].ToString();
                ProductMonthlySalelst.Add(obj2);
            }
            ProductMonthlySaleDetails obj = new ProductMonthlySaleDetails();
            obj.ProductMonthlySale = ProductMonthlySalelst;
            obj.ProductSale = ProductSalelst;
            ProductMonthlySaleDetailslst.Add(obj);
            string response = GetJson(ProductMonthlySaleDetailslst);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }
    public class getEmployeedetailscls
    {
        public string empsno { set; get; }
        public string empnum { set; get; }
        public string empname { set; get; }
        public string empnamecode { get; set; }
        public string joindate { set; get; }
        public string initials { set; get; }
        public string title { set; get; }
        public string birthdate { set; get; }
        public string gender { set; get; }
        public string maritalstatus { set; get; }
        public string spousename { set; get; }
        public string country { set; get; }
        public string idproof { set; get; }
        public string homeaddress { set; get; }
        public string presentaddress { set; get; }
        public string homephone { set; get; }
        public string cellphone { set; get; }
        public string email { set; get; }
        public string city { set; get; }
        public string designation { get; set; }
        public string state { set; get; }
        public string zipcode { set; get; }
        public string degree { set; get; }
        public string specification { set; get; }
        public string experience { set; get; }
        public string experiencedet { set; get; }
        public string emptype { set; get; }
        public string status { set; get; }
        public string photo { set; get; }
        public string password { set; get; }
        public string re_password { set; get; }
        public string username { set; get; }
        public string role { set; get; }
        public string pass_sno { set; get; }
        public string employeetype { set; get; }
        public string eld_sno { set; get; }
        public string dept_sno { set; get; }
        public string department { set; get; }
        public string departmentid { get; set; }
        public string ftplocation { set; get; }
        public string joingdays { set; get; }
        public string joingyears { set; get; }
        public string BirthDays { set; get; }
        public string Birth_Days { set; get; }
        public string spouse_details { set; get; }
        public string voter_id { set; get; }
        public string aadhaar_id { set; get; }
        public string aboutus { set; get; }
        public string institute { set; get; }
        public string university { set; get; }
        public string graders { set; get; }
        public string duration { set; get; }
        public string remarks { set; get; }
        public string bloodgroup { set; get; }
        public string pancard { set; get; }
        public string aadarenrollnumber { set; get; }
        public string nameasforaadhar { set; get; }
        public string conformdate { set; get; }
        public string physicalchalnge { set; get; }
        public string branchname { set; get; }
        public string statename { set; get; }
        public string salarymode { set; get; }
        public string age { set; get; }
        public string currentdate { set; get; }
        public string fathername { set; get; }
        public string marriagedate { set; get; }
        public string pfnumber { get; set; }
        public string estnumber { get; set; }
        public string currentlocationsince { get; set; }
        public string currentdesignationsince { get; set; }
        public string currentdepartmentsince { get; set; }
        public string currentemployeesince { get; set; }
        public string pfeligible { get; set; }
        public string esieligible { get; set; }
        public string branchid { set; get; }
        public string uannumber { set; get; }
        public string caste { set; get; }
        public string emergencynumber { set; get; }
        public string drivinglicense { set; get; }
        public string dateofvalidilty { set; get; }
        public string Department { get; set; }
        public string Deptid { get; set; }
        public string filter { get; set; }
        public string joingmonths { get; set; }
    }
    public class incentive
    {
        public string TotalLtrs { get; set; }
        public string productname { get; set; }
        public string indentdate { get; set; }
        public List<subincentive> subincentive { get; set; }
    }
    public class subincentive
    {
        public string ClubbingName { get; set; }
        public string TotalSale { get; set; }
        public string AverageSale { get; set; }
        public string DiscountSlot { get; set; }
        public string TotalAmount { get; set; }
        public string IncentiveGiven { get; set; }
        public string Remarks { get; set; }
        public string Date { get; set; }
    }
    public class getincentive
    {
        public List<subincentive> SubIsncentive { get; set; }
        public List<incentive> incentive { get; set; }
    }
    public class Invoice_Details
    {
        public string invoicenumber { get; set; }
        public string AmountPaid { get; set; }
        public string tripId { get; set; }
        public string Branchid { get; set; }
        public string Agetntid { get; set; }
        public string Routeid { get; set; }
        public string Remarks { get; set; }
        public string Date { get; set; }
        public string btnval { get; set; }
        public string BranchName { get; set; }
        public string AgentName { get; set; }
        public string RouteName { get; set; }
        public string totalamount { get; set; }
        public string sno { get; set; }
        public List<Invoice_Sub_Details> invoice_arr { get; set; }
    }
    public class Invoice_Sub_Details
    {
        public string amount { get; set; }
        public string invoiceno { get; set; }
        public string sno { get; set; }
        public string refno { get; set; }
    }
    private void Product_Image_files_upload(HttpContext context)
    {
        try
        {
            //if (context.Session["branch_id"] != null)
            //{
            if (context.Request.Files.Count > 0)
            {
                string sno = context.Request["sno"];
                HttpFileCollection files = context.Request.Files;
                for (int i = 0; i < files.Count; i++)
                {
                    HttpPostedFile file = files[i];
                    string[] extension = file.FileName.Split('.');
                    string upload_filename = sno + "_profilepic_" + sno + ".jpeg";// +extension[extension.Length - 1];
                    if (UploadToFTP(file, upload_filename))
                    {
                        MySqlCommand cmd = new MySqlCommand("update productsdata set images=@photos where sno=@sno");
                        cmd.Parameters.AddWithValue("@sno", sno);
                        cmd.Parameters.AddWithValue("@photos", upload_filename);
                        vdbmngr.Update(cmd);
                    }
                }
                context.Response.ContentType = "text/plain";
                context.Response.Write("File Uploaded Successfully!");
            }
            //}

        }
        catch (Exception ex)
        {
            string response = GetJson(ex.Message);
            context.Response.Write(response);
        }
    }
    float leakpercentage = 0.0f;
    double totmilkamt = 0;
    private void get_Agentwise_incentive_statements(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            double Totalmilksale = 0;
            double Totalbulkmilksale = 0;
            double Totalbulkmilksaleamount = 0;
            DataTable Report = new DataTable();
            string BranchID = context.Request["BranchID"];
            string Route_id = context.Request["Route_id"];
            string Agent_id = context.Request["Agent_id"];
            string frmdate = context.Request["fromdate"];
            DateTime fromdate = Convert.ToDateTime(frmdate);
            string tdate = context.Request["todate"];
            DateTime todate = Convert.ToDateTime(tdate);

            string From_date = fromdate.ToString("dd-MM-yyyy");
            string To_Date = todate.ToString("dd-MM-yyyy");
            string date = "" + From_date + "  TO  " + To_Date + "";
            cmd = new MySqlCommand("SELECT sno, FromDate, Todate, StructureName, BranchId, EntryDate, ActualDiscount, TotalDiscount, Remarks, structure_sno, leakagepercent, DueClear FROM incentivetransactions WHERE (FromDate BETWEEN @d1 AND @d2) AND (BranchId = @BranchId)");
            cmd.Parameters.AddWithValue("@branchid", Agent_id);
            cmd.Parameters.AddWithValue("@d1", GetLowDate(fromdate.AddDays(-1)));
            cmd.Parameters.AddWithValue("@d2", GetHighDate(todate.AddDays(-1)));
            DataTable dtstructuresno = vdbmngr.SelectQuery(cmd).Tables[0];
            string structuresno = dtstructuresno.Rows[0]["structure_sno"].ToString();
            string leakpercent = dtstructuresno.Rows[0]["leakagepercent"].ToString();
            string incentivegiven = dtstructuresno.Rows[0]["TotalDiscount"].ToString();
            string remarks = dtstructuresno.Rows[0]["Remarks"].ToString();
            cmd = new MySqlCommand("SELECT productsdata.sno, productsdata.ProductName, product_clubbing.ClubName, incentive_structure.StructureName, product_clubbing.sno AS clubbingsno,products_category.Categoryname, products_subcategory.category_sno FROM incentive_structure INNER JOIN incentive_struct_sub ON incentive_structure.sno = incentive_struct_sub.is_sno INNER JOIN product_clubbing ON incentive_struct_sub.clubbingID = product_clubbing.sno INNER JOIN subproductsclubbing ON product_clubbing.sno = subproductsclubbing.Clubsno INNER JOIN productsdata ON subproductsclubbing.Productid = productsdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno WHERE (incentive_structure.sno = @StructureID) ");
            cmd.Parameters.AddWithValue("@StructureID", structuresno);
            DataTable dtincentivestructure = vdbmngr.SelectQuery(cmd).Tables[0];
            cmd = new MySqlCommand("SELECT DATE_FORMAT(indents.I_date, '%d %b %y') AS IndentDate, branchdata.BranchName, SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost) AS Amount,productsdata.ProductName, productsdata.sno AS prdtsno,Inventorysno as invsno, sum(indents_subtable.DeliveryQty) AS DeliveryQty, indents_subtable.UnitCost, products_category.Categoryname,products_category.sno AS categorysno FROM indents INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN branchdata ON indents.Branch_id = branchdata.sno INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno WHERE (branchdata.sno = @BranchID) AND (indents.I_date BETWEEN @d1 AND @d2) AND (indents_subtable.DeliveryQty <> ' ')  GROUP BY DATE(indents.I_date), branchdata.BranchName, productsdata.ProductName ORDER BY productsdata.ProductName");
            cmd.Parameters.AddWithValue("@BranchID", Agent_id);
            cmd.Parameters.AddWithValue("@d1", GetLowDate(fromdate.AddDays(-1)));
            cmd.Parameters.AddWithValue("@d2", GetHighDate(todate.AddDays(-1)));
            DataTable dtdelivered = vdbmngr.SelectQuery(cmd).Tables[0];
            List<subincentive> subincentivelist = new List<subincentive>();
            List<getincentive> getincentivelist = new List<getincentive>();
            List<incentive> incentivelist = new List<incentive>();
            int dtrowscount = dtdelivered.Rows.Count;
            if (dtrowscount == 0)
            {
            }
            else
            {
                float count = 0;
                count = (float)(todate - fromdate.AddDays(-1)).TotalDays;
                Report = new DataTable();
                Report.Columns.Add("IndentDate");
                DataView view = new DataView(dtdelivered);
                DataTable distinctProduct = view.ToTable(true, "ProductName");
                string itemname = "";
                foreach (DataRow dr in distinctProduct.Rows)
                {
                    Report.Columns.Add(dr["ProductName"].ToString());
                    itemname = dr["ProductName"].ToString();
                }
                Report.Columns.Add("Total  Ltrs");
                DataTable distincttable = view.ToTable(true, "BranchName", "IndentDate");
                DataTable distincttotal = view.ToTable(true, "ProductName", "DeliveryQty");
                double Total = 0;
                double TotalQty = 0;
                double prdtwiseamount = 0;
                int categorysno = 0;
                foreach (DataRow branch in distincttable.Rows)
                {
                    DataRow newrow = Report.NewRow();
                    string IndentDate = branch["IndentDate"].ToString();
                    DateTime dtIndentDate = Convert.ToDateTime(IndentDate).AddDays(1);
                    string ChangedTime = dtIndentDate.ToString("dd/MMM/yyyy");
                    newrow["IndentDate"] = ChangedTime;
                    Total = 0;
                    foreach (DataRow dr in dtdelivered.Rows)
                    {
                        if (branch["IndentDate"].ToString() == dr["IndentDate"].ToString())
                        {
                            if (dr["DeliveryQty"].ToString() != "")
                            {
                                double DeliveryQty = 0;
                                double.TryParse(dr["DeliveryQty"].ToString(), out DeliveryQty);
                                double UnitCost = 0;
                                double.TryParse(dr["UnitCost"].ToString(), out UnitCost);
                                DeliveryQty = Math.Round(DeliveryQty, 2);
                                newrow[dr["ProductName"].ToString()] = DeliveryQty;
                                int.TryParse(dr["categorysno"].ToString(), out categorysno);
                                if (categorysno == 9)
                                {
                                    double prdtamt = 0;
                                    double.TryParse(dr["Amount"].ToString(), out prdtamt);
                                    prdtwiseamount += prdtamt;
                                    string invsno = dr["invsno"].ToString();
                                    if (invsno == "4")
                                    {
                                        Totalbulkmilksaleamount += prdtamt;
                                    }
                                }
                                totmilkamt = (float)prdtwiseamount;
                                if (categorysno == 9)
                                {
                                    string invsno = dr["invsno"].ToString();
                                    if (invsno == "4")
                                    {
                                        Totalbulkmilksale += DeliveryQty;
                                    }
                                    Totalmilksale += DeliveryQty;
                                }
                                Total += DeliveryQty;
                            }
                        }
                    }
                    newrow["Total  Ltrs"] = Total;
                    TotalQty += Total;
                    Report.Rows.Add(newrow);
                }
                DataTable dtTotincentive = new DataTable();
                dtTotincentive.Columns.Add("ClubbingName");
                dtTotincentive.Columns.Add("TotalSale").DataType = typeof(Double);
                dtTotincentive.Columns.Add("AverageSale").DataType = typeof(Double);
                dtTotincentive.Columns.Add("DiscountSlot");
                dtTotincentive.Columns.Add("TotalAmount").DataType = typeof(Double);
                dtTotincentive.Columns.Add("IncentiveGiven");
                dtTotincentive.Columns.Add("Remarks");
                dtTotincentive.Columns.Add("Date");
                string clubbingname = "";
                string categoryserial = "9";
                float milkincentive = 0;
                DataView incentiveview = new DataView(dtincentivestructure);
                DataTable dticentive = incentiveview.ToTable(true, "ClubName", "clubbingsno");
                cmd = new MySqlCommand("SELECT result.deliveryqty, result.ClubName, result.Clubsno, slabs.SlotQty, slabs.Amt FROM (SELECT ROUND(SUM(indents_subtable.DeliveryQty), 2) AS deliveryqty, subproductsclubbing.Clubsno, product_clubbing.ClubName FROM indents INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN subproductsclubbing ON indents_subtable.Product_sno = subproductsclubbing.Productid INNER JOIN product_clubbing ON subproductsclubbing.Clubsno = product_clubbing.sno WHERE (indents.Branch_id = @selectedbrnch) AND (indents.I_date BETWEEN @d1 AND @d2) GROUP BY subproductsclubbing.Clubsno) result INNER JOIN slabs ON result.Clubsno = slabs.club_sno");
                cmd.Parameters.AddWithValue("@selectedbrnch", Agent_id);
                cmd.Parameters.AddWithValue("@d1", GetLowDate(fromdate.AddDays(-1)));
                cmd.Parameters.AddWithValue("@d2", GetHighDate(todate.AddDays(-1)));
                DataTable dtclubtotal = vdbmngr.SelectQuery(cmd).Tables[0];
                foreach (DataRow drincetiveclub in dticentive.Rows)
                {
                    float avgsale = 0;
                    float slotqty = 0;
                    float slotamt = 0;
                    float totalsale = 0;
                    string sltamt = "";
                    clubbingname = drincetiveclub["ClubName"].ToString();
                    foreach (DataRow drdtclubtotal in dtclubtotal.Select("Clubsno='" + drincetiveclub["clubbingsno"].ToString() + "'"))
                    {
                        float.TryParse(drdtclubtotal["deliveryqty"].ToString(), out totalsale);
                        avgsale = (totalsale / count);
                        float.TryParse(drdtclubtotal["SlotQty"].ToString(), out slotqty);
                        if (avgsale > slotqty)
                        {
                            float.TryParse(drdtclubtotal["Amt"].ToString(), out slotamt);
                            sltamt = drdtclubtotal["Amt"].ToString();
                        }
                    }
                    DataRow newrow = dtTotincentive.NewRow();
                    newrow["ClubbingName"] = clubbingname;
                    newrow["TotalSale"] = Math.Round(totalsale, 2);
                    newrow["AverageSale"] = Math.Round(avgsale, 2);
                    newrow["DiscountSlot"] = sltamt;
                    newrow["TotalAmount"] = Math.Round(totalsale * slotamt, 2);
                    newrow["IncentiveGiven"] = incentivegiven;
                    newrow["Remarks"] = remarks;
                    newrow["Date"] = date;
                    if (categoryserial == "9")
                    {
                        milkincentive += (float)Math.Round(totalsale * slotamt, 2);
                    }
                    dtTotincentive.Rows.Add(newrow);//
                }
                double totalmilksale = 0;
                string leak = leakpercent;
                leakpercentage = (float)Convert.ToDouble(leak);
                context.Session["leak"] = leakpercentage;
                double TotMilkandMilkAmt = 0;
                Totalmilksale = Totalmilksale - Totalbulkmilksale;
                totmilkamt = totmilkamt - Totalbulkmilksaleamount;
                TotMilkandMilkAmt = totmilkamt / Totalmilksale;
                double totleakincentive = 0;
                if (leakpercentage != 0)
                {
                    totalmilksale = leakpercentage / 100 * Totalmilksale;
                    totleakincentive = totalmilksale * TotMilkandMilkAmt;
                    DataRow newrow = dtTotincentive.NewRow();
                    newrow["ClubbingName"] = "LEAKAGE";
                    newrow["TotalSale"] = Math.Round(Totalmilksale, 2);
                    newrow["AverageSale"] = Math.Round(totalmilksale, 2);
                    newrow["DiscountSlot"] = Math.Round(TotMilkandMilkAmt, 2);
                    newrow["TotalAmount"] = Math.Round(totleakincentive, 2);
                    dtTotincentive.Rows.Add(newrow);
                }
                foreach (DataRow driinclub in dtTotincentive.Rows)
                {
                    subincentive obj2 = new subincentive();
                    obj2.AverageSale = driinclub["AverageSale"].ToString();
                    obj2.ClubbingName = driinclub["ClubbingName"].ToString();
                    obj2.DiscountSlot = driinclub["DiscountSlot"].ToString();
                    obj2.TotalAmount = driinclub["TotalAmount"].ToString();
                    obj2.TotalSale = driinclub["TotalSale"].ToString();
                    obj2.IncentiveGiven = driinclub["IncentiveGiven"].ToString();
                    obj2.Remarks = driinclub["Remarks"].ToString();
                    obj2.Date = driinclub["Date"].ToString();
                    subincentivelist.Add(obj2);
                }
            }
            foreach (DataRow drin in Report.Rows)
            {
                incentive obj1 = new incentive();
                obj1.indentdate = drin["IndentDate"].ToString();
                obj1.TotalLtrs = drin["Total  Ltrs"].ToString();
                incentivelist.Add(obj1);
            }
            getincentive obj3 = new getincentive();
            obj3.incentive = incentivelist;
            obj3.SubIsncentive = subincentivelist;
            getincentivelist.Add(obj3);
            string response = GetJson(getincentivelist);
            context.Response.Write(response);
        }
        catch
        {

        }
    }
    public class Gheedc
    {
        public string TripId { get; set; }
        public string AssignDate { get; set; }
        public string Permissions { get; set; }
        public string VehicleNo { get; set; }
        public string DispatchName { get; set; }
        public string Employee { get; set; }
        public string DcNo { get; set; }
        public string Refdcno { get; set; }
        public string InvoiceNo { get; set; }
        public string narrationdate { get; set; }
        public string Dispatchsno { get; set; }
        public string destination { get; set; }
        public string modeofterms { get; set; }
        public string companyname { get; set; }
        public string street { get; set; }
        public string mandal { get; set; }
        public string district { get; set; }
        public string buildingaddress { get; set; }
        public string state { get; set; }
        public string pin { get; set; }
        public string tin { get; set; }
        public string tocompanyname { get; set; }
        public string tostreet { get; set; }
        public string tomandal { get; set; }
        public string todistrict { get; set; }
        public string tobuildingaddress { get; set; }
        public string tostate { get; set; }
        public string topin { get; set; }
        public string totin { get; set; }
        public string cst { get; set; }
        public string email { get; set; }
        public string panno { get; set; }
        public string tocst { get; set; }
        public string toemail { get; set; }
        public string topanno { get; set; }
    }
    public class GheeDCProducts
    {
        public string ProductName { set; get; }
        public string Qty { set; get; }
        public string Vat { set; get; }
        public string Price { set; get; }
    }
    DataTable Report = new DataTable();
    DataTable dtTotQty = new DataTable();
    DataTable dtbrnchprdts = new DataTable();
    private void GetDC_Products(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            string TripId = context.Request["refdcno"];
            string Dispatchsno = context.Request["Dispatchsno"];
            string DcType = context.Request["DcType"];
            DateTime fromdate = DateTime.Now;
            Report = new DataTable();
            dtTotQty = new DataTable();
            DataTable dtstateid = new DataTable();
            string DispMode = "";
            string branchsno = "";
            string Route_id = "";
            string DispType = "";
            string fromstate = context.Session["stateid"].ToString();
            string Ratemanage = "";
            string DispRateBranch = "";
            string tostate = "";
            DateTime ReportDate = VehicleDBMgr.GetTime(vdbmngr.conn);
            int currentyear = ReportDate.Year;
            cmd = new MySqlCommand(" SELECT sno, DispName, BranchID,Route_id, Dispdate, DispMode,DispType,Branch_Id FROM dispatch WHERE (sno = @DispSno)");
            cmd.Parameters.AddWithValue("@DispSno", Dispatchsno);
            DataTable dtbrnch = vdbmngr.SelectQuery(cmd).Tables[0];
            if (dtbrnch.Rows.Count > 0)
            {
                branchsno = dtbrnch.Rows[0]["BranchID"].ToString();
                DispMode = dtbrnch.Rows[0]["DispMode"].ToString();
                Route_id = dtbrnch.Rows[0]["sno"].ToString();
                DispType = dtbrnch.Rows[0]["DispType"].ToString();
                DispRateBranch = dtbrnch.Rows[0]["Branch_Id"].ToString();// This Branchid Is Taken Dispatch OR Route Wise Rate Is Applicable Perpose
            }
            else
            {
                branchsno = context.Session["branch"].ToString();
            }
            if (DispMode == "Staff")
            {
                cmd = new MySqlCommand("SELECT branchdata.stateid, productsdata.sno,productsdata.itemcode,productsdata.hsncode,productsdata.igst,productsdata.cgst,productsdata.sgst, productsdata.ProductName, productsdata.Units,productsdata.qty as uomqty, branchproducts.unitprice, invmaster.Qty, products_category.Categoryname FROM branchproducts INNER JOIN productsdata ON branchproducts.product_sno = productsdata.sno INNER JOIN invmaster ON productsdata.Inventorysno = invmaster.sno INNER JOIN branchdata ON branchproducts.branch_sno = branchdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno WHERE (branchdata.sno = @SOID) and (branchproducts.flag=@flag)  group by  productsdata.ProductName ORDER BY branchproducts.Rank");
                cmd.Parameters.AddWithValue("@SOID", branchsno);
                cmd.Parameters.AddWithValue("@flag", "1");
                cmd.Parameters.AddWithValue("@SalesType", "20");
                dtbrnchprdts = vdbmngr.SelectQuery(cmd).Tables[0];
            }
            else if (DispMode == "AGENT")
            {
                cmd = new MySqlCommand("SELECT branchdata.stateid, productsdata.sno,productsdata.itemcode,productsdata.hsncode,productsdata.igst,productsdata.cgst,productsdata.sgst, productsdata.ProductName, productsdata.Units,productsdata.qty as uomqty, branchproducts.unitprice, invmaster.Qty, products_category.Categoryname, branchproducts_1.unitprice AS BUnitPrice FROM branchproducts INNER JOIN productsdata ON branchproducts.product_sno = productsdata.sno INNER JOIN invmaster ON productsdata.Inventorysno = invmaster.sno INNER JOIN branchdata ON branchproducts.branch_sno = branchdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno INNER JOIN branchmappingtable ON branchdata.sno = branchmappingtable.SubBranch INNER JOIN branchproducts branchproducts_1 ON branchmappingtable.SuperBranch = branchproducts_1.branch_sno AND productsdata.sno = branchproducts_1.product_sno WHERE (branchdata.sno = @SOID) and (branchproducts.flag=@flag) GROUP BY productsdata.ProductName ORDER BY branchproducts_1.Rank");
                cmd.Parameters.AddWithValue("@SOID", branchsno);
                cmd.Parameters.AddWithValue("@flag", "1");
                dtbrnchprdts = vdbmngr.SelectQuery(cmd).Tables[0];
            }
            else if (DispMode == "Others")
            {
                cmd = new MySqlCommand("SELECT branchdata.stateid,  productsdata.sno,productsdata.itemcode,productsdata.hsncode,productsdata.igst,productsdata.cgst,productsdata.sgst, productsdata.ProductName, productsdata.Units,productsdata.qty as uomqty, branchproducts.unitprice, invmaster.Qty, products_category.Categoryname, branchproducts_1.unitprice AS BUnitPrice FROM branchproducts INNER JOIN productsdata ON branchproducts.product_sno = productsdata.sno INNER JOIN invmaster ON productsdata.Inventorysno = invmaster.sno INNER JOIN branchdata ON branchproducts.branch_sno = branchdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno INNER JOIN branchmappingtable ON branchdata.sno = branchmappingtable.SubBranch INNER JOIN branchproducts branchproducts_1 ON branchmappingtable.SuperBranch = branchproducts_1.branch_sno AND productsdata.sno = branchproducts_1.product_sno WHERE (branchdata.sno = @SOID) and (branchproducts.flag=@flag) GROUP BY productsdata.ProductName ORDER BY branchproducts_1.Rank");
                cmd.Parameters.AddWithValue("@SOID", branchsno);
                cmd.Parameters.AddWithValue("@flag", "1");
                dtbrnchprdts = vdbmngr.SelectQuery(cmd).Tables[0];
            }
            else
            {
                string salestype = context.Session["salestype"].ToString();
                if (salestype == "SALES OFFICE")
                {
                    branchsno = context.Session["branch"].ToString();
                }
                else
                {
                }

                if (DispType == "SO")
                {
                    cmd = new MySqlCommand("SELECT   sno, BranchName, SalesType, Lat, Lng, Radius, stateid, companycode FROM branchdata WHERE (sno = @branchid)");
                    cmd.Parameters.AddWithValue("@branchid", DispRateBranch);
                    cmd = new MySqlCommand("SELECT  branchdata.stateid, productsdata.sno, productsdata.Itemcode, productsdata.hsncode, productsdata.igst, productsdata.cgst, productsdata.sgst, productsdata.ProductName, productsdata.Units,productsdata.qty as uomqty, branchproducts.unitprice, invmaster.Qty,products_category.Categoryname FROM branchproducts INNER JOIN productsdata ON branchproducts.product_sno = productsdata.sno INNER JOIN invmaster ON productsdata.Inventorysno = invmaster.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno INNER JOIN branchdata ON branchproducts.branch_sno = branchdata.sno WHERE (branchproducts.branch_sno = @branchhsno) AND (branchproducts.flag = @flag) GROUP BY productsdata.ProductName, branchdata.stateid ORDER BY branchproducts.Rank");
                    cmd.Parameters.AddWithValue("@flag", "1");
                    cmd.Parameters.AddWithValue("@branchhsno", branchsno);
                    dtbrnchprdts = vdbmngr.SelectQuery(cmd).Tables[0];
                }
                else
                {
                    cmd = new MySqlCommand("SELECT  branchdata.stateid, productsdata.sno, productsdata.Itemcode, productsdata.hsncode, productsdata.igst, productsdata.cgst, productsdata.sgst, productsdata.ProductName, productsdata.Units,productsdata.qty as uomqty, branchproducts.unitprice, invmaster.Qty,products_category.Categoryname FROM branchproducts INNER JOIN productsdata ON branchproducts.product_sno = productsdata.sno INNER JOIN invmaster ON productsdata.Inventorysno = invmaster.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno INNER JOIN branchdata ON branchproducts.branch_sno = branchdata.sno WHERE (branchproducts.branch_sno = @branchhsno) AND (branchproducts.flag = @flag) GROUP BY productsdata.ProductName, branchdata.stateid ORDER BY branchproducts.Rank");
                    cmd.Parameters.AddWithValue("@flag", "1");
                    cmd.Parameters.AddWithValue("@branchhsno", branchsno);
                    dtbrnchprdts = vdbmngr.SelectQuery(cmd).Tables[0];
                }
            }
            if (dtbrnch.Rows.Count > 0)
            {
                DispType = dtbrnch.Rows[0]["DispType"].ToString();
            }
            if (dtbrnchprdts.Rows.Count > 0)
            {
                tostate = dtbrnchprdts.Rows[0]["stateid"].ToString();
            }
            if (DispType == "Free")
            {
                cmd = new MySqlCommand("SELECT tripsubdata.ProductId, productsdata.Itemcode,productsdata.SubCat_sno as subcatid, productsdata.hsncode, productsdata.igst, productsdata.cgst, productsdata.sgst, productsdata.Units,productsdata.qty as uomqty, productsdata.ProductName, productsdata.VatPercent,  tripsubdata.Price, ROUND(tripsubdata.Qty, 2) AS Qty, tripdata.AssignDate, tripdata.BranchID FROM tripdata INNER JOIN triproutes ON tripdata.Sno = triproutes.Tripdata_sno INNER JOIN tripsubdata ON tripdata.Sno = tripsubdata.Tripdata_sno INNER JOIN productsdata ON tripsubdata.ProductId = productsdata.sno WHERE (tripdata.Sno = @tripdataId) GROUP BY productsdata.ProductName");
            }
            else
            {
                cmd = new MySqlCommand("SELECT tripsubdata.ProductId,productsdata.itemcode,productsdata.SubCat_sno as subcatid,productsdata.hsncode,productsdata.igst,productsdata.cgst,productsdata.sgst,productsdata.units,productsdata.qty as uomqty, productsdata.ProductName, productsdata.VatPercent, branchproducts.VatPercent AS vp, tripsubdata.Price, ROUND(tripsubdata.Qty, 2) AS Qty,tripdata.AssignDate, tripdata.BranchID, branchproducts_1.VatPercent AS plantvp FROM tripdata INNER JOIN triproutes ON tripdata.Sno = triproutes.Tripdata_sno INNER JOIN tripsubdata ON tripdata.Sno = tripsubdata.Tripdata_sno INNER JOIN productsdata ON tripsubdata.ProductId = productsdata.sno INNER JOIN branchproducts ON productsdata.sno = branchproducts.product_sno INNER JOIN branchproducts branchproducts_1 ON tripdata.BranchID = branchproducts_1.branch_sno AND branchproducts.product_sno = branchproducts_1.product_sno WHERE (tripdata.Sno = @tripdataId) AND (branchproducts.branch_sno = @BranchID) GROUP BY productsdata.ProductName ORDER BY branchproducts.Rank");
            }
            cmd.Parameters.AddWithValue("@BranchID", branchsno);
            cmd.Parameters.AddWithValue("@tripdataId", TripId);
            DataTable dtIndent = vdbmngr.SelectQuery(cmd).Tables[0];
            cmd = new MySqlCommand("SELECT invmaster.InvName, tripinvdata.Qty FROM tripinvdata INNER JOIN invmaster ON tripinvdata.invid = invmaster.sno WHERE (tripinvdata.Tripdata_sno = @tripdataId)");
            cmd.Parameters.AddWithValue("@tripdataId", TripId);
            DataTable dtInventory = vdbmngr.SelectQuery(cmd).Tables[0];
            cmd = new MySqlCommand("select products_category.sno as catsno,products_subcategory.sno as subcatsno from products_category inner join products_subcategory on products_category.sno = products_subcategory.category_sno");
            DataTable dtcategory = vdbmngr.SelectQuery(cmd).Tables[0];
            cmd = new MySqlCommand("select * from tripdata where sno=@sno");
            cmd.Parameters.AddWithValue("@sno", TripId);
            DataTable dtassigndate = vdbmngr.SelectQuery(cmd).Tables[0];
            DateTime AssignDate = DateTime.Now;
            string adate = dtassigndate.Rows[0]["AssignDate"].ToString();
            AssignDate = DateTime.Parse(adate);
            dtTotQty.Columns.Add("Sl No");
            dtTotQty.Columns.Add("itemcode");
            dtTotQty.Columns.Add("Product Name");
            dtTotQty.Columns.Add("HSN Code");
            dtTotQty.Columns.Add("Uom");
            dtTotQty.Columns.Add("Uomqty");
            dtTotQty.Columns.Add("Qty").DataType = typeof(Double);
            dtTotQty.Columns.Add("Rate");
            dtTotQty.Columns.Add("Discount");
            dtTotQty.Columns.Add("Taxable Value").DataType = typeof(Double);
            dtTotQty.Columns.Add("SGST");
            dtTotQty.Columns.Add("SGSTamount");
            dtTotQty.Columns.Add("CGST");
            dtTotQty.Columns.Add("CGSTamount");
            dtTotQty.Columns.Add("IGST");
            dtTotQty.Columns.Add("IGSTamount");
            dtTotQty.Columns.Add("totalamount");
            int i = 1;
            double TotalMilk = 0;
            if (DcType == "Tax")
            {
                if (dtIndent.Rows.Count > 0)
                {
                    foreach (DataRow drprdt in dtbrnchprdts.Rows)
                    {
                        if (tostate == "")
                        {
                            // naveen 
                            tostate = drprdt["stateid"].ToString();
                            // end naveen
                        }
                        foreach (DataRow dr in dtIndent.Rows)
                        {
                            if (dr["ProductId"].ToString() == drprdt["sno"].ToString())
                            {
                                DateTime dtjuly = new DateTime();
                                string jul = "7/18/2022";
                                dtjuly = DateTime.Parse(jul);
                                if (dtjuly > AssignDate.AddDays(1))
                                {
                                    string categoryid = "";
                                    foreach (DataRow drcate in dtcategory.Select("subcatsno='" + dr["subcatid"].ToString() + "'"))
                                    {
                                        categoryid = drcate["catsno"].ToString();
                                    }
                                    string[] catarr = { "2", "12", "39", "47", "48" };
                                    if (catarr.Contains(categoryid))
                                    {
                                    }
                                    else
                                    {
                                        if (dr["igst"].ToString() != "0")
                                        {
                                            DataRow newrow = dtTotQty.NewRow();
                                            newrow["Sl No"] = i++.ToString();
                                            newrow["itemcode"] = dr["itemcode"].ToString();
                                            newrow["Product Name"] = dr["ProductName"].ToString();
                                            newrow["HSN Code"] = dr["hsncode"].ToString();
                                            newrow["Uom"] = dr["Units"].ToString();
                                            newrow["Uomqty"] = dr["Uomqty"].ToString();
                                            float qty = 0;
                                            float.TryParse(dr["Qty"].ToString(), out qty);
                                            float Price = 0;
                                            float.TryParse(dr["Price"].ToString(), out Price);
                                            newrow["Qty"] = Math.Round(qty, 2);
                                            string Categoryname = drprdt["Categoryname"].ToString();
                                            if (Categoryname == "MILK")
                                            {
                                                TotalMilk += qty;
                                            }
                                            string UnitCost = dr["Price"].ToString();
                                            float rate = 0;
                                            if (DispMode == "Free")
                                            {
                                                rate = 0;
                                                float.TryParse(drprdt["unitprice"].ToString(), out rate);
                                            }
                                            else
                                            {
                                                float.TryParse(drprdt["unitprice"].ToString(), out rate);
                                            }
                                            if (DispMode == "AGENT")
                                            {
                                                String unitprice = drprdt["unitprice"].ToString();
                                                if (unitprice == "0")
                                                {
                                                    unitprice = drprdt["BUnitPrice"].ToString();
                                                }
                                                float.TryParse(unitprice, out rate);
                                            }
                                            if (DispMode == "Others")
                                            {
                                                String unitprice = drprdt["unitprice"].ToString();
                                                if (unitprice == "0")
                                                {
                                                    unitprice = drprdt["BUnitPrice"].ToString();
                                                }
                                                float.TryParse(unitprice, out rate);
                                            }
                                            if (UnitCost == "")
                                            {
                                            }
                                            else
                                            {
                                                rate = Price;
                                            }
                                            newrow["Discount"] = 0;
                                            double PAmount = 0;
                                            double tot_vatamount = 0;
                                            if (fromstate == tostate)
                                            {
                                                if (DispMode == "Staff" || DispMode == "AGENT" || DispMode == "Others" || DispMode == "Free" || DispMode == "LOCAL")
                                                {
                                                    double sgstamount = 0;
                                                    double cgstamount = 0;
                                                    double Igst = 0;
                                                    double Igstamount = 0;
                                                    double totRate = 0;
                                                    double.TryParse(dr["Igst"].ToString(), out Igst);
                                                    double Igstcon = 100 + Igst;
                                                    Igstamount = (rate / Igstcon) * Igst;
                                                    Igstamount = Math.Round(Igstamount, 2);
                                                    totRate = Igstamount;
                                                    double Vatrate = rate - totRate;
                                                    Vatrate = Math.Round(Vatrate, 2);
                                                    newrow["Rate"] = Vatrate.ToString();
                                                    PAmount = qty * Vatrate;
                                                    newrow["Taxable Value"] = Math.Round(PAmount, 2);
                                                    tot_vatamount = (PAmount * Igst) / 100;
                                                    sgstamount = (tot_vatamount / 2);
                                                    sgstamount = Math.Round(sgstamount, 2);
                                                    newrow["sgst"] = dr["sgst"].ToString();
                                                    newrow["sgstamount"] = sgstamount.ToString();
                                                    cgstamount = (tot_vatamount / 2);
                                                    cgstamount = Math.Round(cgstamount, 2);
                                                    newrow["cgst"] = dr["cgst"].ToString();
                                                    newrow["cgstamount"] = cgstamount.ToString();
                                                    newrow["Igst"] = 0;
                                                    newrow["Igstamount"] = 0;
                                                }
                                                else
                                                {
                                                    double sgstamount = 0;
                                                    double cgstamount = 0;
                                                    double Igst = 0;
                                                    double Igstamount = 0;
                                                    double totRate = 0;
                                                    double.TryParse(dr["Igst"].ToString(), out Igst);
                                                    double Igstcon = 100 + Igst;
                                                    Igstamount = (rate / Igstcon) * Igst;
                                                    Igstamount = Math.Round(Igstamount, 2);
                                                    totRate = Igstamount;
                                                    double Vatrate = rate - totRate;
                                                    Vatrate = Math.Round(Vatrate, 2);
                                                    newrow["Rate"] = Vatrate.ToString();
                                                    PAmount = qty * Vatrate;
                                                    newrow["Taxable Value"] = Math.Round(PAmount, 2);
                                                    tot_vatamount = (PAmount * Igst) / 100;
                                                    sgstamount = (tot_vatamount / 2);
                                                    sgstamount = Math.Round(sgstamount, 2);
                                                    newrow["sgst"] = dr["sgst"].ToString();
                                                    newrow["sgstamount"] = sgstamount.ToString();
                                                    cgstamount = (tot_vatamount / 2);
                                                    cgstamount = Math.Round(cgstamount, 2);
                                                    newrow["cgst"] = dr["cgst"].ToString();
                                                    newrow["cgstamount"] = cgstamount.ToString();
                                                    newrow["Igst"] = 0;
                                                    newrow["Igstamount"] = 0;
                                                }
                                            }
                                            else
                                            {
                                                double Igst = 0;
                                                double Igstamount = 0;
                                                double totRate = 0;
                                                double.TryParse(dr["Igst"].ToString(), out Igst);
                                                double Igstcon = 100 + Igst;
                                                Igstamount = (rate / Igstcon) * Igst;
                                                Igstamount = Math.Round(Igstamount, 2);
                                                totRate = Igstamount;
                                                double Vatrate = rate - totRate;
                                                Vatrate = Math.Round(Vatrate, 2);
                                                newrow["Rate"] = Vatrate.ToString();
                                                PAmount = qty * Vatrate;
                                                newrow["Taxable Value"] = Math.Round(PAmount, 2);
                                                tot_vatamount = (PAmount * Igst) / 100;
                                                newrow["sgst"] = 0;
                                                newrow["sgstamount"] = 0;
                                                newrow["cgst"] = 0;
                                                newrow["cgstamount"] = 0;
                                                newrow["Igst"] = dr["Igst"].ToString();
                                                tot_vatamount = Math.Round(tot_vatamount, 2);
                                                newrow["Igstamount"] = tot_vatamount.ToString();
                                            }
                                            double tot_amount = PAmount + tot_vatamount;
                                            tot_amount = Math.Round(tot_amount, 2);
                                            newrow["totalamount"] = tot_amount;
                                            dtTotQty.Rows.Add(newrow);
                                        }
                                    }
                                }
                                else
                                {
                                    if (dr["igst"].ToString() != "0")
                                    {
                                        DataRow newrow = dtTotQty.NewRow();
                                        newrow["Sl No"] = i++.ToString();
                                        newrow["itemcode"] = dr["itemcode"].ToString();
                                        newrow["Product Name"] = dr["ProductName"].ToString();
                                        newrow["HSN Code"] = dr["hsncode"].ToString();
                                        newrow["Uom"] = dr["Units"].ToString();
                                        newrow["Uomqty"] = dr["Uomqty"].ToString();
                                        float qty = 0;
                                        float.TryParse(dr["Qty"].ToString(), out qty);
                                        float Price = 0;
                                        float.TryParse(dr["Price"].ToString(), out Price);
                                        newrow["Qty"] = Math.Round(qty, 2);
                                        string Categoryname = drprdt["Categoryname"].ToString();
                                        if (Categoryname == "MILK")
                                        {
                                            TotalMilk += qty;
                                        }
                                        string UnitCost = dr["Price"].ToString();
                                        float rate = 0;
                                        if (DispMode == "Free")
                                        {
                                            rate = 0;
                                            float.TryParse(drprdt["unitprice"].ToString(), out rate);
                                        }
                                        else
                                        {
                                            float.TryParse(drprdt["unitprice"].ToString(), out rate);
                                        }
                                        if (DispMode == "AGENT")
                                        {
                                            String unitprice = drprdt["unitprice"].ToString();
                                            if (unitprice == "0")
                                            {
                                                unitprice = drprdt["BUnitPrice"].ToString();
                                            }
                                            float.TryParse(unitprice, out rate);
                                        }
                                        if (DispMode == "Others")
                                        {
                                            String unitprice = drprdt["unitprice"].ToString();
                                            if (unitprice == "0")
                                            {
                                                unitprice = drprdt["BUnitPrice"].ToString();
                                            }
                                            float.TryParse(unitprice, out rate);
                                        }
                                        if (UnitCost == "")
                                        {
                                        }
                                        else
                                        {
                                            rate = Price;
                                        }
                                        newrow["Discount"] = 0;
                                        double PAmount = 0;
                                        double tot_vatamount = 0;
                                        if (fromstate == tostate)
                                        {
                                            if (DispMode == "Staff" || DispMode == "AGENT" || DispMode == "Others" || DispMode == "Free" || DispMode == "LOCAL")
                                            {
                                                double sgstamount = 0;
                                                double cgstamount = 0;
                                                double Igst = 0;
                                                double Igstamount = 0;
                                                double totRate = 0;
                                                double.TryParse(dr["Igst"].ToString(), out Igst);
                                                double Igstcon = 100 + Igst;
                                                Igstamount = (rate / Igstcon) * Igst;
                                                Igstamount = Math.Round(Igstamount, 2);
                                                totRate = Igstamount;
                                                double Vatrate = rate - totRate;
                                                Vatrate = Math.Round(Vatrate, 2);
                                                newrow["Rate"] = Vatrate.ToString();
                                                PAmount = qty * Vatrate;
                                                newrow["Taxable Value"] = Math.Round(PAmount, 2);
                                                tot_vatamount = (PAmount * Igst) / 100;
                                                sgstamount = (tot_vatamount / 2);
                                                sgstamount = Math.Round(sgstamount, 2);
                                                newrow["sgst"] = dr["sgst"].ToString();
                                                newrow["sgstamount"] = sgstamount.ToString();
                                                cgstamount = (tot_vatamount / 2);
                                                cgstamount = Math.Round(cgstamount, 2);
                                                newrow["cgst"] = dr["cgst"].ToString();
                                                newrow["cgstamount"] = cgstamount.ToString();
                                                newrow["Igst"] = 0;
                                                newrow["Igstamount"] = 0;
                                            }
                                            else
                                            {
                                                double sgstamount = 0;
                                                double cgstamount = 0;
                                                double Igst = 0;
                                                double Igstamount = 0;
                                                double totRate = 0;
                                                double.TryParse(dr["Igst"].ToString(), out Igst);
                                                double Igstcon = 100 + Igst;
                                                Igstamount = (rate / Igstcon) * Igst;
                                                Igstamount = Math.Round(Igstamount, 2);
                                                totRate = Igstamount;
                                                double Vatrate = rate - totRate;
                                                Vatrate = Math.Round(Vatrate, 2);
                                                newrow["Rate"] = Vatrate.ToString();
                                                PAmount = qty * Vatrate;
                                                newrow["Taxable Value"] = Math.Round(PAmount, 2);
                                                tot_vatamount = (PAmount * Igst) / 100;
                                                sgstamount = (tot_vatamount / 2);
                                                sgstamount = Math.Round(sgstamount, 2);
                                                newrow["sgst"] = dr["sgst"].ToString();
                                                newrow["sgstamount"] = sgstamount.ToString();
                                                cgstamount = (tot_vatamount / 2);
                                                cgstamount = Math.Round(cgstamount, 2);
                                                newrow["cgst"] = dr["cgst"].ToString();
                                                newrow["cgstamount"] = cgstamount.ToString();
                                                newrow["Igst"] = 0;
                                                newrow["Igstamount"] = 0;
                                            }
                                        }
                                        else
                                        {
                                            double Igst = 0;
                                            double Igstamount = 0;
                                            double totRate = 0;
                                            double.TryParse(dr["Igst"].ToString(), out Igst);
                                            double Igstcon = 100 + Igst;
                                            Igstamount = (rate / Igstcon) * Igst;
                                            Igstamount = Math.Round(Igstamount, 2);
                                            totRate = Igstamount;
                                            double Vatrate = rate - totRate;
                                            Vatrate = Math.Round(Vatrate, 2);
                                            newrow["Rate"] = Vatrate.ToString();
                                            PAmount = qty * Vatrate;
                                            newrow["Taxable Value"] = Math.Round(PAmount, 2);
                                            tot_vatamount = (PAmount * Igst) / 100;
                                            newrow["sgst"] = 0;
                                            newrow["sgstamount"] = 0;
                                            newrow["cgst"] = 0;
                                            newrow["cgstamount"] = 0;
                                            newrow["Igst"] = dr["Igst"].ToString();
                                            tot_vatamount = Math.Round(tot_vatamount, 2);
                                            newrow["Igstamount"] = tot_vatamount.ToString();
                                        }
                                        double tot_amount = PAmount + tot_vatamount;
                                        tot_amount = Math.Round(tot_amount, 2);
                                        newrow["totalamount"] = tot_amount;
                                        dtTotQty.Rows.Add(newrow);
                                    }
                                }
                            }
                        }
                    }
                    List<dcproductDetails> DcDetailslist = new List<dcproductDetails>();
                    foreach (DataRow dr in dtTotQty.Rows)
                    {
                        dcproductDetails getProducts = new dcproductDetails();
                        getProducts.sno = dr["Sl No"].ToString();
                        getProducts.itemcode = dr["itemcode"].ToString();
                        getProducts.ProductName = dr["Product Name"].ToString();
                        getProducts.qty = dr["Qty"].ToString();
                        getProducts.hsncode = dr["HSN Code"].ToString();
                        getProducts.uom = dr["Uom"].ToString();
                        getProducts.uomqty = dr["Uomqty"].ToString();
                        getProducts.rate = dr["Rate"].ToString();
                        getProducts.discount = dr["Discount"].ToString();
                        getProducts.taxablevalue = dr["Taxable Value"].ToString();
                        getProducts.sgst = dr["sgst"].ToString();
                        getProducts.sgstamount = dr["sgstamount"].ToString();
                        getProducts.cgst = dr["cgst"].ToString();
                        getProducts.cgstamount = dr["cgstamount"].ToString();
                        getProducts.igst = dr["igst"].ToString();
                        getProducts.igstamount = dr["igstamount"].ToString();
                        getProducts.totalamount = dr["totalamount"].ToString();
                        DcDetailslist.Add(getProducts);
                    }
                    foreach (DataRow dr in dtInventory.Rows)
                    {
                        dcproductDetails getProducts = new dcproductDetails();
                        getProducts.itemcode = "Inventory";
                        getProducts.ProductName = dr["InvName"].ToString();
                        int qty = 0;
                        int.TryParse(dr["Qty"].ToString(), out qty);
                        if (qty > 0)
                        {
                            getProducts.qty = dr["Qty"].ToString();
                            DcDetailslist.Add(getProducts);
                        }
                    }
                    string response = GetJson(DcDetailslist);
                    context.Response.Write(response);
                }
                else
                {
                    string msg = "No data found";
                    string response = GetJson(msg);
                    context.Response.Write(response);
                }
            }
            else
            {
                if (dtIndent.Rows.Count > 0)
                {
                    foreach (DataRow drprdt in dtbrnchprdts.Rows)
                    {
                        foreach (DataRow dr in dtIndent.Rows)
                        {
                            if (dr["ProductId"].ToString() == drprdt["sno"].ToString())
                            {
                                if (dr["igst"].ToString() == "0")
                                {
                                    DataRow newrow = dtTotQty.NewRow();
                                    newrow["Sl No"] = i++.ToString();
                                    newrow["itemcode"] = dr["itemcode"].ToString();
                                    newrow["Product Name"] = dr["ProductName"].ToString();
                                    newrow["HSN Code"] = dr["hsncode"].ToString();
                                    newrow["Uom"] = dr["Units"].ToString();
                                    newrow["Uomqty"] = dr["Uomqty"].ToString();
                                    float qty = 0;
                                    float.TryParse(dr["Qty"].ToString(), out qty);
                                    float Price = 0;
                                    float.TryParse(dr["Price"].ToString(), out Price);
                                    newrow["Qty"] = Math.Round(qty, 2);
                                    string Categoryname = drprdt["Categoryname"].ToString();
                                    if (Categoryname == "MILK")
                                    {
                                        TotalMilk += qty;
                                    }
                                    string UnitCost = dr["Price"].ToString();
                                    float rate = 0;
                                    if (DispMode == "Free")
                                    {
                                        rate = 0;
                                        float.TryParse(drprdt["unitprice"].ToString(), out rate);
                                    }
                                    else
                                    {
                                        float.TryParse(drprdt["unitprice"].ToString(), out rate);
                                    }
                                    if (DispMode == "AGENT")
                                    {
                                        String unitprice = drprdt["unitprice"].ToString();
                                        if (unitprice == "0")
                                        {
                                            unitprice = drprdt["BUnitPrice"].ToString();
                                        }
                                        float.TryParse(unitprice, out rate);
                                    }
                                    if (DispMode == "Others")
                                    {
                                        String unitprice = drprdt["unitprice"].ToString();
                                        if (unitprice == "0")
                                        {
                                            unitprice = drprdt["BUnitPrice"].ToString();
                                        }
                                        float.TryParse(unitprice, out rate);
                                    }
                                    if (UnitCost == "")
                                    {
                                    }
                                    else
                                    {
                                        rate = Price;
                                    }
                                    newrow["Discount"] = 0;
                                    double PAmount = 0;
                                    double tot_vatamount = 0;
                                    if (fromstate == tostate)
                                    {
                                        if (DispMode == "Staff" || DispMode == "AGENT" || DispMode == "Others" || DispMode == "Free" || DispMode == "LOCAL")
                                        {
                                            double sgstamount = 0;
                                            double cgstamount = 0;
                                            double Igst = 0;
                                            double Igstamount = 0;
                                            double totRate = 0;
                                            double.TryParse(dr["Igst"].ToString(), out Igst);
                                            double Igstcon = 100 + Igst;
                                            Igstamount = (rate / Igstcon) * Igst;
                                            Igstamount = Math.Round(Igstamount, 2);
                                            totRate = Igstamount;
                                            double Vatrate = rate - totRate;
                                            Vatrate = Math.Round(Vatrate, 2);
                                            newrow["Rate"] = Vatrate.ToString();
                                            PAmount = qty * Vatrate;
                                            newrow["Taxable Value"] = Math.Round(PAmount, 2);
                                            tot_vatamount = (PAmount * Igst) / 100;
                                            sgstamount = (tot_vatamount / 2);
                                            sgstamount = Math.Round(sgstamount, 2);
                                            newrow["sgst"] = dr["sgst"].ToString();
                                            newrow["sgstamount"] = sgstamount.ToString();
                                            cgstamount = (tot_vatamount / 2);
                                            cgstamount = Math.Round(cgstamount, 2);
                                            newrow["cgst"] = dr["cgst"].ToString();
                                            newrow["cgstamount"] = cgstamount.ToString();
                                            newrow["Igst"] = 0;
                                            newrow["Igstamount"] = 0;
                                        }
                                        else
                                        {
                                            newrow["Rate"] = rate.ToString();
                                            PAmount = qty * rate;
                                            newrow["Taxable Value"] = Math.Round(PAmount, 2);
                                            newrow["sgst"] = 0;
                                            newrow["sgstamount"] = 0;
                                            newrow["cgst"] = 0;
                                            newrow["cgstamount"] = 0;
                                            newrow["Igst"] = 0;
                                            newrow["Igstamount"] = 0;
                                        }
                                    }
                                    else
                                    {
                                        double Igst = 0;
                                        double Igstamount = 0;
                                        double totRate = 0;
                                        double.TryParse(dr["Igst"].ToString(), out Igst);
                                        double Igstcon = 100 + Igst;
                                        Igstamount = (rate / Igstcon) * Igst;
                                        Igstamount = Math.Round(Igstamount, 2);
                                        totRate = Igstamount;
                                        double Vatrate = rate - totRate;
                                        Vatrate = Math.Round(Vatrate, 2);
                                        newrow["Rate"] = Vatrate.ToString();
                                        PAmount = qty * Vatrate;
                                        newrow["Taxable Value"] = Math.Round(PAmount, 2);
                                        tot_vatamount = (PAmount * Igst) / 100;
                                        newrow["sgst"] = 0;
                                        newrow["sgstamount"] = 0;
                                        newrow["cgst"] = 0;
                                        newrow["cgstamount"] = 0;
                                        newrow["Igst"] = dr["Igst"].ToString();
                                        tot_vatamount = Math.Round(tot_vatamount, 2);
                                        newrow["Igstamount"] = tot_vatamount.ToString();
                                    }
                                    double tot_amount = PAmount + tot_vatamount;
                                    tot_amount = Math.Round(tot_amount, 2);
                                    newrow["totalamount"] = tot_amount;
                                    dtTotQty.Rows.Add(newrow);
                                }
                                else
                                {
                                    DateTime dtjuly = new DateTime();
                                    string jul = "7/18/2022";
                                    dtjuly = DateTime.Parse(jul);
                                    if (dtjuly > AssignDate.AddDays(1))
                                    {
                                        string categoryid = "";
                                        foreach (DataRow drcate in dtcategory.Select("subcatsno='" + dr["subcatid"].ToString() + "'"))
                                        {
                                            categoryid = drcate["catsno"].ToString();
                                        }
                                        string[] catarr = { "2", "12", "39", "47", "48" };
                                        if (catarr.Contains(categoryid))
                                        {
                                            DataRow newrow = dtTotQty.NewRow();
                                            newrow["Sl No"] = i++.ToString();
                                            newrow["itemcode"] = dr["itemcode"].ToString();
                                            newrow["Product Name"] = dr["ProductName"].ToString();
                                            newrow["HSN Code"] = dr["hsncode"].ToString();
                                            newrow["Uom"] = dr["Units"].ToString();
                                            newrow["Uomqty"] = dr["Uomqty"].ToString();
                                            float qty = 0;
                                            float.TryParse(dr["Qty"].ToString(), out qty);
                                            float Price = 0;
                                            float.TryParse(dr["Price"].ToString(), out Price);
                                            newrow["Qty"] = Math.Round(qty, 2);
                                            string Categoryname = drprdt["Categoryname"].ToString();
                                            if (Categoryname == "MILK")
                                            {
                                                TotalMilk += qty;
                                            }
                                            string UnitCost = dr["Price"].ToString();
                                            float rate = 0;
                                            if (DispMode == "Free")
                                            {
                                                rate = 0;
                                                float.TryParse(drprdt["unitprice"].ToString(), out rate);
                                            }
                                            else
                                            {
                                                float.TryParse(drprdt["unitprice"].ToString(), out rate);
                                            }
                                            if (DispMode == "AGENT")
                                            {
                                                String unitprice = drprdt["unitprice"].ToString();
                                                if (unitprice == "0")
                                                {
                                                    unitprice = drprdt["BUnitPrice"].ToString();
                                                }
                                                float.TryParse(unitprice, out rate);
                                            }
                                            if (DispMode == "Others")
                                            {
                                                String unitprice = drprdt["unitprice"].ToString();
                                                if (unitprice == "0")
                                                {
                                                    unitprice = drprdt["BUnitPrice"].ToString();
                                                }
                                                float.TryParse(unitprice, out rate);
                                            }
                                            if (UnitCost == "")
                                            {
                                            }
                                            else
                                            {
                                                rate = Price;
                                            }
                                            newrow["Discount"] = 0;
                                            double PAmount = 0;
                                            double tot_vatamount = 0;
                                            if (fromstate == tostate)
                                            {
                                                if (DispMode == "Staff" || DispMode == "AGENT" || DispMode == "Others" || DispMode == "Free" || DispMode == "LOCAL")
                                                {
                                                    double sgstamount = 0;
                                                    double cgstamount = 0;
                                                    double Igst = 0;
                                                    double Igstamount = 0;
                                                    double totRate = 0;
                                                    double.TryParse(dr["Igst"].ToString(), out Igst);
                                                    double Igstcon = 100 + Igst;
                                                    Igstamount = (rate / Igstcon) * Igst;
                                                    Igstamount = Math.Round(Igstamount, 2);
                                                    totRate = Igstamount;
                                                    double Vatrate = rate - totRate;
                                                    Vatrate = Math.Round(Vatrate, 2);
                                                    newrow["Rate"] = Vatrate.ToString();
                                                    PAmount = qty * Vatrate;
                                                    newrow["Taxable Value"] = Math.Round(PAmount, 2);
                                                    tot_vatamount = (PAmount * Igst) / 100;
                                                    sgstamount = (tot_vatamount / 2);
                                                    sgstamount = Math.Round(sgstamount, 2);
                                                    newrow["sgst"] = 0;
                                                    newrow["sgstamount"] = 0;
                                                    cgstamount = (tot_vatamount / 2);
                                                    cgstamount = Math.Round(cgstamount, 2);
                                                    newrow["cgst"] = 0;
                                                    newrow["cgstamount"] = 0;
                                                    newrow["Igst"] = 0;
                                                    newrow["Igstamount"] = 0;
                                                }
                                                else
                                                {
                                                    newrow["Rate"] = rate.ToString();
                                                    PAmount = qty * rate;
                                                    newrow["Taxable Value"] = Math.Round(PAmount, 2);
                                                    newrow["sgst"] = 0;
                                                    newrow["sgstamount"] = 0;
                                                    newrow["cgst"] = 0;
                                                    newrow["cgstamount"] = 0;
                                                    newrow["Igst"] = 0;
                                                    newrow["Igstamount"] = 0;
                                                }
                                            }
                                            else
                                            {
                                                double Igst = 0;
                                                double Igstamount = 0;
                                                double totRate = 0;
                                                double.TryParse(dr["Igst"].ToString(), out Igst);
                                                double Igstcon = 100 + Igst;
                                                Igstamount = (rate / Igstcon) * Igst;
                                                Igstamount = Math.Round(Igstamount, 2);
                                                totRate = Igstamount;
                                                double Vatrate = rate - totRate;
                                                Vatrate = Math.Round(Vatrate, 2);
                                                newrow["Rate"] = Vatrate.ToString();
                                                PAmount = qty * Vatrate;
                                                newrow["Taxable Value"] = Math.Round(PAmount, 2);
                                                tot_vatamount = (PAmount * Igst) / 100;
                                                newrow["sgst"] = 0;
                                                newrow["sgstamount"] = 0;
                                                newrow["cgst"] = 0;
                                                newrow["cgstamount"] = 0;
                                                newrow["Igst"] = 0;
                                                tot_vatamount = Math.Round(tot_vatamount, 2);
                                                newrow["Igstamount"] = 0;
                                            }
                                            double tot_amount = PAmount;
                                            tot_amount = Math.Round(tot_amount, 2);
                                            newrow["totalamount"] = tot_amount;
                                            dtTotQty.Rows.Add(newrow);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    List<dcproductDetails> DcDetailslist = new List<dcproductDetails>();
                    foreach (DataRow dr in dtTotQty.Rows)
                    {
                        dcproductDetails getProducts = new dcproductDetails();
                        getProducts.sno = dr["Sl No"].ToString();
                        getProducts.itemcode = dr["itemcode"].ToString();
                        getProducts.ProductName = dr["Product Name"].ToString();
                        getProducts.qty = dr["Qty"].ToString();
                        getProducts.hsncode = dr["HSN Code"].ToString();
                        getProducts.uom = dr["Uom"].ToString();
                        getProducts.uomqty = dr["Uomqty"].ToString();
                        getProducts.rate = dr["Rate"].ToString();
                        getProducts.discount = dr["Discount"].ToString();
                        getProducts.taxablevalue = dr["Taxable Value"].ToString();
                        getProducts.sgst = dr["sgst"].ToString();
                        getProducts.sgstamount = dr["sgstamount"].ToString();
                        getProducts.cgst = dr["cgst"].ToString();
                        getProducts.cgstamount = dr["cgstamount"].ToString();
                        getProducts.igst = dr["igst"].ToString();
                        getProducts.igstamount = dr["igstamount"].ToString();
                        getProducts.totalamount = dr["totalamount"].ToString();
                        DcDetailslist.Add(getProducts);
                    }
                    foreach (DataRow dr in dtInventory.Rows)
                    {
                        dcproductDetails getProducts = new dcproductDetails();
                        getProducts.itemcode = "Inventory";
                        getProducts.ProductName = dr["InvName"].ToString();
                        int qty = 0;
                        int.TryParse(dr["Qty"].ToString(), out qty);
                        if (qty > 0)
                        {
                            getProducts.qty = dr["Qty"].ToString();
                            DcDetailslist.Add(getProducts);
                        }
                    }
                    string response = GetJson(DcDetailslist);
                    context.Response.Write(response);
                }
                else
                {
                    string msg = "No data found";
                    string response = GetJson(msg);
                    context.Response.Write(response);
                }
            }
        }
        catch (Exception ex)
        {
        }
    }
    public class dcproductDetails
    {
        public string sno { get; set; }
        public string ProductName { get; set; }
        public string qty { get; set; }
        public string crates { get; set; }
        public string cans { get; set; }
        public string rate { get; set; }
        public string amount { get; set; }
        public string OfferQty { get; set; }
        public string uomqty { get; set; }
        public string hsncode { get; set; }
        public string uom { get; set; }
        public string discount { get; set; }
        public string taxablevalue { get; set; }
        public string sgst { get; set; }
        public string sgstamount { get; set; }
        public string cgst { get; set; }
        public string cgstamount { get; set; }
        public string igst { get; set; }
        public string igstamount { get; set; }
        public string itemcode { get; set; }
        public string totalamount { get; set; }
    }
    private void get_DeliveryChallan_click(HttpContext context)
    {
        try
        {

            vdbmngr = new VehicleDBMgr();

            DateTime ServerDateCurrentdate = VehicleDBMgr.GetTime(vdbmngr.conn);
            DateTime dtapril = new DateTime();
            DateTime dtmarch = new DateTime();
            int currentyear = ServerDateCurrentdate.Year;
            int nextyear = ServerDateCurrentdate.Year + 1;
            int currntyearnum = 0;
            int nextyearnum = 0;
            if (ServerDateCurrentdate.Month > 3)
            {
                string apr = "4/1/" + currentyear;
                dtapril = DateTime.Parse(apr);
                string march = "3/31/" + nextyear;
                dtmarch = DateTime.Parse(march);
                currntyearnum = currentyear;
                nextyearnum = nextyear;
            }
            if (ServerDateCurrentdate.Month <= 3)
            {
                if (ServerDateCurrentdate.Day == 31 && ServerDateCurrentdate.Month == 3)
                {
                    string apr = "3/31/" + currentyear;
                    dtapril = DateTime.Parse(apr);
                    string march = "3/31/" + nextyear;
                    dtmarch = DateTime.Parse(march);
                }
                else
                {
                    string apr = "4/1/" + (currentyear - 1);
                    dtapril = DateTime.Parse(apr);
                    string march = "3/31/" + (nextyear - 1);
                    dtmarch = DateTime.Parse(march);
                }
            }
            string BranchId = "";
            string DcNo = "";
            string assigndate = "";
            string DispMode = "";
            string PlanTime = "";
            string DispatchName = "";
            string DispType = "";
            //string Refdcno = "";
            string Employeename = "";
            //string Dispatchsno = "";
            string refdcno = context.Request["refdcno"];
            string fromstate = context.Session["stateid"].ToString();
            string DcType = context.Request["DcType"].ToString();
            string tostate = "";
            if (DcType == "NonTax")
            {
                cmd = new MySqlCommand("SELECT branchdata.city,branchdata.branchcode, branchdata.statename, branchdata.gstno, tripdata.BranchID, tripdata.AssignDate, tripdata.Sno, tripdata.DCNo,tripdata.taxdcno,tripdata.DispTime, tripdata.VehicleNo, dispatch.DispType, dispatch.BranchID AS Agentid, dispatch.DispMode, dispatch.DispName AS DispatchName, dispatch.sno AS dispsno, empmanage_1.EmpName AS Employee, empmanage.EmpName AS dispather, branchdata.stateid, statemastar.statename AS BranchState, statemastar.gststatecode FROM branchdata INNER JOIN empmanage empmanage_1 ON branchdata.sno = empmanage_1.Branch INNER JOIN statemastar ON branchdata.stateid = statemastar.sno RIGHT OUTER JOIN tripdata INNER JOIN triproutes ON tripdata.Sno = triproutes.Tripdata_sno INNER JOIN dispatch ON triproutes.RouteID = dispatch.sno LEFT OUTER JOIN empmanage ON tripdata.DEmpId = empmanage.Sno ON empmanage_1.Sno = tripdata.EmpId WHERE (tripdata.Sno = @tripsno)");
                cmd.Parameters.AddWithValue("@tripsno", refdcno);
                DataTable dtdetails = vdbmngr.SelectQuery(cmd).Tables[0];
                List<DcmainDetails> DcDetailslist = new List<DcmainDetails>();
                DcmainDetails GetDetails = new DcmainDetails();
                string BRANCHCODE = "";
                cmd = new MySqlCommand("SELECT branchdata.BranchCode,branchdata.phonenumber,branchdata.emailid, statemastar.statecode, branchdata.BranchName, branchdata.tbranchname, branchdata.statename, branchdata.city, branchdata.street, branchdata.mandal, branchdata.district, branchdata.pincode, branchdata.cst,  branchdata.gstno, branchdata.doorno, branchdata.area FROM branchdata INNER JOIN statemastar ON branchdata.stateid = statemastar.sno WHERE (branchdata.sno = @BranchID)");
                cmd.Parameters.AddWithValue("@BranchID", context.Session["branch"].ToString());
                DataTable dtbranchaddress = vdbmngr.SelectQuery(cmd).Tables[0];
                if (dtdetails.Rows.Count > 0)
                {
                    foreach (DataRow dr in dtdetails.Rows)
                    {
                        tostate = dr["stateid"].ToString();
                        assigndate = dr["AssignDate"].ToString();
                        GetDetails.vehicleno = dr["VehicleNo"].ToString();
                        DispatchName = dr["DispatchName"].ToString();
                        GetDetails.Refdcno = dr["Sno"].ToString();
                        GetDetails.Dispatchsno = dr["dispsno"].ToString();
                        Employeename = dr["Employee"].ToString();
                        PlanTime = dr["DispTime"].ToString();
                        DispMode = dr["DispMode"].ToString();
                        GetDetails.dispmode = DispMode;
                        string BranchID = dr["Agentid"].ToString();
                        cmd = new MySqlCommand("SELECT branchdata.sno, branchdata.BranchName, branchdata.SalesType, branchdata.Lat, branchdata.Lng, branchdata.Radius, branchdata.phonenumber, branchdata.emailid, branchdata.userdata_sno, branchdata.flag,  branchdata.WTarget, branchdata.MTarget, branchdata.DTarget, branchdata.CollectionType, branchdata.Address, branchdata.DateOfEntry, branchdata.incentiveStructure_sno, branchdata.OrtherBrands,  branchdata.ShopName, branchdata.SalesOfficeID, branchdata.RouteID, branchdata.BranchCode, branchdata.phonenumber2, branchdata.duelimit, branchdata.TinNumber, branchdata.Shop_Photo,  branchdata.SalesRepresentative, branchdata.Due_Limit_Days, branchdata.Due_Limit_Type, branchdata.Agent_PIC, branchdata.tbranchname, branchdata.ladger_dr, branchdata.statename,  branchdata.incentivename, branchdata.panno, branchdata.customercode, branchdata.whcode, branchdata.ladger_dr_code, branchdata.tax, branchdata.ntax, branchdata.ledger_jv_code, branchdata.companyname,  branchdata.street, branchdata.city, branchdata.mandal, branchdata.district, branchdata.pincode, branchdata.cst, branchdata.email, branchdata.gstno, branchdata.doorno, branchdata.area, branchdata.bankid,  branchdata.ifsccode, branchdata.accountno, branchdata.regtype, branchdata.stateid, branchdata.tollfreeno, statemastar.statename AS BranchState, statemastar.gststatecode FROM branchdata INNER JOIN statemastar ON branchdata.stateid = statemastar.sno WHERE (branchdata.sno = @Agentid)");
                        cmd.Parameters.AddWithValue("@Agentid", BranchID);
                        DataTable dtagentaddress = vdbmngr.SelectQuery(cmd).Tables[0];
                        if (dtagentaddress.Rows.Count > 0)
                        {
                            if (DispMode == "LOCAL" || DispMode == "Staff")
                            {
                                string address = dtagentaddress.Rows[0]["street"].ToString() + "," + dtagentaddress.Rows[0]["city"].ToString() + "," + dtagentaddress.Rows[0]["district"].ToString() + " District -" + dtagentaddress.Rows[0]["pincode"].ToString();
                                GetDetails.AgentAddress = address;// dtagentaddress.Rows[0]["Address"].ToString();
                                GetDetails.city = dtagentaddress.Rows[0]["city"].ToString();
                                GetDetails.phoneno = dtagentaddress.Rows[0]["phonenumber"].ToString();
                                GetDetails.email = dtagentaddress.Rows[0]["emailid"].ToString();
                                GetDetails.togstin = dtagentaddress.Rows[0]["gstno"].ToString();
                                GetDetails.tostatename = context.Session["statename"].ToString();
                                GetDetails.tostatecode = context.Session["statecode"].ToString();
                            }
                            else
                            {
                                string address = dtagentaddress.Rows[0]["street"].ToString() + "," + dtagentaddress.Rows[0]["city"].ToString() + "," + dtagentaddress.Rows[0]["district"].ToString() + " District -" + dtagentaddress.Rows[0]["pincode"].ToString();
                                GetDetails.AgentAddress = address;// dtagentaddress.Rows[0]["Address"].ToString();
                                GetDetails.city = dtagentaddress.Rows[0]["city"].ToString();
                                GetDetails.phoneno = dtagentaddress.Rows[0]["phonenumber"].ToString();
                                GetDetails.email = dtagentaddress.Rows[0]["emailid"].ToString();
                                GetDetails.togstin = dtagentaddress.Rows[0]["gstno"].ToString();
                                GetDetails.tostatename = dtagentaddress.Rows[0]["BranchState"].ToString();
                                GetDetails.tostatecode = dtagentaddress.Rows[0]["gststatecode"].ToString();
                            }
                        }

                        DispType = dr["DispType"].ToString();
                        DcNo = dr["DCno"].ToString();
                        int countdc = 0;
                        int.TryParse(DcNo, out countdc);
                        if (countdc <= 10)
                        {
                            DcNo = "0000" + countdc;
                        }
                        if (countdc >= 10 && countdc <= 99)
                        {
                            DcNo = "000" + countdc;
                        }
                        if (countdc >= 99 && countdc <= 999)
                        {
                            DcNo = "00" + countdc;
                        }
                        if (countdc > 999 && countdc <= 9999)
                        {
                            DcNo = "0" + countdc;
                        }
                        if (countdc > 9999)
                        {
                            DcNo = "" + countdc;
                        }
                        BranchId = dr["BranchID"].ToString();
                        if (dr["dispather"].ToString() == "")
                        {
                            GetDetails.Dispatcher = "DISPATCHER";
                        }
                        else
                        {
                            GetDetails.Dispatcher = dr["dispather"].ToString();
                        }
                        if (fromstate == tostate)
                        {
                            if (DispMode == "SM" || DispMode == "LOCAL" || DispMode == "Staff" || DispMode == "AGENT" || DispMode == "Free")
                            {
                                GetDetails.dctype = "Bill of Supply";
                                BRANCHCODE = dtbranchaddress.Rows[0]["BranchCode"].ToString() + "/";
                                DcNo = BRANCHCODE + dtapril.ToString("yy") + "-" + dtmarch.ToString("yy") + "N/" + DcNo;

                            }
                            else
                            {
                                string branchID = dr["BranchID"].ToString(); ;
                                if (branchID == "1" || dr["DispType"].ToString() == "SM")
                                {
                                    GetDetails.dctype = "Bill of Supply";
                                    BRANCHCODE = dtbranchaddress.Rows[0]["BranchCode"].ToString() + "/";
                                    DcNo = BRANCHCODE + dtapril.ToString("yy") + "-" + dtmarch.ToString("yy") + "N/" + DcNo;
                                }
                                else
                                {
                                    GetDetails.dctype = "STOCK TRANSFER";
                                    BRANCHCODE = dtbranchaddress.Rows[0]["BranchCode"].ToString() + "/";
                                    DcNo = BRANCHCODE + dtapril.ToString("yy") + "-" + dtmarch.ToString("yy") + "S/" + DcNo;
                                }
                            }
                        }
                        else
                        {
                            GetDetails.dctype = "STOCK TRANSFER";
                            BRANCHCODE = dtbranchaddress.Rows[0]["BranchCode"].ToString() + "/";
                            DcNo = BRANCHCODE + dtapril.ToString("yy") + "-" + dtmarch.ToString("yy") + "N/" + DcNo;
                        }
                        GetDetails.companyphone = dtbranchaddress.Rows[0]["phonenumber"].ToString();
                        GetDetails.companyemail = dtbranchaddress.Rows[0]["emailid"].ToString();
                        GetDetails.city = dr["city"].ToString();
                        GetDetails.fromstatename = context.Session["statename"].ToString();
                        GetDetails.fromstatecode = context.Session["statecode"].ToString();
                        GetDetails.fromgstin = context.Session["gstin"].ToString();
                        GetDetails.branchname = context.Session["branchname"].ToString();
                    }
                    GetDetails.DcNo = DcNo;
                    DateTime dtassigndate = Convert.ToDateTime(assigndate);
                    string date = dtassigndate.ToString("dd/MMM/yyyy");
                    string strassigndate = dtassigndate.ToString();
                    GetDetails.assigndate = strassigndate;
                    if (PlanTime == "")
                    {
                    }
                    else
                    {
                        DateTime dtPlantime = Convert.ToDateTime(PlanTime);
                        string time = dtPlantime.ToString("dd/MMM/yyyy");
                        string strPlantime = dtPlantime.ToString();
                        string[] DateTime = strPlantime.Split(' ');
                        string[] PlanDateTime = strPlantime.Split(' ');
                        GetDetails.assigndate = date;
                        GetDetails.PlanTime = PlanDateTime[1];
                    }
                    if (DispMode == "LOCAL" || DispMode == "Staff" || DispMode == "AGENT")
                    {
                        GetDetails.partyname = DispatchName;
                        GetDetails.routename = "";
                    }
                    else
                    {
                        GetDetails.partyname = Employeename;
                        GetDetails.routename = DispatchName;
                    }
                }
                if (dtbranchaddress.Rows.Count > 0)
                {
                    string address = dtbranchaddress.Rows[0]["doorno"].ToString() + "," + dtbranchaddress.Rows[0]["street"].ToString() + "," + dtbranchaddress.Rows[0]["area"].ToString() + "," + dtbranchaddress.Rows[0]["mandal"].ToString() + "," + dtbranchaddress.Rows[0]["city"].ToString() + "," + dtbranchaddress.Rows[0]["district"].ToString() + " District -" + dtbranchaddress.Rows[0]["pincode"].ToString();
                    GetDetails.Address = address;
                }
                GetDetails.Title = context.Session["TitleName"].ToString();
                GetDetails.tinNo = context.Session["TinNo"].ToString();
                DcDetailslist.Add(GetDetails);
                string response = GetJson(DcDetailslist);
                context.Response.Write(response);
            }
            else
            {
                cmd = new MySqlCommand("SELECT branchdata.city,branchdata.branchcode, branchdata.statename, branchdata.gstno, tripdata.BranchID, tripdata.AssignDate, tripdata.Sno, tripdata.taxdcno AS DCNo, tripdata.DispTime, tripdata.VehicleNo, dispatch.DispType, dispatch.BranchID AS Agentid, dispatch.DispMode, dispatch.DispName AS DispatchName, dispatch.sno AS dispsno, empmanage_1.EmpName AS Employee, empmanage.EmpName AS dispather, branchdata.stateid, statemastar.statename AS BranchState, statemastar.gststatecode FROM branchdata INNER JOIN empmanage empmanage_1 ON branchdata.sno = empmanage_1.Branch INNER JOIN statemastar ON branchdata.stateid = statemastar.sno RIGHT OUTER JOIN tripdata INNER JOIN triproutes ON tripdata.Sno = triproutes.Tripdata_sno INNER JOIN dispatch ON triproutes.RouteID = dispatch.sno LEFT OUTER JOIN empmanage ON tripdata.DEmpId = empmanage.Sno ON empmanage_1.Sno = tripdata.EmpId WHERE (tripdata.Sno = @tripsno)");
                cmd.Parameters.AddWithValue("@tripsno", refdcno);
                DataTable dtdetails = vdbmngr.SelectQuery(cmd).Tables[0];
                List<DcmainDetails> DcDetailslist = new List<DcmainDetails>();
                DcmainDetails GetDetails = new DcmainDetails();
                string BRANCHCODE = "";
                cmd = new MySqlCommand("SELECT branchdata.BranchCode,branchdata.phonenumber,branchdata.emailid, statemastar.statecode, branchdata.BranchName, branchdata.tbranchname, branchdata.statename, branchdata.city, branchdata.street, branchdata.mandal, branchdata.district, branchdata.pincode, branchdata.cst,  branchdata.gstno, branchdata.doorno, branchdata.area FROM branchdata INNER JOIN statemastar ON branchdata.stateid = statemastar.sno WHERE (branchdata.sno = @BranchID)");
                cmd.Parameters.AddWithValue("@BranchID", context.Session["branch"].ToString());
                DataTable dtbranchaddress = vdbmngr.SelectQuery(cmd).Tables[0];
                if (dtdetails.Rows.Count > 0)
                {
                    foreach (DataRow dr in dtdetails.Rows)
                    {
                        tostate = dr["stateid"].ToString();
                        assigndate = dr["AssignDate"].ToString();
                        GetDetails.vehicleno = dr["VehicleNo"].ToString();
                        DispatchName = dr["DispatchName"].ToString();
                        GetDetails.Refdcno = dr["Sno"].ToString();
                        GetDetails.Dispatchsno = dr["dispsno"].ToString();
                        Employeename = dr["Employee"].ToString();
                        PlanTime = dr["DispTime"].ToString();
                        DispMode = dr["DispMode"].ToString();
                        GetDetails.dispmode = DispMode;
                        string BranchID = dr["Agentid"].ToString();
                        cmd = new MySqlCommand("SELECT branchdata.sno, branchdata.BranchName, branchdata.SalesType, branchdata.Lat, branchdata.Lng, branchdata.Radius, branchdata.phonenumber, branchdata.emailid, branchdata.userdata_sno, branchdata.flag,  branchdata.WTarget, branchdata.MTarget, branchdata.DTarget, branchdata.CollectionType, branchdata.Address, branchdata.DateOfEntry, branchdata.incentiveStructure_sno, branchdata.OrtherBrands,  branchdata.ShopName, branchdata.SalesOfficeID, branchdata.RouteID, branchdata.BranchCode, branchdata.phonenumber2, branchdata.duelimit, branchdata.TinNumber, branchdata.Shop_Photo,  branchdata.SalesRepresentative, branchdata.Due_Limit_Days, branchdata.Due_Limit_Type, branchdata.Agent_PIC, branchdata.tbranchname, branchdata.ladger_dr, branchdata.statename,  branchdata.incentivename, branchdata.panno, branchdata.customercode, branchdata.whcode, branchdata.ladger_dr_code, branchdata.tax, branchdata.ntax, branchdata.ledger_jv_code, branchdata.companyname,  branchdata.street, branchdata.city, branchdata.mandal, branchdata.district, branchdata.pincode, branchdata.cst, branchdata.email, branchdata.gstno, branchdata.doorno, branchdata.area, branchdata.bankid,  branchdata.ifsccode, branchdata.accountno, branchdata.regtype, branchdata.stateid, branchdata.tollfreeno, statemastar.statename AS BranchState, statemastar.gststatecode FROM branchdata INNER JOIN statemastar ON branchdata.stateid = statemastar.sno WHERE (branchdata.sno = @Agentid)");
                        cmd.Parameters.AddWithValue("@Agentid", BranchID);
                        DataTable dtagentaddress = vdbmngr.SelectQuery(cmd).Tables[0];
                        if (dtagentaddress.Rows.Count > 0)
                        {
                            if (DispMode == "LOCAL" || DispMode == "Staff")
                            {
                                string address = dtagentaddress.Rows[0]["street"].ToString() + "," + dtagentaddress.Rows[0]["city"].ToString() + "," + dtagentaddress.Rows[0]["district"].ToString() + " District -" + dtagentaddress.Rows[0]["pincode"].ToString();
                                GetDetails.AgentAddress = address;// dtagentaddress.Rows[0]["Address"].ToString();
                                GetDetails.city = dtagentaddress.Rows[0]["city"].ToString();
                                GetDetails.phoneno = dtagentaddress.Rows[0]["phonenumber"].ToString();
                                GetDetails.email = dtagentaddress.Rows[0]["emailid"].ToString();
                                GetDetails.togstin = dtagentaddress.Rows[0]["gstno"].ToString();
                                GetDetails.tostatename = context.Session["statename"].ToString();
                                GetDetails.tostatecode = context.Session["statecode"].ToString();
                            }
                            else
                            {
                                string address = dtagentaddress.Rows[0]["street"].ToString() + "," + dtagentaddress.Rows[0]["city"].ToString() + "," + dtagentaddress.Rows[0]["district"].ToString() + " District -" + dtagentaddress.Rows[0]["pincode"].ToString();
                                GetDetails.AgentAddress = address;
                                GetDetails.city = dtagentaddress.Rows[0]["city"].ToString();
                                GetDetails.phoneno = dtagentaddress.Rows[0]["phonenumber"].ToString();
                                GetDetails.email = dtagentaddress.Rows[0]["emailid"].ToString();
                                GetDetails.togstin = dtagentaddress.Rows[0]["gstno"].ToString();
                                GetDetails.tostatename = dtagentaddress.Rows[0]["BranchState"].ToString();
                                GetDetails.tostatecode = dtagentaddress.Rows[0]["gststatecode"].ToString();
                            }
                        }
                        DispType = dr["DispType"].ToString();
                        DcNo = dr["DCNo"].ToString();
                        int countdc = 0;
                        int.TryParse(DcNo, out countdc);
                        if (countdc <= 10)
                        {
                            DcNo = "0000" + countdc;
                        }
                        if (countdc >= 10 && countdc <= 99)
                        {
                            DcNo = "000" + countdc;
                        }
                        if (countdc >= 99 && countdc <= 999)
                        {
                            DcNo = "00" + countdc;
                        }
                        if (countdc > 999 && countdc <= 9999)
                        {
                            DcNo = "0" + countdc;
                        }
                        if (countdc > 9999)
                        {
                            DcNo = "" + countdc;
                        }
                        BranchId = dr["BranchID"].ToString();
                        if (dr["dispather"].ToString() == "")
                        {
                            GetDetails.Dispatcher = "DISPATCHER";
                        }
                        else
                        {
                            GetDetails.Dispatcher = dr["dispather"].ToString();
                        }
                        if (fromstate == tostate)
                        {
                            if (DispMode == "LOCAL" || DispMode == "Staff" || DispMode == "AGENT" || DispMode == "Free")
                            {
                                GetDetails.dctype = "Tax Invoice";
                                BRANCHCODE = dtbranchaddress.Rows[0]["BranchCode"].ToString() + "/"; ;
                                DcNo = BRANCHCODE + dtapril.ToString("yy") + "-" + dtmarch.ToString("yy") + "T/" + DcNo;
                            }
                            else
                            {
                                //string branchID = context.Session["branch"].ToString();
                                string branchID = dr["BranchID"].ToString(); ;
                                if (branchID == "1" || dr["DispType"].ToString() == "SM")
                                {
                                    GetDetails.dctype = "Tax Invoice";
                                    BRANCHCODE = dtbranchaddress.Rows[0]["BranchCode"].ToString() + "/"; ;
                                    DcNo = BRANCHCODE + dtapril.ToString("yy") + "-" + dtmarch.ToString("yy") + "T/" + DcNo;
                                }
                                else
                                {
                                    GetDetails.dctype = "STOCK TRANSFER";
                                    BRANCHCODE = dtbranchaddress.Rows[0]["BranchCode"].ToString() + "/"; ;
                                    DcNo = BRANCHCODE + dtapril.ToString("yy") + "-" + dtmarch.ToString("yy") + "S/" + DcNo;
                                }
                            }
                        }
                        else
                        {
                            GetDetails.dctype = "STOCK TRANSFER";
                            BRANCHCODE = dtbranchaddress.Rows[0]["BranchCode"].ToString() + "/";
                            DcNo = BRANCHCODE + dtapril.ToString("yy") + "-" + dtmarch.ToString("yy") + "T/" + DcNo;
                        }
                        GetDetails.companyphone = dtbranchaddress.Rows[0]["phonenumber"].ToString();
                        GetDetails.companyemail = dtbranchaddress.Rows[0]["emailid"].ToString();
                        GetDetails.city = dr["city"].ToString();
                        GetDetails.fromstatename = context.Session["statename"].ToString();
                        GetDetails.fromstatecode = context.Session["statecode"].ToString();
                        GetDetails.fromgstin = context.Session["gstin"].ToString();
                        GetDetails.branchname = context.Session["branchname"].ToString();
                    }
                    GetDetails.DcNo = DcNo;
                    DateTime dtassigndate = Convert.ToDateTime(assigndate);
                    string date = dtassigndate.ToString("dd/MMM/yyyy");
                    string strassigndate = dtassigndate.ToString();
                    GetDetails.assigndate = strassigndate;
                    if (PlanTime == "")
                    {
                    }
                    else
                    {
                        DateTime dtPlantime = Convert.ToDateTime(PlanTime);
                        string time = dtPlantime.ToString("dd/MMM/yyyy");
                        string strPlantime = dtPlantime.ToString();
                        string[] DateTime = strPlantime.Split(' ');
                        string[] PlanDateTime = strPlantime.Split(' ');
                        GetDetails.assigndate = date;
                        GetDetails.PlanTime = PlanDateTime[1];
                    }
                    if (DispMode == "LOCAL" || DispMode == "Staff" || DispMode == "AGENT")
                    {
                        GetDetails.partyname = DispatchName;
                        GetDetails.routename = "";
                    }
                    else
                    {
                        GetDetails.partyname = Employeename;
                        GetDetails.routename = DispatchName;
                    }
                }
                if (dtbranchaddress.Rows.Count > 0)
                {
                    string address = dtbranchaddress.Rows[0]["doorno"].ToString() + "," + dtbranchaddress.Rows[0]["street"].ToString() + "," + dtbranchaddress.Rows[0]["area"].ToString() + "," + dtbranchaddress.Rows[0]["mandal"].ToString() + "," + dtbranchaddress.Rows[0]["city"].ToString() + "," + dtbranchaddress.Rows[0]["district"].ToString() + " District -" + dtbranchaddress.Rows[0]["pincode"].ToString();
                    GetDetails.Address = address;//dtagentaddress.Rows[0]["Address"].ToString();
                }
                GetDetails.Title = context.Session["TitleName"].ToString();
                GetDetails.tinNo = context.Session["TinNo"].ToString();
                DcDetailslist.Add(GetDetails);
                string response = GetJson(DcDetailslist);
                context.Response.Write(response);
            }
        }
        catch
        {
        }
    }
    public class DcmainDetails
    {
        public string Title { get; set; }
        public string Address { get; set; }
        public string tinNo { get; set; }
        public string partyname { get; set; }
        public string routename { get; set; }
        public string assigndate { get; set; }
        public string DcNo { get; set; }
        public string PlanTime { get; set; }
        public string vehicleno { get; set; }
        public string Refdcno { get; set; }
        public string Dispatchsno { get; set; }
        public string Dispatcher { get; set; }
        public string dctype { get; set; }
        public string AgentAddress { get; set; }
        public string gstin { get; set; }
        public string fromgstin { get; set; }
        public string tostatename { get; set; }
        public string tostatecode { get; set; }
        public string fromstatename { get; set; }
        public string fromstatecode { get; set; }
        public string branchname { get; set; }
        public string city { get; set; }
        public string phoneno { get; set; }
        public string email { get; set; }
        public string dispmode { get; set; }
        public string togstin { get; set; }
        public string companyphone { get; set; }
        public string companyemail { get; set; }
        public string tollfree { get; set; }
    }

    public class DcDetails
    {
        public string BranchName { get; set; }
        public string DCNumber { get; set; }
        public string Dcdate { get; set; }
        public string Status { get; set; }
        public string Stocktransfer { get; set; }
        public string SBranchid { get; set; }
        public string Branchid { get; set; }
        public string TripId { get; set; }
        public string AssignDate { get; set; }
        public string Permissions { get; set; }
        public string VehicleNo { get; set; }
        public string DispatchName { get; set; }
        public string Employee { get; set; }
    }
    private void get_DC_details_click(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            string fromdate = context.Request["fromdate"];
            string ToDate = context.Request["ToDate"];
            DateTime dtFromdate = Convert.ToDateTime(fromdate);
            DateTime dtTodate = Convert.ToDateTime(ToDate);
            string br = context.Session["branch"].ToString();
            if (context.Session["salestype"].ToString() == "Plant")
            {

                cmd = new MySqlCommand("SELECT tripdata.Sno AS TripId, DATE_FORMAT(tripdata.AssignDate, '%d %b %y') AS AssignDate, tripdata.Permissions, tripdata.VehicleNo, dispatch.DispName AS DispatchName,dispatch.DispMode,dispatch.DispType, empmanage.EmpName AS Employee FROM tripdata INNER JOIN empmanage ON tripdata.EmpId = empmanage.Sno INNER JOIN triproutes ON tripdata.Sno = triproutes.Tripdata_sno INNER JOIN dispatch ON triproutes.RouteID = dispatch.sno  WHERE (tripdata.Status <> 'c') and (tripdata.DespatchStatus=@DespatchStatus) AND (tripdata.AssignDate BETWEEN @Adt AND @Adt1) AND (tripdata.Permissions LIKE '%D%') AND (dispatch.Branch_Id = @brnch) order by TripId");
                cmd.Parameters.AddWithValue("@UserName", context.Session["UserName"]);
                cmd.Parameters.AddWithValue("@DespatchStatus", "Yes");
                cmd.Parameters.AddWithValue("@brnch", context.Session["branch"]);
            }
            else
            {
                cmd = new MySqlCommand("SELECT tripdata.Sno AS TripId, DATE_FORMAT(tripdata.AssignDate, '%d %b %y') AS AssignDate, tripdata.Permissions, tripdata.VehicleNo,dispatch.DispName AS DispatchName, dispatch.DispMode,dispatch.DispType,empmanage.EmpName AS Employee FROM tripdata INNER JOIN empmanage ON tripdata.EmpId = empmanage.Sno INNER JOIN triproutes ON tripdata.Sno = triproutes.Tripdata_sno INNER JOIN dispatch ON triproutes.RouteID = dispatch.sno INNER JOIN branchdata ON empmanage.Branch = branchdata.sno WHERE (tripdata.Status <> 'c') AND (tripdata.AssignDate BETWEEN @Adt AND @Adt1) AND (tripdata.Permissions LIKE '%D%') AND (empmanage.Branch = @brnch) OR (tripdata.Status <> 'c') AND (tripdata.AssignDate BETWEEN @Adt AND @Adt1) AND (tripdata.Permissions LIKE '%D%') AND (branchdata.SalesOfficeID = @SOID) order by TripId");
                cmd.Parameters.AddWithValue("@brnch", context.Session["branch"]);
                cmd.Parameters.AddWithValue("@SOID", context.Session["branch"]);
            }
            cmd.Parameters.AddWithValue("@Adt", GetLowDate(dtFromdate));
            cmd.Parameters.AddWithValue("@Adt1", GetHighDate(dtTodate));
            DataTable dttripdata = vdbmngr.SelectQuery(cmd).Tables[0];

            List<DcDetails> DcDetailslist = new List<DcDetails>();
            foreach (DataRow dr in dttripdata.Rows)
            {
                DcDetails obj1 = new DcDetails();
                obj1.TripId = dr["TripId"].ToString();
                DateTime todate = Convert.ToDateTime(dr["AssignDate"].ToString());
                obj1.AssignDate = todate.ToString("dd/MMM/yyyy");
                obj1.Permissions = dr["Permissions"].ToString();
                obj1.VehicleNo = dr["VehicleNo"].ToString();
                obj1.DispatchName = dr["DispatchName"].ToString();
                obj1.Employee = dr["Employee"].ToString();
                DcDetailslist.Add(obj1);
            }
            string response = GetJson(DcDetailslist);
            context.Response.Write(response);
        }
        catch
        {
        }
    }
    private void Get_Dc_Details(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            DateTime ServerDateCurrentdate = VehicleDBMgr.GetTime(vdbmngr.conn);
            cmd = new MySqlCommand("SELECT tripdata.BranchID, tripdata.Sno, tripdata.Status, tripdata.I_date, tripdata.DCNo, tripdata.EmpId, empmanage.EmpName, tripdata.SOTransfer, branchdata.BranchName FROM  tripdata INNER JOIN empmanage ON tripdata.EmpId = empmanage.Sno INNER JOIN branchdata ON empmanage.Branch = branchdata.sno WHERE (tripdata.BranchID = @BranchID) AND (tripdata.I_date BETWEEN @d1 AND @d2) AND (tripdata.Status <> 'V' ) and (branchdata.BranchName <> @BranchName) ORDER BY branchdata.BranchName");
            cmd.Parameters.AddWithValue("@d1", GetLowDate(ServerDateCurrentdate).AddDays(-5));
            cmd.Parameters.AddWithValue("@d2", GetHighDate(ServerDateCurrentdate));
            cmd.Parameters.AddWithValue("@BranchID", context.Session["branch"].ToString());
            cmd.Parameters.AddWithValue("@Branchname", context.Session["branchname"].ToString());
            DataTable dtpo = vdbmngr.SelectQuery(cmd).Tables[0];
            List<DcDetails> DcDetailslist = new List<DcDetails>();
            foreach (DataRow dr in dtpo.Rows)
            {
                DcDetails obj1 = new DcDetails();
                obj1.BranchName = dr["BranchName"].ToString();
                obj1.DCNumber = dr["Sno"].ToString();
                DateTime todate = Convert.ToDateTime(dr["I_date"].ToString());
                obj1.Dcdate = todate.ToString("dd/MMM/yyyy");
                obj1.Status = dr["Status"].ToString();
                obj1.SBranchid = dr["BranchID"].ToString();
                string status1 = dr["SOTransfer"].ToString();
                if (status1 == "")
                {
                    status1 = "Pending";
                }
                if (status1 == "U")
                {
                    status1 = "Return Dc Completed";
                }
                if (status1 == "L")
                {
                    status1 = "Stock t/f completed";
                }
                obj1.Stocktransfer = status1;
                DcDetailslist.Add(obj1);
            }
            string response = GetJson(DcDetailslist);
            context.Response.Write(response);
        }
        catch
        {
        }
    }
    public class addressmaster
    {
        public string distributorname { get; set; }
        public string sno { get; set; }
        public string companyname { get; set; }
        public string buildingaddress { get; set; }
        public string street { get; set; }
        public string mandal { get; set; }
        public string panno { get; set; }
        public string district { get; set; }
        public string state { get; set; }
        public string pin { get; set; }
        public string tin { get; set; }
        public string cst { get; set; }
        public string email { get; set; }
        public string customercode { get; set; }
        public string msgtype { get; set; }
        public string Empname { get; set; }
        public string mobileno { get; set; }
    }
    private void saveAddressDetails(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            string companyname = context.Request["companyname"];
            string buildingaddress = context.Request["buildingaddress"];
            string street = context.Request["street"];
            string mandal = context.Request["mandal"];
            string district = context.Request["district"];
            string state = context.Request["state"];
            string pin = context.Request["pin"];
            string tin = context.Request["tin"];
            string cst = context.Request["cst"];
            string email = context.Request["email"];
            string panno = context.Request["panno"];
            string customercode = context.Request["customercode"];
            string btnSave = context.Request["btnVal"];
            if (btnSave == "save")
            {
                cmd = new MySqlCommand("insert into addresstable (companyname,buildingaddress,street,mandal,district,state,pin,tin,cst,email,panno,customercode) values (@companyname,@buildingaddress,@street,@mandal,@district,@state,@pin,@tin,@cst,@email,@panno,@customercode)");
                cmd.Parameters.AddWithValue("@companyname", companyname);
                cmd.Parameters.AddWithValue("@buildingaddress", buildingaddress);
                cmd.Parameters.AddWithValue("@street", street);
                cmd.Parameters.AddWithValue("@mandal", mandal);
                cmd.Parameters.AddWithValue("@district", district);
                cmd.Parameters.AddWithValue("@state", state);
                cmd.Parameters.AddWithValue("@pin", pin);
                cmd.Parameters.AddWithValue("@tin", tin);
                cmd.Parameters.AddWithValue("@cst", cst);
                cmd.Parameters.AddWithValue("@email", email);
                cmd.Parameters.AddWithValue("@panno", panno);
                cmd.Parameters.AddWithValue("@customercode", customercode);
                vdbmngr.insert(cmd);
                string msg = "Address detailes successfully Saved";
                string response = GetJson(msg);
                context.Response.Write(response);
            }
            else
            {
                string sno = context.Request["sno"];
                cmd = new MySqlCommand("Update addresstable set  panno=@panno,cst=@cst,email=@email,companyname=@companyname,buildingaddress=@buildingaddress,street=@street,mandal=@mandal,district=@district,state=@state,pin=@pin,tin=@tin,customercode=@customercode where sno=@sno ");
                cmd.Parameters.AddWithValue("@companyname", companyname);
                cmd.Parameters.AddWithValue("@buildingaddress", buildingaddress);
                cmd.Parameters.AddWithValue("@street", street);
                cmd.Parameters.AddWithValue("@mandal", mandal);
                cmd.Parameters.AddWithValue("@district", district);
                cmd.Parameters.AddWithValue("@state", state);
                cmd.Parameters.AddWithValue("@pin", pin);
                cmd.Parameters.AddWithValue("@tin", tin);
                cmd.Parameters.AddWithValue("@cst", cst);
                cmd.Parameters.AddWithValue("@email", email);
                cmd.Parameters.AddWithValue("@panno", panno);
                cmd.Parameters.AddWithValue("@customercode", customercode);
                cmd.Parameters.AddWithValue("@sno", sno);
                vdbmngr.Update(cmd);
                string msg = "Address detailes successfully Updated";
                string response = GetJson(msg);
                context.Response.Write(response);
            }
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }
    private void get_Address_details(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            string frmdate = context.Request["fromdate"];
            DateTime fromdate = Convert.ToDateTime(frmdate);
            string tdate = context.Request["todate"];
            DateTime todate = Convert.ToDateTime(tdate);
            cmd = new MySqlCommand("SELECT  sno,companyname,panno,buildingaddress,cst,email, street, mandal, district, state, pin, tin,customercode FROM  addresstable");
            DataTable dtaddress = vdbmngr.SelectQuery(cmd).Tables[0];
            List<addressmaster> addresslist = new List<addressmaster>();
            foreach (DataRow dr in dtaddress.Rows)
            {
                addressmaster obj1 = new addressmaster();
                obj1.sno = dr["sno"].ToString();
                obj1.companyname = dr["companyname"].ToString();
                obj1.buildingaddress = dr["buildingaddress"].ToString();
                obj1.street = dr["street"].ToString();
                obj1.mandal = dr["mandal"].ToString();
                obj1.district = dr["district"].ToString();
                obj1.state = dr["state"].ToString();
                obj1.pin = dr["pin"].ToString();
                obj1.tin = dr["tin"].ToString();
                obj1.cst = dr["pin"].ToString();
                obj1.email = dr["email"].ToString();
                obj1.panno = dr["panno"].ToString();
                obj1.customercode = dr["customercode"].ToString();

                obj1.sno = dr["sno"].ToString();
                addresslist.Add(obj1);
            }
            string response = GetJson(addresslist);
            context.Response.Write(response);
        }
        catch
        {
        }
    }
    public class statemaster
    {
        public string sno { get; set; }
        public string statename { get; set; }
        public string statecode { get; set; }
        public string ecode { get; set; }
        public string gststatecode { get; set; }
    }
    private bool UploadToFTP(HttpPostedFile fileToUpload, string filename)
    {
        string uploadUrl = "ftp://223.196.32.30:21/Sales/";
        try
        {
            FtpWebRequest del_request = (FtpWebRequest)WebRequest.Create(uploadUrl + @"/" + filename);
            del_request.Credentials = new NetworkCredential("ftpvys", "Vyshnavi123");
            del_request.Method = WebRequestMethods.Ftp.DeleteFile;
            FtpWebResponse delete_response = (FtpWebResponse)del_request.GetResponse();
            Console.WriteLine("Delete status: {0}", delete_response.StatusDescription);
            delete_response.Close();
        }
        catch
        {
        }
        FtpWebRequest request = (FtpWebRequest)WebRequest.Create(uploadUrl + @"/" + filename);
        request.Credentials = new NetworkCredential("ftpvys", "Vyshnavi123");
        request.Method = WebRequestMethods.Ftp.UploadFile;
        byte[] fileContents = null;
        using (var binaryReader = new BinaryReader(fileToUpload.InputStream))
        {
            fileContents = binaryReader.ReadBytes(fileToUpload.ContentLength);
        }
        request.ContentLength = fileContents.Length;
        Stream requestStream = request.GetRequestStream();
        requestStream.Write(fileContents, 0, fileContents.Length);
        requestStream.Close();
        FtpWebResponse response = (FtpWebResponse)request.GetResponse();
        response.Close();
        return true;
    }
    public class Agentclubbingcls
    {
        public string club_sno { get; set; }
        public string clubbingname { get; set; }
        public string agentid { get; set; }
        public string agentname { get; set; }
        public string agentamount { get; set; }
    }
    private void GetPieChart_ClassificationType(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            SalesDBManager obj = new SalesDBManager(1);
            DateTime FromDate = DateTime.Now;
            string StartDate = context.Request["startDate"];
            string ddlSalesOffice = context.Request["ddlSalesOffice"];
            DateTime fmdate = Convert.ToDateTime(StartDate);
            string enddate = context.Request["enddate"];
            DateTime fmenddate = Convert.ToDateTime(enddate);
            string time = fmdate.ToString("dd-MM-yyyy HH:mm");
            string[] fromdatestrig = time.Split(' ');
            if (fromdatestrig.Length > 1)
            {
                if (fromdatestrig[0].Split('-').Length > 0)
                {
                    string[] dates = fromdatestrig[0].Split('-');
                    string[] times = fromdatestrig[1].Split(':');
                    FromDate = new DateTime(int.Parse(dates[2]), int.Parse(dates[1]), int.Parse(dates[0]), int.Parse(times[0]), int.Parse(times[1]), 0);
                }
            }
            string ddlType = context.Request["ddlType"];
            List<PieValues> lPieValueslist = new List<PieValues>();
            List<string> RouteList = new List<string>();
            List<string> AmountList = new List<string>();
            List<string> DeliveryList = new List<string>();
            List<string> AvgQtyList = new List<string>();
            TimeSpan dateSpan = fmenddate.Subtract(fmdate);
            int NoOfdays = dateSpan.Days;

            cmd = new MySqlCommand("SELECT  ROUND(SUM(indents_subtable.unitQty), 2) AS unitQty,salestypemanagement.salestype , ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty, indents.I_date, indents_subtable.DTripId, branchroutes.BranchID, salestypemanagement.club_code FROM indents_subtable INNER JOIN indents ON indents_subtable.IndentNo = indents.IndentNo INNER JOIN branchdata ON indents.Branch_id = branchdata.sno INNER JOIN branchroutesubtable ON branchdata.sno = branchroutesubtable.BranchID INNER JOIN branchroutes ON branchroutesubtable.RefNo = branchroutes.Sno INNER JOIN salestypemanagement ON branchdata.SalesType = salestypemanagement.sno WHERE (indents.I_date BETWEEN @d1 AND @d2) AND (indents_subtable.DeliveryQty > 0) AND (branchroutes.BranchID = @BranchID)  GROUP BY salestypemanagement.club_code");
            cmd.Parameters.AddWithValue("@d1", CargoManagementSystem.DateConverter.GetLowDate(FromDate.AddDays(-1)));
            cmd.Parameters.AddWithValue("@d2", CargoManagementSystem.DateConverter.GetHighDate(fmenddate.AddDays(-1)));
            cmd.Parameters.AddWithValue("@BranchID", ddlSalesOffice);
            DataTable dtpie = vdbmngr.SelectQuery(cmd).Tables[0];
            double totalqty = 0;
            foreach (DataRow dr in dtpie.Rows)
            {
                double DeliveryQty = 0;
                double.TryParse(dr["DeliveryQty"].ToString(), out DeliveryQty);
                totalqty += DeliveryQty;
                totalqty = Math.Round(totalqty, 2);
            }
            foreach (DataRow dr in dtpie.Rows)
            {
                if (dr["club_code"].ToString() == "4")
                {
                    RouteList.Add("INSTITUTIONAL");
                }
                else
                {
                    RouteList.Add(dr["salestype"].ToString());
                }
                double DeliveryQty = 0;
                double.TryParse(dr["DeliveryQty"].ToString(), out DeliveryQty);
                double avgqty = 0;
                avgqty = DeliveryQty / NoOfdays;
                double percent = 0;
                percent = (DeliveryQty / totalqty) * 100;
                percent = Math.Round(percent, 2);
                avgqty = Math.Round(avgqty, 2);
                string Amount = percent.ToString();
                if (Amount == "")
                {
                    Amount = "0";
                }
                AmountList.Add(Amount);
                AvgQtyList.Add(avgqty.ToString());
                DeliveryList.Add(dr["DeliveryQty"].ToString());
            }

            PieValues GetPieValues = new PieValues();
            GetPieValues.RouteName = RouteList;
            GetPieValues.Amount = AmountList;
            GetPieValues.totalqty = totalqty.ToString();
            GetPieValues.DeliveryQty = DeliveryList;
            GetPieValues.AverageyQty = AvgQtyList;
            lPieValueslist.Add(GetPieValues);
            string errresponse = GetJson(lPieValueslist);
            context.Response.Write(errresponse);
        }
        catch
        {
        }
    }
    private void GetLineChart_classificationindentreport(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();

            string Fmdate = context.Request["startDate"];
            string SalesType = context.Request["classificationtype"];
            string SalesOffice = context.Request["SalesOffice"];
            string salestype = context.Request["salestype"];
            string ddldatatype = context.Request["ddldatatype"];

            string Type = context.Request["Type"];
            DateTime fmdate = Convert.ToDateTime(Fmdate);
            string CTime = fmdate.ToString();
            DateTime dtFrmDate = Convert.ToDateTime(CTime);
            DateTime FromDate = DateTime.Now;
            string toDate = context.Request["endDate"];
            DateTime tDate = Convert.ToDateTime(toDate);
            string CTTime = tDate.ToString();
            DateTime dttoDate = Convert.ToDateTime(CTTime);
            DateTime Enddate = DateTime.Now;
            string time = dtFrmDate.ToString("dd-MM-yyyy HH:mm");//
            string[] fromdatestrig = time.Split(' ');
            if (fromdatestrig.Length > 1)
            {
                if (fromdatestrig[0].Split('-').Length > 0)
                {
                    string[] dates = fromdatestrig[0].Split('-');
                    string[] times = fromdatestrig[1].Split(':');
                    FromDate = new DateTime(int.Parse(dates[2]), int.Parse(dates[1]), int.Parse(dates[0]), int.Parse(times[0]), int.Parse(times[1]), 0);
                }
            }
            string endtime = dttoDate.ToString("dd-MM-yyyy HH:mm");
            string[] endfromdatestrig = endtime.Split(' ');
            if (endfromdatestrig.Length > 1)
            {
                if (endfromdatestrig[0].Split('-').Length > 0)
                {
                    string[] dates = endfromdatestrig[0].Split('-');
                    string[] times = endfromdatestrig[1].Split(':');
                    Enddate = new DateTime(int.Parse(dates[2]), int.Parse(dates[1]), int.Parse(dates[0]), int.Parse(times[0]), int.Parse(times[1]), 0);
                }
            }
            List<LineChartValuesclass> LineChartValuelist = new List<LineChartValuesclass>();
            DataTable dtReport = new DataTable();
            if (Type == "Sales Office Wise")
            {
                if (ddldatatype == "Day Wise")
                {
                    cmd = new MySqlCommand("SELECT ROUND(SUM(indents_subtable.unitQty), 2) AS unitQty, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty, indents.I_date, indents_subtable.DTripId, branchroutes.BranchID FROM indents_subtable INNER JOIN indents ON indents_subtable.IndentNo = indents.IndentNo INNER JOIN branchdata ON indents.Branch_id = branchdata.sno INNER JOIN branchroutesubtable ON branchdata.sno = branchroutesubtable.BranchID INNER JOIN branchroutes ON branchroutesubtable.RefNo = branchroutes.Sno WHERE (indents.I_date BETWEEN @d1 AND @d2) AND (indents_subtable.DeliveryQty > 0) AND (branchroutes.BranchID = @BranchID) AND (branchdata.SalesType = @SalesType)  GROUP BY  DATE(indents.I_date)");
                    cmd.Parameters.AddWithValue("@d1", CargoManagementSystem.DateConverter.GetLowDate(FromDate.AddDays(-1)));
                    cmd.Parameters.AddWithValue("@d2", CargoManagementSystem.DateConverter.GetHighDate(Enddate.AddDays(-1)));
                    cmd.Parameters.AddWithValue("@BranchID", SalesOffice);
                    cmd.Parameters.AddWithValue("@SalesType", SalesType);
                    dtReport = vdbmngr.SelectQuery(cmd).Tables[0];
                    if (dtReport.Rows.Count > 0)
                    {
                        LineChartValuesclass getLineChart = new LineChartValuesclass();
                        List<string> unitlist = new List<string>();
                        List<string> Deliverlist = new List<string>();
                        List<string> Datelist = new List<string>();
                        List<string> Statuslist = new List<string>();
                        List<string> ActMillist = new List<string>();
                        string DelQty = "";
                        string IndDate = "";
                        string AvgMileage = "";
                        double avgSaleQty = 0;
                        int count = 0;
                        foreach (DataRow dr in dtReport.Rows)
                        {
                            string DeliveryQty = dr["DeliveryQty"].ToString();
                            DelQty += DeliveryQty + ",";
                            double milltr = 0;
                            double.TryParse(dr["DeliveryQty"].ToString(), out milltr);
                            avgSaleQty += milltr;
                            string IndentDate = dr["I_date"].ToString();
                            DateTime now = Convert.ToDateTime(IndentDate).AddDays(1);
                            string dayname = now.DayOfWeek.ToString();
                            DateTime dtIndentDate = Convert.ToDateTime(IndentDate).AddDays(1);
                            string ChangedTime = dtIndentDate.ToString("dd");
                            string newdate = ChangedTime + "/" + dayname;
                            IndDate += newdate + ",";
                            count++;
                        }
                        double avg = 0;
                        avg = (avgSaleQty / count);
                        avg = Math.Round(avg, 2);
                        foreach (DataRow dr in dtReport.Rows)
                        {
                            string TodayMileage = dr["DeliveryQty"].ToString();
                            if (TodayMileage != "0")
                            {
                                AvgMileage += avg.ToString() + ",";
                            }
                        }
                        AvgMileage = AvgMileage.Substring(0, AvgMileage.Length - 1);
                        IndDate = IndDate.Substring(0, IndDate.Length - 1);
                        DelQty = DelQty.Substring(0, DelQty.Length - 1);
                        Deliverlist.Add(DelQty);
                        Deliverlist.Add(AvgMileage);
                        Statuslist.Add("Sales");
                        Statuslist.Add(salestype);
                        getLineChart.IndentDate = IndDate;
                        getLineChart.DeliveryQty = Deliverlist;
                        getLineChart.Status = Statuslist;
                        getLineChart.ActMileage = ActMillist;
                        LineChartValuelist.Add(getLineChart);
                    }
                    string response = GetJson(LineChartValuelist);
                    context.Response.Write(response);
                }
                else
                {
                    DataTable Report = new DataTable();
                    DateTime firstmonth = new DateTime();
                    DateTime lastmonth = new DateTime();
                    Enddate = Enddate.AddMonths(1);
                    TimeSpan dateSpan = Enddate.Subtract(FromDate);
                    int years = (dateSpan.Days / 365);
                    int months = ((dateSpan.Days % 365) / 31) + (years * 12);
                    Report.Columns.Add("SNo");
                    Report.Columns.Add("Date");
                    Report.Columns.Add("Qty");
                    int i = 1;
                    if (months != 0)
                    {
                        for (int j = 0; j < months; j++)
                        {
                            firstmonth = GetLowMonthRetrive(FromDate.AddMonths(j));
                            lastmonth = GetHighMonth(firstmonth);
                            cmd = new MySqlCommand("SELECT ROUND(SUM(indents_subtable.unitQty), 2) AS unitQty, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty, indents.I_date, indents_subtable.DTripId FROM indents_subtable INNER JOIN indents ON indents_subtable.IndentNo = indents.IndentNo INNER JOIN branchdata ON indents.Branch_id = branchdata.sno INNER JOIN branchmappingtable ON branchdata.sno = branchmappingtable.SubBranch WHERE (indents.I_date BETWEEN @d1 AND @d2) AND (indents_subtable.DeliveryQty > 0) AND (branchdata.SalesType = @SalesType) AND (branchmappingtable.SuperBranch = @BranchID) GROUP BY branchmappingtable.SuperBranch ");
                            //cmd = new MySqlCommand("SELECT ROUND(SUM(indents_subtable.unitQty), 2) AS unitQty, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty, indents.I_date, indents_subtable.DTripId, branchroutes.BranchID FROM indents_subtable INNER JOIN indents ON indents_subtable.IndentNo = indents.IndentNo INNER JOIN branchdata ON indents.Branch_id = branchdata.sno INNER JOIN branchroutesubtable ON branchdata.sno = branchroutesubtable.BranchID INNER JOIN branchroutes ON branchroutesubtable.RefNo = branchroutes.Sno WHERE (indents.I_date BETWEEN @d1 AND @d2) AND (indents_subtable.DeliveryQty > 0) AND (branchroutes.BranchID = @BranchID) AND (branchdata.SalesType = @SalesType)");
                            cmd.Parameters.AddWithValue("@BranchID", SalesOffice);
                            DateTime dtF = firstmonth.AddDays(-1);
                            cmd.Parameters.AddWithValue("@d1", dtF);
                            cmd.Parameters.AddWithValue("@d2", lastmonth);
                            cmd.Parameters.AddWithValue("@SalesType", SalesType);
                            TimeSpan dateSpan2 = lastmonth.Subtract(dtF);
                            int NoOfdays = dateSpan2.Days;
                            DataTable dtAgent = vdbmngr.SelectQuery(cmd).Tables[0];
                            string ChangedTime1 = firstmonth.ToString("MMM/yyyy");
                            string Changedt = firstmonth.ToString("MMM");
                            foreach (DataRow dr in dtAgent.Rows)
                            {
                                DataRow newrow = Report.NewRow();
                                newrow["SNo"] = i++.ToString();
                                newrow["Date"] = ChangedTime1;
                                double delQty = 0;
                                double.TryParse(dr["DeliveryQty"].ToString(), out delQty);
                                double qty = 0;
                                qty = delQty / NoOfdays;
                                newrow["Qty"] = qty.ToString("F2");
                                Report.Rows.Add(newrow);
                            }
                        }
                    }
                    dtReport = Report;
                    if (dtReport.Rows.Count > 0)
                    {
                        LineChartValuesclass getLineChart = new LineChartValuesclass();
                        List<string> unitlist = new List<string>();
                        List<string> Deliverlist = new List<string>();
                        List<string> Datelist = new List<string>();
                        List<string> Statuslist = new List<string>();
                        List<string> ActMillist = new List<string>();
                        string DelQty = "";
                        string IndDate = "";
                        string AvgMileage = "";
                        double avgSaleQty = 0;
                        int count = 0;
                        foreach (DataRow dr in dtReport.Rows)
                        {
                            string DeliveryQty = dr["Qty"].ToString();
                            DelQty += DeliveryQty + ",";
                            double milltr = 0;
                            double.TryParse(dr["Qty"].ToString(), out milltr);
                            avgSaleQty += milltr;
                            string IndentDate = dr["Date"].ToString();

                            IndDate += IndentDate + ",";
                            count++;
                        }
                        double avg = 0;
                        avg = (avgSaleQty / count);
                        avg = Math.Round(avg, 2);
                        foreach (DataRow dr in dtReport.Rows)
                        {
                            string TodayMileage = dr["Qty"].ToString();
                            if (TodayMileage != "0")
                            {
                                AvgMileage += avg.ToString() + ",";
                            }
                        }
                        AvgMileage = AvgMileage.Substring(0, AvgMileage.Length - 1);
                        IndDate = IndDate.Substring(0, IndDate.Length - 1);
                        DelQty = DelQty.Substring(0, DelQty.Length - 1);
                        Deliverlist.Add(DelQty);
                        Deliverlist.Add(AvgMileage);
                        Statuslist.Add("Sales");
                        Statuslist.Add(salestype);
                        getLineChart.IndentDate = IndDate;
                        getLineChart.DeliveryQty = Deliverlist;
                        getLineChart.Status = Statuslist;
                        getLineChart.ActMileage = ActMillist;
                        LineChartValuelist.Add(getLineChart);
                    }
                    string response = GetJson(LineChartValuelist);
                    context.Response.Write(response);
                }
            }
        }
        catch
        {
        }
    }
    private void GetLineChart_agentinventorytransactions(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();

            string Fmdate = context.Request["startDate"];
            string AgentName = context.Request["AgentName"];
            string RouteName = context.Request["RouteName"];
            string SalesOffice = context.Request["SalesOffice"];
            string Type = context.Request["Type"];
            string ddldatatype = context.Request["ddldatatype"];
            DateTime fmdate = Convert.ToDateTime(Fmdate);
            string CTime = fmdate.ToString();
            DateTime dtFrmDate = Convert.ToDateTime(CTime);
            DateTime FromDate = DateTime.Now;
            string toDate = context.Request["endDate"];
            DateTime tDate = Convert.ToDateTime(toDate);
            string CTTime = tDate.ToString();
            DateTime dttoDate = Convert.ToDateTime(CTTime);
            DateTime Enddate = DateTime.Now;
            string time = dtFrmDate.ToString("dd-MM-yyyy HH:mm");//
            string[] fromdatestrig = time.Split(' ');
            if (fromdatestrig.Length > 1)
            {
                if (fromdatestrig[0].Split('-').Length > 0)
                {
                    string[] dates = fromdatestrig[0].Split('-');
                    string[] times = fromdatestrig[1].Split(':');
                    FromDate = new DateTime(int.Parse(dates[2]), int.Parse(dates[1]), int.Parse(dates[0]), int.Parse(times[0]), int.Parse(times[1]), 0);
                }
            }
            string endtime = dttoDate.ToString("dd-MM-yyyy HH:mm");
            string[] endfromdatestrig = endtime.Split(' ');
            if (endfromdatestrig.Length > 1)
            {
                if (endfromdatestrig[0].Split('-').Length > 0)
                {
                    string[] dates = endfromdatestrig[0].Split('-');
                    string[] times = endfromdatestrig[1].Split(':');
                    Enddate = new DateTime(int.Parse(dates[2]), int.Parse(dates[1]), int.Parse(dates[0]), int.Parse(times[0]), int.Parse(times[1]), 0);
                }
            }
            List<LineChartValuesclass> LineChartValuelist = new List<LineChartValuesclass>();
            DataTable dtReport = new DataTable();
            if (ddldatatype == "Day Wise")
            {
                if (Type == "Sales Office Wise")
                {
                    cmd = new MySqlCommand("SELECT SUM(due_trans_inventory.isuued) AS isuued, SUM(due_trans_inventory.closing) AS closing, SUM(due_trans_inventory.issue10) AS issue10, SUM(due_trans_inventory.clo10) AS clo10, SUM(due_trans_inventory.issu20) AS issu20, SUM(due_trans_inventory.clo20) AS clo20, SUM(due_trans_inventory.issu40) AS issu40, SUM(due_trans_inventory.clo40) AS clo40, due_trans_inventory.doe FROM  due_trans_inventory INNER JOIN branchroutesubtable ON due_trans_inventory.agentid = branchroutesubtable.BranchID INNER JOIN branchroutes ON branchroutesubtable.RefNo = branchroutes.Sno WHERE (due_trans_inventory.doe BETWEEN @d1 AND @d2) AND (branchroutes.BranchID = @BranchID) GROUP BY due_trans_inventory.doe, branchroutes.BranchID");
                    cmd.Parameters.AddWithValue("@d1", CargoManagementSystem.DateConverter.GetLowDate(FromDate.AddDays(-1)));
                    cmd.Parameters.AddWithValue("@d2", CargoManagementSystem.DateConverter.GetHighDate(Enddate.AddDays(-1)));
                    cmd.Parameters.AddWithValue("@BranchID", SalesOffice);
                    dtReport = vdbmngr.SelectQuery(cmd).Tables[0];
                }
                if (Type == "Route Wise")
                {
                    cmd = new MySqlCommand("SELECT SUM(due_trans_inventory.isuued) AS isuued, SUM(due_trans_inventory.closing) AS closing, SUM(due_trans_inventory.issue10) AS issue10, SUM(due_trans_inventory.clo10) AS clo10, SUM(due_trans_inventory.issu20) AS issu20, SUM(due_trans_inventory.clo20) AS clo20, SUM(due_trans_inventory.issu40) AS issu40, SUM(due_trans_inventory.clo40) AS clo40, due_trans_inventory.doe FROM due_trans_inventory INNER JOIN branchroutesubtable ON due_trans_inventory.agentid = branchroutesubtable.BranchID WHERE (due_trans_inventory.doe BETWEEN @d1 AND @d2) AND (branchroutesubtable.RefNo = @RouteID) GROUP BY branchroutesubtable.RefNo, due_trans_inventory.doe");
                    cmd.Parameters.AddWithValue("@d1", CargoManagementSystem.DateConverter.GetLowDate(FromDate.AddDays(-1)));
                    cmd.Parameters.AddWithValue("@d2", CargoManagementSystem.DateConverter.GetHighDate(Enddate.AddDays(-1)));
                    cmd.Parameters.AddWithValue("@RouteID", RouteName);
                    dtReport = vdbmngr.SelectQuery(cmd).Tables[0];
                }
                if (Type == "Agent Wise")
                {
                    cmd = new MySqlCommand("SELECT sno, inv_sno, oppening, isuued, received, closing, due_trans_sno, branchid, agentid, doe, opp10, issue10, rec10, clo10, opp20, issu20, rec20, clo20, opp40, issu40, rec40, clo40 FROM due_trans_inventory WHERE (doe BETWEEN @d1 AND @d2) AND (agentid = @agentid) ORDER BY doe");
                    cmd.Parameters.AddWithValue("@d1", CargoManagementSystem.DateConverter.GetLowDate(FromDate.AddDays(-1)));
                    cmd.Parameters.AddWithValue("@d2", CargoManagementSystem.DateConverter.GetHighDate(Enddate.AddDays(-1)));
                    cmd.Parameters.AddWithValue("@agentid", AgentName);
                    dtReport = vdbmngr.SelectQuery(cmd).Tables[0];
                }
                if (dtReport.Rows.Count > 0)
                {
                    LineChartValuesclass getLineChart = new LineChartValuesclass();
                    List<string> unitlist = new List<string>();
                    List<string> Deliverlist = new List<string>();
                    List<string> Datelist = new List<string>();
                    List<string> Statuslist = new List<string>();
                    List<string> ActMillist = new List<string>();
                    string DelQty = "";
                    string IndDate = "";
                    string AvgMileage = "";
                    string MainQty = "";
                    string Cans = "";
                    int count = 0;
                    foreach (DataRow dr in dtReport.Rows)
                    {
                        string DeliveryQty = dr["closing"].ToString();
                        string isuued = dr["isuued"].ToString();
                        DelQty += DeliveryQty + ",";
                        MainQty += isuued + ",";
                        int can10 = 0;
                        int.TryParse(dr["clo10"].ToString(), out can10);
                        int can20 = 0;
                        int.TryParse(dr["clo20"].ToString(), out can20);
                        int can40 = 0;
                        int.TryParse(dr["clo40"].ToString(), out can40);
                        int canbal = 0;
                        canbal = can10 + can20 + can40;
                        string clobal = canbal.ToString();
                        AvgMileage += clobal + ",";

                        int issue10 = 0;
                        int.TryParse(dr["issue10"].ToString(), out issue10);
                        int issue20 = 0;
                        int.TryParse(dr["issu20"].ToString(), out issue20);
                        int issue40 = 0;
                        int.TryParse(dr["issu40"].ToString(), out issue40);
                        int canIssuedbal = 0;
                        canIssuedbal = issue10 + issue20 + issue40;
                        string Cloissuedbal = canIssuedbal.ToString();
                        Cans += Cloissuedbal + ",";

                        string IndentDate = dr["doe"].ToString();
                        DateTime dtIndentDate = Convert.ToDateTime(IndentDate).AddDays(1);
                        string ChangedTime = dtIndentDate.ToString("dd/MMM");
                        IndDate += ChangedTime + ",";
                        count++;
                    }
                    AvgMileage = AvgMileage.Substring(0, AvgMileage.Length - 1);
                    IndDate = IndDate.Substring(0, IndDate.Length - 1);
                    DelQty = DelQty.Substring(0, DelQty.Length - 1);
                    MainQty = MainQty.Substring(0, MainQty.Length - 1);
                    Cans = Cans.Substring(0, Cans.Length - 1);
                    Deliverlist.Add(DelQty);
                    Deliverlist.Add(AvgMileage);
                    Deliverlist.Add(MainQty);
                    Deliverlist.Add(Cans);
                    Statuslist.Add("Crates Clo Bal");
                    Statuslist.Add("Cans Clo Bal");
                    Statuslist.Add("Issued Crates");
                    Statuslist.Add("Issued Cans");
                    getLineChart.IndentDate = IndDate;
                    getLineChart.DeliveryQty = Deliverlist;
                    getLineChart.Status = Statuslist;
                    getLineChart.ActMileage = ActMillist;
                    LineChartValuelist.Add(getLineChart);
                }
            }
            string response = GetJson(LineChartValuelist);
            context.Response.Write(response);
        }
        catch
        {
        }
    }
    private void GetLineChart_agentduetransactions(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();

            string Fmdate = context.Request["startDate"];
            string AgentName = context.Request["AgentName"];
            string RouteName = context.Request["RouteName"];
            string SalesOffice = context.Request["SalesOffice"];
            string Type = context.Request["Type"];
            string classificationtype = context.Request["classificationtype"];
            string salestype = context.Request["salestype"];
            string ddldatatype = context.Request["ddldatatype"];
            DateTime fmdate = Convert.ToDateTime(Fmdate);
            string CTime = fmdate.ToString();
            DateTime dtFrmDate = Convert.ToDateTime(CTime);
            DateTime FromDate = DateTime.Now;
            string toDate = context.Request["endDate"];
            DateTime tDate = Convert.ToDateTime(toDate);
            string CTTime = tDate.ToString();
            DateTime dttoDate = Convert.ToDateTime(CTTime);
            DateTime Enddate = DateTime.Now;
            string time = dtFrmDate.ToString("dd-MM-yyyy HH:mm");//
            string[] fromdatestrig = time.Split(' ');
            if (fromdatestrig.Length > 1)
            {
                if (fromdatestrig[0].Split('-').Length > 0)
                {
                    string[] dates = fromdatestrig[0].Split('-');
                    string[] times = fromdatestrig[1].Split(':');
                    FromDate = new DateTime(int.Parse(dates[2]), int.Parse(dates[1]), int.Parse(dates[0]), int.Parse(times[0]), int.Parse(times[1]), 0);
                }
            }
            string endtime = dttoDate.ToString("dd-MM-yyyy HH:mm");
            string[] endfromdatestrig = endtime.Split(' ');
            if (endfromdatestrig.Length > 1)
            {
                if (endfromdatestrig[0].Split('-').Length > 0)
                {
                    string[] dates = endfromdatestrig[0].Split('-');
                    string[] times = endfromdatestrig[1].Split(':');
                    Enddate = new DateTime(int.Parse(dates[2]), int.Parse(dates[1]), int.Parse(dates[0]), int.Parse(times[0]), int.Parse(times[1]), 0);
                }
            }
            List<LineChartValuesclass> LineChartValuelist = new List<LineChartValuesclass>();
            DataTable dtReport = new DataTable();
            if (ddldatatype == "Day Wise")
            {
                if (Type == "Sales Office Wise")
                {
                    cmd = new MySqlCommand("SELECT duetransactions.IndentDate, SUM(duetransactions.SaleValue) AS SaleValue, SUM(duetransactions.ClosingBalance) AS ClosingBalance FROM duetransactions INNER JOIN branchdata ON duetransactions.AgentId = branchdata.sno WHERE (duetransactions.IndentDate BETWEEN @d1 AND @d2) AND (duetransactions.SalesOfficeId = @BranchID) AND (branchdata.SalesType = @SalesType) GROUP BY duetransactions.SalesOfficeId, duetransactions.IndentDate ORDER BY duetransactions.IndentDate");
                    cmd.Parameters.AddWithValue("@d1", CargoManagementSystem.DateConverter.GetLowDate(FromDate.AddDays(-1)));
                    cmd.Parameters.AddWithValue("@d2", CargoManagementSystem.DateConverter.GetHighDate(Enddate.AddDays(-1)));
                    cmd.Parameters.AddWithValue("@BranchID", SalesOffice);
                    cmd.Parameters.AddWithValue("@SalesType", classificationtype);
                    dtReport = vdbmngr.SelectQuery(cmd).Tables[0];
                }
                if (Type == "Route Wise")
                {
                    cmd = new MySqlCommand("SELECT duetransactions.IndentDate, SUM(duetransactions.SaleValue) AS SaleValue, SUM(duetransactions.ClosingBalance) AS ClosingBalance FROM duetransactions INNER JOIN branchdata ON duetransactions.AgentId = branchdata.sno WHERE (duetransactions.IndentDate BETWEEN @d1 AND @d2) AND (duetransactions.RouteId = @RouteId) AND (branchdata.SalesType = @SalesType) GROUP BY duetransactions.RouteId, duetransactions.IndentDate ORDER BY duetransactions.IndentDate");
                    cmd.Parameters.AddWithValue("@d1", CargoManagementSystem.DateConverter.GetLowDate(FromDate.AddDays(-1)));
                    cmd.Parameters.AddWithValue("@d2", CargoManagementSystem.DateConverter.GetHighDate(Enddate.AddDays(-1)));
                    cmd.Parameters.AddWithValue("@RouteId", RouteName);
                    cmd.Parameters.AddWithValue("@SalesType", classificationtype);
                    dtReport = vdbmngr.SelectQuery(cmd).Tables[0];
                }
                if (Type == "Agent Wise")
                {
                    cmd = new MySqlCommand("SELECT Sno, SalesOfficeId, RouteId, AgentId, IndentDate, EntryDate, OppBalance, SaleQty, SaleValue, ReceivedAmount, ClosingBalance, DiffAmount FROM duetransactions WHERE (IndentDate BETWEEN @d1 AND @d2) AND (AgentId = @AgentId) ORDER BY IndentDate");
                    cmd.Parameters.AddWithValue("@d1", CargoManagementSystem.DateConverter.GetLowDate(FromDate.AddDays(-1)));
                    cmd.Parameters.AddWithValue("@d2", CargoManagementSystem.DateConverter.GetHighDate(Enddate.AddDays(-1)));
                    cmd.Parameters.AddWithValue("@AgentId", AgentName);
                    dtReport = vdbmngr.SelectQuery(cmd).Tables[0];
                }
                if (dtReport.Rows.Count > 0)
                {
                    LineChartValuesclass getLineChart = new LineChartValuesclass();
                    List<string> unitlist = new List<string>();
                    List<string> Deliverlist = new List<string>();
                    List<string> Datelist = new List<string>();
                    List<string> Statuslist = new List<string>();
                    List<string> ActMillist = new List<string>();
                    string DelQty = "";
                    string IndDate = "";
                    string AvgMileage = "";
                    double avgSaleQty = 0;
                    int count = 0;
                    foreach (DataRow dr in dtReport.Rows)
                    {
                        string DeliveryQty = dr["ClosingBalance"].ToString();
                        DelQty += DeliveryQty + ",";
                        string SaleValue = dr["SaleValue"].ToString();
                        AvgMileage += SaleValue + ",";
                        double milltr = 0;
                        double.TryParse(dr["ClosingBalance"].ToString(), out milltr);
                        avgSaleQty += milltr;
                        string IndentDate = dr["IndentDate"].ToString();
                        DateTime dtIndentDate = Convert.ToDateTime(IndentDate).AddDays(1);
                        string ChangedTime = dtIndentDate.ToString("dd/MMM");
                        IndDate += ChangedTime + ",";
                        count++;
                    }

                    AvgMileage = AvgMileage.Substring(0, AvgMileage.Length - 1);
                    IndDate = IndDate.Substring(0, IndDate.Length - 1);
                    DelQty = DelQty.Substring(0, DelQty.Length - 1);
                    Deliverlist.Add(DelQty);
                    Deliverlist.Add(AvgMileage);
                    Statuslist.Add("Due");
                    Statuslist.Add("Sale Value");
                    Statuslist.Add(salestype);
                    getLineChart.IndentDate = IndDate;
                    getLineChart.DeliveryQty = Deliverlist;
                    getLineChart.Status = Statuslist;
                    getLineChart.ActMileage = ActMillist;
                    LineChartValuelist.Add(getLineChart);
                }
            }
            string response = GetJson(LineChartValuelist);
            context.Response.Write(response);
        }
        catch
        {
        }
    }
    private void btnMilkBuyerTransactonremarkssaveClick(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            string due = context.Request["due"];
            string chequepending = context.Request["chequepending"];
            string netdue = context.Request["netdue"];
            string duedate = context.Request["duedate"];
            DateTime dtduedate = DateTime.Now;
            if (duedate == "")
            {
                dtduedate = DateTime.Now;
            }
            else
            {
                dtduedate = Convert.ToDateTime(duedate);
            }
            string invbal = context.Request["invbal"];
            string invdate = context.Request["invdate"];
            string Remarks = context.Request["Remarks"];
            string agentid = context.Request["agentid"];
            string BranchID = context.Request["BranchID"];
            string entryby = context.Session["UserSno"].ToString();
            DateTime ServerDateCurrentdate = VehicleDBMgr.GetTime(vdbmngr.conn);
            cmd = new MySqlCommand("insert into milkbuyertransactions(agentid,dueamount,inddate,doe,dueremarks,invqty,branchid,entryby,chequepending) values (@agentid,@dueamount,@inddate,@doe,@dueremarks,@invqty,@branchid,@entryby,@chequepending)");
            cmd.Parameters.AddWithValue("@agentid", agentid);
            cmd.Parameters.AddWithValue("@dueamount", due);
            cmd.Parameters.AddWithValue("@inddate", dtduedate);
            cmd.Parameters.AddWithValue("@doe", ServerDateCurrentdate);
            cmd.Parameters.AddWithValue("@dueremarks", Remarks);
            cmd.Parameters.AddWithValue("@invqty", invbal);
            cmd.Parameters.AddWithValue("@branchid", BranchID);
            cmd.Parameters.AddWithValue("@entryby", entryby);
            cmd.Parameters.AddWithValue("@chequepending", chequepending);
            vdbmngr.insert(cmd);
            string msg = "Transacton saved successfully";
            string respnceString = GetJson(msg);
            context.Response.Write(respnceString);
        }
        catch
        {
        }
    }
    private void Getindentincreasedecresereport2015(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            DateTime FromDate = DateTime.Now;
            string StartDate = "";
            DateTime ServerDateCurrentdate = VehicleDBMgr.GetTime(vdbmngr.conn);
            StartDate = ServerDateCurrentdate.ToString();
            DateTime fmdate = Convert.ToDateTime(StartDate);
            string time = fmdate.ToString("dd-MM-yyyy HH:mm");
            string[] fromdatestrig = time.Split(' ');
            if (fromdatestrig.Length > 1)
            {
                if (fromdatestrig[0].Split('-').Length > 0)
                {
                    string[] dates = fromdatestrig[0].Split('-');
                    string[] times = fromdatestrig[1].Split(':');
                    FromDate = new DateTime(int.Parse(dates[2]), int.Parse(dates[1]), int.Parse(dates[0]), int.Parse(times[0]), int.Parse(times[1]), 0);
                }
            }
            DataTable dtTotalDispatches = new DataTable();
            string SalesType = context.Session["salestype"].ToString();
            string BranchID = "";
            BranchID = context.Request["BranchID"];
            cmd = new MySqlCommand("SELECT SUM(tripsubdata.Qty) AS IndentQty, tripdata.I_Date FROM tripdata INNER JOIN tripsubdata ON tripdata.Sno = tripsubdata.Tripdata_sno WHERE (tripdata.BranchID = @BranchID) AND (tripdata.I_Date BETWEEN @d1 AND @d2) GROUP BY DATE_FORMAT(tripdata.I_Date, '%Y%m%d')");
            cmd.Parameters.AddWithValue("@BranchId", BranchID);
            cmd.Parameters.AddWithValue("@d1", CargoManagementSystem.DateConverter.GetLowDate(FromDate.AddDays(-45)));
            cmd.Parameters.AddWithValue("@d2", CargoManagementSystem.DateConverter.GetHighDate(FromDate.AddDays(-30)));
            DataTable dttotindent = vdbmngr.SelectQuery(cmd).Tables[0];
            dtTotalDispatches.Columns.Add("sno");
            dtTotalDispatches.Columns.Add("DispName");
            dtTotalDispatches.Columns.Add("Total Leaks");
            List<barvalues> lbarValueslist = new List<barvalues>();
            List<string> RouteList = new List<string>();
            List<string> Routeidlist = new List<string>();
            List<string> totalleak = new List<string>();
            double Totalindent = 0;
            string Leaks = "";
            string Routes = "";
            int count = 0;
            foreach (DataRow drtotal in dttotindent.Rows)
            {

                double indqty = 0;
                double.TryParse(drtotal["IndentQty"].ToString(), out indqty);
                Totalindent += indqty;
                indqty = Math.Round(indqty, 2);
                Leaks += indqty.ToString() + ",";
                string dtdate1 = drtotal["I_date"].ToString();
                DateTime dtDOE1 = Convert.ToDateTime(dtdate1).AddDays(1);
                string ChangedTime1 = dtDOE1.ToString("dd/MMM/yy");
                Routes += ChangedTime1.ToString() + ",";
                count++;
            }
            Totalindent = Totalindent / count;
            Totalindent = Math.Round(Totalindent, 2);
            totalleak.Add(Math.Round(Totalindent, 2).ToString());
            Leaks = Leaks.Substring(0, Leaks.Length - 1);
            Routes = Routes.Substring(0, Routes.Length - 1);
            string Avgindent = "";
            foreach (DataRow drtotal in dttotindent.Rows)
            {

                Avgindent += Totalindent.ToString() + ",";
            }
            Avgindent = Avgindent.Substring(0, Avgindent.Length - 1);
            LineChartValuesclass getLineChart = new LineChartValuesclass();
            List<string> unitlist = new List<string>();
            List<string> Deliverlist = new List<string>();
            List<string> Datelist = new List<string>();
            List<string> Statuslist = new List<string>();
            List<LineChartValuesclass> LineChartValuelist = new List<LineChartValuesclass>();
            Deliverlist.Add(Leaks);
            Deliverlist.Add(Avgindent);
            Statuslist.Add("Indent Qty");
            Statuslist.Add("Avg Qty");
            getLineChart.IndentDate = Routes;
            getLineChart.DeliveryQty = Deliverlist;
            getLineChart.UnitQty = Avgindent;
            getLineChart.Status = Statuslist;
            LineChartValuelist.Add(getLineChart);
            string errresponse = GetJson(LineChartValuelist);
            context.Response.Write(errresponse);
        }
        catch
        {
        }
    }
    private void Getindentincreasedecresereport(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            DateTime FromDate = DateTime.Now;
            string StartDate = "";
            DateTime ServerDateCurrentdate = VehicleDBMgr.GetTime(vdbmngr.conn);
            StartDate = ServerDateCurrentdate.ToString();
            DateTime fmdate = Convert.ToDateTime(StartDate);
            string time = fmdate.ToString("dd-MM-yyyy HH:mm");
            string[] fromdatestrig = time.Split(' ');
            if (fromdatestrig.Length > 1)
            {
                if (fromdatestrig[0].Split('-').Length > 0)
                {
                    string[] dates = fromdatestrig[0].Split('-');
                    string[] times = fromdatestrig[1].Split(':');
                    FromDate = new DateTime(int.Parse(dates[2]), int.Parse(dates[1]), int.Parse(dates[0]), int.Parse(times[0]), int.Parse(times[1]), 0);
                }
            }
            DataTable dtTotalDispatches = new DataTable();
            string SalesType = context.Session["salestype"].ToString();
            string BranchID = "";
            BranchID = context.Request["BranchID"];
            cmd = new MySqlCommand("SELECT indents.I_date, SUM(indents_subtable.unitQty) AS IndentQty FROM indents_subtable INNER JOIN indents ON indents_subtable.IndentNo = indents.IndentNo INNER JOIN branchmappingtable ON indents.Branch_id = branchmappingtable.SubBranch WHERE (branchmappingtable.SuperBranch = @BranchID) AND (indents.I_date BETWEEN @d1 AND @d2) GROUP BY DATE_FORMAT(indents.I_date, '%Y%m%d')");
            cmd.Parameters.AddWithValue("@BranchId", BranchID);
            cmd.Parameters.AddWithValue("@d1", CargoManagementSystem.DateConverter.GetLowDate(FromDate.AddDays(-15)));
            cmd.Parameters.AddWithValue("@d2", CargoManagementSystem.DateConverter.GetHighDate(FromDate.AddDays(-1)));
            DataTable dttotindent = vdbmngr.SelectQuery(cmd).Tables[0];
            dtTotalDispatches.Columns.Add("sno");
            dtTotalDispatches.Columns.Add("DispName");
            dtTotalDispatches.Columns.Add("Total Leaks");
            List<barvalues> lbarValueslist = new List<barvalues>();
            List<string> RouteList = new List<string>();
            List<string> Routeidlist = new List<string>();
            List<string> totalleak = new List<string>();
            double Totalindent = 0;
            string Leaks = "";
            string Routes = "";
            int count = 0;
            foreach (DataRow drtotal in dttotindent.Rows)
            {

                double indqty = 0;
                double.TryParse(drtotal["IndentQty"].ToString(), out indqty);
                Totalindent += indqty;
                indqty = Math.Round(indqty, 2);
                Leaks += indqty.ToString() + ",";
                string dtdate1 = drtotal["I_date"].ToString();
                DateTime dtDOE1 = Convert.ToDateTime(dtdate1).AddDays(1);
                string ChangedTime1 = dtDOE1.ToString("dd/MMM/yy");
                Routes += ChangedTime1.ToString() + ",";
                count++;
            }
            Totalindent = Totalindent / count;
            Totalindent = Math.Round(Totalindent, 2);
            totalleak.Add(Math.Round(Totalindent, 2).ToString());
            Leaks = Leaks.Substring(0, Leaks.Length - 1);
            Routes = Routes.Substring(0, Routes.Length - 1);
            string Avgindent = "";
            foreach (DataRow drtotal in dttotindent.Rows)
            {

                Avgindent += Totalindent.ToString() + ",";
            }
            Avgindent = Avgindent.Substring(0, Avgindent.Length - 1);
            LineChartValuesclass getLineChart = new LineChartValuesclass();
            List<string> unitlist = new List<string>();
            List<string> Deliverlist = new List<string>();
            List<string> Datelist = new List<string>();
            List<string> Statuslist = new List<string>();
            List<LineChartValuesclass> LineChartValuelist = new List<LineChartValuesclass>();
            Deliverlist.Add(Leaks);
            Deliverlist.Add(Avgindent);
            Statuslist.Add("Indent Qty");
            Statuslist.Add("Avg Qty");
            getLineChart.IndentDate = Routes;
            getLineChart.DeliveryQty = Deliverlist;
            getLineChart.UnitQty = Avgindent;
            getLineChart.Status = Statuslist;
            LineChartValuelist.Add(getLineChart);
            string errresponse = GetJson(LineChartValuelist);
            context.Response.Write(errresponse);
        }
        catch
        {
        }
    }
    private void btnupdatereceiptDetails(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            string refno = context.Request["refno"];
            string fdate = context.Request["fromdate"];
            DateTime fromdate = Convert.ToDateTime(fdate);
            string tdate = context.Request["todate"];
            DateTime todate = Convert.ToDateTime(tdate);
            string BranchID = context.Session["branch"].ToString();
            float presentamt = 0;
            float prevamt = 0;
            cmd = new MySqlCommand("update cashreceipts set doe=@doe where sno=@sno");
            cmd.Parameters.AddWithValue("@doe", todate);
            cmd.Parameters.AddWithValue("@sno", refno);
            vdbmngr.Update(cmd);
            cmd = new MySqlCommand("select * from cashreceipts where sno=@sno");
            cmd.Parameters.AddWithValue("@sno", refno);
            DataTable dtreceipt = vdbmngr.SelectQuery(cmd).Tables[0];
            if (dtreceipt.Rows.Count > 0)
            {
                string receipt = dtreceipt.Rows[0]["Receipt"].ToString();
                string AgentID = dtreceipt.Rows[0]["AgentID"].ToString();
                string ReceivedFrom = dtreceipt.Rows[0]["ReceivedFrom"].ToString();
                if (ReceivedFrom == "Others")
                {
                    cmd = new MySqlCommand("SELECT * FROM cashcollections where  (BranchID=@BranchID)  and (Receiptno=@Receiptno) and (DOE between @d1 and @d2)");
                    cmd.Parameters.AddWithValue("@BranchID", BranchID);
                    cmd.Parameters.AddWithValue("@Receiptno", receipt);
                    cmd.Parameters.AddWithValue("@d1", GetLowDate(fromdate));
                    cmd.Parameters.AddWithValue("@d2", GetHighDate(fromdate).AddDays(1));
                    DataTable dtothers = vdbmngr.SelectQuery(cmd).Tables[0];
                    if (dtothers.Rows.Count > 0)
                    {
                        string colsno = dtothers.Rows[0]["Sno"].ToString();
                        cmd = new MySqlCommand("update cashcollections set DOE=@DOE where Sno=@Sno");
                        cmd.Parameters.AddWithValue("@DOE", todate);
                        cmd.Parameters.AddWithValue("@Sno", colsno);
                        vdbmngr.Update(cmd);
                    }
                }
                else
                {
                    cmd = new MySqlCommand("SELECT   Branchid, AmountPaid, Denominations, Remarks, Sno, PaidDate, PaymentType, tripId, ReceiptNo FROM collections WHERE  (ReceiptNo = @Receipt) AND (collections.Branchid = @AgentID) AND (collections.PaidDate between @d1 and @d2)");
                    cmd.Parameters.AddWithValue("@Receipt", receipt);
                    cmd.Parameters.AddWithValue("@AgentID", AgentID);
                    cmd.Parameters.AddWithValue("@d1", GetLowDate(fromdate));
                    cmd.Parameters.AddWithValue("@d2", GetLowDate(fromdate).AddDays(1));
                    DataTable dtcol = vdbmngr.SelectQuery(cmd).Tables[0];
                    if (dtcol.Rows.Count > 0)
                    {
                        string colsno = dtcol.Rows[0]["Sno"].ToString();
                        cmd = new MySqlCommand("update collections set Paiddate=@Paiddate where sno=@sno");
                        cmd.Parameters.AddWithValue("@Paiddate", todate);
                        cmd.Parameters.AddWithValue("@sno", colsno);
                        vdbmngr.Update(cmd);
                    }
                    float actamt = presentamt - prevamt;
                    if (prevamt > presentamt)
                    {
                        cmd = new MySqlCommand("Update branchaccounts set Amount=Amount+@Amount where BranchId=@BranchId");
                        cmd.Parameters.AddWithValue("@Amount", Math.Abs(actamt));
                        cmd.Parameters.AddWithValue("@BranchId", AgentID);
                        vdbmngr.Update(cmd);
                    }
                    if (prevamt < presentamt)
                    {
                        float prevsamt = Math.Abs(actamt);
                        cmd = new MySqlCommand("Update branchaccounts set Amount=Amount-@Amount where BranchId=@BranchId");
                        cmd.Parameters.AddWithValue("@Amount", prevsamt);
                        cmd.Parameters.AddWithValue("@BranchId", AgentID);
                        vdbmngr.Update(cmd);
                    }
                }
            }
            string msg = "Receipt successfully updated";
            string respnceString = GetJson(msg);
            context.Response.Write(respnceString);
        }
        catch (Exception ex)
        {
            string msg = ex.Message;
            string respnceString = GetJson(msg);
            context.Response.Write(respnceString);
        }
    }
    private void btnupdate_DcNumber_Dates(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            string refdcno = context.Request["refdcno"];
            string fdate = context.Request["fromdate"];
            DateTime fromdate = Convert.ToDateTime(fdate);
            string tdate = context.Request["todate"];
            DateTime todate = Convert.ToDateTime(tdate);
            string BranchID = context.Session["branch"].ToString();
            cmd = new MySqlCommand("SELECT   tripdata.BranchID, tripdata.AssignDate, tripdata.Sno, dispatch.DispType, dispatch.BranchID AS Agentid, dispatch.DispMode, dispatch.DispName AS DispatchName, dispatch.sno AS dispsno FROM tripdata INNER JOIN triproutes ON tripdata.Sno = triproutes.Tripdata_sno INNER JOIN dispatch ON triproutes.RouteID = dispatch.sno WHERE (tripdata.Sno = @tripsno)");
            cmd.Parameters.AddWithValue("@tripsno", refdcno);
            DataTable dtdcNumber = vdbmngr.SelectQuery(cmd).Tables[0];
            if (dtdcNumber.Rows.Count > 0)
            {
                string DispMode = dtdcNumber.Rows[0]["DispMode"].ToString();
                string Sno = dtdcNumber.Rows[0]["Sno"].ToString();
                if (DispMode == "AGENT")
                {
                    cmd = new MySqlCommand("update tripdata set AssignDate=@AssignDate,I_Date=@I_Date where Sno=@Sno");
                    cmd.Parameters.AddWithValue("@AssignDate", todate);
                    cmd.Parameters.AddWithValue("@I_Date", todate);
                    cmd.Parameters.AddWithValue("@Sno", Sno);
                    if (vdbmngr.Update(cmd) != 0)
                    {
                        cmd = new MySqlCommand("SELECT IndentNo, OTripId, DTripId FROM indents_subtable WHERE (DTripId = @OTripId) GROUP BY OTripId");
                        cmd.Parameters.AddWithValue("@OTripId", refdcno);
                        DataTable dtindentno = vdbmngr.SelectQuery(cmd).Tables[0];
                        if (dtindentno.Rows.Count > 0)
                        {
                            string IndentNo = dtindentno.Rows[0]["IndentNo"].ToString();
                            cmd = new MySqlCommand("update indents set I_date=@I_date where IndentNo=@IndentNo");
                            cmd.Parameters.AddWithValue("@I_Date", todate);
                            cmd.Parameters.AddWithValue("@IndentNo", IndentNo);
                            if (vdbmngr.Update(cmd) != 0)
                            {
                                cmd = new MySqlCommand("SELECT   IndentNo, Branch_id, TotalQty, TotalPrice, I_date, D_date, Status, UserData_sno, PaymentStatus, I_createdby, I_modifiedby, IndentType, IndentStatus, quatationno, pono, grnno FROM  indents where IndentNo=@IndentNo");
                                cmd.Parameters.AddWithValue("@IndentNo", IndentNo);
                                DataTable dtndent = vdbmngr.SelectQuery(cmd).Tables[0];
                                string branchid = dtndent.Rows[0]["Branch_id"].ToString();
                                cmd = new MySqlCommand("update agentdc set IndDate=@Ind_Date where BranchID=@BranchID and IndDate=@IndDate");
                                cmd.Parameters.AddWithValue("@Ind_Date", todate);
                                cmd.Parameters.AddWithValue("@BranchID", branchid);
                                cmd.Parameters.AddWithValue("@IndDate", fromdate);
                                vdbmngr.Update(cmd);
                            }
                        }
                    }
                }
                else
                {
                    cmd = new MySqlCommand("update tripdata set AssignDate=@AssignDate,I_Date=@I_Date where Sno=@Sno");
                    cmd.Parameters.AddWithValue("@AssignDate", todate);
                    cmd.Parameters.AddWithValue("@I_Date", todate);
                    cmd.Parameters.AddWithValue("@Sno", Sno);
                    vdbmngr.Update(cmd);
                }
            }
            string msg = "Receipt successfully updated";
            string respnceString = GetJson(msg);
            context.Response.Write(respnceString);
        }
        catch (Exception ex)
        {
            string msg = ex.Message;
            string respnceString = GetJson(msg);
            context.Response.Write(respnceString);
        }
    }
    private void btnupdatevoucherDetails(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            string refno = context.Request["refno"];
            string doe = context.Request["doe"];
            DateTime dtdate = Convert.ToDateTime(doe);
            cmd = new MySqlCommand("update cashpayables set doe=@doe where sno=@sno");
            cmd.Parameters.AddWithValue("@doe", dtdate);
            cmd.Parameters.AddWithValue("@sno", refno);
            vdbmngr.Update(cmd);
            string msg = "Voucher successfully updated";
            string respnceString = GetJson(msg);
            context.Response.Write(respnceString);
        }
        catch (Exception ex)
        {
            string msg = ex.Message;
            string respnceString = GetJson(msg);
            context.Response.Write(respnceString);
        }
    }
    public class despclas
    {
        public string DespName { get; set; }
    }
    #region "PARLOUR Code"
    public class DespClass
    {
        public string Sno { get; set; }
        public string DispName { get; set; }
    }
    public class TripSubData
    {
        public string Sno { get; set; }
        public string ProductName { get; set; }
        public string ProductId { get; set; }
        public string Qty { get; set; }
        public string remQty { get; set; }
    }
    public class TripInvData
    {
        public string Sno { get; set; }
        public string InventoryName { get; set; }
        public string InventorySno { get; set; }
        public string Qty { get; set; }
    }
    class Inventorydetail
    {
        public string SNo { set; get; }
        public string InvSno { set; get; }
        public string GivenQty { set; get; }
        public string ReceivedQty { set; get; }
        public string BalanceQty { set; get; }
        public string TransQty { set; get; }
    }

    #endregion "PARLOUR Code"
    #region "GatePass Details Code"
    private void btnGatePassDeatailsSaveclick(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            var js = new JavaScriptSerializer();
            DateTime ServerDateCurrentdate = VehicleDBMgr.GetTime(vdbmngr.conn);
            var title1 = context.Request.Params[1];
            Orders obj = js.Deserialize<Orders>(title1);
            string BranchID = context.Session["branch"].ToString();
            DateTime dtapril = new DateTime();
            DateTime dtmarch = new DateTime();
            int currentyear = ServerDateCurrentdate.Year;
            int nextyear = ServerDateCurrentdate.Year + 1;
            if (ServerDateCurrentdate.Month > 3)
            {
                string apr = "4/1/" + currentyear;
                dtapril = DateTime.Parse(apr);
                string march = "3/31/" + nextyear;
                dtmarch = DateTime.Parse(march);
            }
            if (ServerDateCurrentdate.Month <= 3)
            {
                string apr = "4/1/" + (currentyear - 1);
                dtapril = DateTime.Parse(apr);
                string march = "3/31/" + (nextyear - 1);
                dtmarch = DateTime.Parse(march);
            }
            cmd = new MySqlCommand("Select IFNULL(MAX(gatepassno),0)+1 as Sno  from gatepassdeatails where (branchid=@branchid) AND (doe between @d1 and @d2)");
            cmd.Parameters.AddWithValue("@branchid", BranchID);
            cmd.Parameters.AddWithValue("@d1", GetLowDate(dtapril));
            cmd.Parameters.AddWithValue("@d2", GetHighDate(dtmarch));
            DataTable dtTripId = vdbmngr.SelectQuery(cmd).Tables[0];
            string gatepassno = dtTripId.Rows[0]["Sno"].ToString();
            cmd = new MySqlCommand("insert into gatepassdeatails (doe,vehicleno,routename,partyname,entryby,branchid,Status,gatepassno) values(@doe,@vehicleno,@routename,@partyname,@entryby,@branchid,@Status,@gatepassno)");
            cmd.Parameters.AddWithValue("@doe", ServerDateCurrentdate);
            cmd.Parameters.AddWithValue("@vehicleno", obj.VehicleNo);
            cmd.Parameters.AddWithValue("@routename", obj.routename);
            cmd.Parameters.AddWithValue("@partyname", obj.Name);
            cmd.Parameters.AddWithValue("@Status", "A");
            cmd.Parameters.AddWithValue("@gatepassno", gatepassno);
            cmd.Parameters.AddWithValue("@entryby", context.Session["UserSno"].ToString());
            cmd.Parameters.AddWithValue("@branchid", context.Session["branch"].ToString());
            long Refno = vdbmngr.insertScalar(cmd);
            foreach (Gatepasssubclass o in obj.gridBinding)
            {
                cmd = new MySqlCommand("insert into  gatepass_subtable(refdcno,gatepass_refno) values(@refdcno,@gatepass_refno)");
                cmd.Parameters.AddWithValue("@refdcno", o.refno);
                cmd.Parameters.AddWithValue("@gatepass_refno", Refno);
                vdbmngr.insert(cmd);
            }
            string msg = "Gate Pass Raised Successfully";
            string errresponse = GetJson(msg);
            context.Response.Write(errresponse);
        }
        catch (Exception ex)
        {
            string msg = ex.Message;
            string errresponse = GetJson(msg);
            context.Response.Write(errresponse);
        }
    }
    #endregion "GatePass Details Code"
    private void GetRouteAgentInformation(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            string DespID = context.Request["DespID"];
            string BranchID = context.Request["ddlSalesOffice"];
            //string IndDate = context.Request["IndDate"];
            string s = context.Request["IndDate"];
            var dt = DateTime.ParseExact(s, "ddd MMM dd yyyy HH:mm:ss 'GMT'zzz", System.Globalization.CultureInfo.InvariantCulture);
            string IndDate = dt.ToString("yyyy-MM-dd");
            DateTime ServerDateCurrentdate = Convert.ToDateTime(IndDate);
            string status = context.Request["status"];
            DateTime MyDateTime = new DateTime();
            DateTime CollectionDateTime = new DateTime();
            string routeid = "";
            DataTable Report = new DataTable();
            Report.Columns.Add("BranchID");
            Report.Columns.Add("BranchName");
            Report.Columns.Add("DueAmount").DataType = typeof(Double);
            Report.Columns.Add("Inventory").DataType = typeof(Double);
            Report.Columns.Add("Totalindent").DataType = typeof(Double);
            Report.Columns.Add("TotalDispatch").DataType = typeof(Double);
            Report.Columns.Add("IndTime");
            Report.Columns.Add("DelTime");
            Report.Columns.Add("AmountColTime");
            Report.Columns.Add("DelInvTime");
            Report.Columns.Add("ColInvTime");
            List<RouteAgentDetails> AgentInformationlist = new List<RouteAgentDetails>();
            cmd = new MySqlCommand("select Route_id,IndentType from dispatch_sub where dispatch_sno=@dispsno");
            cmd.Parameters.AddWithValue("@dispsno", DespID);
            DataTable dtrouteindenttype = vdbmngr.SelectQuery(cmd).Tables[0];
            foreach (DataRow drrouteitype in dtrouteindenttype.Rows)
            {
                routeid = drrouteitype["Route_id"].ToString();
            }
            cmd = new MySqlCommand("SELECT branchdata.sno,branchdata.BranchName, modifiedroutes.RouteName, indent.IndentType, ROUND(SUM(indents_subtable.unitQty), 2) AS UnitQty, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty, indents_subtable.UnitCost, indent.I_date, indents_subtable.D_date, branchaccounts.Amount FROM modifiedroutes INNER JOIN modifiedroutesubtable ON modifiedroutes.Sno = modifiedroutesubtable.RefNo INNER JOIN branchdata ON modifiedroutesubtable.BranchID = branchdata.sno INNER JOIN (SELECT IndentNo, Branch_id, I_date, Status, IndentType FROM indents WHERE        (I_date BETWEEN @starttime AND @endtime) AND (Status <> 'D')) indent ON branchdata.sno = indent.Branch_id INNER JOIN indents_subtable ON indent.IndentNo = indents_subtable.IndentNo INNER JOIN branchaccounts ON branchdata.sno = branchaccounts.BranchId WHERE (modifiedroutes.Sno = @DespID) AND (modifiedroutesubtable.EDate IS NULL) AND (modifiedroutesubtable.CDate <= @starttime) OR (modifiedroutes.Sno = @DespID) AND (modifiedroutesubtable.EDate > @starttime) AND (modifiedroutesubtable.CDate <= @starttime) GROUP BY branchdata.BranchName");
            cmd.Parameters.AddWithValue("@BranchID", BranchID);
            cmd.Parameters.AddWithValue("@DespID", routeid);
            cmd.Parameters.AddWithValue("@starttime", GetLowDate(ServerDateCurrentdate.AddDays(-1)));
            cmd.Parameters.AddWithValue("@endtime", GetHighDate(ServerDateCurrentdate.AddDays(-1)));
            DataTable dtAgent = vdbmngr.SelectQuery(cmd).Tables[0];
            foreach (DataRow dr in dtAgent.Rows)
            {
                DataRow newrow = Report.NewRow();
                newrow["BranchID"] = dr["sno"].ToString();
                newrow["BranchName"] = dr["BranchName"].ToString();
                double Totalindent = 0;
                double.TryParse(dr["UnitQty"].ToString(), out Totalindent);
                newrow["Totalindent"] = Totalindent;
                double TotalDispatch = 0;
                double.TryParse(dr["DeliveryQty"].ToString(), out TotalDispatch);
                newrow["TotalDispatch"] = TotalDispatch;
                Report.Rows.Add(newrow);
            }
            DataTable TimeReport = new DataTable();
            TimeReport.Columns.Add("Sno");
            TimeReport.Columns.Add("BranchID");
            TimeReport.Columns.Add("Agent Name");
            TimeReport.Columns.Add("Ind Time");
            TimeReport.Columns.Add("Del Time");
            TimeReport.Columns.Add("Amount Col Time");
            TimeReport.Columns.Add("Inv Del Time");
            TimeReport.Columns.Add("Inv Col Time");
            cmd = new MySqlCommand("SELECT branchdata.sno,branchdata.BranchName,indents.I_Date, indents_subtable.DelTime as DateTime FROM dispatch_sub INNER JOIN dispatch ON dispatch_sub.dispatch_sno = dispatch.sno INNER JOIN branchroutes ON dispatch_sub.Route_id = branchroutes.Sno INNER JOIN branchroutesubtable ON branchroutes.Sno = branchroutesubtable.RefNo INNER JOIN branchdata ON branchroutesubtable.BranchID = branchdata.sno INNER JOIN indents ON branchdata.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo WHERE (dispatch.sno = @dispatchSno) AND (indents.I_date between @starttime AND  @endtime) GROUP BY branchdata.BranchName ORDER BY DateTime");
            cmd.Parameters.AddWithValue("@starttime", GetLowDate(ServerDateCurrentdate.AddDays(-1)));
            cmd.Parameters.AddWithValue("@endtime", GetHighDate(ServerDateCurrentdate.AddDays(-1)));
            cmd.Parameters.AddWithValue("@dispatchSno", DespID);
            DataTable dtTime = vdbmngr.SelectQuery(cmd).Tables[0];
            cmd = new MySqlCommand("SELECT collections.PayTime, tripdata.Sno, triproutes.Tripdata_sno, collections.Branchid, branchdata.BranchName FROM collections INNER JOIN tripdata ON collections.tripId = tripdata.Sno INNER JOIN triproutes ON tripdata.Sno = triproutes.Tripdata_sno INNER JOIN dispatch ON triproutes.RouteID = dispatch.sno INNER JOIN branchdata ON collections.Branchid = branchdata.sno WHERE (tripdata.I_Date BETWEEN @d1 AND @d2) AND (dispatch.sno = @dispatchSno) GROUP BY branchdata.BranchName");
            cmd.Parameters.AddWithValue("@d1", GetLowDate(ServerDateCurrentdate.AddDays(-1)));
            cmd.Parameters.AddWithValue("@d2", GetHighDate(ServerDateCurrentdate.AddDays(-1)));
            cmd.Parameters.AddWithValue("@dispatchSno", DespID);
            DataTable dtPayTime = vdbmngr.SelectQuery(cmd).Tables[0];
            cmd = new MySqlCommand("SELECT invtransactions12.DeliveryTime, invtransactions12.ToTran, branchdata.BranchName FROM dispatch INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN (SELECT Sno, I_Date FROM tripdata WHERE (I_Date BETWEEN @d1 AND @d2)) tripdat ON triproutes.Tripdata_sno = tripdat.Sno INNER JOIN invtransactions12 ON tripdat.Sno = invtransactions12.FromTran INNER JOIN branchdata ON invtransactions12.ToTran = branchdata.sno WHERE (dispatch.sno = @dispatchSno) AND (invtransactions12.DeliveryTime IS NOT NULL)");
            cmd.Parameters.AddWithValue("@d1", GetLowDate(ServerDateCurrentdate.AddDays(-1)));
            cmd.Parameters.AddWithValue("@d2", GetHighDate(ServerDateCurrentdate.AddDays(-1)));
            cmd.Parameters.AddWithValue("@dispatchSno", DespID);
            DataTable dtDeltime = vdbmngr.SelectQuery(cmd).Tables[0];
            cmd = new MySqlCommand("SELECT invtransactions12.CollectionTime, branchdata.BranchName FROM dispatch INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN (SELECT Sno, I_Date FROM tripdata WHERE (I_Date BETWEEN @d1 AND @d2)) tripdat ON triproutes.Tripdata_sno = tripdat.Sno INNER JOIN invtransactions12 ON tripdat.Sno = invtransactions12.ToTran INNER JOIN branchdata ON invtransactions12.FromTran = branchdata.sno WHERE (dispatch.sno = @dispatchSno)");
            cmd.Parameters.AddWithValue("@d1", GetLowDate(ServerDateCurrentdate.AddDays(-1)));
            cmd.Parameters.AddWithValue("@d2", GetHighDate(ServerDateCurrentdate.AddDays(-1)));
            cmd.Parameters.AddWithValue("@dispatchSno", DespID);
            DataTable dtColtime = vdbmngr.SelectQuery(cmd).Tables[0];
            if (dtTime.Rows.Count > 0)
            {
                int i = 1;
                foreach (DataRow dr in dtTime.Rows)
                {
                    DataRow newrow = TimeReport.NewRow();
                    foreach (DataRow drp in dtPayTime.Rows)
                    {
                        if (dr["BranchName"].ToString() == drp["BranchName"].ToString())
                        {
                            newrow["Sno"] = i;
                            newrow["BranchID"] = dr["sno"].ToString();
                            newrow["Agent Name"] = dr["BranchName"].ToString();
                            String MyString = "";
                            DateTime IndTime = Convert.ToDateTime(dr["I_Date"].ToString());
                            string Inddate;
                            Inddate = IndTime.ToString("HH:mm");
                            if (Inddate == "00:00")
                            {
                                MyDateTime = Convert.ToDateTime(dr["DateTime"].ToString());
                                MyString = MyDateTime.ToString("HH:mm");
                                newrow["Ind Time"] = MyString;
                            }
                            else
                            {
                                newrow["Ind Time"] = Inddate;
                            }
                            if (dr["DateTime"].ToString() == "")
                            {
                                MyString = "";
                            }
                            else
                            {
                                MyDateTime = Convert.ToDateTime(dr["DateTime"].ToString());
                                MyString = MyDateTime.ToString("HH:mm");
                            }
                            newrow["Del Time"] = MyString;
                            CollectionDateTime = Convert.ToDateTime(drp["PayTime"].ToString());
                            string colldate;
                            colldate = CollectionDateTime.ToString("HH:mm");
                            newrow["Amount Col Time"] = colldate;
                            i++;
                            TimeReport.Rows.Add(newrow);
                        }
                    }
                }
                foreach (DataRow drreport in TimeReport.Rows)
                {
                    foreach (DataRow drinvd in dtDeltime.Rows)
                    {
                        if (drreport[2].ToString() == drinvd["BranchName"].ToString())
                        {
                            string MyString;
                            if (drinvd["DeliveryTime"].ToString() == "")
                            {
                                MyString = "";
                            }
                            else
                            {
                                MyDateTime = Convert.ToDateTime(drinvd["DeliveryTime"].ToString());
                                MyString = MyDateTime.ToString("HH:mm");
                            }
                            drreport[6] = MyString;
                        }
                    }
                }
                foreach (DataRow drCreport in TimeReport.Rows)
                {
                    foreach (DataRow drCinvd in dtColtime.Rows)
                    {
                        if (drCreport[2].ToString() == drCinvd["BranchName"].ToString())
                        {
                            string MyString;
                            if (drCinvd["CollectionTime"].ToString() == "")
                            {
                                MyString = "";
                            }
                            else
                            {
                                MyDateTime = Convert.ToDateTime(drCinvd["CollectionTime"].ToString());
                                MyString = MyDateTime.ToString("HH:mm");
                            }
                            drCreport[7] = MyString;
                        }
                    }
                }
            }
            foreach (DataRow dr in Report.Rows)
            {
                foreach (DataRow drtime in TimeReport.Rows)
                {
                    if (dr["BranchID"].ToString() == drtime["BranchID"].ToString())
                    {
                        dr["IndTime"] = drtime["Ind Time"].ToString();
                        dr["DelTime"] = drtime["Del Time"].ToString();
                        dr["AmountColTime"] = drtime["Amount Col Time"].ToString();
                        dr["DelInvTime"] = drtime["Inv Del Time"].ToString();
                        dr["ColInvTime"] = drtime["Inv Col Time"].ToString();
                    }
                }
            }
            cmd = new MySqlCommand("SELECT branchdata.sno, branchdata.BranchName, inventory_monitor.Qty, branchaccounts.Amount FROM dispatch_sub INNER JOIN dispatch ON dispatch_sub.dispatch_sno = dispatch.sno INNER JOIN branchroutes ON dispatch_sub.Route_id = branchroutes.Sno INNER JOIN  branchroutesubtable ON branchroutes.Sno = branchroutesubtable.RefNo INNER JOIN branchdata ON branchroutesubtable.BranchID = branchdata.sno INNER JOIN branchaccounts ON branchdata.sno = branchaccounts.BranchId INNER JOIN inventory_monitor ON branchaccounts.BranchId = inventory_monitor.BranchId WHERE (dispatch.sno = @dispatchSno) GROUP BY branchdata.BranchName");
            cmd.Parameters.AddWithValue("@dispatchSno", DespID);
            DataTable dtBranch = vdbmngr.SelectQuery(cmd).Tables[0];
            foreach (DataRow dr in Report.Rows)
            {
                foreach (DataRow drtime in dtBranch.Rows)
                {
                    if (dr["BranchID"].ToString() == drtime["sno"].ToString())
                    {
                        dr["DueAmount"] = drtime["Amount"].ToString();
                        dr["Inventory"] = drtime["Qty"].ToString();
                    }
                }
            }

            foreach (DataRow dr in Report.Rows)
            {
                RouteAgentDetails GetInformationtion = new RouteAgentDetails();
                GetInformationtion.BranchID = dr["BranchID"].ToString();
                GetInformationtion.BranchName = dr["BranchName"].ToString();
                GetInformationtion.Totalindent = dr["Totalindent"].ToString();
                GetInformationtion.TotalDispatch = dr["TotalDispatch"].ToString();
                GetInformationtion.IndTime = dr["IndTime"].ToString();
                GetInformationtion.DelTime = dr["DelTime"].ToString();
                GetInformationtion.AmountTime = dr["AmountColTime"].ToString();
                GetInformationtion.DelInvTime = dr["DelInvTime"].ToString();
                GetInformationtion.ColInvTime = dr["ColInvTime"].ToString();
                GetInformationtion.Due = dr["DueAmount"].ToString();
                GetInformationtion.Inventory = dr["Inventory"].ToString();
                AgentInformationlist.Add(GetInformationtion);
            }
            string respnceString = GetJson(AgentInformationlist);
            context.Response.Write(respnceString);
        }
        catch
        {
        }
    }
    public class RouteAgentDetails
    {
        public string BranchID { get; set; }
        public string BranchName { get; set; }
        public string Totalindent { get; set; }
        public string TotalDispatch { get; set; }
        public string IndTime { get; set; }
        public string DelTime { get; set; }
        public string AmountTime { get; set; }
        public string DelInvTime { get; set; }
        public string ColInvTime { get; set; }
        public string Due { get; set; }
        public string Inventory { get; set; }
    }
    private void btnHelperMasterSaveclick(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            var js = new JavaScriptSerializer();
            DateTime ServerDateCurrentdate = VehicleDBMgr.GetTime(vdbmngr.conn);
            var title1 = context.Request.Params[1];
            Orders obj = js.Deserialize<Orders>(title1);
            foreach (Helperdetails o in obj.HelperMasterdetails)
            {
                double Amount = 0;
                double.TryParse(o.Amount, out Amount);
                double first = 0;
                double.TryParse(o.First, out first);
                double second = 0;
                double.TryParse(o.Second, out second);
                double third = 0;
                double.TryParse(o.Third, out third);
                double fourth = 0;
                double.TryParse(o.Fourth, out fourth);
                cmd = new MySqlCommand("insert into helpermaster (despsno,amount,first,second,third,fourth,flag,doe) values(@despsno,@amount,@first,@second,@third,@fourth,@flag,@doe)");
                cmd.Parameters.AddWithValue("@flag", true);
                cmd.Parameters.AddWithValue("@despsno", o.Despsno);
                cmd.Parameters.AddWithValue("@amount", Amount);
                cmd.Parameters.AddWithValue("@first", first);
                cmd.Parameters.AddWithValue("@second", second);
                cmd.Parameters.AddWithValue("@third", third);
                cmd.Parameters.AddWithValue("@fourth", fourth);
                cmd.Parameters.AddWithValue("@doe", ServerDateCurrentdate);
                vdbmngr.insert(cmd);
            }
            string msg = "Helper Master Saved Successfully";
            string errresponse = GetJson(msg);
            context.Response.Write(errresponse);
        }
        catch (Exception ex)
        {
            string msg = ex.Message;
            string errresponse = GetJson(msg);
            context.Response.Write(errresponse);
        }
    }
    class tripcollection
    {
        public string Sno { get; set; }
        public string Branchid { get; set; }
        public string Branchname { get; set; }
        public string Tripid { get; set; }
        public string PaidDate { get; set; }
        public string PaidAmount { get; set; }
        public string SaleValue { get; set; }
        public string DebitAmount { get; set; }
        public string JvAmount { get; set; }
        public string ClosingAmount { get; set; }
        public string OpeningAmount { get; set; }
        public string TotalAmount { get; set; }
        public string DelivaryDate { get; set; }

    }
    class Tripleaks
    {
        public string Dcno { get; set; }
        public string Entrydate { get; set; }
        public string productid { get; set; }
        public string Productname { get; set; }
        public string Leaks { get; set; }
        public string Shorts { get; set; }
        public string Returns { get; set; }
        public string Free { get; set; }
        public string Leakstatus { get; set; }
        public string ReturnStatus { get; set; }
        public string tabletype { get; set; }
        public string BranchId { get; set; }
        public string PuffLeaks { get; set; }
    }
    private void GetsoandPlantDespNames(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            DataTable dtDesp = new DataTable();
            dtDesp.Columns.Add("DispName");
            dtDesp.Columns.Add("sno");
            cmd = new MySqlCommand("SELECT dispatch.sno, dispatch.DispName FROM dispatch INNER JOIN branchdata ON dispatch.Branch_Id = branchdata.sno WHERE (branchdata.SalesOfficeID = @SOID) OR (dispatch.Branch_Id = @BranchID) AND (dispatch.flag = @flag)");
            cmd.Parameters.AddWithValue("@SOID", context.Session["branch"]);
            cmd.Parameters.AddWithValue("@BranchID", context.Session["branch"]);
            cmd.Parameters.AddWithValue("@flag", "1");
            DataTable dtsodesp = vdbmngr.SelectQuery(cmd).Tables[0];
            foreach (DataRow dr in dtsodesp.Rows)
            {
                DataRow newrow = dtDesp.NewRow();
                newrow["DispName"] = dr["DispName"].ToString();
                newrow["sno"] = dr["sno"].ToString();
                dtDesp.Rows.Add(newrow);
            }
            List<soplantdesp> datalist = new List<soplantdesp>();
            int i = 1;
            cmd = new MySqlCommand("SELECT dispatch.sno, dispatch.DispName FROM dispatch INNER JOIN branchdata ON dispatch.BranchId = branchdata.sno WHERE (branchdata.SalesOfficeID = @SOID) OR (dispatch.BranchId = @BranchID) AND (dispatch.flag = @flag)");
            cmd.Parameters.AddWithValue("@SOID", context.Session["branch"]);
            cmd.Parameters.AddWithValue("@BranchID", context.Session["branch"]);
            cmd.Parameters.AddWithValue("@flag", "1");
            DataTable dtplantdesp = vdbmngr.SelectQuery(cmd).Tables[0];
            foreach (DataRow dr in dtplantdesp.Rows)
            {
                DataRow newrow = dtDesp.NewRow();
                newrow["DispName"] = dr["DispName"].ToString();
                newrow["sno"] = dr["sno"].ToString();
                dtDesp.Rows.Add(newrow);
            }
            foreach (DataRow dr in dtDesp.Rows)
            {
                soplantdesp GetDesp = new soplantdesp();
                GetDesp.Sno = i++.ToString();
                GetDesp.Despsno = dr["sno"].ToString();
                GetDesp.DespName = dr["DispName"].ToString();
                datalist.Add(GetDesp);
            }
            string errresponse = GetJson(datalist);
            context.Response.Write(errresponse);
        }
        catch
        {
        }
    }
    public class soplantdesp
    {
        public string Despsno { get; set; }
        public string DespName { get; set; }
        public string Sno { get; set; }
    }
    private void getLineForProduct(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            DataTable dtble = new DataTable();
            string SubcatSno = context.Request["SubcatSno"];
            DateTime ServerDateCurrentdate = VehicleDBMgr.GetTime(vdbmngr.conn);
            string branchid = context.Request["agentid"];
            string type = context.Request["type"];
            string frmdate = context.Request["fromdate"];
            string todate = context.Request["todate"];
            DateTime FromDate = Convert.ToDateTime(frmdate);
            DateTime ToDate = Convert.ToDateTime(todate);
            double count = 0;
            count = (double)(ToDate - FromDate.AddDays(-1)).TotalDays;
            //DateTime FromDate = ServerDateCurrentdate.AddDays(-30);
            //DateTime ToDate = ServerDateCurrentdate.AddDays(-1);
            if (type == "SingleProduct")
            {
                cmd = new MySqlCommand("SELECT indents.IndentNo, indents.Branch_id, DATE_FORMAT(indents.I_date, '%m %d %y') AS IndentDate, ROUND(SUM(indsubtab.DeliveryQty), 2) AS saleqty,indsubtab.Product_sno, productsdata.ProductName, productsdata.SubCat_sno, products_subcategory.SubCatName, products_category.Categoryname FROM indents INNER JOIN (SELECT IndentNo, Product_sno, Qty, DeliveryQty, D_date, unitQty, UnitCost FROM indents_subtable WHERE (Product_sno = @prdtsno)) indsubtab ON indents.IndentNo = indsubtab.IndentNo INNER JOIN productsdata ON indsubtab.Product_sno = productsdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno WHERE (indents.Branch_id = @branchid) AND (indents.I_date BETWEEN @d1 AND @d2) GROUP BY indentdate ORDER BY indentdate");
                cmd.Parameters.AddWithValue("@branchid", branchid);
                cmd.Parameters.AddWithValue("@prdtsno", SubcatSno);

                cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate.AddDays(-1)));
                cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate));
                dtble = vdbmngr.SelectQuery(cmd).Tables[0];

            }
            else
            {
                cmd = new MySqlCommand("SELECT indents.IndentNo, indents.Branch_id, DATE_FORMAT(indents.I_date, '%m %d %y') AS IndentDate, ROUND(SUM(indsubtab.DeliveryQty), 2) AS saleqty,indsubtab.Product_sno, productsdata.ProductName, productsdata.SubCat_sno, products_subcategory.SubCatName, products_category.Categoryname FROM  indents INNER JOIN (SELECT IndentNo, Product_sno, Qty, DeliveryQty, D_date, unitQty, UnitCost FROM indents_subtable WHERE (D_date BETWEEN @d3 AND @d4)) indsubtab ON indents.IndentNo = indsubtab.IndentNo INNER JOIN productsdata ON indsubtab.Product_sno = productsdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno WHERE (indents.Branch_id = @branchid) AND (indents.I_date BETWEEN @d1 AND @d2) GROUP BY indentdate ORDER BY indentdate");
                cmd.Parameters.AddWithValue("@branchid", branchid);
                cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate.AddDays(-1)));
                cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate));
                cmd.Parameters.AddWithValue("@d3", GetLowDate(FromDate.AddDays(-1)));
                cmd.Parameters.AddWithValue("@d4", GetHighDate(ToDate.AddDays(5)));
                dtble = vdbmngr.SelectQuery(cmd).Tables[0];
            }
            List<LineChartValuesclass> LineChartValuelist = new List<LineChartValuesclass>();
            string SaleQty = "";
            string SaleQtyAvg = "";
            string Date = "";
            double avgSaleQty = 0;
            foreach (DataRow dr in dtble.Rows)
            {
                SaleQty += dr["saleqty"].ToString() + ',';
                double dispQty = 0;
                double.TryParse(dr["saleqty"].ToString(), out dispQty);
                avgSaleQty += dispQty;
                DateTime dtDOE = Convert.ToDateTime(dr["IndentDate"].ToString());
                string ChangedTime2 = dtDOE.AddDays(1).ToString("dd MMM yy");
                Date += ChangedTime2 + ',';
            }
            double avg = 0;
            SaleQty = SaleQty.Substring(0, SaleQty.Length - 1);
            avg = (avgSaleQty / count);
            avg = Math.Round(avg, 2);
            Date = Date.Substring(0, Date.Length - 1);
            foreach (DataRow dr in dtble.Rows)
            {
                SaleQtyAvg += avg.ToString() + ",";
            }
            SaleQtyAvg = SaleQtyAvg.Substring(0, SaleQtyAvg.Length - 1);
            LineChartValuesclass getLineChart = new LineChartValuesclass();
            List<string> unitlist = new List<string>();
            List<string> Deliverlist = new List<string>();
            List<string> Datelist = new List<string>();
            List<string> Statuslist = new List<string>();

            Deliverlist.Add(SaleQty);
            Deliverlist.Add(SaleQtyAvg);
            Statuslist.Add("Sale Qty");
            Statuslist.Add("Avg Qty");
            getLineChart.IndentDate = Date;
            getLineChart.DeliveryQty = Deliverlist;
            getLineChart.UnitQty = SaleQtyAvg;
            getLineChart.Status = Statuslist;
            LineChartValuelist.Add(getLineChart);
            string respnceString = GetJson(LineChartValuelist);
            context.Response.Write(respnceString);

        }
        catch
        {

        }
    }
    private void getLineChartforsubcategeoryReport1(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            string SubcatSno = context.Request["ProductName"];
            DateTime ServerDateCurrentdate = VehicleDBMgr.GetTime(vdbmngr.conn);
            string s = context.Request["FromDate"];
            DateTime FromDate = Convert.ToDateTime(s);
            string e = context.Request["Todate"];
            DateTime ToDate = Convert.ToDateTime(e);
            cmd = new MySqlCommand("SELECT    ROUND(SUM(tripsubdata.Qty), 2) AS dispatchqty, tripdat.AssignDate, dispatch.BranchID, products_subcategory.SubCatName, branchdata.BranchName FROM  dispatch INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN (SELECT Sno, EmpId, DATE_FORMAT(AssignDate, '%m %d %y') AS AssignDate FROM  tripdata WHERE (AssignDate BETWEEN @d1 AND @d2)) tripdat ON triproutes.Tripdata_sno = tripdat.Sno INNER JOIN tripsubdata ON tripdat.Sno = tripsubdata.Tripdata_sno INNER JOIN productsdata ON tripsubdata.ProductId = productsdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN branchdata ON branchdata.sno = dispatch.BranchID WHERE (dispatch.Branch_Id = @BranchID) AND (products_subcategory.sno = @subcatSno) GROUP BY tripdat.AssignDate, dispatch.BranchID ORDER BY tripdat.AssignDate");
            cmd.Parameters.AddWithValue("@subcatSno", SubcatSno);
            cmd.Parameters.AddWithValue("@BranchID", context.Session["branch"]);
            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate));
            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate));
            DataTable dtble = vdbmngr.SelectQuery(cmd).Tables[0];
            List<LineChartValuesclass> LineChartValuelist = new List<LineChartValuesclass>();
            LineChartValuesclass getLineChart = new LineChartValuesclass();
            List<string> unitlist = new List<string>();
            List<string> Deliverlist = new List<string>();
            List<string> Datelist = new List<string>();
            List<string> Statuslist = new List<string>();
            List<string> ActMillist = new List<string>();
            string MainQty = "";
            string DelQty = "";
            string IndDate = "";
            string AvgMileage = "";
            double avgSaleQty = 0;
            int count = 0;
            foreach (DataRow dr in dtble.Rows)
            {
                string DeliveryQty = dr["dispatchqty"].ToString();
                DelQty += DeliveryQty + ",";
                double milltr = 0;
                double.TryParse(dr["dispatchqty"].ToString(), out milltr);
                avgSaleQty += milltr;
                string IndentDate = dr["AssignDate"].ToString();
                DateTime dtIndentDate = Convert.ToDateTime(IndentDate).AddDays(1);
                string ChangedTime = dtIndentDate.ToString("dd");
                IndDate += ChangedTime + ",";
                count++;
            }
            double avg = 0;
            avg = (avgSaleQty / count);
            avg = Math.Round(avg, 2);
            foreach (DataRow dr in dtble.Rows)
            {
                string TodayMileage = dr["dispatchqty"].ToString();
                if (TodayMileage != "0")
                {
                    AvgMileage += avg.ToString() + ",";
                }
            }
            AvgMileage = AvgMileage.Substring(0, AvgMileage.Length - 1);
            IndDate = IndDate.Substring(0, IndDate.Length - 1);
            DelQty = DelQty.Substring(0, DelQty.Length - 1);
            Deliverlist.Add(DelQty);
            Deliverlist.Add(AvgMileage);
            Statuslist.Add("Saels");
            Statuslist.Add("Avg Sales");
            getLineChart.IndentDate = IndDate;
            getLineChart.DeliveryQty = Deliverlist;
            getLineChart.UnitQty = MainQty;
            getLineChart.Status = Statuslist;
            getLineChart.ActMileage = ActMillist;
            LineChartValuelist.Add(getLineChart);
            string respnceString = GetJson(LineChartValuelist);
            context.Response.Write(respnceString);
        }
        catch
        {
        }
    }
    private void GetAgentPrdtInformation(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            List<TotalProductclass> Categeorylist = new List<TotalProductclass>();
            DateTime ServerDateCurrentdate = VehicleDBMgr.GetTime(vdbmngr.conn);
            string BranchID = context.Request["agentid"];
            string fromdate = context.Request["fromdate"];
            context.Session["Agentid"] = BranchID;
            context.Session["AgentName"] = context.Request["AgentName"].ToString();
            string todate = context.Request["todate"];
            DateTime startdate = Convert.ToDateTime(fromdate);
            DateTime enddate = Convert.ToDateTime(todate);
            float count = 0;
            count = (float)(enddate - startdate).TotalDays;
            cmd = new MySqlCommand("SELECT indents.IndentNo, indents.Branch_id, indents.I_date, ROUND(SUM(indsubtab.DeliveryQty),2) AS saleqty, indsubtab.Product_sno, productsdata.ProductName,productsdata.SubCat_sno, products_subcategory.SubCatName, products_category.Categoryname FROM indents INNER JOIN (SELECT IndentNo, Product_sno, Qty, DeliveryQty, D_date, unitQty, UnitCost FROM indents_subtable WHERE (D_date BETWEEN @d3 AND @d4)) indsubtab ON indents.IndentNo = indsubtab.IndentNo INNER JOIN productsdata ON indsubtab.Product_sno = productsdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno WHERE (indents.Branch_id = @branchid) AND (indents.I_date BETWEEN @d1 AND @d2) GROUP BY indsubtab.Product_sno");
            cmd.Parameters.AddWithValue("@branchid", BranchID);
            cmd.Parameters.AddWithValue("@d1", GetLowDate(startdate).AddDays(-1));
            cmd.Parameters.AddWithValue("@d2", GetHighDate(enddate).AddDays(-1));
            cmd.Parameters.AddWithValue("@d3", GetLowDate(startdate).AddDays(-1));
            cmd.Parameters.AddWithValue("@d4", GetHighDate(ServerDateCurrentdate));
            DataTable dtagentprdt = vdbmngr.SelectQuery(cmd).Tables[0];
            cmd = new MySqlCommand("SELECT  sno,  Agent_PIC, tbranchname, ladger_dr, statename, incentivename, panno, customercode, whcode, ladger_dr_code FROM branchdata WHERE  (sno = @branchid)");
            cmd.Parameters.AddWithValue("@branchid", BranchID);
            DataTable dtagentimages = vdbmngr.SelectQuery(cmd).Tables[0];
            cmd = new MySqlCommand("SELECT  sno,  Shop_Photo, tbranchname, ladger_dr, statename, incentivename, panno, customercode, whcode, ladger_dr_code FROM branchdata WHERE  (sno = @branchid)");
            cmd.Parameters.AddWithValue("@branchid", BranchID);
            DataTable dtshopimages = vdbmngr.SelectQuery(cmd).Tables[0];
            List<AgentImages> agentimaglist = new List<AgentImages>();
            List<AgentMaster> agentmasterlist = new List<AgentMaster>();
            List<ShopImages> shopimageslist = new List<ShopImages>();

            foreach (DataRow drr in dtagentimages.Rows)
            {
                AgentImages obj1 = new AgentImages();
                obj1.Agent_PIC = drr["Agent_PIC"].ToString();
                obj1.ftplocation = "ftp://223.196.32.30:21/Sales/";
                agentimaglist.Add(obj1);
            }
            foreach (DataRow drr in dtshopimages.Rows)
            {
                ShopImages obj = new ShopImages();
                obj.Shop_Photo = drr["Shop_Photo"].ToString();
                obj.ftplocation = "ftp://223.196.32.30:21/Sales/";
                shopimageslist.Add(obj);
            }
            foreach (DataRow dr in dtagentprdt.Rows)
            {
                TotalProductclass GetProduct = new TotalProductclass();
                GetProduct.Qty = dr["saleqty"].ToString();
                GetProduct.CategeoryName = dr["Categoryname"].ToString();
                GetProduct.subCategeoryName = dr["ProductName"].ToString();
                GetProduct.subCatsno = dr["Product_sno"].ToString();
                Categeorylist.Add(GetProduct);
            }
            AgentMaster obj2 = new AgentMaster();
            obj2.AgentImages = agentimaglist;
            obj2.TotalProductclass = Categeorylist;
            obj2.ShopImages = shopimageslist;
            agentmasterlist.Add(obj2);
            string errresponse = GetJson(agentmasterlist);
            context.Response.Write(errresponse);
        }
        catch
        {

        }
    }
    public class TotalProductclass
    {
        public string subCatsno { get; set; }
        public string subCategeoryName { get; set; }
        public string CategeoryName { get; set; }
        public string Qty { get; set; }
        public string Nos { get; set; }
        public string Kgs { get; set; }
        public string Ltrs { get; set; }
        public string TotQty { get; set; }
        public string SaleValue { get; set; }
        public string CatSno { get; set; }
    }
    public class SubTotalProductclass
    {
        public string MilkQty { get; set; }
        public string CurdQty { get; set; }
        public string OtherQty { get; set; }
        public string MilkValue { get; set; }
        public string CurdValue { get; set; }
        public string OthersValue { get; set; }
    }
    public class MainTotalProductclass
    {
        public List<TotalProductclass> TotalProductclass { get; set; }
        public List<SubTotalProductclass> SubTotalProductclass { get; set; }
    }
    class AgentImages
    {
        public string ftplocation { get; set; }
        public string Agent_PIC { get; set; }
    }
    class ShopImages
    {
        public string ftplocation { get; set; }
        public string Shop_Photo { get; set; }
    }
    class AgentMaster
    {
        public List<ShopImages> ShopImages { get; set; }
        public List<AgentImages> AgentImages { get; set; }
        public List<TotalProductclass> TotalProductclass { get; set; }
    }
    private void GetAllSalesOffice(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();

            List<SoClass> Solist = new List<SoClass>();
            string BranchID = context.Session["branch"].ToString();

            DataTable dtBranch = new DataTable();
            dtBranch.Columns.Add("BranchName");
            dtBranch.Columns.Add("sno");
            cmd = new MySqlCommand("SELECT branchdata.BranchName, branchdata.sno FROM branchdata INNER JOIN branchmappingtable ON branchdata.sno = branchmappingtable.SubBranch WHERE (branchmappingtable.SuperBranch = @SuperBranch) and (branchdata.SalesType=@SalesType)  ");
            cmd.Parameters.AddWithValue("@SuperBranch", BranchID);
            cmd.Parameters.AddWithValue("@SalesType", "21");
            cmd.Parameters.AddWithValue("@SalesType1", "26");
            DataTable dtRoutedata = vdbmngr.SelectQuery(cmd).Tables[0];
            foreach (DataRow dr in dtRoutedata.Rows)
            {
                DataRow newrow = dtBranch.NewRow();
                newrow["BranchName"] = dr["BranchName"].ToString();
                newrow["sno"] = dr["sno"].ToString();
                dtBranch.Rows.Add(newrow);
            }
            cmd = new MySqlCommand("SELECT BranchName, sno FROM  branchdata WHERE (sno = @BranchID)");
            cmd.Parameters.AddWithValue("@BranchID", BranchID);
            DataTable dtPlant = vdbmngr.SelectQuery(cmd).Tables[0];
            foreach (DataRow dr in dtPlant.Rows)
            {
                DataRow newrow = dtBranch.NewRow();
                newrow["BranchName"] = dr["BranchName"].ToString();
                newrow["sno"] = dr["sno"].ToString();
                dtBranch.Rows.Add(newrow);
            }
            foreach (DataRow dr in dtBranch.Rows)
            {
                SoClass GetSoClass = new SoClass();
                GetSoClass.Sno = dr["sno"].ToString();
                GetSoClass.BranchName = dr["BranchName"].ToString();
                Solist.Add(GetSoClass);
            }
            string errresponse = GetJson(Solist);
            context.Response.Write(errresponse);
        }
        catch (Exception ex)
        {

        }
    }
    private void GetPlantSalesOffice(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            string salestype = context.Session["salestype"].ToString();
            string BranchID = context.Session["branch"].ToString();
            List<SoClass> Solist = new List<SoClass>();
            if (salestype == "Plant")
            {
                cmd = new MySqlCommand("SELECT branchdata.BranchName, branchdata.sno FROM branchdata INNER JOIN branchmappingtable ON branchdata.sno = branchmappingtable.SubBranch WHERE (branchmappingtable.SuperBranch = @SuperBranch) and (branchdata.SalesType=@SalesType) and (branchdata.flag<>0) or (branchmappingtable.SuperBranch = @SuperBranch) and (branchdata.SalesType=@SalesType1) and (branchdata.flag<>0) ");
                cmd.Parameters.AddWithValue("@SuperBranch", BranchID);
                cmd.Parameters.AddWithValue("@SalesType", "21");
                cmd.Parameters.AddWithValue("@SalesType1", "26");
                DataTable dtRoutedata = vdbmngr.SelectQuery(cmd).Tables[0];
                foreach (DataRow dr in dtRoutedata.Rows)
                {
                    SoClass GetSoClass = new SoClass();
                    GetSoClass.Sno = dr["sno"].ToString();
                    GetSoClass.BranchName = dr["BranchName"].ToString();
                    Solist.Add(GetSoClass);
                }
                cmd = new MySqlCommand("SELECT BranchName, sno FROM  branchdata WHERE (sno = @BranchID) and (flag<>0)");
                cmd.Parameters.AddWithValue("@BranchID", BranchID);
                DataTable dtPlant = vdbmngr.SelectQuery(cmd).Tables[0];
                foreach (DataRow dr in dtPlant.Rows)
                {
                    SoClass GetSoClass = new SoClass();
                    GetSoClass.Sno = dr["sno"].ToString();
                    GetSoClass.BranchName = dr["BranchName"].ToString();
                    Solist.Add(GetSoClass);
                }
            }
            else
            {
                cmd = new MySqlCommand("SELECT branchdata.BranchName, branchdata.sno, branchdata.SalesType FROM branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno WHERE (branchdata_1.SalesOfficeID = @SOID) AND (branchdata.SalesType IS NOT NULL) and (branchdata.flag<>0) OR (branchdata.sno = @BranchID) AND (branchdata.SalesType IS NOT NULL) and (branchdata.flag<>0)");
                cmd.Parameters.AddWithValue("@SOID", BranchID);
                cmd.Parameters.AddWithValue("@BranchID", BranchID);
                DataTable dtRoutedata = vdbmngr.SelectQuery(cmd).Tables[0];
                foreach (DataRow dr in dtRoutedata.Rows)
                {
                    SoClass GetSoClass = new SoClass();
                    GetSoClass.Sno = dr["sno"].ToString();
                    GetSoClass.BranchName = dr["BranchName"].ToString();
                    Solist.Add(GetSoClass);
                }
            }
            string errresponse = GetJson(Solist);
            context.Response.Write(errresponse);
        }
        catch
        {
        }
    }
    private void GetSalesOfficeOffers(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            string salestype = context.Session["salestype"].ToString();
            string BranchID = context.Session["branch"].ToString();
            string soid = context.Request["ddlsalesofficeid"];
            List<SoClass> Solist = new List<SoClass>();

            cmd = new MySqlCommand("SELECT idoffers, offer_name FROM offers WHERE (salesofficeid = @soid) AND (Status <> 0)");
            cmd.Parameters.AddWithValue("@soid", soid);
            DataTable dtOfferdata = vdbmngr.SelectQuery(cmd).Tables[0];
            foreach (DataRow dr in dtOfferdata.Rows)
            {
                SoClass GetSoClass = new SoClass();
                GetSoClass.Sno = dr["idoffers"].ToString();
                GetSoClass.BranchName = dr["offer_name"].ToString();
                Solist.Add(GetSoClass);
            }
            string errresponse = GetJson(Solist);
            context.Response.Write(errresponse);
        }
        catch
        {

        }

    }
    private void btnVoucherUpdateClick(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            string VoucherID = context.Request["VoucherID"];
            string Remarks = context.Request["Remarks"];
            string BranchID = "0";
            string LevelType = context.Session["LevelType"].ToString();
            if (LevelType == "AccountsOfficer" || LevelType == "Director")
            {
                BranchID = context.Request["BranchID"];
            }
            else
            {
                BranchID = context.Session["branch"].ToString();
            }
            cmd = new MySqlCommand("Update cashpayables set Ramarks=@Ramarks where BranchID=@BranchID and Sno=@VocherID");
            cmd.Parameters.AddWithValue("@VocherID", VoucherID);
            cmd.Parameters.AddWithValue("@Remarks", Remarks);
            cmd.Parameters.AddWithValue("@BranchID", BranchID);
            vdbmngr.Update(cmd);
            string msg = "Voucher Updated successfully";
            string response = GetJson(msg);
            context.Response.Write(response);
        }
        catch
        {
        }
    }
    private void GetBtnViewVoucherclick(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            string VoucherID = context.Request["VoucherID"];
            string BranchID = "0";
            string LevelType = context.Session["LevelType"].ToString();
            if (LevelType == "AccountsOfficer" || LevelType == "Director")
            {
                BranchID = context.Request["BranchID"];
            }
            else
            {
                BranchID = context.Session["branch"].ToString();
            }
            List<VoucherClass> Voucherlist = new List<VoucherClass>();
            cmd = new MySqlCommand("SELECT  empmanage.EmpName,cashpayables.Empid, cashpayables.Approvedby, cashpayables.VoucherType, cashpayables.CashTo, cashpayables.onNameof, cashpayables.Amount, cashpayables.ApprovedAmount, empmanage_1.EmpName AS ApproveEmpName, cashpayables.Status, cashpayables.ApprovalRemarks, cashpayables.Remarks FROM empmanage empmanage_1 INNER JOIN cashpayables ON empmanage_1.Sno = cashpayables.Approvedby LEFT OUTER JOIN empmanage ON cashpayables.Empid = empmanage.Sno WHERE (cashpayables.Sno = @VoucherID) AND (cashpayables.BranchID = @BranchID)");
            cmd.Parameters.AddWithValue("@VoucherID", VoucherID);
            cmd.Parameters.AddWithValue("@BranchID", BranchID);
            DataTable dtVouchers = vdbmngr.SelectQuery(cmd).Tables[0];
            if (dtVouchers.Rows.Count > 0)
            {
                foreach (DataRow dr in dtVouchers.Rows)
                {
                    VoucherClass getVoucher = new VoucherClass();
                    getVoucher.EmpName = dr["EmpName"].ToString();
                    getVoucher.VoucherType = dr["VoucherType"].ToString();
                    getVoucher.CashTo = dr["CashTo"].ToString();
                    getVoucher.Description = dr["onNameof"].ToString();
                    getVoucher.Amount = dr["Amount"].ToString();
                    getVoucher.ApprovalAmount = dr["ApprovedAmount"].ToString();
                    getVoucher.ApproveEmpName = dr["ApproveEmpName"].ToString();
                    getVoucher.Status = dr["Status"].ToString();
                    getVoucher.ApprovalRemarks = dr["ApprovalRemarks"].ToString();
                    getVoucher.Remarks = dr["Remarks"].ToString();
                    getVoucher.Empid = dr["EmpID"].ToString();
                    getVoucher.ApprovedBy = dr["Approvedby"].ToString();
                    Voucherlist.Add(getVoucher);
                }
                string response = GetJson(Voucherlist);
                context.Response.Write(response);
            }
            else
            {
                string msg = "No voucher found";
                string response = GetJson(msg);
                context.Response.Write(response);
            }
        }
        catch
        {
        }
    }
    private void GetEditLeaksReturnsClick(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            List<Tripleaks> collectionList = new List<Tripleaks>();
            string RouteID = context.Request["RouteID"];
            string soid = context.Request["soid"];
            string IndDate = context.Request["IndDate"];
            string ddledittype = context.Request["ddledittype"];
            DataTable dtShortAndFree = new DataTable();
            DateTime dtinddate = Convert.ToDateTime(IndDate);
            if (ddledittype == "Routes")
            {
                cmd = new MySqlCommand("SELECT 'Leaks' as tabletype,ff.Sno,ff.ProductName,ff.Rank,ff.ProductID,ff.Empid,DATE_FORMAT(ff.I_date,'%d %b %y') as EntryDate , ff.FreeMilk, ff.ShortQty,ff.TotalLeaks,ff.ReturnQty FROM (SELECT Tripdata_sno, RouteID, Sno FROM triproutes triproutes_1 WHERE (RouteID = @dispatchSno)) Triproutes INNER JOIN (SELECT Sno,Empid,I_date, TotalLeaks,ReturnQty, VLeaks, VReturns,  ProductName, ProductID, FreeMilk, ShortQty,Rank FROM (SELECT tripdata.Sno,tripdata.Empid,tripdata.I_date, leakages.TotalLeaks, leakages.ReturnQty,leakages.VLeaks, leakages.VReturns,  productsdata.ProductName,productsdata.Rank, leakages.ProductID, leakages.FreeMilk,  leakages.ShortQty FROM  leakages INNER JOIN tripdata ON leakages.TripID = tripdata.Sno INNER JOIN productsdata ON leakages.ProductID = productsdata.sno WHERE (tripdata.I_Date BETWEEN @d1 AND @d2)) tripinfo) ff ON ff.Sno = Triproutes.Tripdata_sno order by ff.Rank");
                cmd.Parameters.AddWithValue("@dispatchSno", RouteID);
                cmd.Parameters.AddWithValue("@d1", GetLowDate(dtinddate));
                cmd.Parameters.AddWithValue("@d2", GetHighDate(dtinddate));
                DataTable dt_Leaks_Returns = vdbmngr.SelectQuery(cmd).Tables[0];
                dtShortAndFree.Merge(dt_Leaks_Returns);
                if (dt_Leaks_Returns.Rows.Count > 0)
                {
                    cmd = new MySqlCommand("SELECT 'Leaks' as tabletype,ShortQty,DATE_FORMAT(tripdata.I_date,'%d %b %y') as EntryDate,ProductID,LeakQty,ReturnQty,TotalLeaks,FreeMilk,Tripid as Sno,ProductName, ProductID,Rank FROM leakages  inner join tripdata on tripdata.Sno=leakages.TripID INNER JOIN Productsdata on leakages.ProductID=Productsdata.sno  WHERE (tripdata.DEmpId = @DEmpId) AND (tripdata.I_Date BETWEEN @d1 AND @d2) and (leakages.VarifyStatus IS NULL) order by Rank");
                    cmd.Parameters.AddWithValue("@DEmpId", dt_Leaks_Returns.Rows[0]["EmpId"].ToString());
                    cmd.Parameters.AddWithValue("@d1", GetLowDate(dtinddate));
                    cmd.Parameters.AddWithValue("@d2", GetHighDate(dtinddate));
                }
                DataTable DtTripId = vdbmngr.SelectQuery(cmd).Tables[0];
                dtShortAndFree.Merge(DtTripId);
            }
            else
            {
                cmd = new MySqlCommand("SELECT 'BranchLeaks' as tabletype,branchleaktrans.BranchID as Branch_Id,DATE_FORMAT(tripdata.I_date,'%d %b %y') as EntryDate, branchleaktrans.LeakQty as puffleaks,branchleaktrans.ShortQty,branchleaktrans.FreeQty as FreeMilk, branchleaktrans.TripId as Sno,branchleaktrans.ProdId as ProductID,Productsdata.ProductName,Productsdata.Rank  FROM branchleaktrans INNER JOIN tripdata ON branchleaktrans.TripId = tripdata.Sno INNER JOIN Productsdata ON branchleaktrans.ProdId=Productsdata.sno WHERE (tripdata.I_Date BETWEEN @d1 AND @d2) AND (branchleaktrans.BranchID = @BranchID) order by Productsdata.Rank");
                cmd.Parameters.AddWithValue("@BranchID", soid);
                cmd.Parameters.AddWithValue("@d1", GetLowDate(dtinddate));
                cmd.Parameters.AddWithValue("@d2", GetHighDate(dtinddate));
                DataTable dtsalesofficeshortfree = vdbmngr.SelectQuery(cmd).Tables[0];
                dtShortAndFree.Merge(dtsalesofficeshortfree);
                cmd = new MySqlCommand("SELECT  'Leaks' as tabletype,t4.Sno, t6.ProductID, t6.LeakQty, t6.ReturnQty, t6.FreeMilk, t6.TotalLeaks as TotalLeaks,t6.ShortQty, t6.ProductName, DATE_FORMAT(t6.EntryDate,'%d %b %y') as EntryDate FROM (SELECT t1.Sno, t1.RouteID, t1.I_Date, t3.Sno AS Expr1, t3.I_Date AS Expr2 FROM (SELECT tripdata.Sno, triproutes.RouteID, tripdata.I_Date FROM tripdata INNER JOIN triproutes ON tripdata.Sno = triproutes.Tripdata_sno WHERE (triproutes.RouteID = @routeid) AND (tripdata.I_Date BETWEEN @d1 AND @d2)) t1 LEFT OUTER JOIN (SELECT Sno, I_Date FROM (SELECT  tripdata_1.Sno, tripdata_1.I_Date FROM tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno WHERE (tripdata_1.I_Date BETWEEN @d1 AND @d2)) t2) t3 ON t3.Sno = t1.Sno) t4 LEFT OUTER JOIN (SELECT Sno, ProductID, LeakQty, DeductionAmount, ReturnQty, FreeMilk, TotalLeaks, VarifyStatus, VLeaks, VReturns, I_Date, ShortQty, VarifyReturnStatus,EntryDate, ProductName, productsno FROM (SELECT tripdata_2.Sno, leakages.ProductID, leakages.LeakQty, leakages.ShortQty, leakages.DeductionAmount, leakages.ReturnQty,leakages.FreeMilk, leakages.TotalLeaks, leakages.VarifyStatus, leakages.VLeaks, leakages.VReturns, tripdata_2.I_Date,leakages.VarifyReturnStatus, leakages.EntryDate, productsdata.ProductName, productsdata.sno AS productsno FROM  tripdata tripdata_2 INNER JOIN leakages ON tripdata_2.Sno = leakages.TripID INNER JOIN productsdata ON leakages.ProductID = productsdata.sno WHERE (tripdata_2.I_Date BETWEEN @d1 AND @d2)) t5) t6 ON t6.Sno = t4.Sno GROUP BY t6.ProductName");
                cmd.Parameters.AddWithValue("@routeid", RouteID);
                cmd.Parameters.AddWithValue("@d1", GetLowDate(dtinddate));
                cmd.Parameters.AddWithValue("@d2", GetHighDate(dtinddate));
                DataTable dt_Leaks_table = vdbmngr.SelectQuery(cmd).Tables[0];
                dtShortAndFree.Merge(dt_Leaks_table);
            }
            if (dtShortAndFree.Rows.Count > 0)
            {
                string collecteddate = "";
                DataTable dtall_leakages = new DataTable();
                dtall_leakages.Columns.Add("Sno");
                dtall_leakages.Columns.Add("ProductId");
                dtall_leakages.Columns.Add("ProductName");
                dtall_leakages.Columns.Add("EntryDate");
                dtall_leakages.Columns.Add("TotalLeaks");
                dtall_leakages.Columns.Add("PuffLeaks");
                dtall_leakages.Columns.Add("ShortQty");
                dtall_leakages.Columns.Add("FreeMilk");
                dtall_leakages.Columns.Add("ReturnQty");
                dtall_leakages.Columns.Add("BranchId");
                dtall_leakages.Columns.Add("TableName");
                DataView view = new DataView(dtShortAndFree);
                DataTable produtstbl = view.ToTable(true, "ProductId", "ProductName");
                foreach (DataRow drall in produtstbl.Rows)
                {
                    DataRow newrow = dtall_leakages.NewRow();
                    newrow["ProductId"] = drall["ProductId"].ToString();
                    newrow["ProductName"] = drall["ProductName"].ToString();
                    if (drall["ProductName"].ToString() != "")
                    {
                        double totleak = 0;
                        double totshrt = 0;
                        double totretrn = 0;
                        double totfree = 0;
                        double totPuffLeaks = 0;
                        foreach (DataRow drleaks in dtShortAndFree.Select("ProductId='" + drall["ProductId"].ToString() + "'"))
                        {
                            string paiddate = drleaks["EntryDate"].ToString();
                            string TotalLeaks = drleaks["TotalLeaks"].ToString();
                            string Shortmilk = drleaks["ShortQty"].ToString();
                            string freemilk = drleaks["FreeMilk"].ToString();
                            double leak = 0;
                            double shortqty = 0;
                            double free = 0;
                            double returnqty = 0;
                            double PuffLeaks = 0;
                            if (paiddate != "")
                            {
                                collecteddate = drleaks["EntryDate"].ToString();
                                newrow["EntryDate"] = collecteddate;
                            }
                            if (paiddate == "")
                            {
                                newrow["EntryDate"] = collecteddate;
                            }
                            if (ddledittype == "Sales Office")
                            {
                                string puffleaks = drleaks["puffleaks"].ToString();

                                if (puffleaks == "")
                                {
                                    newrow["PuffLeaks"] = totPuffLeaks;
                                }
                                if (puffleaks != "")
                                {
                                    double.TryParse(drleaks["puffleaks"].ToString(), out PuffLeaks);
                                    totPuffLeaks += PuffLeaks;
                                    newrow["PuffLeaks"] = totPuffLeaks;
                                }
                            }
                            if (TotalLeaks == "")
                            {
                                newrow["TotalLeaks"] = totleak;
                            }
                            if (TotalLeaks != "")
                            {
                                double.TryParse(drleaks["TotalLeaks"].ToString(), out leak);
                                totleak += leak;
                                newrow["TotalLeaks"] = totleak;
                            }
                            if (Shortmilk == "")
                            {
                                newrow["ShortQty"] = totshrt;
                            }
                            if (Shortmilk != "")
                            {
                                double.TryParse(drleaks["ShortQty"].ToString(), out shortqty);
                                totshrt += shortqty;
                                newrow["ShortQty"] = totshrt;
                            }
                            if (freemilk == "")
                            {
                                newrow["FreeMilk"] = totfree;
                            }
                            if (freemilk != "")
                            {
                                double.TryParse(drleaks["FreeMilk"].ToString(), out free);
                                totfree += free;
                                newrow["FreeMilk"] = totfree;
                            }
                            string retunmilk = drleaks["ReturnQty"].ToString();
                            if (retunmilk == "")
                            {
                                newrow["ReturnQty"] = totretrn;
                            }
                            if (retunmilk != "")
                            {
                                double.TryParse(drleaks["ReturnQty"].ToString(), out returnqty);
                                totretrn += returnqty;
                                newrow["ReturnQty"] = totretrn;
                            }
                            newrow["Sno"] = drleaks["Sno"].ToString();//tripdata sno
                            newrow["TableName"] = drleaks["tabletype"].ToString();
                        }
                    }
                    else
                    {
                        double totleak = 0;
                        double totshrt = 0;
                        double totfree = 0;
                        double totretrn = 0;
                        double totpuff = 0;
                        newrow["EntryDate"] = collecteddate;
                        newrow["TotalLeaks"] = totleak;
                        newrow["ShortQty"] = totshrt;
                        newrow["PuffLeaks"] = totpuff;
                        newrow["FreeMilk"] = totfree;
                        newrow["ReturnQty"] = totretrn;
                        newrow["ProductName"] = "0";
                        newrow["Tripdata_sno"] = dtShortAndFree.Rows[0]["Sno"].ToString();
                    }
                    dtall_leakages.Rows.Add(newrow);
                }
                foreach (DataRow dr in dtall_leakages.Rows)
                {
                    Tripleaks GetLeakreturn = new Tripleaks();
                    GetLeakreturn.Dcno = dr["Sno"].ToString();
                    GetLeakreturn.productid = dr["ProductId"].ToString();
                    GetLeakreturn.Productname = dr["ProductName"].ToString();
                    GetLeakreturn.tabletype = dr["TableName"].ToString();
                    GetLeakreturn.BranchId = dr["BranchId"].ToString();
                    string paiddate = dr["EntryDate"].ToString();
                    string TotalLeaks = dr["TotalLeaks"].ToString();
                    string Shortmilk = dr["ShortQty"].ToString();
                    string retunmilk = dr["ReturnQty"].ToString();
                    string freemilk = dr["FreeMilk"].ToString();
                    if (ddledittype == "Sales Office")
                    {
                        string pufleaks = dr["PuffLeaks"].ToString();
                        if (pufleaks == "")
                        {
                            GetLeakreturn.PuffLeaks = "0";
                        }
                        if (pufleaks != "")
                        {
                            GetLeakreturn.PuffLeaks = dr["PuffLeaks"].ToString();
                        }
                    }
                    else
                    {
                        GetLeakreturn.PuffLeaks = "0";
                    }
                    if (paiddate != "")
                    {
                        collecteddate = dr["EntryDate"].ToString();
                        GetLeakreturn.Entrydate = dr["EntryDate"].ToString();
                    }
                    if (paiddate == "")
                    {
                        GetLeakreturn.Entrydate = collecteddate;
                    }
                    if (TotalLeaks == "")
                    {
                        GetLeakreturn.Leaks = "0";
                    }
                    if (TotalLeaks != "")
                    {
                        GetLeakreturn.Leaks = dr["TotalLeaks"].ToString();
                    }
                    if (Shortmilk == "")
                    {
                        GetLeakreturn.Shorts = "0";
                    }
                    if (Shortmilk != "")
                    {
                        GetLeakreturn.Shorts = dr["ShortQty"].ToString();
                    }
                    if (freemilk == "")
                    {
                        GetLeakreturn.Free = "0";
                    }
                    if (freemilk != "")
                    {
                        GetLeakreturn.Free = dr["FreeMilk"].ToString();
                    }
                    if (retunmilk == "")
                    {
                        GetLeakreturn.Returns = "0";
                    }
                    if (retunmilk != "")
                    {
                        GetLeakreturn.Returns = dr["ReturnQty"].ToString();
                    }
                    collectionList.Add(GetLeakreturn);
                }
                string response = GetJson(collectionList);
                context.Response.Write(response);
            }
        }
        catch (Exception ex)
        {
            string msg = ex.Message;
            string response = GetJson(msg);
            context.Response.Write(response);
        }
    }
    private void btnEditLeaksSaveClick(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            var js = new JavaScriptSerializer();
            DateTime ServerDateCurrentdate = VehicleDBMgr.GetTime(vdbmngr.conn);
            var title1 = context.Request.Params[1];
            Orders obj = js.Deserialize<Orders>(title1);
            string indentdate = obj.indentdate;
            string edittypes = obj.edittype;
            string soid = obj.BranchID;
            int count = 0;
            int count1 = 0;
            string invtripid = "";
            if (edittypes == "Routes")
            {
                string varifystatus = "P";
                foreach (orderdetail o in obj.data)
                {
                    if (o.Productsno != "")
                    {
                        if (o.Productsno != "0")
                        {
                            string tripid = o.TripId;
                            invtripid = o.TripId;
                            string tabletype = o.Tabletype;
                            float leak = 0;
                            float returnqt = 0;
                            float freeqty = 0;
                            float shortqt = 0;
                            float.TryParse(o.LeakQty, out leak);
                            float.TryParse(o.FreeQty, out freeqty);
                            float.TryParse(o.ReturnQty, out returnqt);
                            float.TryParse(o.ShortQty, out shortqt);
                            float Prevleak = 0;
                            float Prevreturnqty = 0;
                            float Prevfreeqty = 0;
                            float Prevshortqty = 0;
                            float.TryParse(o.PLQty, out Prevleak);
                            float.TryParse(o.PFQty, out Prevfreeqty);
                            float.TryParse(o.PRQty, out Prevreturnqty);
                            float.TryParse(o.PSQty, out Prevshortqty);
                            float tot = 0;
                            tot = leak + freeqty + returnqt + shortqt;
                            cmd = new MySqlCommand("DELETE FROM leakages WHERE (TripID = @dcno) and (ProductID=@ProductID)");
                            cmd.Parameters.AddWithValue("@dcno", tripid);
                            cmd.Parameters.AddWithValue("@ProductID", o.Productsno);
                            if (leak != Prevleak)
                                vdbmngr.Delete(cmd);
                            else if (freeqty != Prevfreeqty)
                                vdbmngr.Delete(cmd);
                            else if (shortqt != Prevshortqty)
                                vdbmngr.Delete(cmd);
                            else if (returnqt != Prevreturnqty)
                                vdbmngr.Delete(cmd);
                            cmd = new MySqlCommand("SELECT VarifyStatus FROM leakages WHERE (TripID = @tripid) AND (VarifyStatus IS NOT NULL) GROUP BY TripID");
                            cmd.Parameters.AddWithValue("@tripid", tripid);
                            DataTable dt = vdbmngr.SelectQuery(cmd).Tables[0];
                            if (dt.Rows.Count > 0)
                            {
                                varifystatus = dt.Rows[0]["VarifyStatus"].ToString();
                            }
                            cmd = new MySqlCommand("select* from leakages where TripId = @TripId and ProductID = @ProductID");
                            cmd.Parameters.AddWithValue("@TripId", tripid);
                            cmd.Parameters.AddWithValue("@ProductID", o.Productsno);
                            DataTable dtl = vdbmngr.SelectQuery(cmd).Tables[0];
                            if (dtl.Rows.Count == 0)
                            {
                                cmd = new MySqlCommand("INSERT INTO leakages (TripID, EntryDate, ProductID, ReturnQty,FreeMilk,ShortQty, TotalLeaks, VarifyStatus, VarifyReturnStatus,Modified_EmpId) VALUES (@TripID, @EntryDate, @ProductID, @ReturnQty,@FreeMilk,@ShortQty, @TotalLeaks, @VarifyStatus, @VarifyReturnStatus,@Modified_EmpId)");
                                cmd.Parameters.AddWithValue("@TripID", o.TripId);
                                cmd.Parameters.AddWithValue("@EntryDate", ServerDateCurrentdate);
                                cmd.Parameters.AddWithValue("@ProductID", o.Productsno);
                                cmd.Parameters.AddWithValue("@ReturnQty", o.ReturnQty);
                                cmd.Parameters.AddWithValue("@FreeMilk", o.FreeQty);
                                cmd.Parameters.AddWithValue("@ShortQty", o.ShortQty);
                                cmd.Parameters.AddWithValue("@TotalLeaks", o.LeakQty);
                                cmd.Parameters.AddWithValue("@VarifyStatus", null);
                                cmd.Parameters.AddWithValue("@VarifyReturnStatus", null);
                                cmd.Parameters.AddWithValue("@Modified_EmpId", context.Session["UserSno"]);
                                if (leak != Prevleak)
                                    vdbmngr.insert(cmd);
                                else if (freeqty != Prevfreeqty)
                                    vdbmngr.insert(cmd);
                                else if (returnqt != Prevreturnqty)
                                    vdbmngr.insert(cmd);
                                else if (shortqt != Prevshortqty)
                                    vdbmngr.insert(cmd);
                            }
                        }
                    }
                }
            }
            if (edittypes == "Sales Office")
            {
                string varifystatus = "P";
                foreach (orderdetail o in obj.data)
                {
                    string tripid = o.TripId;
                    invtripid = o.TripId;
                    string tabletype = o.Tabletype;
                    float leak = 0;
                    float returnqt = 0;
                    float freeqty = 0;
                    float shortqt = 0;
                    float puffleaks = 0;
                    float.TryParse(o.LeakQty, out leak);
                    float.TryParse(o.FreeQty, out freeqty);
                    float.TryParse(o.ReturnQty, out returnqt);
                    float.TryParse(o.Puff_L, out puffleaks);
                    float Prevleak = 0;
                    float Prevreturnqty = 0;
                    float Prevfreeqty = 0;
                    float Prevshortqty = 0;
                    float Prevpuffqty = 0;
                    float.TryParse(o.PLQty, out Prevleak);
                    float.TryParse(o.PFQty, out Prevfreeqty);
                    float.TryParse(o.PRQty, out Prevreturnqty);
                    float.TryParse(o.PSQty, out Prevshortqty);
                    float.TryParse(o.PPufLQty, out Prevpuffqty);
                    if (puffleaks != Prevpuffqty)
                    {
                        cmd = new MySqlCommand("UPDATE  branchleaktrans SET EmpId=EmpId,ProdId=@ProdId,DOE=@DOE,BranchID=@BranchID,LeakQty=@LeakQty where TripId=@TripId and ProdId=@ProdId");
                        cmd.Parameters.AddWithValue("@EmpId", context.Session["UserSno"]);
                        cmd.Parameters.AddWithValue("@TripID", o.TripId);
                        cmd.Parameters.AddWithValue("@ProdId", o.Productsno);
                        cmd.Parameters.AddWithValue("@DOE", ServerDateCurrentdate);
                        cmd.Parameters.AddWithValue("@BranchID", soid);
                        cmd.Parameters.AddWithValue("@LeakQty", o.Puff_L);
                        if (vdbmngr.Update(cmd) == 0)
                        {
                            cmd = new MySqlCommand("INSERT INTO branchleaktrans (EmpId,TripId,ProdId,DOE,BranchID,LeakQty) VALUES (@EmpId,@TripId,@ProdId,@DOE,@BranchID,@LeakQty)");
                            cmd.Parameters.AddWithValue("@EmpId", context.Session["UserSno"]);
                            cmd.Parameters.AddWithValue("@TripID", o.TripId);
                            cmd.Parameters.AddWithValue("@ProdId", o.Productsno);
                            cmd.Parameters.AddWithValue("@DOE", ServerDateCurrentdate);
                            cmd.Parameters.AddWithValue("@BranchID", soid);
                            cmd.Parameters.AddWithValue("@LeakQty", o.Puff_L);
                            vdbmngr.insert(cmd);
                        }
                    }
                    else
                    {

                        cmd = new MySqlCommand("delete from  branchleaktrans WHERE (TripId = @TripId) and (ProdId=@ProdId)");
                        cmd.Parameters.AddWithValue("@TripId", tripid);
                        cmd.Parameters.AddWithValue("@ProdId", o.Productsno);
                        if (leak != Prevleak)
                            vdbmngr.Delete(cmd);
                        else if (freeqty != Prevfreeqty)
                            vdbmngr.Delete(cmd);
                        else if (shortqt != Prevshortqty)
                            vdbmngr.Delete(cmd);

                        cmd = new MySqlCommand("select* from branchleaktrans where TripId = @TripId and ProdId = @ProdId");
                        cmd.Parameters.AddWithValue("@TripId", tripid);
                        cmd.Parameters.AddWithValue("@ProdId", o.Productsno);
                        DataTable dt = vdbmngr.SelectQuery(cmd).Tables[0];
                        if (dt.Rows.Count == 0)
                        {
                            cmd = new MySqlCommand("INSERT INTO branchleaktrans (EmpId,TripId,ProdId,DOE,BranchID,FreeQty,ShortQty) VALUES (@EmpId,@TripId,@ProdId,@DOE,@BranchID,@FreeQty,@ShortQty)");
                            cmd.Parameters.AddWithValue("@EmpId", context.Session["UserSno"]);
                            cmd.Parameters.AddWithValue("@TripID", o.TripId);
                            cmd.Parameters.AddWithValue("@ProdId", o.Productsno);
                            cmd.Parameters.AddWithValue("@DOE", ServerDateCurrentdate);
                            cmd.Parameters.AddWithValue("@BranchID", soid);
                            cmd.Parameters.AddWithValue("@FreeQty", o.FreeQty);
                            cmd.Parameters.AddWithValue("@ShortQty", o.ShortQty);
                            if (leak != Prevleak)
                                vdbmngr.insert(cmd);
                            else if (freeqty != Prevfreeqty)
                                vdbmngr.insert(cmd);
                            else if (shortqt != Prevshortqty)
                                vdbmngr.insert(cmd);
                        }
                        cmd = new MySqlCommand("DELETE FROM leakages WHERE (TripID = @dcno) and (ProductID=@ProductID)");
                        cmd.Parameters.AddWithValue("@dcno", tripid);
                        cmd.Parameters.AddWithValue("@ProductID", o.Productsno);
                        if (leak != Prevleak)
                            vdbmngr.Delete(cmd);
                        else if (freeqty != Prevfreeqty)
                            vdbmngr.Delete(cmd);
                        else if (shortqt != Prevshortqty)
                            vdbmngr.Delete(cmd);
                        else if (returnqt != Prevreturnqty)
                            vdbmngr.Delete(cmd);

                        cmd = new MySqlCommand("select* from leakages where TripId = @TripId and ProductID = @ProductID");
                        cmd.Parameters.AddWithValue("@TripId", tripid);
                        cmd.Parameters.AddWithValue("@ProductID", o.Productsno);
                        DataTable dtl = vdbmngr.SelectQuery(cmd).Tables[0];
                        if (dtl.Rows.Count == 0)
                        {
                            cmd = new MySqlCommand("INSERT INTO leakages (TripID, EntryDate, ProductID, ReturnQty,TotalLeaks, VarifyStatus, VarifyReturnStatus,Modified_EmpId) VALUES (@TripID, @EntryDate, @ProductID, @ReturnQty,@TotalLeaks, @VarifyStatus, @VarifyReturnStatus,@Modified_EmpId)");
                            cmd.Parameters.AddWithValue("@TripID", o.TripId);
                            cmd.Parameters.AddWithValue("@EntryDate", ServerDateCurrentdate);
                            cmd.Parameters.AddWithValue("@ProductID", o.Productsno);
                            cmd.Parameters.AddWithValue("@ReturnQty", o.ReturnQty);
                            cmd.Parameters.AddWithValue("@TotalLeaks", o.LeakQty);
                            cmd.Parameters.AddWithValue("@VarifyStatus", null);
                            cmd.Parameters.AddWithValue("@VarifyReturnStatus", null);
                            cmd.Parameters.AddWithValue("@Modified_EmpId", context.Session["UserSno"]);
                            if (leak != Prevleak)
                                vdbmngr.insert(cmd);
                            else if (freeqty != Prevfreeqty)
                                vdbmngr.insert(cmd);
                            else if (returnqt != Prevreturnqty)
                                vdbmngr.insert(cmd);
                            else if (shortqt != Prevshortqty)
                                vdbmngr.insert(cmd);
                        }
                    }
                }
            }
            foreach (inventorydetail inv in obj.invdata)
            {
                int prevqty = 0;
                int editqty = 0;
                string branchid = "";
                int.TryParse(inv.Qty, out editqty);
                int.TryParse(inv.PrevInvQty, out prevqty);
                branchid = inv.Branchid;
                invtripid = inv.Tripid;
                int tot = 0;
                tot = prevqty + editqty;
                if (tot > 0)
                {
                    if (edittypes == "Routes")
                    {
                        cmd = new MySqlCommand("UPDATE invtransactions12 SET Qty = @qty,Modified_EmpId = @Modified_EmpId WHERE (B_inv_sno = @invsno) AND (FromTran = @tripid) AND (ToTran = @soid) AND (TransType = 2)");
                        cmd.Parameters.AddWithValue("@qty", editqty);
                        cmd.Parameters.AddWithValue("@invsno", inv.InventorySno);
                        cmd.Parameters.AddWithValue("@tripid", invtripid);
                        cmd.Parameters.AddWithValue("@soid", soid);
                        cmd.Parameters.AddWithValue("@Modified_EmpId", context.Session["UserSno"].ToString());
                        if (vdbmngr.Update(cmd) == 0)
                        {
                            cmd = new MySqlCommand("SELECT TransType, FromTran, ToTran, Qty, EmpID, VarifyStatus, VTripId, VEmpId, Sno, B_inv_sno, DOE, VQty, CBFromTran, CBToTran, DeliveryTime, CollectionTime,Remarks FROM invtransactions12 WHERE (FromTran = @tripid) AND (ToTran = @branchid)");
                            cmd.Parameters.AddWithValue("@tripid", invtripid);
                            cmd.Parameters.AddWithValue("@branchid", soid);
                            DataTable dtinvtrans = vdbmngr.SelectQuery(cmd).Tables[0];
                            cmd = new MySqlCommand("SELECT Sno, EmpId, AssignDate, Status, I_Date FROM tripdata WHERE (Sno = @tripid)");
                            cmd.Parameters.AddWithValue("@tripid", invtripid);
                            DataTable dttripsalesmen = vdbmngr.SelectQuery(cmd).Tables[0];
                            if (dtinvtrans.Rows.Count > 0)
                            {
                                if (dtinvtrans.Rows[0]["VarifyStatus"].ToString() == "P")
                                {
                                    cmd = new MySqlCommand("INSERT INTO invtransactions12 (TransType, FromTran, ToTran, Qty, EmpID, VarifyStatus, B_inv_sno, DOE,Modified_EmpId) VALUES (@TransType, @FromTran, @ToTran, @Qty, @EmpID, @VarifyStatus, @B_inv_sno, @DOE,@Modified_EmpId)");
                                    cmd.Parameters.AddWithValue("@TransType", dtinvtrans.Rows[0]["TransType"].ToString());
                                    cmd.Parameters.AddWithValue("@FromTran", dtinvtrans.Rows[0]["FromTran"].ToString());
                                    cmd.Parameters.AddWithValue("@ToTran", dtinvtrans.Rows[0]["ToTran"].ToString());
                                    cmd.Parameters.AddWithValue("@Qty", editqty);
                                    cmd.Parameters.AddWithValue("@EmpID", dtinvtrans.Rows[0]["EmpID"].ToString());
                                    cmd.Parameters.AddWithValue("@VarifyStatus", dtinvtrans.Rows[0]["VarifyStatus"].ToString());
                                    cmd.Parameters.AddWithValue("@B_inv_sno", inv.InventorySno);
                                    cmd.Parameters.AddWithValue("@DOE", ServerDateCurrentdate);
                                    cmd.Parameters.AddWithValue("@Modified_EmpId", context.Session["UserSno"].ToString());
                                    vdbmngr.insert(cmd);
                                }
                                else
                                {
                                    cmd = new MySqlCommand("INSERT INTO invtransactions12 (TransType, FromTran, ToTran, Qty, EmpID, VarifyStatus, VTripId, VEmpId, B_inv_sno, DOE, VQty, Remarks,Modified_EmpId) VALUES (@TransType, @FromTran, @ToTran, @Qty, @EmpID, @VarifyStatus, @VTripId, @VEmpId, @B_inv_sno, @DOE, @VQty, @Remarks,@Modified_EmpId)");
                                    cmd.Parameters.AddWithValue("@TransType", dtinvtrans.Rows[0]["TransType"].ToString());
                                    cmd.Parameters.AddWithValue("@FromTran", dtinvtrans.Rows[0]["FromTran"].ToString());
                                    cmd.Parameters.AddWithValue("@ToTran", dtinvtrans.Rows[0]["ToTran"].ToString());
                                    cmd.Parameters.AddWithValue("@Qty", editqty);
                                    cmd.Parameters.AddWithValue("@EmpID", dtinvtrans.Rows[0]["EmpID"].ToString());
                                    cmd.Parameters.AddWithValue("@VarifyStatus", dtinvtrans.Rows[0]["VarifyStatus"].ToString());
                                    cmd.Parameters.AddWithValue("@VTripId", dtinvtrans.Rows[0]["VTripId"].ToString());
                                    string vempid = "0";
                                    if (dtinvtrans.Rows[0]["VEmpId"].ToString() == "")
                                    {
                                        vempid = "0";
                                    }
                                    else
                                    {
                                        vempid = dtinvtrans.Rows[0]["VEmpId"].ToString();

                                    }
                                    cmd.Parameters.AddWithValue("@VEmpId", vempid);
                                    cmd.Parameters.AddWithValue("@B_inv_sno", inv.InventorySno);
                                    cmd.Parameters.AddWithValue("@DOE", ServerDateCurrentdate);
                                    cmd.Parameters.AddWithValue("@VQty", editqty);
                                    cmd.Parameters.AddWithValue("@Remarks", "No Remarks");
                                    cmd.Parameters.AddWithValue("@Modified_EmpId", context.Session["UserSno"].ToString());
                                    vdbmngr.insert(cmd);
                                }
                            }
                            else
                            {
                                cmd = new MySqlCommand("INSERT INTO invtransactions12 (TransType, FromTran, ToTran, Qty, EmpID, VarifyStatus,B_inv_sno, DOE, Remarks,Modified_EmpId) VALUES (@TransType, @FromTran, @ToTran, @Qty, @EmpID, @VarifyStatus,@B_inv_sno, @DOE,@Remarks,@Modified_EmpId)");
                                cmd.Parameters.AddWithValue("@TransType", "2");
                                cmd.Parameters.AddWithValue("@FromTran", invtripid);
                                cmd.Parameters.AddWithValue("@ToTran", soid);
                                cmd.Parameters.AddWithValue("@Qty", editqty);
                                cmd.Parameters.AddWithValue("@EmpID", dttripsalesmen.Rows[0]["EmpId"].ToString());
                                cmd.Parameters.AddWithValue("@VarifyStatus", "P");
                                cmd.Parameters.AddWithValue("@B_inv_sno", inv.InventorySno);
                                cmd.Parameters.AddWithValue("@DOE", ServerDateCurrentdate);
                                cmd.Parameters.AddWithValue("@Remarks", "No Remarks");
                                cmd.Parameters.AddWithValue("@Modified_EmpId", context.Session["UserSno"].ToString());
                                vdbmngr.insert(cmd);
                            }
                        }
                    }
                    if (edittypes == "Sales Office")
                    {
                        cmd = new MySqlCommand("UPDATE invtransactions12 SET Qty = @qty,Modified_EmpId = @Modified_EmpId WHERE (B_inv_sno = @invsno) AND (FromTran = @soid) AND (ToTran = @tripid) AND (TransType = 3)");
                        cmd.Parameters.AddWithValue("@qty", editqty);
                        cmd.Parameters.AddWithValue("@invsno", inv.InventorySno);
                        cmd.Parameters.AddWithValue("@tripid", invtripid);
                        cmd.Parameters.AddWithValue("@soid", soid);
                        cmd.Parameters.AddWithValue("@Modified_EmpId", context.Session["UserSno"].ToString());
                        if (vdbmngr.Update(cmd) == 0)
                        {
                            cmd = new MySqlCommand("SELECT TransType, FromTran, ToTran, Qty, EmpID, VarifyStatus, VTripId, VEmpId, Sno, B_inv_sno, DOE, VQty, CBFromTran, CBToTran, DeliveryTime, CollectionTime,Remarks FROM invtransactions12 WHERE (FromTran = @branchid) AND (ToTran = @tripid)");
                            cmd.Parameters.AddWithValue("@tripid", invtripid);
                            cmd.Parameters.AddWithValue("@branchid", soid);
                            DataTable dtinvtrans = vdbmngr.SelectQuery(cmd).Tables[0];
                            cmd = new MySqlCommand("SELECT Sno, EmpId, AssignDate, Status, I_Date FROM tripdata WHERE (Sno = @tripid)");
                            cmd.Parameters.AddWithValue("@tripid", invtripid);
                            DataTable dttripsalesmen = vdbmngr.SelectQuery(cmd).Tables[0];
                            if (dtinvtrans.Rows.Count > 0)
                            {
                                if (dtinvtrans.Rows[0]["VarifyStatus"].ToString() == "P")
                                {
                                    cmd = new MySqlCommand("INSERT INTO invtransactions12 (TransType, FromTran, ToTran, Qty, EmpID, VarifyStatus, B_inv_sno, DOE,Modified_EmpId) VALUES (@TransType, @FromTran, @ToTran, @Qty, @EmpID, @VarifyStatus,@B_inv_sno, @DOE,@Modified_EmpId)");
                                    cmd.Parameters.AddWithValue("@TransType", dtinvtrans.Rows[0]["TransType"].ToString());
                                    cmd.Parameters.AddWithValue("@FromTran", dtinvtrans.Rows[0]["FromTran"].ToString());
                                    cmd.Parameters.AddWithValue("@ToTran", dtinvtrans.Rows[0]["ToTran"].ToString());
                                    cmd.Parameters.AddWithValue("@Qty", editqty);
                                    cmd.Parameters.AddWithValue("@EmpID", dtinvtrans.Rows[0]["EmpID"].ToString());
                                    cmd.Parameters.AddWithValue("@VarifyStatus", dtinvtrans.Rows[0]["VarifyStatus"].ToString());
                                    cmd.Parameters.AddWithValue("@B_inv_sno", inv.InventorySno);
                                    cmd.Parameters.AddWithValue("@DOE", ServerDateCurrentdate);
                                    cmd.Parameters.AddWithValue("@Modified_EmpId", context.Session["UserSno"].ToString());
                                    vdbmngr.insert(cmd);
                                }
                                else
                                {
                                    cmd = new MySqlCommand("INSERT INTO invtransactions12 (TransType, FromTran, ToTran, Qty, EmpID, VarifyStatus, VEmpId, B_inv_sno, DOE, VQty, Remarks,Modified_EmpId) VALUES (@TransType, @FromTran, @ToTran, @Qty, @EmpID, @VarifyStatus, @VEmpId, @B_inv_sno, @DOE, @VQty, @Remarks,@Modified_EmpId)");
                                    cmd.Parameters.AddWithValue("@TransType", dtinvtrans.Rows[0]["TransType"].ToString());
                                    cmd.Parameters.AddWithValue("@FromTran", dtinvtrans.Rows[0]["FromTran"].ToString());
                                    cmd.Parameters.AddWithValue("@ToTran", dtinvtrans.Rows[0]["ToTran"].ToString());
                                    cmd.Parameters.AddWithValue("@Qty", editqty);
                                    cmd.Parameters.AddWithValue("@EmpID", dtinvtrans.Rows[0]["EmpID"].ToString());
                                    cmd.Parameters.AddWithValue("@VarifyStatus", dtinvtrans.Rows[0]["VarifyStatus"].ToString());
                                    cmd.Parameters.AddWithValue("@VEmpId", dtinvtrans.Rows[0]["VEmpId"].ToString());
                                    cmd.Parameters.AddWithValue("@B_inv_sno", inv.InventorySno);
                                    cmd.Parameters.AddWithValue("@DOE", ServerDateCurrentdate);
                                    cmd.Parameters.AddWithValue("@VQty", editqty);
                                    cmd.Parameters.AddWithValue("@Remarks", "No Remarks");
                                    cmd.Parameters.AddWithValue("@Modified_EmpId", context.Session["UserSno"].ToString());
                                    vdbmngr.insert(cmd);
                                }
                            }
                            else
                            {
                                cmd = new MySqlCommand("INSERT INTO invtransactions12 (TransType, FromTran, ToTran, Qty, EmpID, VarifyStatus,B_inv_sno, DOE, Remarks,Modified_EmpId) VALUES (@TransType, @FromTran, @ToTran, @Qty, @EmpID, @VarifyStatus,@B_inv_sno, @DOE,@Remarks,@Modified_EmpId)");
                                cmd.Parameters.AddWithValue("@TransType", "3");
                                cmd.Parameters.AddWithValue("@FromTran", soid);
                                cmd.Parameters.AddWithValue("@ToTran", invtripid);
                                cmd.Parameters.AddWithValue("@Qty", editqty);
                                cmd.Parameters.AddWithValue("@EmpID", dttripsalesmen.Rows[0]["EmpId"].ToString());
                                cmd.Parameters.AddWithValue("@VarifyStatus", "P");
                                cmd.Parameters.AddWithValue("@B_inv_sno", inv.InventorySno);
                                cmd.Parameters.AddWithValue("@DOE", ServerDateCurrentdate);
                                cmd.Parameters.AddWithValue("@Remarks", "No Remarks");
                                cmd.Parameters.AddWithValue("@Modified_EmpId", context.Session["UserSno"].ToString());
                                vdbmngr.insert(cmd);
                            }
                        }
                    }
                    cmd = new MySqlCommand("UPDATE tripinvdata SET Remaining = @editqty WHERE (Tripdata_sno = @tripid) AND (invid = @invsno)");
                    cmd.Parameters.AddWithValue("@editqty", editqty);
                    cmd.Parameters.AddWithValue("@tripid", invtripid);
                    cmd.Parameters.AddWithValue("@invsno", inv.InventorySno);
                    if (vdbmngr.Update(cmd) == 0)
                    {
                        cmd = new MySqlCommand("INSERT INTO tripinvdata (Tripdata_sno, invid, Qty, Remaining) VALUES (@Tripdata_sno, @invid, @Qty, @Remaining)");
                        cmd.Parameters.AddWithValue("@Tripdata_sno", invtripid);
                        cmd.Parameters.AddWithValue("@invid", inv.InventorySno);
                        int disqty = 0;
                        cmd.Parameters.AddWithValue("@Qty", disqty);
                        cmd.Parameters.AddWithValue("@Remaining", editqty);
                        vdbmngr.insert(cmd);
                    }

                }
            }
            string msg = "Leaks And Inventory Successfully Updated ";
            string response = GetJson(msg);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string msg = ex.Message;
            string response = GetJson(msg);
            context.Response.Write(response);
        }
    }
    private void GetEditCollectionValuesClick(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            List<tripcollection> collectionList = new List<tripcollection>();
            string RouteID = context.Request["RouteID"];
            string IndDate = context.Request["IndDate"];
            DateTime dtinddate = Convert.ToDateTime(IndDate);
            cmd = new MySqlCommand("SELECT result.Tripdata_sno, result.sno, result.DispName, result.BranchID, result.BranchName, collection.AmountPaid, collection.PaidDate FROM (SELECT triproutes.Tripdata_sno, dispatch.sno, dispatch.DispName, branchroutesubtable.BranchID, branchdata.BranchName FROM triproutes INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN dispatch ON triproutes.RouteID = dispatch.sno INNER JOIN branchroutesubtable ON dispatch.Route_id = branchroutesubtable.RefNo INNER JOIN branchdata ON branchroutesubtable.BranchID = branchdata.sno WHERE (triproutes.RouteID = @routeid) AND (tripdata.I_Date BETWEEN @d1 AND @d2)) result LEFT OUTER JOIN (SELECT PaidDate, AmountPaid, Branchid, tripId FROM collections WHERE (PaidDate BETWEEN @d3 AND @d4)) collection ON result.Tripdata_sno = collection.tripId AND result.BranchID = collection.Branchid ORDER BY collection.AmountPaid DESC");
            cmd.Parameters.AddWithValue("@routeid", RouteID);
            cmd.Parameters.AddWithValue("@d1", GetLowDate(dtinddate));
            cmd.Parameters.AddWithValue("@d2", GetHighDate(dtinddate));
            cmd.Parameters.AddWithValue("@d3", GetLowDate(dtinddate.AddDays(1)));
            cmd.Parameters.AddWithValue("@d4", GetHighDate(dtinddate.AddDays(1)));
            DataTable dt_tripcollection = vdbmngr.SelectQuery(cmd).Tables[0];
            string collecteddate = "";
            foreach (DataRow dr in dt_tripcollection.Rows)
            {
                tripcollection Getcollection = new tripcollection();
                Getcollection.Branchid = dr["BranchID"].ToString();
                Getcollection.Branchname = dr["BranchName"].ToString();
                Getcollection.Tripid = dr["Tripdata_sno"].ToString();
                string paiddate = dr["PaidDate"].ToString();
                string paidamt = dr["AmountPaid"].ToString();
                if (paiddate != "")
                {
                    collecteddate = dr["PaidDate"].ToString();
                    Getcollection.PaidDate = dr["PaidDate"].ToString();
                }
                if (paiddate == "")
                {
                    Getcollection.PaidDate = collecteddate;
                }
                if (paidamt == "")
                {
                    Getcollection.PaidAmount = "0";
                }
                if (paidamt != "")
                {
                    Getcollection.PaidAmount = dr["AmountPaid"].ToString();

                }
                collectionList.Add(Getcollection);
            }
            string response = GetJson(collectionList);
            context.Response.Write(response);
        }
        catch
        {

        }
    }
    private void GetEditCollectionamountClick(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            List<tripcollection> collectionList = new List<tripcollection>();
            string RouteID = context.Request["RouteID"];
            string IndDate = context.Request["IndDate"];
            string collectiontype = context.Request["collectiontype"];
            DateTime dtinddate = Convert.ToDateTime(IndDate);

            cmd = new MySqlCommand("SELECT branchdata.sno, branchdata.BranchName,branchroutes.Sno FROM branchroutesubtable INNER JOIN branchroutes ON branchroutesubtable.RefNo = branchroutes.Sno INNER JOIN branchdata ON branchroutesubtable.BranchID = branchdata.sno WHERE (branchroutes.Sno = @RouteID) AND branchdata.flag=@flag");
            cmd.Parameters.AddWithValue("@RouteID", RouteID);
            cmd.Parameters.AddWithValue("@flag", "1");
            DataTable dtBranch = vdbmngr.SelectQuery(cmd).Tables[0];
            cmd = new MySqlCommand("SELECT collections.Sno, collections.Branchid, collections.AmountPaid, collections.PaidDate, collections.PaymentType, collections.tripId, branchdata.BranchName FROM collections INNER JOIN branchdata ON branchdata.sno = collections.Branchid WHERE (collections.PaymentType=@cash) AND (PaidDate BETWEEN @d3 AND @d4) AND (collections.tripId IS NULL)");
            cmd.Parameters.AddWithValue("@d3", GetLowDate(dtinddate));
            cmd.Parameters.AddWithValue("@d4", GetHighDate(dtinddate));
            cmd.Parameters.AddWithValue("@cash", collectiontype);
            DataTable dt_salesofficecollection = vdbmngr.SelectQuery(cmd).Tables[0];
            if (dtBranch.Rows.Count > 0)
            {
                foreach (DataRow drb in dtBranch.Rows)
                {
                    string branchid = drb["sno"].ToString();
                    string collecteddate = "";
                    foreach (DataRow dr in dt_salesofficecollection.Select("Branchid='" + branchid + "'"))
                    {
                        tripcollection Getcollection = new tripcollection();

                        Getcollection.Sno = dr["Sno"].ToString();
                        Getcollection.Branchid = dr["Branchid"].ToString();
                        Getcollection.Branchname = dr["BranchName"].ToString();
                        Getcollection.Tripid = dr["tripId"].ToString();
                        string paiddate = dr["PaidDate"].ToString();
                        string paidamt = dr["AmountPaid"].ToString();
                        if (paiddate != "")
                        {
                            collecteddate = dr["PaidDate"].ToString();
                            Getcollection.PaidDate = dr["PaidDate"].ToString();
                        }
                        if (paiddate == "")
                        {
                            Getcollection.PaidDate = collecteddate;
                        }
                        if (paidamt == "")
                        {
                            Getcollection.PaidAmount = "0";
                        }
                        if (paidamt != "")
                        {
                            Getcollection.PaidAmount = dr["AmountPaid"].ToString();

                        }
                        collectionList.Add(Getcollection);
                    }
                }
            }
            string response = GetJson(collectionList);
            context.Response.Write(response);
        }
        catch
        {

        }
    }
    private void btnclosingstockedit(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            var js = new JavaScriptSerializer();
            DateTime ServerDateCurrentdate = VehicleDBMgr.GetTime(vdbmngr.conn);
            var title1 = context.Request.Params[1];
            Orders obj = js.Deserialize<Orders>(title1);
            string branchid = obj.refno;
            string PaidDate = obj.indentdate;
            DateTime dtindentdate = new DateTime();
            dtindentdate = DateTime.Parse(PaidDate);
            cmd = new MySqlCommand("SELECT clotrans.Sno, clotrans.BranchId, clotrans.EmpId, clotrans.IndDate, clotrans.SalesType, closubtranprodcts.ProductID, closubtranprodcts.StockQty, closubtranprodcts.LeakQty FROM clotrans INNER JOIN closubtranprodcts ON clotrans.Sno = closubtranprodcts.RefNo WHERE (clotrans.BranchId = @BranchID) AND (clotrans.IndDate BETWEEN @d1 AND @d2)");
            cmd.Parameters.AddWithValue("@BranchID", branchid);
            cmd.Parameters.AddWithValue("@d1", GetLowDate(dtindentdate));
            cmd.Parameters.AddWithValue("@d2", GetHighDate(dtindentdate));
            DataTable dtSOStockClosing = vdbmngr.SelectQuery(cmd).Tables[0];
            cmd = new MySqlCommand("SELECT clotrans.Sno, clotrans.BranchId, clotrans.EmpId, clotrans.IndDate, clotrans.SalesType, closubtraninventory.InvSno, closubtraninventory.StockQty FROM clotrans INNER JOIN closubtraninventory ON clotrans.Sno = closubtraninventory.RefNo WHERE (clotrans.BranchId = @BranchID) AND (clotrans.IndDate BETWEEN @d1 AND @d2)");
            cmd.Parameters.AddWithValue("@BranchID", branchid);
            cmd.Parameters.AddWithValue("@d1", GetLowDate(dtindentdate));
            cmd.Parameters.AddWithValue("@d2", GetHighDate(dtindentdate));
            DataTable dtInvStockClosing = vdbmngr.SelectQuery(cmd).Tables[0];
            if (dtSOStockClosing.Rows.Count > 0)
            {
                int refno = 0;
                int.TryParse(dtSOStockClosing.Rows[0]["Sno"].ToString(), out refno);
                foreach (orderdetail o in obj.data)
                {
                    float leak = 0;
                    float stockqty = 0;
                    float prevstock = 0;
                    float prevleak = 0;
                    float tot = 0;
                    float.TryParse(o.LeakQty, out leak);
                    float.TryParse(o.StockQty, out stockqty);
                    float.TryParse(o.RemainingQty, out prevstock);
                    float.TryParse(o.FreeQty, out prevleak);
                    tot = prevstock + prevleak + stockqty + leak;
                    cmd = new MySqlCommand("UPDATE closubtranprodcts SET StockQty = @stockqty, LeakQty = @leakqty WHERE (RefNo = @refno) AND (ProductID = @prdtid)");
                    cmd.Parameters.AddWithValue("@refno", refno);
                    cmd.Parameters.AddWithValue("@prdtid", o.Productsno);
                    cmd.Parameters.AddWithValue("@stockqty", stockqty);
                    cmd.Parameters.AddWithValue("@leakqty", leak);
                    if (vdbmngr.Update(cmd) == 0)
                    {
                        if (tot > 0)
                        {
                            cmd = new MySqlCommand("INSERT INTO closubtranprodcts (RefNo, ProductID, StockQty, LeakQty) VALUES (@RefNo, @ProductID, @StockQty, @LeakQty)");
                            cmd.Parameters.AddWithValue("@RefNo", refno);
                            cmd.Parameters.AddWithValue("@ProductID", o.Productsno);
                            cmd.Parameters.AddWithValue("@StockQty", stockqty);
                            cmd.Parameters.AddWithValue("@LeakQty", leak);
                            vdbmngr.insert(cmd);
                        }
                    }
                }
            }
            if (dtInvStockClosing.Rows.Count > 0)
            {
                int refno = 0;
                int.TryParse(dtInvStockClosing.Rows[0]["Sno"].ToString(), out refno);
                foreach (inventorydetail iv in obj.invdata)
                {
                    if (iv.InventorySno != null)
                    {
                        if (iv.Qty != "")
                        {
                            cmd = new MySqlCommand("UPDATE closubtraninventory SET StockQty = @stockqty WHERE (InvSno = @invsno) AND (RefNo = @refno)");
                            cmd.Parameters.AddWithValue("@refno", refno);
                            cmd.Parameters.AddWithValue("@invsno", iv.InventorySno);
                            float qty;
                            float.TryParse(iv.Qty, out qty);
                            cmd.Parameters.AddWithValue("@stockqty", qty);
                            if (vdbmngr.Update(cmd) == 0)
                            {
                                cmd = new MySqlCommand("INSERT INTO closubtraninventory (RefNo, InvSno, StockQty) VALUES (@RefNo, @InvSno, @StockQty)");
                                cmd.Parameters.AddWithValue("@RefNo", refno);
                                cmd.Parameters.AddWithValue("@InvSno", iv.InventorySno);
                                cmd.Parameters.AddWithValue("@StockQty", qty);
                                vdbmngr.insert(cmd);
                            }
                        }
                    }
                }
            }
            string msg = "Stock Successfully Updated ";
            string response = GetJson(msg);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string msg = ex.Message;
            string response = GetJson(msg);
            context.Response.Write(response);
        }
    }
    private void btnEditBranchStock(string jsonString, HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            var js = new JavaScriptSerializer();
            DateTime ServerDateCurrentdate = VehicleDBMgr.GetTime(vdbmngr.conn);
            Orders obj = js.Deserialize<Orders>(jsonString);
            string branchid = obj.refno;
            foreach (orderdetail o in obj.data)
            {
                float leak = 0;
                float stockqty = 0;
                float.TryParse(o.LeakQty, out leak);
                float.TryParse(o.StockQty, out stockqty);
                cmd = new MySqlCommand("UPDATE branchproducts SET BranchQty = @branchqty, LeakQty = @leakqty WHERE  (branch_sno = @branchid) AND (product_sno = @productsno)");
                cmd.Parameters.AddWithValue("@branchqty", stockqty);
                cmd.Parameters.AddWithValue("@leakqty", leak);
                cmd.Parameters.AddWithValue("@branchid", branchid);
                cmd.Parameters.AddWithValue("@productsno", o.Productsno);
                vdbmngr.Update(cmd);
            }
            foreach (inventorydetail iv in obj.invdata)
            {
                if (iv.InventorySno != null)
                {
                    if (iv.Qty != "")
                    {
                        cmd = new MySqlCommand("UPDATE inventory_monitor SET Qty = @qty WHERE (Inv_Sno = @invsno) and branchid=@branchid");
                        cmd.Parameters.AddWithValue("@branchid", branchid);
                        cmd.Parameters.AddWithValue("@invsno", iv.InventorySno);
                        float qty;
                        float.TryParse(iv.Qty, out qty);
                        cmd.Parameters.AddWithValue("@qty", qty);
                        vdbmngr.Update(cmd);
                    }
                }
            }
            string msg = "Stock Successfully Updated ";
            string response = GetJson(msg);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string msg = ex.Message;
            string response = GetJson(msg);
            context.Response.Write(response);
        }

    }
    private void btnAmountUpdateClick(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            var js = new JavaScriptSerializer();
            DateTime ServerDateCurrentdate = VehicleDBMgr.GetTime(vdbmngr.conn);
            var title1 = context.Request.Params[1];
            Orders obj = js.Deserialize<Orders>(title1);
            string SalesOfficeID = obj.SalesOfficeID;
            string type = obj.type;
            if (type == "0")
            {
                foreach (orderdetail o in obj.data)
                {
                    string branchid = o.Branchid;
                    string paidamount = o.PaidAmount;
                    float presentamt = 0;
                    float.TryParse(paidamount, out presentamt);
                    cmd = new MySqlCommand("Update branchaccounts set Amount=@Amount where BranchId=@BranchId");
                    cmd.Parameters.AddWithValue("@Amount", presentamt);
                    cmd.Parameters.AddWithValue("@BranchId", branchid);
                    vdbmngr.Update(cmd);
                    cmd = new MySqlCommand("Update tempbranchaccounts set Amount=@Amount,cdate=@cdate where Agentid=@BranchId");
                    cmd.Parameters.AddWithValue("@Amount", presentamt);
                    cmd.Parameters.AddWithValue("@cdate", ServerDateCurrentdate);
                    cmd.Parameters.AddWithValue("@BranchId", branchid);
                    if (vdbmngr.Update(cmd) == 0)
                    {
                        cmd = new MySqlCommand("INSERT INTO tempbranchaccounts (Amount, Agentid, cdate) VALUES (@Amount, @Agentid, @cdate)");
                        cmd.Parameters.AddWithValue("@Amount", presentamt);
                        cmd.Parameters.AddWithValue("@Agentid", branchid);
                        cmd.Parameters.AddWithValue("@cdate", ServerDateCurrentdate);
                        vdbmngr.insert(cmd);
                    }
                    cmd = new MySqlCommand("SELECT    modifiedroutes.Sno, modifiedroutesubtable.BranchID FROM  modifiedroutes INNER JOIN modifiedroutesubtable ON modifiedroutes.Sno = modifiedroutesubtable.RefNo WHERE (modifiedroutes.BranchID = @BranchID) AND (modifiedroutesubtable.EDate IS NULL) AND (modifiedroutesubtable.CDate <= @starttime) OR (modifiedroutes.BranchID = @BranchID) AND (modifiedroutesubtable.EDate > @starttime) AND (modifiedroutesubtable.CDate <= @starttime)");
                    cmd.Parameters.AddWithValue("@BranchID", SalesOfficeID);
                    cmd.Parameters.AddWithValue("@starttime", GetLowDate(ServerDateCurrentdate));
                    DataTable dtroute = vdbmngr.SelectQuery(cmd).Tables[0];
                    string Routeid = "";
                    foreach (DataRow drrouteid in dtroute.Select("BranchID='" + SalesOfficeID + "'"))
                    {
                        Routeid = drrouteid["Sno"].ToString();
                    }
                    cmd = new MySqlCommand("insert into tempduetrasactions (OppBalance,SaleValue,paidamount,ClosingBalance,IndentDate,EntryDate,agentid,salesofficeid,SaleQty,ReceivedAmount,DiffAmount,RouteId) values (@opningamount,@salevalue,@paidamount,@ClosingBalance,@indentdate,@doe,@agentid,@salesofficeid,@saleqty,@ReceivedAmount,@DiffAmount,@RouteId)");
                    cmd.Parameters.AddWithValue("@opningamount", "0");
                    cmd.Parameters.AddWithValue("@salevalue", "0");
                    cmd.Parameters.AddWithValue("@paidamount", "0");
                    cmd.Parameters.AddWithValue("@ClosingBalance", presentamt);
                    cmd.Parameters.AddWithValue("@indentdate", GetLowDate(ServerDateCurrentdate).AddDays(-1));
                    cmd.Parameters.AddWithValue("@doe", ServerDateCurrentdate);
                    cmd.Parameters.AddWithValue("@agentid", branchid);
                    cmd.Parameters.AddWithValue("@salesofficeid", SalesOfficeID);
                    cmd.Parameters.AddWithValue("@saleqty", "0");
                    cmd.Parameters.AddWithValue("@ReceivedAmount", "0");
                    cmd.Parameters.AddWithValue("@DiffAmount", "0");
                    cmd.Parameters.AddWithValue("@RouteId", Routeid);
                    vdbmngr.insert(cmd);
                }
            }
            else
            {
                foreach (orderdetail o in obj.data)
                {
                    string branchid = o.Branchid;
                    string paidamount = o.PaidAmount;
                    float qty = 0;
                    float.TryParse(paidamount, out qty);
                    if (type != null)
                    {
                        cmd = new MySqlCommand("UPDATE inventory_monitor SET Qty = @qty WHERE (Inv_Sno = @invsno) and branchid=@branchid");
                        cmd.Parameters.AddWithValue("@branchid", branchid);
                        cmd.Parameters.AddWithValue("@invsno", type);
                        cmd.Parameters.AddWithValue("@qty", qty);
                        vdbmngr.Update(cmd);
                    }
                }
            }
            string msg = "Balances Updated Successfully";
            string response = GetJson(msg);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string msg = ex.Message;
            string response = GetJson(msg);
            context.Response.Write(response);
        }
    }
    private void btnEditCollectionSaveClick(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            var js = new JavaScriptSerializer();
            DateTime ServerDateCurrentdate = VehicleDBMgr.GetTime(vdbmngr.conn);
            DateTime dtapril = new DateTime();
            DateTime dtmarch = new DateTime();
            int currentyear = ServerDateCurrentdate.Year;
            int nextyear = ServerDateCurrentdate.Year + 1;
            if (ServerDateCurrentdate.Month > 3)
            {
                string apr = "4/1/" + currentyear;
                dtapril = DateTime.Parse(apr);
                string march = "3/31/" + nextyear;
                dtmarch = DateTime.Parse(march);
            }
            if (ServerDateCurrentdate.Month <= 3)
            {
                string apr = "4/1/" + (currentyear - 1);
                dtapril = DateTime.Parse(apr);
                string march = "3/31/" + (nextyear - 1);
                dtmarch = DateTime.Parse(march);
            }
            var title1 = context.Request.Params[1];
            Orders obj = js.Deserialize<Orders>(title1);
            string indentdate = obj.indentdate;
            string Denominations = obj.Denominations;
            string ColAmount = obj.ColAmount;
            string SubAmount = obj.SubAmount;
            string soid = obj.SalesOfficeID;
            string tripsno = "0";
            foreach (orderdetail o in obj.data)
            {
                string branchid = o.Branchid;
                string tripid = o.TripId;
                string paiddate = o.PaidDate;
                string paidamount = o.PaidAmount;
                float prevamt = 0;
                float presentamt = 0;
                float.TryParse(paidamount, out presentamt);
                cmd = new MySqlCommand("SELECT Branchid, AmountPaid, tripId FROM collections WHERE (Branchid = @branchid) AND (tripId = @tripid)");
                cmd.Parameters.AddWithValue("@branchid", branchid);
                cmd.Parameters.AddWithValue("@tripid", tripid);
                tripsno = tripid;
                DataTable dtcollection = vdbmngr.SelectQuery(cmd).Tables[0];
                if (dtcollection.Rows.Count > 0)
                {
                    float.TryParse(dtcollection.Rows[0]["AmountPaid"].ToString(), out prevamt);
                }
                float actamt = presentamt - prevamt;
                cmd = new MySqlCommand("UPDATE cashreceipts SET AmountPaid = @amtpaid WHERE (AgentID = @branchid) AND (Tripid = @tripid)");
                cmd.Parameters.AddWithValue("@branchid", branchid);
                cmd.Parameters.AddWithValue("@tripid", tripid);
                cmd.Parameters.AddWithValue("@amtpaid", paidamount);
                vdbmngr.Update(cmd);
                cmd = new MySqlCommand("UPDATE collections SET AmountPaid = @amountpaid WHERE (Branchid = @branchid) AND (tripId = @tripid) ");
                cmd.Parameters.AddWithValue("@branchid", branchid);
                cmd.Parameters.AddWithValue("@tripid", tripid);
                cmd.Parameters.AddWithValue("@amountpaid", paidamount);
                DateTime dtpaiddt = new DateTime();
                dtpaiddt = DateTime.Parse(paiddate);
                if (vdbmngr.Update(cmd) == 0)
                {
                    if (prevamt != presentamt)
                    {
                        cmd = new MySqlCommand("Select IFNULL(MAX(Receipt),0)+1 as Sno  from cashreceipts where BranchID=@BranchID AND (DOE BETWEEN @d1 AND @d2)");
                        cmd.Parameters.AddWithValue("@BranchID", soid);
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(dtapril));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(dtmarch));
                        DataTable dtReceipt = vdbmngr.SelectQuery(cmd).Tables[0];
                        string CashReceiptNo = dtReceipt.Rows[0]["Sno"].ToString();
                        cmd = new MySqlCommand("INSERT INTO collections (Branchid, AmountPaid, PaidDate, PaymentType, tripId, PayTime,ReceiptNo) VALUES (@Branchid, @AmountPaid, @PaidDate, @PaymentType, @tripId, @PayTime,@ReceiptNo)");
                        cmd.Parameters.AddWithValue("@Branchid", branchid);
                        cmd.Parameters.AddWithValue("@AmountPaid", paidamount);
                        cmd.Parameters.AddWithValue("@PaidDate", dtpaiddt);
                        cmd.Parameters.AddWithValue("@PaymentType", "Cash");
                        cmd.Parameters.AddWithValue("@tripId", tripid);
                        cmd.Parameters.AddWithValue("@PayTime", ServerDateCurrentdate);
                        cmd.Parameters.AddWithValue("@ReceiptNo", CashReceiptNo);
                        vdbmngr.insert(cmd);
                        cmd = new MySqlCommand("SELECT Sno, EmpId, AssignDate, Status, Userdata_sno, Remarks, Permissions, Denominations, CollectedAmount, SubmittedAmount, Cdate, ReceivedAmount, VehicleNo,RecieptNo, I_Date, DEmpId, ATripid, InvStatus, GPStatus, PlanStatus, DespatchStatus, Plantime, DispTime, SOTransfer, BranchID, ReturnDCTime, Modified_EmpID,ModifiedDate, DCNo, DispatcherID, Password FROM tripdata WHERE (Sno = @tripId)");
                        cmd.Parameters.AddWithValue("@tripId", tripid);
                        DataTable dtempid_receipt = vdbmngr.SelectQuery(cmd).Tables[0];
                        int Trip_empid = 0;
                        int Trip_Receipt = 0;
                        if (dtempid_receipt.Rows.Count > 0)
                        {
                            int.TryParse(dtempid_receipt.Rows[0]["EmpId"].ToString(), out Trip_empid);
                            int.TryParse(dtempid_receipt.Rows[0]["RecieptNo"].ToString(), out Trip_Receipt);
                        }
                        cmd = new MySqlCommand("insert into cashreceipts (BranchId,ReceivedFrom,AgentID,AmountPaid,DOE,Create_by,Modified_by,Remarks,OppBal,Receipt,Tripid,GroupRef) values (@BranchId,@ReceivedFrom,@AgentID,@AmountPaid,@DOE, @Create_by,@Modified_by,@Remarks,@OppBal,@Receipt,@Tripid,@GroupRef)");
                        cmd.Parameters.AddWithValue("@BranchId", soid);
                        cmd.Parameters.AddWithValue("@ReceivedFrom", "Agent");
                        cmd.Parameters.AddWithValue("@AgentID", branchid);
                        cmd.Parameters.AddWithValue("@AmountPaid", paidamount);
                        cmd.Parameters.AddWithValue("DOE", ServerDateCurrentdate);
                        cmd.Parameters.AddWithValue("@Modified_by", context.Session["UserSno"].ToString());
                        cmd.Parameters.AddWithValue("@Create_by", Trip_empid);
                        cmd.Parameters.AddWithValue("@Tripid", tripid);
                        cmd.Parameters.AddWithValue("@GroupRef", Trip_Receipt);
                        cmd.Parameters.AddWithValue("@Remarks", "Sync Error");
                        double opp = 0;
                        cmd.Parameters.AddWithValue("@OppBal", opp);
                        cmd.Parameters.AddWithValue("@Receipt", CashReceiptNo);
                        vdbmngr.insert(cmd);
                    }

                }
                if (prevamt > presentamt)
                {
                    cmd = new MySqlCommand("Update branchaccounts set Amount=Amount+@Amount where BranchId=@BranchId");
                    cmd.Parameters.Add("@Amount", Math.Abs(actamt));
                    cmd.Parameters.Add("@BranchId", branchid);
                    vdbmngr.Update(cmd);
                }
                if (prevamt < presentamt)
                {
                    float prevsamt = Math.Abs(actamt);
                    cmd = new MySqlCommand("Update branchaccounts set Amount=Amount-@Amount where BranchId=@BranchId");
                    cmd.Parameters.Add("@Amount", prevsamt);
                    cmd.Parameters.Add("@BranchId", branchid);
                    vdbmngr.Update(cmd);
                }
                double diff = prevamt - presentamt;
                DateTime sindentdate = dtpaiddt.AddDays(-1);
                cmd = new MySqlCommand("SELECT MAX(sno) as sno FROM agent_bal_trans WHERE agentid=@agentid and inddate between @d1 and @d2");
                cmd.Parameters.AddWithValue("@agentid", branchid);
                cmd.Parameters.AddWithValue("@d1", GetLowDate(dtpaiddt).AddDays(-1));
                cmd.Parameters.AddWithValue("@d2", GetHighDate(dtpaiddt).AddDays(-1));
                DataTable dtagentbal = vdbmngr.SelectQuery(cmd).Tables[0];
                if (dtagentbal.Rows.Count > 0)
                {
                    string sno = dtagentbal.Rows[0]["sno"].ToString();
                    cmd = new MySqlCommand("SELECT sno, salesvalue, clo_balance FROM agent_bal_trans WHERE sno=@sno");
                    cmd.Parameters.AddWithValue("@sno", sno);
                    DataTable dtmaxagentbal = vdbmngr.SelectQuery(cmd).Tables[0];
                    double salevalue = 0;
                    double.TryParse(dtmaxagentbal.Rows[0]["salesvalue"].ToString(), out salevalue);
                    double clobalance = 0;
                    double.TryParse(dtmaxagentbal.Rows[0]["clo_balance"].ToString(), out clobalance);
                    if (diff > 0)
                    {
                        cmd = new MySqlCommand("UPDATE agent_bal_trans set salesvalue=salesvalue-@Amount, clo_balance=clo_balance-@Amount  where agentid=@BranchId AND inddate between @d1 and @d2");
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(sindentdate));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(sindentdate));
                        cmd.Parameters.AddWithValue("@Amount", diff);
                        cmd.Parameters.AddWithValue("@BranchId", branchid);
                        vdbmngr.Update(cmd);
                        cmd = new MySqlCommand("SELECT sno, agentid, opp_balance, inddate, salesvalue, clo_balance, paidamount FROM agent_bal_trans WHERE agentid=@agentid AND inddate between @d1 and @d2");
                        cmd.Parameters.AddWithValue("@agentid", branchid);
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(sindentdate).AddDays(1));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ServerDateCurrentdate));
                        DataTable dtIndentbal = vdbmngr.SelectQuery(cmd).Tables[0];
                        if (dtIndentbal.Rows.Count > 0)
                        {
                            foreach (DataRow dr in dtIndentbal.Rows)
                            {
                                string csno = dr["sno"].ToString();
                                double existoppbal = 0;
                                double opp_balance = 0;
                                double.TryParse(dr["opp_balance"].ToString(), out opp_balance);
                                existoppbal = opp_balance - diff;
                                double existclovalue = 0;
                                double clo_balance = 0;
                                double.TryParse(dr["clo_balance"].ToString(), out clo_balance);
                                existclovalue = clo_balance - diff;
                                cmd = new MySqlCommand("UPDATE agent_bal_trans SET opp_balance=@oppbal, clo_balance=@closing where sno=@refno");
                                cmd.Parameters.AddWithValue("@oppbal", existoppbal);
                                cmd.Parameters.AddWithValue("@refno", csno);
                                cmd.Parameters.AddWithValue("@closing", existclovalue);
                                vdbmngr.Update(cmd);
                            }
                        }
                    }
                    else
                    {
                        diff = presentamt - prevamt;
                        cmd = new MySqlCommand("UPDATE agent_bal_trans set salesvalue=salesvalue+@Amount, clo_balance=clo_balance+@Amount  where agentid=@BranchId AND inddate between @d1 and @d2");
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(sindentdate));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(sindentdate));
                        cmd.Parameters.AddWithValue("@Amount", diff);
                        cmd.Parameters.AddWithValue("@BranchId", branchid);
                        vdbmngr.Update(cmd);
                        cmd = new MySqlCommand("SELECT sno, agentid, opp_balance, inddate, salesvalue, clo_balance, paidamount FROM agent_bal_trans WHERE agentid=@agentid AND inddate between @d1 and @d2");
                        cmd.Parameters.AddWithValue("@agentid", branchid);
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(sindentdate).AddDays(1));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ServerDateCurrentdate));
                        DataTable dtIndentbal = vdbmngr.SelectQuery(cmd).Tables[0];
                        if (dtIndentbal.Rows.Count > 0)
                        {
                            foreach (DataRow dr in dtIndentbal.Rows)
                            {
                                string csno = dr["sno"].ToString();
                                double existoppbal = 0;
                                double opp_balance = 0;
                                double.TryParse(dr["opp_balance"].ToString(), out opp_balance);
                                existoppbal = opp_balance + diff;
                                double existclovalue = 0;
                                double clo_balance = 0;
                                double.TryParse(dr["clo_balance"].ToString(), out clo_balance);
                                existclovalue = clo_balance + diff;
                                cmd = new MySqlCommand("UPDATE agent_bal_trans SET opp_balance=@oppbal, clo_balance=@closing where sno=@refno");
                                cmd.Parameters.AddWithValue("@oppbal", existoppbal);
                                cmd.Parameters.AddWithValue("@refno", csno);
                                cmd.Parameters.AddWithValue("@closing", existclovalue);
                                vdbmngr.Update(cmd);
                            }
                        }
                    }
                }
            }
            cmd = new MySqlCommand("Update tripdata set Denominations=@Denominations,CollectedAmount=@CollectedAmount,SubmittedAmount=@SubmittedAmount where sno=@sno");
            double colllectionAmount = 0;
            double.TryParse(ColAmount, out colllectionAmount);
            cmd.Parameters.AddWithValue("@CollectedAmount", colllectionAmount);
            double SubmittedAmount = 0;
            double.TryParse(SubAmount, out SubmittedAmount);
            cmd.Parameters.AddWithValue("@SubmittedAmount", SubmittedAmount);
            cmd.Parameters.AddWithValue("@Denominations", Denominations);
            cmd.Parameters.AddWithValue("@sno", tripsno);
            vdbmngr.Update(cmd);
            string msg = "Collections Successfully Updated ";
            string response = GetJson(msg);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string msg = ex.Message;
            string response = GetJson(msg);
            context.Response.Write(response);
        }
    }
    private void btnEditsalesofficeCollectionSaveClick(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            var js = new JavaScriptSerializer();
            DateTime ServerDateCurrentdate = VehicleDBMgr.GetTime(vdbmngr.conn);
            DateTime dtapril = new DateTime();
            DateTime dtmarch = new DateTime();
            int currentyear = ServerDateCurrentdate.Year;
            int nextyear = ServerDateCurrentdate.Year + 1;
            if (ServerDateCurrentdate.Month > 3)
            {
                string apr = "4/1/" + currentyear;
                dtapril = DateTime.Parse(apr);
                string march = "3/31/" + nextyear;
                dtmarch = DateTime.Parse(march);
            }
            if (ServerDateCurrentdate.Month <= 3)
            {
                string apr = "4/1/" + (currentyear - 1);
                dtapril = DateTime.Parse(apr);
                string march = "3/31/" + (nextyear - 1);
                dtmarch = DateTime.Parse(march);
            }
            var title1 = context.Request.Params[1];
            Orders obj = js.Deserialize<Orders>(title1);
            string indentdate = obj.indentdate;
            DateTime dtpaidate = Convert.ToDateTime(indentdate);
            string Denominations = obj.Denominations;
            string ColAmount = obj.ColAmount;
            string SubAmount = obj.SubAmount;
            string soid = obj.SalesOfficeID;
            string tripsno = "0";
            foreach (orderdetail o in obj.data)
            {
                string Sno = o.SNo;
                string branchid = o.Branchid;
                string tripid = o.TripId;
                string paiddate = o.PaidDate;
                string paidamount = o.PaidAmount;
                float prevamt = 0;
                float presentamt = 0;
                float.TryParse(paidamount, out presentamt);

                cmd = new MySqlCommand("SELECT Branchid, AmountPaid, tripId FROM collections WHERE  (Sno=@Sno) AND (Branchid = @branchid) AND (Paiddate between @d1 and @d2)");
                cmd.Parameters.AddWithValue("@branchid", branchid);
                cmd.Parameters.AddWithValue("@Sno", Sno);
                cmd.Parameters.AddWithValue("@d1", GetLowDate(dtpaidate));
                cmd.Parameters.AddWithValue("@d2", GetHighDate(dtpaidate));
                DataTable dtcollection = vdbmngr.SelectQuery(cmd).Tables[0];
                if (dtcollection.Rows.Count > 0)
                {
                    float.TryParse(dtcollection.Rows[0]["AmountPaid"].ToString(), out prevamt);
                }
                float actamt = presentamt - prevamt;
                cmd = new MySqlCommand("UPDATE cashreceipts SET AmountPaid = @amtpaid WHERE (AgentID = @branchid) AND (Tripid IS NULL) AND (DOE between @d1 and @d2)");
                cmd.Parameters.AddWithValue("@branchid", branchid);
                cmd.Parameters.AddWithValue("@d1", GetLowDate(dtpaidate));
                cmd.Parameters.AddWithValue("@d2", GetHighDate(dtpaidate));
                cmd.Parameters.AddWithValue("@amtpaid", paidamount);
                vdbmngr.Update(cmd);
                cmd = new MySqlCommand("UPDATE collections SET AmountPaid = @amountpaid WHERE (Sno=@Sno) AND (Branchid = @branchid) AND (Paiddate between @d1 and @d2)");
                cmd.Parameters.AddWithValue("@branchid", branchid);
                cmd.Parameters.AddWithValue("@d1", GetLowDate(dtpaidate));
                cmd.Parameters.AddWithValue("@d2", GetHighDate(dtpaidate));
                cmd.Parameters.AddWithValue("@amountpaid", paidamount);
                cmd.Parameters.AddWithValue("@Sno", Sno);
                DateTime dtpaiddt = new DateTime();
                dtpaiddt = DateTime.Parse(paiddate);
                vdbmngr.Update(cmd);
                if (prevamt > presentamt)
                {
                    cmd = new MySqlCommand("Update branchaccounts set Amount=Amount+@Amount where BranchId=@BranchId");
                    cmd.Parameters.Add("@Amount", Math.Abs(actamt));
                    cmd.Parameters.Add("@BranchId", branchid);
                    vdbmngr.Update(cmd);
                }
                if (prevamt < presentamt)
                {
                    float prevsamt = Math.Abs(actamt);

                    cmd = new MySqlCommand("Update branchaccounts set Amount=Amount-@Amount where BranchId=@BranchId");
                    cmd.Parameters.Add("@Amount", prevsamt);
                    cmd.Parameters.Add("@BranchId", branchid);
                    vdbmngr.Update(cmd);
                }

                double diff = prevamt - presentamt;
                DateTime sindentdate = dtpaiddt.AddDays(-1);
                cmd = new MySqlCommand("SELECT MAX(sno) as sno FROM agent_bal_trans WHERE agentid=@agentid and inddate between @d1 and @d2");
                cmd.Parameters.AddWithValue("@agentid", branchid);
                cmd.Parameters.AddWithValue("@d1", GetLowDate(dtpaiddt).AddDays(-1));
                cmd.Parameters.AddWithValue("@d2", GetHighDate(dtpaiddt).AddDays(-1));
                DataTable dtagentbal = vdbmngr.SelectQuery(cmd).Tables[0];
                if (dtagentbal.Rows.Count > 0)
                {
                    string sno = dtagentbal.Rows[0]["sno"].ToString();
                    cmd = new MySqlCommand("SELECT sno, salesvalue, clo_balance FROM agent_bal_trans WHERE sno=@sno");
                    cmd.Parameters.AddWithValue("@sno", sno);
                    DataTable dtmaxagentbal = vdbmngr.SelectQuery(cmd).Tables[0];
                    double salevalue = 0;
                    double.TryParse(dtmaxagentbal.Rows[0]["salesvalue"].ToString(), out salevalue);
                    double clobalance = 0;
                    double.TryParse(dtmaxagentbal.Rows[0]["clo_balance"].ToString(), out clobalance);
                    if (diff > 0)
                    {
                        cmd = new MySqlCommand("UPDATE agent_bal_trans set paidamount=paidamount-@Amount, clo_balance=clo_balance+@Amount  where agentid=@BranchId AND inddate between @d1 and @d2");
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(sindentdate));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(sindentdate));
                        cmd.Parameters.AddWithValue("@Amount", diff);
                        cmd.Parameters.AddWithValue("@BranchId", branchid);
                        vdbmngr.Update(cmd);
                        cmd = new MySqlCommand("SELECT sno, agentid, opp_balance, inddate, salesvalue, clo_balance, paidamount FROM agent_bal_trans WHERE agentid=@agentid AND inddate between @d1 and @d2");
                        cmd.Parameters.AddWithValue("@agentid", branchid);
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(sindentdate).AddDays(1));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ServerDateCurrentdate));
                        DataTable dtIndentbal = vdbmngr.SelectQuery(cmd).Tables[0];
                        if (dtIndentbal.Rows.Count > 0)
                        {
                            foreach (DataRow dr in dtIndentbal.Rows)
                            {
                                string csno = dr["sno"].ToString();
                                double existoppbal = 0;
                                double opp_balance = 0;
                                double.TryParse(dr["opp_balance"].ToString(), out opp_balance);
                                existoppbal = opp_balance - diff;
                                double existclovalue = 0;
                                double clo_balance = 0;
                                double.TryParse(dr["clo_balance"].ToString(), out clo_balance);
                                existclovalue = clo_balance - diff;
                                cmd = new MySqlCommand("UPDATE agent_bal_trans SET opp_balance=@oppbal, clo_balance=@closing where sno=@refno");
                                cmd.Parameters.AddWithValue("@oppbal", existoppbal);
                                cmd.Parameters.AddWithValue("@refno", csno);
                                cmd.Parameters.AddWithValue("@closing", existclovalue);
                                vdbmngr.Update(cmd);
                            }
                        }
                    }
                    else
                    {
                        diff = presentamt - prevamt;
                        cmd = new MySqlCommand("UPDATE agent_bal_trans set paidamount=paidamount+@Amount, clo_balance=clo_balance-@Amount  where agentid=@BranchId AND inddate between @d1 and @d2");
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(sindentdate));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(sindentdate));
                        cmd.Parameters.AddWithValue("@Amount", diff);
                        cmd.Parameters.AddWithValue("@BranchId", branchid);
                        vdbmngr.Update(cmd);
                        cmd = new MySqlCommand("SELECT sno, agentid, opp_balance, inddate, salesvalue, clo_balance, paidamount FROM agent_bal_trans WHERE agentid=@agentid AND inddate between @d1 and @d2");
                        cmd.Parameters.AddWithValue("@agentid", branchid);
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(sindentdate).AddDays(1));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ServerDateCurrentdate));
                        DataTable dtIndentbal = vdbmngr.SelectQuery(cmd).Tables[0];
                        if (dtIndentbal.Rows.Count > 0)
                        {
                            foreach (DataRow dr in dtIndentbal.Rows)
                            {
                                string csno = dr["sno"].ToString();
                                double existoppbal = 0;
                                double opp_balance = 0;
                                double.TryParse(dr["opp_balance"].ToString(), out opp_balance);
                                existoppbal = opp_balance + diff;
                                double existclovalue = 0;
                                double clo_balance = 0;
                                double.TryParse(dr["clo_balance"].ToString(), out clo_balance);
                                existclovalue = clo_balance + diff;
                                cmd = new MySqlCommand("UPDATE agent_bal_trans SET opp_balance=@oppbal, clo_balance=@closing where sno=@refno");
                                cmd.Parameters.AddWithValue("@oppbal", existoppbal);
                                cmd.Parameters.AddWithValue("@refno", csno);
                                cmd.Parameters.AddWithValue("@closing", existclovalue);
                                vdbmngr.Update(cmd);
                            }
                        }
                    }
                }
            }
            string msg = "Collections Successfully Updated ";
            string response = GetJson(msg);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string msg = ex.Message;
            string response = GetJson(msg);
            context.Response.Write(response);
        }
    }
    private DateTime GetLowMonthRetrive(DateTime dt)
    {
        double Day, Hour, Min, Sec;
        DateTime DT = dt;
        DT = dt;
        Day = -dt.Day + 1;
        Hour = -dt.Hour;
        Min = -dt.Minute;
        Sec = -dt.Second;
        DT = DT.AddDays(Day);
        DT = DT.AddHours(Hour);
        DT = DT.AddMinutes(Min);
        DT = DT.AddSeconds(Sec);
        return DT;

    }
    private DateTime GetHighMonth(DateTime dt)
    {
        double Day, Hour, Min, Sec;
        DateTime DT = DateTime.Now;
        Day = 31 - dt.Day;
        Hour = 23 - dt.Hour;
        Min = 59 - dt.Minute;
        Sec = 59 - dt.Second;
        DT = dt;
        DT = DT.AddDays(Day);
        DT = DT.AddHours(Hour);
        DT = DT.AddMinutes(Min);
        DT = DT.AddSeconds(Sec);
        if (DT.Day == 3)
        {
            DT = DT.AddDays(-3);
        }
        else if (DT.Day == 2)
        {
            DT = DT.AddDays(-2);
        }
        else if (DT.Day == 1)
        {
            DT = DT.AddDays(-1);
        }
        return DT;
    }
    private void BtnCashAmountClick(HttpContext context)
    {
        #region
        try
        {
            vdbmngr = new VehicleDBMgr();
            string Name = context.Request["Name"];
            string ledger_code = context.Request["ledger_code"];
            string Amount = context.Request["Amount"];
            string Remarks = context.Request["Remarks"];
            string paymenttype = context.Request["paymenttype"];
            string ddlAmountType = context.Request["ddlAmountType"];
            string collectiontype = context.Request["collectiontype"];
            string AgentID = context.Request["AgentID"];
            string ChequeNo = context.Request["ChequeNo"];
            string chequeDate = context.Request["chequeDate"];
            string ddlTransType = context.Request["ddlTransType"];
            string ddlfreezertype = context.Request["ddlfreezertype"];
            string ddlfreezeramounttype = context.Request["ddlfreezeramounttype"];
            string ReturnDenominationString = context.Request["ReturnDenominationString"];
            string HeadSno = context.Request["HeadSno"];
            string PaidDate = context.Request["PaidDate"];
            string Transactiontype = context.Request["ddltransactiontype"];
            string soid = context.Request["soid"];
            string DenominationString = context.Request["DenominationString"];
            string faaccuntno = context.Request["faaccuntno"];
            DateTime ServerDateCurrentdate = VehicleDBMgr.GetTime(vdbmngr.conn);
            DateTime dtchequedate = new DateTime();
            DateTime paydate = new DateTime();
            if (chequeDate != "")
            {
                dtchequedate = DateTime.Parse(chequeDate);
            }
            string BankName = context.Request["BankName"];
            string BranchID = context.Request["BranchID"];//
            #region
            DateTime CurDate = VehicleDBMgr.GetTime(vdbmngr.conn);
            DateTime dtapril = new DateTime();
            DateTime dtmarch = new DateTime();
            int currentyear = CurDate.Year;
            int nextyear = CurDate.Year + 1;
            if (CurDate.Month > 3)
            {
                string apr = "4/1/" + currentyear;
                dtapril = DateTime.Parse(apr);
                string march = "3/31/" + nextyear;
                dtmarch = DateTime.Parse(march);
            }
            if (CurDate.Month <= 3)
            {
                string apr = "4/1/" + (currentyear - 1);
                dtapril = DateTime.Parse(apr);
                string march = "3/31/" + (nextyear - 1);
                dtmarch = DateTime.Parse(march);
            }
            string remarks = "Other Collections";
            cmd = new MySqlCommand("SELECT Branchid, UserData_sno, AmountPaid, Denominations, Remarks, Sno, PaidDate FROM collections WHERE (Branchid = @BranchID) AND (PaidDate BETWEEN @d1 AND @d2)");
            cmd.Parameters.AddWithValue("@BranchID", context.Session["branch"].ToString());
            cmd.Parameters.AddWithValue("@d1", GetLowDate(CurDate));
            cmd.Parameters.AddWithValue("@d2", GetHighDate(CurDate));
            DataTable dtcashbookstatus = vdbmngr.SelectQuery(cmd).Tables[0];
            if (paymenttype == "Cheque" || paymenttype == "Bank Transfer")
            {

                #endregion
                #region
                if (collectiontype == "Other")
                {
                    string CashReceiptNo = "0";
                    if (paymenttype == "Cash" || paymenttype == "PhonePay")
                    {
                        cmd = new MySqlCommand("Select IFNULL(MAX(Receipt),0)+1 as Sno  from cashreceipts where BranchID=@BranchID AND (DOE BETWEEN @d1 AND @d2)");
                        cmd.Parameters.AddWithValue("@BranchID", context.Session["branch"].ToString());
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(dtapril));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(dtmarch));
                        DataTable dtReceipt = vdbmngr.SelectQuery(cmd).Tables[0];
                        CashReceiptNo = dtReceipt.Rows[0]["Sno"].ToString();
                        cmd = new MySqlCommand("insert into cashreceipts (BranchId,ReceivedFrom,AmountPaid,DOE,Create_by,Remarks,Receipt) values (@BranchId,@ReceivedFrom,@AmountPaid,@DOE, @Create_by,@Remarks,@Receipt)");
                        cmd.Parameters.AddWithValue("@BranchId", context.Session["branch"].ToString());
                        cmd.Parameters.AddWithValue("@ReceivedFrom", "Others");
                        cmd.Parameters.AddWithValue("@AmountPaid", Amount);
                        cmd.Parameters.AddWithValue("DOE", CurDate);
                        cmd.Parameters.AddWithValue("@Create_by", context.Session["UserSno"].ToString());
                        cmd.Parameters.AddWithValue("@Remarks", remarks);
                        cmd.Parameters.AddWithValue("@Receipt", CashReceiptNo);
                        vdbmngr.insert(cmd);
                    }
                    if (paymenttype == "Cash" || paymenttype == "Bank Transfer" || paymenttype == "PhonePay")
                    {
                        cmd = new MySqlCommand("insert into cashcollections (BranchID,Name,Amount,Remarks,DOE,Receiptno,PaymentType,CollectionType,CollectionFrom,freezertype,freezeramounttype,TransType,ledger_code) values(@BranchID,@Name,@Amount,@Remarks,@DOE,@Receiptno,@PaymentType,@CollectionType,@CollectionFrom,@freezertype,@freezeramounttype,@TransType,@ledger_code)");
                    }
                    if (paymenttype == "Cheque" || paymenttype == "DD")
                    {
                        cmd = new MySqlCommand("insert into cashcollections (BranchID,Name,Amount,Remarks,DOE,Receiptno,PaymentType,CollectionType,CollectionFrom,CheckStatus,ChequeNo,ChequeDate,BankName,freezertype,freezeramounttype,TransType,ledger_code) values(@BranchID,@Name,@Amount,@Remarks,@DOE,@Receiptno,@PaymentType,@CollectionType,@CollectionFrom,@CheckStatus,@ChequeNo,@ChequeDate,@BankName,@freezertype,@freezeramounttype,@TransType,@ledger_code)");

                    }
                    cmd.Parameters.AddWithValue("@BranchID", context.Session["branch"]);
                    cmd.Parameters.AddWithValue("@Name", Name);
                    cmd.Parameters.AddWithValue("@Amount", Amount);
                    cmd.Parameters.AddWithValue("@Remarks", Remarks);
                    cmd.Parameters.AddWithValue("@Receiptno", CashReceiptNo);
                    cmd.Parameters.AddWithValue("@DOE", CurDate);
                    cmd.Parameters.AddWithValue("@PaymentType", ddlAmountType);
                    cmd.Parameters.AddWithValue("@CollectionType", paymenttype);
                    cmd.Parameters.AddWithValue("@CollectionFrom", collectiontype);
                    cmd.Parameters.AddWithValue("@CheckStatus", 'P');
                    cmd.Parameters.AddWithValue("@ChequeNo", ChequeNo);
                    cmd.Parameters.AddWithValue("@ChequeDate", dtchequedate);
                    cmd.Parameters.AddWithValue("@BankName", BankName);
                    cmd.Parameters.AddWithValue("@freezertype", ddlfreezertype);
                    cmd.Parameters.AddWithValue("@freezeramounttype", ddlfreezeramounttype);
                    cmd.Parameters.AddWithValue("@TransType", ddlTransType);
                    cmd.Parameters.AddWithValue("@ledger_code", ledger_code);
                    vdbmngr.insert(cmd);
                    string twothousand = "0";
                    string thousand = "0";
                    string fivehundred = "0";
                    string twohundred = "0";
                    string hundred = "0";
                    string fifty = "0";
                    string twenty = "0";
                    string ten = "0";
                    string five = "0";
                    string twos = "0";
                    string ones = "0";
                    DenominationString = context.Request["DenominationString"];
                    DenominationString = DenominationString.Replace("+", " ");
                    if (paymenttype == "Cash")
                    {
                        foreach (string str in DenominationString.Split(' '))
                        {
                            if (str != "")
                            {
                                string[] price = str.Split('x');
                                string amountcount = price[0];
                                string notecount = price[1];
                                if (amountcount == "2000")
                                {
                                    twothousand = notecount;
                                }
                                if (amountcount == "1000")
                                {
                                    thousand = notecount;
                                }
                                if (amountcount == "500")
                                {
                                    fivehundred = notecount;
                                }
                                if (amountcount == "200")
                                {
                                    twohundred = notecount;
                                }
                                if (amountcount == "100")
                                {
                                    hundred = notecount;
                                }
                                if (amountcount == "50")
                                {
                                    fifty = notecount;
                                }
                                if (amountcount == "20")
                                {
                                    twenty = notecount;
                                }
                                if (amountcount == "10")
                                {
                                    ten = notecount;
                                }
                                if (amountcount == "5")
                                {
                                    five = notecount;
                                }
                                if (amountcount == "2")
                                {
                                    twos = notecount;
                                }
                                if (amountcount == "1")
                                {
                                    ones = notecount;
                                }
                            }
                        }
                        cmd = new MySqlCommand("Update branch_denomination set amount=amount+@amount,twothousand=twothousand+@twothousand,thousand=thousand+@thousand,fivehundred=fivehundred+@fivehundred,twohundred=twohundred+@twohundred,hundred=hundred+@hundred,fifty=fifty+@fifty,twenty=twenty+@twenty,ten=ten+@ten,five=five+@five,twos=twos+@twos,ones=ones+@ones where BranchID=@BranchID");
                        cmd.Parameters.AddWithValue("@amount", Amount);
                        cmd.Parameters.AddWithValue("@twothousand", twothousand);
                        cmd.Parameters.AddWithValue("@thousand", thousand);
                        cmd.Parameters.AddWithValue("@fivehundred", fivehundred);
                        cmd.Parameters.AddWithValue("@twohundred", twohundred);
                        cmd.Parameters.AddWithValue("@hundred", hundred);
                        cmd.Parameters.AddWithValue("@fifty", fifty);
                        cmd.Parameters.AddWithValue("@twenty", twenty);
                        cmd.Parameters.AddWithValue("@ten", ten);
                        cmd.Parameters.AddWithValue("@five", five);
                        cmd.Parameters.AddWithValue("@twos", twos);
                        cmd.Parameters.AddWithValue("@ones", ones);
                        cmd.Parameters.AddWithValue("@BranchID", context.Session["branch"].ToString());
                        vdbmngr.Update(cmd);
                        string return_twothousand = "0";
                        string return_thousand = "0";
                        string return_fivehundred = "0";
                        string return_twohundred = "0";
                        string return_hundred = "0";
                        string return_fifty = "0";
                        string return_twenty = "0";
                        string return_ten = "0";
                        string return_five = "0";
                        string return_twos = "0";
                        string return_ones = "0";
                        ReturnDenominationString = ReturnDenominationString.Replace("+", " ");
                        foreach (string str in ReturnDenominationString.Split(' '))
                        {
                            if (str != "")
                            {
                                string[] price = str.Split('x');
                                string amountcount = price[0];
                                string notecount = price[1];
                                if (amountcount == "2000")
                                {
                                    return_twothousand = notecount;
                                }
                                if (amountcount == "1000")
                                {
                                    return_thousand = notecount;
                                }
                                if (amountcount == "500")
                                {
                                    return_fivehundred = notecount;
                                }
                                if (amountcount == "200")
                                {
                                    return_twohundred = notecount;
                                }
                                if (amountcount == "100")
                                {
                                    return_hundred = notecount;
                                }
                                if (amountcount == "50")
                                {
                                    return_fifty = notecount;
                                }
                                if (amountcount == "20")
                                {
                                    return_twenty = notecount;
                                }
                                if (amountcount == "10")
                                {
                                    return_ten = notecount;
                                }
                                if (amountcount == "5")
                                {
                                    return_five = notecount;
                                }
                                if (amountcount == "2")
                                {
                                    return_twos = notecount;
                                }
                                if (amountcount == "1")
                                {
                                    return_ones = notecount;
                                }
                            }
                        }
                        cmd = new MySqlCommand("Update branch_denomination set twothousand=twothousand-@twothousand,thousand=thousand-@thousand,fivehundred=fivehundred-@fivehundred,twohundred=twohundred-@twohundred,hundred=hundred-@hundred,fifty=fifty-@fifty,twenty=twenty-@twenty,ten=ten-@ten,five=five-@five,twos=twos-@twos,ones=ones-@ones where BranchID=@BranchID");
                        cmd.Parameters.AddWithValue("@amount", Amount);
                        cmd.Parameters.AddWithValue("@twothousand", return_twothousand);
                        cmd.Parameters.AddWithValue("@thousand", return_thousand);
                        cmd.Parameters.AddWithValue("@fivehundred", return_fivehundred);
                        cmd.Parameters.AddWithValue("@twohundred", return_twohundred);
                        cmd.Parameters.AddWithValue("@hundred", return_hundred);
                        cmd.Parameters.AddWithValue("@fifty", return_fifty);
                        cmd.Parameters.AddWithValue("@twenty", return_twenty);
                        cmd.Parameters.AddWithValue("@ten", return_ten);
                        cmd.Parameters.AddWithValue("@five", return_five);
                        cmd.Parameters.AddWithValue("@twos", return_twos);
                        cmd.Parameters.AddWithValue("@ones", return_ones);
                        cmd.Parameters.AddWithValue("@BranchID", context.Session["branch"].ToString());
                        vdbmngr.Update(cmd);
                    }
                }
                #endregion
                #region
                if (collectiontype == "SD Deposit")
                {
                    string CashReceiptNo = "0";
                    if (paymenttype == "Cash" || paymenttype == "PhonePay")
                    {
                        cmd = new MySqlCommand("Select IFNULL(MAX(Receipt),0)+1 as Sno  from cashreceipts where BranchID=@BranchID AND (DOE BETWEEN @d1 AND @d2)");
                        cmd.Parameters.AddWithValue("@BranchID", context.Session["branch"].ToString());
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(dtapril));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(dtmarch));
                        DataTable dtReceipt = vdbmngr.SelectQuery(cmd).Tables[0];
                        CashReceiptNo = dtReceipt.Rows[0]["Sno"].ToString();
                        cmd = new MySqlCommand("insert into cashreceipts (BranchId,ReceivedFrom,AmountPaid,DOE,Create_by,Remarks,Receipt,PaymentStatus) values (@BranchId,@ReceivedFrom,@AmountPaid,@DOE, @Create_by,@Remarks,@Receipt,@PaymentStatus)");
                        cmd.Parameters.AddWithValue("@BranchId", context.Session["branch"].ToString());
                        cmd.Parameters.AddWithValue("@ReceivedFrom", "Others");
                        cmd.Parameters.AddWithValue("@AmountPaid", Amount);
                        cmd.Parameters.AddWithValue("DOE", CurDate);
                        cmd.Parameters.AddWithValue("@Create_by", context.Session["UserSno"].ToString());
                        cmd.Parameters.AddWithValue("@Remarks", remarks);
                        cmd.Parameters.AddWithValue("@Receipt", CashReceiptNo);
                        cmd.Parameters.AddWithValue("@PaymentStatus", paymenttype);
                        vdbmngr.insert(cmd);
                    }
                    if (paymenttype == "Cash" || paymenttype == "Bank Transfer" || paymenttype == "Journal Voucher" || paymenttype == "PhonePay")
                    {
                        cmd = new MySqlCommand("insert into cashcollections (BranchID,Name,Amount,Remarks,DOE,Receiptno,Agentid,PaymentType,CollectionType,CollectionFrom,freezertype,freezeramounttype,TransType) values(@BranchID,@Name,@Amount,@Remarks,@DOE,@Receiptno,@Agentid,@PaymentType,@CollectionType,@CollectionFrom,@freezertype,@freezeramounttype,@TransType)");
                    }
                    if (paymenttype == "Cheque" || paymenttype == "DD")
                    {
                        cmd = new MySqlCommand("insert into cashcollections (BranchID,Name,Amount,Remarks,DOE,Receiptno,Agentid,PaymentType,CollectionType,CollectionFrom,CheckStatus,ChequeNo,ChequeDate,BankName,freezertype,freezeramounttype,TransType) values(@BranchID,@Name,@Amount,@Remarks,@DOE,@Receiptno,@Agentid,@PaymentType,@CollectionType,@CollectionFrom,@CheckStatus,@ChequeNo,@ChequeDate,@BankName,@freezertype,@freezeramounttype,@TransType)");
                    }
                    cmd.Parameters.AddWithValue("@BranchID", context.Session["branch"]);
                    cmd.Parameters.AddWithValue("@Name", Name);
                    cmd.Parameters.AddWithValue("@Amount", Amount);
                    cmd.Parameters.AddWithValue("@Remarks", Remarks);
                    cmd.Parameters.AddWithValue("@Receiptno", CashReceiptNo);
                    cmd.Parameters.AddWithValue("@DOE", CurDate);
                    cmd.Parameters.AddWithValue("@PaymentType", ddlAmountType);
                    cmd.Parameters.AddWithValue("@CollectionType", paymenttype);
                    cmd.Parameters.AddWithValue("@CollectionFrom", collectiontype);
                    cmd.Parameters.AddWithValue("@Agentid", AgentID);
                    cmd.Parameters.AddWithValue("@CheckStatus", 'P');
                    cmd.Parameters.AddWithValue("@ChequeNo", ChequeNo);
                    cmd.Parameters.AddWithValue("@ChequeDate", dtchequedate);
                    cmd.Parameters.AddWithValue("@BankName", BankName);
                    cmd.Parameters.AddWithValue("@freezertype", ddlfreezertype);
                    cmd.Parameters.AddWithValue("@freezeramounttype", ddlfreezeramounttype);
                    cmd.Parameters.AddWithValue("@TransType", ddlTransType);
                    vdbmngr.insert(cmd);
                    string twothousand = "0";
                    string thousand = "0";
                    string fivehundred = "0";
                    string twohundred = "0";
                    string hundred = "0";
                    string fifty = "0";
                    string twenty = "0";
                    string ten = "0";
                    string five = "0";
                    string twos = "0";
                    string ones = "0";
                    DenominationString = context.Request["DenominationString"];
                    DenominationString = DenominationString.Replace("+", " ");
                    if (paymenttype == "Cash")
                    {
                        foreach (string str in DenominationString.Split(' '))
                        {
                            if (str != "")
                            {
                                string[] price = str.Split('x');
                                string amountcount = price[0];
                                string notecount = price[1];
                                if (amountcount == "2000")
                                {
                                    twothousand = notecount;
                                }
                                if (amountcount == "1000")
                                {
                                    thousand = notecount;
                                }
                                if (amountcount == "500")
                                {
                                    fivehundred = notecount;
                                }
                                if (amountcount == "200")
                                {
                                    twohundred = notecount;
                                }
                                if (amountcount == "100")
                                {
                                    hundred = notecount;
                                }
                                if (amountcount == "50")
                                {
                                    fifty = notecount;
                                }
                                if (amountcount == "20")
                                {
                                    twenty = notecount;
                                }
                                if (amountcount == "10")
                                {
                                    ten = notecount;
                                }
                                if (amountcount == "5")
                                {
                                    five = notecount;
                                }
                                if (amountcount == "2")
                                {
                                    twos = notecount;
                                }
                                if (amountcount == "1")
                                {
                                    ones = notecount;
                                }
                            }
                        }
                        cmd = new MySqlCommand("Update branch_denomination set amount=amount+@amount,twothousand=twothousand+@twothousand,thousand=thousand+@thousand,fivehundred=fivehundred+@fivehundred,twohundred=twohundred+@twohundred,hundred=hundred+@hundred,fifty=fifty+@fifty,twenty=twenty+@twenty,ten=ten+@ten,five=five+@five,twos=twos+@twos,ones=ones+@ones where BranchID=@BranchID");
                        cmd.Parameters.AddWithValue("@amount", Amount);
                        cmd.Parameters.AddWithValue("@twothousand", twothousand);
                        cmd.Parameters.AddWithValue("@thousand", thousand);
                        cmd.Parameters.AddWithValue("@fivehundred", fivehundred);
                        cmd.Parameters.AddWithValue("@twohundred", twohundred);
                        cmd.Parameters.AddWithValue("@hundred", hundred);
                        cmd.Parameters.AddWithValue("@fifty", fifty);
                        cmd.Parameters.AddWithValue("@twenty", twenty);
                        cmd.Parameters.AddWithValue("@ten", ten);
                        cmd.Parameters.AddWithValue("@five", five);
                        cmd.Parameters.AddWithValue("@twos", twos);
                        cmd.Parameters.AddWithValue("@ones", ones);
                        cmd.Parameters.AddWithValue("@BranchID", context.Session["branch"].ToString());
                        vdbmngr.Update(cmd);

                        string return_twothousand = "0";
                        string return_thousand = "0";
                        string return_fivehundred = "0";
                        string return_twohundred = "0";
                        string return_hundred = "0";
                        string return_fifty = "0";
                        string return_twenty = "0";
                        string return_ten = "0";
                        string return_five = "0";
                        string return_twos = "0";
                        string return_ones = "0";
                        ReturnDenominationString = ReturnDenominationString.Replace("+", " ");
                        foreach (string str in ReturnDenominationString.Split(' '))
                        {
                            if (str != "")
                            {
                                string[] price = str.Split('x');
                                string amountcount = price[0];
                                string notecount = price[1];
                                if (amountcount == "2000")
                                {
                                    return_twothousand = notecount;
                                }
                                if (amountcount == "1000")
                                {
                                    return_thousand = notecount;
                                }
                                if (amountcount == "500")
                                {
                                    return_fivehundred = notecount;
                                }
                                if (amountcount == "200")
                                {
                                    return_twohundred = notecount;
                                }
                                if (amountcount == "100")
                                {
                                    return_hundred = notecount;
                                }
                                if (amountcount == "50")
                                {
                                    return_fifty = notecount;
                                }
                                if (amountcount == "20")
                                {
                                    return_twenty = notecount;
                                }
                                if (amountcount == "10")
                                {
                                    return_ten = notecount;
                                }
                                if (amountcount == "5")
                                {
                                    return_five = notecount;
                                }
                                if (amountcount == "2")
                                {
                                    return_twos = notecount;
                                }
                                if (amountcount == "1")
                                {
                                    return_ones = notecount;
                                }
                            }
                        }
                        cmd = new MySqlCommand("Update branch_denomination set twothousand=twothousand-@twothousand,thousand=thousand-@thousand,fivehundred=fivehundred-@fivehundred,twohundred=twohundred-@twohundred,hundred=hundred-@hundred,fifty=fifty-@fifty,twenty=twenty-@twenty,ten=ten-@ten,five=five-@five,twos=twos-@twos,ones=ones-@ones where BranchID=@BranchID");
                        cmd.Parameters.AddWithValue("@amount", Amount);
                        cmd.Parameters.AddWithValue("@twothousand", return_twothousand);
                        cmd.Parameters.AddWithValue("@thousand", return_thousand);
                        cmd.Parameters.AddWithValue("@fivehundred", return_fivehundred);
                        cmd.Parameters.AddWithValue("@twohundred", return_twohundred);
                        cmd.Parameters.AddWithValue("@hundred", return_hundred);
                        cmd.Parameters.AddWithValue("@fifty", return_fifty);
                        cmd.Parameters.AddWithValue("@twenty", return_twenty);
                        cmd.Parameters.AddWithValue("@ten", return_ten);
                        cmd.Parameters.AddWithValue("@five", return_five);
                        cmd.Parameters.AddWithValue("@twos", return_twos);
                        cmd.Parameters.AddWithValue("@ones", return_ones);
                        cmd.Parameters.AddWithValue("@BranchID", context.Session["branch"].ToString());
                        vdbmngr.Update(cmd);
                    }
                }
                #endregion
                #region
                if (collectiontype == "SalesOfficeCollection")
                {

                    double PaidAmount = 0;
                    double.TryParse(Amount.ToString(), out PaidAmount);
                    currentyear = ServerDateCurrentdate.Year;
                    nextyear = ServerDateCurrentdate.Year + 1;
                    string Branch = soid;
                    if (soid == "572")
                    {
                        Branch = "158";
                    }
                    if (ServerDateCurrentdate.Month > 3)
                    {
                        string apr = "4/1/" + currentyear;
                        dtapril = DateTime.Parse(apr);
                        string march = "3/31/" + nextyear;
                        dtmarch = DateTime.Parse(march);
                    }
                    if (ServerDateCurrentdate.Month <= 3)
                    {
                        string apr = "4/1/" + (currentyear - 1);
                        dtapril = DateTime.Parse(apr);
                        string march = "3/31/" + (nextyear - 1);
                        dtmarch = DateTime.Parse(march);
                    }
                    if (Branch != "158")
                    {
                        if (Transactiontype == "Credit")
                        {
                            cmd = new MySqlCommand("SELECT Branchid, UserData_sno, AmountPaid, Denominations, Remarks, Sno, PaidDate FROM collections WHERE (Branchid = @BranchID) AND (PaidDate BETWEEN @d1 AND @d2)");
                            cmd.Parameters.AddWithValue("@BranchID", Branch);
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(ServerDateCurrentdate));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ServerDateCurrentdate));
                            DataTable dtcashbookstatus1 = vdbmngr.SelectQuery(cmd).Tables[0];
                            if (dtcashbookstatus1.Rows.Count > 0)
                            {
                                ServerDateCurrentdate = ServerDateCurrentdate.AddDays(1);
                            }
                            cmd = new MySqlCommand("Select Amount from branchaccounts where BranchId=@BranchId");
                            cmd.Parameters.AddWithValue("@BranchId", Branch);
                            DataTable dtbrnchoppamt = vdbmngr.SelectQuery(cmd).Tables[0];
                            string amount = "0";
                            if (dtbrnchoppamt.Rows.Count > 0)
                            {
                                amount = dtbrnchoppamt.Rows[0]["Amount"].ToString();
                            }
                            string CashReceiptNo = "0";
                            if (paymenttype == "Cash" || paymenttype == "PhonePay")
                            {
                                cmd = new MySqlCommand("Select IFNULL(MAX(Receipt),0)+1 as Sno  from cashreceipts where BranchID=@BranchID AND (DOE BETWEEN @d1 AND @d2)");
                                cmd.Parameters.AddWithValue("@BranchID", Branch);
                                cmd.Parameters.AddWithValue("@d1", GetLowDate(dtapril));
                                cmd.Parameters.AddWithValue("@d2", GetHighDate(dtmarch));
                                DataTable dtReceipt = vdbmngr.SelectQuery(cmd).Tables[0];
                                CashReceiptNo = dtReceipt.Rows[0]["Sno"].ToString();
                                // CashReceiptNo = "0";
                                if (paymenttype == "Cheque")
                                {
                                    cmd = new MySqlCommand("insert into cashreceipts (BranchId,ReceivedFrom,AgentID,AmountPaid,DOE,Create_by,Remarks,OppBal,Receipt,Paymentstatus,ChequeNo) values (@BranchId,@ReceivedFrom,@AgentID,@AmountPaid,@DOE, @Create_by,@Remarks,@OppBal,@Receipt,@Paymentstatus,@ChequeNo)");
                                    cmd.Parameters.AddWithValue("@ChequeNo", ChequeNo);
                                    cmd.Parameters.AddWithValue("@Paymentstatus", "Cheque");
                                }
                                else
                                {
                                    cmd = new MySqlCommand("insert into cashreceipts (BranchId,ReceivedFrom,AgentID,AmountPaid,DOE,Create_by,Remarks,OppBal,Receipt,PaymentStatus) values (@BranchId,@ReceivedFrom,@AgentID,@AmountPaid,@DOE, @Create_by,@Remarks,@OppBal,@Receipt,@PaymentStatus)");
                                    cmd.Parameters.AddWithValue("@Paymentstatus", paymenttype);
                                }
                                cmd.Parameters.AddWithValue("@BranchId", Branch);
                                cmd.Parameters.AddWithValue("@ReceivedFrom", "Agent");
                                cmd.Parameters.AddWithValue("@AgentID", BranchID);
                                cmd.Parameters.AddWithValue("@AmountPaid", PaidAmount);
                                if (soid == "570")
                                {
                                    cmd.Parameters.AddWithValue("DOE", PaidDate);
                                }
                                if (soid != "570")
                                {
                                    cmd.Parameters.AddWithValue("DOE", ServerDateCurrentdate);
                                }
                                cmd.Parameters.AddWithValue("@Create_by", context.Session["UserSno"].ToString());
                                cmd.Parameters.AddWithValue("@Remarks", Remarks);
                                cmd.Parameters.AddWithValue("@OppBal", amount);
                                cmd.Parameters.AddWithValue("@Receipt", CashReceiptNo);
                                vdbmngr.insert(cmd);
                                string twothousand = "0";
                                string thousand = "0";
                                string fivehundred = "0";
                                string twohundred = "0";
                                string hundred = "0";
                                string fifty = "0";
                                string twenty = "0";
                                string ten = "0";
                                string five = "0";
                                string twos = "0";
                                string ones = "0";
                                DenominationString = DenominationString.Replace("+", " ");
                                foreach (string str in DenominationString.Split(' '))
                                {
                                    if (str != "")
                                    {
                                        string[] price = str.Split('x');
                                        string amountcount = price[0];
                                        string notecount = price[1];
                                        if (amountcount == "2000")
                                        {
                                            twothousand = notecount;
                                        }
                                        if (amountcount == "1000")
                                        {
                                            thousand = notecount;
                                        }
                                        if (amountcount == "500")
                                        {
                                            fivehundred = notecount;
                                        }
                                        if (amountcount == "200")
                                        {
                                            twohundred = notecount;
                                        }
                                        if (amountcount == "100")
                                        {
                                            hundred = notecount;
                                        }
                                        if (amountcount == "50")
                                        {
                                            fifty = notecount;
                                        }
                                        if (amountcount == "20")
                                        {
                                            twenty = notecount;
                                        }
                                        if (amountcount == "10")
                                        {
                                            ten = notecount;
                                        }
                                        if (amountcount == "5")
                                        {
                                            five = notecount;
                                        }
                                        if (amountcount == "2")
                                        {
                                            twos = notecount;
                                        }
                                        if (amountcount == "1")
                                        {
                                            ones = notecount;
                                        }
                                    }
                                }
                                cmd = new MySqlCommand("Update branch_denomination set amount=amount+@amount,twothousand=twothousand+@twothousand,thousand=thousand+@thousand,fivehundred=fivehundred+@fivehundred,twohundred=twohundred+@twohundred,hundred=hundred+@hundred,fifty=fifty+@fifty,twenty=twenty+@twenty,ten=ten+@ten,five=five+@five,twos=twos+@twos,ones=ones+@ones where BranchID=@BranchID");
                                cmd.Parameters.AddWithValue("@amount", Amount);
                                cmd.Parameters.AddWithValue("@twothousand", twothousand);
                                cmd.Parameters.AddWithValue("@thousand", thousand);
                                cmd.Parameters.AddWithValue("@fivehundred", fivehundred);
                                cmd.Parameters.AddWithValue("@twohundred", twohundred);
                                cmd.Parameters.AddWithValue("@hundred", hundred);
                                cmd.Parameters.AddWithValue("@fifty", fifty);
                                cmd.Parameters.AddWithValue("@twenty", twenty);
                                cmd.Parameters.AddWithValue("@ten", ten);
                                cmd.Parameters.AddWithValue("@five", five);
                                cmd.Parameters.AddWithValue("@twos", twos);
                                cmd.Parameters.AddWithValue("@ones", ones);
                                cmd.Parameters.AddWithValue("@BranchID", context.Session["branch"].ToString());
                                vdbmngr.Update(cmd);

                                string return_twothousand = "0";
                                string return_thousand = "0";
                                string return_twohundred = "0";
                                string return_fivehundred = "0";
                                string return_hundred = "0";
                                string return_fifty = "0";
                                string return_twenty = "0";
                                string return_ten = "0";
                                string return_five = "0";
                                string return_twos = "0";
                                string return_ones = "0";
                                ReturnDenominationString = ReturnDenominationString.Replace("+", " ");
                                foreach (string str in ReturnDenominationString.Split(' '))
                                {
                                    if (str != "")
                                    {
                                        string[] price = str.Split('x');
                                        string amountcount = price[0];
                                        string notecount = price[1];
                                        if (amountcount == "2000")
                                        {
                                            return_twothousand = notecount;
                                        }
                                        if (amountcount == "1000")
                                        {
                                            return_thousand = notecount;
                                        }
                                        if (amountcount == "500")
                                        {
                                            return_fivehundred = notecount;
                                        }
                                        if (amountcount == "200")
                                        {
                                            return_twohundred = notecount;
                                        }
                                        if (amountcount == "100")
                                        {
                                            return_hundred = notecount;
                                        }
                                        if (amountcount == "50")
                                        {
                                            return_fifty = notecount;
                                        }
                                        if (amountcount == "20")
                                        {
                                            return_twenty = notecount;
                                        }
                                        if (amountcount == "10")
                                        {
                                            return_ten = notecount;
                                        }
                                        if (amountcount == "5")
                                        {
                                            return_five = notecount;
                                        }
                                        if (amountcount == "2")
                                        {
                                            return_twos = notecount;
                                        }
                                        if (amountcount == "1")
                                        {
                                            return_ones = notecount;
                                        }
                                    }
                                }
                                cmd = new MySqlCommand("Update branch_denomination set twothousand=twothousand-@twothousand,thousand=thousand-@thousand,fivehundred=fivehundred-@fivehundred,twohundred=twohundred+@twohundred,hundred=hundred-@hundred,fifty=fifty-@fifty,twenty=twenty-@twenty,ten=ten-@ten,five=five-@five,twos=twos-@twos,ones=ones-@ones where BranchID=@BranchID");
                                cmd.Parameters.AddWithValue("@amount", Amount);
                                cmd.Parameters.AddWithValue("@twothousand", return_twothousand);
                                cmd.Parameters.AddWithValue("@thousand", return_thousand);
                                cmd.Parameters.AddWithValue("@fivehundred", return_fivehundred);
                                cmd.Parameters.AddWithValue("@twohundred", return_twohundred);
                                cmd.Parameters.AddWithValue("@hundred", return_hundred);
                                cmd.Parameters.AddWithValue("@fifty", return_fifty);
                                cmd.Parameters.AddWithValue("@twenty", return_twenty);
                                cmd.Parameters.AddWithValue("@ten", return_ten);
                                cmd.Parameters.AddWithValue("@five", return_five);
                                cmd.Parameters.AddWithValue("@twos", return_twos);
                                cmd.Parameters.AddWithValue("@ones", return_ones);
                                cmd.Parameters.AddWithValue("@BranchID", context.Session["branch"].ToString());
                                vdbmngr.Update(cmd);
                            }
                            string Username = "1";
                            cmd = new MySqlCommand("select BranchName,phonenumber from BranchData where Sno=@sno");
                            cmd.Parameters.AddWithValue("@sno", BranchID);
                            DataTable dtBranchName = vdbmngr.SelectQuery(cmd).Tables[0];
                            string BranchName = dtBranchName.Rows[0]["BranchName"].ToString();
                            string phonenumber = dtBranchName.Rows[0]["phonenumber"].ToString();
                            if (paymenttype == "Cheque" || paymenttype == "Bank Transfer")
                            {
                                if (paymenttype == "Cheque")
                                {
                                    cmd = new MySqlCommand("INSERT INTO collections (Branchid, AmountPaid, Denominations, Remarks, PaidDate, UserData_sno, PaymentType, ReturnDenomin, PayTime, EmpID, ChequeNo, CheckStatus, ReceiptNo,ChequeDate, BankName,headsno) VALUES (@Branchid, @AmountPaid, @Denominations, @Remarks, @PaidDate, @UserData_sno, @PaymentType, @ReturnDenomin, @PayTime, @EmpID, @ChequeNo,@CheckStatus, @ReceiptNo, @ChequeDate, @BankName,@headsno)");
                                    cmd.Parameters.AddWithValue("@CheckStatus", "P");
                                    cmd.Parameters.AddWithValue("@ChequeDate", dtchequedate);
                                    cmd.Parameters.AddWithValue("@BankName", BankName);
                                }
                                else
                                {
                                    cmd = new MySqlCommand("INSERT INTO collections (Branchid, AmountPaid, Denominations, Remarks, PaidDate, UserData_sno, PaymentType, ReturnDenomin, PayTime, EmpID, ChequeNo, ReceiptNo, BankName,headsno,banktransferstatus,banktransferdate) VALUES (@Branchid, @AmountPaid, @Denominations, @Remarks, @PaidDate, @UserData_sno, @PaymentType, @ReturnDenomin, @PayTime, @EmpID, @ChequeNo,@ReceiptNo,@BankName,@headsno,@banktransferstatus,@banktransferdate)");
                                    cmd.Parameters.AddWithValue("@BankName", BankName);
                                    cmd.Parameters.AddWithValue("@banktransferstatus", "P");
                                    cmd.Parameters.AddWithValue("@banktransferdate", PaidDate);
                                }
                            }
                            else
                            {
                                cmd = new MySqlCommand("INSERT INTO collections (Branchid, AmountPaid, Denominations, Remarks, PaidDate, UserData_sno, PaymentType, ReturnDenomin, PayTime, EmpID, ChequeNo, ReceiptNo,headsno) VALUES (@Branchid, @AmountPaid, @Denominations, @Remarks, @PaidDate, @UserData_sno, @PaymentType, @ReturnDenomin, @PayTime, @EmpID, @ChequeNo,@ReceiptNo,@headsno)");
                            }
                            cmd.Parameters.AddWithValue("@Branchid", BranchID);
                            cmd.Parameters.AddWithValue("@AmountPaid", PaidAmount);
                            cmd.Parameters.AddWithValue("@Remarks", Remarks);
                            cmd.Parameters.AddWithValue("@headsno", HeadSno);
                            if (soid == "570")
                            {
                                cmd.Parameters.AddWithValue("@PaidDate", PaidDate);
                            }
                            if (soid != "570")
                            {
                                cmd.Parameters.AddWithValue("@PaidDate", ServerDateCurrentdate);
                            }
                            cmd.Parameters.AddWithValue("@PayTime", ServerDateCurrentdate);
                            cmd.Parameters.AddWithValue("@UserData_sno", Username);
                            cmd.Parameters.AddWithValue("@PaymentType", paymenttype);
                            cmd.Parameters.AddWithValue("@EmpID", context.Session["UserSno"].ToString());
                            cmd.Parameters.AddWithValue("@ChequeNo", ChequeNo);
                            cmd.Parameters.AddWithValue("@ReceiptNo", CashReceiptNo);
                            cmd.Parameters.AddWithValue("@Denominations", DenominationString);
                            cmd.Parameters.AddWithValue("@ReturnDenomin", ReturnDenominationString);
                            vdbmngr.insert(cmd);
                            if (paymenttype == "Cheque")
                            {

                            }
                            if (paymenttype == "Cash" || paymenttype == "Bank Transfer" || paymenttype == "PhonePay")
                            {
                                cmd = new MySqlCommand("Update branchaccounts set Amount=Amount-@PaidAmount where BranchId=@BranchId");
                                cmd.Parameters.AddWithValue("@PaidAmount", PaidAmount);
                                cmd.Parameters.AddWithValue("@BranchId", BranchID);
                                if (vdbmngr.Update(cmd) == 0)
                                {
                                    double paidamt = PaidAmount * -1;
                                    cmd = new MySqlCommand("insert into branchaccounts (BranchId,Amount) values (@BranchId,@Amount)");
                                    cmd.Parameters.AddWithValue("@Amount", paidamt);
                                    cmd.Parameters.AddWithValue("@BranchId", BranchID);
                                    vdbmngr.insert(cmd);
                                }
                            }
                            if (phonenumber.Length == 10)
                            {
                                if (paymenttype == "Incentive" || paymenttype == "Journal Voucher")
                                {
                                    string Date = PaidDate;
                                    WebClient client = new WebClient();
                                    DateTime dtmonth = Convert.ToDateTime(Date);
                                    string strdate = dtmonth.ToString("dd/MMM");
                                    string message = "";
                                    if (context.Session["TitleName"].ToString() == "SRI VYSHNAVI DAIRY SPECIALITIES (P) LTD")
                                    {
                                        //string baseurl = "http://103.225.76.43/blank/sms/user/urlsmstemp.php?username=vyshnavidairy&pass=vyshnavi@123&senderid=VYSHRM&dest_mobileno=" + phonenumber + "&message=Dear%20" + BranchName + "%20Your%20Incentive%20Amount%20Credeted%20for%20The%20Month%20Of%20%20" + strdate + "%20Amount%20is =" + PaidAmount + "&response=Y";
                                        string baseurl = "http://www.smsstriker.com/API/sms.php?username=vaishnavidairy&password=vyshnavi@123&from=VSALES&to=" + phonenumber + "&msg=Dear%20" + BranchName + "%20Your%20Incentive%20Amount%20Credeted%20for%20The%20Month%20Of%20%20" + strdate + "%20Amount%20is =" + PaidAmount + "&type=1";
                                        message = "" + BranchName + "Your Incentive Amount Credeted for The Month Of" + strdate + "Amount is =" + PaidAmount + "";
                                        Stream data = client.OpenRead(baseurl);
                                        StreamReader reader = new StreamReader(data);
                                        string ResponseID = reader.ReadToEnd();
                                        data.Close();
                                        reader.Close();
                                    }
                                    else
                                    {
                                        string baseurl = "http://www.smsstriker.com/API/sms.php?username=vaishnavidairy&password=vyshnavi@123&from=VFWYRA&to=" + phonenumber + "&msg=Dear%20" + BranchName + "%20Your%20Incentive%20Amount%20Credeted%20for%20The%20Month%20Of%20%20" + strdate + "%20Amount%20is =" + PaidAmount + "&type=1";
                                        message = "" + BranchName + "Your Incentive Amount Credeted for The Month Of" + strdate + "Amount is =" + PaidAmount + "";
                                        Stream data = client.OpenRead(baseurl);
                                        StreamReader reader = new StreamReader(data);
                                        string ResponseID = reader.ReadToEnd();
                                        data.Close();
                                        reader.Close();
                                    }
                                }
                                else
                                {
                                    ///////................Instruction By Raghu Kumar.............................../////////////
                                    try
                                    {
                                        string Date = PaidDate;
                                        if (context.Session["TitleName"].ToString() == "SRI VYSHNAVI DAIRY SPECIALITIES (P) LTD")
                                        {
                                            WebClient client = new WebClient();
                                            //http://www.smsstriker.com/API/sms.php?username=vaishnavidairy&password=vyshnavi@123&from=VYSNVI&to=
                                            string baseurl = "http://www.smsstriker.com/API/sms.php?username=vaishnavidairy&password=vyshnavi@123&from=VSALES&to=" + phonenumber + "&msg=Dear%20" + BranchName + "%20Your%20Amount%20Collected%20for%20today%20ReceiptNo%20%20" + CashReceiptNo + "%20Date%20" + Date + "%20Amount%20is =" + PaidAmount + "&type=1";
                                            Stream data = client.OpenRead(baseurl);
                                            StreamReader reader = new StreamReader(data);
                                            string ResponseID = reader.ReadToEnd();
                                            data.Close();
                                            reader.Close();
                                        }
                                        else
                                        {
                                            WebClient client = new WebClient();
                                            //http://www.smsstriker.com/API/sms.php?username=vaishnavidairy&password=vyshnavi@123&from=VYSNVI&to=
                                            string baseurl = "http://www.smsstriker.com/API/sms.php?username=vaishnavidairy&password=vyshnavi@123&from=VFWYRA&to=" + phonenumber + "&msg=Dear%20" + BranchName + "%20Your%20Amount%20Collected%20for%20today%20ReceiptNo%20%20" + CashReceiptNo + "%20Date%20" + Date + "%20Amount%20is =" + PaidAmount + "&type=1";
                                            Stream data = client.OpenRead(baseurl);
                                            StreamReader reader = new StreamReader(data);
                                            string ResponseID = reader.ReadToEnd();
                                            data.Close();
                                            reader.Close();
                                        }
                                    }
                                    catch
                                    {
                                    }
                                }
                            }
                        }
                    }
                    if (paymenttype == "Cash" || paymenttype == "Bank Transfer" || paymenttype == "PhonePay")
                    {
                        DateTime pdate = Convert.ToDateTime(PaidDate);

                        cmd = new MySqlCommand("SELECT MAX(sno) as sno FROM agent_bal_trans WHERE agentid=@Branchid");
                        cmd.Parameters.AddWithValue("@Branchid", BranchID);
                        DataTable dtagenttrans = vdbmngr.SelectQuery(cmd).Tables[0];
                        if (dtagenttrans.Rows.Count > 0)
                        {
                            string maxsno = dtagenttrans.Rows[0]["sno"].ToString();
                            cmd = new MySqlCommand("Insert into agent_bal_trans_history(refno, paidamount, cashtype, createddate, entryby) values (@refno,@paidamount,@cashtype,@doe,@entryby)");
                            cmd.Parameters.AddWithValue("@refno", maxsno);
                            cmd.Parameters.AddWithValue("@paidamount", PaidAmount);
                            cmd.Parameters.AddWithValue("@cashtype", collectiontype);
                            cmd.Parameters.AddWithValue("@doe", ServerDateCurrentdate);
                            cmd.Parameters.AddWithValue("@entryby", context.Session["UserSno"].ToString());
                            vdbmngr.insert(cmd);
                            cmd = new MySqlCommand("SELECT agentid, opp_balance,paidamount, inddate, salesvalue, clo_balance FROM agent_bal_trans WHERE sno=@sno");
                            cmd.Parameters.AddWithValue("@sno", maxsno);
                            DataTable dtmaxagenttrans = vdbmngr.SelectQuery(cmd).Tables[0];
                            cmd = new MySqlCommand("SELECT agentid, opp_balance, inddate, salesvalue, clo_balance FROM agent_bal_trans WHERE agentid=@agentid AND inddate between @d1 and @d2");
                            cmd.Parameters.AddWithValue("@agentid", BranchID);
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(pdate.AddDays(-1)));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(pdate.AddDays(-1)));
                            DataTable dtIndentbal = vdbmngr.SelectQuery(cmd).Tables[0];
                            if (dtIndentbal.Rows.Count > 0)
                            {
                                string oppbalance = dtmaxagenttrans.Rows[0]["opp_balance"].ToString();
                                string salesvalue = dtmaxagenttrans.Rows[0]["salesvalue"].ToString();
                                double Prev_amount = 0;
                                double.TryParse(dtmaxagenttrans.Rows[0]["paidamount"].ToString(), out Prev_amount);
                                if (Prev_amount > 0)
                                {
                                    PaidAmount = PaidAmount + Prev_amount;
                                }

                                double total = Convert.ToDouble(oppbalance) + Convert.ToDouble(salesvalue);
                                string closingbalance = dtmaxagenttrans.Rows[0]["clo_balance"].ToString();
                                double clsvalue = Convert.ToDouble(closingbalance);
                                double closingvalue = total - PaidAmount;
                                string inddate = dtmaxagenttrans.Rows[0]["inddate"].ToString();
                                cmd = new MySqlCommand("UPDATE agent_bal_trans SET paidamount=@paidamount, clo_balance=@closing where sno=@refno");
                                cmd.Parameters.AddWithValue("@paidamount", PaidAmount);
                                cmd.Parameters.AddWithValue("@refno", maxsno);
                                cmd.Parameters.AddWithValue("@closing", closingvalue);
                                vdbmngr.Update(cmd);
                            }
                            else
                            {
                                string closingbalance = dtmaxagenttrans.Rows[0]["clo_balance"].ToString();
                                double clsvalue = Convert.ToDouble(closingbalance);
                                double closingvalue = clsvalue - PaidAmount;
                                cmd = new MySqlCommand("UPDATE agent_bal_trans set  clo_balance=clo_balance-@clAmount  where agentid=@BranchId AND inddate=@inddate");
                                cmd.Parameters.AddWithValue("@BranchId", BranchID);
                                cmd.Parameters.AddWithValue("@inddate", pdate.AddDays(-1));
                                cmd.Parameters.AddWithValue("@clAmount", closingvalue);
                                if (vdbmngr.Update(cmd) == 0)
                                {
                                    cmd = new MySqlCommand("Insert Into agent_bal_trans(agentid, opp_balance, inddate, salesvalue,  clo_balance, createdate, entryby,paidamount) values (@BranchId,@opp_balance,@inddate, @salesvalue, @clo_balance, @createdate, @entryby,@paidamount)");
                                    cmd.Parameters.AddWithValue("@paidamount", PaidAmount);
                                    cmd.Parameters.AddWithValue("@BranchId", BranchID);
                                    cmd.Parameters.AddWithValue("@opp_balance", clsvalue);
                                    cmd.Parameters.AddWithValue("@inddate", pdate.AddDays(-1));
                                    cmd.Parameters.AddWithValue("@salesvalue", 0);
                                    cmd.Parameters.AddWithValue("@clo_balance", closingvalue);
                                    cmd.Parameters.AddWithValue("@createdate", ServerDateCurrentdate);
                                    cmd.Parameters.AddWithValue("@entryby", context.Session["UserSno"].ToString());
                                    vdbmngr.insert(cmd);
                                }
                            }
                        }
                    }
                }
                #endregion
                string msg = "Cash Collection Saved Successfully";
                string response = GetJson(msg);
                context.Response.Write(response);
            }
            else
            {
                //if (dtcashbookstatus.Rows.Count > 0)
                //{
                //    string msg = "Cash Book Has Been Closed For This Day";
                //    string response = GetJson(msg);
                //    context.Response.Write(response);
                //}
                //else
                //{
                #region
                if (collectiontype == "Other")
                {
                    //cmd = new MySqlCommand("Select IFNULL(MAX(Receipt),0)+1 as Sno  from cashreceipts where BranchID=@BranchID");
                    string CashReceiptNo = "0";
                    if (paymenttype == "Cash" || paymenttype == "PhonePay")
                    {
                        cmd = new MySqlCommand("Select IFNULL(MAX(Receipt),0)+1 as Sno  from cashreceipts where BranchID=@BranchID AND (DOE BETWEEN @d1 AND @d2)");
                        cmd.Parameters.AddWithValue("@BranchID", context.Session["branch"].ToString());
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(dtapril));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(dtmarch));
                        DataTable dtReceipt = vdbmngr.SelectQuery(cmd).Tables[0];
                        CashReceiptNo = dtReceipt.Rows[0]["Sno"].ToString();
                        cmd = new MySqlCommand("insert into cashreceipts (BranchId,ReceivedFrom,AmountPaid,DOE,Create_by,Remarks,Receipt) values (@BranchId,@ReceivedFrom,@AmountPaid,@DOE, @Create_by,@Remarks,@Receipt)");
                        cmd.Parameters.AddWithValue("@BranchId", context.Session["branch"].ToString());
                        cmd.Parameters.AddWithValue("@ReceivedFrom", "Others");
                        cmd.Parameters.AddWithValue("@AmountPaid", Amount);
                        cmd.Parameters.AddWithValue("DOE", CurDate);
                        cmd.Parameters.AddWithValue("@Create_by", context.Session["UserSno"].ToString());
                        cmd.Parameters.AddWithValue("@Remarks", remarks);
                        cmd.Parameters.AddWithValue("@Receipt", CashReceiptNo);
                        vdbmngr.insert(cmd);
                    }
                    if (paymenttype == "Cash" || paymenttype == "Bank Transfer" || paymenttype == "PhonePay")
                    {
                        cmd = new MySqlCommand("insert into cashcollections (BranchID,Name,Amount,Remarks,DOE,Receiptno,PaymentType,CollectionType,CollectionFrom,freezertype,freezeramounttype,TransType,ledger_code) values(@BranchID,@Name,@Amount,@Remarks,@DOE,@Receiptno,@PaymentType,@CollectionType,@CollectionFrom,@freezertype,@freezeramounttype,@TransType,@ledger_code)");
                    }
                    if (paymenttype == "Cheque" || paymenttype == "DD")
                    {
                        cmd = new MySqlCommand("insert into cashcollections (BranchID,Name,Amount,Remarks,DOE,Receiptno,PaymentType,CollectionType,CollectionFrom,CheckStatus,ChequeNo,ChequeDate,BankName,freezertype,freezeramounttype,TransType,ledger_code) values(@BranchID,@Name,@Amount,@Remarks,@DOE,@Receiptno,@PaymentType,@CollectionType,@CollectionFrom,@CheckStatus,@ChequeNo,@ChequeDate,@BankName,@freezertype,@freezeramounttype,@TransType,@ledger_code)");

                    }
                    cmd.Parameters.AddWithValue("@BranchID", context.Session["branch"]);
                    cmd.Parameters.AddWithValue("@Name", Name);
                    cmd.Parameters.AddWithValue("@Amount", Amount);
                    cmd.Parameters.AddWithValue("@Remarks", Remarks);
                    cmd.Parameters.AddWithValue("@Receiptno", CashReceiptNo);
                    cmd.Parameters.AddWithValue("@DOE", CurDate);
                    cmd.Parameters.AddWithValue("@PaymentType", ddlAmountType);
                    cmd.Parameters.AddWithValue("@CollectionType", paymenttype);
                    cmd.Parameters.AddWithValue("@CollectionFrom", collectiontype);
                    cmd.Parameters.AddWithValue("@CheckStatus", 'P');
                    cmd.Parameters.AddWithValue("@ChequeNo", ChequeNo);
                    cmd.Parameters.AddWithValue("@ChequeDate", dtchequedate);
                    cmd.Parameters.AddWithValue("@BankName", BankName);
                    cmd.Parameters.AddWithValue("@freezertype", ddlfreezertype);
                    cmd.Parameters.AddWithValue("@freezeramounttype", ddlfreezeramounttype);
                    cmd.Parameters.AddWithValue("@TransType", ddlTransType);
                    cmd.Parameters.AddWithValue("@ledger_code", ledger_code);
                    vdbmngr.insert(cmd);
                    string twothousand = "0";
                    string thousand = "0";
                    string fivehundred = "0";
                    string twohundred = "0";
                    string hundred = "0";
                    string fifty = "0";
                    string twenty = "0";
                    string ten = "0";
                    string five = "0";
                    string twos = "0";
                    string ones = "0";
                    DenominationString = context.Request["DenominationString"];
                    DenominationString = DenominationString.Replace("+", " ");
                    if (paymenttype == "Cash")
                    {
                        foreach (string str in DenominationString.Split(' '))
                        {
                            if (str != "")
                            {
                                string[] price = str.Split('x');
                                string amountcount = price[0];
                                string notecount = price[1];
                                if (amountcount == "2000")
                                {
                                    twothousand = notecount;
                                }
                                if (amountcount == "1000")
                                {
                                    thousand = notecount;
                                }
                                if (amountcount == "500")
                                {
                                    fivehundred = notecount;
                                }
                                if (amountcount == "200")
                                {
                                    twohundred = notecount;
                                }
                                if (amountcount == "100")
                                {
                                    hundred = notecount;
                                }
                                if (amountcount == "50")
                                {
                                    fifty = notecount;
                                }
                                if (amountcount == "20")
                                {
                                    twenty = notecount;
                                }
                                if (amountcount == "10")
                                {
                                    ten = notecount;
                                }
                                if (amountcount == "5")
                                {
                                    five = notecount;
                                }
                                if (amountcount == "2")
                                {
                                    twos = notecount;
                                }
                                if (amountcount == "1")
                                {
                                    ones = notecount;
                                }
                            }
                        }
                        cmd = new MySqlCommand("Update branch_denomination set amount=amount+@amount,twothousand=twothousand+@twothousand,thousand=thousand+@thousand,fivehundred=fivehundred+@fivehundred,twohundred=twohundred+@twohundred,hundred=hundred+@hundred,fifty=fifty+@fifty,twenty=twenty+@twenty,ten=ten+@ten,five=five+@five,twos=twos+@twos,ones=ones+@ones where BranchID=@BranchID");
                        cmd.Parameters.AddWithValue("@amount", Amount);
                        cmd.Parameters.AddWithValue("@twothousand", twothousand);
                        cmd.Parameters.AddWithValue("@thousand", thousand);
                        cmd.Parameters.AddWithValue("@fivehundred", fivehundred);
                        cmd.Parameters.AddWithValue("@twohundred", twohundred);
                        cmd.Parameters.AddWithValue("@hundred", hundred);
                        cmd.Parameters.AddWithValue("@fifty", fifty);
                        cmd.Parameters.AddWithValue("@twenty", twenty);
                        cmd.Parameters.AddWithValue("@ten", ten);
                        cmd.Parameters.AddWithValue("@five", five);
                        cmd.Parameters.AddWithValue("@twos", twos);
                        cmd.Parameters.AddWithValue("@ones", ones);
                        cmd.Parameters.AddWithValue("@BranchID", context.Session["branch"].ToString());
                        vdbmngr.Update(cmd);
                        string return_twothousand = "0";
                        string return_thousand = "0";
                        string return_fivehundred = "0";
                        string return_twohundred = "0";
                        string return_hundred = "0";
                        string return_fifty = "0";
                        string return_twenty = "0";
                        string return_ten = "0";
                        string return_five = "0";
                        string return_twos = "0";
                        string return_ones = "0";
                        ReturnDenominationString = ReturnDenominationString.Replace("+", " ");
                        foreach (string str in ReturnDenominationString.Split(' '))
                        {
                            if (str != "")
                            {
                                string[] price = str.Split('x');
                                string amountcount = price[0];
                                string notecount = price[1];
                                if (amountcount == "2000")
                                {
                                    return_twothousand = notecount;
                                }
                                if (amountcount == "1000")
                                {
                                    return_thousand = notecount;
                                }
                                if (amountcount == "500")
                                {
                                    return_fivehundred = notecount;
                                }
                                if (amountcount == "200")
                                {
                                    return_twohundred = notecount;
                                }
                                if (amountcount == "100")
                                {
                                    return_hundred = notecount;
                                }
                                if (amountcount == "50")
                                {
                                    return_fifty = notecount;
                                }
                                if (amountcount == "20")
                                {
                                    return_twenty = notecount;
                                }
                                if (amountcount == "10")
                                {
                                    return_ten = notecount;
                                }
                                if (amountcount == "5")
                                {
                                    return_five = notecount;
                                }
                                if (amountcount == "2")
                                {
                                    return_twos = notecount;
                                }
                                if (amountcount == "1")
                                {
                                    return_ones = notecount;
                                }
                            }
                        }
                        cmd = new MySqlCommand("Update branch_denomination set twothousand=twothousand-@twothousand,thousand=thousand-@thousand,fivehundred=fivehundred-@fivehundred,twohundred=twohundred-@twohundred,hundred=hundred-@hundred,fifty=fifty-@fifty,twenty=twenty-@twenty,ten=ten-@ten,five=five-@five,twos=twos-@twos,ones=ones-@ones where BranchID=@BranchID");
                        cmd.Parameters.AddWithValue("@amount", Amount);
                        cmd.Parameters.AddWithValue("@twothousand", return_twothousand);
                        cmd.Parameters.AddWithValue("@thousand", return_thousand);
                        cmd.Parameters.AddWithValue("@fivehundred", return_fivehundred);
                        cmd.Parameters.AddWithValue("@twohundred", return_twohundred);
                        cmd.Parameters.AddWithValue("@hundred", return_hundred);
                        cmd.Parameters.AddWithValue("@fifty", return_fifty);
                        cmd.Parameters.AddWithValue("@twenty", return_twenty);
                        cmd.Parameters.AddWithValue("@ten", return_ten);
                        cmd.Parameters.AddWithValue("@five", return_five);
                        cmd.Parameters.AddWithValue("@twos", return_twos);
                        cmd.Parameters.AddWithValue("@ones", return_ones);
                        cmd.Parameters.AddWithValue("@BranchID", context.Session["branch"].ToString());
                        vdbmngr.Update(cmd);
                    }
                }
                #endregion
                #region
                if (collectiontype == "SD Deposit")
                {
                    string CashReceiptNo = "0";
                    if (paymenttype == "Cash" || paymenttype == "PhonePay")
                    {
                        cmd = new MySqlCommand("Select IFNULL(MAX(Receipt),0)+1 as Sno  from cashreceipts where BranchID=@BranchID AND (DOE BETWEEN @d1 AND @d2)");
                        cmd.Parameters.AddWithValue("@BranchID", context.Session["branch"].ToString());
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(dtapril));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(dtmarch));
                        DataTable dtReceipt = vdbmngr.SelectQuery(cmd).Tables[0];
                        CashReceiptNo = dtReceipt.Rows[0]["Sno"].ToString();
                        cmd = new MySqlCommand("insert into cashreceipts (BranchId,ReceivedFrom,AmountPaid,DOE,Create_by,Remarks,Receipt,PaymentStatus) values (@BranchId,@ReceivedFrom,@AmountPaid,@DOE, @Create_by,@Remarks,@Receipt,@PaymentStatus)");
                        cmd.Parameters.AddWithValue("@BranchId", context.Session["branch"].ToString());
                        cmd.Parameters.AddWithValue("@ReceivedFrom", "Others");
                        cmd.Parameters.AddWithValue("@AmountPaid", Amount);
                        cmd.Parameters.AddWithValue("DOE", CurDate);
                        cmd.Parameters.AddWithValue("@Create_by", context.Session["UserSno"].ToString());
                        cmd.Parameters.AddWithValue("@Remarks", remarks);
                        cmd.Parameters.AddWithValue("@Receipt", CashReceiptNo);
                        cmd.Parameters.AddWithValue("@PaymentStatus", paymenttype);
                        vdbmngr.insert(cmd);
                    }
                    if (paymenttype == "Cash" || paymenttype == "Bank Transfer" || paymenttype == "Journal Voucher" || paymenttype == "PhonePay")
                    {
                        cmd = new MySqlCommand("insert into cashcollections (BranchID,Name,Amount,Remarks,DOE,Receiptno,Agentid,PaymentType,CollectionType,CollectionFrom,freezertype,freezeramounttype,TransType) values(@BranchID,@Name,@Amount,@Remarks,@DOE,@Receiptno,@Agentid,@PaymentType,@CollectionType,@CollectionFrom,@freezertype,@freezeramounttype,@TransType)");
                    }
                    if (paymenttype == "Cheque" || paymenttype == "DD")
                    {
                        cmd = new MySqlCommand("insert into cashcollections (BranchID,Name,Amount,Remarks,DOE,Receiptno,Agentid,PaymentType,CollectionType,CollectionFrom,CheckStatus,ChequeNo,ChequeDate,BankName,freezertype,freezeramounttype,TransType) values(@BranchID,@Name,@Amount,@Remarks,@DOE,@Receiptno,@Agentid,@PaymentType,@CollectionType,@CollectionFrom,@CheckStatus,@ChequeNo,@ChequeDate,@BankName,@freezertype,@freezeramounttype,@TransType)");
                    }
                    cmd.Parameters.AddWithValue("@BranchID", context.Session["branch"]);
                    cmd.Parameters.AddWithValue("@Name", Name);
                    cmd.Parameters.AddWithValue("@Amount", Amount);
                    cmd.Parameters.AddWithValue("@Remarks", Remarks);
                    cmd.Parameters.AddWithValue("@Receiptno", CashReceiptNo);
                    cmd.Parameters.AddWithValue("@DOE", CurDate);
                    cmd.Parameters.AddWithValue("@PaymentType", ddlAmountType);
                    cmd.Parameters.AddWithValue("@CollectionType", paymenttype);
                    cmd.Parameters.AddWithValue("@CollectionFrom", collectiontype);
                    cmd.Parameters.AddWithValue("@Agentid", AgentID);
                    cmd.Parameters.AddWithValue("@CheckStatus", 'P');
                    cmd.Parameters.AddWithValue("@ChequeNo", ChequeNo);
                    cmd.Parameters.AddWithValue("@ChequeDate", dtchequedate);
                    cmd.Parameters.AddWithValue("@BankName", BankName);
                    cmd.Parameters.AddWithValue("@freezertype", ddlfreezertype);
                    cmd.Parameters.AddWithValue("@freezeramounttype", ddlfreezeramounttype);
                    cmd.Parameters.AddWithValue("@TransType", ddlTransType);
                    vdbmngr.insert(cmd);
                    string twothousand = "0";
                    string thousand = "0";
                    string fivehundred = "0";
                    string twohundred = "0";
                    string hundred = "0";
                    string fifty = "0";
                    string twenty = "0";
                    string ten = "0";
                    string five = "0";
                    string twos = "0";
                    string ones = "0";
                    DenominationString = context.Request["DenominationString"];
                    DenominationString = DenominationString.Replace("+", " ");
                    if (paymenttype == "Cash")
                    {
                        foreach (string str in DenominationString.Split(' '))
                        {
                            if (str != "")
                            {
                                string[] price = str.Split('x');
                                string amountcount = price[0];
                                string notecount = price[1];
                                if (amountcount == "2000")
                                {
                                    twothousand = notecount;
                                }
                                if (amountcount == "1000")
                                {
                                    thousand = notecount;
                                }
                                if (amountcount == "500")
                                {
                                    fivehundred = notecount;
                                }
                                if (amountcount == "200")
                                {
                                    twohundred = notecount;
                                }
                                if (amountcount == "100")
                                {
                                    hundred = notecount;
                                }
                                if (amountcount == "50")
                                {
                                    fifty = notecount;
                                }
                                if (amountcount == "20")
                                {
                                    twenty = notecount;
                                }
                                if (amountcount == "10")
                                {
                                    ten = notecount;
                                }
                                if (amountcount == "5")
                                {
                                    five = notecount;
                                }
                                if (amountcount == "2")
                                {
                                    twos = notecount;
                                }
                                if (amountcount == "1")
                                {
                                    ones = notecount;
                                }
                            }
                        }
                        cmd = new MySqlCommand("Update branch_denomination set amount=amount+@amount,twothousand=twothousand+@twothousand,thousand=thousand+@thousand,fivehundred=fivehundred+@fivehundred,twohundred=twohundred+@twohundred,hundred=hundred+@hundred,fifty=fifty+@fifty,twenty=twenty+@twenty,ten=ten+@ten,five=five+@five,twos=twos+@twos,ones=ones+@ones where BranchID=@BranchID");
                        cmd.Parameters.AddWithValue("@amount", Amount);
                        cmd.Parameters.AddWithValue("@twothousand", twothousand);
                        cmd.Parameters.AddWithValue("@thousand", thousand);
                        cmd.Parameters.AddWithValue("@fivehundred", fivehundred);
                        cmd.Parameters.AddWithValue("@twohundred", twohundred);
                        cmd.Parameters.AddWithValue("@hundred", hundred);
                        cmd.Parameters.AddWithValue("@fifty", fifty);
                        cmd.Parameters.AddWithValue("@twenty", twenty);
                        cmd.Parameters.AddWithValue("@ten", ten);
                        cmd.Parameters.AddWithValue("@five", five);
                        cmd.Parameters.AddWithValue("@twos", twos);
                        cmd.Parameters.AddWithValue("@ones", ones);
                        cmd.Parameters.AddWithValue("@BranchID", context.Session["branch"].ToString());
                        vdbmngr.Update(cmd);

                        string return_twothousand = "0";
                        string return_thousand = "0";
                        string return_fivehundred = "0";
                        string return_twohundred = "0";
                        string return_hundred = "0";
                        string return_fifty = "0";
                        string return_twenty = "0";
                        string return_ten = "0";
                        string return_five = "0";
                        string return_twos = "0";
                        string return_ones = "0";
                        ReturnDenominationString = ReturnDenominationString.Replace("+", " ");
                        foreach (string str in ReturnDenominationString.Split(' '))
                        {
                            if (str != "")
                            {
                                string[] price = str.Split('x');
                                string amountcount = price[0];
                                string notecount = price[1];
                                if (amountcount == "2000")
                                {
                                    return_twothousand = notecount;
                                }
                                if (amountcount == "1000")
                                {
                                    return_thousand = notecount;
                                }
                                if (amountcount == "500")
                                {
                                    return_fivehundred = notecount;
                                }
                                if (amountcount == "200")
                                {
                                    return_twohundred = notecount;
                                }
                                if (amountcount == "100")
                                {
                                    return_hundred = notecount;
                                }
                                if (amountcount == "50")
                                {
                                    return_fifty = notecount;
                                }
                                if (amountcount == "20")
                                {
                                    return_twenty = notecount;
                                }
                                if (amountcount == "10")
                                {
                                    return_ten = notecount;
                                }
                                if (amountcount == "5")
                                {
                                    return_five = notecount;
                                }
                                if (amountcount == "2")
                                {
                                    return_twos = notecount;
                                }
                                if (amountcount == "1")
                                {
                                    return_ones = notecount;
                                }
                            }
                        }
                        cmd = new MySqlCommand("Update branch_denomination set twothousand=twothousand-@twothousand,thousand=thousand-@thousand,fivehundred=fivehundred-@fivehundred,twohundred=twohundred-@twohundred,hundred=hundred-@hundred,fifty=fifty-@fifty,twenty=twenty-@twenty,ten=ten-@ten,five=five-@five,twos=twos-@twos,ones=ones-@ones where BranchID=@BranchID");
                        cmd.Parameters.AddWithValue("@amount", Amount);
                        cmd.Parameters.AddWithValue("@twothousand", return_twothousand);
                        cmd.Parameters.AddWithValue("@thousand", return_thousand);
                        cmd.Parameters.AddWithValue("@fivehundred", return_fivehundred);
                        cmd.Parameters.AddWithValue("@twohundred", return_twohundred);
                        cmd.Parameters.AddWithValue("@hundred", return_hundred);
                        cmd.Parameters.AddWithValue("@fifty", return_fifty);
                        cmd.Parameters.AddWithValue("@twenty", return_twenty);
                        cmd.Parameters.AddWithValue("@ten", return_ten);
                        cmd.Parameters.AddWithValue("@five", return_five);
                        cmd.Parameters.AddWithValue("@twos", return_twos);
                        cmd.Parameters.AddWithValue("@ones", return_ones);
                        cmd.Parameters.AddWithValue("@BranchID", context.Session["branch"].ToString());
                        vdbmngr.Update(cmd);
                    }
                }
                #endregion
                #region
                if (collectiontype == "SalesOfficeCollection")
                {

                    double PaidAmount = 0;
                    double.TryParse(Amount.ToString(), out PaidAmount);
                    currentyear = ServerDateCurrentdate.Year;
                    nextyear = ServerDateCurrentdate.Year + 1;
                    string Branch = soid;
                    if (soid == "572")
                    {
                        Branch = "158";
                    }
                    if (ServerDateCurrentdate.Month > 3)
                    {
                        string apr = "4/1/" + currentyear;
                        dtapril = DateTime.Parse(apr);
                        string march = "3/31/" + nextyear;
                        dtmarch = DateTime.Parse(march);
                    }
                    if (ServerDateCurrentdate.Month <= 3)
                    {
                        string apr = "4/1/" + (currentyear - 1);
                        dtapril = DateTime.Parse(apr);
                        string march = "3/31/" + (nextyear - 1);
                        dtmarch = DateTime.Parse(march);
                    }
                    if (Branch != "158")
                    {
                        if (Transactiontype == "Credit")
                        {
                            cmd = new MySqlCommand("SELECT Branchid, UserData_sno, AmountPaid, Denominations, Remarks, Sno, PaidDate FROM collections WHERE (Branchid = @BranchID) AND (PaidDate BETWEEN @d1 AND @d2)");
                            cmd.Parameters.AddWithValue("@BranchID", Branch);
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(ServerDateCurrentdate));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ServerDateCurrentdate));
                            DataTable dtcashbookstatus1 = vdbmngr.SelectQuery(cmd).Tables[0];
                            if (dtcashbookstatus1.Rows.Count > 0)
                            {
                                ServerDateCurrentdate = ServerDateCurrentdate.AddDays(1);
                            }
                            cmd = new MySqlCommand("Select Amount from branchaccounts where BranchId=@BranchId");
                            cmd.Parameters.AddWithValue("@BranchId", Branch);
                            DataTable dtbrnchoppamt = vdbmngr.SelectQuery(cmd).Tables[0];
                            string amount = "0";
                            if (dtbrnchoppamt.Rows.Count > 0)
                            {
                                amount = dtbrnchoppamt.Rows[0]["Amount"].ToString();
                            }
                            //string remarks = "Agent Collection";
                            string CashReceiptNo = "0";
                            if (paymenttype == "Cash" || paymenttype == "PhonePay")
                            {
                                cmd = new MySqlCommand("Select IFNULL(MAX(Receipt),0)+1 as Sno  from cashreceipts where BranchID=@BranchID AND (DOE BETWEEN @d1 AND @d2)");
                                cmd.Parameters.AddWithValue("@BranchID", Branch);
                                cmd.Parameters.AddWithValue("@d1", GetLowDate(dtapril));
                                cmd.Parameters.AddWithValue("@d2", GetHighDate(dtmarch));
                                DataTable dtReceipt = vdbmngr.SelectQuery(cmd).Tables[0];
                                CashReceiptNo = dtReceipt.Rows[0]["Sno"].ToString();
                                // CashReceiptNo = "0";
                                if (paymenttype == "Cheque")
                                {
                                    cmd = new MySqlCommand("insert into cashreceipts (BranchId,ReceivedFrom,AgentID,AmountPaid,DOE,Create_by,Remarks,OppBal,Receipt,Paymentstatus,ChequeNo) values (@BranchId,@ReceivedFrom,@AgentID,@AmountPaid,@DOE, @Create_by,@Remarks,@OppBal,@Receipt,@Paymentstatus,@ChequeNo)");
                                    cmd.Parameters.AddWithValue("@ChequeNo", ChequeNo);
                                    cmd.Parameters.AddWithValue("@Paymentstatus", "Cheque");
                                }
                                else
                                {
                                    cmd = new MySqlCommand("insert into cashreceipts (BranchId,ReceivedFrom,AgentID,AmountPaid,DOE,Create_by,Remarks,OppBal,Receipt,PaymentStatus) values (@BranchId,@ReceivedFrom,@AgentID,@AmountPaid,@DOE, @Create_by,@Remarks,@OppBal,@Receipt,@PaymentStatus)");
                                    cmd.Parameters.AddWithValue("@Paymentstatus", paymenttype);
                                }
                                cmd.Parameters.AddWithValue("@BranchId", Branch);
                                cmd.Parameters.AddWithValue("@ReceivedFrom", "Agent");
                                cmd.Parameters.AddWithValue("@AgentID", BranchID);
                                cmd.Parameters.AddWithValue("@AmountPaid", PaidAmount);
                                cmd.Parameters.AddWithValue("@DOE", PaidDate);
                                cmd.Parameters.AddWithValue("@Create_by", context.Session["UserSno"].ToString());
                                cmd.Parameters.AddWithValue("@Remarks", Remarks);
                                cmd.Parameters.AddWithValue("@OppBal", amount);
                                cmd.Parameters.AddWithValue("@Receipt", CashReceiptNo);
                                vdbmngr.insert(cmd);
                                string twothousand = "0";
                                string thousand = "0";
                                string fivehundred = "0";
                                string twohundred = "0";
                                string hundred = "0";
                                string fifty = "0";
                                string twenty = "0";
                                string ten = "0";
                                string five = "0";
                                string twos = "0";
                                string ones = "0";
                                DenominationString = DenominationString.Replace("+", " ");
                                foreach (string str in DenominationString.Split(' '))
                                {
                                    if (str != "")
                                    {
                                        string[] price = str.Split('x');
                                        string amountcount = price[0];
                                        string notecount = price[1];
                                        if (amountcount == "2000")
                                        {
                                            twothousand = notecount;
                                        }
                                        if (amountcount == "1000")
                                        {
                                            thousand = notecount;
                                        }
                                        if (amountcount == "500")
                                        {
                                            fivehundred = notecount;
                                        }
                                        if (amountcount == "200")
                                        {
                                            twohundred = notecount;
                                        }
                                        if (amountcount == "100")
                                        {
                                            hundred = notecount;
                                        }
                                        if (amountcount == "50")
                                        {
                                            fifty = notecount;
                                        }
                                        if (amountcount == "20")
                                        {
                                            twenty = notecount;
                                        }
                                        if (amountcount == "10")
                                        {
                                            ten = notecount;
                                        }
                                        if (amountcount == "5")
                                        {
                                            five = notecount;
                                        }
                                        if (amountcount == "2")
                                        {
                                            twos = notecount;
                                        }
                                        if (amountcount == "1")
                                        {
                                            ones = notecount;
                                        }
                                    }
                                }
                                cmd = new MySqlCommand("Update branch_denomination set amount=amount+@amount,twothousand=twothousand+@twothousand,thousand=thousand+@thousand,fivehundred=fivehundred+@fivehundred,twohundred=twohundred+@twohundred,hundred=hundred+@hundred,fifty=fifty+@fifty,twenty=twenty+@twenty,ten=ten+@ten,five=five+@five,twos=twos+@twos,ones=ones+@ones where BranchID=@BranchID");
                                cmd.Parameters.AddWithValue("@amount", Amount);
                                cmd.Parameters.AddWithValue("@twothousand", twothousand);
                                cmd.Parameters.AddWithValue("@thousand", thousand);
                                cmd.Parameters.AddWithValue("@fivehundred", fivehundred);
                                cmd.Parameters.AddWithValue("@twohundred", twohundred);
                                cmd.Parameters.AddWithValue("@hundred", hundred);
                                cmd.Parameters.AddWithValue("@fifty", fifty);
                                cmd.Parameters.AddWithValue("@twenty", twenty);
                                cmd.Parameters.AddWithValue("@ten", ten);
                                cmd.Parameters.AddWithValue("@five", five);
                                cmd.Parameters.AddWithValue("@twos", twos);
                                cmd.Parameters.AddWithValue("@ones", ones);
                                cmd.Parameters.AddWithValue("@BranchID", context.Session["branch"].ToString());
                                vdbmngr.Update(cmd);

                                string return_twothousand = "0";
                                string return_thousand = "0";
                                string return_twohundred = "0";
                                string return_fivehundred = "0";
                                string return_hundred = "0";
                                string return_fifty = "0";
                                string return_twenty = "0";
                                string return_ten = "0";
                                string return_five = "0";
                                string return_twos = "0";
                                string return_ones = "0";
                                ReturnDenominationString = ReturnDenominationString.Replace("+", " ");
                                foreach (string str in ReturnDenominationString.Split(' '))
                                {
                                    if (str != "")
                                    {
                                        string[] price = str.Split('x');
                                        string amountcount = price[0];
                                        string notecount = price[1];
                                        if (amountcount == "2000")
                                        {
                                            return_twothousand = notecount;
                                        }
                                        if (amountcount == "1000")
                                        {
                                            return_thousand = notecount;
                                        }
                                        if (amountcount == "500")
                                        {
                                            return_fivehundred = notecount;
                                        }
                                        if (amountcount == "200")
                                        {
                                            return_twohundred = notecount;
                                        }
                                        if (amountcount == "100")
                                        {
                                            return_hundred = notecount;
                                        }
                                        if (amountcount == "50")
                                        {
                                            return_fifty = notecount;
                                        }
                                        if (amountcount == "20")
                                        {
                                            return_twenty = notecount;
                                        }
                                        if (amountcount == "10")
                                        {
                                            return_ten = notecount;
                                        }
                                        if (amountcount == "5")
                                        {
                                            return_five = notecount;
                                        }
                                        if (amountcount == "2")
                                        {
                                            return_twos = notecount;
                                        }
                                        if (amountcount == "1")
                                        {
                                            return_ones = notecount;
                                        }
                                    }
                                }
                                cmd = new MySqlCommand("Update branch_denomination set twothousand=twothousand-@twothousand,thousand=thousand-@thousand,fivehundred=fivehundred-@fivehundred,twohundred=twohundred+@twohundred,hundred=hundred-@hundred,fifty=fifty-@fifty,twenty=twenty-@twenty,ten=ten-@ten,five=five-@five,twos=twos-@twos,ones=ones-@ones where BranchID=@BranchID");
                                cmd.Parameters.AddWithValue("@amount", Amount);
                                cmd.Parameters.AddWithValue("@twothousand", return_twothousand);
                                cmd.Parameters.AddWithValue("@thousand", return_thousand);
                                cmd.Parameters.AddWithValue("@fivehundred", return_fivehundred);
                                cmd.Parameters.AddWithValue("@twohundred", return_twohundred);
                                cmd.Parameters.AddWithValue("@hundred", return_hundred);
                                cmd.Parameters.AddWithValue("@fifty", return_fifty);
                                cmd.Parameters.AddWithValue("@twenty", return_twenty);
                                cmd.Parameters.AddWithValue("@ten", return_ten);
                                cmd.Parameters.AddWithValue("@five", return_five);
                                cmd.Parameters.AddWithValue("@twos", return_twos);
                                cmd.Parameters.AddWithValue("@ones", return_ones);
                                cmd.Parameters.AddWithValue("@BranchID", context.Session["branch"].ToString());
                                vdbmngr.Update(cmd);
                            }
                            string Username = "1";
                            cmd = new MySqlCommand("select BranchName,phonenumber from BranchData where Sno=@sno");
                            cmd.Parameters.AddWithValue("@sno", BranchID);
                            DataTable dtBranchName = vdbmngr.SelectQuery(cmd).Tables[0];
                            string BranchName = dtBranchName.Rows[0]["BranchName"].ToString();
                            string phonenumber = dtBranchName.Rows[0]["phonenumber"].ToString();
                            if (paymenttype == "Cheque" || paymenttype == "Bank Transfer")
                            {
                                if (paymenttype == "Cheque")
                                {
                                    cmd = new MySqlCommand("INSERT INTO collections (Branchid, AmountPaid, Denominations, Remarks, PaidDate, UserData_sno, PaymentType, ReturnDenomin, PayTime, EmpID, ChequeNo, CheckStatus, ReceiptNo,ChequeDate, BankName,headsno) VALUES (@Branchid, @AmountPaid, @Denominations, @Remarks, @PaidDate, @UserData_sno, @PaymentType, @ReturnDenomin, @PayTime, @EmpID, @ChequeNo,@CheckStatus, @ReceiptNo, @ChequeDate, @BankName,@headsno)");
                                    cmd.Parameters.AddWithValue("@CheckStatus", "P");
                                    cmd.Parameters.AddWithValue("@ChequeDate", dtchequedate);
                                    cmd.Parameters.AddWithValue("@BankName", BankName);
                                }
                                else
                                {
                                    //cmd = new MySqlCommand("insert into collections (Branchid,AmountPaid,Remarks,PaidDate,UserData_sno,PaymentType,PayTime,EmpID,ChequeNo,CheckStatus,ReceiptNo,ChequeDate,BankName)values(@Branchid,@AmountPaid,@Remarks,@PaidDate,@UserData_sno,@PaymentType,@PayTime,@EmpID,@ChequeNo,@CheckStatus,@ReceiptNo,@ChequeDate,@BankName)");
                                    cmd = new MySqlCommand("INSERT INTO collections (Branchid, AmountPaid, Denominations, Remarks, PaidDate, UserData_sno, PaymentType, ReturnDenomin, PayTime, EmpID, ChequeNo, ReceiptNo, BankName,headsno,banktransferstatus,banktransferdate) VALUES (@Branchid, @AmountPaid, @Denominations, @Remarks, @PaidDate, @UserData_sno, @PaymentType, @ReturnDenomin, @PayTime, @EmpID, @ChequeNo,@ReceiptNo,@BankName,@headsno,@banktransferstatus,@banktransferdate)");
                                    cmd.Parameters.AddWithValue("@BankName", BankName);
                                    cmd.Parameters.AddWithValue("@banktransferstatus", "P");
                                    cmd.Parameters.AddWithValue("@banktransferdate", PaidDate);
                                }
                            }
                            else
                            {
                                //headsnocmd = new MySqlCommand("insert into collections (Branchid,AmountPaid,Remarks,PaidDate,UserData_sno,PaymentType,PayTime,EmpID,ChequeNo,ReceiptNo)values(@Branchid,@AmountPaid,@Remarks,@PaidDate,@UserData_sno,@PaymentType,@PayTime,@EmpID,@ChequeNo,@ReceiptNo)");
                                cmd = new MySqlCommand("INSERT INTO collections (Branchid, AmountPaid, Denominations, Remarks, PaidDate, UserData_sno, PaymentType, ReturnDenomin, PayTime, EmpID, ChequeNo, ReceiptNo,headsno) VALUES (@Branchid, @AmountPaid, @Denominations, @Remarks, @PaidDate, @UserData_sno, @PaymentType, @ReturnDenomin, @PayTime, @EmpID, @ChequeNo,@ReceiptNo,@headsno)");
                            }
                            cmd.Parameters.AddWithValue("@Branchid", BranchID);
                            cmd.Parameters.AddWithValue("@AmountPaid", PaidAmount);
                            cmd.Parameters.AddWithValue("@Remarks", Remarks);
                            cmd.Parameters.AddWithValue("@headsno", HeadSno);
                            cmd.Parameters.AddWithValue("@PaidDate", PaidDate);
                            cmd.Parameters.AddWithValue("@PayTime", ServerDateCurrentdate);
                            cmd.Parameters.AddWithValue("@UserData_sno", Username);
                            cmd.Parameters.AddWithValue("@PaymentType", paymenttype);
                            cmd.Parameters.AddWithValue("@EmpID", context.Session["UserSno"].ToString());
                            cmd.Parameters.AddWithValue("@ChequeNo", ChequeNo);
                            cmd.Parameters.AddWithValue("@ReceiptNo", CashReceiptNo);
                            cmd.Parameters.AddWithValue("@Denominations", DenominationString);
                            cmd.Parameters.AddWithValue("@ReturnDenomin", ReturnDenominationString);
                            vdbmngr.insert(cmd);
                            if (paymenttype == "Cheque")
                            {

                            }
                            if (paymenttype == "Cash" || paymenttype == "Bank Transfer" || paymenttype == "PhonePay")
                            {
                                cmd = new MySqlCommand("Update branchaccounts set Amount=Amount-@PaidAmount where BranchId=@BranchId");
                                cmd.Parameters.AddWithValue("@PaidAmount", PaidAmount);
                                cmd.Parameters.AddWithValue("@BranchId", BranchID);
                                if (vdbmngr.Update(cmd) == 0)
                                {
                                    double paidamt = PaidAmount * -1;
                                    cmd = new MySqlCommand("insert into branchaccounts (BranchId,Amount) values (@BranchId,@Amount)");
                                    cmd.Parameters.AddWithValue("@Amount", paidamt);
                                    cmd.Parameters.AddWithValue("@BranchId", BranchID);
                                    vdbmngr.insert(cmd);
                                }
                            }
                            if (phonenumber.Length == 10)
                            {
                                if (paymenttype == "Incentive" || paymenttype == "Journal Voucher")
                                {
                                    string Date = PaidDate;
                                    WebClient client = new WebClient();
                                    DateTime dtmonth = Convert.ToDateTime(Date);
                                    string strdate = dtmonth.ToString("dd/MMM");
                                    string message = "";
                                    if (context.Session["TitleName"].ToString() == "BMG Milk Dairy Farm")
                                    {
                                        //string baseurl = "http://103.225.76.43/blank/sms/user/urlsmstemp.php?username=vyshnavidairy&pass=vyshnavi@123&senderid=VYSHRM&dest_mobileno=" + phonenumber + "&message=Dear%20" + BranchName + "%20Your%20Incentive%20Amount%20Credeted%20for%20The%20Month%20Of%20%20" + strdate + "%20Amount%20is =" + PaidAmount + "&response=Y";
                                        string baseurl = "http://www.smsstriker.com/API/sms.php?username=vaishnavidairy&password=vyshnavi@123&from=VSALES&to=" + phonenumber + "&msg=Dear%20" + BranchName + "%20Your%20Incentive%20Amount%20Credeted%20for%20The%20Month%20Of%20%20" + strdate + "%20Amount%20is =" + PaidAmount + "&type=1";
                                        message = "" + BranchName + "Your Incentive Amount Credeted for The Month Of" + strdate + "Amount is =" + PaidAmount + "";
                                        Stream data = client.OpenRead(baseurl);
                                        StreamReader reader = new StreamReader(data);
                                        string ResponseID = reader.ReadToEnd();
                                        data.Close();
                                        reader.Close();
                                    }
                                    else
                                    {
                                        string baseurl = "http://www.smsstriker.com/API/sms.php?username=vaishnavidairy&password=vyshnavi@123&from=VFWYRA&to=" + phonenumber + "&msg=Dear%20" + BranchName + "%20Your%20Incentive%20Amount%20Credeted%20for%20The%20Month%20Of%20%20" + strdate + "%20Amount%20is =" + PaidAmount + "&type=1";
                                        message = "" + BranchName + "Your Incentive Amount Credeted for The Month Of" + strdate + "Amount is =" + PaidAmount + "";
                                        Stream data = client.OpenRead(baseurl);
                                        StreamReader reader = new StreamReader(data);
                                        string ResponseID = reader.ReadToEnd();
                                        data.Close();
                                        reader.Close();
                                    }
                                }
                                else
                                {
                                    ///////................Instruction By Raghu Kumar.............................../////////////
                                    try
                                    {
                                        string Date = PaidDate;
                                        if (context.Session["TitleName"].ToString() == "BMG Milk Dairy Farm")
                                        {
                                            WebClient client = new WebClient();
                                            //http://www.smsstriker.com/API/sms.php?username=vaishnavidairy&password=vyshnavi@123&from=VYSNVI&to=
                                            string baseurl = "http://www.smsstriker.com/API/sms.php?username=vaishnavidairy&password=vyshnavi@123&from=VSALES&to=" + phonenumber + "&msg=Dear%20" + BranchName + "%20Your%20Amount%20Collected%20for%20today%20ReceiptNo%20%20" + CashReceiptNo + "%20Date%20" + Date + "%20Amount%20is =" + PaidAmount + "&type=1";
                                            Stream data = client.OpenRead(baseurl);
                                            StreamReader reader = new StreamReader(data);
                                            string ResponseID = reader.ReadToEnd();
                                            data.Close();
                                            reader.Close();
                                        }
                                        else
                                        {
                                            WebClient client = new WebClient();
                                            //http://www.smsstriker.com/API/sms.php?username=vaishnavidairy&password=vyshnavi@123&from=VYSNVI&to=
                                            string baseurl = "http://www.smsstriker.com/API/sms.php?username=vaishnavidairy&password=vyshnavi@123&from=VFWYRA&to=" + phonenumber + "&msg=Dear%20" + BranchName + "%20Your%20Amount%20Collected%20for%20today%20ReceiptNo%20%20" + CashReceiptNo + "%20Date%20" + Date + "%20Amount%20is =" + PaidAmount + "&type=1";
                                            Stream data = client.OpenRead(baseurl);
                                            StreamReader reader = new StreamReader(data);
                                            string ResponseID = reader.ReadToEnd();
                                            data.Close();
                                            reader.Close();
                                        }
                                    }
                                    catch
                                    {
                                    }
                                }
                            }
                        }
                    }
                    if (paymenttype == "Cash" || paymenttype == "Bank Transfer" || paymenttype == "PhonePay")
                    {
                        DateTime pdate = Convert.ToDateTime(PaidDate);

                        cmd = new MySqlCommand("SELECT MAX(sno) as sno FROM agent_bal_trans WHERE agentid=@Branchid");
                        cmd.Parameters.AddWithValue("@Branchid", BranchID);
                        DataTable dtagenttrans = vdbmngr.SelectQuery(cmd).Tables[0];
                        if (dtagenttrans.Rows.Count > 0)
                        {
                            string maxsno = dtagenttrans.Rows[0]["sno"].ToString();
                            cmd = new MySqlCommand("Insert into agent_bal_trans_history(refno, paidamount, cashtype, createddate, entryby) values (@refno,@paidamount,@cashtype,@doe,@entryby)");
                            cmd.Parameters.AddWithValue("@refno", maxsno);
                            cmd.Parameters.AddWithValue("@paidamount", PaidAmount);
                            cmd.Parameters.AddWithValue("@cashtype", collectiontype);
                            cmd.Parameters.AddWithValue("@doe", ServerDateCurrentdate);
                            cmd.Parameters.AddWithValue("@entryby", context.Session["UserSno"].ToString());
                            vdbmngr.insert(cmd);
                            cmd = new MySqlCommand("SELECT agentid, opp_balance,paidamount, inddate, salesvalue, clo_balance FROM agent_bal_trans WHERE sno=@sno");
                            cmd.Parameters.AddWithValue("@sno", maxsno);
                            DataTable dtmaxagenttrans = vdbmngr.SelectQuery(cmd).Tables[0];

                            cmd = new MySqlCommand("SELECT * FROM agent_bal_trans WHERE agentid=@agentid and inddate between @d1 and @d2");
                            cmd.Parameters.AddWithValue("@agentid", BranchID);
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(pdate).AddDays(-1));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(pdate).AddDays(-1));
                            DataTable dtagentbal = vdbmngr.SelectQuery(cmd).Tables[0];
                            if (dtagentbal.Rows.Count > 0)
                            {
                                string sno = dtagentbal.Rows[0]["sno"].ToString();
                                cmd = new MySqlCommand("SELECT sno, paidamount, clo_balance FROM agent_bal_trans WHERE sno=@sno");
                                cmd.Parameters.AddWithValue("@sno", sno);
                                DataTable dtmaxagentbal = vdbmngr.SelectQuery(cmd).Tables[0];

                                double prevpaidamount = 0;
                                double.TryParse(dtmaxagentbal.Rows[0]["paidamount"].ToString(), out prevpaidamount);

                                double clobalance = 0;
                                double.TryParse(dtmaxagentbal.Rows[0]["clo_balance"].ToString(), out clobalance);

                                double diff = prevpaidamount - PaidAmount;
                                //if (diff == 0)
                                //{
                                cmd = new MySqlCommand("UPDATE agent_bal_trans set paidamount=paidamount+@Amount, clo_balance=clo_balance-@Amount  where agentid=@BranchId AND inddate between @d1 and @d2");
                                cmd.Parameters.AddWithValue("@d1", GetLowDate(pdate).AddDays(-1));
                                cmd.Parameters.AddWithValue("@d2", GetHighDate(pdate).AddDays(-1));
                                cmd.Parameters.AddWithValue("@Amount", PaidAmount);
                                cmd.Parameters.AddWithValue("@BranchId", BranchID);
                                if (vdbmngr.Update(cmd) == 0)
                                {
                                    cmd = new MySqlCommand("Insert Into agent_bal_trans(agentid, opp_balance, inddate, paidamount, clo_balance, createdate, entryby) values (@BranchId,@opp_balance,@inddate, @paidamount, @clo_balance, @createdate, @entryby)");
                                    cmd.Parameters.AddWithValue("@BranchId", BranchID);
                                    cmd.Parameters.AddWithValue("@opp_balance", clobalance);
                                    cmd.Parameters.AddWithValue("@inddate", pdate.AddDays(-1));
                                    cmd.Parameters.AddWithValue("@paidamount", PaidAmount);
                                    cmd.Parameters.AddWithValue("@clo_balance", PaidAmount);
                                    cmd.Parameters.AddWithValue("@createdate", ServerDateCurrentdate);
                                    cmd.Parameters.AddWithValue("@entryby", "1");
                                    vdbmngr.insert(cmd);
                                }
                                cmd = new MySqlCommand("SELECT sno, agentid, opp_balance, inddate, salesvalue, clo_balance, paidamount FROM agent_bal_trans WHERE agentid=@agentid AND inddate between @d1 and @d2");
                                cmd.Parameters.AddWithValue("@agentid", BranchID);
                                cmd.Parameters.AddWithValue("@d1", GetLowDate(pdate));
                                cmd.Parameters.AddWithValue("@d2", GetHighDate(ServerDateCurrentdate));
                                DataTable dtIndentbal = vdbmngr.SelectQuery(cmd).Tables[0];
                                if (dtIndentbal.Rows.Count > 0)
                                {
                                    foreach (DataRow dr in dtIndentbal.Rows)
                                    {
                                        string csno = dr["sno"].ToString();
                                        double existoppbal = 0;
                                        double opp_balance = 0;
                                        double.TryParse(dr["opp_balance"].ToString(), out opp_balance);
                                        existoppbal = opp_balance - PaidAmount;

                                        double existclovalue = 0;
                                        double clo_balance = 0;
                                        double.TryParse(dr["clo_balance"].ToString(), out clo_balance);
                                        existclovalue = clo_balance - PaidAmount;

                                        cmd = new MySqlCommand("UPDATE agent_bal_trans SET opp_balance=@oppbal, clo_balance=@closing where sno=@refno");
                                        cmd.Parameters.AddWithValue("@oppbal", existoppbal);
                                        cmd.Parameters.AddWithValue("@refno", csno);
                                        cmd.Parameters.AddWithValue("@closing", existclovalue);
                                        vdbmngr.Update(cmd);
                                    }
                                }

                            }////end added by akbar 
                            else
                            {

                                cmd = new MySqlCommand("SELECT sno, agentid, opp_balance, inddate, salesvalue, clo_balance, paidamount,createdate,entryby FROM agent_bal_trans WHERE agentid=@agentid AND inddate between @d1 and @d2 order by inddate");
                                cmd.Parameters.AddWithValue("@agentid", BranchID);
                                cmd.Parameters.AddWithValue("@d1", GetLowDate(pdate));
                                cmd.Parameters.AddWithValue("@d2", GetHighDate(ServerDateCurrentdate));
                                DataTable dtgetdata = vdbmngr.SelectQuery(cmd).Tables[0];

                                cmd = new MySqlCommand("delete  FROM agent_bal_trans WHERE agentid=@agentid AND inddate between @d1 and @d2");
                                cmd.Parameters.AddWithValue("@agentid", BranchID);
                                cmd.Parameters.AddWithValue("@d1", GetLowDate(pdate).AddDays(-1));
                                cmd.Parameters.AddWithValue("@d2", GetHighDate(ServerDateCurrentdate));
                                vdbmngr.Delete(cmd);

                                cmd = new MySqlCommand("SELECT MAX(sno) as sno FROM agent_bal_trans WHERE agentid=@Branchid AND (inddate < @d1)");
                                cmd.Parameters.AddWithValue("@Branchid", BranchID);
                                cmd.Parameters.AddWithValue("@d1", GetLowDate(pdate).AddDays(-1));
                                DataTable dtgetprecloamt = vdbmngr.SelectQuery(cmd).Tables[0]; // get previous last most  record from selected date 
                                double closingbalance = 0;
                                if (dtgetprecloamt.Rows.Count > 0)
                                {
                                    string sno = dtgetprecloamt.Rows[0]["sno"].ToString();
                                    cmd = new MySqlCommand("SELECT agentid, opp_balance, inddate, salesvalue, clo_balance FROM agent_bal_trans WHERE sno=@sno");
                                    cmd.Parameters.AddWithValue("@sno", dtgetprecloamt.Rows[0]["sno"].ToString());
                                    DataTable dtagent_value = vdbmngr.SelectQuery(cmd).Tables[0];
                                    if (dtagent_value.Rows.Count > 0)
                                    {
                                        double.TryParse(dtagent_value.Rows[0]["clo_balance"].ToString(), out closingbalance);
                                    }
                                }
                                double clsvalue = Convert.ToDouble(closingbalance);
                                double closingvalue = clsvalue - PaidAmount;

                                DataRow newRow = dtgetdata.NewRow();
                                newRow["agentid"] = BranchID;
                                newRow["opp_balance"] = clsvalue;
                                newRow["inddate"] = pdate.AddDays(-1);
                                newRow["salesvalue"] = "0";
                                newRow["paidamount"] = PaidAmount;
                                newRow["clo_balance"] = closingvalue;
                                newRow["createdate"] = ServerDateCurrentdate;
                                newRow["entryby"] = context.Session["UserSno"].ToString();
                                dtgetdata.Rows.InsertAt(newRow, 0);

                                int i = 0; int j = 0;
                                foreach (DataRow drr in dtgetdata.Rows)
                                {
                                    //string csno = dr["sno"].ToString();
                                    double existoppbal = 0;
                                    double existclovalue = 0;
                                    double opp_balance = 0;
                                    double clo_balance = 0;

                                    if (i != j)
                                    {
                                        double.TryParse(drr["opp_balance"].ToString(), out opp_balance);
                                        existoppbal = opp_balance - PaidAmount;

                                        double.TryParse(drr["clo_balance"].ToString(), out clo_balance);
                                        existclovalue = clo_balance - PaidAmount;
                                    }
                                    else
                                    {
                                        double.TryParse(drr["opp_balance"].ToString(), out opp_balance);
                                        existoppbal = opp_balance;

                                        double.TryParse(drr["clo_balance"].ToString(), out clo_balance);
                                        existclovalue = clo_balance;
                                    }

                                    i++;
                                    DateTime inddate = Convert.ToDateTime(drr["inddate"].ToString());
                                    cmd = new MySqlCommand("Insert Into agent_bal_trans(agentid, opp_balance, inddate, salesvalue,paidamount,clo_balance, createdate, entryby) values (@agentid, @opp_balance, @inddate, @salesvalue,@paidamount,@clo_balance, @createdate, @entryby)");
                                    cmd.Parameters.AddWithValue("@agentid", drr["agentid"].ToString());
                                    cmd.Parameters.AddWithValue("@opp_balance", existoppbal);
                                    cmd.Parameters.AddWithValue("@inddate", inddate);
                                    cmd.Parameters.AddWithValue("@salesvalue", drr["salesvalue"].ToString());
                                    cmd.Parameters.AddWithValue("@paidamount", drr["paidamount"].ToString());
                                    cmd.Parameters.AddWithValue("@clo_balance", existclovalue);
                                    cmd.Parameters.AddWithValue("@createdate", ServerDateCurrentdate);
                                    cmd.Parameters.AddWithValue("@entryby", context.Session["UserSno"].ToString());
                                    vdbmngr.insert(cmd);
                                }
                            }
                        }
                    }
                }
                #endregion
                string msg = "Cash Collection Saved Successfully";
                string response = GetJson(msg);
                context.Response.Write(response);
                //}
            }
        }
        catch (Exception ex)
        {
            string msg = ex.Message;
            string response = GetJson(msg);
            context.Response.Write(response);
        }
        #endregion
    }
    private object GetLowDate(string fromdate)
    {
        throw new NotImplementedException();
    }
    private void GetAgentClosingAmount(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            List<tripcollection> collectionList = new List<tripcollection>();
            string RouteID = context.Request["RouteID"];
            string CustomerSno = context.Request["CustomerSno"];
            string temp = context.Request["temp"];
            string ddlType = context.Request["ddlType"];
            DateTime CurDate = VehicleDBMgr.GetTime(vdbmngr.conn);
            if (temp == "PlantManage")
            {
                cmd = new MySqlCommand("SELECT branchaccounts.BranchId, branchaccounts.Amount, branchaccounts.FineAmount, branchaccounts.Dtripid, branchaccounts.Ctripid, branchaccounts.SaleValue, branchaccounts.cdate, branchdata.BranchName FROM branchaccounts INNER JOIN branchdata ON branchaccounts.BranchId = branchdata.sno WHERE (branchaccounts.BranchId = @branchid)");
                cmd.Parameters.AddWithValue("@branchid", CustomerSno);
            }
            else
            {
                if (ddlType == "0")
                {
                    cmd = new MySqlCommand("SELECT dispatch.sno, dispatch.DispName, branchroutesubtable.BranchID, branchaccounts.Amount, branchdata.BranchName, branchdata.sno AS agentid FROM dispatch INNER JOIN dispatch_sub ON dispatch.sno = dispatch_sub.dispatch_sno INNER JOIN branchroutesubtable ON dispatch_sub.Route_id = branchroutesubtable.RefNo INNER JOIN branchaccounts ON branchroutesubtable.BranchID = branchaccounts.BranchId INNER JOIN branchdata ON branchroutesubtable.BranchID = branchdata.sno WHERE (dispatch.sno = @routeid)");
                    cmd.Parameters.AddWithValue("@routeid", RouteID);
                }
                else
                {
                    cmd = new MySqlCommand("SELECT dispatch.sno,  dispatch.DispName,  branchroutesubtable.BranchID,  branchdata.BranchName,  branchdata.sno AS agentid,  inventory_monitor.Qty as Amount FROM dispatch  INNER JOIN dispatch_sub    ON dispatch.sno = dispatch_sub.dispatch_sno  INNER JOIN branchroutesubtable    ON dispatch_sub.Route_id = branchroutesubtable.RefNo  INNER JOIN branchdata    ON branchroutesubtable.BranchID = branchdata.sno  INNER JOIN inventory_monitor    ON branchroutesubtable.BranchID = inventory_monitor.BranchId WHERE dispatch.sno = @routeid AND inventory_monitor.Inv_Sno = @Invsno");
                    cmd.Parameters.AddWithValue("@routeid", RouteID);
                    cmd.Parameters.AddWithValue("@Invsno", ddlType);
                }
            }
            DataTable dt_agentbal = vdbmngr.SelectQuery(cmd).Tables[0];
            foreach (DataRow dr in dt_agentbal.Rows)
            {
                tripcollection Getcollection = new tripcollection();
                Getcollection.Branchid = dr["BranchID"].ToString();
                Getcollection.Branchname = dr["BranchName"].ToString();
                double amount = 0;
                double.TryParse(dr["Amount"].ToString(), out amount);
                Getcollection.PaidAmount = amount.ToString();
                collectionList.Add(Getcollection);
            }
            string response = GetJson(collectionList);
            context.Response.Write(response);
        }
        catch

        {

        }
    }
    private void GetAgent_Transaction(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            DataTable Report = new DataTable();
            List<tripcollection> collectionList = new List<tripcollection>();
            string CustomerSno = context.Request["CustomerSno"];
            DateTime CurDate = VehicleDBMgr.GetTime(vdbmngr.conn);
            DateTime fromdate = GetLowDate(CurDate.AddDays(-30));
            cmd = new MySqlCommand("SELECT ROUND(SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost),2) AS Totalsalevalue,ROUND(SUM(indents_subtable.DeliveryQty),2) AS DeliveryQty,products_category.Categoryname, productsdata.ProductName, DATE_FORMAT(indents.I_date, '%d %b %y') AS IndentDate FROM productsdata INNER JOIN indents_subtable ON productsdata.sno = indents_subtable.Product_sno INNER JOIN indents ON indents_subtable.IndentNo = indents.IndentNo INNER JOIN branchdata ON indents.Branch_id = branchdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno WHERE (indents.I_date BETWEEN @d1 AND @d2) AND (branchdata.sno = @BranchID) and (indents_subtable.DeliveryQty<>'0') GROUP BY productsdata.sno, IndentDate ORDER BY products_category.sno,indents.I_date");
            cmd.Parameters.AddWithValue("@BranchID", CustomerSno);
            cmd.Parameters.AddWithValue("@d1", GetLowDate(fromdate.AddDays(-30)));
            cmd.Parameters.AddWithValue("@d2", GetHighDate(CurDate.AddDays(-1)));
            DataTable dtAgent = vdbmngr.SelectQuery(cmd).Tables[0];
            if (dtAgent.Rows.Count <= 0)
            {
                cmd = new MySqlCommand("SELECT ROUND(SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost), 2) AS Totalsalevalue, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty, MAX(indents.I_date) AS indentdate FROM productsdata INNER JOIN indents_subtable ON productsdata.sno = indents_subtable.Product_sno INNER JOIN indents ON indents_subtable.IndentNo = indents.IndentNo INNER JOIN branchdata ON indents.Branch_id = branchdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno WHERE (branchdata.sno = @BranchID) AND (indents_subtable.DeliveryQty > 0)");
                cmd.Parameters.AddWithValue("@BranchID", CustomerSno);
                DataTable dtAgent_lastDelivery = vdbmngr.SelectQuery(cmd).Tables[0];
                if (dtAgent_lastDelivery.Rows.Count > 0)
                {
                    string dtlastdel = dtAgent_lastDelivery.Rows[0]["indentdate"].ToString();
                    if (dtlastdel != "")
                    {
                        fromdate = Convert.ToDateTime(dtlastdel).AddDays(1);
                    }
                    cmd = new MySqlCommand("SELECT ROUND(SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost),2) AS Totalsalevalue,ROUND(SUM(indents_subtable.DeliveryQty),2) AS DeliveryQty,products_category.Categoryname, productsdata.ProductName, DATE_FORMAT(indents.I_date, '%d %b %y') AS IndentDate FROM productsdata INNER JOIN indents_subtable ON productsdata.sno = indents_subtable.Product_sno INNER JOIN indents ON indents_subtable.IndentNo = indents.IndentNo INNER JOIN branchdata ON indents.Branch_id = branchdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno WHERE (indents.I_date BETWEEN @d1 AND @d2) AND (branchdata.sno = @BranchID) and (indents_subtable.DeliveryQty<>'0') GROUP BY productsdata.sno, IndentDate ORDER BY products_category.sno,indents.I_date");
                    cmd.Parameters.AddWithValue("@BranchID", CustomerSno);
                    cmd.Parameters.AddWithValue("@d1", GetLowDate(fromdate.AddDays(-1)));
                    cmd.Parameters.AddWithValue("@d2", GetHighDate(CurDate.AddDays(-1)));
                    dtAgent = vdbmngr.SelectQuery(cmd).Tables[0];
                }
            }
            cmd = new MySqlCommand("SELECT Sum(AmountPaid) as AmountPaid , Remarks,  PayTime, EmpID, ReceiptNo, VarifyDate, TransactionType, AmountDebited, DiffAmount, SalesOfficeID, Status FROM collections WHERE (Branchid = @BranchID) AND (TransactionType = @type) AND (Status = @status) AND (PaidDate BETWEEN @d1 AND @d2)");
            cmd.Parameters.AddWithValue("@BranchID", CustomerSno);
            cmd.Parameters.AddWithValue("@d1", GetLowDate(fromdate));
            cmd.Parameters.AddWithValue("@d2", GetHighDate(CurDate));
            cmd.Parameters.AddWithValue("@type", "Debit");
            cmd.Parameters.AddWithValue("@status", "1");
            DataTable dtdebitamount = vdbmngr.SelectQuery(cmd).Tables[0];
            double debitprice = 0;
            foreach (DataRow dr in dtdebitamount.Rows)
            {
                double amountDebited = 0;
                double.TryParse(dr["AmountDebited"].ToString(), out amountDebited);
                debitprice += amountDebited;
            }
            cmd = new MySqlCommand("SELECT Branchid, AmountPaid, Remarks, DATE_FORMAT(PaidDate, '%d/%b/%y') AS PDate, PayTime, EmpID, ReceiptNo, VarifyDate, TransactionType, AmountDebited, DiffAmount, SalesOfficeID, Status FROM collections WHERE (Branchid = @BranchID) AND (TransactionType = @type) AND (Status = @status) AND (PaidDate BETWEEN @d1 AND @d2)");
            cmd.Parameters.AddWithValue("@BranchID", CustomerSno);
            cmd.Parameters.AddWithValue("@d1", GetLowDate(fromdate));
            cmd.Parameters.AddWithValue("@d2", GetHighDate(CurDate));
            cmd.Parameters.AddWithValue("@type", "Debit");
            cmd.Parameters.AddWithValue("@status", "1");
            DataTable dtAgent_Debits = vdbmngr.SelectQuery(cmd).Tables[0];
            cmd = new MySqlCommand("SELECT Amount FROM branchaccounts WHERE (BranchId = @BranchID)");
            cmd.Parameters.AddWithValue("@BranchID", CustomerSno);
            DataTable dtAgent_presentopp = vdbmngr.SelectQuery(cmd).Tables[0];
            double agentpresentopp = 0;
            double.TryParse(dtAgent_presentopp.Rows[0]["Amount"].ToString(), out agentpresentopp);
            agentpresentopp = agentpresentopp - debitprice;
            cmd = new MySqlCommand("SELECT SUM(AmountPaid) AS AmountPaid, DATE_FORMAT(PaidDate, '%d/%b/%y') AS PDate, CheckStatus,PaymentType FROM collections WHERE (Branchid = @BranchID) AND (PaidDate BETWEEN @d1 AND @d2) AND (CheckStatus IS NULL)  GROUP BY PDate");
            cmd.Parameters.AddWithValue("@BranchID", CustomerSno);
            cmd.Parameters.AddWithValue("@d1", GetLowDate(fromdate));
            cmd.Parameters.AddWithValue("@d2", GetHighDate(CurDate));
            DataTable dtAgentDayWiseCollection = vdbmngr.SelectQuery(cmd).Tables[0];
            cmd = new MySqlCommand("SELECT SUM(AmountPaid) AS AmountPaid, DATE_FORMAT(PaidDate, '%d/%b/%y') AS PDate FROM collections WHERE (Branchid = @BranchID) AND (PaidDate BETWEEN @d1 AND @d2) and (tripId is NULL) AND ((PaymentType = 'Incentive') OR (PaymentType = 'Journal Voucher')) GROUP BY PDate");
            cmd.Parameters.AddWithValue("@BranchID", CurDate);
            cmd.Parameters.AddWithValue("@d1", GetLowDate(fromdate));
            cmd.Parameters.AddWithValue("@d2", GetHighDate(CurDate));
            DataTable dtAgentIncentive = vdbmngr.SelectQuery(cmd).Tables[0];
            cmd = new MySqlCommand("SELECT SUM(AmountPaid) AS AmountPaid, DATE_FORMAT(VarifyDate, '%d/%b/%y') AS VarifyDate, CheckStatus FROM collections WHERE (Branchid = @BranchID) AND (CheckStatus = 'V') AND (VarifyDate BETWEEN @d1 AND @d2) GROUP BY VarifyDate");
            cmd.Parameters.AddWithValue("@BranchID", CustomerSno);
            cmd.Parameters.AddWithValue("@d1", GetLowDate(fromdate));
            cmd.Parameters.AddWithValue("@d2", GetHighDate(CurDate));
            DataTable dtAgentchequeCollection = vdbmngr.SelectQuery(cmd).Tables[0];
            if (dtAgent.Rows.Count > 0)
            {
                DataView view = new DataView(dtAgent);
                DataTable produtstbl = view.ToTable(true, "ProductName", "Categoryname");
                Report = new DataTable();
                Report.Columns.Add("SNo");
                Report.Columns.Add("DeliverDate");
                int count = 0;
                foreach (DataRow dr in produtstbl.Rows)
                {

                    Report.Columns.Add(dr["ProductName"].ToString()).DataType = typeof(Double);
                    count++;
                }
                Report.Columns.Add("Total", typeof(Double)).SetOrdinal(count + 2);
                Report.Columns.Add("Sale Value", typeof(Double)).SetOrdinal(count + 3);
                Report.Columns.Add("Amount Debited", typeof(Double)).SetOrdinal(count + 4);
                Report.Columns.Add("Opp Bal").SetOrdinal(count + 5);
                Report.Columns.Add("Total Amount").SetOrdinal(count + 6);
                Report.Columns.Add("Paid Amount", typeof(Double)).SetOrdinal(count + 7);
                Report.Columns.Add("Incentive/JV", typeof(Double)).SetOrdinal(count + 8);
                Report.Columns.Add("Bal Amount").SetOrdinal(count + 9);
                DataTable distincttable = view.ToTable(true, "IndentDate");
                int i = 1;
                double oppcarry = 0;
                TimeSpan dateSpan = CurDate.Subtract(fromdate);
                int NoOfdays = dateSpan.Days;
                NoOfdays = NoOfdays + 1;
                double totdebitedamount = 0;
                DateTime ServerDateCurrentdate = VehicleDBMgr.GetTime(vdbmngr.conn);
                cmd = new MySqlCommand("SELECT totalsaleamount.totalsale, totalsaleamount.Branch_id, SUM(collections.AmountPaid) AS amountpaid FROM (SELECT SUM(indentssub.DeliveryQty * indentssub.UnitCost) AS totalsale, indents.Branch_id FROM indents INNER JOIN (SELECT IndentNo, Product_sno, Qty, Cost, Remark, DeliveryQty, Status, D_date, unitQty, UnitCost, Sno, PaymentStatus, LeakQty, OTripId, DTripId,DelTime FROM indents_subtable WHERE (D_date BETWEEN @starttime AND @endtime)) indentssub ON indents.IndentNo = indentssub.IndentNo WHERE (indents.Branch_id = @BranchID) GROUP BY indents.Branch_id) totalsaleamount INNER JOIN (SELECT Branchid, UserData_sno, AmountPaid, Denominations, Remarks, Sno, PaidDate, PaymentType, tripId, CheckStatus, ReturnDenomin, PayTime, VEmpID, ChequeNo, EmpID, ReceiptNo FROM collections collections_1 WHERE (Branchid = @BranchID) AND (PaidDate BETWEEN @starttime AND @endtime) AND (CheckStatus IS NULL) OR (Branchid = @BranchID) AND (CheckStatus = 'V') AND (VarifyDate BETWEEN @starttime AND @endtime)) collections ON totalsaleamount.Branch_id = collections.Branchid");
                cmd.Parameters.AddWithValue("@BranchID", CustomerSno);
                cmd.Parameters.AddWithValue("@starttime", GetLowDate(fromdate));
                cmd.Parameters.AddWithValue("@endtime", GetHighDate(ServerDateCurrentdate));
                DataTable dtSaleCollection = vdbmngr.SelectQuery(cmd).Tables[0];
                double totsale = 0;
                double totamt = 0;
                for (int j = 0; j < NoOfdays; j++)
                {
                    DataRow newrow = Report.NewRow();
                    newrow["SNo"] = i;
                    string dtcount = fromdate.AddDays(j).ToString();
                    DateTime dtDOE = Convert.ToDateTime(dtcount);
                    string dtdate1 = dtDOE.AddDays(-1).ToString();
                    DateTime dtDOE1 = Convert.ToDateTime(dtdate1).AddDays(1);
                    string ChangedTime1 = dtDOE1.ToString("dd/MMM/yy");
                    string ChangedTime2 = dtDOE.AddDays(-1).ToString("dd MMM yy");
                    newrow["DeliverDate"] = ChangedTime1;
                    double amtpaid = 0;
                    double incentiveamtpaid = 0;
                    double totamtpaid = 0;
                    double totincentiveamtpaid = 0;
                    double totchequeamtpaid = 0;
                    double debitedamount = 0;
                    foreach (DataRow drdtclubtotal in dtAgentDayWiseCollection.Select("PDate='" + ChangedTime1 + "'"))
                    {
                        double.TryParse(drdtclubtotal["AmountPaid"].ToString(), out totamtpaid);
                        amtpaid += totamtpaid;
                    }
                    foreach (DataRow drdtincentive in dtAgentIncentive.Select("PDate='" + ChangedTime1 + "'"))
                    {
                        double.TryParse(drdtincentive["AmountPaid"].ToString(), out totincentiveamtpaid);

                        incentiveamtpaid += totincentiveamtpaid;
                    }
                    foreach (DataRow drdtchequeotal in dtAgentchequeCollection.Select("VarifyDate='" + ChangedTime1 + "'"))
                    {
                        double.TryParse(drdtchequeotal["AmountPaid"].ToString(), out totchequeamtpaid);

                        amtpaid += totchequeamtpaid;
                    }
                    if (dtSaleCollection.Rows.Count > 0)
                    {
                        double.TryParse(dtSaleCollection.Rows[0]["totalsale"].ToString(), out totsale);
                        double.TryParse(dtSaleCollection.Rows[0]["amountpaid"].ToString(), out totamt);
                    }
                    else
                    {
                        totsale = 0;
                        totamt = 0;
                    }
                    double total = 0;
                    double Amount = 0;
                    foreach (DataRow dr in dtAgent.Rows)
                    {
                        if (ChangedTime2 == dr["IndentDate"].ToString())
                        {
                            double qtyvalue = 0;
                            double DQty = 0;
                            double.TryParse(dr["DeliveryQty"].ToString(), out DQty);
                            newrow[dr["ProductName"].ToString()] = DQty;
                            double.TryParse(dr["Totalsalevalue"].ToString(), out qtyvalue);
                            Amount += qtyvalue;
                            total += DQty;
                        }
                    }
                    foreach (DataRow dr in dtAgent_Debits.Rows)
                    {
                        if (ChangedTime1 == dr["PDate"].ToString())
                        {
                            double amountDebited = 0;

                            double.TryParse(dr["AmountDebited"].ToString(), out amountDebited);
                            debitedamount += amountDebited;
                            totdebitedamount += amountDebited;
                        }
                    }
                    double aopp = agentpresentopp + totamt - totsale;
                    double actbal = 0;
                    actbal = aopp;
                    if (totdebitedamount == 0.0)
                    {
                        if (oppcarry == 0.0)
                        {
                            aopp = aopp;
                        }
                        else
                        {
                            aopp = oppcarry;
                        }
                    }
                    else
                    {
                        if (debitedamount != 0.0)
                        {
                            //aopp = aopp;
                            if (oppcarry == 0.0)
                            {
                                aopp = aopp;
                            }
                            else
                            {
                                aopp = oppcarry;
                            }
                        }
                        else
                        {
                            aopp = Math.Abs(aopp);
                            aopp = totdebitedamount - aopp;
                            aopp = oppcarry;
                        }
                    }
                    if (totsale == 0)
                    {
                        aopp = oppcarry;
                    }
                    newrow["Total"] = total;
                    newrow["Sale Value"] = Amount;
                    newrow["Opp Bal"] = Math.Round(aopp, 2);
                    double totalamt = aopp + Amount + debitedamount;
                    newrow["Total Amount"] = Math.Round(totalamt, 2);
                    newrow["Paid Amount"] = amtpaid - incentiveamtpaid;
                    newrow["Incentive/JV"] = incentiveamtpaid;
                    newrow["Amount Debited"] = debitedamount;
                    double totalbalance = totalamt - amtpaid;
                    newrow["Bal Amount"] = Math.Round(totalbalance, 2);
                    oppcarry = totalbalance;
                    if (Amount + amtpaid + debitedamount != 0)
                    {
                        Report.Rows.Add(newrow);
                        i++;
                    }
                    totsale = totsale - Amount;
                }

                DataRow newvartical = Report.NewRow();
                newvartical["DeliverDate"] = "Total";
                double val = 0.0;
                foreach (DataColumn dc in Report.Columns)
                {
                    if (dc.DataType == typeof(Double))
                    {
                        val = 0.0;
                        double.TryParse(Report.Compute("sum([" + dc.ToString() + "])", "[" + dc.ToString() + "]<>'0'").ToString(), out val);
                        newvartical[dc.ToString()] = val;
                    }
                }
                Report.Rows.Add(newvartical);
            }
            foreach (DataRow dr in Report.Rows)
            {
                tripcollection Getcollection = new tripcollection();
                Getcollection.DelivaryDate = dr["DeliverDate"].ToString();
                Getcollection.SaleValue = dr["Sale Value"].ToString();
                Getcollection.DebitAmount = dr["Amount Debited"].ToString();
                Getcollection.OpeningAmount = dr["Opp Bal"].ToString();
                Getcollection.TotalAmount = dr["Total Amount"].ToString();
                Getcollection.PaidAmount = dr["Paid Amount"].ToString();
                Getcollection.JvAmount = dr["Incentive/JV"].ToString();
                Getcollection.ClosingAmount = dr["Bal Amount"].ToString();
                collectionList.Add(Getcollection);
            }
            string response = GetJson(collectionList);
            context.Response.Write(response);
        }
        catch
        {

        }
    }
    private void GetHeadLimit(HttpContext context)
    {
        vdbmngr = new VehicleDBMgr();
        string HeadSno = context.Request["HeadSno"];
        cmd = new MySqlCommand("SELECT Sno, BranchId, HeadName, LimitAmount FROM accountheads WHERE (Sno = @Sno)");
        cmd.Parameters.AddWithValue("@Sno", HeadSno);
        DataTable dtHead = vdbmngr.SelectQuery(cmd).Tables[0];
        string HeadLimit = "0";
        if (dtHead.Rows.Count > 0)
        {
            HeadLimit = dtHead.Rows[0]["LimitAmount"].ToString();
        }
        string response = GetJson(HeadLimit);
        context.Response.Write(response);
    }
    private void GetAgentNames(HttpContext context)
    {
        vdbmngr = new VehicleDBMgr();
        List<SoClass> Solist = new List<SoClass>();
        cmd = new MySqlCommand("SELECT branchdata.sno, branchdata.BranchName FROM branchmappingtable INNER JOIN branchdata branchdata_1 ON branchmappingtable.SubBranch = branchdata_1.sno INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno WHERE (branchmappingtable.SuperBranch = @BranchID) OR (branchdata_1.SalesOfficeID = @SOID) AND (branchdata.flag = @flag) GROUP BY branchdata.BranchName");
        cmd.Parameters.AddWithValue("@BranchID", context.Session["branch"].ToString());
        cmd.Parameters.AddWithValue("@SOID", context.Session["branch"].ToString());
        cmd.Parameters.AddWithValue("@flag", "1");
        DataTable dtBranch = vdbmngr.SelectQuery(cmd).Tables[0];
        foreach (DataRow dr in dtBranch.Rows)
        {
            SoClass GetSoClass = new SoClass();
            GetSoClass.Sno = dr["sno"].ToString();
            GetSoClass.BranchName = dr["BranchName"].ToString();
            Solist.Add(GetSoClass);
        }
        string errresponse = GetJson(Solist);
        context.Response.Write(errresponse);
    }
    private void BtnGetCashBookClosing(HttpContext context)
    {
        context.Session["DenominationString"] = context.Request["DenominationString"];
        string msg = "success";
        string response = GetJson(msg);
        context.Response.Write(response);
    }
    private void BtnVarifyVoucherSaveClick(HttpContext context)
    {
        vdbmngr = new VehicleDBMgr();
        string VoucherID = context.Request["VoucherID"];
        string ReceivedAmount = context.Request["ReceivedAmount"];
        string Due = context.Request["Due"];
        cmd = new MySqlCommand("Update cashpayables set Status=@Status,ReceivedAmount=@ReceivedAmount,DueAmount=@DueAmount where BranchID=@BranchID and VocherID=@VocherID");
        cmd.Parameters.AddWithValue("@Status", "V");
        cmd.Parameters.AddWithValue("@VocherID", VoucherID);
        double RAmount = 0;
        double.TryParse(ReceivedAmount, out RAmount);
        cmd.Parameters.AddWithValue("@ReceivedAmount", ReceivedAmount);
        double RDue = 0;
        double.TryParse(Due, out RDue);
        cmd.Parameters.AddWithValue("@DueAmount", RDue);
        cmd.Parameters.AddWithValue("@BranchID", context.Session["branch"].ToString());
        vdbmngr.Update(cmd);
        string msg = "Voucher Varified successfully";
        string response = GetJson(msg);
        context.Response.Write(response);
    }
    private void GetSalesOffices(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            string SalesType = context.Session["salestype"].ToString();
            string LevelType = context.Session["LevelType"].ToString();
            string GroupLogin = context.Session["GroupLogin"].ToString();
            string SelecteType = "";
            SelecteType = context.Request["SelecteType"].ToString();
            List<SoClass> Solist = new List<SoClass>();
            DataTable Report = new DataTable();
            if (GroupLogin == "1")
            {
                if (SelecteType == "Vyshnavi Group")
                {
                    Report.Columns.Add("Sno");
                    Report.Columns.Add("BranchName");
                    DataRow newrow = Report.NewRow();
                    newrow["BranchName"] = "GroupWise";
                    newrow["sno"] = "8009";
                    Report.Rows.Add(newrow);
                    DataRow newrow1 = Report.NewRow();
                    newrow1["BranchName"] = "SVDS";
                    newrow1["sno"] = "8012";
                    Report.Rows.Add(newrow1);
                    DataRow newrow2 = Report.NewRow();
                    newrow2["BranchName"] = "SVF";
                    newrow2["sno"] = "8013";
                    Report.Rows.Add(newrow2);
                    foreach (DataRow dr in Report.Rows)
                    {
                        SoClass GetSoClass = new SoClass();
                        GetSoClass.Sno = dr["sno"].ToString();
                        GetSoClass.BranchName = dr["BranchName"].ToString();
                        Solist.Add(GetSoClass);
                    }
                }
                else if (SelecteType == "SVDS")
                {
                    cmd = new MySqlCommand("SELECT  branchdata.BranchName, branchdata.sno FROM  branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno WHERE (branchmappingtable.SuperBranch = @Branchid)");
                    cmd.Parameters.AddWithValue("@Branchid", "8012");
                    DataTable dtBranch = vdbmngr.SelectQuery(cmd).Tables[0];
                    foreach (DataRow dr in dtBranch.Rows)
                    {
                        SoClass GetSoClass = new SoClass();
                        GetSoClass.Sno = dr["sno"].ToString();
                        GetSoClass.BranchName = dr["BranchName"].ToString();
                        Solist.Add(GetSoClass);
                    }
                }
                else if (SelecteType == "SVF")
                {

                    cmd = new MySqlCommand("SELECT  branchdata.BranchName, branchdata.sno FROM  branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno WHERE (branchmappingtable.SuperBranch = @Branchid)");
                    cmd.Parameters.AddWithValue("@Branchid", "8013");
                    DataTable dtBranch = vdbmngr.SelectQuery(cmd).Tables[0];
                    foreach (DataRow dr in dtBranch.Rows)
                    {
                        SoClass GetSoClass = new SoClass();
                        GetSoClass.Sno = dr["sno"].ToString();
                        GetSoClass.BranchName = dr["BranchName"].ToString();
                        Solist.Add(GetSoClass);
                    }
                }
            }
            else if (LevelType == "Admin" || LevelType == "MAdmin")
            {
                cmd = new MySqlCommand("SELECT sno, BranchName, SalesType FROM branchdata WHERE sno=@branchid and flag=@flag");
                cmd.Parameters.AddWithValue("@branchid", context.Session["branch"].ToString());
                cmd.Parameters.AddWithValue("@flag", "1");
                DataTable dtBranch = vdbmngr.SelectQuery(cmd).Tables[0];
                foreach (DataRow dr in dtBranch.Rows)
                {
                    SoClass GetSoClass = new SoClass();
                    GetSoClass.Sno = dr["sno"].ToString();
                    GetSoClass.BranchName = dr["BranchName"].ToString();
                    Solist.Add(GetSoClass);
                }
            }
            string errresponse = GetJson(Solist);
            context.Response.Write(errresponse);
        }
        catch
        {
        }
    }
    public class CNode
    {
        public string id { set; get; }
        public string name { set; get; }
        public List<CNode> children = new List<CNode>();
    }
    private void GetHeadNames(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            List<HeadClass> HeadClasslist = new List<HeadClass>();
            string BranchID = "0";
            string LevelType = context.Session["LevelType"].ToString();
            if (LevelType == "AccountsOfficer" || LevelType == "Director")
            {
                BranchID = context.Request["BranchID"];
            }
            else
            {
                BranchID = context.Session["branch"].ToString();
            }
            cmd = new MySqlCommand("Select Sno,HeadName,LimitAmount,AccountType,AgentID,EmpID from accountheads Where (BranchID=@BranchID) and (flag=@flag)  order by HeadName");
            cmd.Parameters.AddWithValue("@BranchID", BranchID);
            cmd.Parameters.AddWithValue("@flag", "1");
            DataTable dtVehicle = vdbmngr.SelectQuery(cmd).Tables[0];
            foreach (DataRow dr in dtVehicle.Rows)
            {
                HeadClass getVehicles = new HeadClass();
                getVehicles.Sno = dr["Sno"].ToString();
                getVehicles.HeadName = dr["HeadName"].ToString();
                getVehicles.Limit = dr["LimitAmount"].ToString();
                HeadClasslist.Add(getVehicles);
            }
            string response = GetJson(HeadClasslist);
            context.Response.Write(response);
        }
        catch
        {
        }
    }
    private void GetHeadOfAccpunts(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            string branchid = context.Request["BranchID"];
            string LevelType = context.Session["LevelType"].ToString();
            if (LevelType == "AccountsOfficer" || LevelType == "Director")
            {
                if (branchid == "")
                {
                    cmd = new MySqlCommand("SELECT Sno, HeadName, LimitAmount, AccountType, AgentID, EmpID,accountcode,flag FROM accountheads WHERE (BranchId IS NULL) ORDER BY HeadName");
                }
                else
                {
                    cmd = new MySqlCommand("Select Sno,HeadName,LimitAmount,AccountType,AgentID,EmpID,accountcode,flag from accountheads Where BranchID=@BranchID order by HeadName");
                    cmd.Parameters.AddWithValue("@BranchID", branchid);
                }
            }
            else
            {
                cmd = new MySqlCommand("Select Sno,HeadName,LimitAmount,AccountType,AgentID,EmpID,accountcode,flag from accountheads Where BranchID=@BranchID order by HeadName");
                cmd.Parameters.AddWithValue("@BranchID", branchid);
            }
            DataTable dtVehicle = vdbmngr.SelectQuery(cmd).Tables[0];
            List<HeadClass> HeadClasslist = new List<HeadClass>();
            foreach (DataRow dr in dtVehicle.Rows)
            {
                HeadClass getVehicles = new HeadClass();
                getVehicles.Sno = dr["Sno"].ToString();
                getVehicles.HeadName = dr["HeadName"].ToString();
                getVehicles.Limit = dr["LimitAmount"].ToString();
                getVehicles.flag = dr["flag"].ToString();
                getVehicles.accountcode = dr["accountcode"].ToString();
                string AccountType = dr["AccountType"].ToString();
                getVehicles.AccountType = AccountType;
                if (AccountType == "Agent")
                {
                    getVehicles.Code = dr["AgentID"].ToString();
                }
                if (AccountType == "Employee")
                {
                    getVehicles.Code = dr["EmpID"].ToString();
                }
                if (AccountType == "Others")
                {
                    getVehicles.Code = "0";
                }
                HeadClasslist.Add(getVehicles);
            }
            string response = GetJson(HeadClasslist);
            context.Response.Write(response);
        }
        catch
        {
        }
    }
    class HeadClass
    {
        public string Sno { get; set; }
        public string HeadName { get; set; }
        public string Limit { get; set; }
        public string AccountType { get; set; }
        public string accountcode { get; set; }
        public string Code { get; set; }
        public string flag { get; set; }
    }
    class ExpencesClass
    {
        public string Sno { get; set; }
        public string ExpencesName { get; set; }
        public string ExpencesType { get; set; }
        public string ExpencesFor { get; set; }
        //public string routeid { get; set; }
        public string ExpencesPeriod { get; set; }
    }
    private void SaveHeadMasterClick(HttpContext context)
    {

        try
        {
            vdbmngr = new VehicleDBMgr();
            string HeadAccount = context.Request["Decription"];
            string serial = context.Request["serial"];
            string AccountType = context.Request["AccountType"];
            string btnSave = context.Request["btnSave"];
            string Limit = context.Request["Limit"];
            string EMPID = context.Request["EMPID"];
            string BranchID = context.Request["BranchID"];
            string Ledgercode = context.Request["Ledgercode"];
            string flag = context.Request["flag"];
            double LimitAmount = 0;
            double.TryParse(Limit, out LimitAmount);
            if (btnSave == "MODIFY")
            {
                if (AccountType == "Employee")
                {
                    cmd = new MySqlCommand("Update accountheads set flag=@flag, HeadName=@HeadName,LimitAmount=@LimitAmount,AccountType=@AccountType,EmpID=@EmpID,accountcode=@accountcode where  Sno=@Sno");
                    cmd.Parameters.AddWithValue("@AccountType", AccountType);
                    cmd.Parameters.AddWithValue("@EmpID", EMPID);
                }
                if (AccountType == "Agent")
                {
                    cmd = new MySqlCommand("Update accountheads set flag=@flag, HeadName=@HeadName,LimitAmount=@LimitAmount,AccountType=@AccountType,AgentID=@AgentID,accountcode=@accountcode where  Sno=@Sno");
                    cmd.Parameters.AddWithValue("@AccountType", AccountType);
                    cmd.Parameters.AddWithValue("@AgentID", EMPID);
                }
                if (AccountType == "Others")
                {
                    cmd = new MySqlCommand("Update accountheads set flag=@flag,  HeadName=@HeadName,LimitAmount=@LimitAmount,AccountType=@AccountType,accountcode=@accountcode where Sno=@Sno");
                    cmd.Parameters.AddWithValue("@AccountType", AccountType);
                }
                cmd.Parameters.AddWithValue("@HeadName", HeadAccount);
                cmd.Parameters.AddWithValue("@LimitAmount", LimitAmount);
                cmd.Parameters.AddWithValue("@accountcode", Ledgercode);
                cmd.Parameters.AddWithValue("@flag", flag);
                cmd.Parameters.AddWithValue("@Sno", serial);
                vdbmngr.Update(cmd);
                string Msg = "Account Name Updated Successfully";
                string response = GetJson(Msg);
                context.Response.Write(response);
            }
            else
            {
                if (BranchID == "")
                {
                    string LevelType = context.Session["LevelType"].ToString();
                    if (LevelType == "AccountsOfficer" || LevelType == "Director")
                    {
                        AccountType = "Others";
                        cmd = new MySqlCommand("Insert Into accountheads (HeadName,LimitAmount,AccountType,accountcode,flag) values(@HeadName,@LimitAmount,@AccountType,@accountcode,@flag)");
                        cmd.Parameters.AddWithValue("@AccountType", AccountType);
                        cmd.Parameters.AddWithValue("@HeadName", HeadAccount);
                        cmd.Parameters.AddWithValue("@LimitAmount", LimitAmount);
                        cmd.Parameters.AddWithValue("@accountcode", Ledgercode);
                        cmd.Parameters.AddWithValue("@flag", flag);
                        vdbmngr.insert(cmd);
                        string Msg = "Account Name saved Successfully";
                        string response = GetJson(Msg);
                        context.Response.Write(response);
                    }
                    else
                    {
                        string Msg = "Please Select SalesOffice";
                        string response = GetJson(Msg);
                        context.Response.Write(response);
                    }
                }
                else
                {
                    if (AccountType == "Employee")
                    {
                        cmd = new MySqlCommand("Insert Into accountheads (HeadName,BranchID,LimitAmount,AccountType,EmpID,accountcode,flag) values(@HeadName,@BranchID,@LimitAmount,@AccountType,@EmpID,@accountcode,@flag)");
                        cmd.Parameters.AddWithValue("@AccountType", AccountType);
                        cmd.Parameters.AddWithValue("@EmpID", EMPID);
                        cmd.Parameters.AddWithValue("@accountcode", Ledgercode);
                    }
                    if (AccountType == "Agent")
                    {
                        cmd = new MySqlCommand("Insert Into accountheads (HeadName,BranchID,LimitAmount,AccountType,AgentID,accountcode,flag) values(@HeadName,@BranchID,@LimitAmount,@AccountType,@AgentID,@accountcode,@flag)");
                        cmd.Parameters.AddWithValue("@AccountType", AccountType);
                        cmd.Parameters.AddWithValue("@AgentID", EMPID);
                        cmd.Parameters.AddWithValue("@accountcode", Ledgercode);
                    }
                    if (AccountType == "Others")
                    {
                        cmd = new MySqlCommand("Insert Into accountheads (HeadName,BranchID,LimitAmount,AccountType,accountcode,flag) values(@HeadName,@BranchID,@LimitAmount,@AccountType,@accountcode,@flag)");
                        cmd.Parameters.AddWithValue("@AccountType", AccountType);
                        cmd.Parameters.AddWithValue("@accountcode", Ledgercode);
                    }
                    cmd.Parameters.AddWithValue("@flag", flag);
                    cmd.Parameters.AddWithValue("@HeadName", HeadAccount);
                    cmd.Parameters.AddWithValue("@LimitAmount", LimitAmount);
                    cmd.Parameters.AddWithValue("@BranchID", BranchID);
                    vdbmngr.insert(cmd);
                    string Msg = "Account Name saved Successfully";
                    string response = GetJson(Msg);
                    context.Response.Write(response);
                }
            }
        }
        catch (Exception ex)
        {
            string Msg = ex.Message;
            string response = GetJson(Msg);
            context.Response.Write(response);
        }
    }
    private void GetAppriveSubPaybleValues(HttpContext context)
    {

        try
        {
            vdbmngr = new VehicleDBMgr();
            string VoucherID = context.Request["VoucherID"];
            context.Session["VoucherID"] = VoucherID;
            List<Subpayables> SubpayableList = new List<Subpayables>();
            string BranchID = "0";
            string LevelType = context.Session["LevelType"].ToString();
            if (LevelType == "AccountsOfficer" || LevelType == "Director")
            {
                BranchID = context.Request["BranchID"];
            }
            else
            {
                BranchID = context.Session["branch"].ToString();
            }
            cmd = new MySqlCommand("SELECT Sno FROM cashpayables WHERE (Sno = @VocherID) AND (BranchID = @BranchID)");
            cmd.Parameters.AddWithValue("@VocherID", VoucherID);
            cmd.Parameters.AddWithValue("@BranchID", BranchID);
            DataTable dtCash = vdbmngr.SelectQuery(cmd).Tables[0];
            string RefNo = dtCash.Rows[0]["Sno"].ToString();
            cmd = new MySqlCommand("SELECT accountheads.HeadName, subpayable.Amount, accountheads.Sno FROM subpayable INNER JOIN accountheads ON subpayable.HeadSno = accountheads.Sno WHERE  (subpayable.RefNo = @RefNo)");
            cmd.Parameters.AddWithValue("@RefNo", RefNo);
            DataTable dtCashSubPayable = vdbmngr.SelectQuery(cmd).Tables[0];
            foreach (DataRow dr in dtCashSubPayable.Rows)
            {
                Subpayables GetSubpayable = new Subpayables();
                GetSubpayable.HeadSno = dr["Sno"].ToString();
                GetSubpayable.HeadOfAccount = dr["HeadName"].ToString();
                GetSubpayable.Amount = dr["Amount"].ToString();
                SubpayableList.Add(GetSubpayable);
            }
            string response = GetJson(SubpayableList);
            context.Response.Write(response);
        }
        catch
        {
        }
    }
    class VoucherPrintdetails
    {
        public string voucherid { get; set; }
        public string approveemp { get; set; }
        public string date { get; set; }
        public string nameof { get; set; }
        public string Remarks { get; set; }
        public string vouchertype { get; set; }
        public string amount { get; set; }
        public string branchid { get; set; }
        public string VoucherID { get; set; }
        public string Title { get; set; }
        public string lblReceived { get; set; }

    }
    public static string NumToWordBD(Int64 Num)
    {
        string[] Below20 = { "", "One ", "Two ", "Three ", "Four ",
      "Five ", "Six " , "Seven ", "Eight ", "Nine ", "Ten ", "Eleven ",
    "Twelve " , "Thirteen ", "Fourteen ","Fifteen ",
      "Sixteen " , "Seventeen ","Eighteen " , "Nineteen " };
        string[] Below100 = { "", "", "Twenty ", "Thirty ",
      "Forty ", "Fifty ", "Sixty ", "Seventy ", "Eighty ", "Ninety " };
        string InWords = "";
        if (Num >= 1 && Num < 20)
            InWords += Below20[Num];
        if (Num >= 20 && Num <= 99)
            InWords += Below100[Num / 10] + Below20[Num % 10];
        if (Num >= 100 && Num <= 999)
            InWords += NumToWordBD(Num / 100) + " Hundred " + NumToWordBD(Num % 100);
        if (Num >= 1000 && Num <= 99999)
            InWords += NumToWordBD(Num / 1000) + " Thousand " + NumToWordBD(Num % 1000);
        if (Num >= 100000 && Num <= 9999999)
            InWords += NumToWordBD(Num / 100000) + " Lakh " + NumToWordBD(Num % 100000);
        if (Num >= 10000000)
            InWords += NumToWordBD(Num / 10000000) + " Crore " + NumToWordBD(Num % 10000000);
        return InWords;
    }
    private void GetSubPaybleValues(HttpContext context)
    {

        try
        {
            vdbmngr = new VehicleDBMgr();
            string VoucherID = context.Request["VoucherID"];
            string branchid = "0";
            if (context.Session["BrachSOID"] == null)
            {
                branchid = context.Session["branch"].ToString();
            }
            else
            {
                branchid = context.Session["BrachSOID"].ToString();
            }

            List<Subpayables> SubpayableList = new List<Subpayables>();
            cmd = new MySqlCommand("SELECT Sno FROM cashpayables WHERE (Sno = @VocherID) AND (BranchID = @BranchID)");
            cmd.Parameters.AddWithValue("@VocherID", VoucherID);
            cmd.Parameters.AddWithValue("@BranchID", branchid);
            DataTable dtCash = vdbmngr.SelectQuery(cmd).Tables[0];
            string RefNo = dtCash.Rows[0]["Sno"].ToString();
            cmd = new MySqlCommand("SELECT accountheads.HeadName, subpayable.Amount, accountheads.Sno FROM subpayable INNER JOIN accountheads ON subpayable.HeadSno = accountheads.Sno WHERE  (subpayable.RefNo = @RefNo)");
            cmd.Parameters.AddWithValue("@RefNo", RefNo);
            DataTable dtCashSubPayable = vdbmngr.SelectQuery(cmd).Tables[0];
            foreach (DataRow dr in dtCashSubPayable.Rows)
            {
                Subpayables GetSubpayable = new Subpayables();
                GetSubpayable.HeadSno = dr["Sno"].ToString();
                GetSubpayable.HeadOfAccount = dr["HeadName"].ToString();
                GetSubpayable.Amount = dr["Amount"].ToString();
                SubpayableList.Add(GetSubpayable);
            }
            string response = GetJson(SubpayableList);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string response = GetJson(ex.Message);
            context.Response.Write(response);
        }
    }
    class Subpayables
    {
        public string HeadSno { get; set; }
        public string HeadOfAccount { get; set; }
        public string Amount { get; set; }
    }
    private void BtnClearRaiseVoucherClick(HttpContext context)
    {

        try
        {
            vdbmngr = new VehicleDBMgr();
            string Description = context.Request["Description"];
            string Amount = context.Request["Amount"];
            string VoucherType = context.Request["VoucherType"];
            string CashTo = context.Request["CashTo"];
            string EmpName = context.Request["Employee"];
            string Remarks = context.Request["EmpName"];
            string EmpApprove = context.Request["AprovedBy"];
            cmd = new MySqlCommand("Select IFNULL(MAX(VocherID),0)+1 as VocherID  from cashpayables where BranchID=@BranchID");
            cmd.Parameters.AddWithValue("@BranchID", context.Session["branch"].ToString());
            DataTable dtTripId = vdbmngr.SelectQuery(cmd).Tables[0];
            string VocherID = "0";
            if (dtTripId.Rows.Count > 0)
            {
                VocherID = dtTripId.Rows[0]["VocherID"].ToString();
            }
            else
            {
                VocherID = "1";
            }
            cmd = new MySqlCommand("Insert into cashpayables (BranchID,CashTo,DOE,VocherID,Remarks,Amount,EmpId,Approvedby,onNameof,Status,Created_by,VoucherType) values (@BranchID,@CashTo,@DOE,@VocherID,@Remarks,@Amount,@EmpId,@Approvedby,@onNameof,@Status,@Created_by,@VoucherType)");
            cmd.Parameters.AddWithValue("@BranchID", context.Session["branch"].ToString());
            cmd.Parameters.AddWithValue("@CashTo", CashTo);
            cmd.Parameters.AddWithValue("@DOE", DateTime.Now);
            cmd.Parameters.AddWithValue("@VocherID", VocherID);
            cmd.Parameters.AddWithValue("@Remarks", Remarks);
            cmd.Parameters.AddWithValue("@Amount", Amount);
            cmd.Parameters.AddWithValue("@EmpId", EmpName);
            cmd.Parameters.AddWithValue("@Approvedby", EmpApprove);
            cmd.Parameters.AddWithValue("@onNameof", Description);
            cmd.Parameters.AddWithValue("@Status", "R");
            cmd.Parameters.AddWithValue("@Created_by", context.Session["UserSno"].ToString());
            cmd.Parameters.AddWithValue("@VoucherType", VoucherType);
            vdbmngr.insert(cmd);
            string msg = VocherID;
            string response = GetJson(msg);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string msg = ex.Message;
            string response = GetJson(msg);
            context.Response.Write(response);
        }
    }
    private void btnVoucherCancelClick(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            string VoucherID = context.Request["VoucherID"];
            string branch = context.Session["branch"].ToString();
            cmd = new MySqlCommand("Update cashpayables set Status=@Status where Sno=@VocherID");
            cmd.Parameters.AddWithValue("@Status", "C");
            cmd.Parameters.AddWithValue("@VocherID", VoucherID);
            vdbmngr.Update(cmd);
            string msg = "Voucher Cancel successfully";
            string response = GetJson(msg);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string msg = ex.Message;
            string response = GetJson(msg);
            context.Response.Write(response);
        }
    }
    private void btnViewVoucherGeneretaeClick(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            List<VoucherClass> Voucherlist = new List<VoucherClass>();
            string fromdate = context.Request["fromdate"];
            string ToDate = context.Request["ToDate"];
            string statusType = context.Request["Type"];
            string FormType = context.Request["FormType"];
            DateTime dtFromdate = Convert.ToDateTime(fromdate);
            DateTime dtTodate = Convert.ToDateTime(ToDate);
            DataTable dtVouchers = new DataTable();
            DateTime ServerDateCurrentdate = VehicleDBMgr.GetTime(vdbmngr.conn);
            string BranchID = "0";
            string LevelType = context.Session["LevelType"].ToString();
            if (FormType != "VoucherPrint")
            {
                if (LevelType == "AccountsOfficer" || LevelType == "Director")
                {
                    BranchID = context.Request["BranchID"];
                    if (statusType == "All")
                    {
                        cmd = new MySqlCommand("SELECT cashpayables.BranchID,cashpayables.Empid, cashpayables.Approvedby, cashpayables.Status,cashpayables.Sno, cashpayables.VocherID, cashpayables.CashTo, cashpayables.AccountType, cashpayables.onNameof, cashpayables.DOE, cashpayables.Amount, cashpayables.ApprovedAmount, cashpayables.Remarks, cashpayables.ApprovalRemarks, cashpayables.CashierRemarks, cashpayables.VoucherType, empmanage.EmpName, empmanage_1.EmpName AS ApproveEmpName FROM cashpayables LEFT OUTER JOIN empmanage empmanage_1 ON cashpayables.Approvedby = empmanage_1.Sno LEFT OUTER JOIN empmanage ON cashpayables.Empid = empmanage.Sno WHERE (cashpayables.BranchID = @BranchID) AND (cashpayables.DOE BETWEEN @d1 AND @d2)");
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(ServerDateCurrentdate).AddDays(-3));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ServerDateCurrentdate));
                        cmd.Parameters.AddWithValue("@BranchID", BranchID);
                    }
                    else
                    {
                        cmd = new MySqlCommand("SELECT cashpayables.BranchID,cashpayables.Empid, cashpayables.Approvedby, cashpayables.Status,cashpayables.Sno, cashpayables.VocherID, cashpayables.CashTo, cashpayables.AccountType, cashpayables.onNameof, cashpayables.DOE, cashpayables.Amount, cashpayables.ApprovedAmount, cashpayables.Remarks, cashpayables.ApprovalRemarks, cashpayables.CashierRemarks, cashpayables.VoucherType, empmanage.EmpName, empmanage_1.EmpName AS ApproveEmpName FROM cashpayables LEFT OUTER JOIN empmanage empmanage_1 ON cashpayables.Approvedby = empmanage_1.Sno LEFT OUTER JOIN empmanage ON cashpayables.Empid = empmanage.Sno WHERE (cashpayables.BranchID = @BranchID) AND (cashpayables.DOE BETWEEN @d1 AND @d2) AND (cashpayables.Status = @status)");
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(ServerDateCurrentdate).AddDays(-30));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ServerDateCurrentdate));
                        cmd.Parameters.AddWithValue("@BranchID", BranchID);
                        cmd.Parameters.AddWithValue("@status", statusType);
                    }
                }
                else
                {
                    BranchID = context.Session["branch"].ToString();
                    if (BranchID == "3928")
                    {
                        cmd = new MySqlCommand("SELECT cashpayables.BranchID,cashpayables.Empid, cashpayables.Approvedby,cashpayables.Status,cashpayables.Sno, cashpayables.VocherID, cashpayables.CashTo,cashpayables.AccountType, cashpayables.onNameof, cashpayables.DOE, cashpayables.Amount, cashpayables.ApprovedAmount, cashpayables.Remarks, cashpayables.ApprovalRemarks, cashpayables.CashierRemarks, cashpayables.VoucherType, empmanage.EmpName, empmanage_1.EmpName AS ApproveEmpName FROM cashpayables INNER JOIN empmanage empmanage_1 ON cashpayables.Approvedby = empmanage_1.Sno LEFT OUTER JOIN empmanage ON cashpayables.Empid = empmanage.Sno WHERE ( (cashpayables.BranchID = @BranchID) AND (cashpayables.DOE BETWEEN @d1 AND @d2) AND (cashpayables.Status = @Status)) OR ((cashpayables.BranchID = @BranchID) AND (cashpayables.DOE BETWEEN @d1 AND @d2) AND (cashpayables.Status = @Status1))");
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(ServerDateCurrentdate).AddDays(-45));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ServerDateCurrentdate));
                        cmd.Parameters.AddWithValue("@Status", "A");
                        cmd.Parameters.AddWithValue("@Status1", "R");
                        cmd.Parameters.AddWithValue("@BranchID", BranchID);
                    }
                    else
                    {
                        cmd = new MySqlCommand("SELECT cashpayables.BranchID,cashpayables.Empid, cashpayables.Approvedby,cashpayables.Status,cashpayables.Sno, cashpayables.VocherID, cashpayables.CashTo,cashpayables.AccountType, cashpayables.onNameof, cashpayables.DOE, cashpayables.Amount, cashpayables.ApprovedAmount, cashpayables.Remarks, cashpayables.ApprovalRemarks, cashpayables.CashierRemarks, cashpayables.VoucherType, empmanage.EmpName, empmanage_1.EmpName AS ApproveEmpName FROM cashpayables INNER JOIN empmanage empmanage_1 ON cashpayables.Approvedby = empmanage_1.Sno LEFT OUTER JOIN empmanage ON cashpayables.Empid = empmanage.Sno WHERE ( (cashpayables.BranchID = @BranchID) AND (cashpayables.DOE BETWEEN @d1 AND @d2) AND (cashpayables.Status = @Status)) OR ((cashpayables.BranchID = @BranchID) AND (cashpayables.DOE BETWEEN @d1 AND @d2) AND (cashpayables.Status = @Status1))");
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(ServerDateCurrentdate).AddDays(-7));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ServerDateCurrentdate));
                        cmd.Parameters.AddWithValue("@Status", "A");
                        cmd.Parameters.AddWithValue("@Status1", "R");
                        cmd.Parameters.AddWithValue("@BranchID", BranchID);
                    }
                }
                dtVouchers = vdbmngr.SelectQuery(cmd).Tables[0];
            }
            else
            {
                cmd = new MySqlCommand("SELECT cashpayables.BranchID,cashpayables.Empid, cashpayables.Approvedby, cashpayables.Status,cashpayables.Sno, cashpayables.VocherID, cashpayables.CashTo, cashpayables.AccountType, cashpayables.onNameof, cashpayables.DOE, cashpayables.Amount, cashpayables.ApprovedAmount, cashpayables.Remarks, cashpayables.ApprovalRemarks, cashpayables.CashierRemarks, cashpayables.VoucherType, empmanage.EmpName, empmanage_1.EmpName AS ApproveEmpName FROM cashpayables LEFT OUTER JOIN empmanage empmanage_1 ON cashpayables.Approvedby = empmanage_1.Sno LEFT OUTER JOIN empmanage ON cashpayables.Empid = empmanage.Sno WHERE (cashpayables.BranchID = @BranchID) AND (cashpayables.DOE BETWEEN @d1 AND @d2)");
                cmd.Parameters.AddWithValue("@d1", GetLowDate(dtFromdate));
                cmd.Parameters.AddWithValue("@d2", GetHighDate(dtTodate));
                cmd.Parameters.AddWithValue("@BranchID", context.Session["branch"]);
                dtVouchers = vdbmngr.SelectQuery(cmd).Tables[0];
            }
            if (dtVouchers.Rows.Count > 0)
            {
                foreach (DataRow dr in dtVouchers.Rows)
                {
                    VoucherClass getVoucher = new VoucherClass();
                    getVoucher.Empid = dr["Empid"].ToString();
                    getVoucher.ApprovedBy = dr["Approvedby"].ToString();
                    getVoucher.VoucherID = dr["Sno"].ToString();
                    string EmpName = dr["EmpName"].ToString();
                    string VoucherType = dr["VoucherType"].ToString();
                    if (VoucherType == "Credit")
                    {
                        getVoucher.Amount = dr["ApprovedAmount"].ToString();
                        getVoucher.Remarks = dr["ApprovalRemarks"].ToString();
                    }
                    else
                    {
                        getVoucher.Amount = dr["Amount"].ToString();
                        getVoucher.Remarks = dr["Remarks"].ToString();

                    }
                    getVoucher.VoucherType = dr["VoucherType"].ToString();
                    if (EmpName == "")
                    {
                        EmpName = "select";
                    }
                    getVoucher.EmpName = EmpName;
                    getVoucher.BranchID = dr["BranchID"].ToString();
                    getVoucher.CashTo = dr["CashTo"].ToString();
                    getVoucher.Description = dr["onNameof"].ToString();
                    getVoucher.AccountType = dr["AccountType"].ToString();
                    getVoucher.ApprovalAmount = dr["ApprovedAmount"].ToString();
                    getVoucher.ApproveEmpName = dr["ApproveEmpName"].ToString();
                    string Status = dr["Status"].ToString();
                    if (Status == "R")
                    {
                        Status = "Raised";
                    }
                    if (Status == "A")
                    {
                        Status = "Approved";
                    }
                    if (Status == "C")
                    {
                        Status = "Rejected";
                    }
                    if (Status == "P")
                    {
                        Status = "Paid";
                    }
                    getVoucher.Status = Status;
                    getVoucher.ApprovalRemarks = dr["ApprovalRemarks"].ToString();
                    getVoucher.branchvoucherid = dr["VocherID"].ToString();
                    Voucherlist.Add(getVoucher);
                }
            }
            string response = GetJson(Voucherlist);
            context.Response.Write(response);
        }
        catch
        {
        }
    }
    private void BtnPayVoucherClick(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            string VoucherID = context.Request["VoucherID"];
            string ApprovalAmount = context.Request["ApprovalAmount"];
            double Amount = 0;
            double.TryParse(ApprovalAmount, out Amount);
            string Remarks = context.Request["Remarks"];
            string Force = context.Request["Force"];
            string VoucherType = context.Request["VoucherType"];
            string DOE = context.Request["DOE"];
            string Denominations = context.Request["DenominationString"];
            DateTime dtpaidtime = new DateTime();
            dtpaidtime = DateTime.Parse(DOE);
            DateTime ServerDateCurrentdate = VehicleDBMgr.GetTime(vdbmngr.conn);

            cmd = new MySqlCommand("SELECT Branchid, UserData_sno, AmountPaid, Denominations, Remarks, Sno, PaidDate FROM collections WHERE (Branchid = @BranchID) AND (PaidDate BETWEEN @d1 AND @d2)");
            cmd.Parameters.AddWithValue("@BranchID", context.Session["branch"].ToString());
            cmd.Parameters.AddWithValue("@d1", GetLowDate(ServerDateCurrentdate));
            cmd.Parameters.AddWithValue("@d2", GetHighDate(ServerDateCurrentdate));
            DataTable dtcashbookstatus = vdbmngr.SelectQuery(cmd).Tables[0];
            if (dtcashbookstatus.Rows.Count > 0)
            {
                string msg = "Cash Book Has Been Closed For This Day";
                string response = GetJson(msg);
                context.Response.Write(response);
            }
            else
            {
                cmd = new MySqlCommand("Update cashpayables set ApprovedAmount=@ApprovedAmount, DOE=@DOE,CashierRemarks=@CashierRemarks,Status=@Status,ForceApproval=@ForceApproval,Denominations=@Denominations where BranchID=@BranchID and Sno=@VocherID");
                cmd.Parameters.AddWithValue("@ApprovedAmount", Amount);
                cmd.Parameters.AddWithValue("@CashierRemarks", Remarks);
                cmd.Parameters.AddWithValue("@Status", "P");
                cmd.Parameters.AddWithValue("@ForceApproval", Force);
                cmd.Parameters.AddWithValue("@VocherID", VoucherID);
                cmd.Parameters.AddWithValue("@Denominations", Denominations);
                string branchid = context.Session["branch"].ToString();
                if (branchid == "570")
                {
                    cmd.Parameters.AddWithValue("@DOE", dtpaidtime);
                }
                if (branchid != "570")
                {
                    cmd.Parameters.AddWithValue("@DOE", ServerDateCurrentdate);

                }
                cmd.Parameters.AddWithValue("@BranchID", context.Session["branch"].ToString());
                vdbmngr.Update(cmd);
                cmd = new MySqlCommand("Update BranchAccounts set Amount=Amount-@Amount where BranchID=@BranchID");
                cmd.Parameters.AddWithValue("@Amount", Amount);
                cmd.Parameters.AddWithValue("@BranchID", context.Session["branch"].ToString());
                vdbmngr.Update(cmd);
                Denominations = Denominations.Replace("+", " ");
                string twothousand = "0";
                string thousand = "0";
                string fivehundred = "0";
                string hundred = "0";
                string fifty = "0";
                string twenty = "0";
                string ten = "0";
                string five = "0";
                string twos = "0";
                string ones = "0";
                foreach (string str in Denominations.Split(' '))
                {
                    if (str != "")
                    {
                        string[] price = str.Split('x');
                        string amountcount = price[0];
                        string notecount = price[1];
                        if (amountcount == "2000")
                        {
                            twothousand = notecount;
                        }
                        if (amountcount == "1000")
                        {
                            thousand = notecount;
                        }
                        if (amountcount == "500")
                        {
                            fivehundred = notecount;
                        }
                        if (amountcount == "100")
                        {
                            hundred = notecount;
                        }
                        if (amountcount == "50")
                        {
                            fifty = notecount;
                        }
                        if (amountcount == "20")
                        {
                            twenty = notecount;
                        }
                        if (amountcount == "10")
                        {
                            ten = notecount;
                        }
                        if (amountcount == "5")
                        {
                            five = notecount;
                        }
                        if (amountcount == "2")
                        {
                            twos = notecount;
                        }
                        if (amountcount == "1")
                        {
                            ones = notecount;
                        }
                    }
                }
                if (VoucherType == "Credit")
                {
                    cmd = new MySqlCommand("Update branch_denomination set amount=amount+@amount,twothousand=twothousand+@twothousand,thousand=thousand+@thousand,fivehundred=fivehundred+@fivehundred,hundred=hundred+@hundred,fifty=fifty+@fifty,twenty=twenty+@twenty,ten=ten+@ten,five=five+@five,twos=twos+@twos,ones=ones+@ones where BranchID=@BranchID");
                    cmd.Parameters.AddWithValue("@amount", Amount);
                    cmd.Parameters.AddWithValue("@twothousand", twothousand);
                    cmd.Parameters.AddWithValue("@thousand", thousand);
                    cmd.Parameters.AddWithValue("@fivehundred", fivehundred);
                    cmd.Parameters.AddWithValue("@hundred", hundred);
                    cmd.Parameters.AddWithValue("@fifty", fifty);
                    cmd.Parameters.AddWithValue("@twenty", twenty);
                    cmd.Parameters.AddWithValue("@ten", ten);
                    cmd.Parameters.AddWithValue("@five", five);
                    cmd.Parameters.AddWithValue("@twos", twos);
                    cmd.Parameters.AddWithValue("@ones", ones);
                    cmd.Parameters.AddWithValue("@BranchID", context.Session["branch"].ToString());
                    vdbmngr.Update(cmd);
                }
                else
                {
                    cmd = new MySqlCommand("Update branch_denomination set amount=amount-@amount,twothousand=twothousand-@twothousand,thousand=thousand-@thousand,fivehundred=fivehundred-@fivehundred,hundred=hundred-@hundred,fifty=fifty-@fifty,twenty=twenty-@twenty,ten=ten-@ten,five=five-@five,twos=twos-@twos,ones=ones-@ones where BranchID=@BranchID");
                    cmd.Parameters.AddWithValue("@amount", Amount);
                    cmd.Parameters.AddWithValue("@twothousand", twothousand);
                    cmd.Parameters.AddWithValue("@thousand", thousand);
                    cmd.Parameters.AddWithValue("@fivehundred", fivehundred);
                    cmd.Parameters.AddWithValue("@hundred", hundred);
                    cmd.Parameters.AddWithValue("@fifty", fifty);
                    cmd.Parameters.AddWithValue("@twenty", twenty);
                    cmd.Parameters.AddWithValue("@ten", ten);
                    cmd.Parameters.AddWithValue("@five", five);
                    cmd.Parameters.AddWithValue("@twos", twos);
                    cmd.Parameters.AddWithValue("@ones", ones);
                    cmd.Parameters.AddWithValue("@BranchID", context.Session["branch"].ToString());
                    vdbmngr.Update(cmd);
                }
                string msg = "Voucher Paid successfully";
                string response = GetJson(msg);
                context.Response.Write(response);
            }
        }
        catch (Exception ex)
        {
            string msg = ex.Message;
            string response = GetJson(msg);
            context.Response.Write(response);
        }
    }
    private void BtnGetVoucherClick(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            string VoucherID = context.Request["VoucherID"];
            List<VoucherClass> Voucherlist = new List<VoucherClass>();
            cmd = new MySqlCommand("SELECT  empmanage.EmpName,cashpayables.Empid, cashpayables.Approvedby, cashpayables.VoucherType, cashpayables.CashTo, cashpayables.onNameof, cashpayables.Amount, cashpayables.ApprovedAmount, empmanage_1.EmpName AS ApproveEmpName, cashpayables.Status, cashpayables.ApprovalRemarks, cashpayables.Remarks FROM empmanage empmanage_1 INNER JOIN cashpayables ON empmanage_1.Sno = cashpayables.Approvedby LEFT OUTER JOIN empmanage ON cashpayables.Empid = empmanage.Sno WHERE (cashpayables.Sno = @VoucherID) AND (cashpayables.BranchID = @BranchID)");
            cmd.Parameters.AddWithValue("@VoucherID", VoucherID);
            cmd.Parameters.AddWithValue("@BranchID", context.Session["branch"].ToString());
            DataTable dtVouchers = vdbmngr.SelectQuery(cmd).Tables[0];
            if (dtVouchers.Rows.Count > 0)
            {
                foreach (DataRow dr in dtVouchers.Rows)
                {
                    VoucherClass getVoucher = new VoucherClass();
                    getVoucher.EmpName = dr["EmpName"].ToString();
                    getVoucher.VoucherType = dr["VoucherType"].ToString();
                    getVoucher.CashTo = dr["CashTo"].ToString();
                    getVoucher.Description = dr["onNameof"].ToString();
                    getVoucher.Amount = dr["Amount"].ToString();
                    getVoucher.ApprovalAmount = dr["Amount"].ToString();
                    getVoucher.ApproveEmpName = dr["ApproveEmpName"].ToString();
                    getVoucher.Status = dr["Status"].ToString();
                    getVoucher.ApprovalRemarks = dr["Remarks"].ToString();
                    getVoucher.Remarks = dr["Remarks"].ToString();
                    getVoucher.Empid = dr["EmpID"].ToString();
                    getVoucher.ApprovedBy = dr["Approvedby"].ToString();
                    Voucherlist.Add(getVoucher);
                }
                string response = GetJson(Voucherlist);
                context.Response.Write(response);
            }
            else
            {
                string msg = "No voucher found";
                string response = GetJson(msg);
                context.Response.Write(response);
            }
        }
        catch
        {
        }
    }
    private void btnRejectVoucherclick(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            string VoucherID = context.Request["VoucherID"];
            string Approvalamt = context.Request["Approvalamt"];
            string Remarks = context.Request["Remarks"];
            string Status = context.Request["Status"];
            string AppRemarks = context.Request["AppRemarks"];
            string BranchID = "0";
            string LevelType = context.Session["LevelType"].ToString();
            if (LevelType == "AccountsOfficer" || LevelType == "Director")
            {
                BranchID = context.Request["BranchID"];
            }
            else
            {
                BranchID = context.Session["branch"].ToString();
            }
            cmd = new MySqlCommand("Update cashpayables set  Remarks=@Remarks,ApprovedAmount=@ApprovedAmount ,ApprovalRemarks=@ApprovalRemarks,Status=@Status where  Sno=@VocherID and BranchID=@BranchID ");
            cmd.Parameters.AddWithValue("@Status", Status);
            cmd.Parameters.AddWithValue("@ApprovedAmount", Approvalamt);
            cmd.Parameters.AddWithValue("@ApprovalRemarks", AppRemarks);
            cmd.Parameters.AddWithValue("@VocherID", VoucherID);
            cmd.Parameters.AddWithValue("@BranchID", BranchID);
            cmd.Parameters.AddWithValue("@Remarks", Remarks);
            vdbmngr.Update(cmd);
            string msg = "Voucher Reject successfully";
            string response = GetJson(msg);
            context.Response.Write(response);

        }
        catch (Exception ex)
        {
            string msg = ex.Message;
            string response = GetJson(msg);
            context.Response.Write(response);
        }
    }
    private void btnApproveVoucherclick(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            string VoucherID = context.Request["VoucherID"];
            string Approvalamt = context.Request["Approvalamt"];
            double Amount = 0;
            double.TryParse(Approvalamt, out Amount);
            string Remarks = context.Request["Remarks"];
            string AppRemarks = context.Request["AppRemarks"];
            string Status = context.Request["Status"];
            string BranchID = "0";
            string LevelType = context.Session["LevelType"].ToString();
            if (LevelType == "AccountsOfficer" || LevelType == "Director")
            {
                BranchID = context.Request["BranchID"];
            }
            else
            {
                BranchID = context.Session["branch"].ToString();
            }
            DateTime ServerDateCurrentdate = VehicleDBMgr.GetTime(vdbmngr.conn);
            cmd = new MySqlCommand("SELECT Branchid, UserData_sno, AmountPaid, Denominations, Remarks, Sno, PaidDate FROM collections WHERE (Branchid = @BranchID) AND (PaidDate BETWEEN @d1 AND @d2)");
            cmd.Parameters.AddWithValue("@BranchID", BranchID);
            cmd.Parameters.AddWithValue("@d1", GetLowDate(ServerDateCurrentdate));
            cmd.Parameters.AddWithValue("@d2", GetHighDate(ServerDateCurrentdate));
            DataTable dtcashbookstatus = vdbmngr.SelectQuery(cmd).Tables[0];
            if (dtcashbookstatus.Rows.Count > 0)
            {
                string msg = "Cash Book Has Been Closed For This Day";
                string response = GetJson(msg);
                context.Response.Write(response);
            }
            else
            {
                cmd = new MySqlCommand("Update cashpayables set Remarks=@Remarks,DOE=@DOE, ApprovedAmount=@ApprovedAmount ,ApprovalRemarks=@ApprovalRemarks,Status=@Status where Sno=@VocherID and BranchID=@BranchID");
                cmd.Parameters.AddWithValue("@Status", Status);
                cmd.Parameters.AddWithValue("@ApprovedAmount", Amount);
                cmd.Parameters.AddWithValue("@ApprovalRemarks", AppRemarks);
                cmd.Parameters.AddWithValue("@Remarks", Remarks);
                cmd.Parameters.AddWithValue("@VocherID", VoucherID);
                cmd.Parameters.AddWithValue("@BranchID", BranchID);
                cmd.Parameters.AddWithValue("@DOE", ServerDateCurrentdate);
                vdbmngr.Update(cmd);
                string msg = "Voucher Approved successfully";
                string response = GetJson(msg);
                context.Response.Write(response);
            }

        }
        catch (Exception ex)
        {
            string msg = ex.Message;
            string response = GetJson(msg);
            context.Response.Write(response);
        }
    }
    private void GetRaisedVouchers(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            List<VoucherClass> Voucherlist = new List<VoucherClass>();
            string LevelType = context.Session["LevelType"].ToString();
            string status = context.Request["Type"];
            string fromdate = context.Request["fromdate"];
            string ToDate = context.Request["ToDate"];
            DateTime dtFromdate = Convert.ToDateTime(fromdate);
            DateTime dtTodate = Convert.ToDateTime(ToDate);
            if (LevelType == "Manager")
            {
                //cmd = new MySqlCommand("SELECT cashpayables.Sno, cashpayables.Empid,empmanage.EmpName, cashpayables.VocherID, cashpayables.Amount FROM cashpayables INNER JOIN empmanage ON cashpayables.Empid = empmanage.Sno WHERE (cashpayables.BranchID = @BranchID) AND (cashpayables.Status = @Status)");
                cmd = new MySqlCommand("SELECT cashpayables.vocherid, cashpayables.Sno,cashpayables.onNameof, cashpayables.Empid,cashpayables.VoucherType, empmanage.EmpName, cashpayables.VocherID, cashpayables.Amount, cashpayables.Remarks,cashpayables.onNameof FROM cashpayables LEFT OUTER JOIN empmanage ON cashpayables.Empid = empmanage.Sno WHERE (cashpayables.BranchID = @BranchID) AND (cashpayables.Status = @Status) and (cashpayables.Approvedby=@ApproveEmp)");
                cmd.Parameters.AddWithValue("@ApproveEmp", context.Session["UserSno"].ToString());
                cmd.Parameters.AddWithValue("@BranchID", context.Session["branch"].ToString());
                cmd.Parameters.AddWithValue("@Status", "R");
            }
            if (LevelType == "AccountsOfficer" || LevelType == "Director")
            {
                string BranchID = context.Request["BranchID"];
                if (status == "R")
                {
                    cmd = new MySqlCommand("SELECT cashpayables.vocherid, cashpayables.Sno,cashpayables.onNameof, cashpayables.Empid,cashpayables.VoucherType, empmanage.EmpName, cashpayables.VocherID, cashpayables.Amount, cashpayables.Remarks,cashpayables.onNameof FROM cashpayables LEFT OUTER JOIN empmanage ON cashpayables.Empid = empmanage.Sno WHERE (cashpayables.Status = @Status) AND (cashpayables.BranchID = @BranchID)");
                }
                else
                {
                    cmd = new MySqlCommand("SELECT cashpayables.vocherid, cashpayables.Sno, cashpayables.onNameof, cashpayables.Empid, cashpayables.VoucherType, empmanage.EmpName, cashpayables.VocherID,cashpayables.Amount, cashpayables.Remarks FROM cashpayables LEFT OUTER JOIN empmanage ON cashpayables.Empid = empmanage.Sno WHERE (cashpayables.Status = @Status) AND (cashpayables.BranchID = @BranchID) AND (cashpayables.DOE BETWEEN @d1 AND @d2) AND (cashpayables.VoucherType <> @vtype)");
                }
                cmd.Parameters.AddWithValue("@BranchID", BranchID);
                cmd.Parameters.AddWithValue("@d1", GetLowDate(dtFromdate));
                cmd.Parameters.AddWithValue("@d2", GetHighDate(dtTodate));
                cmd.Parameters.AddWithValue("@vtype", "Credit");
                cmd.Parameters.AddWithValue("@Status", status);
            }
            DataTable dtVoucher = vdbmngr.SelectQuery(cmd).Tables[0];
            foreach (DataRow dr in dtVoucher.Rows)
            {
                VoucherClass getVoucher = new VoucherClass();
                getVoucher.VoucherID = dr["sno"].ToString();
                getVoucher.branchvoucherid = dr["vocherid"].ToString();
                getVoucher.EmpName = dr["onNameof"].ToString();
                getVoucher.VoucherType = dr["VoucherType"].ToString();
                double amount = 0;
                double.TryParse(dr["Amount"].ToString(), out amount);
                getVoucher.Amount = amount.ToString("F2");
                getVoucher.Empid = dr["Empid"].ToString();
                getVoucher.Sno = dr["Sno"].ToString();
                Voucherlist.Add(getVoucher);
            }
            string response = GetJson(Voucherlist);
            context.Response.Write(response);
        }
        catch
        {
        }
    }
    class VoucherClass
    {
        public string VoucherID { get; set; }
        public string EmpName { get; set; }
        public string Amount { get; set; }
        public string Empid { get; set; }
        public string Sno { get; set; }
        public string ApproveEmpName { get; set; }
        public string VoucherType { get; set; }
        public string CashTo { get; set; }
        public string Description { get; set; }
        public string ApprovalRemarks { get; set; }
        public string ApprovalAmount { get; set; }
        public string Status { get; set; }
        public string Remarks { get; set; }
        public string ApprovedBy { get; set; }
        public string AccountType { get; set; }
        public string BranchID { get; set; }
        public string Title { get; set; }
        public string auditstatus { get; set; }
        public string branchvoucherid { get; set; }
        public string branchVocherID { get; set; }
    }
    private void BtnRaiseVoucherClick(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            var js = new JavaScriptSerializer();
            var title1 = context.Request.Params[1];
            CashForms obj = js.Deserialize<CashForms>(title1);
            string Description = obj.Description;
            string Amount = obj.Amount;
            string Remarks = obj.Remarks;
            string EmpApprove = obj.EmpApprove;
            string VoucherType = obj.VoucherType;
            string CashTo = obj.CashTo;
            string Employee = obj.Employee;
            string btnSave = obj.btnSave;
            string CashType = obj.CashType;
            string transactiontype = obj.transactiontype;
            string BranchID = "0";
            string LevelType = context.Session["LevelType"].ToString();
            DateTime ServerDateCurrentdate = VehicleDBMgr.GetTime(vdbmngr.conn);
            DateTime dtapril = new DateTime();
            DateTime dtmarch = new DateTime();
            int currentyear = ServerDateCurrentdate.Year;
            int nextyear = ServerDateCurrentdate.Year + 1;
            int backmonth = ServerDateCurrentdate.Month - 1;
            if (ServerDateCurrentdate.Month > 3)
            {
                string apr = "4/1/" + currentyear;
                dtapril = DateTime.Parse(apr);
                string march = "3/31/" + nextyear;
                dtmarch = DateTime.Parse(march);
            }
            if (ServerDateCurrentdate.Month <= 3)
            {
                string apr = "4/1/" + (currentyear - 1);
                dtapril = DateTime.Parse(apr);
                string march = "3/31/" + (nextyear - 1);
                dtmarch = DateTime.Parse(march);
            }
            if (LevelType == "AccountsOfficer" || LevelType == "Director")
            {
                BranchID = obj.BranchID;
            }
            else
            {
                BranchID = context.Session["branch"].ToString();
            }
            string msg = "";
            if (btnSave == "Raise")
            {
                cmd = new MySqlCommand("SELECT IFNULL(MAX(VocherID), 0) + 1 AS VocherID FROM cashpayables WHERE (BranchID = @BranchID) AND (DOR BETWEEN @d1 AND @d2)");
                cmd.Parameters.AddWithValue("@BranchID", BranchID);
                cmd.Parameters.AddWithValue("@d1", GetLowDate(dtapril));
                cmd.Parameters.AddWithValue("@d2", GetHighDate(dtmarch));
                DataTable dtTripId = vdbmngr.SelectQuery(cmd).Tables[0];
                string VocherID = "0";
                if (dtTripId.Rows.Count > 0)
                {
                    VocherID = dtTripId.Rows[0]["VocherID"].ToString();
                }
                else
                {
                    VocherID = "1";
                }
                if (VoucherType == "Credit")
                {
                    cmd = new MySqlCommand("Insert into cashpayables (BranchID,CashTo,DOE,VocherID,ApprovalRemarks,ApprovedAmount,onNameof,Status,Created_by,VoucherType,DOR) values (@BranchID,@CashTo,@DOE,@VocherID,@ApprovalRemarks,@ApprovedAmount,@onNameof,@Status,@Created_by,@VoucherType,@DOR)");
                    cmd.Parameters.AddWithValue("@BranchID", BranchID);
                    cmd.Parameters.AddWithValue("@CashTo", CashTo);
                    cmd.Parameters.AddWithValue("@DOE", ServerDateCurrentdate);
                    cmd.Parameters.AddWithValue("@DOR", ServerDateCurrentdate);
                    cmd.Parameters.AddWithValue("@VocherID", VocherID);
                    cmd.Parameters.AddWithValue("@ApprovalRemarks", Remarks);
                    cmd.Parameters.AddWithValue("@ApprovedAmount", Amount);
                    cmd.Parameters.AddWithValue("@onNameof", Description);
                    cmd.Parameters.AddWithValue("@Status", "P");
                    cmd.Parameters.AddWithValue("@Created_by", context.Session["UserSno"].ToString());
                    cmd.Parameters.AddWithValue("@VoucherType", VoucherType);
                    long CashSno = vdbmngr.insertScalar(cmd);
                    foreach (CashDetails o in obj.CashDetails)
                    {
                        cmd = new MySqlCommand("Insert into Subpayable (RefNo,HeadSno,Amount) values (@RefNo,@HeadSno,@Amount)");
                        cmd.Parameters.AddWithValue("@RefNo", CashSno);
                        cmd.Parameters.AddWithValue("@HeadSno", o.SNo);
                        cmd.Parameters.AddWithValue("@Amount", o.amount);
                        vdbmngr.insert(cmd);
                    }
                    if (CashType == "Cash")
                    {
                        cmd = new MySqlCommand("Update BranchAccounts set Amount=Amount-@Amount where BranchID=@BranchID");
                        cmd.Parameters.AddWithValue("@Amount", Amount);
                        cmd.Parameters.AddWithValue("@BranchID", BranchID);
                        vdbmngr.Update(cmd);
                    }
                    cmd = new MySqlCommand("Update branch_denomination set amount=amount+@amount,ones=ones+@ones where BranchID=@BranchID");
                    cmd.Parameters.AddWithValue("@amount", Amount);
                    cmd.Parameters.AddWithValue("@ones", Amount);
                    cmd.Parameters.AddWithValue("@BranchID", context.Session["branch"].ToString());
                    vdbmngr.Update(cmd);
                    if (CashType == "Bills")
                    {
                        cmd = new MySqlCommand("Insert into cashpayables (BranchID,CashTo,DOE,VocherID,Remarks,Amount,Approvedby,onNameof,Status,Created_by,VoucherType,DOR) values (@BranchID,@CashTo,@DOE,@VocherID,@Remarks,@Amount,@Approvedby,@onNameof,@Status,@Created_by,@VoucherType,@DOR)");
                        cmd.Parameters.AddWithValue("@BranchID", BranchID);
                        cmd.Parameters.AddWithValue("@CashTo", obj.ddlBillHead);
                        cmd.Parameters.AddWithValue("@DOE", ServerDateCurrentdate);
                        cmd.Parameters.AddWithValue("@DOR", ServerDateCurrentdate);
                        cmd.Parameters.AddWithValue("@VocherID", VocherID);
                        cmd.Parameters.AddWithValue("@Remarks", Remarks);
                        cmd.Parameters.AddWithValue("@Amount", Amount);
                        cmd.Parameters.AddWithValue("@Approvedby", EmpApprove);
                        cmd.Parameters.AddWithValue("@onNameof", Description);
                        cmd.Parameters.AddWithValue("@Status", "R");
                        cmd.Parameters.AddWithValue("@Created_by", context.Session["UserSno"].ToString());
                        cmd.Parameters.AddWithValue("@VoucherType", "Debit");
                        long CSno = vdbmngr.insertScalar(cmd);
                        foreach (CashDetails o in obj.CashDetails)
                        {
                            cmd = new MySqlCommand("Insert into Subpayable (RefNo,HeadSno,Amount) values (@RefNo,@HeadSno,@Amount)");
                            cmd.Parameters.AddWithValue("@RefNo", CSno);
                            cmd.Parameters.AddWithValue("@HeadSno", o.SNo);
                            cmd.Parameters.AddWithValue("@Amount", o.amount);
                            vdbmngr.insert(cmd);
                        }
                    }
                }
                else if (VoucherType == "SalaryAdvance" || VoucherType == "SalaryPayble")
                {

                    if (LevelType == "AccountsOfficer" || LevelType == "Director")
                    {
                        cmd = new MySqlCommand("Insert into cashpayables (BranchID,CashTo,DOE,VocherID,Remarks,Amount,Approvedby,onNameof,Status,Created_by,VoucherType,ApprovalRemarks,ApprovedAmount,DOR) values (@BranchID,@CashTo,@DOE,@VocherID,@Remarks,@Amount,@Approvedby,@onNameof,@Status,@Created_by,@VoucherType,@ApprovalRemarks,@ApprovedAmount,@DOR)");
                        cmd.Parameters.AddWithValue("@ApprovalRemarks", Remarks);
                        cmd.Parameters.AddWithValue("@ApprovedAmount", Amount);
                        cmd.Parameters.AddWithValue("@Status", "A");
                        cmd.Parameters.AddWithValue("@Approvedby", context.Session["UserSno"].ToString());
                    }
                    else
                    {
                        cmd = new MySqlCommand("Insert into cashpayables (BranchID,CashTo,DOE,VocherID,Remarks,Amount,Approvedby,onNameof,Status,Created_by,VoucherType,DOR) values (@BranchID,@CashTo,@DOE,@VocherID,@Remarks,@Amount,@Approvedby,@onNameof,@Status,@Created_by,@VoucherType,@DOR)");
                        cmd.Parameters.AddWithValue("@Status", "R");
                        cmd.Parameters.AddWithValue("@Approvedby", EmpApprove);
                    }
                    cmd.Parameters.AddWithValue("@BranchID", BranchID);
                    cmd.Parameters.AddWithValue("@CashTo", CashTo);
                    cmd.Parameters.AddWithValue("@DOE", ServerDateCurrentdate);
                    cmd.Parameters.AddWithValue("@DOR", ServerDateCurrentdate);
                    cmd.Parameters.AddWithValue("@VocherID", VocherID);
                    cmd.Parameters.AddWithValue("@Remarks", Remarks);
                    cmd.Parameters.AddWithValue("@Amount", Amount);
                    cmd.Parameters.AddWithValue("@onNameof", "");
                    cmd.Parameters.AddWithValue("@Created_by", context.Session["UserSno"].ToString());
                    cmd.Parameters.AddWithValue("@VoucherType", VoucherType);
                    long CashSno = vdbmngr.insertScalar(cmd);
                    foreach (CashDetails o in obj.CashDetails)
                    {
                        //salaryadvance Effecting In Hrms Start
                        cmd = new MySqlCommand("SELECT  Sno, BranchId, HeadName, LimitAmount, AccountType, AgentID, EmpID, accountcode, flag FROM accountheads WHERE (Sno = @headsno) AND (BranchId = @branchid)");
                        cmd.Parameters.AddWithValue("@headsno", o.SNo);
                        cmd.Parameters.AddWithValue("@branchid", BranchID);
                        DataTable dtheadaccountname = vdbmngr.SelectQuery(cmd).Tables[0];
                        string currentMonth = ServerDateCurrentdate.Month.ToString();
                        string currentYear = ServerDateCurrentdate.Year.ToString();
                        cmd = new MySqlCommand("Insert into Subpayable (RefNo,HeadSno,Amount) values (@RefNo,@HeadSno,@Amount)");
                        cmd.Parameters.AddWithValue("@RefNo", CashSno);
                        cmd.Parameters.AddWithValue("@HeadSno", o.SNo);
                        cmd.Parameters.AddWithValue("@Amount", o.amount);
                        vdbmngr.insert(cmd);
                    }
                    cmd = new MySqlCommand("SELECT sno, name, ledgercode FROM othercolletion_name where name=@name");
                    cmd.Parameters.AddWithValue("@name", Description);
                    DataTable dtothrescollection = vdbmngr.SelectQuery(cmd).Tables[0];
                    if (dtothrescollection.Rows.Count > 0)
                    {
                        string othersid = dtothrescollection.Rows[0]["sno"].ToString();
                        cmd = new MySqlCommand("update othercolletion_name set  name=@name where sno=@sno");
                        cmd.Parameters.AddWithValue("@name", Description);
                        cmd.Parameters.AddWithValue("@sno", othersid);
                        if (vdbmngr.Update(cmd) == 0)
                        {
                            cmd = new MySqlCommand("insert into othercolletion_name (name)values(@name)");
                            cmd.Parameters.AddWithValue("@name", Description);
                            vdbmngr.insert(cmd);
                        }
                    }
                    else
                    {
                        cmd = new MySqlCommand("insert into othercolletion_name (name)values(@name)");
                        cmd.Parameters.AddWithValue("@name", Description);
                        vdbmngr.insert(cmd);
                    }
                }
                else
                {
                    if (LevelType == "AccountsOfficer" || LevelType == "Director")
                    {
                        cmd = new MySqlCommand("Insert into cashpayables (BranchID,CashTo,DOE,VocherID,Remarks,Amount,Approvedby,onNameof,Status,Created_by,VoucherType,ApprovalRemarks,ApprovedAmount,DOR) values (@BranchID,@CashTo,@DOE,@VocherID,@Remarks,@Amount,@Approvedby,@onNameof,@Status,@Created_by,@VoucherType,@ApprovalRemarks,@ApprovedAmount,@DOR)");
                        cmd.Parameters.AddWithValue("@ApprovalRemarks", Remarks);
                        cmd.Parameters.AddWithValue("@ApprovedAmount", Amount);
                        cmd.Parameters.AddWithValue("@Status", "A");
                        cmd.Parameters.AddWithValue("@Approvedby", context.Session["UserSno"].ToString());
                    }
                    else
                    {
                        cmd = new MySqlCommand("Insert into cashpayables (BranchID,CashTo,DOE,VocherID,Remarks,Amount,Approvedby,onNameof,Status,Created_by,VoucherType,DOR) values (@BranchID,@CashTo,@DOE,@VocherID,@Remarks,@Amount,@Approvedby,@onNameof,@Status,@Created_by,@VoucherType,@DOR)");
                        cmd.Parameters.AddWithValue("@Status", "R");
                        cmd.Parameters.AddWithValue("@Approvedby", EmpApprove);
                    }
                    cmd.Parameters.AddWithValue("@BranchID", BranchID);
                    cmd.Parameters.AddWithValue("@CashTo", CashTo);
                    cmd.Parameters.AddWithValue("@DOE", ServerDateCurrentdate);
                    cmd.Parameters.AddWithValue("@DOR", ServerDateCurrentdate);
                    cmd.Parameters.AddWithValue("@VocherID", VocherID);
                    cmd.Parameters.AddWithValue("@Remarks", Remarks);
                    cmd.Parameters.AddWithValue("@Amount", Amount);
                    cmd.Parameters.AddWithValue("@onNameof", Description);
                    cmd.Parameters.AddWithValue("@Created_by", context.Session["UserSno"].ToString());
                    cmd.Parameters.AddWithValue("@VoucherType", VoucherType);
                    long CashSno = vdbmngr.insertScalar(cmd);
                    foreach (CashDetails o in obj.CashDetails)
                    {
                        cmd = new MySqlCommand("Insert into Subpayable (RefNo,HeadSno,Amount) values (@RefNo,@HeadSno,@Amount)");
                        cmd.Parameters.AddWithValue("@RefNo", CashSno);
                        cmd.Parameters.AddWithValue("@HeadSno", o.SNo);
                        cmd.Parameters.AddWithValue("@Amount", o.amount);
                        vdbmngr.insert(cmd);
                    }
                    if (transactiontype != "Employee" || transactiontype != "Select")
                    {
                        cmd = new MySqlCommand("SELECT sno, name, ledgercode FROM othercolletion_name where name=@name");
                        cmd.Parameters.AddWithValue("@name", Description);
                        DataTable dtothrescollection = vdbmngr.SelectQuery(cmd).Tables[0];
                        if (dtothrescollection.Rows.Count > 0)
                        {
                            string othersid = dtothrescollection.Rows[0]["sno"].ToString();
                            cmd = new MySqlCommand("update othercolletion_name set  name=@name where sno=@sno");
                            cmd.Parameters.AddWithValue("@name", Description);
                            cmd.Parameters.AddWithValue("@sno", othersid);
                            if (vdbmngr.Update(cmd) == 0)
                            {
                                cmd = new MySqlCommand("insert into othercolletion_name (name)values(@name)");
                                cmd.Parameters.AddWithValue("@name", Description);
                                vdbmngr.insert(cmd);
                            }
                        }
                        else
                        {
                            cmd = new MySqlCommand("insert into othercolletion_name (name)values(@name)");
                            cmd.Parameters.AddWithValue("@name", Description);
                            vdbmngr.insert(cmd);
                        }
                        if (transactiontype == "Employee")
                        {
                            foreach (CashDetails o in obj.CashDetails)
                            {
                                //salaryadvance Effecting In Hrms Start
                                string currentMonth = ServerDateCurrentdate.Month.ToString();
                                string currentYear = ServerDateCurrentdate.Year.ToString();
                                string mnth = "";
                                if (backmonth >= 10)
                                {
                                    mnth = "" + backmonth + "";
                                }
                                else
                                {
                                    mnth = "0" + backmonth + "";

                                }
                                // End
                                cmd = new MySqlCommand("Insert into Subpayable (RefNo,HeadSno,Amount) values (@RefNo,@HeadSno,@Amount)");
                                cmd.Parameters.AddWithValue("@RefNo", CashSno);
                                cmd.Parameters.AddWithValue("@HeadSno", o.SNo);
                                cmd.Parameters.AddWithValue("@Amount", o.amount);
                                vdbmngr.insert(cmd);
                            }
                        }
                    }
                    else
                    {
                        // naveen
                        if (transactiontype == "Employee")
                        {
                            foreach (CashDetails o in obj.CashDetails)
                            {
                                //salaryadvance Effecting In Hrms Start
                                string currentMonth = ServerDateCurrentdate.Month.ToString();
                                string currentYear = ServerDateCurrentdate.Year.ToString();
                                string mnth = "";
                                if (backmonth >= 10)
                                {
                                    mnth = "" + backmonth + "";
                                }
                                else
                                {
                                    mnth = "0" + backmonth + "";

                                }
                                // End
                                cmd = new MySqlCommand("Insert into Subpayable (RefNo,HeadSno,Amount) values (@RefNo,@HeadSno,@Amount)");
                                cmd.Parameters.AddWithValue("@RefNo", CashSno);
                                cmd.Parameters.AddWithValue("@HeadSno", o.SNo);
                                cmd.Parameters.AddWithValue("@Amount", o.amount);
                                vdbmngr.insert(cmd);
                            }
                        }

                    }
                }
                msg = "Voucher raised successfully";
            }
            else
            {
                string VocherID = obj.spnVoucherID;
                cmd = new MySqlCommand("Update  cashpayables Set Amount=@Amount,EmpId=@EmpId,Remarks=@Remarks,onNameof=@onNameof,Modify_by=@Modify_by,CashTo=@CashTo,Approvedby=@Approvedby,VoucherType=@VoucherType where Sno=@VocherId and BranchID=@BranchID");
                cmd.Parameters.AddWithValue("@Amount", Amount);
                cmd.Parameters.AddWithValue("@EmpId", Employee);
                cmd.Parameters.AddWithValue("@Remarks", Remarks);
                cmd.Parameters.AddWithValue("@Modify_by", context.Session["UserSno"].ToString());
                cmd.Parameters.AddWithValue("@CashTo", CashTo);
                cmd.Parameters.AddWithValue("@Approvedby", EmpApprove);
                cmd.Parameters.AddWithValue("@VocherId", VocherID);
                cmd.Parameters.AddWithValue("@BranchID", BranchID);
                cmd.Parameters.AddWithValue("@onNameof", Description);
                cmd.Parameters.AddWithValue("@VoucherType", VoucherType);
                vdbmngr.Update(cmd);
                cmd = new MySqlCommand("SELECT Sno FROM cashpayables WHERE (BranchID = @BranchID) AND (Sno = @VocherID)");
                cmd.Parameters.AddWithValue("@BranchID", BranchID);
                cmd.Parameters.AddWithValue("@VocherID", VocherID);
                DataTable dtCash = vdbmngr.SelectQuery(cmd).Tables[0];
                if (dtCash.Rows.Count > 0)
                {
                    string CashRefNo = dtCash.Rows[0]["Sno"].ToString();
                    cmd = new MySqlCommand("Delete from Subpayable where RefNo=@RefNo");
                    cmd.Parameters.AddWithValue("@RefNo", CashRefNo);
                    vdbmngr.Delete(cmd);
                    foreach (CashDetails o in obj.CashDetails)
                    {
                        cmd = new MySqlCommand("Insert into Subpayable (RefNo,HeadSno,Amount) values (@RefNo,@HeadSno,@Amount)");
                        cmd.Parameters.AddWithValue("@RefNo", CashRefNo);
                        cmd.Parameters.AddWithValue("@HeadSno", o.SNo);
                        cmd.Parameters.AddWithValue("@Amount", o.amount);
                        vdbmngr.insert(cmd);
                    }
                }
                msg = "Voucher Updated successfully";
            }
            string response = GetJson(msg);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string msg = ex.Message;
            string response = GetJson(msg);
            context.Response.Write(response);
        }
    }
    private void GetApproveEmployeeNames(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            DataTable dtEmployee = new DataTable();
            cmd = new MySqlCommand("SELECT Sno, EmpName FROM empmanage WHERE (Branch = @BranchID) and (Leveltype='Manager' OR LevelType = 'AccountsOfficer')");
            cmd.Parameters.AddWithValue("@BranchID", context.Session["branch"].ToString());
            dtEmployee = vdbmngr.SelectQuery(cmd).Tables[0];
            List<Employee> Employeelist = new List<Employee>();
            foreach (DataRow dr in dtEmployee.Rows)
            {
                Employee b = new Employee() { Sno = dr["Sno"].ToString(), UserName = dr["EmpName"].ToString() };
                Employeelist.Add(b);
            }
            cmd = new MySqlCommand("SELECT Sno, EmpName, Branch FROM empmanage WHERE (LevelType = 'AccountsOfficer') AND (Branch = @SuperBranch)");
            cmd.Parameters.AddWithValue("@SuperBranch", context.Session["SuperBranch"].ToString());
            DataTable dtDirector = vdbmngr.SelectQuery(cmd).Tables[0];
            foreach (DataRow dr in dtDirector.Rows)
            {
                Employee b = new Employee() { Sno = dr["Sno"].ToString(), UserName = dr["EmpName"].ToString() };
                Employeelist.Add(b);
            }
            string response = GetJson(Employeelist);
            context.Response.Write(response);
        }
        catch
        {
        }
    }
    private void GetEmployeeNames(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            DataTable dtEmployee = new DataTable();
            cmd = new MySqlCommand("SELECT Sno, EmpName FROM empmanage WHERE (Branch = @BranchID)");
            cmd.Parameters.AddWithValue("@BranchID", context.Session["branch"].ToString());
            dtEmployee = vdbmngr.SelectQuery(cmd).Tables[0];
            List<Employee> Employeelist = new List<Employee>();
            foreach (DataRow dr in dtEmployee.Rows)
            {
                Employee b = new Employee() { Sno = dr["Sno"].ToString(), UserName = dr["EmpName"].ToString() };
                Employeelist.Add(b);
            }
            string response = GetJson(Employeelist);
            context.Response.Write(response);
        }
        catch
        {
        }
    }
    class Employee
    {
        public string Sno { get; set; }
        public string UserName { get; set; }
    }
    private void GetAllIndentTypes(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            string BranchID = context.Request["BranchID"];
            string Inddate = context.Request["IndentDate"];
            DateTime ServerDateCurrentdate = Convert.ToDateTime(Inddate);
            cmd = new MySqlCommand("SELECT  IndentNo, IndentType FROM indents WHERE (Branch_id = @BranchID) AND (I_date BETWEEN @d1 AND @d2)");
            cmd.Parameters.AddWithValue("@BranchID", BranchID);
            cmd.Parameters.AddWithValue("@d1", GetLowDate(ServerDateCurrentdate));
            cmd.Parameters.AddWithValue("@d2", GetHighDate(ServerDateCurrentdate));
            DataTable dtIndent = vdbmngr.SelectQuery(cmd).Tables[0];
            List<Indentcls> indList = new List<Indentcls>();
            if (dtIndent.Rows.Count > 0)
            {
                foreach (DataRow dr in dtIndent.Rows)
                {
                    Indentcls GetIndent = new Indentcls();
                    GetIndent.IndentType = dr["IndentType"].ToString();
                    indList.Add(GetIndent);
                }
            }
            string response = GetJson(indList);
            context.Response.Write(response);
        }
        catch
        {
        }
    }
    public class Indentcls
    {
        public string IndentType { get; set; }
    }
    public class dashboard
    {
        public string DCNo { get; set; }
        public string DispatchTime { get; set; }
        public string Empname { get; set; }
        public string RouteName { get; set; }
        public string Vehicleno { get; set; }
    }
    private void btnEditDCSaveclick(string jsonString, HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();

            DateTime ServerDateCurrentdate = VehicleDBMgr.GetTime(vdbmngr.conn);
            List<string> MsgList = new List<string>();
            var js = new JavaScriptSerializer();
            Orders obj = js.Deserialize<Orders>(jsonString);
            string tripid = obj.tripid;
            string vehicleno = obj.VehicleNo;
            string status = obj.status;
            string EmpID = obj.EmpID;
            context.Session["TripIDSno"] = tripid;
            string DispMode = "";
            string msg = "";
            cmd = new MySqlCommand("SELECT triproutes.Tripdata_sno, dispatch.DispMode,dispatch.BranchID FROM triproutes INNER JOIN dispatch ON triproutes.RouteID = dispatch.sno WHERE (triproutes.Tripdata_sno = @DcNO)");
            cmd.Parameters.AddWithValue("@DcNO", tripid);
            DataTable dtDc = vdbmngr.SelectQuery(cmd).Tables[0];
            if (dtDc.Rows.Count > 0)
            {
                DispMode = dtDc.Rows[0]["DispMode"].ToString();
            }
            if (DispMode == "AGENT")
            {
                string BranchID = dtDc.Rows[0]["BranchID"].ToString();
                cmd = new MySqlCommand("SELECT branchproducts.unitprice, branchproducts.product_sno, productsdata.Qty, productsdata.Units FROM branchproducts INNER JOIN productsdata ON branchproducts.product_sno = productsdata.sno WHERE (branchproducts.branch_sno = @BranchID)  and (branchproducts.flag=@flag)");
                cmd.Parameters.AddWithValue("@BranchID", BranchID);
                cmd.Parameters.AddWithValue("@flag", 1);
                DataTable dtBranchProduct = vdbmngr.SelectQuery(cmd).Tables[0];
                cmd = new MySqlCommand("SELECT productsdata.UnitPrice,productsdata.Qty, productsdata.Units, branchproducts.product_sno, branchproducts.unitprice AS Bunitprice , productsdata.ProductName FROM productsdata INNER JOIN branchproducts ON productsdata.sno = branchproducts.product_sno INNER JOIN branchmappingtable ON branchproducts.branch_sno = branchmappingtable.SuperBranch WHERE (branchmappingtable.SubBranch = @BranchID)");
                cmd.Parameters.AddWithValue("@BranchID", BranchID);
                DataTable dtProduct = vdbmngr.SelectQuery(cmd).Tables[0];
                foreach (orderdetail o in obj.data)
                {
                    if (o.Productsno != null)
                    {
                        cmd = new MySqlCommand("update tripsubdata set Tripdata_Sno=@Tripdata_Sno,ProductId=@ProductId,Qty=@Qty,DeliverQty=@deliverqty where Tripdata_Sno=@Tripdata_Sno and ProductId=@ProductId");
                        cmd.Parameters.AddWithValue("@Tripdata_Sno", tripid);
                        cmd.Parameters.AddWithValue("@ProductId", o.Productsno);
                        float qty;
                        float.TryParse(o.Qty, out qty);
                        float manuftreming_qty = 0;
                        float.TryParse(o.RemainingQty, out manuftreming_qty);
                        cmd.Parameters.AddWithValue("@Qty", qty);
                        float delqty = 0;
                        cmd.Parameters.AddWithValue("@deliverqty", delqty);
                        if (vdbmngr.Update(cmd) == 0)
                        {
                            cmd = new MySqlCommand("insert into tripsubdata (Tripdata_Sno,ProductId,Qty,DeliverQty)values(@Tripdata_Sno,@ProductId,@Qty,@deliverqty)");
                            cmd.Parameters.AddWithValue("@Tripdata_Sno", tripid);
                            cmd.Parameters.AddWithValue("@ProductId", o.Productsno);
                            cmd.Parameters.AddWithValue("@Qty", qty);
                            cmd.Parameters.AddWithValue("@deliverqty", delqty);
                            if (o.Qty != "0")
                            {
                                vdbmngr.insert(cmd);
                            }
                        }
                        string AunitPrice = "0";
                        if (dtBranchProduct.Rows.Count > 0)
                        {
                            DataRow[] drProductamount = dtBranchProduct.Select("product_sno='" + o.Productsno + "'");
                            foreach (DataRow drc in drProductamount)
                            {
                                AunitPrice = drc.ItemArray[0].ToString();
                            }
                        }
                        if (AunitPrice == "0")
                        {
                            if (dtProduct.Rows.Count > 0)
                            {
                                DataRow[] drProductamount = dtProduct.Select("product_sno='" + o.Productsno + "'");
                                string BranchUnitPrice = "";
                                foreach (DataRow drc in drProductamount)
                                {
                                    BranchUnitPrice = drc.ItemArray[0].ToString();
                                    if (BranchUnitPrice != "0")
                                    {
                                        AunitPrice = drc.ItemArray[4].ToString();
                                    }
                                    else
                                    {
                                        AunitPrice = drc.ItemArray[0].ToString();
                                    }
                                }
                            }
                        }
                        cmd = new MySqlCommand("SELECT IndentNo, DTripId FROM indents_subtable WHERE (DTripId = @TripID)");
                        cmd.Parameters.AddWithValue("@TripID", tripid);
                        DataTable dtIndent = vdbmngr.SelectQuery(cmd).Tables[0];
                        string BranchIndentNo = dtIndent.Rows[0]["IndentNo"].ToString();
                        cmd = new MySqlCommand("Update indents_subtable set unitQty=@unitQty,UnitCost=@UnitCost,Status=@Status,DeliveryQty=@DeliveryQty where IndentNo=@IndentNo and Product_sno=@Product_sno and DtripID=@DtripID");
                        double UnitCost = 0;
                        double.TryParse(AunitPrice, out UnitCost);
                        UnitCost = Math.Round(UnitCost, 2);
                        double unitQty = 0;
                        double DeliveryQty = 0;
                        double.TryParse(o.Qty, out DeliveryQty);
                        DeliveryQty = Math.Round(DeliveryQty, 2);
                        cmd.Parameters.AddWithValue("@IndentNo", BranchIndentNo);
                        cmd.Parameters.AddWithValue("@Product_sno", o.Productsno);
                        cmd.Parameters.AddWithValue("@UnitCost", UnitCost);
                        cmd.Parameters.AddWithValue("@unitQty", unitQty);
                        cmd.Parameters.AddWithValue("@DeliveryQty", DeliveryQty);
                        cmd.Parameters.AddWithValue("@Status", "Delivered");
                        cmd.Parameters.AddWithValue("@DtripID", tripid);
                        if (vdbmngr.Update(cmd) == 0)
                        {
                            cmd = new MySqlCommand("insert into indents_subtable (IndentNo,Product_sno,Status,unitQty,UnitCost,OTripId,DtripID,DeliveryQty)values(@IndentNo,@Product_sno,@Status,@unitQty,@UnitCost,@OTripId,@DtripID,@DeliveryQty)");
                            cmd.Parameters.AddWithValue("@IndentNo", BranchIndentNo);
                            cmd.Parameters.AddWithValue("@Product_sno", o.Productsno);
                            cmd.Parameters.AddWithValue("@UnitCost", UnitCost);
                            cmd.Parameters.AddWithValue("@unitQty", unitQty);
                            cmd.Parameters.AddWithValue("@DeliveryQty", DeliveryQty);
                            cmd.Parameters.AddWithValue("@Status", "Delivered");
                            cmd.Parameters.AddWithValue("@OTripId", tripid);
                            cmd.Parameters.AddWithValue("@DtripID", tripid);
                            if (DeliveryQty != 0.0)
                            {
                                vdbmngr.insert(cmd);
                            }
                        }
                    }
                }
                if (status == "2")
                {
                    status = "C";
                    cmd = new MySqlCommand("update  indents_subtable Set DeliveryQty=@DeliveryQty where DtripID=@DtripID");
                    cmd.Parameters.AddWithValue("@DtripID", tripid);
                    double DeliveryQty = 0;
                    cmd.Parameters.AddWithValue("@DeliveryQty", DeliveryQty);
                    vdbmngr.Delete(cmd);
                    cmd = new MySqlCommand("UPDATE tripdata SET Status = @status, VehicleNo = @vehicleno, Modified_EmpID = @modified_empid, ModifiedDate = @modifieddate WHERE (Sno = @tripid)");

                    if (status == "2")
                    {
                        status = "C";
                    }

                    cmd.Parameters.AddWithValue("@status", status);
                    cmd.Parameters.AddWithValue("@vehicleno", vehicleno);
                    cmd.Parameters.AddWithValue("@modified_empid", context.Session["UserSno"]);
                    cmd.Parameters.AddWithValue("@modifieddate", ServerDateCurrentdate);
                    cmd.Parameters.AddWithValue("@tripid", tripid);
                    vdbmngr.Update(cmd);
                }
                foreach (inventorydetail iv in obj.invdata)
                {
                    if (iv.InventorySno != null)
                    {
                        float qty;
                        float.TryParse(iv.Qty, out qty);
                        if (qty > 0)
                        {
                            cmd = new MySqlCommand("update tripinvdata set Tripdata_Sno=@Tripdata_Sno,invid=@invId,Qty=@Qty where Tripdata_Sno=@Tripdata_Sno and invid=@invId");
                            cmd.Parameters.AddWithValue("@Tripdata_Sno", tripid);
                            cmd.Parameters.AddWithValue("@invId", iv.InventorySno);
                            cmd.Parameters.AddWithValue("@Qty", qty);
                            if (vdbmngr.Update(cmd) == 0)
                            {
                                cmd = new MySqlCommand("insert into tripinvdata (Tripdata_Sno,invid,Qty,Remaining)values(@Tripdata_Sno,@invId,@Qty,@remaining)");
                                cmd.Parameters.AddWithValue("@Tripdata_Sno", tripid);
                                cmd.Parameters.AddWithValue("@invId", iv.InventorySno);
                                cmd.Parameters.AddWithValue("@Qty", qty);
                                cmd.Parameters.AddWithValue("@remaining", qty);
                                vdbmngr.insert(cmd);
                            }
                        }
                    }
                }
            }
            else if (DispMode == "Others")
            {
                string BranchID = dtDc.Rows[0]["BranchID"].ToString();
                cmd = new MySqlCommand("SELECT branchproducts.unitprice, branchproducts.product_sno, productsdata.Qty, productsdata.Units FROM branchproducts INNER JOIN productsdata ON branchproducts.product_sno = productsdata.sno WHERE (branchproducts.branch_sno = @BranchID)  and (branchproducts.flag=@flag)");
                cmd.Parameters.AddWithValue("@BranchID", BranchID);
                cmd.Parameters.AddWithValue("@flag", 1);
                DataTable dtBranchProduct = vdbmngr.SelectQuery(cmd).Tables[0];
                cmd = new MySqlCommand("SELECT productsdata.UnitPrice,productsdata.Qty, productsdata.Units, branchproducts.product_sno, branchproducts.unitprice AS Bunitprice , productsdata.ProductName FROM productsdata INNER JOIN branchproducts ON productsdata.sno = branchproducts.product_sno INNER JOIN branchmappingtable ON branchproducts.branch_sno = branchmappingtable.SuperBranch WHERE (branchmappingtable.SubBranch = @BranchID)");
                cmd.Parameters.AddWithValue("@BranchID", BranchID);
                DataTable dtProduct = vdbmngr.SelectQuery(cmd).Tables[0];
                foreach (orderdetail o in obj.data)
                {
                    if (o.Productsno != null)
                    {
                        cmd = new MySqlCommand("update tripsubdata set Tripdata_Sno=@Tripdata_Sno,ProductId=@ProductId,Qty=@Qty,DeliverQty=@deliverqty where Tripdata_Sno=@Tripdata_Sno and ProductId=@ProductId");
                        cmd.Parameters.AddWithValue("@Tripdata_Sno", tripid);
                        cmd.Parameters.AddWithValue("@ProductId", o.Productsno);
                        float qty;
                        float.TryParse(o.Qty, out qty);
                        float manuftreming_qty = 0;
                        float.TryParse(o.RemainingQty, out manuftreming_qty);
                        cmd.Parameters.AddWithValue("@Qty", qty);
                        float delqty = 0;
                        cmd.Parameters.AddWithValue("@deliverqty", delqty);
                        if (vdbmngr.Update(cmd) == 0)
                        {
                            cmd = new MySqlCommand("insert into tripsubdata (Tripdata_Sno,ProductId,Qty,DeliverQty)values(@Tripdata_Sno,@ProductId,@Qty,@deliverqty)");
                            cmd.Parameters.AddWithValue("@Tripdata_Sno", tripid);
                            cmd.Parameters.AddWithValue("@ProductId", o.Productsno);
                            cmd.Parameters.AddWithValue("@Qty", qty);
                            cmd.Parameters.AddWithValue("@deliverqty", delqty);
                            if (o.Qty != "0")
                            {
                                vdbmngr.insert(cmd);
                            }
                        }
                        string AunitPrice = "0";
                        if (dtBranchProduct.Rows.Count > 0)
                        {
                            DataRow[] drProductamount = dtBranchProduct.Select("product_sno='" + o.Productsno + "'");
                            foreach (DataRow drc in drProductamount)
                            {
                                AunitPrice = drc.ItemArray[0].ToString();
                            }
                        }
                        if (AunitPrice == "0")
                        {

                            DataRow[] drProductamount = dtProduct.Select("product_sno='" + o.Productsno + "'");
                            string BranchUnitPrice = "";
                            foreach (DataRow drc in drProductamount)
                            {
                                BranchUnitPrice = drc.ItemArray[0].ToString();
                                if (BranchUnitPrice != "0")
                                {
                                    AunitPrice = drc.ItemArray[4].ToString();
                                }
                                else
                                {
                                    AunitPrice = drc.ItemArray[0].ToString();
                                }
                            }
                        }
                        cmd = new MySqlCommand("SELECT IndentNo, DTripId FROM indents_subtable WHERE (DTripId = @TripID)");
                        cmd.Parameters.AddWithValue("@TripID", tripid);
                        DataTable dtIndent = vdbmngr.SelectQuery(cmd).Tables[0];
                        string BranchIndentNo = dtIndent.Rows[0]["IndentNo"].ToString();
                        cmd = new MySqlCommand("Update indents_subtable set unitQty=@unitQty,UnitCost=@UnitCost,Status=@Status,DeliveryQty=@DeliveryQty where IndentNo=@IndentNo and Product_sno=@Product_sno and DtripID=@DtripID");
                        double UnitCost = 0;
                        double.TryParse(AunitPrice, out UnitCost);
                        UnitCost = Math.Round(UnitCost, 2);
                        double unitQty = 0;
                        double DeliveryQty = 0;
                        double.TryParse(o.Qty, out DeliveryQty);
                        DeliveryQty = Math.Round(DeliveryQty, 2);
                        cmd.Parameters.AddWithValue("@IndentNo", BranchIndentNo);
                        cmd.Parameters.AddWithValue("@Product_sno", o.Productsno);
                        cmd.Parameters.AddWithValue("@UnitCost", UnitCost);
                        cmd.Parameters.AddWithValue("@unitQty", unitQty);
                        cmd.Parameters.AddWithValue("@DeliveryQty", DeliveryQty);
                        cmd.Parameters.AddWithValue("@Status", "Delivered");
                        cmd.Parameters.AddWithValue("@DtripID", tripid);
                        if (vdbmngr.Update(cmd) == 0)
                        {
                            cmd = new MySqlCommand("insert into indents_subtable (IndentNo,Product_sno,Status,unitQty,UnitCost,OTripId,DtripID,DeliveryQty)values(@IndentNo,@Product_sno,@Status,@unitQty,@UnitCost,@OTripId,@DtripID,@DeliveryQty)");
                            cmd.Parameters.AddWithValue("@IndentNo", BranchIndentNo);
                            cmd.Parameters.AddWithValue("@Product_sno", o.Productsno);
                            cmd.Parameters.AddWithValue("@UnitCost", UnitCost);
                            cmd.Parameters.AddWithValue("@unitQty", unitQty);
                            cmd.Parameters.AddWithValue("@DeliveryQty", DeliveryQty);
                            cmd.Parameters.AddWithValue("@Status", "Delivered");
                            cmd.Parameters.AddWithValue("@OTripId", tripid);
                            cmd.Parameters.AddWithValue("@DtripID", tripid);
                            if (DeliveryQty != 0.0)
                            {
                                vdbmngr.insert(cmd);
                            }
                        }
                    }
                }
                if (status == "2")
                {
                    status = "C";
                    cmd = new MySqlCommand("update  indents_subtable Set DeliveryQty=@DeliveryQty where DtripID=@DtripID");
                    cmd.Parameters.AddWithValue("@DtripID", tripid);
                    double DeliveryQty = 0;
                    cmd.Parameters.AddWithValue("@DeliveryQty", DeliveryQty);
                    vdbmngr.Delete(cmd);
                    cmd = new MySqlCommand("UPDATE tripdata SET Status = @status, VehicleNo = @vehicleno, EmpId = @EmpId, Modified_EmpID = @modified_empid, ModifiedDate = @modifieddate WHERE (Sno = @tripid)");

                    if (status == "2")
                    {
                        status = "C";
                    }

                    cmd.Parameters.AddWithValue("@status", status);
                    cmd.Parameters.AddWithValue("@vehicleno", vehicleno);
                    cmd.Parameters.AddWithValue("@EmpId", EmpID);
                    cmd.Parameters.AddWithValue("@modified_empid", context.Session["UserSno"]);
                    cmd.Parameters.AddWithValue("@modifieddate", ServerDateCurrentdate);
                    cmd.Parameters.AddWithValue("@tripid", tripid);
                    vdbmngr.Update(cmd);
                }
                foreach (inventorydetail iv in obj.invdata)
                {
                    if (iv.InventorySno != null)
                    {
                        float qty;
                        float.TryParse(iv.Qty, out qty);
                        if (qty > 0)
                        {
                            cmd = new MySqlCommand("update tripinvdata set Tripdata_Sno=@Tripdata_Sno,invid=@invId,Qty=@Qty where Tripdata_Sno=@Tripdata_Sno and invid=@invId");
                            cmd.Parameters.AddWithValue("@Tripdata_Sno", tripid);
                            cmd.Parameters.AddWithValue("@invId", iv.InventorySno);
                            cmd.Parameters.AddWithValue("@Qty", qty);
                            if (vdbmngr.Update(cmd) == 0)
                            {
                                cmd = new MySqlCommand("insert into tripinvdata (Tripdata_Sno,invid,Qty,Remaining)values(@Tripdata_Sno,@invId,@Qty,@remaining)");
                                cmd.Parameters.AddWithValue("@Tripdata_Sno", tripid);
                                cmd.Parameters.AddWithValue("@invId", iv.InventorySno);
                                cmd.Parameters.AddWithValue("@Qty", qty);
                                cmd.Parameters.AddWithValue("@remaining", qty);
                                vdbmngr.insert(cmd);
                            }
                        }
                    }
                }
            }
            else
            {
                cmd = new MySqlCommand("UPDATE tripdata SET Status = @status, VehicleNo = @vehicleno, EmpId = @EmpId, Modified_EmpID = @modified_empid, ModifiedDate = @modifieddate WHERE (Sno = @tripid)");
                if (status == "0")
                {
                    status = "A";
                }
                if (status == "1")
                {
                    status = "A";
                }
                if (status == "2")
                {
                    status = "C";
                }
                if (status == "3")
                {
                    status = "P";
                }
                if (status == "4")
                {
                    status = "V";
                }
                //cmd.Parameters.AddWithValue("@assignDate", dtassign);
                //cmd.Parameters.AddWithValue("@I_date", dtindent);
                cmd.Parameters.AddWithValue("@status", status);
                cmd.Parameters.AddWithValue("@vehicleno", vehicleno);
                cmd.Parameters.AddWithValue("@EmpId", EmpID);
                cmd.Parameters.AddWithValue("@modified_empid", context.Session["UserSno"]);
                cmd.Parameters.AddWithValue("@modifieddate", ServerDateCurrentdate);
                cmd.Parameters.AddWithValue("@tripid", tripid);
                vdbmngr.Update(cmd);
                foreach (orderdetail o in obj.data)
                {
                    if (o.Productsno != null)
                    {
                        if (o.Qty != "0")
                        {
                            cmd = new MySqlCommand("update tripsubdata set Tripdata_Sno=@Tripdata_Sno,ProductId=@ProductId,Qty=@Qty where Tripdata_Sno=@Tripdata_Sno and ProductId=@ProductId");
                            cmd.Parameters.AddWithValue("@Tripdata_Sno", tripid);
                            cmd.Parameters.AddWithValue("@ProductId", o.Productsno);
                            float qty;
                            float.TryParse(o.Qty, out qty);
                            float manuftreming_qty = 0;
                            float.TryParse(o.RemainingQty, out manuftreming_qty);
                            cmd.Parameters.AddWithValue("@Qty", qty);
                            float delqty = 0;
                            cmd.Parameters.AddWithValue("@deliverqty", delqty);
                            if (vdbmngr.Update(cmd) == 0)
                            {
                                cmd = new MySqlCommand("insert into tripsubdata (Tripdata_Sno,ProductId,Qty,DeliverQty)values(@Tripdata_Sno,@ProductId,@Qty,@deliverqty)");
                                cmd.Parameters.AddWithValue("@Tripdata_Sno", tripid);
                                cmd.Parameters.AddWithValue("@ProductId", o.Productsno);
                                cmd.Parameters.AddWithValue("@Qty", qty);
                                cmd.Parameters.AddWithValue("@deliverqty", delqty);
                                vdbmngr.insert(cmd);
                            }
                        }
                        else
                        {
                            cmd = new MySqlCommand("DELETE FROM tripsubdata where Tripdata_Sno=@Tripdata_Sno and ProductId=@ProductId");
                            cmd.Parameters.AddWithValue("@Tripdata_Sno", tripid);
                            cmd.Parameters.AddWithValue("@ProductId", o.Productsno);
                            vdbmngr.Delete(cmd);
                        }
                    }
                }
                foreach (inventorydetail iv in obj.invdata)
                {
                    if (iv.InventorySno != null)
                    {
                        float qty;
                        float.TryParse(iv.Qty, out qty);

                        cmd = new MySqlCommand("update tripinvdata set Tripdata_Sno=@Tripdata_Sno,invid=@invId,Qty=@Qty,Remaining=@remaining where Tripdata_Sno=@Tripdata_Sno and invid=@invId");
                        cmd.Parameters.AddWithValue("@Tripdata_Sno", tripid);
                        cmd.Parameters.AddWithValue("@invId", iv.InventorySno);
                        cmd.Parameters.AddWithValue("@Qty", qty);
                        cmd.Parameters.AddWithValue("@remaining", qty);
                        if (vdbmngr.Update(cmd) == 0)
                        {
                            cmd = new MySqlCommand("insert into tripinvdata (Tripdata_Sno,invid,Qty,Remaining)values(@Tripdata_Sno,@invId,@Qty,@remaining)");
                            cmd.Parameters.AddWithValue("@Tripdata_Sno", tripid);
                            cmd.Parameters.AddWithValue("@invId", iv.InventorySno);
                            cmd.Parameters.AddWithValue("@Qty", qty);
                            cmd.Parameters.AddWithValue("@remaining", qty);
                            vdbmngr.insert(cmd);
                        }
                    }
                }
                string ProductName = "";
                double TotalQty = 0;
                foreach (orderdetail o in obj.data)
                {
                    if (o.Productsno != null)
                    {
                        if (o.Qty != "0")
                        {
                            double unitQty = 0;
                            double.TryParse(o.Qty, out unitQty);
                            ProductName += o.Product + "=" + Math.Round(unitQty, 2) + ";";
                            TotalQty += Math.Round(unitQty, 2);
                        }
                    }
                }
                string UserSno = context.Session["UserSno"].ToString();
                cmd = new MySqlCommand("SELECT Sno, EmpName FROM empmanage WHERE  (Sno = @Empsno)");
                cmd.Parameters.AddWithValue("@Empsno", UserSno);
                DataTable dtEmp = vdbmngr.SelectQuery(cmd).Tables[0];
                string empname = "";
                if (dtEmp.Rows.Count > 0)
                {
                    empname = dtEmp.Rows[0]["EmpName"].ToString();
                }
                cmd = new MySqlCommand("SELECT dispatch.sno, dispatch.DispName, mobilenotable.PhoneNumber FROM mobilenotable INNER JOIN dispatch ON mobilenotable.DispNo = dispatch.sno INNER JOIN triproutes ON mobilenotable.DispNo = triproutes.RouteID WHERE (triproutes.Tripdata_sno = @TripID)");
                cmd.Parameters.AddWithValue("@TripID", tripid);
                DataTable dtPhoneNumbers = vdbmngr.SelectQuery(cmd).Tables[0];
                if (dtPhoneNumbers.Rows.Count > 0)
                {
                    foreach (DataRow dr in dtPhoneNumbers.Rows)
                    {
                        string phonenumber = dr["PhoneNumber"].ToString();
                        string DispatchName = dr["DispName"].ToString();
                        if (phonenumber != "9382525919")
                        {
                            if (phonenumber.Length == 10)
                            {
                                try
                                {
                                    WebClient client = new WebClient();
                                    string baseurl = "http://www.smsstriker.com/API/sms.php?username=vaishnavidairy&password=vyshnavi@123&from=VYSNVI&to=" + phonenumber + "&msg=%20DCNo:" + tripid + "%20for%20" + DispatchName + "%20,%20 + Despatch%20Edit%20Completed%20" + ProductName + "TotalQty =" + TotalQty + "USER =" + empname + "&type=1";
                                    Stream data = client.OpenRead(baseurl);
                                    StreamReader reader = new StreamReader(data);
                                    string ResponseID = reader.ReadToEnd();
                                    data.Close();
                                    reader.Close();
                                }
                                catch
                                {
                                }
                            }
                        }
                    }
                }
                var jsonSerializer = new JavaScriptSerializer();
                jsonString = String.Empty;
                context.Request.InputStream.Position = 0;
                using (var inputStream = new StreamReader(context.Request.InputStream))
                {
                    jsonString = inputStream.ReadToEnd();
                }
            }
            msg = "Data Successfully Updated";
            MsgList.Add(msg);
            string response = GetJson(MsgList);
            context.Response.Write(response);

        }
        catch (Exception ex)
        {
            string msg = ex.Message;
            string response = GetJson(msg);
            context.Response.Write(response);
        }
    }
    private void GetEditDcProducts(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            string DcNo = context.Request["DcNo"];
            List<Products> Productslist = new List<Products>();
            cmd = new MySqlCommand("SELECT  tripdata.EmpId, tripdata.Sno, empmanage.Branch, tripdata.Status, tripdata.VehicleNo FROM tripdata INNER JOIN empmanage ON tripdata.EmpId = empmanage.Sno WHERE (tripdata.Sno = @TripID)");
            cmd.Parameters.AddWithValue("@TripID", DcNo);
            DataTable dtBranchID = vdbmngr.SelectQuery(cmd).Tables[0];
            string BranchID = "";
            string VehicleNo = "";
            string Status = "";
            if (dtBranchID.Rows.Count > 0)
            {
                BranchID = dtBranchID.Rows[0]["Branch"].ToString();
                VehicleNo = dtBranchID.Rows[0]["VehicleNo"].ToString();
                Status = dtBranchID.Rows[0]["Status"].ToString();
            }
            else
            {
                BranchID = context.Session["branch"].ToString();
                VehicleNo = "";
                Status = "";
            }
            cmd = new MySqlCommand("SELECT productsdata.sno, productsdata.ProductName, productsdata.Units, invmaster.Qty FROM productsdata INNER JOIN invmaster ON productsdata.Inventorysno = invmaster.sno INNER JOIN branchproducts ON productsdata.sno = branchproducts.product_sno WHERE (branchproducts.branch_sno = @BranchID) AND (branchproducts.FLAG=@FLAG) ORDER BY branchproducts.Rank");
            cmd.Parameters.AddWithValue("@FLAG", "1");
            cmd.Parameters.AddWithValue("@BranchID", BranchID);
            DataTable dtproductsdata = vdbmngr.SelectQuery(cmd).Tables[0];
            dtallProducts = new DataTable();
            dtallProducts.Columns.Add("sno");
            dtallProducts.Columns.Add("ProductName");
            dtallProducts.Columns.Add("TotalQty");
            dtallProducts.Columns.Add("Units");
            dtallProducts.Columns.Add("Qty");
            dtallProducts.Columns.Add("Tubs");
            dtallProducts.Columns.Add("Cans");
            foreach (DataRow dr in dtproductsdata.Rows)
            {
                DataRow newRow = dtallProducts.NewRow();
                newRow["sno"] = dr["sno"].ToString();
                newRow["ProductName"] = dr["ProductName"].ToString();
                newRow["TotalQty"] = "0";
                newRow["Units"] = dr["Units"].ToString();
                newRow["Qty"] = dr["Qty"].ToString();
                newRow["Tubs"] = "0";
                newRow["Cans"] = "0";
                dtallProducts.Rows.Add(newRow);
            }
            cmd = new MySqlCommand("SELECT productsdata.sno,productsdata.ProductName, tripsubdata.Qty AS TotalQty FROM tripdata INNER JOIN tripsubdata ON tripdata.Sno = tripsubdata.Tripdata_sno INNER JOIN productsdata ON tripsubdata.ProductId = productsdata.sno WHERE (tripdata.Sno = @tripid)");
            cmd.Parameters.AddWithValue("@tripid", DcNo);
            DataTable dttripprdt = vdbmngr.SelectQuery(cmd).Tables[0];
            foreach (DataRow drtripprdt in dttripprdt.Rows)
            {
                foreach (DataRow drprdtcpy in dtallProducts.Rows)
                {
                    if (drtripprdt["sno"].ToString() == drprdtcpy["sno"].ToString())
                    {
                        float qty = 0;
                        float.TryParse(drtripprdt["TotalQty"].ToString(), out qty);
                        float qtycpy = 0;
                        float.TryParse(drprdtcpy["TotalQty"].ToString(), out qtycpy);
                        float totalqty = qty + qtycpy;
                        float invqty = 0;
                        if (drprdtcpy["Units"].ToString() == "ltr")
                        {
                            float.TryParse(drprdtcpy["Qty"].ToString(), out invqty);
                            drprdtcpy["Cans"] = totalqty / invqty;
                        }
                        if (drprdtcpy["Units"].ToString() == "kgs")
                        {
                            float.TryParse(drprdtcpy["Qty"].ToString(), out invqty);
                            drprdtcpy["Cans"] = totalqty / invqty;
                        }
                        if (drprdtcpy["Units"].ToString() == "ml")
                        {
                            float.TryParse(drprdtcpy["Qty"].ToString(), out invqty);
                            drprdtcpy["Tubs"] = totalqty / invqty;
                        }
                        if (drprdtcpy["Units"].ToString() == "gms")
                        {
                        }
                        drprdtcpy["TotalQty"] = totalqty;
                    }
                    else
                    {
                    }
                }
            }
            int i = 1;
            foreach (DataRow dr in dtallProducts.Rows)
            {
                int prdtsno = 0;
                int.TryParse(dr["sno"].ToString(), out prdtsno);
                float total_indt_qty = 0;
                float.TryParse(dr["TotalQty"].ToString(), out total_indt_qty);
                Products getProducts = new Products();
                getProducts.snoO = i++.ToString();
                getProducts.ProductName = dr["ProductName"].ToString();
                getProducts.TotalQty = dr["TotalQty"].ToString();
                getProducts.Productsno = dr["sno"].ToString();
                getProducts.tubs = dr["Tubs"].ToString();
                getProducts.cans = dr["Cans"].ToString();
                getProducts.units = dr["Units"].ToString();
                getProducts.qty = dr["Qty"].ToString();
                getProducts.empid = empid;
                getProducts.vehcleno = VehicleNo;
                getProducts.status = Status;
                Productslist.Add(getProducts);
            }
            string response = GetJson(Productslist);
            context.Response.Write(response);
        }
        catch
        {
        }
    }
    private void GetEditInventoryClick(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            string RouteID = context.Request["RouteID"];
            string IndDate = context.Request["IndDate"];
            DateTime dtinddate = Convert.ToDateTime(IndDate);
            string ddledittype = context.Request["ddledittype"];
            if (ddledittype == "Sales Office")
            {
                cmd = new MySqlCommand("SELECT dispatch.sno, dispatch.DispName, dispatch.Branch_Id, tripdat.Sno AS tripid, invtransactions12.TransType, invtransactions12.FromTran, invtransactions12.ToTran, invtransactions12.Qty, invtransactions12.B_inv_sno, invtransactions12.DOE, invmaster.InvName FROM dispatch INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN (SELECT Sno, EmpId FROM tripdata WHERE (I_Date BETWEEN @d1 AND @d2)) tripdat ON triproutes.Tripdata_sno = tripdat.Sno INNER JOIN invtransactions12 ON dispatch.BranchID = invtransactions12.FromTran AND tripdat.Sno = invtransactions12.ToTran INNER JOIN invmaster ON invtransactions12.B_inv_sno = invmaster.sno WHERE (dispatch.sno = @routeid)");
            }
            if (ddledittype == "Routes")
            {
                cmd = new MySqlCommand("SELECT dispatch.sno, dispatch.DispName, dispatch.Branch_Id, tripdat.Sno AS tripid, invtransactions12.TransType, invtransactions12.Qty, invtransactions12.B_inv_sno, invtransactions12.DOE, invmaster.InvName, invtransactions12.FromTran,invtransactions12.ToTran  FROM dispatch INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN (SELECT Sno, EmpId FROM tripdata WHERE (I_Date BETWEEN @d1 AND @d2)) tripdat ON triproutes.Tripdata_sno = tripdat.Sno INNER JOIN invtransactions12 ON tripdat.Sno = invtransactions12.FromTran AND dispatch.Branch_Id = invtransactions12.ToTran INNER JOIN invmaster ON invtransactions12.B_inv_sno = invmaster.sno WHERE (dispatch.sno = @routeid)");
            }
            cmd.Parameters.AddWithValue("@routeid", RouteID);
            cmd.Parameters.AddWithValue("@d1", GetLowDate(dtinddate));
            cmd.Parameters.AddWithValue("@d2", GetHighDate(dtinddate));
            DataTable dt = vdbmngr.SelectQuery(cmd).Tables[0];
            cmd = new MySqlCommand("select InvName,flag,sno From invmaster Where Userdata_sno= @username");
            cmd.Parameters.AddWithValue("@username", context.Session["userdata_sno"].ToString());
            DataTable dtassigned_inv = vdbmngr.SelectQuery(cmd).Tables[0];
            DataTable dtallinv = new DataTable();
            dtallinv.Columns.Add("sno");
            dtallinv.Columns.Add("InvName");
            dtallinv.Columns.Add("TotalQty");
            dtallinv.Columns.Add("Branchid");
            dtallinv.Columns.Add("Tripid");
            foreach (DataRow dr in dtassigned_inv.Rows)
            {
                DataRow newRow = dtallinv.NewRow();
                newRow["sno"] = dr["sno"].ToString();
                newRow["InvName"] = dr["InvName"].ToString();
                newRow["TotalQty"] = "0";
                newRow["Branchid"] = "0";
                newRow["Tripid"] = "0";
                dtallinv.Rows.Add(newRow);
            }
            foreach (DataRow drinv in dt.Rows)
            {
                foreach (DataRow drallinv in dtallinv.Rows)
                {
                    if (drinv["B_inv_sno"].ToString() == drallinv["sno"].ToString())
                    {
                        float qtycpy = 0;
                        float.TryParse(drinv["Qty"].ToString(), out qtycpy);
                        float totalqty = qtycpy;
                        drallinv["TotalQty"] = totalqty;
                        if (ddledittype == "Sales Office")
                        {
                            drallinv["Branchid"] = drinv["FromTran"].ToString();
                            drallinv["Tripid"] = drinv["ToTran"].ToString();
                        }
                        if (ddledittype == "Routes")
                        {
                            drallinv["Branchid"] = drinv["ToTran"].ToString();
                            drallinv["Tripid"] = drinv["FromTran"].ToString();
                        }

                    }
                    else
                    {
                    }
                }
            }
            List<inventorymng> inventorylist = new List<inventorymng>();
            int i = 1;

            foreach (DataRow dr in dtallinv.Rows)
            {
                inventorymng Getinventorymng = new inventorymng();
                Getinventorymng.snoO = i++.ToString();
                Getinventorymng.inventoryname = dr["InvName"].ToString();
                Getinventorymng.sno = dr["sno"].ToString();
                Getinventorymng.totqty = dr["TotalQty"].ToString();
                Getinventorymng.brnchname = dr["Branchid"].ToString();
                Getinventorymng.tripid = dr["Tripid"].ToString();
                inventorylist.Add(Getinventorymng);
            }

            string response = GetJson(inventorylist);
            context.Response.Write(response);
        }
        catch
        {
        }
    }
    private void EditDcInventory(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            string DcNo = context.Request["DcNo"];
            cmd = new MySqlCommand("SELECT tripinvdata.Qty, invmaster.InvName, invmaster.sno FROM tripdata INNER JOIN tripinvdata ON tripdata.Sno = tripinvdata.Tripdata_sno INNER JOIN invmaster ON tripinvdata.invid = invmaster.sno WHERE (tripdata.Sno = @tripid)");
            cmd.Parameters.AddWithValue("@tripid", DcNo);
            DataTable dt = vdbmngr.SelectQuery(cmd).Tables[0];
            cmd = new MySqlCommand("select InvName,flag,sno From invmaster Where Userdata_sno= @username");
            cmd.Parameters.AddWithValue("@username", context.Session["userdata_sno"].ToString());
            DataTable dtassigned_inv = vdbmngr.SelectQuery(cmd).Tables[0];
            DataTable dtallinv = new DataTable();
            dtallinv.Columns.Add("sno");
            dtallinv.Columns.Add("InvName");
            dtallinv.Columns.Add("TotalQty");
            foreach (DataRow dr in dtassigned_inv.Rows)
            {
                DataRow newRow = dtallinv.NewRow();
                newRow["sno"] = dr["sno"].ToString();
                newRow["InvName"] = dr["InvName"].ToString();
                newRow["TotalQty"] = "0";
                dtallinv.Rows.Add(newRow);
            }
            foreach (DataRow drinv in dt.Rows)
            {
                foreach (DataRow drallinv in dtallinv.Rows)
                {
                    if (drinv["sno"].ToString() == drallinv["sno"].ToString())
                    {
                        float qtycpy = 0;
                        float.TryParse(drinv["Qty"].ToString(), out qtycpy);
                        float totalqty = qtycpy;
                        drallinv["TotalQty"] = totalqty;
                    }
                    else
                    {
                    }
                }
            }
            List<inventorymng> inventorylist = new List<inventorymng>();
            int i = 1;
            if (context.Session["get_orderedprdtsnames"] != "")
            {
                foreach (DataRow dr in dtallinv.Rows)
                {
                    inventorymng Getinventorymng = new inventorymng();
                    Getinventorymng.snoO = i++.ToString();
                    Getinventorymng.inventoryname = dr["InvName"].ToString();
                    Getinventorymng.sno = dr["sno"].ToString();
                    Getinventorymng.totqty = dr["TotalQty"].ToString();
                    inventorylist.Add(Getinventorymng);
                }
            }
            else
            {
            }
            string response = GetJson(inventorylist);
            context.Response.Write(response);
        }
        catch
        {
        }
    }
    private void GetBranchVehicles(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            cmd = new MySqlCommand("SELECT VehicleNo, Capacity,sno FROM vehiclemaster WHERE (BranchID = @BranchID)");
            cmd.Parameters.AddWithValue("@BranchID", context.Session["branch"].ToString());
            DataTable dtDisp = vdbmngr.SelectQuery(cmd).Tables[0];
            vdbmngr = new VehicleDBMgr();
            cmd = new MySqlCommand("Select VehicleNo,Capacity,sno from VehicleMaster where BranchID=@BranchID");
            cmd.Parameters.AddWithValue("@BranchID", context.Session["branch"].ToString());
            DataTable dtVehicle = vdbmngr.SelectQuery(cmd).Tables[0];
            List<VehicleClass> Vehiclelist = new List<VehicleClass>();
            foreach (DataRow dr in dtVehicle.Rows)
            {
                VehicleClass getVehicles = new VehicleClass();
                getVehicles.VehicleNo = dr["VehicleNo"].ToString();
                getVehicles.Capacity = dr["Capacity"].ToString();
                getVehicles.sno = dr["sno"].ToString();
                Vehiclelist.Add(getVehicles);
            }
            string response = GetJson(Vehiclelist);
            context.Response.Write(response);
        }
        catch
        {
        }
    }
    private void GetSplDcProducts(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            string Dcname = context.Request["SplDcName"];
            string BranchID = context.Request["BranchID"];
            cmd = new MySqlCommand("Select * from dispatch  WHERE (DispName=@DispName) AND (Branch_id=@Branch_id)");
            cmd.Parameters.AddWithValue("@DispName", Dcname);
            cmd.Parameters.AddWithValue("@Branch_id", context.Session["branch"].ToString());
            DataTable dtDisp = vdbmngr.SelectQuery(cmd).Tables[0];
            string SOBranchID = "";
            if (dtDisp.Rows.Count > 0)
            {
                SOBranchID = dtDisp.Rows[0]["BranchID"].ToString();
            }
            else
            {
                SOBranchID = BranchID;
            }
            List<Products> Productslist = new List<Products>();
            cmd = new MySqlCommand("SELECT   productsdata.invqty,productsdata.sno, productsdata.ProductName, productsdata.Units, invmaster.Qty, productsdata.Inventorysno,  invmaster.InvName FROM  productsdata INNER JOIN invmaster ON productsdata.Inventorysno = invmaster.sno INNER JOIN branchproducts ON productsdata.sno = branchproducts.product_sno WHERE (branchproducts.branch_sno = @BranchID) AND (branchproducts.flag = @flag) ORDER BY branchproducts.Rank");
            cmd.Parameters.AddWithValue("@flag", "1");
            cmd.Parameters.AddWithValue("@BranchID", SOBranchID);
            DataTable dtProducts = vdbmngr.SelectQuery(cmd).Tables[0];
            int i = 1;
            foreach (DataRow dr in dtProducts.Rows)
            {
                Products getProducts = new Products();
                getProducts.snoO = i++.ToString();
                getProducts.ProductName = dr["ProductName"].ToString();
                getProducts.TotalQty = "0";
                getProducts.Productsno = dr["sno"].ToString();
                getProducts.tubs = "0";
                getProducts.cans = "0";
                getProducts.units = dr["InvName"].ToString();
                getProducts.qty = dr["invqty"].ToString();
                getProducts.empid = "0";
                getProducts.vehcleno = "0";
                Productslist.Add(getProducts);
            }
            string response = GetJson(Productslist);
            context.Response.Write(response);
        }
        catch
        {
        }
    }
    private void btnBranchProductsRankingclick(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            var js = new JavaScriptSerializer();
            var title1 = context.Request.Params[1];
            Orders obj = js.Deserialize<Orders>(title1);
            int i = 1;
            string brnchid = obj.BranchID;
            string type = obj.DCType;
            if (type == "ProductWise")
            {
                foreach (string o in obj.dataarr)
                {
                    cmd = new MySqlCommand("update productsdata set Rank=@Rank where sno=@Productid");
                    cmd.Parameters.AddWithValue("@Productid", o);
                    cmd.Parameters.AddWithValue("@Rank", i++);
                    vdbmngr.Update(cmd);
                }
            }
            else
            {

                foreach (string o in obj.dataarr)
                {
                    cmd = new MySqlCommand("update branchproducts set Rank=@Rank where Product_sno=@Productid and branch_sno=@BranchID");
                    cmd.Parameters.AddWithValue("@Productid", o);
                    cmd.Parameters.AddWithValue("@Rank", i++);
                    cmd.Parameters.AddWithValue("@BranchID", brnchid);
                    vdbmngr.Update(cmd);
                }
            }
            string msg = "Rank Saved Successfully";
            string response = GetJson(msg);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string msg = ex.Message;
            string response = GetJson(msg);
            context.Response.Write(response);
        }
    }
    private void GetSOClosingStock(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            string branchid = context.Request["BranchID"];
            string PaidDate = context.Request["PaidDate"];
            DateTime dtindentdate = new DateTime();
            dtindentdate = DateTime.Parse(PaidDate);
            cmd = new MySqlCommand("SELECT productsdata.ProductName,productsdata.sno, branchproducts.BranchQty, branchproducts.LeakQty FROM branchproducts INNER JOIN productsdata ON branchproducts.product_sno = productsdata.sno WHERE (branchproducts.branch_sno = @BranchID) GROUP BY productsdata.ProductName Order by branchproducts.Rank");
            cmd.Parameters.AddWithValue("@BranchID", branchid);
            DataTable dtStockdata = vdbmngr.SelectQuery(cmd).Tables[0];
            cmd = new MySqlCommand("SELECT clotrans.Sno, clotrans.BranchId, clotrans.EmpId, clotrans.IndDate, clotrans.SalesType, closubtranprodcts.ProductID, closubtranprodcts.StockQty, closubtranprodcts.LeakQty FROM clotrans INNER JOIN closubtranprodcts ON clotrans.Sno = closubtranprodcts.RefNo WHERE (clotrans.BranchId = @BranchID) AND (clotrans.IndDate BETWEEN @d1 AND @d2)");
            cmd.Parameters.AddWithValue("@BranchID", branchid);
            cmd.Parameters.AddWithValue("@d1", GetLowDate(dtindentdate));
            cmd.Parameters.AddWithValue("@d2", GetHighDate(dtindentdate));
            DataTable dtSOStockClosing = vdbmngr.SelectQuery(cmd).Tables[0];
            List<ProductsName> Prodlist = new List<ProductsName>();
            if (dtSOStockClosing.Rows.Count > 0)
            {
                foreach (DataRow dr in dtStockdata.Rows)
                {
                    ProductsName GetProducts = new ProductsName();
                    GetProducts.ProdID = dr["sno"].ToString();
                    GetProducts.ProdName = dr["ProductName"].ToString();
                    double leak = 0;
                    double stock = 0;
                    foreach (DataRow drstock in dtSOStockClosing.Select("ProductID='" + dr["sno"].ToString() + "'"))
                    {
                        double.TryParse(drstock["LeakQty"].ToString(), out leak);
                        double.TryParse(drstock["StockQty"].ToString(), out stock);
                    }
                    GetProducts.Price = leak.ToString();
                    GetProducts.Qty = stock.ToString();
                    Prodlist.Add(GetProducts);
                }
            }
            else
            {
                foreach (DataRow dr in dtStockdata.Rows)
                {
                    ProductsName GetProducts = new ProductsName();
                    GetProducts.ProdID = dr["sno"].ToString();
                    GetProducts.ProdName = dr["ProductName"].ToString();
                    GetProducts.Price = "0";
                    GetProducts.Qty = "0";
                    Prodlist.Add(GetProducts);
                }
            }

            string response = GetJson(Prodlist);
            context.Response.Write(response);
        }
        catch
        {

        }
    }
    private void GetInvClosingStock(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            string branchid = context.Request["BranchID"];
            string PaidDate = context.Request["PaidDate"];
            DateTime dtindentdate = new DateTime();
            dtindentdate = DateTime.Parse(PaidDate);
            cmd = new MySqlCommand("SELECT invmaster.InvName, invmaster.sno, inventory_monitor.Qty FROM inventory_monitor INNER JOIN invmaster ON inventory_monitor.Inv_Sno = invmaster.sno WHERE (inventory_monitor.BranchId = @BranchID)");
            //cmd.Parameters.AddWithValue("@flag", "1");
            cmd.Parameters.AddWithValue("@BranchID", branchid);
            DataTable dtbranchinventory = vdbmngr.SelectQuery(cmd).Tables[0];
            cmd = new MySqlCommand("SELECT clotrans.Sno, clotrans.BranchId, clotrans.EmpId, clotrans.IndDate, clotrans.SalesType, closubtraninventory.InvSno, closubtraninventory.StockQty FROM clotrans INNER JOIN closubtraninventory ON clotrans.Sno = closubtraninventory.RefNo WHERE (clotrans.BranchId = @BranchID) AND (clotrans.IndDate BETWEEN @d1 AND @d2)");
            cmd.Parameters.AddWithValue("@BranchID", branchid);
            cmd.Parameters.AddWithValue("@d1", GetLowDate(dtindentdate));
            cmd.Parameters.AddWithValue("@d2", GetHighDate(dtindentdate));
            DataTable dtInvStockClosing = vdbmngr.SelectQuery(cmd).Tables[0];
            List<inventorymng> inventorylist = new List<inventorymng>();
            int i = 1;
            if (dtInvStockClosing.Rows.Count > 0)
            {
                foreach (DataRow dr in dtbranchinventory.Rows)
                {
                    inventorymng Getinventorymng = new inventorymng();
                    Getinventorymng.snoO = i++.ToString();
                    Getinventorymng.inventoryname = dr["InvName"].ToString();
                    //Getinventorymng.flag = dr["flag"].ToString();
                    Getinventorymng.sno = dr["sno"].ToString();
                    int invQty = 0;
                    foreach (DataRow drstock in dtInvStockClosing.Select("InvSno='" + dr["sno"].ToString() + "'"))
                    {
                        int.TryParse(drstock["StockQty"].ToString(), out invQty);
                    }

                    Getinventorymng.totqty = invQty.ToString();
                    inventorylist.Add(Getinventorymng);
                }
            }
            else
            {
                foreach (DataRow dr in dtbranchinventory.Rows)
                {
                    inventorymng Getinventorymng = new inventorymng();
                    Getinventorymng.snoO = i++.ToString();
                    Getinventorymng.inventoryname = dr["InvName"].ToString();
                    //Getinventorymng.flag = dr["flag"].ToString();
                    Getinventorymng.sno = dr["sno"].ToString();
                    Getinventorymng.totqty = "0";
                    inventorylist.Add(Getinventorymng);
                }
            }
            string response = GetJson(inventorylist);
            context.Response.Write(response);
        }
        catch
        {

        }
    }
    private void GetBranchStock(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            string branchid = context.Request["BranchID"];
            cmd = new MySqlCommand("SELECT productsdata.ProductName,productsdata.sno, branchproducts.BranchQty, branchproducts.LeakQty FROM branchproducts INNER JOIN productsdata ON branchproducts.product_sno = productsdata.sno WHERE (branchproducts.branch_sno = @BranchID) GROUP BY productsdata.ProductName Order by branchproducts.Rank");
            cmd.Parameters.AddWithValue("@BranchID", branchid);
            DataTable dtStockdata = vdbmngr.SelectQuery(cmd).Tables[0];
            List<ProductsName> Prodlist = new List<ProductsName>();
            foreach (DataRow dr in dtStockdata.Rows)
            {
                ProductsName GetProducts = new ProductsName();
                GetProducts.ProdID = dr["sno"].ToString();
                GetProducts.ProdName = dr["ProductName"].ToString();
                GetProducts.Price = dr["LeakQty"].ToString();
                GetProducts.Qty = dr["BranchQty"].ToString();
                Prodlist.Add(GetProducts);
            }
            string response = GetJson(Prodlist);
            context.Response.Write(response);
        }
        catch
        {

        }
    }
    private void GetBranchInventoryStock(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            string branchid = context.Request["BranchID"];
            cmd = new MySqlCommand("SELECT invmaster.InvName, invmaster.sno, inventory_monitor.Qty FROM inventory_monitor INNER JOIN invmaster ON inventory_monitor.Inv_Sno = invmaster.sno WHERE (inventory_monitor.BranchId = @BranchID)");
            //cmd.Parameters.AddWithValue("@flag", "1");
            cmd.Parameters.AddWithValue("@BranchID", branchid);
            DataTable dtbranchinventory = vdbmngr.SelectQuery(cmd).Tables[0];
            List<inventorymng> inventorylist = new List<inventorymng>();
            int i = 1;
            foreach (DataRow dr in dtbranchinventory.Rows)
            {
                inventorymng Getinventorymng = new inventorymng();
                Getinventorymng.snoO = i++.ToString();
                Getinventorymng.inventoryname = dr["InvName"].ToString();
                //Getinventorymng.flag = dr["flag"].ToString();
                Getinventorymng.sno = dr["sno"].ToString();
                Getinventorymng.totqty = dr["Qty"].ToString();
                inventorylist.Add(Getinventorymng);
            }
            string response = GetJson(inventorylist);
            context.Response.Write(response);
        }
        catch
        {

        }
    }
    private void Get_Sales_Office_Agents(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            DateTime ServerDateCurrentdate = VehicleDBMgr.GetTime(vdbmngr.conn);
            string Branchid = context.Request["BranchId"];
            cmd = new MySqlCommand("SELECT modifiedroutes.Sno, modifiedroutes.RouteName, branchdata.sno AS Branchid, branchdata.BranchName FROM  modifiedroutes INNER JOIN modifiedroutesubtable ON modifiedroutes.Sno = modifiedroutesubtable.RefNo INNER JOIN  branchdata ON modifiedroutesubtable.BranchID = branchdata.sno WHERE  (modifiedroutes.BranchID = @BranchID) AND (modifiedroutesubtable.EDate IS NULL) AND (modifiedroutesubtable.CDate <= @starttime) AND (branchdata.flag = @flag) OR (modifiedroutes.BranchID = @BranchID) AND (modifiedroutesubtable.EDate > @starttime) AND (modifiedroutesubtable.CDate <= @starttime) AND (branchdata.flag = @flag) GROUP BY branchdata.sno, branchdata.BranchName");
            cmd.Parameters.AddWithValue("@BranchID", Branchid);
            cmd.Parameters.AddWithValue("@starttime", GetLowDate(ServerDateCurrentdate.AddDays(-1)));
            cmd.Parameters.AddWithValue("@flag", "1");
            DataTable dtAgent = vdbmngr.SelectQuery(cmd).Tables[0];
            List<ProductsName> AgentList = new List<ProductsName>();
            foreach (DataRow dr in dtAgent.Rows)
            {
                ProductsName obj = new ProductsName();
                obj.AgentId = dr["Branchid"].ToString();
                obj.AgentName = dr["BranchName"].ToString();
                AgentList.Add(obj);
            }
            string response = GetJson(AgentList);
            context.Response.Write(response);
        }
        catch
        {

        }
    }
    public class ProductsName
    {
        public string ProdID { set; get; }
        public string ProdName { set; get; }
        public string Price { set; get; }
        public string Qty { set; get; }
        public string Leakqty { set; get; }
        public string Branchid { set; get; }
        public string AgentId { set; get; }
        public string AgentName { set; get; }
        public string Type { set; get; }
        public string fromdate { set; get; }
        public string Branch_Id { set; get; }
        public List<PlantProducts> BrancProductList { get; set; }
    }
    public class PlantProducts
    {
        public string Product_Id { set; get; }
        public string Prod_Name { set; get; }
        public string Rate { set; get; }
        public string igst { set; get; }
        public string cgst { set; get; }
        public string sgst { set; get; }
        public string InventarySno { set; get; }
        public string TripID { set; get; }
        public string ReceivedQty { set; get; }
        public string BranchId { set; get; }
        public MySqlDbType SNo { get; set; }
    }
    public class Total_ProductClass
    {
        public List<ProductsName> ProductsName { get; set; }
        public List<PlantProducts> PlantProducts { get; set; }
    }
    private void GetBranchProducts(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            string branchid = context.Request["BranchID"];
            string Type = context.Request["ddlproducttype"];
            DataTable dtBranchProduct = new DataTable();
            if (Type != "ProductWise")
            {
                cmd = new MySqlCommand("SELECT productsdata.ProductName, productsdata.sno,branchproducts.unitprice FROM branchproducts INNER JOIN productsdata ON branchproducts.product_sno = productsdata.sno WHERE (branchproducts.branch_sno = @BranchID) and (branchproducts.flag=@flag) ORDER BY branchproducts.Rank");
                cmd.Parameters.AddWithValue("@flag", "1");
                cmd.Parameters.AddWithValue("@BranchID", branchid);
                dtBranchProduct = vdbmngr.SelectQuery(cmd).Tables[0];
            }
            else
            {
                cmd = new MySqlCommand("SELECT    productsdata.ProductName, productsdata.sno, productsdata.UnitPrice FROM productsdata INNER JOIN branchproducts ON productsdata.sno = branchproducts.product_sno WHERE (branchproducts.branch_sno = @Branchid) ORDER BY productsdata.Rank");
                cmd.Parameters.AddWithValue("@BranchID", context.Session["branch"].ToString());
                dtBranchProduct = vdbmngr.SelectQuery(cmd).Tables[0];
            }
            List<ProductsName> BranchProdlist = new List<ProductsName>();
            foreach (DataRow dr in dtBranchProduct.Rows)
            {
                ProductsName GetProducts = new ProductsName();
                GetProducts.ProdID = dr["sno"].ToString();
                GetProducts.ProdName = dr["ProductName"].ToString();
                GetProducts.Price = dr["unitprice"].ToString();
                BranchProdlist.Add(GetProducts);
            }
            string response = GetJson(BranchProdlist);
            context.Response.Write(response);
        }
        catch
        {
        }
    }
    private void saveBranch_Products_Details(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            var js = new JavaScriptSerializer();
            DateTime ServerDateCurrentdate = VehicleDBMgr.GetTime(vdbmngr.conn);
            var title1 = context.Request.Params[1];
            ProductsName obj = js.Deserialize<ProductsName>(title1);
            string Branchid = obj.Branchid;
            string type = obj.Type;
            if (type != "AgentWiseProduct")
            {
                cmd = new MySqlCommand("SELECT modifiedroutes.Sno, modifiedroutes.RouteName, branchdata.sno AS Branchid, branchdata.BranchName FROM  modifiedroutes INNER JOIN modifiedroutesubtable ON modifiedroutes.Sno = modifiedroutesubtable.RefNo INNER JOIN  branchdata ON modifiedroutesubtable.BranchID = branchdata.sno WHERE  (modifiedroutes.BranchID = @BranchID) AND (modifiedroutesubtable.EDate IS NULL) AND (modifiedroutesubtable.CDate <= @starttime) AND (branchdata.flag = @flag) OR (modifiedroutes.BranchID = @BranchID) AND (modifiedroutesubtable.EDate > @starttime) AND (modifiedroutesubtable.CDate <= @starttime) AND (branchdata.flag = @flag) GROUP BY branchdata.sno, branchdata.BranchName");
                cmd.Parameters.AddWithValue("@BranchID", Branchid);
                cmd.Parameters.AddWithValue("@starttime", GetLowDate(ServerDateCurrentdate.AddDays(-1)));
                cmd.Parameters.AddWithValue("@flag", "1");
                DataTable dtAgent = vdbmngr.SelectQuery(cmd).Tables[0];
                if (dtAgent.Rows.Count > 0)
                {
                    foreach (PlantProducts o in obj.BrancProductList)
                    {
                        cmd = new MySqlCommand("UPDATE branchproducts SET  flag = @flag WHERE  (branch_sno = @branch_sno) AND (product_sno=@product_sno)");
                        cmd.Parameters.AddWithValue("@product_sno", o.Product_Id);
                        cmd.Parameters.AddWithValue("@flag", "1");
                        cmd.Parameters.AddWithValue("@branch_sno", Branchid);
                        if (vdbmngr.Update(cmd) == 0)
                        {
                            cmd = new MySqlCommand("INSERT INTO branchproducts (product_sno,flag,unitprice,branch_sno) VALUES (@product_sno, @flag, @unitprice, @branch_sno)");
                            cmd.Parameters.AddWithValue("@product_sno", o.Product_Id);
                            cmd.Parameters.AddWithValue("@flag", "1");
                            cmd.Parameters.AddWithValue("@unitprice", "0");
                            cmd.Parameters.AddWithValue("@branch_sno", Branchid);
                            vdbmngr.insert(cmd);
                        }
                    }
                    foreach (DataRow dr in dtAgent.Rows)
                    {
                        foreach (PlantProducts o in obj.BrancProductList)
                        {
                            cmd = new MySqlCommand("UPDATE branchproducts SET  flag = @flag WHERE  (branch_sno = @branch_sno) AND (product_sno=@product_sno)");
                            cmd.Parameters.AddWithValue("@product_sno", o.Product_Id);
                            cmd.Parameters.AddWithValue("@flag", "1");
                            cmd.Parameters.AddWithValue("@branch_sno", dr["Branchid"].ToString());
                            if (vdbmngr.Update(cmd) == 0)
                            {
                                cmd = new MySqlCommand("INSERT INTO branchproducts (product_sno,flag,unitprice,branch_sno) VALUES (@product_sno,@flag, @unitprice,@branch_sno)");
                                cmd.Parameters.AddWithValue("@product_sno", o.Product_Id);
                                cmd.Parameters.AddWithValue("@flag", "1");
                                cmd.Parameters.AddWithValue("@unitprice", "0");
                                cmd.Parameters.AddWithValue("@branch_sno", dr["Branchid"].ToString());
                                vdbmngr.insert(cmd);
                            }
                        }
                    }
                }
                string msg = "Data Updated Successfully";
                string response = GetJson(msg);
                context.Response.Write(response);
            }
            else
            {
                foreach (PlantProducts o in obj.BrancProductList)
                {
                    cmd = new MySqlCommand("UPDATE branchproducts SET  product_sno = @product_sno, unitprice = @unitprice, sgst = @sgst, cgst = @cgst, igst = @igst, flag = @flag WHERE  (branch_sno = @branch_sno) AND (product_sno=@product_sno)");
                    cmd.Parameters.AddWithValue("@product_sno", o.Product_Id);
                    cmd.Parameters.AddWithValue("@unitprice", o.Rate);
                    cmd.Parameters.AddWithValue("@igst", o.igst);
                    cmd.Parameters.AddWithValue("@sgst", o.sgst);
                    cmd.Parameters.AddWithValue("@cgst", o.cgst);
                    cmd.Parameters.AddWithValue("@flag", "1");
                    cmd.Parameters.AddWithValue("@branch_sno", Branchid);
                    if (vdbmngr.Update(cmd) == 0)
                    {
                        cmd = new MySqlCommand("INSERT INTO branchproducts (product_sno, unitprice, sgst, cgst, igst, flag,branch_sno) VALUES (@product_sno, @unitprice, @sgst, @cgst, @igst, @flag, @branch_sno)");
                        cmd.Parameters.AddWithValue("@product_sno", o.Product_Id);
                        cmd.Parameters.AddWithValue("@unitprice", o.Rate);
                        cmd.Parameters.AddWithValue("@igst", o.igst);
                        cmd.Parameters.AddWithValue("@sgst", o.sgst);
                        cmd.Parameters.AddWithValue("@cgst", o.cgst);
                        cmd.Parameters.AddWithValue("@flag", "1");
                        cmd.Parameters.AddWithValue("@branch_sno", Branchid);
                        vdbmngr.insert(cmd);
                    }
                }
                string msg = "Data Updated Successfully";
                string response = GetJson(msg);
                context.Response.Write(response);
            }
        }
        catch (Exception ex)
        {
           
        }
    }
    private void GetSpecialDispatches(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            cmd = new MySqlCommand("select sno,DispName from dispatch where (Branch_Id=@branchid) and (DispMode=@DispMode) order by sno");
            cmd.Parameters.AddWithValue("@branchid", context.Session["branch"].ToString());
            cmd.Parameters.AddWithValue("@DispMode", "SPL");
            DataTable dtDispatches = vdbmngr.SelectQuery(cmd).Tables[0];
            List<Routes> Routelist = new List<Routes>();
            foreach (DataRow dr in dtDispatches.Rows)
            {
                Routes GetRoutes = new Routes();
                GetRoutes.routesno = dr["sno"].ToString();
                GetRoutes.routename = dr["DispName"].ToString();
                Routelist.Add(GetRoutes);
            }
            string response = GetJson(Routelist);
            context.Response.Write(response);
        }
        catch
        {
        }
    }

    private void GetLocalDispatches(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            DBManager vdm = new DBManager();
            string SalesType = context.Request["SalesType"].ToString();
            DataTable dtDispatches = new DataTable();
            if (SalesType == "Local Sale" || SalesType == "Free Sale")
            {
                cmd = new MySqlCommand("SELECT sno, DispName FROM dispatch WHERE (Branch_Id = @branchid) AND (DispType = 'LOCAL') OR (Branch_Id = @branchid) AND (DispType = 'Free') ORDER BY sno");
                cmd.Parameters.AddWithValue("@branchid", context.Session["branch"].ToString());
                dtDispatches = vdbmngr.SelectQuery(cmd).Tables[0];
            }
            else
            {
                cm_d = new SqlCommand("SELECT employee_num, fullname,ledgername AS DispName, branchid,empid AS sno FROM  employedetails  where  status ='NO'");
                dtDispatches = vdm.SelectQuery(cm_d).Tables[0];
            }
            List<Routes> Routelist = new List<Routes>();
            foreach (DataRow dr in dtDispatches.Rows)
            {
                Routes GetRoutes = new Routes();
                GetRoutes.routesno = dr["sno"].ToString();
                string ledgername = dr["DispName"].ToString();
                if (ledgername.Length > 5)
                {
                    GetRoutes.routename = dr["DispName"].ToString();
                }
                else
                {
                    if (SalesType == "Local Sale" || SalesType == "Free Sale")
                    {
                    }
                    else
                    {
                        GetRoutes.routename = dr["fullname"].ToString();
                    }
                }
                Routelist.Add(GetRoutes);
            }
            string response = GetJson(Routelist);
            context.Response.Write(response);
        }
        catch
        {
        }
    }
    private void GetLocalSaleProducts(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            List<Products> Productslist = new List<Products>();
            cmd = new MySqlCommand("SELECT   productsdata.invqty,productsdata.sno, productsdata.ProductName, productsdata.Units, invmaster.Qty, productsdata.Inventorysno,  invmaster.InvName FROM  productsdata INNER JOIN invmaster ON productsdata.Inventorysno = invmaster.sno INNER JOIN branchproducts ON productsdata.sno = branchproducts.product_sno WHERE (branchproducts.branch_sno = @BranchID) AND (branchproducts.flag = @flag) ORDER BY branchproducts.Rank");
            cmd.Parameters.AddWithValue("@flag", "1");
            cmd.Parameters.AddWithValue("@BranchID", context.Session["branch"].ToString());
            DataTable dtProducts = vdbmngr.SelectQuery(cmd).Tables[0];
            int i = 1;
            foreach (DataRow dr in dtProducts.Rows)
            {
                Products getProducts = new Products();
                getProducts.snoO = i++.ToString();
                getProducts.ProductName = dr["ProductName"].ToString();
                getProducts.TotalQty = "0";
                getProducts.Productsno = dr["sno"].ToString();
                getProducts.tubs = "0";
                getProducts.cans = "0";
                getProducts.units = dr["InvName"].ToString();
                getProducts.qty = dr["invqty"].ToString();
                getProducts.empid = "0";
                getProducts.vehcleno = "0";
                Productslist.Add(getProducts);
            }
            string response = GetJson(Productslist);
            context.Response.Write(response);
        }
        catch
        {
        }
    }
    public class Orderclass
    {
        public string HdnSno { set; get; }
        public string sno { set; get; }
        public string ProductCode { set; get; }
        public int Productsno { set; get; }
        public double Qty { set; get; }
        public float Rate { set; get; }
        public double Total { set; get; }
        public string Status { set; get; }
        public string IndentNo { set; get; }
        public string Units { set; get; }
        public string Unitqty { set; get; }
        public string invqty { set; get; }
        public string Desciption { set; get; }
        public string orderunitqty { set; get; }
        public float orderunitRate { set; get; }
        public double LeakQty { set; get; }
        public double DQty { set; get; }
        public double RQty { set; get; }
        public double TRQty { set; get; }
        public double PrevQty { set; get; }
        public double returnqty { set; get; }
        public double tubQty { set; get; }
        public double Qtypkts { set; get; }
    }
    private void GetAgetntsaleProducts(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            string BranchId = context.Request["BranchID"];
            List<Orderclass> OrderList = new List<Orderclass>();
            cmd = new MySqlCommand("SELECT productsdata.UnitPrice,productsdata.invqty,branchproducts.Rank, productsdata.ProductName, productsdata.Units, productsdata.Qty, branchproducts.unitprice AS BUnitPrice, branchproducts_1.unitprice AS Aunitprice, productsdata.sno FROM branchproducts INNER JOIN branchmappingtable ON branchproducts.branch_sno = branchmappingtable.SuperBranch INNER JOIN productsdata ON branchproducts.product_sno = productsdata.sno INNER JOIN branchproducts branchproducts_1 ON branchmappingtable.SubBranch = branchproducts_1.branch_sno AND  productsdata.sno = branchproducts_1.product_sno WHERE (branchproducts_1.branch_sno = @bsno) AND (branchproducts_1.flag = @flag)GROUP BY branchproducts_1.branch_sno, branchproducts_1.unitprice, productsdata.sno, branchproducts_1.flag ORDER BY branchproducts.Rank");
            cmd.Parameters.AddWithValue("@flag", 1);
            cmd.Parameters.AddWithValue("@bsno", BranchId);
            DataTable dtBranch = vdbmngr.SelectQuery(cmd).Tables[0];
            if (dtBranch.Rows.Count > 0)
            {
                int i = 1;
                foreach (DataRow dr in dtBranch.Rows)
                {
                    Orderclass getOrderValue = new Orderclass();
                    getOrderValue.sno = i++.ToString();
                    getOrderValue.ProductCode = dr["ProductName"].ToString();
                    int prodsno = 0;
                    int.TryParse(dr["sno"].ToString(), out prodsno);
                    getOrderValue.Productsno = prodsno;
                    getOrderValue.Qty = 0;
                    getOrderValue.Total = 0;
                    if (dr["Units"].ToString() == "ml" || dr["Units"].ToString() == "ltr")
                    {
                        getOrderValue.Desciption = "Ltrs";
                    }
                    else
                    {
                        if (dr["Units"].ToString() == "Nos")
                        {
                            getOrderValue.Desciption = "Nos";
                        }
                        else
                        {
                            getOrderValue.Desciption = "Kgs";
                        }
                    }
                    getOrderValue.Units = dr["Units"].ToString();
                    getOrderValue.Unitqty = dr["Qty"].ToString();
                    getOrderValue.invqty = dr["invqty"].ToString();
                    string AgentUnitPrice = dr["Aunitprice"].ToString();
                    string BranchUnitPrice = dr["BUnitPrice"].ToString();
                    float Rate = 0;
                    if (AgentUnitPrice != "0")
                    {
                        Rate = (float)dr["Aunitprice"];
                    }
                    if (Rate == 0)
                    {
                        Rate = (float)dr["BUnitPrice"];
                    }
                    if (Rate == 0)
                    {
                        Rate = (float)dr["unitprice"];
                    }
                    float Unitqty = (float)dr["Qty"];
                    float TotalRate = 0;
                    TotalRate = Rate;
                    getOrderValue.Rate = (float)Rate;
                    getOrderValue.orderunitRate = (float)TotalRate;
                    getOrderValue.PrevQty = 0;
                    getOrderValue.orderunitqty = "";
                    OrderList.Add(getOrderValue);
                }
            }
            string response = GetJson(OrderList);
            context.Response.Write(response);
        }
        catch
        {
        }
    }
    private void GetAgetntsaleInventory(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            string branch = context.Session["branch"].ToString();
            List<inventorymng> inventorylist = new List<inventorymng>();
            cmd = new MySqlCommand("SELECT invmaster.sno, invmaster.InvName, invmaster.Qty FROM invmaster INNER JOIN inventory_monitor ON invmaster.sno = inventory_monitor.Inv_Sno WHERE (inventory_monitor.BranchId = @BranchID)");
            cmd.Parameters.AddWithValue("@BranchID", branch);
            DataTable dtInventory = vdbmngr.SelectQuery(cmd).Tables[0];
            int i = 1;
            foreach (DataRow dr in dtInventory.Rows)
            {
                inventorymng Getinventorymng = new inventorymng();
                Getinventorymng.snoO = i++.ToString();
                Getinventorymng.inventoryname = dr["InvName"].ToString();
                Getinventorymng.sno = dr["sno"].ToString();
                Getinventorymng.totqty = "0";
                inventorylist.Add(Getinventorymng);
            }
            string response = GetJson(inventorylist);
            context.Response.Write(response);
        }
        catch
        {
        }
    }
    private void GetSalesOfficeChange(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            string BranchID = context.Request["BranchID"];
            cmd = new MySqlCommand("SELECT dispatch.sno, dispatch.DispName FROM dispatch LEFT OUTER JOIN branchdata ON dispatch.BranchID = branchdata.sno WHERE (dispatch.Branch_Id = @BranchID) AND (dispatch.flag=1) OR (branchdata.SalesOfficeID = @SOID) AND (dispatch.flag=1) ");
            cmd.Parameters.AddWithValue("@SOID", BranchID);
            cmd.Parameters.AddWithValue("@BranchID", BranchID);
            DataTable dtRoute = vdbmngr.SelectQuery(cmd).Tables[0];
            List<Routes> Routelist = new List<Routes>();
            foreach (DataRow dr in dtRoute.Rows)
            {
                Routes GetRoutes = new Routes();
                GetRoutes.routesno = dr["sno"].ToString();
                GetRoutes.routename = dr["DispName"].ToString();
                Routelist.Add(GetRoutes);
            }
            string response = GetJson(Routelist);
            context.Response.Write(response);
        }
        catch
        {
        }
    }
    private void btnEditInventorySaveClick(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            var js = new JavaScriptSerializer();
            DateTime ServerDateCurrentdate = VehicleDBMgr.GetTime(vdbmngr.conn);
            var title1 = context.Request.Params[1];
            string empid = "0";
            int delqty = 0;
            int returnqty = 0;
            Orders obj = js.Deserialize<Orders>(title1);
            string BranchID = obj.BranchID;
            string transactiontype = obj.transactiontype;
            string RouteID = obj.refno;
            string indentdate = obj.indentdate;
            if (transactiontype == "Route")
            {
                foreach (orderdetail o in obj.data)
                {
                    cmd = new MySqlCommand("SELECT Sno, EmpId, AssignDate, Status FROM tripdata where sno=@tripid");
                    cmd.Parameters.AddWithValue("@tripid", o.Productsno);
                    DataTable dtempid = vdbmngr.SelectQuery(cmd).Tables[0];
                    cmd = new MySqlCommand("SELECT TransType, FromTran, ToTran, Qty, EmpID, VarifyStatus, VTripId, VEmpId, Sno, B_inv_sno, DOE, VQty, CBFromTran, CBToTran, DeliveryTime, CollectionTime,Remarks FROM invtransactions12 WHERE (FromTran = @fromid) AND (ToTran = @toid) AND (B_inv_sno = @invsno)");
                    cmd.Parameters.AddWithValue("@fromid", o.Productsno);
                    cmd.Parameters.AddWithValue("@toid", BranchID);
                    cmd.Parameters.AddWithValue("@invsno", o.IndentNo);
                    DataTable dtinv = vdbmngr.SelectQuery(cmd).Tables[0];
                    cmd = new MySqlCommand("SELECT TransType, FromTran, ToTran, Qty, EmpID, VarifyStatus, VTripId, VEmpId, Sno, B_inv_sno, DOE, VQty, CBFromTran, CBToTran, DeliveryTime, CollectionTime,Remarks FROM invtransactions12 WHERE (FromTran = @fromid) AND (ToTran = @toid) AND (B_inv_sno = @invsno)");
                    cmd.Parameters.AddWithValue("@fromid", BranchID);
                    cmd.Parameters.AddWithValue("@toid", o.Productsno);
                    cmd.Parameters.AddWithValue("@invsno", o.IndentNo);
                    DataTable dtinvreturn = vdbmngr.SelectQuery(cmd).Tables[0];
                    if (dtinv.Rows.Count > 0)
                    {
                        int.TryParse(dtinv.Rows[0]["Qty"].ToString(), out delqty);
                        int editqty = 0;
                        int.TryParse(o.DelQty, out editqty);
                        cmd = new MySqlCommand("UPDATE invtransactions12 SET Qty = @delqty WHERE (FromTran = @fromid) AND (ToTran = @toid) AND (B_inv_sno = @invsno)");
                        cmd.Parameters.AddWithValue("@fromid", o.Productsno);
                        cmd.Parameters.AddWithValue("@toid", BranchID);
                        cmd.Parameters.AddWithValue("@invsno", o.IndentNo);
                        cmd.Parameters.AddWithValue("@delqty", o.DelQty);
                        vdbmngr.Update(cmd);
                        int TQty = delqty - editqty;
                        if (TQty >= 1)
                        {
                            cmd = new MySqlCommand("update inventory_monitor set Qty=Qty-@Qty where Inv_Sno=@Inv_Sno and BranchId=@BranchId");
                            cmd.Parameters.AddWithValue("@Qty", TQty);
                            cmd.Parameters.AddWithValue("@Inv_Sno", o.IndentNo);
                            cmd.Parameters.AddWithValue("@BranchId", BranchID);
                            vdbmngr.Update(cmd);
                        }
                        else
                        {
                            TQty = Math.Abs(TQty);
                            cmd = new MySqlCommand("update inventory_monitor set Qty=Qty+@Qty where Inv_Sno=@Inv_Sno and BranchId=@BranchId");
                            cmd.Parameters.AddWithValue("@Qty", TQty);
                            cmd.Parameters.AddWithValue("@Inv_Sno", o.IndentNo);
                            cmd.Parameters.AddWithValue("@BranchId", BranchID);
                            vdbmngr.Update(cmd);
                        }
                    }
                    if (dtinv.Rows.Count <= 0)
                    {
                        empid = dtempid.Rows[0]["EmpId"].ToString();

                        cmd = new MySqlCommand("INSERT INTO invtransactions12 (TransType, FromTran, ToTran, Qty, EmpID, B_inv_sno, DOE, DeliveryTime) VALUES (@TransType, @FromTran, @ToTran, @Qty, @EmpID, @B_inv_sno, @DOE, @DeliveryTime)");
                        cmd.Parameters.AddWithValue("@TransType", "2");
                        cmd.Parameters.AddWithValue("@FromTran", o.Productsno);
                        cmd.Parameters.AddWithValue("@ToTran", BranchID);
                        cmd.Parameters.AddWithValue("@Qty", o.DelQty);
                        cmd.Parameters.AddWithValue("@EmpID", empid);
                        cmd.Parameters.AddWithValue("@B_inv_sno", o.IndentNo);
                        cmd.Parameters.AddWithValue("@DOE", ServerDateCurrentdate);
                        cmd.Parameters.AddWithValue("@DeliveryTime", ServerDateCurrentdate);
                        vdbmngr.insert(cmd);
                        cmd = new MySqlCommand("update inventory_monitor set Qty=Qty+@Qty where Inv_Sno=@Inv_Sno and BranchId=@BranchId");
                        cmd.Parameters.AddWithValue("@Qty", o.DelQty);
                        cmd.Parameters.AddWithValue("@Inv_Sno", o.IndentNo);
                        cmd.Parameters.AddWithValue("@BranchId", BranchID);
                        vdbmngr.Update(cmd);
                    }
                    if (dtinvreturn.Rows.Count > 0)
                    {
                        int.TryParse(dtinvreturn.Rows[0]["Qty"].ToString(), out returnqty);
                        int editqty = 0;
                        int.TryParse(o.ReturnQty, out editqty);
                        cmd = new MySqlCommand("UPDATE invtransactions12 SET Qty = @delqty WHERE (FromTran = @fromid) AND (ToTran = @toid) AND (B_inv_sno = @invsno)");
                        cmd.Parameters.AddWithValue("@fromid", BranchID);
                        cmd.Parameters.AddWithValue("@toid", o.Productsno);
                        cmd.Parameters.AddWithValue("@invsno", o.IndentNo);
                        cmd.Parameters.AddWithValue("@delqty", o.ReturnQty);
                        vdbmngr.Update(cmd);
                        int TQty = returnqty - editqty;
                        if (TQty >= 1)
                        {
                            cmd = new MySqlCommand("update inventory_monitor set Qty=Qty+@Qty where Inv_Sno=@Inv_Sno and BranchId=@BranchId");
                            cmd.Parameters.AddWithValue("@Qty", TQty);
                            cmd.Parameters.AddWithValue("@Inv_Sno", o.IndentNo);
                            cmd.Parameters.AddWithValue("@BranchId", BranchID);
                            vdbmngr.Update(cmd);
                        }
                        else
                        {
                            TQty = Math.Abs(TQty);
                            cmd = new MySqlCommand("update inventory_monitor set Qty=Qty-@Qty where Inv_Sno=@Inv_Sno and BranchId=@BranchId");
                            cmd.Parameters.AddWithValue("@Qty", TQty);
                            cmd.Parameters.AddWithValue("@Inv_Sno", o.IndentNo);
                            cmd.Parameters.AddWithValue("@BranchId", BranchID);
                            vdbmngr.Update(cmd);
                        }
                    }
                    if (dtinvreturn.Rows.Count <= 0)
                    {
                        empid = dtempid.Rows[0]["EmpId"].ToString();
                        cmd = new MySqlCommand("INSERT INTO invtransactions12 (TransType, FromTran, ToTran, Qty, EmpID, B_inv_sno, DOE, CollectionTime) VALUES (@TransType, @FromTran, @ToTran, @Qty, @EmpID, @B_inv_sno, @DOE, @CollectionTime)");
                        cmd.Parameters.AddWithValue("@TransType", "3");
                        cmd.Parameters.AddWithValue("@ToTran", o.Productsno);
                        cmd.Parameters.AddWithValue("@FromTran", BranchID);
                        cmd.Parameters.AddWithValue("@Qty", o.ReturnQty);
                        cmd.Parameters.AddWithValue("@EmpID", empid);
                        cmd.Parameters.AddWithValue("@B_inv_sno", o.IndentNo);
                        cmd.Parameters.AddWithValue("@DOE", ServerDateCurrentdate);
                        cmd.Parameters.AddWithValue("@CollectionTime", ServerDateCurrentdate);
                        vdbmngr.insert(cmd);
                        cmd = new MySqlCommand("update inventory_monitor set Qty=Qty-@Qty where Inv_Sno=@Inv_Sno and BranchId=@BranchId");
                        cmd.Parameters.AddWithValue("@Qty", o.ReturnQty);
                        cmd.Parameters.AddWithValue("@Inv_Sno", o.IndentNo);
                        cmd.Parameters.AddWithValue("@BranchId", BranchID);
                        vdbmngr.Update(cmd);
                    }
                }
            }
            if (transactiontype == "Branch")
            {
                foreach (orderdetail o in obj.data)
                {
                    cmd = new MySqlCommand("SELECT TransType, FromTran, ToTran, Qty, EmpID, VarifyStatus, VTripId, VEmpId, Sno, B_inv_sno, DOE, VQty, CBFromTran, CBToTran, DeliveryTime, CollectionTime,Remarks FROM invtransactions12 WHERE (Sno = @sno)");
                    cmd.Parameters.AddWithValue("sno", o.Productsno);
                    DataTable prevqty = vdbmngr.SelectQuery(cmd).Tables[0];
                    cmd = new MySqlCommand("UPDATE invtransactions12 SET Qty = @delqty WHERE (Sno = @sno)");
                    cmd.Parameters.AddWithValue("@sno", o.Productsno);
                    cmd.Parameters.AddWithValue("@delqty", o.ReturnQty);
                    vdbmngr.Update(cmd);
                    int.TryParse(prevqty.Rows[0]["Qty"].ToString(), out returnqty);
                    int editqty = 0;
                    int.TryParse(o.ReturnQty, out editqty);
                    int TQty = returnqty - editqty;
                    if (TQty >= 1)
                    {
                        cmd = new MySqlCommand("update inventory_monitor set Qty=Qty+@Qty where Inv_Sno=@Inv_Sno and BranchId=@BranchId");
                        cmd.Parameters.AddWithValue("@Qty", TQty);
                        cmd.Parameters.AddWithValue("@Inv_Sno", o.IndentNo);
                        cmd.Parameters.AddWithValue("@BranchId", BranchID);
                        vdbmngr.Update(cmd);

                    }
                    else
                    {
                        TQty = Math.Abs(TQty);
                        cmd = new MySqlCommand("update inventory_monitor set Qty=Qty-@Qty where Inv_Sno=@Inv_Sno and BranchId=@BranchId");
                        cmd.Parameters.AddWithValue("@Qty", TQty);
                        cmd.Parameters.AddWithValue("@Inv_Sno", o.IndentNo);
                        cmd.Parameters.AddWithValue("@BranchId", BranchID);
                        vdbmngr.Update(cmd);

                    }
                }
            }
        }
        catch
        {

        }
    }
    private void btnEditIndentSaveClick(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            var js = new JavaScriptSerializer();
            DateTime ServerDateCurrentdate = VehicleDBMgr.GetTime(vdbmngr.conn);
            var title1 = context.Request.Params[1];
            DateTime dtdeltime = new DateTime();
            DateTime dtindenttime = new DateTime();
            string tripid = "0";
            Orders obj = js.Deserialize<Orders>(title1);
            string BranchID = obj.BranchID;
            string RouteID = obj.refno;
            string indentdate = obj.indentdate;
            string indtype = "Indent1";
            string Username = "1";
            double totsalevalue = 0;
            foreach (orderdetail o in obj.data)
            {
                string IndentNo = o.IndentNo;
                string ProductSno = o.Productsno;
                string DelQty = o.DelQty;
                string UnitCost = o.Rate;
                double DeliveryQty = 0;
                double.TryParse(DelQty, out DeliveryQty);
                DeliveryQty = Math.Round(DeliveryQty, 2);
                double unitRate = 0;
                double.TryParse(UnitCost, out unitRate);
                double productvalue = DeliveryQty * unitRate;
                totsalevalue += productvalue;
                if (IndentNo == "0")
                {
                    cmd = new MySqlCommand("SELECT dispatch.sno, dispatch.DispName, dispatch_sub.IndentType FROM dispatch INNER JOIN dispatch_sub ON dispatch.sno = dispatch_sub.dispatch_sno WHERE (dispatch.sno = @dispsno)");
                    cmd.Parameters.AddWithValue("@dispsno", RouteID);
                    DataTable dtindenttype = vdbmngr.SelectQuery(cmd).Tables[0];
                    if (dtindenttype.Rows.Count > 0)
                    {
                        indtype = dtindenttype.Rows[0]["IndentType"].ToString();
                    }
                    cmd = new MySqlCommand("SELECT dispatch.sno, dispatch.DispName, tripdat.Sno AS tripid FROM dispatch INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN (SELECT Sno FROM tripdata WHERE (I_Date BETWEEN @d1 AND @d2)) tripdat ON triproutes.Tripdata_sno = tripdat.Sno WHERE (dispatch.sno = @dispsno) GROUP BY dispatch.sno");
                    cmd.Parameters.AddWithValue("@dispsno", RouteID);
                    dtindenttime = DateTime.Parse(indentdate);
                    cmd.Parameters.AddWithValue("@d1", GetLowDate(dtindenttime));
                    cmd.Parameters.AddWithValue("@d2", GetHighDate(dtindenttime));
                    DataTable dttripid = vdbmngr.SelectQuery(cmd).Tables[0];
                    if (dttripid.Rows.Count > 0)
                    {
                        tripid = dttripid.Rows[0]["tripid"].ToString();
                        cmd = new MySqlCommand("SELECT dispatch.sno, dispatch.DispName, branchroutesubtable.RefNo, indents_subtable.D_date FROM dispatch INNER JOIN branchroutesubtable ON dispatch.Route_id = branchroutesubtable.RefNo INNER JOIN (SELECT IndentNo, Branch_id, I_date FROM indents WHERE (I_date BETWEEN @d1 AND @d2)) indent ON branchroutesubtable.BranchID = indent.Branch_id INNER JOIN indents_subtable ON indent.IndentNo = indents_subtable.IndentNo WHERE (dispatch.sno = @dispsno) AND (indents_subtable.D_date IS NOT NULL) GROUP BY dispatch.sno");
                        cmd.Parameters.AddWithValue("@dispsno", RouteID);
                        dtindenttime = DateTime.Parse(indentdate);
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(dtindenttime));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(dtindenttime));
                        DataTable dtdeliverdate = vdbmngr.SelectQuery(cmd).Tables[0];
                        if (dtdeliverdate.Rows.Count > 0)
                        {
                            dtdeltime = DateTime.Parse(dtdeliverdate.Rows[0]["D_date"].ToString());
                        }
                        else
                        {
                            dtdeltime = ServerDateCurrentdate;
                        }

                        cmd = new MySqlCommand("select IndentNo from Indents where Branch_id=@Branch_id AND (indents.I_date between @d1 AND  @d2) and (indents.IndentType = @IndentType)");
                        cmd.Parameters.AddWithValue("@Branch_id", BranchID);
                        cmd.Parameters.AddWithValue("@IndentType", indtype);
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(dtindenttime));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(dtindenttime));
                        DataTable dtIndent = vdbmngr.SelectQuery(cmd).Tables[0];
                        if (dtIndent.Rows.Count == 0)
                        {
                            cmd = new MySqlCommand("insert into indents (Branch_id,TotalQty,TotalPrice,I_date,UserData_sno,Status,PaymentStatus,IndentType)values(@Branch_id,@TotalQty,@TotalPrice,@I_date,@UserData_sno,@Status,@PaymentStatus,@IndentType)");
                            cmd.Parameters.AddWithValue("@Branch_id", BranchID);
                            cmd.Parameters.AddWithValue("@TotalQty", DelQty);
                            cmd.Parameters.AddWithValue("@TotalPrice", UnitCost);
                            dtindenttime = DateTime.Parse(indentdate);
                            cmd.Parameters.AddWithValue("@I_date", dtindenttime);
                            cmd.Parameters.AddWithValue("@UserData_sno", Username);
                            cmd.Parameters.AddWithValue("@Status", "O");
                            cmd.Parameters.AddWithValue("@PaymentStatus", 'A');
                            cmd.Parameters.AddWithValue("@IndentType", indtype);
                            long IndNo = vdbmngr.insertScalar(cmd);
                            cmd = new MySqlCommand("insert into indents_subtable (IndentNo,Product_sno,Status,unitQty,DeliveryQty,UnitCost,OTripId,D_date,DelTime,DTripId)values(@IndentNo,@Product_sno,@Status,@unitQty,@DeliveryQty,@UnitCost,@OTripId,@D_date,@DelTime,@DTripId)");
                            cmd.Parameters.AddWithValue("@IndentNo", IndNo);
                            cmd.Parameters.AddWithValue("@Product_sno", o.Productsno);
                            double UtCost = 0;
                            double.TryParse(o.Rate, out UtCost);
                            UtCost = Math.Round(UtCost, 2);
                            cmd.Parameters.AddWithValue("@UnitCost", UtCost);
                            double unitQty = 0;
                            cmd.Parameters.AddWithValue("@unitQty", unitQty);
                            cmd.Parameters.AddWithValue("@DeliveryQty", DelQty);
                            cmd.Parameters.AddWithValue("@Status", "Delivered");
                            cmd.Parameters.AddWithValue("@OTripId", "0");
                            cmd.Parameters.AddWithValue("@DTripId", tripid);
                            cmd.Parameters.AddWithValue("@D_date", dtdeltime);
                            cmd.Parameters.AddWithValue("@DelTime", dtdeltime);
                            vdbmngr.insert(cmd);

                        }
                        if (dtIndent.Rows.Count > 0)
                        {
                            string indentnumber = dtIndent.Rows[0]["IndentNo"].ToString();
                            cmd = new MySqlCommand("Update indents_subtable set unitQty=@unitQty,OTripId=@OTripId,UnitCost=@UnitCost,DeliveryQty=@DeliveryQty,Status=@Status,D_date=@D_date,DelTime=@DelTime,DTripId=@DTripId where IndentNo=@IndentNo and Product_sno=@Product_sno");
                            cmd.Parameters.AddWithValue("@IndentNo", indentnumber);
                            cmd.Parameters.AddWithValue("@Product_sno", o.Productsno);
                            double UtCost = 0;
                            double.TryParse(o.Rate, out UtCost);
                            UtCost = Math.Round(UtCost, 2);
                            cmd.Parameters.AddWithValue("@UnitCost", UtCost);
                            double unitQty = 0;
                            cmd.Parameters.AddWithValue("@unitQty", unitQty);
                            cmd.Parameters.AddWithValue("@DeliveryQty", DelQty);
                            cmd.Parameters.AddWithValue("@Status", "Delivered");
                            cmd.Parameters.AddWithValue("@OTripId", "0");
                            cmd.Parameters.AddWithValue("@DTripId", tripid);
                            cmd.Parameters.AddWithValue("@D_date", dtdeltime);
                            cmd.Parameters.AddWithValue("@DelTime", dtdeltime);
                            if (vdbmngr.Update(cmd) == 0)
                            {
                                cmd = new MySqlCommand("insert into indents_subtable (IndentNo,Product_sno,Status,unitQty,DeliveryQty,UnitCost,OTripId,D_date,DelTime,DTripId)values(@IndentNo,@Product_sno,@Status,@unitQty,@DeliveryQty,@UnitCost,@OTripId,@D_date,@DelTime,@DTripId)");
                                cmd.Parameters.AddWithValue("@IndentNo", indentnumber);
                                cmd.Parameters.AddWithValue("@Product_sno", o.Productsno);
                                cmd.Parameters.AddWithValue("@UnitCost", UtCost);
                                cmd.Parameters.AddWithValue("@unitQty", unitQty);
                                cmd.Parameters.AddWithValue("@DeliveryQty", DelQty);
                                cmd.Parameters.AddWithValue("@Status", "Delivered");
                                cmd.Parameters.AddWithValue("@OTripId", "0");
                                cmd.Parameters.AddWithValue("@DTripId", tripid);
                                cmd.Parameters.AddWithValue("@D_date", dtdeltime);
                                cmd.Parameters.AddWithValue("@DelTime", dtdeltime);
                                vdbmngr.insert(cmd);
                            }
                        }
                        cmd = new MySqlCommand("Update branchaccounts set Amount=Amount+@Amount where BranchId=@BranchId");
                        cmd.Parameters.AddWithValue("@Amount", productvalue);
                        cmd.Parameters.AddWithValue("@BranchId", BranchID);
                        vdbmngr.Update(cmd);
                    }
                }
                else
                {
                    cmd = new MySqlCommand("SELECT IndentNo, D_date, DTripId FROM indents_subtable WHERE (IndentNo = @indentno) AND (D_date IS NOT NULL) AND (DTripId IS NOT NULL) GROUP BY IndentNo");
                    cmd.Parameters.AddWithValue("@indentno", IndentNo);
                    DataTable dtdate = vdbmngr.SelectQuery(cmd).Tables[0];
                    if (dtdate.Rows.Count > 0)
                    {
                        string ddate = dtdate.Rows[0]["D_date"].ToString();
                        if (ddate != "")
                        {
                            tripid = dtdate.Rows[0]["DTripid"].ToString();
                            dtdeltime = DateTime.Parse(ddate);
                        }
                        else
                        {
                            dtdeltime = ServerDateCurrentdate;
                        }
                    }
                    else
                    {
                        cmd = new MySqlCommand("SELECT dispatch.sno, dispatch.DispName, tripdat.Sno AS tripid FROM dispatch INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN (SELECT Sno FROM tripdata WHERE (I_Date BETWEEN @d1 AND @d2)) tripdat ON triproutes.Tripdata_sno = tripdat.Sno WHERE (dispatch.sno = @dispsno) GROUP BY dispatch.sno");
                        cmd.Parameters.AddWithValue("@dispsno", RouteID);
                        dtindenttime = DateTime.Parse(indentdate);
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(dtindenttime));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(dtindenttime));
                        DataTable dttripid = vdbmngr.SelectQuery(cmd).Tables[0];
                        if (dttripid.Rows.Count > 0)
                        {
                            tripid = dttripid.Rows[0]["tripid"].ToString();
                            cmd = new MySqlCommand("SELECT dispatch.sno, dispatch.DispName, branchroutesubtable.RefNo, indents_subtable.D_date FROM dispatch INNER JOIN branchroutesubtable ON dispatch.Route_id = branchroutesubtable.RefNo INNER JOIN (SELECT IndentNo, Branch_id, I_date FROM indents WHERE (I_date BETWEEN @d1 AND @d2)) indent ON branchroutesubtable.BranchID = indent.Branch_id INNER JOIN indents_subtable ON indent.IndentNo = indents_subtable.IndentNo WHERE (dispatch.sno = @dispsno) AND (indents_subtable.D_date IS NOT NULL) GROUP BY dispatch.sno");
                            cmd.Parameters.AddWithValue("@dispsno", RouteID);
                            dtindenttime = DateTime.Parse(indentdate);
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(dtindenttime));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(dtindenttime));
                            DataTable dtdeliverdate = vdbmngr.SelectQuery(cmd).Tables[0];
                            if (dtdeliverdate.Rows.Count > 0)
                            {
                                dtdeltime = DateTime.Parse(dtdeliverdate.Rows[0]["D_date"].ToString());
                            }
                            else
                            {
                                dtdeltime = ServerDateCurrentdate;
                            }
                        }
                    }
                    double PreviousAmount = 0;
                    cmd = new MySqlCommand("SELECT SUM(DeliveryQty * UnitCost) AS prevamt FROM indents_subtable WHERE (IndentNo = @indentno) AND (Product_sno = @productsno)");
                    cmd.Parameters.AddWithValue("@indentno", IndentNo);
                    cmd.Parameters.AddWithValue("@productsno", ProductSno);
                    DataTable dtprevamt = vdbmngr.SelectQuery(cmd).Tables[0];
                    if (dtprevamt.Rows.Count > 0)
                    {
                        double.TryParse(dtprevamt.Rows[0]["prevamt"].ToString(), out PreviousAmount);
                    }
                    else
                    {
                        PreviousAmount = 0;
                    }
                    cmd = new MySqlCommand("UPDATE  indents_subtable set DeliveryQty=@DeliveryQty,D_date=@D_date,Status=@Status,UnitCost=@UnitCost,DelTime=@DelTime,DTripId=@dtripid where Product_sno=@Product_sno and IndentNo=@IndentNo");
                    double DQty = 0;
                    double.TryParse(DelQty, out DQty);
                    DQty = Math.Round(DQty, 2);
                    cmd.Parameters.AddWithValue("@DeliveryQty", DQty);
                    double Rate = 0;
                    double.TryParse(UnitCost, out Rate);
                    Rate = Math.Round(Rate, 2);
                    cmd.Parameters.AddWithValue("@UnitCost", Rate);
                    cmd.Parameters.AddWithValue("@D_date", dtdeltime);
                    cmd.Parameters.AddWithValue("@Status", "Delivered");
                    cmd.Parameters.AddWithValue("@DelTime", ServerDateCurrentdate);
                    cmd.Parameters.AddWithValue("@IndentNo", IndentNo);
                    cmd.Parameters.AddWithValue("@dtripid", tripid);
                    cmd.Parameters.AddWithValue("@Product_sno", ProductSno);
                    if (vdbmngr.Update(cmd) == 0)
                    {
                        cmd = new MySqlCommand("insert into indents_subtable (IndentNo,Product_sno,Status,unitQty,DeliveryQty,UnitCost,OTripId,D_date,DelTime,DTripId)values(@IndentNo,@Product_sno,@Status,@unitQty,@DeliveryQty,@UnitCost,@OTripId,@D_date,@DelTime,@DTripId)");
                        cmd.Parameters.AddWithValue("@IndentNo", IndentNo);
                        cmd.Parameters.AddWithValue("@Product_sno", ProductSno);
                        cmd.Parameters.AddWithValue("@UnitCost", Rate);
                        double unitQty = 0;
                        cmd.Parameters.AddWithValue("@unitQty", unitQty);
                        cmd.Parameters.AddWithValue("@DeliveryQty", DelQty);
                        cmd.Parameters.AddWithValue("@Status", "Delivered");
                        cmd.Parameters.AddWithValue("@OTripId", "0");
                        cmd.Parameters.AddWithValue("@DTripId", tripid);
                        cmd.Parameters.AddWithValue("@D_date", dtdeltime);
                        cmd.Parameters.AddWithValue("@DelTime", dtdeltime);
                        vdbmngr.insert(cmd);
                    }
                    double PresentAmount = Rate * DQty;
                    double actamt = PresentAmount - PreviousAmount;
                    if (PreviousAmount < PresentAmount)
                    {
                        cmd = new MySqlCommand("Update branchaccounts set Amount=Amount+@Amount where BranchId=@BranchId");
                        cmd.Parameters.AddWithValue("@Amount", actamt);
                        cmd.Parameters.AddWithValue("@BranchId", BranchID);
                        vdbmngr.Update(cmd);
                    }
                    else
                    {
                        double prevamt = Math.Abs(actamt);
                        cmd = new MySqlCommand("Update branchaccounts set Amount=Amount-@Amount where BranchId=@BranchId");
                        cmd.Parameters.AddWithValue("@Amount", prevamt);
                        cmd.Parameters.AddWithValue("@BranchId", BranchID);
                        vdbmngr.Update(cmd);
                    }
                }
            }
            //indent naveen
            DateTime sindentdate = Convert.ToDateTime(indentdate);
            cmd = new MySqlCommand("SELECT MAX(sno) as sno FROM agent_bal_trans WHERE agentid=@agentid and inddate between @d1 and @d2");
            cmd.Parameters.AddWithValue("@agentid", BranchID);
            cmd.Parameters.AddWithValue("@d1", GetLowDate(sindentdate));
            cmd.Parameters.AddWithValue("@d2", GetHighDate(sindentdate));
            DataTable dtagentbal = vdbmngr.SelectQuery(cmd).Tables[0];
            if (dtagentbal.Rows.Count > 0)
            {
                string sno = dtagentbal.Rows[0]["sno"].ToString();
                cmd = new MySqlCommand("SELECT sno, salesvalue, clo_balance FROM agent_bal_trans WHERE sno=@sno");
                cmd.Parameters.AddWithValue("@sno", sno);
                DataTable dtmaxagentbal = vdbmngr.SelectQuery(cmd).Tables[0];

                double salevalue = 0;
                double.TryParse(dtmaxagentbal.Rows[0]["salesvalue"].ToString(), out salevalue);
                double clobalance = 0;
                double.TryParse(dtmaxagentbal.Rows[0]["clo_balance"].ToString(), out clobalance);
                double diff = salevalue - totsalevalue;
                if (diff > 0)
                {
                    cmd = new MySqlCommand("UPDATE agent_bal_trans set salesvalue=salesvalue-@Amount, clo_balance=clo_balance-@Amount  where agentid=@BranchId AND inddate between @d1 and @d2");
                    cmd.Parameters.AddWithValue("@d1", GetLowDate(sindentdate));
                    cmd.Parameters.AddWithValue("@d2", GetHighDate(sindentdate));
                    cmd.Parameters.AddWithValue("@Amount", diff);
                    cmd.Parameters.AddWithValue("@BranchId", BranchID);
                    if (vdbmngr.Update(cmd) == 0)
                    {
                        cmd = new MySqlCommand("Insert Into agent_bal_trans(agentid, opp_balance, inddate, salesvalue, clo_balance, createdate, entryby) values (@BranchId,@opp_balance,@inddate, @salesvalue, @clo_balance, @createdate, @entryby)");
                        cmd.Parameters.AddWithValue("@BranchId", BranchID);
                        cmd.Parameters.AddWithValue("@opp_balance", clobalance);
                        cmd.Parameters.AddWithValue("@inddate", sindentdate);
                        cmd.Parameters.AddWithValue("@salesvalue", totsalevalue);
                        cmd.Parameters.AddWithValue("@clo_balance", totsalevalue);
                        cmd.Parameters.AddWithValue("@createdate", ServerDateCurrentdate);
                        cmd.Parameters.AddWithValue("@entryby", Username);
                        vdbmngr.insert(cmd);
                    }
                    cmd = new MySqlCommand("SELECT sno, agentid, opp_balance, inddate, salesvalue, clo_balance, paidamount FROM agent_bal_trans WHERE agentid=@agentid AND inddate between @d1 and @d2");
                    cmd.Parameters.AddWithValue("@agentid", BranchID);
                    cmd.Parameters.AddWithValue("@d1", GetLowDate(sindentdate).AddDays(1));
                    cmd.Parameters.AddWithValue("@d2", GetHighDate(ServerDateCurrentdate));
                    DataTable dtIndentbal = vdbmngr.SelectQuery(cmd).Tables[0];
                    if (dtIndentbal.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dtIndentbal.Rows)
                        {
                            string csno = dr["sno"].ToString();
                            double existoppbal = 0;
                            double opp_balance = 0;
                            double.TryParse(dr["opp_balance"].ToString(), out opp_balance);
                            existoppbal = opp_balance - diff;

                            double existclovalue = 0;
                            double clo_balance = 0;
                            double.TryParse(dr["clo_balance"].ToString(), out clo_balance);
                            existclovalue = clo_balance - diff;

                            cmd = new MySqlCommand("UPDATE agent_bal_trans SET opp_balance=@oppbal, clo_balance=@closing where sno=@refno");
                            cmd.Parameters.AddWithValue("@oppbal", existoppbal);
                            cmd.Parameters.AddWithValue("@refno", csno);
                            cmd.Parameters.AddWithValue("@closing", existclovalue);
                            vdbmngr.Update(cmd);
                        }
                    }
                }
                else
                {
                    diff = totsalevalue - salevalue;
                    cmd = new MySqlCommand("UPDATE agent_bal_trans set salesvalue=salesvalue+@Amount, clo_balance=clo_balance+@Amount  where agentid=@BranchId AND inddate between @d1 and @d2");
                    cmd.Parameters.AddWithValue("@d1", GetLowDate(sindentdate));
                    cmd.Parameters.AddWithValue("@d2", GetHighDate(sindentdate));
                    cmd.Parameters.AddWithValue("@Amount", diff);
                    cmd.Parameters.AddWithValue("@BranchId", BranchID);
                    if (vdbmngr.Update(cmd) == 0)
                    {
                        cmd = new MySqlCommand("Insert Into agent_bal_trans(agentid, opp_balance, inddate, salesvalue, clo_balance, createdate, entryby) values (@BranchId,@opp_balance,@inddate, @salesvalue, @clo_balance, @createdate, @entryby)");
                        cmd.Parameters.AddWithValue("@BranchId", BranchID);
                        cmd.Parameters.AddWithValue("@opp_balance", clobalance);
                        cmd.Parameters.AddWithValue("@inddate", sindentdate);
                        cmd.Parameters.AddWithValue("@salesvalue", totsalevalue);
                        cmd.Parameters.AddWithValue("@clo_balance", totsalevalue);
                        cmd.Parameters.AddWithValue("@createdate", ServerDateCurrentdate);
                        cmd.Parameters.AddWithValue("@entryby", Username);
                        vdbmngr.insert(cmd);
                    }
                    cmd = new MySqlCommand("SELECT sno, agentid, opp_balance, inddate, salesvalue, clo_balance, paidamount FROM agent_bal_trans WHERE agentid=@agentid AND inddate between @d1 and @d2");
                    cmd.Parameters.AddWithValue("@agentid", BranchID);
                    cmd.Parameters.AddWithValue("@d1", GetLowDate(sindentdate).AddDays(1));
                    cmd.Parameters.AddWithValue("@d2", GetHighDate(ServerDateCurrentdate));
                    DataTable dtIndentbal = vdbmngr.SelectQuery(cmd).Tables[0];
                    if (dtIndentbal.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dtIndentbal.Rows)
                        {
                            string csno = dr["sno"].ToString();
                            double existoppbal = 0;
                            double opp_balance = 0;
                            double.TryParse(dr["opp_balance"].ToString(), out opp_balance);
                            existoppbal = opp_balance + diff;

                            double existclovalue = 0;
                            double clo_balance = 0;
                            double.TryParse(dr["clo_balance"].ToString(), out clo_balance);
                            existclovalue = clo_balance + diff;

                            cmd = new MySqlCommand("UPDATE agent_bal_trans SET opp_balance=@oppbal, clo_balance=@closing where sno=@refno");
                            cmd.Parameters.AddWithValue("@oppbal", existoppbal);
                            cmd.Parameters.AddWithValue("@refno", csno);
                            cmd.Parameters.AddWithValue("@closing", existclovalue);
                            vdbmngr.Update(cmd);
                        }
                    }
                }
            }
            string msg = "Deliver Successfully Updated ";
            string response = GetJson(msg);
            context.Response.Write(response);

        }
        catch (Exception ex)
        {
            string msg = ex.Message;
            string response = GetJson(msg);
            context.Response.Write(response);
        }
    }
    private void btnNewEditIndentSaveClick(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            var js = new JavaScriptSerializer();
            DateTime ServerDateCurrentdate = VehicleDBMgr.GetTime(vdbmngr.conn);
            var title1 = context.Request.Params[1];
            DateTime dtdeltime = new DateTime();
            DateTime dtindenttime = new DateTime();
            string tripid = "0";
            Orders obj = js.Deserialize<Orders>(title1);
            string BranchID = obj.BranchID;
            string RouteID = obj.refno;
            string indentdate = obj.indentdate;

            string indtype = "Indent1";
            string Username = "1";
            double totsalevalue = 0;
            foreach (orderdetail o in obj.data)
            {
                string IndentNo = o.IndentNo;
                string ProductSno = o.Productsno;
                string DelQty = o.DelQty;
                string UnitCost = o.Rate;
                double DeliveryQty = 0;
                double.TryParse(DelQty, out DeliveryQty);
                DeliveryQty = Math.Round(DeliveryQty, 2);
                double unitRate = 0;
                double.TryParse(UnitCost, out unitRate);
                double productvalue = DeliveryQty * unitRate;
                totsalevalue += productvalue;
                if (IndentNo == "0")
                {
                    cmd = new MySqlCommand("SELECT dispatch.sno, dispatch.DispName, dispatch_sub.IndentType FROM dispatch INNER JOIN dispatch_sub ON dispatch.sno = dispatch_sub.dispatch_sno WHERE (dispatch.sno = @dispsno)");
                    cmd.Parameters.AddWithValue("@dispsno", RouteID);
                    DataTable dtindenttype = vdbmngr.SelectQuery(cmd).Tables[0];
                    if (dtindenttype.Rows.Count > 0)
                    {
                        indtype = dtindenttype.Rows[0]["IndentType"].ToString();
                    }
                    cmd = new MySqlCommand("SELECT dispatch.sno, dispatch.DispName, tripdat.Sno AS tripid FROM dispatch INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN (SELECT Sno FROM tripdata WHERE (I_Date BETWEEN @d1 AND @d2)) tripdat ON triproutes.Tripdata_sno = tripdat.Sno WHERE (dispatch.sno = @dispsno) GROUP BY dispatch.sno");
                    cmd.Parameters.AddWithValue("@dispsno", RouteID);
                    dtindenttime = DateTime.Parse(indentdate);
                    cmd.Parameters.AddWithValue("@d1", GetLowDate(dtindenttime));
                    cmd.Parameters.AddWithValue("@d2", GetHighDate(dtindenttime));
                    DataTable dttripid = vdbmngr.SelectQuery(cmd).Tables[0];
                    if (dttripid.Rows.Count > 0)
                    {
                        tripid = dttripid.Rows[0]["tripid"].ToString();
                        cmd = new MySqlCommand("SELECT dispatch.sno, dispatch.DispName, branchroutesubtable.RefNo, indents_subtable.D_date FROM dispatch INNER JOIN branchroutesubtable ON dispatch.Route_id = branchroutesubtable.RefNo INNER JOIN (SELECT IndentNo, Branch_id, I_date FROM indents WHERE (I_date BETWEEN @d1 AND @d2)) indent ON branchroutesubtable.BranchID = indent.Branch_id INNER JOIN indents_subtable ON indent.IndentNo = indents_subtable.IndentNo WHERE (dispatch.sno = @dispsno) AND (indents_subtable.D_date IS NOT NULL) GROUP BY dispatch.sno");
                        cmd.Parameters.AddWithValue("@dispsno", RouteID);
                        dtindenttime = DateTime.Parse(indentdate);
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(dtindenttime));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(dtindenttime));
                        DataTable dtdeliverdate = vdbmngr.SelectQuery(cmd).Tables[0];
                        if (dtdeliverdate.Rows.Count > 0)
                        {
                            dtdeltime = DateTime.Parse(dtdeliverdate.Rows[0]["D_date"].ToString());
                        }
                        else
                        {
                            dtdeltime = ServerDateCurrentdate;
                        }

                        cmd = new MySqlCommand("select IndentNo from Indents where Branch_id=@Branch_id AND (indents.I_date between @d1 AND  @d2) and (indents.IndentType = @IndentType)");
                        cmd.Parameters.AddWithValue("@Branch_id", BranchID);
                        cmd.Parameters.AddWithValue("@IndentType", indtype);
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(dtindenttime));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(dtindenttime));
                        DataTable dtIndent = vdbmngr.SelectQuery(cmd).Tables[0];
                        if (dtIndent.Rows.Count == 0)
                        {
                            cmd = new MySqlCommand("insert into indents (Branch_id,TotalQty,TotalPrice,I_date,UserData_sno,Status,PaymentStatus,IndentType)values(@Branch_id,@TotalQty,@TotalPrice,@I_date,@UserData_sno,@Status,@PaymentStatus,@IndentType)");
                            cmd.Parameters.AddWithValue("@Branch_id", BranchID);
                            cmd.Parameters.AddWithValue("@TotalQty", DelQty);
                            cmd.Parameters.AddWithValue("@TotalPrice", UnitCost);
                            dtindenttime = DateTime.Parse(indentdate);
                            cmd.Parameters.AddWithValue("@I_date", dtindenttime);
                            cmd.Parameters.AddWithValue("@UserData_sno", Username);
                            cmd.Parameters.AddWithValue("@Status", "O");
                            cmd.Parameters.AddWithValue("@PaymentStatus", 'A');
                            cmd.Parameters.AddWithValue("@IndentType", indtype);
                            long IndNo = vdbmngr.insertScalar(cmd);
                            cmd = new MySqlCommand("insert into indents_subtable (IndentNo,Product_sno,Status,unitQty,DeliveryQty,UnitCost,OTripId,D_date,DelTime,DTripId)values(@IndentNo,@Product_sno,@Status,@unitQty,@DeliveryQty,@UnitCost,@OTripId,@D_date,@DelTime,@DTripId)");
                            cmd.Parameters.AddWithValue("@IndentNo", IndNo);
                            cmd.Parameters.AddWithValue("@Product_sno", o.Productsno);
                            double UtCost = 0;
                            double.TryParse(o.Rate, out UtCost);
                            UtCost = Math.Round(UtCost, 2);
                            cmd.Parameters.AddWithValue("@UnitCost", UtCost);
                            double unitQty = 0;
                            cmd.Parameters.AddWithValue("@unitQty", unitQty);
                            cmd.Parameters.AddWithValue("@DeliveryQty", DelQty);
                            cmd.Parameters.AddWithValue("@Status", "Delivered");
                            cmd.Parameters.AddWithValue("@OTripId", "0");
                            cmd.Parameters.AddWithValue("@DTripId", tripid);
                            cmd.Parameters.AddWithValue("@D_date", dtdeltime);
                            cmd.Parameters.AddWithValue("@DelTime", dtdeltime);
                            vdbmngr.insert(cmd);

                        }
                        if (dtIndent.Rows.Count > 0)
                        {
                            string indentnumber = dtIndent.Rows[0]["IndentNo"].ToString();
                            cmd = new MySqlCommand("Update indents_subtable set unitQty=@unitQty,OTripId=@OTripId,UnitCost=@UnitCost,DeliveryQty=@DeliveryQty,Status=@Status,D_date=@D_date,DelTime=@DelTime,DTripId=@DTripId where IndentNo=@IndentNo and Product_sno=@Product_sno");
                            cmd.Parameters.AddWithValue("@IndentNo", indentnumber);
                            cmd.Parameters.AddWithValue("@Product_sno", o.Productsno);
                            double UtCost = 0;
                            double.TryParse(o.Rate, out UtCost);
                            UtCost = Math.Round(UtCost, 2);
                            cmd.Parameters.AddWithValue("@UnitCost", UtCost);
                            double unitQty = 0;
                            cmd.Parameters.AddWithValue("@unitQty", unitQty);
                            cmd.Parameters.AddWithValue("@DeliveryQty", DelQty);
                            cmd.Parameters.AddWithValue("@Status", "Delivered");
                            cmd.Parameters.AddWithValue("@OTripId", "0");
                            cmd.Parameters.AddWithValue("@DTripId", tripid);
                            cmd.Parameters.AddWithValue("@D_date", dtdeltime);
                            cmd.Parameters.AddWithValue("@DelTime", dtdeltime);
                            if (vdbmngr.Update(cmd) == 0)
                            {
                                cmd = new MySqlCommand("insert into indents_subtable (IndentNo,Product_sno,Status,unitQty,DeliveryQty,UnitCost,OTripId,D_date,DelTime,DTripId)values(@IndentNo,@Product_sno,@Status,@unitQty,@DeliveryQty,@UnitCost,@OTripId,@D_date,@DelTime,@DTripId)");
                                cmd.Parameters.AddWithValue("@IndentNo", indentnumber);
                                cmd.Parameters.AddWithValue("@Product_sno", o.Productsno);
                                cmd.Parameters.AddWithValue("@UnitCost", UtCost);
                                cmd.Parameters.AddWithValue("@unitQty", unitQty);
                                cmd.Parameters.AddWithValue("@DeliveryQty", DelQty);
                                cmd.Parameters.AddWithValue("@Status", "Delivered");
                                cmd.Parameters.AddWithValue("@OTripId", "0");
                                cmd.Parameters.AddWithValue("@DTripId", tripid);
                                cmd.Parameters.AddWithValue("@D_date", dtdeltime);
                                cmd.Parameters.AddWithValue("@DelTime", dtdeltime);
                                vdbmngr.insert(cmd);
                            }
                        }
                        cmd = new MySqlCommand("Update branchaccounts set Amount=Amount+@Amount where BranchId=@BranchId");
                        cmd.Parameters.AddWithValue("@Amount", productvalue);
                        cmd.Parameters.AddWithValue("@BranchId", BranchID);
                        vdbmngr.Update(cmd);
                    }
                }
                else
                {
                    cmd = new MySqlCommand("SELECT IndentNo, D_date, DTripId FROM indents_subtable WHERE (IndentNo = @indentno) AND (D_date IS NOT NULL) AND (DTripId IS NOT NULL) GROUP BY IndentNo");
                    cmd.Parameters.AddWithValue("@indentno", IndentNo);
                    DataTable dtdate = vdbmngr.SelectQuery(cmd).Tables[0];
                    if (dtdate.Rows.Count > 0)
                    {
                        string ddate = dtdate.Rows[0]["D_date"].ToString();
                        if (ddate != "")
                        {
                            tripid = dtdate.Rows[0]["DTripid"].ToString();
                            dtdeltime = DateTime.Parse(ddate);
                        }
                        else
                        {

                            dtdeltime = ServerDateCurrentdate;
                        }
                    }
                    else
                    {
                        cmd = new MySqlCommand("SELECT dispatch.sno, dispatch.DispName, tripdat.Sno AS tripid FROM dispatch INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN (SELECT Sno FROM tripdata WHERE (I_Date BETWEEN @d1 AND @d2)) tripdat ON triproutes.Tripdata_sno = tripdat.Sno WHERE (dispatch.sno = @dispsno) GROUP BY dispatch.sno");
                        cmd.Parameters.AddWithValue("@dispsno", RouteID);
                        dtindenttime = DateTime.Parse(indentdate);
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(dtindenttime));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(dtindenttime));
                        DataTable dttripid = vdbmngr.SelectQuery(cmd).Tables[0];
                        if (dttripid.Rows.Count > 0)
                        {
                            tripid = dttripid.Rows[0]["tripid"].ToString();

                            cmd = new MySqlCommand("SELECT dispatch.sno, dispatch.DispName, branchroutesubtable.RefNo, indents_subtable.D_date FROM dispatch INNER JOIN branchroutesubtable ON dispatch.Route_id = branchroutesubtable.RefNo INNER JOIN (SELECT IndentNo, Branch_id, I_date FROM indents WHERE (I_date BETWEEN @d1 AND @d2)) indent ON branchroutesubtable.BranchID = indent.Branch_id INNER JOIN indents_subtable ON indent.IndentNo = indents_subtable.IndentNo WHERE (dispatch.sno = @dispsno) AND (indents_subtable.D_date IS NOT NULL) GROUP BY dispatch.sno");
                            cmd.Parameters.AddWithValue("@dispsno", RouteID);
                            dtindenttime = DateTime.Parse(indentdate);
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(dtindenttime));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(dtindenttime));
                            DataTable dtdeliverdate = vdbmngr.SelectQuery(cmd).Tables[0];
                            if (dtdeliverdate.Rows.Count > 0)
                            {
                                dtdeltime = DateTime.Parse(dtdeliverdate.Rows[0]["D_date"].ToString());
                            }
                            else
                            {
                                dtdeltime = ServerDateCurrentdate;
                            }
                        }
                    }
                    double PreviousAmount = 0;
                    cmd = new MySqlCommand("SELECT SUM(DeliveryQty * UnitCost) AS prevamt FROM indents_subtable WHERE (IndentNo = @indentno) AND (Product_sno = @productsno)");
                    cmd.Parameters.AddWithValue("@indentno", IndentNo);
                    cmd.Parameters.AddWithValue("@productsno", ProductSno);
                    DataTable dtprevamt = vdbmngr.SelectQuery(cmd).Tables[0];
                    if (dtprevamt.Rows.Count > 0)
                    {
                        double.TryParse(dtprevamt.Rows[0]["prevamt"].ToString(), out PreviousAmount);
                    }
                    else
                    {
                        PreviousAmount = 0;
                    }
                    cmd = new MySqlCommand("UPDATE  indents_subtable set DeliveryQty=@DeliveryQty,D_date=@D_date,Status=@Status,UnitCost=@UnitCost,DelTime=@DelTime,DTripId=@dtripid where Product_sno=@Product_sno and IndentNo=@IndentNo");
                    double DQty = 0;
                    double.TryParse(DelQty, out DQty);
                    DQty = Math.Round(DQty, 2);
                    cmd.Parameters.AddWithValue("@DeliveryQty", DQty);
                    double Rate = 0;
                    double.TryParse(UnitCost, out Rate);
                    Rate = Math.Round(Rate, 2);
                    cmd.Parameters.AddWithValue("@UnitCost", Rate);
                    cmd.Parameters.AddWithValue("@D_date", dtdeltime);
                    cmd.Parameters.AddWithValue("@Status", "Delivered");
                    cmd.Parameters.AddWithValue("@DelTime", ServerDateCurrentdate);
                    cmd.Parameters.AddWithValue("@IndentNo", IndentNo);
                    cmd.Parameters.AddWithValue("@dtripid", tripid);
                    cmd.Parameters.AddWithValue("@Product_sno", ProductSno);
                    if (vdbmngr.Update(cmd) == 0)
                    {
                        cmd = new MySqlCommand("insert into indents_subtable (IndentNo,Product_sno,Status,unitQty,DeliveryQty,UnitCost,OTripId,D_date,DelTime,DTripId)values(@IndentNo,@Product_sno,@Status,@unitQty,@DeliveryQty,@UnitCost,@OTripId,@D_date,@DelTime,@DTripId)");
                        cmd.Parameters.AddWithValue("@IndentNo", IndentNo);
                        cmd.Parameters.AddWithValue("@Product_sno", ProductSno);
                        cmd.Parameters.AddWithValue("@UnitCost", Rate);
                        double unitQty = 0;
                        cmd.Parameters.AddWithValue("@unitQty", unitQty);
                        cmd.Parameters.AddWithValue("@DeliveryQty", DelQty);
                        cmd.Parameters.AddWithValue("@Status", "Delivered");
                        cmd.Parameters.AddWithValue("@OTripId", "0");
                        cmd.Parameters.AddWithValue("@DTripId", tripid);
                        cmd.Parameters.AddWithValue("@D_date", dtdeltime);
                        cmd.Parameters.AddWithValue("@DelTime", dtdeltime);
                        vdbmngr.insert(cmd);
                    }
                    double PresentAmount = Rate * DQty;
                    double actamt = PresentAmount - PreviousAmount;
                    if (PreviousAmount < PresentAmount)
                    {
                        cmd = new MySqlCommand("Update branchaccounts set Amount=Amount+@Amount where BranchId=@BranchId");
                        cmd.Parameters.AddWithValue("@Amount", actamt);
                        cmd.Parameters.AddWithValue("@BranchId", BranchID);
                        vdbmngr.Update(cmd);
                    }
                    else
                    {
                        double prevamt = Math.Abs(actamt);

                        cmd = new MySqlCommand("Update branchaccounts set Amount=Amount-@Amount where BranchId=@BranchId");
                        cmd.Parameters.AddWithValue("@Amount", prevamt);
                        cmd.Parameters.AddWithValue("@BranchId", BranchID);
                        vdbmngr.Update(cmd);
                    }
                }
            }
            //indent naveen
            DateTime sindentdate = Convert.ToDateTime(indentdate);
            cmd = new MySqlCommand("SELECT MAX(sno) as sno FROM agent_bal_trans WHERE agentid=@agentid and inddate between @d1 and @d2");
            cmd.Parameters.AddWithValue("@agentid", BranchID);
            cmd.Parameters.AddWithValue("@d1", GetLowDate(sindentdate));
            cmd.Parameters.AddWithValue("@d2", GetHighDate(sindentdate));
            DataTable dtagentbal = vdbmngr.SelectQuery(cmd).Tables[0];
            if (dtagentbal.Rows.Count > 0)
            {
                string sno = dtagentbal.Rows[0]["sno"].ToString();
                cmd = new MySqlCommand("SELECT sno, salesvalue, clo_balance FROM agent_bal_trans WHERE sno=@sno");
                cmd.Parameters.AddWithValue("@sno", sno);
                DataTable dtmaxagentbal = vdbmngr.SelectQuery(cmd).Tables[0];
                double salevalue = 0;
                double.TryParse(dtmaxagentbal.Rows[0]["salesvalue"].ToString(), out salevalue);
                double clobalance = 0;
                double.TryParse(dtmaxagentbal.Rows[0]["clo_balance"].ToString(), out clobalance);
                double diff = salevalue - totsalevalue;
                if (diff == 0)
                {
                    cmd = new MySqlCommand("UPDATE agent_bal_trans set paidamount=paidamount+@Amount, clo_balance=clo_balance-@Amount  where agentid=@BranchId AND inddate between @d1 and @d2");
                    cmd.Parameters.AddWithValue("@d1", GetLowDate(sindentdate));
                    cmd.Parameters.AddWithValue("@d2", GetHighDate(sindentdate));
                    cmd.Parameters.AddWithValue("@Amount", totsalevalue);
                    cmd.Parameters.AddWithValue("@BranchId", BranchID);
                    if (vdbmngr.Update(cmd) == 0)
                    {
                        cmd = new MySqlCommand("Insert Into agent_bal_trans(agentid, opp_balance, inddate, paidamount, clo_balance, createdate, entryby) values (@BranchId,@opp_balance,@inddate, @paidamount, @clo_balance, @createdate, @entryby)");
                        cmd.Parameters.AddWithValue("@BranchId", BranchID);
                        cmd.Parameters.AddWithValue("@opp_balance", clobalance);
                        cmd.Parameters.AddWithValue("@inddate", sindentdate);
                        cmd.Parameters.AddWithValue("@salesvalue", totsalevalue);
                        cmd.Parameters.AddWithValue("@clo_balance", totsalevalue);
                        cmd.Parameters.AddWithValue("@createdate", ServerDateCurrentdate);
                        cmd.Parameters.AddWithValue("@entryby", "1");
                        vdbmngr.insert(cmd);
                    }
                    cmd = new MySqlCommand("SELECT sno, agentid, opp_balance, inddate, salesvalue, clo_balance, paidamount FROM agent_bal_trans WHERE agentid=@agentid AND inddate between @d1 and @d2");
                    cmd.Parameters.AddWithValue("@agentid", BranchID);
                    cmd.Parameters.AddWithValue("@d1", GetLowDate(sindentdate));
                    cmd.Parameters.AddWithValue("@d2", GetHighDate(ServerDateCurrentdate));
                    DataTable dtIndentbal = vdbmngr.SelectQuery(cmd).Tables[0];
                    if (dtIndentbal.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dtIndentbal.Rows)
                        {
                            string csno = dr["sno"].ToString();
                            double existoppbal = 0;
                            double opp_balance = 0;
                            double.TryParse(dr["opp_balance"].ToString(), out opp_balance);
                            existoppbal = opp_balance - totsalevalue;

                            double existclovalue = 0;
                            double clo_balance = 0;
                            double.TryParse(dr["clo_balance"].ToString(), out clo_balance);
                            existclovalue = clo_balance - totsalevalue;
                            cmd = new MySqlCommand("UPDATE agent_bal_trans SET opp_balance=@oppbal, clo_balance=@closing where sno=@refno");
                            cmd.Parameters.AddWithValue("@oppbal", existoppbal);
                            cmd.Parameters.AddWithValue("@refno", csno);
                            cmd.Parameters.AddWithValue("@closing", existclovalue);
                            vdbmngr.Update(cmd);
                        }
                    }
                }
                else if (diff > 0)
                {
                    cmd = new MySqlCommand("UPDATE agent_bal_trans set salesvalue=salesvalue-@Amount, clo_balance=clo_balance-@Amount  where agentid=@BranchId AND inddate between @d1 and @d2");
                    cmd.Parameters.AddWithValue("@d1", GetLowDate(sindentdate));
                    cmd.Parameters.AddWithValue("@d2", GetHighDate(sindentdate));
                    cmd.Parameters.AddWithValue("@Amount", diff);
                    cmd.Parameters.AddWithValue("@BranchId", BranchID);
                    if (vdbmngr.Update(cmd) == 0)
                    {
                        cmd = new MySqlCommand("Insert Into agent_bal_trans(agentid, opp_balance, inddate, salesvalue, clo_balance, createdate, entryby) values (@BranchId,@opp_balance,@inddate, @salesvalue, @clo_balance, @createdate, @entryby)");
                        cmd.Parameters.AddWithValue("@BranchId", BranchID);
                        cmd.Parameters.AddWithValue("@opp_balance", clobalance);
                        cmd.Parameters.AddWithValue("@inddate", sindentdate);
                        cmd.Parameters.AddWithValue("@salesvalue", totsalevalue);
                        cmd.Parameters.AddWithValue("@clo_balance", totsalevalue);
                        cmd.Parameters.AddWithValue("@createdate", ServerDateCurrentdate);
                        cmd.Parameters.AddWithValue("@entryby", Username);
                        vdbmngr.insert(cmd);
                    }
                    cmd = new MySqlCommand("SELECT sno, agentid, opp_balance, inddate, salesvalue, clo_balance, paidamount FROM agent_bal_trans WHERE agentid=@agentid AND inddate between @d1 and @d2");
                    cmd.Parameters.AddWithValue("@agentid", BranchID);
                    cmd.Parameters.AddWithValue("@d1", GetLowDate(sindentdate).AddDays(1));
                    cmd.Parameters.AddWithValue("@d2", GetHighDate(ServerDateCurrentdate));
                    DataTable dtIndentbal = vdbmngr.SelectQuery(cmd).Tables[0];
                    if (dtIndentbal.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dtIndentbal.Rows)
                        {
                            string csno = dr["sno"].ToString();
                            double existoppbal = 0;
                            double opp_balance = 0;
                            double.TryParse(dr["opp_balance"].ToString(), out opp_balance);
                            existoppbal = opp_balance - diff;
                            double existclovalue = 0;
                            double clo_balance = 0;
                            double.TryParse(dr["clo_balance"].ToString(), out clo_balance);
                            existclovalue = clo_balance - diff;
                            cmd = new MySqlCommand("UPDATE agent_bal_trans SET opp_balance=@oppbal, clo_balance=@closing where sno=@refno");
                            cmd.Parameters.AddWithValue("@oppbal", existoppbal);
                            cmd.Parameters.AddWithValue("@refno", csno);
                            cmd.Parameters.AddWithValue("@closing", existclovalue);
                            vdbmngr.Update(cmd);
                        }
                    }
                }
                else
                {
                    diff = totsalevalue - salevalue;
                    cmd = new MySqlCommand("UPDATE agent_bal_trans set salesvalue=salesvalue+@Amount, clo_balance=clo_balance+@Amount  where agentid=@BranchId AND inddate between @d1 and @d2");
                    cmd.Parameters.AddWithValue("@d1", GetLowDate(sindentdate));
                    cmd.Parameters.AddWithValue("@d2", GetHighDate(sindentdate));
                    cmd.Parameters.AddWithValue("@Amount", diff);
                    cmd.Parameters.AddWithValue("@BranchId", BranchID);
                    if (vdbmngr.Update(cmd) == 0)
                    {
                        cmd = new MySqlCommand("Insert Into agent_bal_trans(agentid, opp_balance, inddate, salesvalue, clo_balance, createdate, entryby) values (@BranchId,@opp_balance,@inddate, @salesvalue, @clo_balance, @createdate, @entryby)");
                        cmd.Parameters.AddWithValue("@BranchId", BranchID);
                        cmd.Parameters.AddWithValue("@opp_balance", clobalance);
                        cmd.Parameters.AddWithValue("@inddate", sindentdate);
                        cmd.Parameters.AddWithValue("@salesvalue", totsalevalue);
                        cmd.Parameters.AddWithValue("@clo_balance", totsalevalue);
                        cmd.Parameters.AddWithValue("@createdate", ServerDateCurrentdate);
                        cmd.Parameters.AddWithValue("@entryby", Username);
                        vdbmngr.insert(cmd);
                    }
                    cmd = new MySqlCommand("SELECT sno, agentid, opp_balance, inddate, salesvalue, clo_balance, paidamount FROM agent_bal_trans WHERE agentid=@agentid AND inddate between @d1 and @d2");
                    cmd.Parameters.AddWithValue("@agentid", BranchID);
                    cmd.Parameters.AddWithValue("@d1", GetLowDate(sindentdate).AddDays(1));
                    cmd.Parameters.AddWithValue("@d2", GetHighDate(ServerDateCurrentdate));
                    DataTable dtIndentbal = vdbmngr.SelectQuery(cmd).Tables[0];
                    if (dtIndentbal.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dtIndentbal.Rows)
                        {
                            string csno = dr["sno"].ToString();
                            double existoppbal = 0;
                            double opp_balance = 0;
                            double.TryParse(dr["opp_balance"].ToString(), out opp_balance);
                            existoppbal = opp_balance + diff;

                            double existclovalue = 0;
                            double clo_balance = 0;
                            double.TryParse(dr["clo_balance"].ToString(), out clo_balance);
                            existclovalue = clo_balance + diff;

                            cmd = new MySqlCommand("UPDATE agent_bal_trans SET opp_balance=@oppbal, clo_balance=@closing where sno=@refno");
                            cmd.Parameters.AddWithValue("@oppbal", existoppbal);
                            cmd.Parameters.AddWithValue("@refno", csno);
                            cmd.Parameters.AddWithValue("@closing", existclovalue);
                            vdbmngr.Update(cmd);
                        }
                    }
                }
            }
            #region
            else //begin added by akbar 05/06/2022
            {
                cmd = new MySqlCommand("SELECT MAX(sno) as sno FROM agent_bal_trans WHERE agentid=@Branchid");
                cmd.Parameters.AddWithValue("@Branchid", BranchID);
                DataTable dtagenttrans = vdbmngr.SelectQuery(cmd).Tables[0];
                if (dtagenttrans.Rows.Count > 0)
                {
                    string maxsno = dtagenttrans.Rows[0]["sno"].ToString();
                    cmd = new MySqlCommand("SELECT agentid, opp_balance,paidamount, inddate, salesvalue, clo_balance FROM agent_bal_trans WHERE sno=@sno");
                    cmd.Parameters.AddWithValue("@sno", maxsno);
                    DataTable dtmaxagenttrans = vdbmngr.SelectQuery(cmd).Tables[0];
                    if (dtmaxagenttrans.Rows.Count > 0)
                    {
                        string closingbalance = dtmaxagenttrans.Rows[0]["clo_balance"].ToString();
                        double clsvalue = Convert.ToDouble(closingbalance);
                        double closingvalue = clsvalue + totsalevalue;
                        cmd = new MySqlCommand("UPDATE agent_bal_trans set  clo_balance=clo_balance+@clAmount  where agentid=@BranchId AND inddate=@inddate");
                        cmd.Parameters.AddWithValue("@BranchId", BranchID);
                        cmd.Parameters.AddWithValue("@inddate", sindentdate);
                        cmd.Parameters.AddWithValue("@clAmount", closingvalue);
                        if (vdbmngr.Update(cmd) == 0)
                        {
                            cmd = new MySqlCommand("Insert Into agent_bal_trans(agentid, opp_balance, inddate, salesvalue,  clo_balance, createdate, entryby,paidamount) values (@BranchId,@opp_balance,@inddate, @salesvalue, @clo_balance, @createdate, @entryby,@paidamount)");
                            cmd.Parameters.AddWithValue("@paidamount", 0);
                            cmd.Parameters.AddWithValue("@BranchId", BranchID);
                            cmd.Parameters.AddWithValue("@opp_balance", clsvalue);
                            cmd.Parameters.AddWithValue("@inddate", sindentdate);
                            cmd.Parameters.AddWithValue("@salesvalue", totsalevalue);
                            cmd.Parameters.AddWithValue("@clo_balance", closingvalue);
                            cmd.Parameters.AddWithValue("@createdate", ServerDateCurrentdate);
                            cmd.Parameters.AddWithValue("@entryby", context.Session["UserSno"].ToString());
                            vdbmngr.insert(cmd);
                        }
                    }
                }
            }
            //end added by akbar 05/06/2022
            #endregion
            //saving  delivary inventary added by Akbar 20-May-2022
            dtindenttime = DateTime.Parse(indentdate);

            cmd = new MySqlCommand("SELECT  tripdata.I_Date, tripdata.Sno,  tripdata.Permissions FROM  tripdata INNER JOIN triproutes ON tripdata.Sno = triproutes.Tripdata_sno INNER JOIN empmanage ON tripdata.EmpId = empmanage.Sno INNER JOIN branchdata ON empmanage.Branch = branchdata.sno INNER JOIN salestypemanagement ON branchdata.SalesType = salestypemanagement.sno INNER JOIN dispatch ON triproutes.RouteID = dispatch.sno INNER JOIN dispatch_sub ON dispatch.sno = dispatch_sub.dispatch_sno WHERE (tripdata.I_Date between @d1 and @d2) and (dispatch_sub.dispatch_sno =@dispatch_sno );");
            cmd.Parameters.AddWithValue("@d1", GetLowDate(dtindenttime));
            cmd.Parameters.AddWithValue("@d2", GetHighDate(dtindenttime));
            cmd.Parameters.AddWithValue("@dispatch_sno", RouteID);
            DataTable dttripdata = vdbmngr.SelectQuery(cmd).Tables[0];
            string TripdataSno = "";
            if (dttripdata.Rows.Count > 0)
            {
                TripdataSno = dttripdata.Rows[0]["Sno"].ToString(); ;
            }


            DataTable dtPrevInventory = new DataTable();
            cmd = new MySqlCommand("SELECT invmaster.InvName, invmaster.sno, inventory_monitor.Qty AS BranchQty, invtransactions12.Qty FROM invmaster INNER JOIN inventory_monitor ON invmaster.sno = inventory_monitor.Inv_Sno INNER JOIN  invtransactions12 ON invmaster.sno = invtransactions12.B_inv_sno AND inventory_monitor.BranchId = invtransactions12.FromTran WHERE (invtransactions12.ToTran = @ToTrans) and (invtransactions12.FromTran = @FromTran) AND (invtransactions12.TransType = @TransType) AND (inventory_monitor.BranchId = @BranchID) GROUP BY invmaster.InvName ORDER BY invmaster.sno");
            cmd.Parameters.AddWithValue("@TransType", "2");
            cmd.Parameters.AddWithValue("@BranchID", BranchID);
            cmd.Parameters.AddWithValue("@FromTran", TripdataSno);
            cmd.Parameters.AddWithValue("@ToTrans", BranchID);
            dtPrevInventory = vdbmngr.SelectQuery(cmd).Tables[0];

            foreach (Inventorydetail o in obj.Inventorydetails)
            {
                if (o.SNo == null || o.SNo == "")
                {
                }
                else
                {

                    if (dtPrevInventory.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dtPrevInventory.Rows)
                        {
                            string InvSno = o.InvSno;
                            string PInvSno = dr["sno"].ToString();
                            if (InvSno == PInvSno)
                            {
                                int GivenQty = 0;
                                int.TryParse(o.GivenQty, out GivenQty);
                                int TodayQty = 0;
                                int.TryParse(dr["Qty"].ToString(), out TodayQty);
                                int TotQty = GivenQty - TodayQty;
                                if (TotQty >= 1)
                                {
                                    cmd = new MySqlCommand("update tripinvdata set Remaining=Remaining-@Remaining where Tripdata_sno=@TripID and invId=@invId");
                                    cmd.Parameters.AddWithValue("@Remaining", TotQty);
                                    cmd.Parameters.AddWithValue("@invId", o.InvSno);
                                    cmd.Parameters.AddWithValue("@TripID", TripdataSno);
                                    vdbmngr.Update(cmd);
                                    cmd = new MySqlCommand("update inventory_monitor set Qty=Qty+@Qty where Inv_Sno=@Inv_Sno and BranchId=@BranchId");
                                    cmd.Parameters.AddWithValue("@Qty", TotQty);
                                    cmd.Parameters.AddWithValue("@Inv_Sno", o.InvSno);
                                    cmd.Parameters.AddWithValue("@BranchId", BranchID);
                                    vdbmngr.Update(cmd);
                                }
                                else
                                {
                                    TotQty = Math.Abs(TotQty);
                                    cmd = new MySqlCommand("update tripinvdata set Remaining=Remaining+@Remaining where Tripdata_sno=@TripID and invId=@invId");
                                    cmd.Parameters.AddWithValue("@Remaining", TotQty);
                                    cmd.Parameters.AddWithValue("@invId", o.InvSno);
                                    cmd.Parameters.AddWithValue("@TripID", TripdataSno);
                                    vdbmngr.Update(cmd);
                                    cmd = new MySqlCommand("update inventory_monitor set Qty=Qty-@Qty where Inv_Sno=@Inv_Sno and BranchId=@BranchId");
                                    cmd.Parameters.AddWithValue("@Qty", TotQty);
                                    cmd.Parameters.AddWithValue("@Inv_Sno", o.InvSno);
                                    cmd.Parameters.AddWithValue("@BranchId", BranchID);
                                    vdbmngr.Update(cmd);
                                }
                            }
                            else
                            {
                            }
                        }
                    }
                    else
                    {
                        cmd = new MySqlCommand("update tripinvdata set Remaining=Remaining-@Remaining where Tripdata_sno=@TripID and invId=@invId");
                        int GivenQty = 0;
                        int.TryParse(o.GivenQty, out GivenQty);
                        cmd.Parameters.AddWithValue("@Remaining", GivenQty);
                        cmd.Parameters.AddWithValue("@invId", o.InvSno);
                        cmd.Parameters.AddWithValue("@TripID", TripdataSno);
                        vdbmngr.Update(cmd);
                        cmd = new MySqlCommand("update inventory_monitor set Qty=Qty+@Qty where Inv_Sno=@Inv_Sno and BranchId=@BranchId");
                        cmd.Parameters.AddWithValue("@Qty", GivenQty);
                        cmd.Parameters.AddWithValue("@Inv_Sno", o.InvSno);
                        cmd.Parameters.AddWithValue("@BranchId", BranchID);
                        if (vdbmngr.Update(cmd) == 0)
                        {
                            cmd = new MySqlCommand("Insert into inventory_monitor(Qty,Inv_Sno,BranchId) values(@Qty,@Inv_Sno,@BranchId)");
                            cmd.Parameters.AddWithValue("@Qty", GivenQty);
                            cmd.Parameters.AddWithValue("@Inv_Sno", o.InvSno);
                            cmd.Parameters.AddWithValue("@BranchId", BranchID);
                            vdbmngr.insert(cmd);
                        }
                    }
                    cmd = new MySqlCommand("update invtransactions12 set Qty=@Qty,DOE=@DOE where FromTran=@From and B_Inv_Sno=@B_Inv_Sno and EmpID=@EmpID and ToTran=@To and TransType=@TransType");
                    cmd.Parameters.AddWithValue("@B_Inv_Sno", o.InvSno);
                    cmd.Parameters.AddWithValue("@Qty", o.GivenQty);
                    cmd.Parameters.AddWithValue("@DOE", ServerDateCurrentdate);
                    cmd.Parameters.AddWithValue("@From", TripdataSno);
                    cmd.Parameters.AddWithValue("@TransType", "2");
                    cmd.Parameters.AddWithValue("@EmpID", context.Session["UserSno"].ToString());
                    cmd.Parameters.AddWithValue("@To", BranchID);
                    if (vdbmngr.Update(cmd) == 0)
                    {
                        cmd = new MySqlCommand("Insert into  invtransactions12(B_Inv_Sno,Qty,DOE,EmpID,FromTran,ToTran,TransType) values(@B_Inv_Sno,@Qty,@DOE,@EmpID,@From,@To,@TransType)");
                        cmd.Parameters.AddWithValue("@B_Inv_Sno", o.InvSno);
                        cmd.Parameters.AddWithValue("@Qty", o.GivenQty);
                        cmd.Parameters.AddWithValue("@DOE", ServerDateCurrentdate);
                        cmd.Parameters.AddWithValue("@From", TripdataSno);
                        cmd.Parameters.AddWithValue("@TransType", "2");
                        cmd.Parameters.AddWithValue("@EmpID", context.Session["UserSno"].ToString());
                        cmd.Parameters.AddWithValue("@To", BranchID);
                        if (o.GivenQty != "0")
                        {
                            vdbmngr.insert(cmd);
                        }
                    }
                }
            }
            //End saving  delivary inventary added by Akbar 20-May-2022
            //saving  collection inventary added by Akbar 20-May-2022

            //
            string msg = "Deliver Successfully Updated";
            string response = GetJson(msg);
            context.Response.Write(response);

        }
        catch (Exception ex)
        {
            string msg = ex.Message;
            string response = GetJson(msg);
            context.Response.Write(response);
        }
    }
    private void GetProductNamechange(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            string Sno = context.Request["ProductSno"];
            string BranchID = context.Request["BranchID"];
            List<ProductUnit> ProductList = new List<ProductUnit>();
            cmd = new MySqlCommand("SELECT branchproducts.unitprice, branchproducts.product_sno, productsdata.Qty, productsdata.Units FROM branchproducts INNER JOIN productsdata ON branchproducts.product_sno = productsdata.sno WHERE (branchproducts.branch_sno = @BranchID) and (branchproducts.product_sno=@sno) ");
            cmd.Parameters.AddWithValue("@sno", Sno);
            cmd.Parameters.AddWithValue("@BranchID", BranchID);
            DataTable dtBranchProduct = vdbmngr.SelectQuery(cmd).Tables[0];
            string AunitPrice = "0";
            if (dtBranchProduct.Rows.Count > 0)
            {
                AunitPrice = dtBranchProduct.Rows[0]["unitprice"].ToString();
            }
            if (AunitPrice == "0")
            {
                cmd = new MySqlCommand("SELECT productsdata.UnitPrice,productsdata.Qty, productsdata.Units, branchproducts.product_sno, branchproducts.unitprice AS Bunitprice , productsdata.ProductName FROM productsdata INNER JOIN branchproducts ON productsdata.sno = branchproducts.product_sno INNER JOIN branchmappingtable ON branchproducts.branch_sno = branchmappingtable.SuperBranch WHERE (branchmappingtable.SubBranch = @BranchID) AND (branchproducts.product_sno = @Sno)");
                cmd.Parameters.AddWithValue("@sno", Sno);
                cmd.Parameters.AddWithValue("@BranchID", BranchID);
                DataTable dtProduct = vdbmngr.SelectQuery(cmd).Tables[0];
                ProductUnit GetProduct = new ProductUnit();
                GetProduct.UnitPrice = dtProduct.Rows[0]["UnitPrice"].ToString();
                GetProduct.Unitqty = dtProduct.Rows[0]["Qty"].ToString();
                GetProduct.Units = dtProduct.Rows[0]["Units"].ToString();
                string BranchUnitPrice = dtProduct.Rows[0]["BUnitPrice"].ToString();
                float Rate = 0;
                if (BranchUnitPrice != "0")
                {
                    Rate = (float)dtProduct.Rows[0]["BUnitPrice"];
                }
                else
                {
                    Rate = (float)dtProduct.Rows[0]["UnitPrice"];
                }
                //float Rate = (float)dtProduct.Rows[0]["UnitPrice"];
                float Unitqty = (float)dtProduct.Rows[0]["Qty"];
                float TotalRate = 0;
                TotalRate = Rate;
                if (dtProduct.Rows[0]["Units"].ToString() == "ml" || dtProduct.Rows[0]["Units"].ToString() == "ltr")
                {
                    GetProduct.Desciption = "Ltrs";
                }
                else
                {
                    GetProduct.Desciption = "Kgs";
                }
                //getOrderValue.Rate = (float)Rate;
                GetProduct.orderunitRate = (float)TotalRate;
                ProductList.Add(GetProduct);
                string response = GetJson(ProductList);
                context.Response.Write(response);
            }
            else
            {
                ProductUnit GetProduct = new ProductUnit();
                GetProduct.UnitPrice = dtBranchProduct.Rows[0]["UnitPrice"].ToString();
                GetProduct.Unitqty = dtBranchProduct.Rows[0]["Qty"].ToString();
                GetProduct.Units = dtBranchProduct.Rows[0]["Units"].ToString();
                float Rate = (float)dtBranchProduct.Rows[0]["UnitPrice"];
                float Unitqty = (float)dtBranchProduct.Rows[0]["Qty"];
                float TotalRate = 0;
                TotalRate = Rate;
                if (dtBranchProduct.Rows[0]["Units"].ToString() == "ml" || dtBranchProduct.Rows[0]["Units"].ToString() == "ltr")
                {
                    GetProduct.Desciption = "Ltrs";
                }
                else
                {
                    GetProduct.Desciption = "Kgs";
                }
                //getOrderValue.Rate = (float)Rate;
                GetProduct.orderunitRate = (float)TotalRate;
                ProductList.Add(GetProduct);
                string response = GetJson(ProductList);
                context.Response.Write(response);
            }
        }
        catch
        {
        }
    }
    public class ProductUnit
    {
        public string UnitPrice { get; set; }
        public string Unitqty { get; set; }
        public string Units { get; set; }
        public float orderunitRate { get; set; }
        public string Desciption { get; set; }

    }
    private void GetEditInventoryValues(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            List<inventoryedit> IndentList = new List<inventoryedit>();
            string RouteID = context.Request["RouteID"];
            string BranchID = context.Request["BranchID"];
            string IndDate = context.Request["IndDate"];
            string soid = context.Request["soid"];
            string transactiontype = context.Request["transactiontype"];
            DateTime dtinddate = Convert.ToDateTime(IndDate);
            string tripid = "0";
            cmd = new MySqlCommand("SELECT inventory_monitor.Inv_Sno AS invsno, inventory_monitor.Qty, invmaster.InvName FROM inventory_monitor INNER JOIN invmaster ON inventory_monitor.Inv_Sno = invmaster.sno WHERE (inventory_monitor.BranchId = @branchid)");
            cmd.Parameters.AddWithValue("@branchid", BranchID);
            DataTable dtclosing = vdbmngr.SelectQuery(cmd).Tables[0];
            if (transactiontype == "Route")
            {
                cmd = new MySqlCommand("SELECT dispatch.DispName, triproutes.Tripdata_sno FROM dispatch INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno WHERE (dispatch.sno = @dispsno) AND (tripdata.I_Date BETWEEN @d1 AND @d2) AND (tripdata.Status <> 'C')");
                cmd.Parameters.AddWithValue("@dispsno", RouteID);
                cmd.Parameters.AddWithValue("@d1", GetLowDate(dtinddate));
                cmd.Parameters.AddWithValue("@d2", GetHighDate(dtinddate));
                DataTable dttripid = vdbmngr.SelectQuery(cmd).Tables[0];
                if (dttripid.Rows.Count > 0)
                {
                    tripid = dttripid.Rows[0]["Tripdata_sno"].ToString();

                }

                cmd = new MySqlCommand("SELECT invtras.TransType, invtras.FromTran,invtras.Sno, invtras.ToTran, invtras.Qty, invtras.DOE, invmaster.sno AS invsno, invmaster.InvName FROM (SELECT TransType, FromTran, ToTran, Qty, EmpID, VarifyStatus, VTripId, VEmpId, Sno, B_inv_sno, DOE, VQty FROM invtransactions12 WHERE (ToTran = @branchid) AND (FromTran = @tripid) OR (ToTran = @tripid) AND (FromTran = @branchid)) invtras INNER JOIN invmaster ON invtras.B_inv_sno = invmaster.sno ORDER BY invsno");
                cmd.Parameters.AddWithValue("@branchid", BranchID);
                cmd.Parameters.AddWithValue("@tripid", tripid);
                DataTable dtInvDC = vdbmngr.SelectQuery(cmd).Tables[0];
                foreach (DataRow dr in dtclosing.Rows)
                {
                    inventoryedit GetRoutes = new inventoryedit();
                    GetRoutes.inventoryname = dr["InvName"].ToString();
                    GetRoutes.invsno = dr["invsno"].ToString();
                    GetRoutes.Deliveryqty = "0";
                    GetRoutes.collectionqty = "0";
                    if (transactiontype == "Route")
                    {
                        GetRoutes.refsno = tripid;
                    }
                    foreach (DataRow drinvdc in dtInvDC.Select("invsno='" + dr["invsno"].ToString() + "'"))
                    {
                        if (transactiontype == "Route")
                        {

                            if (drinvdc["TransType"].ToString() == "2")
                            {
                                GetRoutes.Deliveryqty = drinvdc["Qty"].ToString();
                            }
                            if (drinvdc["TransType"].ToString() == "3")
                            {
                                GetRoutes.collectionqty = drinvdc["Qty"].ToString();
                            }
                        }
                    }
                    GetRoutes.oppening = dr["Qty"].ToString();
                    IndentList.Add(GetRoutes);
                }
            }
            if (transactiontype == "Branch")
            {

                cmd = new MySqlCommand("SELECT invtras.TransType, invtras.FromTran, invtras.Sno, invtras.ToTran, invtras.Qty, invtras.DOE, invmaster.sno AS invsno, invmaster.InvName FROM (SELECT TransType, FromTran, ToTran, Qty, EmpID, VarifyStatus, VTripId, VEmpId, Sno, B_inv_sno, DOE, VQty FROM invtransactions12 WHERE (ToTran = @branchid) AND (FromTran = @tripid) AND (DOE BETWEEN @d1 AND @d2) OR (ToTran = @tripid) AND (FromTran = @branchid) AND (DOE BETWEEN @d1 AND @d2)) invtras INNER JOIN invmaster ON invtras.B_inv_sno = invmaster.sno ORDER BY invsno");
                cmd.Parameters.AddWithValue("@branchid", BranchID);
                cmd.Parameters.AddWithValue("@tripid", soid);
                DateTime dtmin = GetLowDate(dtinddate);
                DateTime dtmax = GetLowDate(dtinddate.AddDays(1));
                cmd.Parameters.AddWithValue("@d1", dtmin.AddHours(15));
                cmd.Parameters.AddWithValue("@d2", dtmax.AddHours(15));
                DataTable dtInvDC = vdbmngr.SelectQuery(cmd).Tables[0];
                foreach (DataRow dr in dtclosing.Rows)
                {
                    foreach (DataRow drinvdc in dtInvDC.Select("invsno='" + dr["invsno"].ToString() + "'"))
                    {
                        inventoryedit GetRoutes = new inventoryedit();
                        GetRoutes.inventoryname = dr["InvName"].ToString();
                        GetRoutes.invsno = dr["invsno"].ToString();
                        GetRoutes.Deliveryqty = "0";
                        GetRoutes.collectionqty = "0";
                        GetRoutes.refsno = drinvdc["Sno"].ToString();
                        if (drinvdc["TransType"].ToString() == "1")
                        {
                            if (drinvdc["ToTran"].ToString() == BranchID)
                            {
                                GetRoutes.Deliveryqty = drinvdc["Qty"].ToString();
                            }
                            if (drinvdc["FromTran"].ToString() == BranchID)
                            {
                                GetRoutes.collectionqty = drinvdc["Qty"].ToString();
                            }
                        }
                        GetRoutes.oppening = dr["Qty"].ToString();
                        IndentList.Add(GetRoutes);
                    }
                }
            }
            string response = GetJson(IndentList);
            context.Response.Write(response);
        }
        catch
        {
        }
    }
    private void GetEditIndentValuesClick(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            List<IndClass> IndentList = new List<IndClass>();
            string RouteID = context.Request["RouteID"];
            string BranchID = context.Request["BranchID"];
            string IndDate = context.Request["IndDate"];
            string soid = context.Request["soid"];
            DateTime dtinddate = Convert.ToDateTime(IndDate);
            string indtype = "Indent1";
            cmd = new MySqlCommand("SELECT dispatch.sno, dispatch.DispName, dispatch_sub.IndentType FROM dispatch INNER JOIN dispatch_sub ON dispatch.sno = dispatch_sub.dispatch_sno WHERE (dispatch.sno = @dispsno)");
            cmd.Parameters.AddWithValue("@dispsno", RouteID);
            DataTable dtindenttype = vdbmngr.SelectQuery(cmd).Tables[0];
            if (dtindenttype.Rows.Count > 0)
            {
                indtype = dtindenttype.Rows[0]["IndentType"].ToString();
            }
            cmd = new MySqlCommand("SELECT productsdata.ProductName, indents_subtable.Product_sno, indents_subtable.DeliveryQty, indents_subtable.unitQty, indents_subtable.UnitCost, indents.IndentNo FROM indents INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE (indents.Branch_id = @BranchID) AND (indents.I_date BETWEEN @d1 AND @d2) AND (indents.IndentType = @indtype) group by productsdata.ProductName");
            cmd.Parameters.AddWithValue("@BranchID", BranchID);
            cmd.Parameters.AddWithValue("@d1", GetLowDate(dtinddate));
            cmd.Parameters.AddWithValue("@d2", GetHighDate(dtinddate));
            cmd.Parameters.AddWithValue("@indtype", indtype);
            DataTable dtBranch = vdbmngr.SelectQuery(cmd).Tables[0];
            if (soid != "7")
            {
                if (dtBranch.Rows.Count > 0)
                {
                    foreach (DataRow dr in dtBranch.Rows)
                    {
                        IndClass GetRoutes = new IndClass();
                        GetRoutes.ProductName = dr["ProductName"].ToString();
                        GetRoutes.Product_sno = dr["Product_sno"].ToString();
                        string DeliveryQty = dr["DeliveryQty"].ToString();
                        if (DeliveryQty == "")
                        {
                            GetRoutes.DeliveryQty = dr["unitQty"].ToString();
                        }
                        else
                        {
                            GetRoutes.DeliveryQty = dr["DeliveryQty"].ToString();
                        }
                        GetRoutes.UnitCost = dr["UnitCost"].ToString();
                        GetRoutes.IndentNo = dr["IndentNo"].ToString();
                        GetRoutes.unitQty = dr["unitQty"].ToString();
                        IndentList.Add(GetRoutes);
                    }
                }
                else
                {
                    cmd = new MySqlCommand("SELECT productsdata.UnitPrice,branchproducts.Rank, productsdata.ProductName, productsdata.Units, productsdata.Qty, branchproducts.unitprice AS BUnitPrice, branchproducts_1.unitprice AS Aunitprice, productsdata.sno FROM branchproducts INNER JOIN branchmappingtable ON branchproducts.branch_sno = branchmappingtable.SuperBranch INNER JOIN productsdata ON branchproducts.product_sno = productsdata.sno INNER JOIN branchproducts branchproducts_1 ON branchmappingtable.SubBranch = branchproducts_1.branch_sno AND  productsdata.sno = branchproducts_1.product_sno WHERE (branchproducts_1.branch_sno = @bsno) AND (branchproducts_1.flag = @flag)GROUP BY branchproducts_1.branch_sno, branchproducts_1.unitprice, productsdata.sno, branchproducts_1.flag ORDER BY branchproducts.Rank");
                    cmd.Parameters.AddWithValue("@flag", 1);
                    cmd.Parameters.AddWithValue("@bsno", context.Request["BranchID"].ToString());
                    dtBranch = vdbmngr.SelectQuery(cmd).Tables[0];
                    foreach (DataRow dr in dtBranch.Rows)
                    {
                        IndClass GetRoutes = new IndClass();
                        GetRoutes.ProductName = dr["ProductName"].ToString();
                        GetRoutes.Product_sno = dr["sno"].ToString();
                        GetRoutes.DeliveryQty = "0";
                        string AgentUnitPrice = dr["Aunitprice"].ToString();
                        string BranchUnitPrice = dr["BUnitPrice"].ToString();
                        float Rate = 0;
                        if (AgentUnitPrice != "0")
                        {
                            Rate = (float)dr["Aunitprice"];
                        }
                        if (Rate == 0)
                        {
                            Rate = (float)dr["BUnitPrice"];
                        }
                        if (Rate == 0)
                        {
                            Rate = (float)dr["unitprice"];
                        }
                        GetRoutes.UnitCost = Rate.ToString();
                        GetRoutes.IndentNo = "0";
                        GetRoutes.unitQty = "0";
                        IndentList.Add(GetRoutes);
                    }
                }
            }
            string response = GetJson(IndentList);
            context.Response.Write(response);
        }
        catch
        {
        }
    }
    public class Inventoryclass
    {
        public string Sno { get; set; }
        public string InventoryName { get; set; }
        public string InventorySno { get; set; }
        public string Qty { get; set; }
        public string DispQty { get; set; }
        public string DelQty { get; set; }
        public string ToadayQty { get; set; }
    }
    private void GetDeliverInventory(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            DateTime dtindenttime = new DateTime();
            string BranchID = context.Request["bid"];
            string DairyStatus = context.Request["DairyStatus"];
            string dispatch_sno = context.Request["RouteSno"];
            string indentdate = context.Request["inddate"];
            List<Inventoryclass> InventoryList = new List<Inventoryclass>();
            dtindenttime = DateTime.Parse(indentdate);
            DateTime ServerDateCurrentdate = VehicleDBMgr.GetTime(vdbmngr.conn);
            cmd = new MySqlCommand("SELECT  tripdata.I_Date, tripdata.Sno,  tripdata.Permissions FROM  tripdata INNER JOIN triproutes ON tripdata.Sno = triproutes.Tripdata_sno INNER JOIN empmanage ON tripdata.EmpId = empmanage.Sno INNER JOIN branchdata ON empmanage.Branch = branchdata.sno INNER JOIN salestypemanagement ON branchdata.SalesType = salestypemanagement.sno INNER JOIN dispatch ON triproutes.RouteID = dispatch.sno INNER JOIN dispatch_sub ON dispatch.sno = dispatch_sub.dispatch_sno WHERE (tripdata.I_Date between @d1 and @d2) and (dispatch_sub.dispatch_sno =@dispatch_sno );");
            cmd.Parameters.AddWithValue("@d1", GetLowDate(dtindenttime));
            cmd.Parameters.AddWithValue("@d2", GetHighDate(dtindenttime));
            cmd.Parameters.AddWithValue("@dispatch_sno", dispatch_sno);
            DataTable dttripdata = vdbmngr.SelectQuery(cmd).Tables[0];
            string TripdataSno = "";
            if (dttripdata.Rows.Count > 0)
            {
                TripdataSno = dttripdata.Rows[0]["Sno"].ToString(); ;
            }
            if (DairyStatus == "Delivers")
            {
                cmd = new MySqlCommand("SELECT invmaster.InvName, invmaster.sno, inventory_monitor.Qty AS BranchQty, invtransactions12.Qty FROM invmaster INNER JOIN inventory_monitor ON invmaster.sno = inventory_monitor.Inv_Sno INNER JOIN invtransactions12 ON invmaster.sno = invtransactions12.B_inv_sno WHERE (invtransactions12.FromTran = @FromTran) AND (invtransactions12.ToTran = @ToTrans) AND (invtransactions12.TransType = @TransType) AND (inventory_monitor.BranchId = @BranchID)GROUP BY invmaster.InvName ORDER BY invmaster.sno ");
                cmd.Parameters.AddWithValue("@TransType", "2");
                cmd.Parameters.AddWithValue("@FromTran", TripdataSno);
                cmd.Parameters.AddWithValue("@ToTrans", BranchID);
            }
            else
            {
                cmd = new MySqlCommand("SELECT invmaster.InvName, invmaster.sno, inventory_monitor.Qty AS BranchQty, invtransactions12.Qty FROM invmaster INNER JOIN inventory_monitor ON invmaster.sno = inventory_monitor.Inv_Sno INNER JOIN invtransactions12 ON invmaster.sno = invtransactions12.B_inv_sno WHERE (invtransactions12.FromTran = @FromTran) AND (invtransactions12.ToTran = @ToTrans) AND (invtransactions12.TransType = @TransType) AND (inventory_monitor.BranchId = @BranchID) GROUP BY invmaster.InvName ORDER BY invmaster.sno");
                cmd.Parameters.AddWithValue("@TransType", "3");
                cmd.Parameters.AddWithValue("@FromTran", BranchID);
                cmd.Parameters.AddWithValue("@ToTrans", TripdataSno);
            }
            cmd.Parameters.AddWithValue("@BranchID", BranchID);
            DataTable dtPrevInventory = vdbmngr.SelectQuery(cmd).Tables[0];
            if (dtPrevInventory.Rows.Count > 0)
            {

                dtPrevInventory.DefaultView.Sort = "sno ASC";
                dtPrevInventory = dtPrevInventory.DefaultView.ToTable(true);
                context.Session["dtPrevInventory"] = dtPrevInventory;
                int i = 1;
                foreach (DataRow dr in dtPrevInventory.Rows)
                {
                    Inventoryclass Inventoryget = new Inventoryclass();
                    Inventoryget.Sno = i++.ToString();
                    Inventoryget.InventorySno = dr["sno"].ToString();
                    Inventoryget.InventoryName = dr["InvName"].ToString();
                    if (DairyStatus == "Delivers")
                    {
                        int BranchQty = 0;
                        int.TryParse(dr["BranchQty"].ToString(), out BranchQty);
                        int Qty = 0;
                        int.TryParse(dr["Qty"].ToString(), out Qty);
                        int ToadayQty = BranchQty - Qty;
                        Inventoryget.Qty = ToadayQty.ToString();
                        Inventoryget.ToadayQty = dr["Qty"].ToString();
                    }
                    else
                    {
                        int BranchQty = 0;
                        int.TryParse(dr["BranchQty"].ToString(), out BranchQty);
                        int Qty = 0;
                        int.TryParse(dr["Qty"].ToString(), out Qty);
                        int ToadayQty = BranchQty + Qty;
                        Inventoryget.Qty = ToadayQty.ToString();
                        Inventoryget.ToadayQty = dr["Qty"].ToString();
                    }
                    InventoryList.Add(Inventoryget);
                }
                string response = GetJson(InventoryList);
                context.Response.Write(response);
            }
            else
            {
                context.Session["dtPrevInventory"] = null;
                cmd = new MySqlCommand("SELECT invmaster.InvName, inventory_monitor.Qty, inventory_monitor.Sno, inventory_monitor.Inv_Sno FROM invmaster INNER JOIN inventory_monitor ON invmaster.sno = inventory_monitor.Inv_Sno WHERE (inventory_monitor.BranchId = @BranchId)");
                cmd.Parameters.AddWithValue("@BranchId", BranchID);
                DataTable dtInventory = vdbmngr.SelectQuery(cmd).Tables[0];
                DataTable dtAgentInventory = new DataTable();
                if (dtInventory.Rows.Count == 0)
                {
                    if (context.Session["dtInventory"] == null)
                    {
                        cmd = new MySqlCommand("SELECT sno,InvName FROM invmaster");
                        dtAgentInventory = vdbmngr.SelectQuery(cmd).Tables[0];
                    }
                    else
                    {
                        dtAgentInventory = (DataTable)context.Session["dtInventory"];
                    }
                    int i = 1;
                    foreach (DataRow dr in dtAgentInventory.Rows)
                    {
                        Inventoryclass Inventoryget = new Inventoryclass();
                        Inventoryget.Sno = i++.ToString();
                        Inventoryget.InventorySno = dr["sno"].ToString();
                        Inventoryget.InventoryName = dr["InvName"].ToString();
                        Inventoryget.Qty = "0";
                        Inventoryget.ToadayQty = "";
                        InventoryList.Add(Inventoryget);
                    }
                    string response = GetJson(InventoryList);
                    context.Response.Write(response);
                }
                else
                {
                    int i = 1;
                    foreach (DataRow dr in dtInventory.Rows)
                    {
                        Inventoryclass GetInventory = new Inventoryclass();
                        GetInventory.Sno = i++.ToString();
                        GetInventory.InventoryName = dr["InvName"].ToString();
                        GetInventory.InventorySno = dr["Inv_Sno"].ToString();
                        GetInventory.Qty = dr["Qty"].ToString();
                        GetInventory.ToadayQty = "";
                        InventoryList.Add(GetInventory);
                    }
                    string response = GetJson(InventoryList);
                    context.Response.Write(response);
                }
            }
        }
        catch
        {
        }
    }
    public class inventoryedit
    {
        public string inventoryname { get; set; }
        public string invsno { get; set; }
        public string oppening { get; set; }
        public string Deliveryqty { get; set; }
        public string collectionqty { get; set; }
        public string refsno { get; set; }

    }
    public class IndClass
    {
        public string ProductName { get; set; }
        public string Product_sno { get; set; }
        public string DeliveryQty { get; set; }
        public string UnitCost { get; set; }
        public string IndentNo { get; set; }
        public string unitQty { get; set; }
        public string routesno { get; set; }
        public string routename { get; set; }
        public string agentname { get; set; }
        public string phonenumber { get; set; }
        public string collectiontype { get; set; }
        public string agentid { get; set; }
        public string salevalue { get; set; }
        public string collection { get; set; }
        public string due { get; set; }
        public string cratesbalance { get; set; }
        public string cansbalance { get; set; }
        public string indent_increase { get; set; }
        public string indent_decrease { get; set; }
        public string difference_indent { get; set; }
    }
    private void GetMilkBuyerTransactonDetails(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            string BranchID = context.Request["BranchID"];
            string fromdate = context.Request["fromdate"];
            string ddl_route_id = context.Request["ddldispatchname"];
            DateTime dtfromdate = Convert.ToDateTime(fromdate);
            DataTable Report = new DataTable();
            Report.Columns.Add("SNo");
            Report.Columns.Add("Agent Name");
            Report.Columns.Add("Agentid");
            Report.Columns.Add("SR Name");
            Report.Columns.Add("Due");
            Report.Columns.Add("Cheques Pending");
            Report.Columns.Add("Net Due");
            Report.Columns.Add("Due Since");
            Report.Columns.Add("Crates Bal");
            Report.Columns.Add("Issued");
            Report.Columns.Add("Excess");
            Report.Columns.Add("Cans");
            Report.Columns.Add("Since Date");
            Report.Columns.Add("Remarks");
            cmd = new MySqlCommand("SELECT SUM(collections.AmountPaid) AS amount, branchmappingtable.SuperBranch, branchdata.sno, branchdata.BranchName FROM collections INNER JOIN branchdata ON collections.Branchid = branchdata.sno INNER JOIN branchmappingtable ON branchdata.sno = branchmappingtable.SubBranch WHERE (collections.PaymentType = 'Cheque') AND (collections.CheckStatus = @CheckStatus) AND (collections.tripId IS NULL) AND (branchmappingtable.SuperBranch = @SuperBranch) GROUP BY branchdata.sno, branchdata.BranchName");
            cmd.Parameters.AddWithValue("@CheckStatus", 'P');
            cmd.Parameters.AddWithValue("@SuperBranch", BranchID);
            DataTable dtcheque = vdbmngr.SelectQuery(cmd).Tables[0];
            cmd = new MySqlCommand("SELECT branchaccounts.BranchId, branchaccounts.Amount, branchaccounts.FineAmount, branchaccounts.Dtripid, branchaccounts.Ctripid, branchaccounts.SaleValue,branchmappingtable.SuperBranch FROM branchaccounts INNER JOIN branchmappingtable ON branchaccounts.BranchId = branchmappingtable.SubBranch WHERE (branchmappingtable.SuperBranch = @BranchID)");
            cmd.Parameters.AddWithValue("@BranchID", BranchID);
            DataTable dtagentbalance = vdbmngr.SelectQuery(cmd).Tables[0];
            cmd = new MySqlCommand("SELECT due_trans_inventory.closing AS crates, due_trans_inventory.clo10 + due_trans_inventory.clo20 + due_trans_inventory.clo40 AS cans,due_trans_inventory.isuued, branchmappingtable.SubBranch FROM due_trans_inventory INNER JOIN branchmappingtable ON due_trans_inventory.agentid = branchmappingtable.SubBranch WHERE (branchmappingtable.SuperBranch = @BranchID) AND (due_trans_inventory.doe BETWEEN @d1 AND @d2)");
            cmd.Parameters.AddWithValue("@BranchID", BranchID);
            cmd.Parameters.AddWithValue("@d1", GetLowDate(dtfromdate).AddDays(1));
            cmd.Parameters.AddWithValue("@d2", GetHighDate(dtfromdate).AddDays(1));
            DataTable dtinv = vdbmngr.SelectQuery(cmd).Tables[0];
            cmd = new MySqlCommand("SELECT branchmappingtable.SuperBranch, inventory_monitor.Qty, inventory_monitor.Inv_Sno, inventory_monitor.BranchId FROM inventory_monitor INNER JOIN branchmappingtable ON inventory_monitor.BranchId = branchmappingtable.SubBranch WHERE (branchmappingtable.SuperBranch = @BranchID)");
            cmd.Parameters.AddWithValue("@BranchID", BranchID);
            DataTable dtinvebalance = vdbmngr.SelectQuery(cmd).Tables[0];
            int Totalcount = 1;
            cmd = new MySqlCommand("SELECT sno,salestype FROM salestypemanagement WHERE (status = 1) ORDER BY rank");
            DataTable dtsalesType = vdbmngr.SelectQuery(cmd).Tables[0];
            double totdebitamount = 0;
            double totchequeamount = 0;
            double totnetdueamount = 0;
            double totcrates = 0;
            double totcans = 0;
            double totroutedebitamount = 0;
            double totroutechequeamount = 0;
            double totroutenetdueamount = 0;
            double totroutecrates = 0;
            double totroutecans = 0;
            double totgrandroutedebitamount = 0;
            double totgrandroutechequeamount = 0;
            double totgrandroutenetdueamount = 0;
            double totgrandroutecrates = 0;
            double totgrandroutecans = 0;
            DataRow newrow111 = Report.NewRow();
            newrow111["Agent Name"] = "AGENTS";
            Report.Rows.Add(newrow111);
            foreach (DataRow dr in dtsalesType.Rows)
            {
                string salestype = dr["salestype"].ToString();
                if (salestype == "DISCONTINUED AGENTS")
                {
                    cmd = new MySqlCommand("SELECT  branchroutes.RouteName,branchdata.BranchName,branchdata.sno as Branchid,branchdata.SalesRepresentative, duetransactions.ClosingBalance, salestypemanagement.salestype FROM branchmappingtable INNER JOIN duetransactions ON branchmappingtable.SubBranch = duetransactions.AgentId INNER JOIN branchdata ON duetransactions.AgentId = branchdata.sno INNER JOIN salestypemanagement ON branchdata.SalesType = salestypemanagement.sno INNER JOIN branchroutes ON duetransactions.RouteId = branchroutes.Sno WHERE (branchmappingtable.SuperBranch = @BranchID)  and (salestypemanagement.sno=@SalesType) AND (duetransactions.IndentDate BETWEEN @d1 AND @d2) GROUP BY branchdata.BranchName, salestypemanagement.salestype, branchroutes.RouteName order by salestypemanagement.salestype, branchroutes.RouteName");
                }
                else
                {
                    cmd = new MySqlCommand("SELECT  branchroutes.RouteName,branchdata.BranchName,branchdata.sno as Branchid,branchdata.SalesRepresentative, duetransactions.ClosingBalance, salestypemanagement.salestype FROM branchmappingtable INNER JOIN duetransactions ON branchmappingtable.SubBranch = duetransactions.AgentId INNER JOIN branchdata ON duetransactions.AgentId = branchdata.sno INNER JOIN salestypemanagement ON branchdata.SalesType = salestypemanagement.sno INNER JOIN branchroutes ON duetransactions.RouteId = branchroutes.Sno WHERE (branchmappingtable.SuperBranch = @BranchID) AND (branchdata.flag = 1) and (salestypemanagement.sno=@SalesType) AND (duetransactions.IndentDate BETWEEN @d1 AND @d2) GROUP BY branchdata.BranchName, salestypemanagement.salestype, branchroutes.RouteName order by salestypemanagement.salestype, branchroutes.RouteName");
                }
                cmd.Parameters.AddWithValue("@SalesType", dr["sno"].ToString());
                cmd.Parameters.AddWithValue("@BranchID", BranchID);
                cmd.Parameters.AddWithValue("@d1", GetLowDate(dtfromdate));
                cmd.Parameters.AddWithValue("@d2", GetHighDate(dtfromdate));
                DataTable dtble = vdbmngr.SelectQuery(cmd).Tables[0];
                DataView viewLeaks = new DataView(dtble);
                DataTable distinctroutes = viewLeaks.ToTable(true, "salestype", "RouteName");
                DataTable distinctagents = viewLeaks.ToTable(true, "RouteName", "Branchid");
                if (Totalcount != 1)
                {
                    DataRow space1 = Report.NewRow();
                    space1["Agent Name"] = "Total";
                    space1["Due"] = totdebitamount;
                    //space1["Credit"] = totroutecreditamount;
                    space1["Cheques Pending"] = totchequeamount;
                    space1["Net Due"] = totnetdueamount;
                    space1["Crates Bal"] = totcrates;
                    space1["Cans"] = totcans;
                    if (totdebitamount == 0.0 && totchequeamount == 0.0 && totnetdueamount == 0.0 && totcrates == 0.0 && totcans == 0.0)
                    {
                    }
                    else
                    {
                        Report.Rows.Add(space1);
                    }
                    totroutedebitamount += totdebitamount;
                    totroutechequeamount += totchequeamount;
                    totroutenetdueamount += totnetdueamount;
                    totroutecrates += totcrates;
                    totroutecans += totcans;
                    totdebitamount = 0;
                    totchequeamount = 0;
                    totnetdueamount = 0;
                    totcrates = 0;
                    totcans = 0;
                    DataRow space2 = Report.NewRow();
                    space2["Agent Name"] = "Sub Total";
                    space2["Due"] = totroutedebitamount;
                    //space1["Credit"] = totroutecreditamount;
                    space2["Cheques Pending"] = totroutechequeamount;
                    space2["Net Due"] = totroutenetdueamount;
                    space2["Crates Bal"] = totroutecrates;
                    space2["Cans"] = totroutecans;
                    if (totroutedebitamount == 0.0 && totroutechequeamount == 0.0 && totroutenetdueamount == 0.0 && totroutecrates == 0.0 && totroutecans == 0.0)
                    {
                    }
                    else
                    {
                        Report.Rows.Add(space2);
                    }
                    totgrandroutedebitamount += totroutedebitamount;
                    totgrandroutechequeamount += totroutechequeamount;
                    totgrandroutenetdueamount += totroutenetdueamount;
                    totgrandroutecrates += totroutecrates;
                    totgrandroutecans += totroutecans;
                    totroutedebitamount = 0;
                    totroutechequeamount = 0;
                    totroutenetdueamount = 0;
                    totroutecrates = 0;
                    totroutecans = 0;
                    DataRow empty = Report.NewRow();
                    empty["Agent Name"] = "";
                    DataRow[] drsalestype = dtble.Select("salestype='" + dr["salestype"].ToString() + "'");
                    if (drsalestype.Length > 0)
                    {
                        Report.Rows.Add(empty);
                    }
                    DataRow newrow11 = Report.NewRow();
                    newrow11["Agent Name"] = dr["salestype"].ToString();
                    if (drsalestype.Length > 0)
                    {
                        Report.Rows.Add(newrow11);
                    }

                }
                string RouteName = "";
                int i = 1;
                foreach (DataRow dragents in distinctroutes.Select("salestype='" + dr["salestype"].ToString() + "'"))
                {
                    foreach (DataRow drbranch in dtble.Select("salestype='" + dr["salestype"].ToString() + "' and RouteName='" + dragents["RouteName"].ToString() + "'"))
                    {
                        DataRow newrow = Report.NewRow();
                        if (RouteName != drbranch["RouteName"].ToString())
                        {
                            if (Totalcount == 1)
                            {
                                newrow["Sno"] = i++.ToString();
                                Totalcount++;
                                DataRow newrow13 = Report.NewRow();
                                newrow13["Agent Name"] = dragents["RouteName"].ToString();
                                Report.Rows.Add(newrow13);
                            }
                            else
                            {
                                if (RouteName != drbranch["RouteName"].ToString())
                                {
                                    if (RouteName == "")
                                    {
                                    }
                                    else
                                    {
                                        DataRow space1 = Report.NewRow();
                                        space1["Agent Name"] = "Total";
                                        space1["Due"] = totdebitamount;
                                        //space1["Credit"] = totcreditamount;
                                        space1["Cheques Pending"] = totchequeamount;
                                        space1["Net Due"] = totnetdueamount;
                                        space1["Crates Bal"] = totcrates;
                                        space1["Cans"] = totcans;
                                        if (totdebitamount == 0.0 && totchequeamount == 0.0 && totnetdueamount == 0.0 && totcrates == 0.0 && totcans == 0.0)
                                        {
                                        }
                                        else
                                        {
                                            Report.Rows.Add(space1);
                                        }
                                        totroutedebitamount += totdebitamount;
                                        totroutechequeamount += totchequeamount;
                                        totroutenetdueamount += totnetdueamount;
                                        totroutecrates += totcrates;
                                        totroutecans += totcans;
                                        totdebitamount = 0;
                                        totchequeamount = 0;
                                        totnetdueamount = 0;
                                        totcrates = 0;
                                        totcans = 0;

                                    }
                                }
                                newrow["Sno"] = i++.ToString();
                                Totalcount++;
                                if (RouteName != drbranch["RouteName"].ToString())
                                {
                                    if (RouteName == "")
                                    {
                                    }
                                    else
                                    {
                                        DataRow space = Report.NewRow();
                                        space["Agent Name"] = "";
                                        Report.Rows.Add(space);
                                        DataRow newrow13 = Report.NewRow();
                                        newrow13["Agent Name"] = dragents["RouteName"].ToString();
                                        Report.Rows.Add(newrow13);
                                    }
                                }
                            }
                        }
                        else
                        {
                        }
                        RouteName = drbranch["RouteName"].ToString();
                        newrow["Agent Name"] = drbranch["BranchName"].ToString();
                        newrow["Agentid"] = drbranch["Branchid"].ToString();
                        newrow["SR Name"] = drbranch["SalesRepresentative"].ToString();
                        double chequeamount = 0;
                        if (dtcheque.Rows.Count > 0)
                        {
                            DataRow[] roe = dtcheque.Select("sno=" + drbranch["Branchid"].ToString());
                            foreach (DataRow drc in roe)
                            {
                                double.TryParse(drc.ItemArray[0].ToString(), out chequeamount);
                                newrow["Cheques Pending"] = chequeamount.ToString();
                                totchequeamount += chequeamount;
                            }
                        }
                        double amount = 0;
                        double netdue = 0;
                        double.TryParse(drbranch["ClosingBalance"].ToString(), out amount);
                        newrow["Due"] = amount;
                        totdebitamount += amount;
                        netdue = amount - chequeamount;
                        newrow["Net Due"] = netdue;
                        totnetdueamount += netdue;
                        DataRow[] drcrates = dtinv.Select("SubBranch=" + drbranch["Branchid"].ToString());
                        int crates = 0;
                        foreach (DataRow drc in drcrates)
                        {
                            int.TryParse(drc.ItemArray[0].ToString(), out crates);
                            totcrates += crates;
                            newrow["Crates Bal"] = crates;
                            int issuedcreates = 0;
                            int.TryParse(drc.ItemArray[2].ToString(), out issuedcreates);
                            newrow["Issued"] = issuedcreates;
                            int excess = 0;
                            excess = crates - issuedcreates;
                            newrow["Excess"] = excess;
                            int cans = 0;
                            int.TryParse(drc.ItemArray[1].ToString(), out cans);
                            newrow["Cans"] = cans;
                            totcans += cans;
                        }
                        DataRow[] drinv = dtinvebalance.Select("BranchId=" + drbranch["Branchid"].ToString());
                        foreach (DataRow drc in drinv)
                        {
                            double dueinventory = 0;
                            double.TryParse(drc.ItemArray[1].ToString(), out dueinventory);
                            if (dueinventory > 0)
                            {
                                cmd = new MySqlCommand("SELECT TransType, FromTran, ToTran, Qty, EmpID, VarifyStatus, VTripId, VEmpId, Sno, B_inv_sno, DOE, VQty, CBFromTran, CBToTran, DeliveryTime, CollectionTime, Remarks, Modified_EmpId FROM invtransactions12 WHERE (ToTran = @BranchID) ORDER BY DOE DESC");
                                cmd.Parameters.AddWithValue("@BranchID", drbranch["Branchid"].ToString());
                                DataTable dtinvamount = vdbmngr.SelectQuery(cmd).Tables[0];
                                if (dtinvamount.Rows.Count > 0)
                                {

                                    double diffinv = 0;
                                    double getinv = 0;
                                    foreach (DataRow drsales in dtinvamount.Rows)
                                    {

                                        if (diffinv >= 0)
                                        {
                                            double salesamount = 0;
                                            double.TryParse(drsales["Qty"].ToString(), out salesamount);
                                            getinv += salesamount;
                                            diffinv = dueinventory - getinv;
                                            if (diffinv < 0)
                                            {
                                                string PlanTime = drsales["DOE"].ToString();
                                                DateTime dtPlantime = Convert.ToDateTime(PlanTime);
                                                string time = dtPlantime.ToString("dd/MM/yyyy");
                                                newrow["Since Date"] = time;
                                                break;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        DataRow[] dragentamount = dtagentbalance.Select("BranchId=" + drbranch["Branchid"].ToString());
                        foreach (DataRow drc in dragentamount)
                        {
                            double dueamount = 0;
                            double.TryParse(drc.ItemArray[1].ToString(), out dueamount);
                            if (dueamount > 0)
                            {
                                cmd = new MySqlCommand("SELECT SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost) AS amount, indents.I_date FROM indents INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo WHERE (indents.Branch_id = @BranchID) GROUP BY indents.Branch_id, indents.I_date ORDER BY indents.I_date DESC");
                                cmd.Parameters.AddWithValue("@BranchID", drbranch["Branchid"].ToString());
                                DataTable dtsalesamount = vdbmngr.SelectQuery(cmd).Tables[0];
                                if (dtsalesamount.Rows.Count > 0)
                                {

                                    double diffamount = 0;
                                    double getamount = 0;
                                    foreach (DataRow drsales in dtsalesamount.Rows)
                                    {
                                        if (diffamount >= 0)
                                        {
                                            double salesamount = 0;
                                            double.TryParse(drsales["amount"].ToString(), out salesamount);
                                            getamount += salesamount;
                                            diffamount = dueamount - getamount;
                                            if (diffamount < 0)
                                            {
                                                string PlanTime = drsales["I_date"].ToString();
                                                DateTime dtPlantime = Convert.ToDateTime(PlanTime);
                                                string time = dtPlantime.ToString("dd/MM/yyyy");
                                                newrow["Due Since"] = time;
                                                break;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        Report.Rows.Add(newrow);
                    }
                }
            }
            DataRow space3 = Report.NewRow();
            space3["Agent Name"] = "Total";

            space3["Due"] = totdebitamount;
            space3["Cheques Pending"] = totchequeamount;
            space3["Net Due"] = totnetdueamount;
            space3["Crates Bal"] = totcrates;
            space3["Cans"] = totcans;
            if (totdebitamount == 0.0 && totchequeamount == 0.0 && totnetdueamount == 0.0 && totcrates == 0.0 && totcans == 0.0)
            {
            }
            else
            {
                Report.Rows.Add(space3);
            }
            totroutedebitamount += totdebitamount;
            totroutechequeamount += totchequeamount;
            totroutenetdueamount += totnetdueamount;
            totroutecrates += totcrates;
            totroutecans += totcans;
            DataRow space4 = Report.NewRow();
            space4["Agent Name"] = "Sub Total";
            space4["Due"] = totroutedebitamount;
            //space1["Credit"] = totroutecreditamount;
            space4["Cheques Pending"] = totroutechequeamount;
            space4["Net Due"] = totroutenetdueamount;
            space4["Crates Bal"] = totroutecrates;
            space4["Cans"] = totroutecans;
            if (totroutedebitamount == 0.0 && totroutechequeamount == 0.0 && totroutenetdueamount == 0.0 && totroutecrates == 0.0 && totroutecans == 0.0)
            {
            }
            else
            {
                Report.Rows.Add(space4);
            }
            totgrandroutedebitamount += totroutedebitamount;
            totgrandroutechequeamount += totroutechequeamount;
            totgrandroutenetdueamount += totroutenetdueamount;
            totgrandroutecrates += totroutecrates;
            totgrandroutecans += totroutecans;

            DataRow space5 = Report.NewRow();
            space5["Agent Name"] = "Grand Total";
            space5["Due"] = totgrandroutedebitamount;
            //space1["Credit"] = totroutecreditamount;
            space5["Cheques Pending"] = totgrandroutechequeamount;
            space5["Net Due"] = totgrandroutenetdueamount;
            space5["Crates Bal"] = totgrandroutecrates;
            space5["Cans"] = totgrandroutecans;
            Report.Rows.Add(space5);
            List<milkbuyercls> milkbuyerclsList = new List<milkbuyercls>();
            foreach (DataRow dr in Report.Rows)
            {
                milkbuyercls GetRoutes = new milkbuyercls();
                GetRoutes.agentname = dr["Agent Name"].ToString();
                GetRoutes.agentid = dr["Agentid"].ToString();
                GetRoutes.srname = dr["SR Name"].ToString();
                GetRoutes.due = dr["Due"].ToString();
                GetRoutes.chequepending = dr["Cheques Pending"].ToString();
                GetRoutes.netdue = dr["Net Due"].ToString();
                GetRoutes.duedate = dr["Due Since"].ToString();
                GetRoutes.invbal = dr["Crates Bal"].ToString();
                GetRoutes.invdate = dr["Since Date"].ToString();
                milkbuyerclsList.Add(GetRoutes);
            }
            string response = GetJson(milkbuyerclsList);
            context.Response.Write(response);
        }
        catch
        {
        }
    }
    public class milkbuyercls
    {
        public string Sno { get; set; }
        public string agentname { get; set; }
        public string agentid { get; set; }
        public string srname { get; set; }
        public string due { get; set; }
        public string chequepending { get; set; }
        public string netdue { get; set; }
        public string duedate { get; set; }
        public string invbal { get; set; }
        public string invdate { get; set; }
    }
    private void GetRouteNameChange(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            List<Branch> brnch = new List<Branch>();
            string RouteID = context.Request["RouteID"];
            cmd = new MySqlCommand("SELECT branchdata.sno, branchdata.BranchName FROM branchroutesubtable INNER JOIN branchroutes ON branchroutesubtable.RefNo = branchroutes.Sno INNER JOIN branchdata ON branchroutesubtable.BranchID = branchdata.sno INNER JOIN dispatch_sub ON branchroutes.Sno = dispatch_sub.Route_id WHERE (branchdata.flag = @flag) AND (dispatch_sub.dispatch_sno = @DispSno)");
            cmd.Parameters.AddWithValue("@DispSno", RouteID);
            cmd.Parameters.AddWithValue("@flag", 1);
            DataTable dtBranch = vdbmngr.SelectQuery(cmd).Tables[0];
            foreach (DataRow dr in dtBranch.Rows)
            {
                Branch b = new Branch() { b_id = dr["sno"].ToString(), BranchName = dr["BranchName"].ToString() };
                brnch.Add(b);
            }
            string response = GetJson(brnch);
            context.Response.Write(response);
        }
        catch
        {
        }
    }
    class Branch
    {
        public string b_id { set; get; }
        public string BranchName { set; get; }
    }
    private void GetDespatches(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            string BranchID = context.Request["BranchID"];
            cmd = new MySqlCommand("SELECT dispatch.sno, dispatch.DispName FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id WHERE (branchdata.SalesOfficeID = @SOID) OR (dispatch.Branch_Id = @BranchID)");
            cmd.Parameters.AddWithValue("@SOID", BranchID);
            cmd.Parameters.AddWithValue("@BranchID", BranchID);
            DataTable dtRoute = vdbmngr.SelectQuery(cmd).Tables[0];
            List<Routes> Routelist = new List<Routes>();
            foreach (DataRow dr in dtRoute.Rows)
            {
                Routes GetRoutes = new Routes();
                GetRoutes.routesno = dr["sno"].ToString();
                GetRoutes.routename = dr["DispName"].ToString();
                Routelist.Add(GetRoutes);
            }
            string response = GetJson(Routelist);
            context.Response.Write(response);
        }
        catch
        {
        }
    }
    private void GetPuffDespatches(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            string BranchID = context.Request["BranchID"];
            string SuperBranch = context.Session["SuperBranch"].ToString();
            // cmd = new MySqlCommand("SELECT  branchdata.BranchName, branchdata.sno, branchdata.SalesType, dispatch.sno AS dispatchsno, dispatch.DispName FROM  branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN dispatch ON branchdata.sno = dispatch.BranchID WHERE (branchdata_1.SalesOfficeID = @SOID) AND (branchdata.SalesType IS NOT NULL) AND (dispatch.flag = @flag) AND (dispatch.Branch_Id = @SuperBranch) OR (branchdata.SalesType IS NOT NULL) AND (dispatch.flag = @flag) AND (branchdata.sno = @BranchID) AND (dispatch.Branch_Id = @SuperBranch) ORDER BY branchdata.sno");
            cmd = new MySqlCommand("SELECT branchdata.BranchName, branchdata.sno, branchdata.SalesType, dispatch.sno AS dispatchsno, dispatch.DispName FROM branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN dispatch ON branchdata.sno = dispatch.BranchID WHERE (branchdata_1.SalesOfficeID = @SOID) AND (branchdata.SalesType IS NOT NULL) AND (dispatch.flag=@flag) OR (branchdata.sno = @BranchID) AND (branchdata.SalesType IS NOT NULL) AND (dispatch.flag=@flag) ORDER BY branchdata.sno");
            cmd.Parameters.AddWithValue("@SOID", BranchID);
            cmd.Parameters.AddWithValue("@BranchID", BranchID);
            cmd.Parameters.AddWithValue("@SuperBranch", SuperBranch);
            cmd.Parameters.AddWithValue("@flag", "1");
            DataTable dtRoute = vdbmngr.SelectQuery(cmd).Tables[0];
            List<Routes> Routelist = new List<Routes>();
            foreach (DataRow dr in dtRoute.Rows)
            {
                Routes GetRoutes = new Routes();
                GetRoutes.routesno = dr["dispatchsno"].ToString();
                GetRoutes.routename = dr["DispName"].ToString();
                Routelist.Add(GetRoutes);
            }
            string response = GetJson(Routelist);
            context.Response.Write(response);
        }
        catch
        {

        }
    }
    private void LedgerDetailsClick(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            string IndentNo = context.Request["IndnentNo"];
            string Type = context.Request["Type"];
            cmd = new MySqlCommand("SELECT productsdata.ProductName, indents_subtable.DeliveryQty, indents_subtable.UnitCost,Round(sum(indents_subtable.DeliveryQty*indents_subtable.UnitCost),2) as TotalAmount FROM indents INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE (indents.IndentNo = @IndentNo) GROUP BY productsdata.ProductName");
            cmd.Parameters.AddWithValue("@IndentNo", IndentNo);
            DataTable dtIndent = vdbmngr.SelectQuery(cmd).Tables[0];
            int i = 1;
            List<indentcls> indentlist = new List<indentcls>();
            foreach (DataRow dr in dtIndent.Rows)
            {
                indentcls Getindent = new indentcls();
                Getindent.Sno = i++.ToString();
                Getindent.ProductName = dr["ProductName"].ToString();
                Getindent.DeliveryQty = dr["DeliveryQty"].ToString();
                Getindent.Cost = dr["UnitCost"].ToString();
                Getindent.totalAmount = dr["TotalAmount"].ToString();
                indentlist.Add(Getindent);
            }
            string response = GetJson(indentlist);
            context.Response.Write(response);
        }
        catch
        {
        }
    }
    public class indentcls
    {
        public string Sno { get; set; }
        public string ProductName { get; set; }
        public string DeliveryQty { get; set; }
        public string Cost { get; set; }
        public string totalAmount { get; set; }
    }
    public class faaccountnumberscls
    {
        public string sno { get; set; }
        public string bankid { get; set; }
        public string ifscid { get; set; }
        public string branchname { get; set; }
        public string accountno { get; set; }
        public string accounttype { get; set; }
        public string status { get; set; }
        public string doe { get; set; }
        public string createdby { get; set; }
        public string ladger_dr { get; set; }
        public string brach_ledger { get; set; }
        public string ladger_dr_code { get; set; }
        public string brach_ledger_code { get; set; }
        public string branchid { get; set; }
    }
    public class collection
    {
        public string receiptsno { get; set; }
        public string Agentid { get; set; }
        public string Branchid { get; set; }
        public string ReceivedFrom { get; set; }
        public string AmountPaid { get; set; }
        public string DOE { get; set; }
        public string Create_by { get; set; }
        public string cashReceipt { get; set; }
        public string PaymentStatus { get; set; }
        public string AgentName { get; set; }
        public string BranchName { get; set; }
        public string Name { get; set; }
        public string Remarks { get; set; }
        public string cashcollectionsno { get; set; }
        public string Amount { get; set; }
        public string Receiptno { get; set; }
        public string PaymentType { get; set; }
        public string CollectionType { get; set; }
        public string CollectionFrom { get; set; }
        public string VEmpID { get; set; }
        public string CheckStatus { get; set; }
        public string ChequeNo { get; set; }
        public string VarifyDate { get; set; }
        public string ChequeDate { get; set; }
        public string BankName { get; set; }
        public string freezertype { get; set; }
        public string freezeramounttype { get; set; }
        public string TransType { get; set; }
    }
    private void get_EditCollections_details(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            string BranchID = context.Session["branch"].ToString();
            string frmdate = context.Request["fromdate"].ToString();
            string tdate = context.Request["todate"].ToString();
            DateTime fromdate = Convert.ToDateTime(frmdate);
            DateTime todate = Convert.ToDateTime(tdate);
            DateTime ServerDateCurrentdate = VehicleDBMgr.GetTime(vdbmngr.conn);
            cmd = new MySqlCommand("SELECT branchdata_2.BranchName, collections.AmountPaid, collections.ReceiptNo FROM branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN branchmappingtable ON branchdata.sno = branchmappingtable.SuperBranch INNER JOIN branchdata branchdata_2 ON branchmappingtable.SubBranch = branchdata_2.sno INNER JOIN collections ON branchdata_2.sno = collections.Branchid WHERE (branchdata_1.SalesOfficeID = @BranchID) AND (collections.tripId IS NULL) AND (collections.PaidDate BETWEEN @d1 AND @d2) AND  (collections.PaymentType = 'Cash') OR (branchdata.sno = @BranchID) AND (collections.tripId IS NULL) AND (collections.PaidDate BETWEEN @d1 AND @d2) AND (collections.PaymentType = 'Cash')");
            //cmd = new MySqlCommand("SELECT  Sno, BranchId, ReceivedFrom, AgentID, Empid, Amountpayable, AmountPaid, DOE, Create_by, Modified_by, Remarks, OppBal, dispatchid, Receipt, PaymentStatus, ChequeNo, Tripid, GroupRecieptNo, GroupRef, TransactionType, AmountDebited FROM cashreceipts WHERE  (BranchId = @BranchId) AND (DOE BETWEEN @d1 AND @d2) and Tripid IS NULL and ReceivedFrom=@ReceivedFrom ");
            cmd.Parameters.AddWithValue("@BranchId", BranchID);
            cmd.Parameters.AddWithValue("@d1", GetLowDate(fromdate));
            cmd.Parameters.AddWithValue("@d2", GetHighDate(todate));
            cmd.Parameters.AddWithValue("@ReceivedFrom", "Agent");
            DataTable dtcllectioreceipt = vdbmngr.SelectQuery(cmd).Tables[0];
            List<collection> cashcollectionlist = new List<collection>();
            foreach (DataRow dr in dtcllectioreceipt.Rows)
            {
                cmd = new MySqlCommand("SELECT  Branchid, Name, Amount, Remarks, DOE, Receiptno, Agentid, PaymentType, CollectionType, CollectionFrom, Sno, VEmpID, CheckStatus, ChequeNo, VarifyDate,ChequeDate, BankName, freezertype, freezeramounttype, TransType FROM  cashcollections WHERE   (DOE BETWEEN @d1 AND @d2) AND (Branchid = @Branchid) AND (Receiptno = @Receiptno)");
                cmd.Parameters.AddWithValue("@Receiptno", dr["Receipt"].ToString());
                cmd.Parameters.AddWithValue("@BranchId", BranchID);
                cmd.Parameters.AddWithValue("@d1", GetLowDate(fromdate));
                cmd.Parameters.AddWithValue("@d2", GetHighDate(todate));
                DataTable dtcollections = vdbmngr.SelectQuery(cmd).Tables[0];
                collection obj1 = new collection();
                obj1.Branchid = dr["BranchId"].ToString();
                obj1.ReceivedFrom = dr["ReceivedFrom"].ToString();
                obj1.AmountPaid = dr["AmountPaid"].ToString();
                obj1.DOE = ((DateTime)dr["DOE"]).ToString("yyyy-MM-dd");// dr["DOE"].ToString();
                obj1.Create_by = dr["Create_by"].ToString();
                obj1.cashReceipt = dr["Receipt"].ToString();
                obj1.PaymentStatus = dr["PaymentStatus"].ToString();
                obj1.receiptsno = dr["Sno"].ToString();
                foreach (DataRow drr in dtcollections.Rows)
                {
                    obj1.Agentid = dr["Agentid"].ToString();
                    obj1.Name = drr["Name"].ToString();
                    obj1.Remarks = drr["Remarks"].ToString();
                    obj1.cashcollectionsno = drr["Sno"].ToString();
                    obj1.Amount = drr["Amount"].ToString();
                    obj1.DOE = drr["DOE"].ToString();
                    obj1.Receiptno = drr["Receiptno"].ToString();
                    obj1.PaymentType = drr["PaymentType"].ToString();
                    obj1.CollectionType = drr["CollectionType"].ToString();
                    obj1.CollectionFrom = drr["CollectionFrom"].ToString();
                    obj1.VEmpID = drr["VEmpID"].ToString();
                    obj1.CheckStatus = drr["CheckStatus"].ToString();
                    obj1.ChequeNo = drr["ChequeNo"].ToString();
                    obj1.BankName = drr["BankName"].ToString();
                    obj1.freezertype = drr["freezertype"].ToString();
                    obj1.freezeramounttype = drr["freezeramounttype"].ToString();
                    obj1.TransType = drr["TransType"].ToString();
                    cashcollectionlist.Add(obj1);
                }
            }
            string response = GetJson(cashcollectionlist);
            context.Response.Write(response);
        }
        catch
        {

        }
    }
    private void GetInventoryDeatails(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            string BranchID = context.Request["BranchID"];
            string DOE = context.Request["DOE"];
            cmd = new MySqlCommand("SELECT inventory_monitor.BranchId, inventory_monitor.Inv_Sno, inventory_monitor.Sno, invmaster.InvName FROM inventory_monitor INNER JOIN invmaster ON inventory_monitor.Inv_Sno = invmaster.sno WHERE (inventory_monitor.BranchId = @Branch_id)");
            cmd.Parameters.AddWithValue("@Branch_id", BranchID);
            DataTable dtinventory = vdbmngr.SelectQuery(cmd).Tables[0];
            List<SORoute> RouteList = new List<SORoute>();
            foreach (DataRow dr in dtinventory.Rows)
            {
                SORoute GetRoute = new SORoute();
                GetRoute.rid = dr["Inv_Sno"].ToString();
                GetRoute.RouteName = dr["InvName"].ToString();
                RouteList.Add(GetRoute);
            }
            string response = GetJson(RouteList);
            context.Response.Write(response);
        }
        catch
        {

        }
    }
    private void GetAgentAmountDeatails(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            DateTime ServerDateCurrentdate = VehicleDBMgr.GetTime(vdbmngr.conn);
            string BranchID = context.Request["BranchID"];
            string DOE = context.Request["DOE"];
            cmd = new MySqlCommand("SELECT SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost) AS Total,indents.IndentNo FROM indents INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo WHERE (indents.Branch_id = @Branch_id) AND (indents.I_Date between @d1 and @d2) ");
            cmd.Parameters.AddWithValue("@d1", GetLowDate(ServerDateCurrentdate).AddDays(-1));
            cmd.Parameters.AddWithValue("@d2", GetHighDate(ServerDateCurrentdate).AddDays(-1));
            cmd.Parameters.AddWithValue("@Branch_id", BranchID);
            DataTable dtYesdayIndent = vdbmngr.SelectQuery(cmd).Tables[0];
            double Total = 0;
            string IndentNo = "0";
            if (dtYesdayIndent.Rows.Count > 0)
            {
                if (dtYesdayIndent.Rows[0]["Total"].ToString() != "")
                {
                    double Dtotal = (double)dtYesdayIndent.Rows[0]["Total"];
                    cmd = new MySqlCommand("SELECT Branchid, UserData_sno,SUM(AmountPaid) AS AmountPaid, Denominations, Remarks, Sno, PaidDate, PaymentType, tripId, CheckStatus, ReturnDenomin, PayTime, VEmpID, ChequeNo, EmpID FROM collections WHERE (Branchid = @BranchID) AND (PaidDate BETWEEN @d1 AND @d2) ");
                    cmd.Parameters.AddWithValue("@d1", GetLowDate(ServerDateCurrentdate));
                    cmd.Parameters.AddWithValue("@d2", GetHighDate(ServerDateCurrentdate));
                    cmd.Parameters.AddWithValue("@BranchID", BranchID);
                    DataTable dttodayIndent = vdbmngr.SelectQuery(cmd).Tables[0];
                    if (dttodayIndent.Rows.Count > 0)
                    {
                        string AmountPaid = dttodayIndent.Rows[0]["AmountPaid"].ToString();
                        if (AmountPaid == "0")
                        {
                            Total = (double)Math.Round(Dtotal, 2);
                        }
                        else
                        {
                            Total = 0;
                        }
                    }
                    else
                    {
                        Total = (double)Math.Round(Dtotal, 2);
                    }
                    IndentNo = dtYesdayIndent.Rows[0]["IndentNo"].ToString();
                }
            }
            cmd = new MySqlCommand("SELECT branchaccounts.Amount, branchdata.CollectionType FROM  branchaccounts INNER JOIN branchdata ON branchaccounts.BranchId = branchdata.sno WHERE (branchaccounts.BranchId = @BranchID)");
            cmd.Parameters.AddWithValue("@BranchID", BranchID);
            DataTable dtTotalAmount = vdbmngr.SelectQuery(cmd).Tables[0];
            List<AmontClass> msgAmountlist = new List<AmontClass>();
            if (dtTotalAmount.Rows.Count > 0)
            {
                AmontClass getAmount = new AmontClass();
                getAmount.IndentNo = IndentNo;
                getAmount.TodayAmount = Total;
                getAmount.CollectionType = dtTotalAmount.Rows[0]["CollectionType"].ToString();
                getAmount.TotalAmount = dtTotalAmount.Rows[0]["Amount"].ToString();
                msgAmountlist.Add(getAmount);
                string response = GetJson(msgAmountlist);
                context.Response.Write(response);
            }
            else
            {
                AmontClass getAmount = new AmontClass();
                getAmount.TodayAmount = Total;
                getAmount.TotalAmount = "0";
                getAmount.CollectionType = "Cash";
                msgAmountlist.Add(getAmount);
                string response = GetJson(msgAmountlist);
                context.Response.Write(response);
            }
        }
        catch
        {
        }
    }
    public class AmontClass
    {
        public string IndentNo { get; set; }
        public double TodayAmount { get; set; }
        public string TotalAmount { get; set; }
        public string CollectionType { get; set; }
    }
    private void GetSalesRoutes(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            List<SORoute> RouteList = new List<SORoute>();
            string BranchID = context.Request["BranchID"];
            if (BranchID == "572")
            {
                BranchID = "158";
            }
            cmd = new MySqlCommand("SELECT RouteName, Sno,BranchID FROM branchroutes WHERE (BranchID = @BranchID) and  (flag=@flag)");
            cmd.Parameters.AddWithValue("@BranchID", BranchID);
            cmd.Parameters.AddWithValue("@flag", "1");
            DataTable dtBranch = vdbmngr.SelectQuery(cmd).Tables[0];
            foreach (DataRow dr in dtBranch.Rows)
            {
                SORoute GetRoute = new SORoute();
                GetRoute.rid = dr["Sno"].ToString();
                GetRoute.RouteName = dr["RouteName"].ToString();
                GetRoute.BranchID = dr["BranchID"].ToString();
                RouteList.Add(GetRoute);
            }
            string response = GetJson(RouteList);
            context.Response.Write(response);
        }
        catch
        {
        }
    }
    private void GetApprovalDetails(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            //string DispDate = context.Request["IndentDate"];
            string s = context.Request["IndentDate"];
            var dt = DateTime.ParseExact(s, "ddd MMM dd yyyy HH:mm:ss 'GMT'zzz", System.Globalization.CultureInfo.InvariantCulture);
            string DispDate = dt.ToString("yyyy-MM-dd");
            string status = context.Request["status"];
            DateTime ServerDateCurrentdate = VehicleDBMgr.GetTime(vdbmngr.conn);
            if (DispDate == "")
            {
                DispDate = ServerDateCurrentdate.ToString();
            }
            DateTime Selecteddate = Convert.ToDateTime(DispDate).AddDays(-1);
            List<approvalplan> approvalplanList = new List<approvalplan>();
            DataTable dtTotalDispatches = new DataTable();
            string Status = context.Request["Status"];
            string BranchID = "";
            if (Status == "GraphicalNetSale")
            {
                BranchID = context.Request["BranchID"];
            }
            else
            {
                BranchID = context.Session["branch"].ToString();
            }
            cmd = new MySqlCommand("SELECT dispatch.sno, dispatch.DispName FROM dispatch INNER JOIN branchdata ON dispatch.Branch_Id = branchdata.sno WHERE (dispatch.Branch_Id = @branchid) and (dispatch.flag=@flag) OR (branchdata.SalesOfficeID = @branchid) and (dispatch.flag=@flag) ORDER BY dispatch.sno");
            cmd.Parameters.AddWithValue("@branchid", BranchID);
            cmd.Parameters.AddWithValue("@flag", "1");
            DataTable dtDispatches = vdbmngr.SelectQuery(cmd).Tables[0];
            dtTotalDispatches.Columns.Add("sno");
            dtTotalDispatches.Columns.Add("DispName");
            dtTotalDispatches.Columns.Add("Total Indent");
            dtTotalDispatches.Columns.Add("Total Dispatch");
            dtTotalDispatches.Columns.Add("Total Sale");
            dtTotalDispatches.Columns.Add("Sale Value in Rs");
            dtTotalDispatches.Columns.Add("Paid Amount in Rs");
            dtTotalDispatches.Columns.Add("Today Due Amount in Rs");
            dtTotalDispatches.Columns.Add("Today CASH Due Amount in Rs");
            dtTotalDispatches.Columns.Add("Total Due Amount in Rs");
            dtTotalDispatches.Columns.Add("Total Leaks In Ltrs");
            dtTotalDispatches.Columns.Add("Total VLeaks In Ltrs");
            dtTotalDispatches.Columns.Add("Total Returns in Ltrs");
            dtTotalDispatches.Columns.Add("Total VReturns in Ltrs");
            dtTotalDispatches.Columns.Add("Total Short in Ltrs");
            dtTotalDispatches.Columns.Add("Total Free in Ltrs");
            dtTotalDispatches.Columns.Add("Crates Issued");
            dtTotalDispatches.Columns.Add("Crates Return");
            dtTotalDispatches.Columns.Add("Cans Issued");
            dtTotalDispatches.Columns.Add("Cans Return");
            DataRow newrowhead = dtTotalDispatches.NewRow();
            newrowhead["sno"] = "1";
            newrowhead["DispName"] = context.Session["branchname"].ToString();
            newrowhead["Total Indent"] = "0";
            newrowhead["Total Dispatch"] = "0";
            newrowhead["Total Sale"] = "0";
            newrowhead["Sale Value in Rs"] = "0";
            newrowhead["Paid Amount in Rs"] = "0";
            newrowhead["Today Due Amount in Rs"] = "0";
            newrowhead["Today CASH Due Amount in Rs"] = "0";
            newrowhead["Total Due Amount in Rs"] = "0";
            newrowhead["Total Leaks In Ltrs"] = "0";
            newrowhead["Total VLeaks In Ltrs"] = "0";
            newrowhead["Total Returns in Ltrs"] = "0";
            newrowhead["Total VReturns in Ltrs"] = "0";
            newrowhead["Total Short in Ltrs"] = "0";
            newrowhead["Total Free in Ltrs"] = "0";
            newrowhead["Crates Issued"] = "0";
            newrowhead["Crates Return"] = "0";
            newrowhead["Cans Issued"] = "0";
            newrowhead["Cans Return"] = "0";
            dtTotalDispatches.Rows.Add(newrowhead);
            foreach (DataRow dr in dtDispatches.Rows)
            {
                DataRow newrow = dtTotalDispatches.NewRow();
                newrow["sno"] = dr["sno"].ToString();
                newrow["DispName"] = dr["DispName"].ToString();
                newrow["Total Indent"] = "0";
                newrow["Total Dispatch"] = "0";
                newrow["Total Sale"] = "0";
                newrow["Sale Value in Rs"] = "0";
                newrow["Paid Amount in Rs"] = "0";
                newrow["Today Due Amount in Rs"] = "0";
                newrow["Today CASH Due Amount in Rs"] = "0";
                newrow["Total Due Amount in Rs"] = "0";
                newrow["Total Leaks In Ltrs"] = "0";
                newrow["Total VLeaks In Ltrs"] = "0";
                newrow["Total Returns in Ltrs"] = "0";
                newrow["Total VReturns in Ltrs"] = "0";
                newrow["Total Short in Ltrs"] = "0";
                newrow["Total Free in Ltrs"] = "0";
                newrow["Crates Issued"] = "0";
                newrow["Crates Return"] = "0";
                newrow["Cans Issued"] = "0";
                newrow["Cans Return"] = "0";
                dtTotalDispatches.Rows.Add(newrow);
            }
            cmd = new MySqlCommand("SELECT dispatch.DispName, dispatch.Branch_Id, dispatch.sno, SUM(indents_subtable.unitQty) AS unitqty, SUM(indents_subtable.DeliveryQty) AS DeliveryQty,SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost) AS salevalue FROM dispatch INNER JOIN branchdata ON dispatch.Branch_Id = branchdata.sno INNER JOIN dispatch_sub ON dispatch.sno = dispatch_sub.dispatch_sno INNER JOIN branchroutesubtable ON dispatch_sub.Route_id = branchroutesubtable.RefNo INNER JOIN branchdata branchdata_1 ON branchroutesubtable.BranchID = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo WHERE (dispatch.Branch_Id = @branchid) AND (branchdata_1.CollectionType = 'DUE') AND (indents.I_date BETWEEN @d1 AND @d2) OR (branchdata.SalesOfficeID = @branchid) AND (branchdata_1.CollectionType = 'DUE') AND (indents.I_date BETWEEN @d1 AND @d2) GROUP BY dispatch.sno");
            cmd.Parameters.AddWithValue("@branchid", BranchID);
            cmd.Parameters.AddWithValue("@d1", GetLowDate(Selecteddate));
            cmd.Parameters.AddWithValue("@d2", GetHighDate(Selecteddate));
            DataTable dt_DUE_Routes_SalesValue = vdbmngr.SelectQuery(cmd).Tables[0];
            cmd = new MySqlCommand("SELECT dispatch.DispName, dispatch.Branch_Id, dispatch.sno, SUM(collections.AmountPaid) AS amtpaid FROM dispatch INNER JOIN branchdata ON dispatch.Branch_Id = branchdata.sno INNER JOIN dispatch_sub ON dispatch.sno = dispatch_sub.dispatch_sno INNER JOIN branchroutesubtable ON dispatch_sub.Route_id = branchroutesubtable.RefNo INNER JOIN branchdata branchdata_1 ON branchroutesubtable.BranchID = branchdata_1.sno INNER JOIN collections ON branchdata_1.sno = collections.Branchid WHERE (dispatch.Branch_Id = @branchid) AND (branchdata_1.CollectionType = 'DUE') AND (collections.PaidDate BETWEEN @d1 AND @d2) AND (collections.CheckStatus IS NULL) OR (branchdata_1.CollectionType = 'DUE') AND (collections.PaidDate BETWEEN @d1 AND @d2) AND (collections.CheckStatus IS NULL) AND (branchdata.SalesOfficeID = @branchid) GROUP BY dispatch.sno");
            cmd.Parameters.AddWithValue("@branchid", BranchID);
            cmd.Parameters.AddWithValue("@d1", GetLowDate(Selecteddate).AddDays(1));
            cmd.Parameters.AddWithValue("@d2", GetHighDate(Selecteddate).AddDays(1));
            DataTable dt_DUE_Routes_Collections = vdbmngr.SelectQuery(cmd).Tables[0];
            cmd = new MySqlCommand("SELECT dispatch.DispName, dispatch.Branch_Id, dispatch.sno, SUM(indents_subtable.unitQty) AS unitqty, SUM(indents_subtable.DeliveryQty) AS DeliveryQty,SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost) AS salevalue FROM dispatch INNER JOIN branchdata ON dispatch.Branch_Id = branchdata.sno INNER JOIN dispatch_sub ON dispatch.sno = dispatch_sub.dispatch_sno INNER JOIN branchroutesubtable ON dispatch_sub.Route_id = branchroutesubtable.RefNo INNER JOIN branchdata branchdata_1 ON branchroutesubtable.BranchID = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo WHERE (dispatch.Branch_Id = @branchid) AND (branchdata_1.CollectionType = 'CASH') AND (indents.I_date BETWEEN @d1 AND @d2) OR (branchdata.SalesOfficeID = @branchid) AND (branchdata_1.CollectionType = 'CASH') AND (indents.I_date BETWEEN @d1 AND @d2) GROUP BY dispatch.sno");
            cmd.Parameters.AddWithValue("@branchid", BranchID);
            cmd.Parameters.AddWithValue("@d1", GetLowDate(Selecteddate));
            cmd.Parameters.AddWithValue("@d2", GetHighDate(Selecteddate));
            DataTable dt_CASH_Routes_SalesValue = vdbmngr.SelectQuery(cmd).Tables[0];
            cmd = new MySqlCommand("SELECT dispatch.DispName, dispatch.Branch_Id, dispatch.sno, SUM(collections.AmountPaid) AS amtpaid FROM dispatch INNER JOIN branchdata ON dispatch.Branch_Id = branchdata.sno INNER JOIN dispatch_sub ON dispatch.sno = dispatch_sub.dispatch_sno INNER JOIN branchroutesubtable ON dispatch_sub.Route_id = branchroutesubtable.RefNo INNER JOIN branchdata branchdata_1 ON branchroutesubtable.BranchID = branchdata_1.sno INNER JOIN collections ON branchdata_1.sno = collections.Branchid WHERE (dispatch.Branch_Id = @branchid) AND (branchdata_1.CollectionType = 'CASH') AND (collections.PaidDate BETWEEN @d1 AND @d2) AND (collections.CheckStatus IS NULL) OR (branchdata_1.CollectionType = 'CASH') AND (collections.PaidDate BETWEEN @d1 AND @d2) AND (collections.CheckStatus IS NULL) AND (branchdata.SalesOfficeID = @branchid) GROUP BY dispatch.sno");
            cmd.Parameters.AddWithValue("@branchid", BranchID);
            cmd.Parameters.AddWithValue("@d1", GetLowDate(Selecteddate).AddDays(1));
            cmd.Parameters.AddWithValue("@d2", GetHighDate(Selecteddate).AddDays(1));
            DataTable dt_CASH_Routes_Collections = vdbmngr.SelectQuery(cmd).Tables[0];
            cmd = new MySqlCommand("SELECT dispatch.sno, dispatch.BranchID, tripdat.Sno AS tripid, SUM(leakages.ReturnQty) AS returnqty, SUM(leakages.TotalLeaks) AS leakqty, SUM(leakages.VLeaks) AS vleaks, SUM(leakages.VReturns) AS vreturns FROM dispatch INNER JOIN branchdata ON dispatch.BranchID = branchdata.sno INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN (SELECT Sno, I_Date FROM tripdata WHERE (I_Date BETWEEN @d1 AND @d2)) tripdat ON triproutes.Tripdata_sno = tripdat.Sno INNER JOIN leakages ON tripdat.Sno = leakages.TripID WHERE (dispatch.BranchID = @branchid) OR (branchdata.SalesOfficeID = @branchid)");
            cmd.Parameters.AddWithValue("@branchid", BranchID);
            cmd.Parameters.AddWithValue("@d1", GetLowDate(Selecteddate));
            cmd.Parameters.AddWithValue("@d2", GetHighDate(Selecteddate));
            DataTable dt_ReturnDC = vdbmngr.SelectQuery(cmd).Tables[0];

            cmd = new MySqlCommand("SELECT dispatch.sno, dispatch.BranchID, tripdat.Sno AS tripid, SUM(branchleaktrans.LeakQty) AS branchleak, SUM(branchleaktrans.FreeQty) AS brnchfree,SUM(branchleaktrans.ShortQty) AS brnchshort FROM dispatch INNER JOIN branchdata ON dispatch.BranchID = branchdata.sno INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN (SELECT Sno, I_Date FROM tripdata WHERE (I_Date BETWEEN @d1 AND @d2)) tripdat ON triproutes.Tripdata_sno = tripdat.Sno INNER JOIN branchleaktrans ON tripdat.Sno = branchleaktrans.TripId WHERE (dispatch.BranchID = @branchid) OR (branchdata.SalesOfficeID = @branchid)");
            cmd.Parameters.AddWithValue("@branchid", BranchID);
            cmd.Parameters.AddWithValue("@d1", GetLowDate(Selecteddate));
            cmd.Parameters.AddWithValue("@d2", GetHighDate(Selecteddate));
            DataTable dt_BranchLeaks = vdbmngr.SelectQuery(cmd).Tables[0];
            cmd = new MySqlCommand("SELECT dispatch.DispName, dispatch.Branch_Id, dispatch.sno, SUM(indents_subtable.unitQty) AS unitqty, SUM(indents_subtable.DeliveryQty) AS DeliveryQty,SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost) AS salevalue FROM dispatch INNER JOIN dispatch_sub ON dispatch.sno = dispatch_sub.dispatch_sno INNER JOIN branchroutesubtable ON dispatch_sub.Route_id = branchroutesubtable.RefNo INNER JOIN indents ON branchroutesubtable.BranchID = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN branchdata ON dispatch.Branch_Id = branchdata.sno WHERE (dispatch.Branch_Id = @branchid) AND (indents.I_date BETWEEN @d1 AND @d2) OR (indents.I_date BETWEEN @d1 AND @d2) AND (branchdata.SalesOfficeID = @branchid) GROUP BY dispatch.sno");
            cmd.Parameters.AddWithValue("@branchid", BranchID);
            cmd.Parameters.AddWithValue("@d1", GetLowDate(Selecteddate));
            cmd.Parameters.AddWithValue("@d2", GetHighDate(Selecteddate));
            DataTable dt_indent_sale = vdbmngr.SelectQuery(cmd).Tables[0];
            cmd = new MySqlCommand("SELECT tripinfo.sno, tripinfo.DispName, tripinfo.Branch_Id, tripinfo.Tripdata_sno, ff.returnqty, ff.free, ff.short, ff.leaks FROM (SELECT dispatch.sno, dispatch.DispName, dispatch.Branch_Id, triproutes.Tripdata_sno FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID WHERE        (dispatch.Branch_Id = @branchid) OR (branchdata.SalesOfficeID = @branchid)) tripinfo INNER JOIN (SELECT       Sno, returnqty, free, short, leaks FROM            (SELECT        tripdata.Sno, SUM(leakages.ReturnQty) AS returnqty, SUM(leakages.FreeMilk) AS free, SUM(leakages.ShortQty) AS short,  SUM(leakages.TotalLeaks) AS leaks FROM            tripdata INNER JOIN leakages ON tripdata.Sno = leakages.TripID WHERE        (tripdata.I_Date BETWEEN @d1 AND @d2)) leaks) ff ON ff.Sno = tripinfo.Tripdata_sno");
            cmd.Parameters.AddWithValue("@branchid", BranchID);
            cmd.Parameters.AddWithValue("@d1", GetLowDate(Selecteddate));
            cmd.Parameters.AddWithValue("@d2", GetHighDate(Selecteddate));
            DataTable dt_leaks = vdbmngr.SelectQuery(cmd).Tables[0];
            //ravi
            cmd = new MySqlCommand("SELECT SUM(ProductInfo.Qty) AS dispatchqty, TripInfo.DispName, TripInfo.Sno AS tripid, TripInfo.SubmittedAmount, TripInfo.despsno AS sno FROM (SELECT tripdata.Sno, tripdata.DCNo, tripdata.I_Date, tripdata.VehicleNo, tripdata.SubmittedAmount, dispatch.DispName, dispatch.DispType,dispatch.sno AS despsno, dispatch.DispMode FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno WHERE (dispatch.Branch_Id = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT ProductName, Sno, Qty FROM (SELECT productsdata.ProductName, tripdata_1.Sno, tripsubdata.Qty FROM tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno INNER JOIN productsdata ON tripsubdata.ProductId = productsdata.sno WHERE        (tripdata_1.AssignDate BETWEEN @d1 AND @d2)) TripSubInfo) ProductInfo ON TripInfo.Sno = ProductInfo.Sno  GROUP BY TripInfo.DispName");
            cmd.Parameters.AddWithValue("@branch", BranchID);
            cmd.Parameters.AddWithValue("@d1", GetLowDate(Selecteddate));
            cmd.Parameters.AddWithValue("@d2", GetHighDate(Selecteddate));
            DataTable dt_totdispatch_paidamt = vdbmngr.SelectQuery(cmd).Tables[0];
            cmd = new MySqlCommand("SELECT dispatch.DispName, dispatch.sno, tripinvdata.Qty, tripinvdata.invid, tripinvdata.Remaining FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id LEFT OUTER JOIN (SELECT Sno, EmpId, AssignDate, Status, Userdata_sno, Remarks, Permissions, Denominations, CollectedAmount, SubmittedAmount, Cdate, ReceivedAmount,VehicleNo, RecieptNo, I_Date, DEmpId, ATripid, InvStatus, GPStatus, PlanStatus, DespatchStatus, Plantime, DispTime, SOTransfer, BranchID,ReturnDCTime FROM tripdata WHERE (I_Date BETWEEN @d1 AND @d2)) tripdat INNER JOIN triproutes ON tripdat.Sno = triproutes.Tripdata_sno INNER JOIN tripinvdata ON tripdat.Sno = tripinvdata.Tripdata_sno ON dispatch.sno = triproutes.RouteID WHERE (dispatch.Branch_Id = @branchid) AND (tripinvdata.Qty IS NOT NULL) OR (branchdata.SalesOfficeID = @branchid) AND (tripinvdata.Qty IS NOT NULL)");
            cmd.Parameters.AddWithValue("@branchid", BranchID);
            cmd.Parameters.AddWithValue("@d1", GetLowDate(Selecteddate));
            cmd.Parameters.AddWithValue("@d2", GetHighDate(Selecteddate));
            DataTable dt_inventory = vdbmngr.SelectQuery(cmd).Tables[0];
            float finaltotind = 0;
            float finaltotsale = 0;
            float finaltotsalevalue = 0;
            float finaltotleak = 0;
            float finaltotVleak = 0;
            float finaltotVreturn = 0;
            float finaltotreturn = 0;
            float finaltotshort = 0;
            float finaltotfree = 0;
            float finaltotdispatc = 0;
            float finaltottodaydue = 0;
            float finaltottodayCASHdue = 0;
            float finaltotamtpaid = 0;
            float finaltotdueamt = 0;
            int finaltotissuedcrates = 0;
            int finaltotCratesReturn = 0;
            int finaltotCansIssued = 0;
            int finaltotCansReturn = 0;
            foreach (DataRow drtotal in dtTotalDispatches.Rows)
            {
                foreach (DataRow dr in dt_inventory.Rows)
                {
                    if (drtotal["sno"].ToString() == dr["sno"].ToString())
                    {
                        int cratesissued = 0;
                        int cratesreturn = 0;
                        int cansissued = 0;
                        int cansreturn = 0;
                        if (dr["invid"].ToString() == "1")
                        {
                            int.TryParse(dr["Qty"].ToString(), out cratesissued);
                            int.TryParse(dr["Remaining"].ToString(), out cratesreturn);
                            drtotal["Crates Issued"] = cratesissued;
                            drtotal["Crates Return"] = cratesreturn;
                            finaltotissuedcrates += cratesissued;
                            finaltotCratesReturn += cratesreturn;

                        }
                        if (dr["invid"].ToString() == "4")
                        {

                            int.TryParse(dr["Qty"].ToString(), out cansissued);
                            int.TryParse(dr["Remaining"].ToString(), out cansreturn);
                            drtotal["Cans Issued"] = cansissued;
                            drtotal["Cans Return"] = cansreturn;
                            finaltotCansIssued += cansissued;
                            finaltotCansReturn += cansreturn;
                        }
                    }
                }
            }
            foreach (DataRow drtotal in dtTotalDispatches.Rows)
            {
                foreach (DataRow dr in dt_indent_sale.Rows)
                {
                    if (drtotal["sno"].ToString() == dr["sno"].ToString())
                    {
                        float unitqty = 0;
                        float saleqty = 0;
                        float salevalue = 0;
                        float.TryParse(dr["unitqty"].ToString(), out unitqty);
                        float.TryParse(dr["DeliveryQty"].ToString(), out saleqty);
                        float.TryParse(dr["salevalue"].ToString(), out salevalue);
                        drtotal["Total Indent"] = Math.Round(unitqty, 2);
                        drtotal["Total Sale"] = Math.Round(saleqty, 2);
                        drtotal["Sale Value in Rs"] = Math.Round(salevalue, 2);
                        finaltotind += unitqty;
                        finaltotsale += saleqty;
                        finaltotsalevalue += salevalue;
                    }
                }
            }
            foreach (DataRow drtotal in dtTotalDispatches.Rows)
            {
                foreach (DataRow dr in dt_leaks.Rows)
                {
                    if (drtotal["sno"].ToString() == dr["sno"].ToString())
                    {
                        float totalleaks = 0;
                        float totalreturns = 0;
                        float totalshort = 0;
                        float totalfree = 0;
                        float.TryParse(dr["leaks"].ToString(), out totalleaks);
                        float.TryParse(dr["returnqty"].ToString(), out totalreturns);
                        float.TryParse(dr["short"].ToString(), out totalshort);
                        float.TryParse(dr["free"].ToString(), out totalfree);
                        drtotal["Total Leaks In Ltrs"] = Math.Round(totalleaks, 2);
                        drtotal["Total Returns in Ltrs"] = Math.Round(totalreturns, 2);
                        drtotal["Total Short in Ltrs"] = Math.Round(totalshort, 2);
                        drtotal["Total Free in Ltrs"] = Math.Round(totalfree, 2);
                        finaltotshort += totalshort;
                        finaltotfree += totalfree;
                    }
                }
            }
            if (dt_ReturnDC.Rows.Count > 0)
            {
                string returnqty = dt_ReturnDC.Rows[0]["returnqty"].ToString();
                string leakqty = dt_ReturnDC.Rows[0]["leakqty"].ToString();
                string vleaks = dt_ReturnDC.Rows[0]["vleaks"].ToString();
                string vreturns = dt_ReturnDC.Rows[0]["vreturns"].ToString();
                float returndcreturn = 0;
                float returndcleak = 0;
                float returndcVLeaks = 0;
                float returndcVReturns = 0;
                float.TryParse(returnqty, out returndcreturn);
                float.TryParse(leakqty, out returndcleak);
                float.TryParse(vleaks, out returndcVLeaks);
                float.TryParse(vreturns, out returndcVReturns);
                finaltotleak += returndcleak;
                finaltotreturn += returndcreturn;
                finaltotVleak += returndcVLeaks;
                finaltotVreturn += returndcVReturns;
            }
            if (dt_BranchLeaks.Rows.Count > 0)
            {
                string branchleak = dt_BranchLeaks.Rows[0]["branchleak"].ToString();
                string brnchfree = dt_BranchLeaks.Rows[0]["brnchfree"].ToString();
                string brnchshort = dt_BranchLeaks.Rows[0]["brnchshort"].ToString();
                float branchleaks = 0;
                float brnchfrees = 0;
                float brnchshorts = 0;
                float.TryParse(branchleak, out branchleaks);
                float.TryParse(brnchfree, out brnchfrees);
                float.TryParse(brnchshort, out brnchshorts);
                finaltotleak += branchleaks;
                finaltotshort += brnchshorts;
                finaltotfree += brnchfrees;

            }
            foreach (DataRow drtotal in dtTotalDispatches.Rows)
            {
                foreach (DataRow dr in dt_totdispatch_paidamt.Rows)
                {
                    if (drtotal["sno"].ToString() == dr["sno"].ToString())
                    {
                        float totdispatch = 0;
                        float todaydue = 0;
                        float todayCashdue = 0;
                        float totaldue = 0;
                        float paidamt = 0;
                        float submittedamt = 0;
                        float cashpaidamt = 0;
                        float saleamt = 0;
                        float Cashsaleamt = 0;
                        float.TryParse(dr["dispatchqty"].ToString(), out totdispatch);
                        float.TryParse(dr["SubmittedAmount"].ToString(), out submittedamt);
                        foreach (DataRow drdtcashcollections in dt_CASH_Routes_Collections.Select("sno='" + drtotal["sno"].ToString() + "'"))
                        {
                            float.TryParse(drdtcashcollections["amtpaid"].ToString(), out cashpaidamt);
                        }
                        foreach (DataRow drdtcashsale in dt_CASH_Routes_SalesValue.Select("sno='" + drtotal["sno"].ToString() + "'"))
                        {
                            float.TryParse(drdtcashsale["salevalue"].ToString(), out Cashsaleamt);
                        }
                        foreach (DataRow drdtduecollections in dt_DUE_Routes_Collections.Select("sno='" + drtotal["sno"].ToString() + "'"))
                        {
                            float.TryParse(drdtduecollections["amtpaid"].ToString(), out paidamt);
                        }
                        foreach (DataRow drdtduesale in dt_DUE_Routes_SalesValue.Select("sno='" + drtotal["sno"].ToString() + "'"))
                        {
                            float.TryParse(drdtduesale["salevalue"].ToString(), out saleamt);
                        }
                        todaydue = saleamt - paidamt;
                        todayCashdue = Cashsaleamt - cashpaidamt;
                        drtotal["Total Dispatch"] = Math.Round(totdispatch, 2);
                        drtotal["Today Due Amount in Rs"] = Math.Round(todaydue, 2);
                        drtotal["Today CASH Due Amount in Rs"] = Math.Round(todayCashdue, 2);
                        drtotal["Paid Amount in Rs"] = Math.Round(submittedamt, 2);
                        drtotal["Total Due Amount in Rs"] = Math.Round(totaldue, 2);
                        finaltotdispatc += totdispatch;
                        finaltottodaydue += todaydue;
                        finaltottodayCASHdue += todayCashdue;
                        finaltotamtpaid += submittedamt;
                        finaltotdueamt += totaldue;
                    }
                }
            }
            foreach (DataRow drtotal in dtTotalDispatches.Rows)
            {
                if (drtotal["sno"].ToString() == "1")
                {
                    drtotal["Total Indent"] = Math.Round(finaltotind, 2);
                    drtotal["Total Sale"] = Math.Round(finaltotsale, 2);
                    drtotal["Sale Value in Rs"] = Math.Round(finaltotsalevalue, 2);

                    drtotal["Total Leaks In Ltrs"] = Math.Round(finaltotleak, 2);
                    drtotal["Total VLeaks In Ltrs"] = Math.Round(finaltotVleak, 2);
                    drtotal["Total Returns in Ltrs"] = Math.Round(finaltotreturn, 2);
                    drtotal["Total VReturns in Ltrs"] = Math.Round(finaltotVreturn, 2);
                    drtotal["Total Short in Ltrs"] = Math.Round(finaltotshort, 2);
                    drtotal["Total Free in Ltrs"] = Math.Round(finaltotfree, 2);
                    drtotal["Total Dispatch"] = Math.Round(finaltotdispatc, 2);
                    drtotal["Today Due Amount in Rs"] = Math.Round(finaltottodaydue, 2);
                    drtotal["Today CASH Due Amount in Rs"] = Math.Round(finaltottodayCASHdue, 2);
                    drtotal["Paid Amount in Rs"] = Math.Round(finaltotamtpaid, 2);
                    drtotal["Total Due Amount in Rs"] = Math.Round(finaltotdueamt, 2);
                    drtotal["Crates Issued"] = finaltotissuedcrates;
                    drtotal["Crates Return"] = finaltotCratesReturn;
                    drtotal["Cans Issued"] = finaltotCansIssued;
                    drtotal["Cans Return"] = finaltotCansReturn;
                }
            }

            if (dtTotalDispatches.Rows.Count > 0)
            {
                int i = 1;
                foreach (DataRow dr in dtTotalDispatches.Rows)
                {
                    if (status == "salesoffice")
                    {
                        if (dr["sno"].ToString() == "1")
                        {
                            float tddue = 0;
                            float tdcashdue = 0;
                            float finaltddue = 0;

                            approvalplan Getapproval = new approvalplan();
                            Getapproval.Sno = i++.ToString();
                            Getapproval.despsno = dr["sno"].ToString();
                            Getapproval.dispName = dr["DispName"].ToString();
                            Getapproval.Totalindent = dr["Total Indent"].ToString();

                            Getapproval.Totalsale = dr["Total Sale"].ToString();
                            Getapproval.salevalue = dr["Sale Value in Rs"].ToString();
                            Getapproval.TotalLeaks = dr["Total Leaks In Ltrs"].ToString();
                            Getapproval.VerifiedLeaks = dr["Total VLeaks In Ltrs"].ToString();
                            Getapproval.TotalReturns = dr["Total Returns in Ltrs"].ToString();
                            Getapproval.VerifiedReturns = dr["Total VReturns in Ltrs"].ToString();
                            Getapproval.TotalShort = dr["Total Short in Ltrs"].ToString();
                            Getapproval.TotalFree = dr["Total Free in Ltrs"].ToString();
                            Getapproval.TotalDispatch = dr["Total Dispatch"].ToString();
                            // Getapproval.TodayDue = dr["Today Due Amount in Rs"].ToString();
                            Getapproval.RegularDue = dr["Today Due Amount in Rs"].ToString();
                            Getapproval.TodayCASHDue = dr["Today CASH Due Amount in Rs"].ToString();
                            float.TryParse(dr["Today Due Amount in Rs"].ToString(), out tddue);
                            float.TryParse(dr["Today CASH Due Amount in Rs"].ToString(), out tdcashdue);
                            finaltddue = tddue + tdcashdue;
                            Getapproval.TodayDue = finaltddue.ToString();
                            Getapproval.PaidAmountinRs = dr["Paid Amount in Rs"].ToString();
                            Getapproval.TotalDue = dr["Total Due Amount in Rs"].ToString();
                            Getapproval.IssuedCrates = dr["Crates Issued"].ToString();
                            Getapproval.ReturnCrates = dr["Crates Return"].ToString();
                            Getapproval.IssuedCans = dr["Cans Issued"].ToString();
                            Getapproval.ReturnCans = dr["Cans Return"].ToString();
                            approvalplanList.Add(Getapproval);
                        }
                    }
                    else
                    {
                        if (dr["sno"].ToString() != "1")
                        {
                            approvalplan Getapproval = new approvalplan();
                            Getapproval.Sno = i++.ToString();
                            Getapproval.despsno = dr["sno"].ToString();
                            Getapproval.dispName = dr["DispName"].ToString();
                            Getapproval.Totalindent = dr["Total Indent"].ToString();
                            Getapproval.Totalsale = dr["Total Sale"].ToString();
                            Getapproval.salevalue = dr["Sale Value in Rs"].ToString();
                            Getapproval.TotalLeaks = dr["Total Leaks In Ltrs"].ToString();
                            Getapproval.TotalReturns = dr["Total Returns in Ltrs"].ToString();
                            Getapproval.TotalShort = dr["Total Short in Ltrs"].ToString();
                            Getapproval.TotalFree = dr["Total Free in Ltrs"].ToString();
                            Getapproval.TotalDispatch = dr["Total Dispatch"].ToString();
                            Getapproval.RegularDue = dr["Today Due Amount in Rs"].ToString();
                            Getapproval.TodayCASHDue = dr["Today CASH Due Amount in Rs"].ToString();
                            float finaltddue = 0;
                            float tddue = 0;
                            float tdcashdue = 0;
                            float.TryParse(dr["Today Due Amount in Rs"].ToString(), out tddue);
                            float.TryParse(dr["Today CASH Due Amount in Rs"].ToString(), out tdcashdue);
                            finaltddue = tddue + tdcashdue;
                            Getapproval.TodayDue = finaltddue.ToString();
                            Getapproval.PaidAmountinRs = dr["Paid Amount in Rs"].ToString();
                            Getapproval.TotalDue = dr["Total Due Amount in Rs"].ToString();
                            Getapproval.IssuedCrates = dr["Crates Issued"].ToString();
                            Getapproval.ReturnCrates = dr["Crates Return"].ToString();
                            Getapproval.IssuedCans = dr["Cans Issued"].ToString();
                            Getapproval.ReturnCans = dr["Cans Return"].ToString();
                            approvalplanList.Add(Getapproval);
                        }
                    }
                }
                string response = GetJson(approvalplanList);
                context.Response.Write(response);
            }
        }
        catch (Exception ex)
        {
            if (ex.Message == "Object reference not set to an instance of an object.")
            {
                context.Response.ContentType = MediaTypeNames.Text.Plain;
                context.Response.StatusCode = 400;
                context.Response.Write("Session Expired");
            }
            else
            {
                context.Response.ContentType = MediaTypeNames.Text.Plain;
                context.Response.StatusCode = 300;
                context.Response.Write(ex.Message);
            }

        }
    }
    private void GetDispatchPlanningStatus(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            DataTable dtTotalDispatches = new DataTable();
            string Username = context.Session["userdata_sno"].ToString();
            List<Route> brnch = new List<Route>();
            List<Dispatchplan> DispatchplanList = new List<Dispatchplan>();
            cmd = new MySqlCommand("select sno,DispName from dispatch where Branch_Id=@branchid and flag<>0 order by sno");
            cmd.Parameters.AddWithValue("@branchid", context.Session["branch"].ToString());
            DataTable dtDispatches = vdbmngr.SelectQuery(cmd).Tables[0];
            dtTotalDispatches.Columns.Add("sno");
            dtTotalDispatches.Columns.Add("DispName");
            dtTotalDispatches.Columns.Add("DispTime");
            dtTotalDispatches.Columns.Add("PlanStatus");
            dtTotalDispatches.Columns.Add("Plantime");
            dtTotalDispatches.Columns.Add("DespatchStatus");
            dtTotalDispatches.Columns.Add("EndStatus");
            dtTotalDispatches.Columns.Add("EndTime");
            dtTotalDispatches.Columns.Add("tripid");
            foreach (DataRow dr in dtDispatches.Rows)
            {
                DataRow newrow = dtTotalDispatches.NewRow();
                newrow["sno"] = dr["sno"].ToString();
                newrow["DispName"] = dr["DispName"].ToString();
                newrow["Plantime"] = "";
                newrow["DispTime"] = "";
                newrow["PlanStatus"] = "";
                newrow["DespatchStatus"] = "";
                newrow["EndStatus"] = "";
                newrow["EndTime"] = "";
                newrow["tripid"] = "";
                dtTotalDispatches.Rows.Add(newrow);
            }
            string DispDate = context.Request["IndentDate"];
            DateTime ServerDateCurrentdate = Convert.ToDateTime(DispDate);
            cmd = new MySqlCommand("SELECT dispatch.DispName, dispatch.sno,tripdata.sno as tripid, tripdata.PlanStatus AS PlanStatus,tripdata.Plantime,tripdata.DispTime,tripdata.status as EndStatus,tripdata.Cdate , tripdata.AssignDate, tripdata.DespatchStatus FROM  tripdata INNER JOIN triproutes ON tripdata.Sno = triproutes.Tripdata_sno RIGHT OUTER JOIN dispatch ON triproutes.RouteID = dispatch.sno WHERE  (dispatch.flag <> 0) AND  (dispatch.Branch_Id = @branchid) AND (tripdata.AssignDate BETWEEN @d1 AND @d2) GROUP BY dispatch.DispName order by dispatch.sno");
            cmd.Parameters.AddWithValue("@branchid", context.Session["branch"].ToString());
            cmd.Parameters.AddWithValue("@d1", GetLowDate(ServerDateCurrentdate));
            cmd.Parameters.AddWithValue("@d2", GetHighDate(ServerDateCurrentdate));
            DataTable dtAssignDisp = vdbmngr.SelectQuery(cmd).Tables[0];
            foreach (DataRow drtotal in dtTotalDispatches.Rows)
            {
                foreach (DataRow dr in dtAssignDisp.Rows)
                {
                    if (drtotal["sno"].ToString() == dr["sno"].ToString())
                    {
                        drtotal["Plantime"] = dr["Plantime"].ToString();
                        drtotal["PlanStatus"] = dr["PlanStatus"].ToString();
                        drtotal["DespatchStatus"] = dr["DespatchStatus"].ToString();
                        drtotal["DispTime"] = dr["DispTime"].ToString();
                        drtotal["EndStatus"] = dr["EndStatus"].ToString();
                        drtotal["EndTime"] = dr["Cdate"].ToString();
                        drtotal["tripid"] = dr["tripid"].ToString();
                    }
                }
            }
            if (dtTotalDispatches.Rows.Count > 0)
            {
                int i = 1;
                foreach (DataRow dr in dtTotalDispatches.Rows)
                {
                    Dispatchplan GetDispatch = new Dispatchplan();
                    GetDispatch.Sno = i++.ToString();
                    GetDispatch.Route_id = dr["Sno"].ToString();
                    GetDispatch.RouteName = dr["DispName"].ToString();
                    GetDispatch.tripid = dr["tripid"].ToString();
                    string DOE = dr["DispTime"].ToString();
                    if (DOE != "")
                    {
                        GetDispatch.DespTime = DOE;
                    }
                    else
                    {
                        string ChangedTime = "";
                        GetDispatch.DespTime = ChangedTime;
                    }
                    string Plantime = dr["Plantime"].ToString();
                    if (DOE != "")
                    {
                        GetDispatch.PlanTime = Plantime;
                    }
                    else
                    {
                        string CTime = "";
                        GetDispatch.PlanTime = CTime;
                    }
                    string PlanStatus = dr["PlanStatus"].ToString();
                    if (PlanStatus == "")
                    {
                        PlanStatus = "Plan";
                    }
                    if (PlanStatus == "A")
                    {
                        PlanStatus = "Planned";
                    }
                    if (PlanStatus == "P")
                    {
                        PlanStatus = "Planned";
                    }
                    if (PlanStatus == "V")
                    {
                        PlanStatus = "Planned";
                    }
                    GetDispatch.PlantStatus = PlanStatus;
                    string EndStatus = dr["EndStatus"].ToString();
                    if (EndStatus == "A")
                    {
                        EndStatus = "Assign";
                    }
                    if (EndStatus == "P")
                    {
                        EndStatus = "Pending";
                    }
                    if (EndStatus == "V")
                    {
                        EndStatus = "Verified";
                    }
                    GetDispatch.EndStatus = EndStatus;
                    string EndTime = dr["EndTime"].ToString();
                    if (EndTime != "")
                    {
                        GetDispatch.EndTime = EndTime;
                    }
                    else
                    {
                        GetDispatch.EndTime = EndTime;
                    }
                    string DespatchStatus = dr["DespatchStatus"].ToString();
                    if (DespatchStatus == "")
                    {
                        DespatchStatus = "No";
                    }
                    GetDispatch.DespStatus = DespatchStatus;
                    DispatchplanList.Add(GetDispatch);
                }
                string response = GetJson(DispatchplanList);
                context.Response.Write(response);
            }
        }
        catch (Exception ex)
        {
            if (ex.Message == "Object reference not set to an instance of an object.")
            {
                context.Response.ContentType = MediaTypeNames.Text.Plain;
                context.Response.StatusCode = 400;
                context.Response.Write("Session Expired");
                // context.Response.Redirect("Login.aspx", false);
            }
            else
            {
                context.Response.ContentType = MediaTypeNames.Text.Plain;
                context.Response.StatusCode = 300;
                context.Response.Write(ex.Message);
            }
        }
    }
    private void GetEmployeenames(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            string RouteID = context.Request["RouteID"];
            cmd = new MySqlCommand("SELECT empmanage.EmpName, empmanage.Sno, empmanage.Mobno, empmanage.UserName FROM branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN empmanage ON branchdata.sno = empmanage.Branch WHERE (branchdata_1.SalesOfficeID = @SOID) AND (branchdata.SalesType IS NOT NULL) AND (empmanage.flag <> 0) AND (empmanage.LevelType = 'Opperations') OR (branchdata.SalesType IS NOT NULL) AND (branchdata.sno = @BranchID) AND (empmanage.flag <> 0) AND (empmanage.LevelType = 'Opperations') ORDER BY empmanage.UserName");
            cmd.Parameters.AddWithValue("@BranchID", context.Session["branch"].ToString());
            cmd.Parameters.AddWithValue("@SOID", context.Session["branch"].ToString());
            DataTable dtBranch = vdbmngr.SelectQuery(cmd).Tables[0];
            List<SoClass> Agentslist = new List<SoClass>();
            foreach (DataRow dr in dtBranch.Rows)
            {
                SoClass getAgent = new SoClass();
                getAgent.Sno = dr["Sno"].ToString();
                getAgent.BranchName = dr["UserName"].ToString();
                getAgent.mobile = dr["Mobno"].ToString();
                Agentslist.Add(getAgent);
            }
            string response = GetJson(Agentslist);
            context.Response.Write(response);
        }
        catch
        {
        }
    }
    private void GetAgents(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            string RouteID = context.Request["RouteID"];
            cmd = new MySqlCommand("SELECT branchdata.sno, branchdata.BranchName,branchroutes.Sno FROM branchroutesubtable INNER JOIN branchroutes ON branchroutesubtable.RefNo = branchroutes.Sno INNER JOIN branchdata ON branchroutesubtable.BranchID = branchdata.sno WHERE (branchroutes.Sno = @RouteID) AND branchdata.flag=@flag");
            cmd.Parameters.AddWithValue("@RouteID", RouteID);
            cmd.Parameters.AddWithValue("@flag", "1");
            DataTable dtBranch = vdbmngr.SelectQuery(cmd).Tables[0];
            List<SoClass> Agentslist = new List<SoClass>();
            foreach (DataRow dr in dtBranch.Rows)
            {
                SoClass getAgent = new SoClass();
                getAgent.Sno = dr["sno"].ToString();
                getAgent.BranchName = dr["BranchName"].ToString();
                getAgent.routeid = dr["Sno"].ToString();
                Agentslist.Add(getAgent);
            }
            string response = GetJson(Agentslist);
            context.Response.Write(response);
        }
        catch
        {
        }
    }
    private void GetVehicleNos(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            cmd = new MySqlCommand("Select VehicleNo,Capacity,sno from VehicleMaster");
            // cmd.Parameters.AddWithValue("@BranchID", context.Session["branch"].ToString());
            DataTable dtVehicle = vdbmngr.SelectQuery(cmd).Tables[0];
            List<VehicleClass> Vehiclelist = new List<VehicleClass>();
            foreach (DataRow dr in dtVehicle.Rows)
            {
                VehicleClass getVehicles = new VehicleClass();
                getVehicles.VehicleNo = dr["VehicleNo"].ToString();
                getVehicles.Capacity = dr["Capacity"].ToString();
                getVehicles.sno = dr["sno"].ToString();
                Vehiclelist.Add(getVehicles);
            }
            string response = GetJson(Vehiclelist);
            context.Response.Write(response);
        }
        catch
        {
        }
    }
    public class VehicleClass
    {
        public string VehicleNo { get; set; }
        public string Capacity { get; set; }
        public string sno { get; set; }
    }
    private void SaveVehicleMasterClick(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            string VehicleNo = context.Request["VehicleNo"];
            string Capacity = context.Request["Capacity"];
            string sno = context.Request["sno"];
            string btnval = context.Request["btnval"];
            if (btnval == "SAVE")
            {
                cmd = new MySqlCommand("Insert Into VehicleMaster (VehicleNo,Capacity,BranchID) values(@VehicleNo,@Capacity,@BranchID)");
                cmd.Parameters.AddWithValue("@VehicleNo", VehicleNo);
                cmd.Parameters.AddWithValue("@Capacity", Capacity);
                cmd.Parameters.AddWithValue("@BranchID", context.Session["branch"].ToString());
                vdbmngr.insert(cmd);
                string Msg = "Vehile saved Successfully";
                string response = GetJson(Msg);
                context.Response.Write(response);
            }
            else
            {
                cmd = new MySqlCommand("Update VehicleMaster set Capacity=@Capacity,VehicleNo=@VehicleNo where sno=@sno");
                cmd.Parameters.AddWithValue("@VehicleNo", VehicleNo);
                cmd.Parameters.AddWithValue("@Capacity", Capacity);
                cmd.Parameters.AddWithValue("@sno", sno);
                vdbmngr.Update(cmd);
                string Msg = "Vehile Updated Successfully";
                string response = GetJson(Msg);
                context.Response.Write(response);
            }
        }
        catch (Exception ex)
        {
            string Msg = ex.Message;
            string response = GetJson(Msg);
            context.Response.Write(response);
        }
    }
    private void GetDispatchValues(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            string DispSno = context.Request["DispSno"];
            string IndentDate = context.Request["IndentDate"];
            DateTime dtIndentDate = Convert.ToDateTime(IndentDate);
            string DispatchStatus = context.Request["DispatchStatus"];
            cmd = new MySqlCommand("SELECT DispName, DispType, BranchID, Dispdate, sno FROM  dispatch WHERE (sno = @DispSno) GROUP BY DispName");
            cmd.Parameters.AddWithValue("@DispSno", DispSno);
            DataTable dtDispatch = vdbmngr.SelectQuery(cmd).Tables[0];
            context.Session["DispName"] = dtDispatch.Rows[0]["DispName"].ToString();
            context.Session["DispType"] = dtDispatch.Rows[0]["DispType"].ToString();
            context.Session["DispSno"] = DispSno;
            context.Session["DispatchStatus"] = DispatchStatus;
            string branchid = dtDispatch.Rows[0]["BranchID"].ToString();
            context.Session["SOBranchId"] = dtDispatch.Rows[0]["BranchID"].ToString();
            context.Session["DispatchDate"] = dtDispatch.Rows[0]["Dispdate"].ToString();
            context.Session["VehicleNo"] = "";
            context.Session["IndentDate"] = dtIndentDate.ToString();
            if (branchid == "306")
            {
                cmd = new MySqlCommand("SELECT tripdata.Sno FROM tripdata INNER JOIN triproutes ON tripdata.Sno = triproutes.Tripdata_sno WHERE (tripdata.I_Date BETWEEN @d1 AND @d2) AND (triproutes.RouteID = @dispid)");
                cmd.Parameters.AddWithValue("@d1", GetLowDate(dtIndentDate).AddDays(-1));
                cmd.Parameters.AddWithValue("@d2", GetHighDate(dtIndentDate).AddDays(-1));
                cmd.Parameters.AddWithValue("@dispid", DispSno);
            }
            else
            {
                cmd = new MySqlCommand("SELECT tripdata.Sno FROM tripdata INNER JOIN triproutes ON tripdata.Sno = triproutes.Tripdata_sno WHERE (tripdata.I_Date BETWEEN @d1 AND @d2) AND (triproutes.RouteID = @dispid)");
                cmd.Parameters.AddWithValue("@d1", GetLowDate(dtIndentDate));
                cmd.Parameters.AddWithValue("@d2", GetHighDate(dtIndentDate));
                cmd.Parameters.AddWithValue("@dispid", DispSno);
            }
            DataTable dttripid = vdbmngr.SelectQuery(cmd).Tables[0];
            if (dttripid.Rows.Count > 0)
            {
                context.Session["tripid"] = dttripid.Rows[0]["Sno"].ToString();
            }
            else
            {
                context.Session["tripid"] = "";
            }
            string Msg = "Success";
            string errresponse = GetJson(Msg);
            context.Response.Write(errresponse);
        }
        catch
        {
        }
    }
    private void GetTripDispPlanDetails(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            List<tripDespdetail> tripDespdetailList = new List<tripDespdetail>();
            tripDespdetail GettripDesp = new tripDespdetail();
            GettripDesp.DispSno = context.Session["DispSno"].ToString();
            GettripDesp.DispName = context.Session["DispName"].ToString();
            GettripDesp.DispType = context.Session["DispType"].ToString();
            GettripDesp.DispatchStatus = context.Session["DispatchStatus"].ToString();
            GettripDesp.SOBranchId = context.Session["SOBranchId"].ToString();
            GettripDesp.DispatchDate = context.Session["DispatchDate"].ToString();
            GettripDesp.VehicleNo = context.Session["VehicleNo"].ToString();
            GettripDesp.tripid = context.Session["tripid"].ToString();
            tripDespdetailList.Add(GettripDesp);
            string response = GetJson(tripDespdetailList);
            context.Response.Write(response);
        }
        catch
        {
        }
    }
    public class tripDespdetail
    {
        public string DispName { get; set; }
        public string DispType { get; set; }
        public string DispSno { get; set; }
        public string DispatchStatus { get; set; }
        public string SOBranchId { get; set; }
        public string DispatchDate { get; set; }
        public string VehicleNo { get; set; }
        public string tripid { get; set; }
    }
    private void GetSalesOfficeEmployee(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            string DispSno = context.Request["DispSno"];
            string DispType = context.Request["DispType"];
            DataTable dtEmploye = new DataTable();
            if (DispType == "SO")
            {
                cmd = new MySqlCommand("SELECT empmanage.Sno, empmanage.UserName FROM empmanage INNER JOIN dispatch ON empmanage.Branch = dispatch.BranchID WHERE (dispatch.sno = @DispSno) AND (empmanage.LevelType = 'Dispatcher')");
                cmd.Parameters.AddWithValue("@DispSno", DispSno);
                dtEmploye = vdbmngr.SelectQuery(cmd).Tables[0];
            }
            else if (DispType == "SM")
            {
                cmd = new MySqlCommand("SELECT Sno, UserName FROM empmanage WHERE (Branch = @BranchID) AND (LevelType = 'Opperations')");
                cmd.Parameters.AddWithValue("@BranchID", context.Session["branch"]);
                dtEmploye = vdbmngr.SelectQuery(cmd).Tables[0];
            }
            else
            {
                cmd = new MySqlCommand("SELECT empmanage.Sno, empmanage.UserName FROM empmanage INNER JOIN dispatch ON empmanage.Branch = dispatch.BranchID WHERE (dispatch.sno = @DispSno) AND (empmanage.LevelType = 'Opperations')");
                cmd.Parameters.AddWithValue("@DispSno", DispSno);
                dtEmploye = vdbmngr.SelectQuery(cmd).Tables[0];
            }
            List<PlantEmployee> Employeelist = new List<PlantEmployee>();
            if (dtEmploye.Rows.Count > 0)
            {
                foreach (DataRow dr in dtEmploye.Rows)
                {
                    PlantEmployee GetEmployee = new PlantEmployee();
                    GetEmployee.Employee_id = dr["Sno"].ToString();
                    GetEmployee.EmployeeName = dr["UserName"].ToString();
                    Employeelist.Add(GetEmployee);
                }
            }
            string errresponse = GetJson(Employeelist);
            context.Response.Write(errresponse);
        }
        catch
        {
        }
    }
    private void GetSalesOffice(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            string SalesType = context.Session["salestype"].ToString();
            List<SoClass> Solist = new List<SoClass>();
            if (SalesType == "Plant")
            {
                cmd = new MySqlCommand("SELECT branchdata.sno, branchdata.BranchName,branchdata.Address FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno where  (branchmappingtable.SuperBranch=@BranchID) AND (branchdata.SALESTYPE=@st) AND (branchdata.flag=@flag)");
                cmd.Parameters.AddWithValue("@st", "21");
                cmd.Parameters.AddWithValue("@BranchId", context.Session["branch"].ToString());
                cmd.Parameters.AddWithValue("@flag", "1");

                DataTable dtBranch = vdbmngr.SelectQuery(cmd).Tables[0];
                foreach (DataRow dr in dtBranch.Rows)
                {
                    SoClass GetSoClass = new SoClass();
                    GetSoClass.Sno = dr["sno"].ToString();
                    GetSoClass.BranchName = dr["BranchName"].ToString();
                    GetSoClass.Address = dr["Address"].ToString();
                    Solist.Add(GetSoClass);
                }
                cmd = new MySqlCommand("SELECT BranchName,sno,Address FROM  branchdata WHERE (sno = @BranchID)");
                cmd.Parameters.AddWithValue("@BranchID", context.Session["branch"].ToString());
                DataTable dtPlant = vdbmngr.SelectQuery(cmd).Tables[0];
                foreach (DataRow dr in dtPlant.Rows)
                {
                    SoClass GetSoClass = new SoClass();
                    GetSoClass.Sno = dr["sno"].ToString();
                    GetSoClass.BranchName = dr["BranchName"].ToString();
                    GetSoClass.Address = dr["Address"].ToString();
                    Solist.Add(GetSoClass);
                }
                cmd = new MySqlCommand("SELECT branchdata.BranchName, branchdata.sno,branchdata.Address FROM branchdata INNER JOIN branchmappingtable ON branchdata.sno = branchmappingtable.SubBranch WHERE (branchmappingtable.SuperBranch = @SuperBranch) and (branchdata.SalesType=@SalesType)  ");
                cmd.Parameters.AddWithValue("@SuperBranch", context.Session["branch"].ToString());
                cmd.Parameters.AddWithValue("@SalesType", "23");
                DataTable dtNewPlant = vdbmngr.SelectQuery(cmd).Tables[0];
                foreach (DataRow dr in dtNewPlant.Rows)
                {
                    SoClass GetSoClass = new SoClass();
                    GetSoClass.Sno = dr["sno"].ToString();
                    GetSoClass.BranchName = dr["BranchName"].ToString();
                    GetSoClass.Address = dr["Address"].ToString();
                    Solist.Add(GetSoClass);
                }

                string errresponse = GetJson(Solist);
                context.Response.Write(errresponse);
            }

            else
            {
                cmd = new MySqlCommand("SELECT BranchName, sno FROM  branchdata WHERE (sno = @BranchID)");
                cmd.Parameters.AddWithValue("@BranchID", context.Session["branch"].ToString());
                DataTable dtPlant = vdbmngr.SelectQuery(cmd).Tables[0];
                foreach (DataRow dr in dtPlant.Rows)
                {
                    SoClass GetSoClass = new SoClass();
                    GetSoClass.Sno = dr["sno"].ToString();
                    GetSoClass.BranchName = dr["BranchName"].ToString();
                    Solist.Add(GetSoClass);
                }
                string errresponse = GetJson(Solist);
                context.Response.Write(errresponse);
            }
        }
        catch
        {
        }
    }
    public class branhcls
    {
        public string BranchName { get; set; }
        public string latitude { get; set; }
        public string longitude { get; set; }
        public string dispname { get; set; }
        public string routecolor { get; set; }
    }
    public class SoClass
    {
        public string BranchName { get; set; }
        public string Sno { get; set; }
        public string Salestype { get; set; }
        public string color { get; set; }
        public string ExpencePeriod { get; set; }
        public string mobile { get; set; }
        public string Address { get; set; }
        public string routeid { get; set; }
    }
    private void Getrouteleaksreturns(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            DateTime FromDate = DateTime.Now;
            //string StartDate = context.Request["startDate"];

            string s = context.Request["startDate"];
            var dt = DateTime.ParseExact(s, "ddd MMM dd yyyy HH:mm:ss 'GMT'zzz", System.Globalization.CultureInfo.InvariantCulture);
            string StartDate = dt.ToString("yyyy-MM-dd");
            DateTime ServerDateCurrentdate = VehicleDBMgr.GetTime(vdbmngr.conn);
            if (StartDate == "")
            {
                StartDate = ServerDateCurrentdate.ToString();
            }
            DateTime fmdate = Convert.ToDateTime(StartDate);
            string time = fmdate.ToString("dd-MM-yyyy HH:mm");
            string[] fromdatestrig = time.Split(' ');
            if (fromdatestrig.Length > 1)
            {
                if (fromdatestrig[0].Split('-').Length > 0)
                {
                    string[] dates = fromdatestrig[0].Split('-');
                    string[] times = fromdatestrig[1].Split(':');
                    FromDate = new DateTime(int.Parse(dates[2]), int.Parse(dates[1]), int.Parse(dates[0]), int.Parse(times[0]), int.Parse(times[1]), 0);
                }
            }
            DataTable dtTotalDispatches = new DataTable();
            string Status = context.Request["Status"];
            string BranchID = "";
            if (Status == "GraphicalNetSale")
            {
                BranchID = context.Request["ddlSalesOffice"];
            }
            else
            {
                BranchID = context.Request["ddlSalesOffice"];
            }
            cmd = new MySqlCommand("select sno,DispName from dispatch where Branch_Id=@branchid and flag=@flag order by sno");
            cmd.Parameters.AddWithValue("@branchid", BranchID);
            cmd.Parameters.AddWithValue("@flag", "1");
            DataTable dtDispatches = vdbmngr.SelectQuery(cmd).Tables[0];
            dtTotalDispatches.Columns.Add("sno");
            dtTotalDispatches.Columns.Add("DispName");
            dtTotalDispatches.Columns.Add("Total Indent");
            dtTotalDispatches.Columns.Add("Total Dispatch");
            dtTotalDispatches.Columns.Add("Total Sale");
            dtTotalDispatches.Columns.Add("Total Leaks");
            dtTotalDispatches.Columns.Add("Total Returns");
            dtTotalDispatches.Columns.Add("Total Short");
            dtTotalDispatches.Columns.Add("Total Free");
            List<barvalues> lbarValueslist = new List<barvalues>();
            List<string> RouteList = new List<string>();
            List<string> totaldispatch = new List<string>();
            List<string> totalsale = new List<string>();
            List<string> totalleak = new List<string>();
            List<string> totalreturn = new List<string>();
            List<string> totalshort = new List<string>();
            List<string> totalfree = new List<string>();
            foreach (DataRow dr in dtDispatches.Rows)
            {
                DataRow newrow = dtTotalDispatches.NewRow();
                newrow["sno"] = dr["sno"].ToString();
                newrow["DispName"] = dr["DispName"].ToString();
                newrow["Total Indent"] = "0";
                newrow["Total Dispatch"] = "0";
                newrow["Total Sale"] = "0";
                newrow["Total Leaks"] = "0";
                newrow["Total Returns"] = "0";
                newrow["Total Short"] = "0";
                newrow["Total Free"] = "0";
                dtTotalDispatches.Rows.Add(newrow);
                RouteList.Add(dr["DispName"].ToString());
            }

            cmd = new MySqlCommand("SELECT tripinfo.sno AS Tripsno, tripinfo.DispName, tripinfo.Branch_Id, SUM(ff.Qty) AS disqty, tripinfo.sno FROM (SELECT dispatch.sno, dispatch.DispName, dispatch.Branch_Id, triproutes.Tripdata_sno FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID WHERE (dispatch.Branch_Id = @branchid) OR (branchdata.SalesOfficeID = @branchid)) tripinfo INNER JOIN (SELECT Sno, Qty FROM (SELECT tripdata.Sno, tripsubdata.Qty FROM tripdata INNER JOIN tripsubdata ON tripdata.Sno = tripsubdata.Tripdata_sno WHERE (tripdata.I_Date BETWEEN @d1 AND @d2)) leaks) ff ON ff.Sno = tripinfo.Tripdata_sno GROUP BY tripinfo.DispName");
            string SalesType = context.Session["salestype"].ToString();
            if (SalesType == "Plant")
            {
                string ddlSalesOffice = context.Request["ddlSalesOffice"];
                cmd.Parameters.AddWithValue("@BranchId", BranchID);
            }
            else
            {
                cmd.Parameters.AddWithValue("@BranchId", BranchID);
            }
            cmd.Parameters.AddWithValue("@d1", CargoManagementSystem.DateConverter.GetLowDate(FromDate.AddDays(-1)));
            cmd.Parameters.AddWithValue("@d2", CargoManagementSystem.DateConverter.GetHighDate(FromDate.AddDays(-1)));
            DataTable dttotdispatch = vdbmngr.SelectQuery(cmd).Tables[0];
            cmd = new MySqlCommand("SELECT ff.Branch_id,tripinfo.sno, tripinfo.DispName, tripinfo.Branch_Id AS Expr1, SUM(ff.unitQty) AS unitqty, SUM(ff.DeliveryQty) AS DeliveryQty, SUM(ff.DeliveryQty * ff.UnitCost) AS salevalue FROM (SELECT dispatch.sno, dispatch.DispName, dispatch.Branch_Id, dispatch_sub.Route_id, branchroutesubtable.BranchID FROM branchroutesubtable INNER JOIN dispatch_sub ON branchroutesubtable.RefNo = dispatch_sub.Route_id RIGHT OUTER JOIN dispatch ON dispatch_sub.dispatch_sno = dispatch.sno WHERE (dispatch.Branch_Id = @branchid)) tripinfo INNER JOIN (SELECT        unitQty, DeliveryQty, UnitCost, Branch_id FROM  (SELECT indents_subtable.unitQty, indents_subtable.DeliveryQty, indents_subtable.UnitCost, indents.Branch_id FROM indents_subtable INNER JOIN indents ON indents_subtable.IndentNo = indents.IndentNo WHERE (indents.I_date BETWEEN @d1 AND @d2)) leaks) ff ON ff.Branch_id = tripinfo.BranchID GROUP BY tripinfo.DispName");
            cmd.Parameters.AddWithValue("@branchid", BranchID);
            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate.AddDays(-1)));
            cmd.Parameters.AddWithValue("@d2", GetHighDate(FromDate.AddDays(-1)));
            DataTable dt_indent_sale = vdbmngr.SelectQuery(cmd).Tables[0];
            cmd = new MySqlCommand("SELECT ff.TripID, tripinfo.sno,tripinfo.DispName, tripinfo.Branch_Id, tripinfo.Tripdata_sno, SUM(ff.ReturnQty) AS returnqty, SUM(ff.FreeMilk) AS free, SUM(ff.ShortQty) AS short, SUM(ff.TotalLeaks) AS leaks FROM (SELECT dispatch.sno, dispatch.DispName, dispatch.Branch_Id, triproutes.Tripdata_sno FROM  branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID WHERE (dispatch.Branch_Id = @branchid) OR (branchdata.SalesOfficeID = @branchid)) tripinfo INNER JOIN (SELECT ReturnQty, FreeMilk, ShortQty, TotalLeaks, TripID FROM (SELECT leakages_1.ReturnQty, leakages_1.FreeMilk, leakages_1.ShortQty, leakages_1.TotalLeaks, leakages_1.TripID FROM tripdata INNER JOIN leakages leakages_1 ON tripdata.Sno = leakages_1.TripID WHERE (tripdata.I_Date BETWEEN @d1 AND @d2)) leakages) ff ON ff.TripID = tripinfo.Tripdata_sno GROUP BY tripinfo.DispName");
            cmd.Parameters.AddWithValue("@branchid", BranchID);
            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate.AddDays(-1)));
            cmd.Parameters.AddWithValue("@d2", GetHighDate(FromDate.AddDays(-1)));
            DataTable dt_leaks = vdbmngr.SelectQuery(cmd).Tables[0];
            foreach (DataRow drtotal in dtTotalDispatches.Rows)
            {
                foreach (DataRow dr in dt_indent_sale.Rows)
                {
                    if (drtotal["sno"].ToString() == dr["sno"].ToString())
                    {
                        float saleqty = 0;
                        float.TryParse(dr["DeliveryQty"].ToString(), out saleqty);
                        drtotal["Total Sale"] = Math.Round(saleqty, 2);
                        totalsale.Add(saleqty.ToString());
                    }
                }
            }
            foreach (DataRow drtotal in dtTotalDispatches.Rows)
            {
                foreach (DataRow dr in dttotdispatch.Rows)
                {
                    if (drtotal["sno"].ToString() == dr["sno"].ToString())
                    {
                        float disqty = 0;
                        float.TryParse(dr["disqty"].ToString(), out disqty);
                        drtotal["Total Dispatch"] = Math.Round(disqty, 2);
                        totaldispatch.Add(disqty.ToString());
                    }
                }
            }
            foreach (DataRow drtotal in dtTotalDispatches.Rows)
            {
                foreach (DataRow dr in dt_leaks.Rows)
                {
                    if (drtotal["sno"].ToString() == dr["sno"].ToString())
                    {
                        float leaks = 0;
                        float returnqty = 0;
                        float shortqty = 0;
                        float free = 0;
                        float.TryParse(dr["leaks"].ToString(), out leaks);
                        float.TryParse(dr["returnqty"].ToString(), out returnqty);
                        float.TryParse(dr["short"].ToString(), out shortqty);
                        float.TryParse(dr["free"].ToString(), out free);
                        drtotal["Total Leaks"] = Math.Round(leaks, 2);
                        drtotal["Total Returns"] = Math.Round(returnqty, 2);
                        drtotal["Total Short"] = Math.Round(shortqty, 2);
                        drtotal["Total Free"] = Math.Round(free, 2);
                        totalleak.Add(leaks.ToString());
                        totalreturn.Add(returnqty.ToString());
                        totalshort.Add(shortqty.ToString());
                        totalfree.Add(free.ToString());
                    }
                }
            }
            barvalues GetbarValues = new barvalues();
            GetbarValues.RouteName = RouteList;
            GetbarValues.totaldispatch = totaldispatch;
            GetbarValues.totalsale = totalsale;
            GetbarValues.totalleak = totalleak;
            GetbarValues.totalreturn = totalreturn;
            GetbarValues.totalshort = totalshort;
            GetbarValues.totalfree = totalfree;
            lbarValueslist.Add(GetbarValues);
            string errresponse = GetJson(lbarValueslist);
            context.Response.Write(errresponse);
        }
        catch
        {
        }
    }
    private void GetPieChartValues(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            DateTime FromDate = DateTime.Now;
            string StartDate = context.Request["startDate"];
            DateTime fmdate = Convert.ToDateTime(StartDate);
            string time = fmdate.ToString("dd-MM-yyyy HH:mm");
            string[] fromdatestrig = time.Split(' ');
            if (fromdatestrig.Length > 1)
            {
                if (fromdatestrig[0].Split('-').Length > 0)
                {
                    string[] dates = fromdatestrig[0].Split('-');
                    string[] times = fromdatestrig[1].Split(':');
                    FromDate = new DateTime(int.Parse(dates[2]), int.Parse(dates[1]), int.Parse(dates[0]), int.Parse(times[0]), int.Parse(times[1]), 0);
                }
            }
            string ddlType = context.Request["ddlType"];
            List<PieValues> lPieValueslist = new List<PieValues>();
            List<string> RouteList = new List<string>();
            List<string> AmountList = new List<string>();
            if (ddlType == "Amount Wise")
            {
                cmd = new MySqlCommand("SELECT ROUND(SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost), 2) AS Amount, dispatch.DispName FROM dispatch INNER JOIN dispatch_sub ON dispatch.sno = dispatch_sub.dispatch_sno INNER JOIN branchroutes ON dispatch_sub.Route_id = branchroutes.Sno INNER JOIN branchroutesubtable ON branchroutes.Sno = branchroutesubtable.RefNo INNER JOIN indents ON branchroutesubtable.BranchID = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo WHERE (dispatch.Branch_Id = @BranchId) AND (indents.I_date BETWEEN @d1 AND @d2) GROUP BY dispatch.DispName");
                string SalesType = context.Session["salestype"].ToString();
                if (SalesType == "Plant")
                {
                    string ddlSalesOffice = context.Request["ddlSalesOffice"];
                    cmd.Parameters.AddWithValue("@BranchId", ddlSalesOffice);
                }
                else
                {
                    cmd.Parameters.AddWithValue("@BranchId", context.Session["branch"].ToString());
                }
                cmd.Parameters.AddWithValue("@d1", CargoManagementSystem.DateConverter.GetLowDate(FromDate.AddDays(-1)));
                cmd.Parameters.AddWithValue("@d2", CargoManagementSystem.DateConverter.GetHighDate(FromDate.AddDays(-1)));
                DataTable dtpie = vdbmngr.SelectQuery(cmd).Tables[0];
                foreach (DataRow dr in dtpie.Rows)
                {
                    RouteList.Add(dr["DispName"].ToString());
                    string Amount = dr["Amount"].ToString();
                    if (Amount == "")
                    {
                        Amount = "0";
                    }
                    AmountList.Add(Amount);
                }
            }
            else
            {
                cmd = new MySqlCommand("SELECT ROUND(SUM(tripsubdata.Qty), 2) AS Qty,products_subcategory.sno as subcatSno, products_subcategory.SubCatName, products_category.Categoryname, products_category.sno AS categorysno, products_subcategory.sno FROM dispatch INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN (SELECT Sno, AssignDate, Status FROM tripdata WHERE (AssignDate BETWEEN @d1 AND @d2) AND (Status <> 'C')) tripdat ON triproutes.Tripdata_sno = tripdat.Sno INNER JOIN tripsubdata ON tripdat.Sno = tripsubdata.Tripdata_sno INNER JOIN productsdata ON tripsubdata.ProductId = productsdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno WHERE (dispatch.Branch_Id = @branch) GROUP BY categorysno, products_subcategory.sno ORDER BY categorysno");
                cmd.Parameters.AddWithValue("@d1", CargoManagementSystem.DateConverter.GetLowDate(FromDate.AddDays(-1)));
                cmd.Parameters.AddWithValue("@d2", CargoManagementSystem.DateConverter.GetHighDate(FromDate.AddDays(-1)));
                if (ddlType == "Sales Office Wise Products")
                {
                    string ddlSalesOffice = context.Request["ddlSalesOffice"];
                    cmd.Parameters.AddWithValue("@branch", ddlSalesOffice);
                }
                else
                {
                    cmd.Parameters.AddWithValue("@branch", context.Session["branch"]);
                }
                DataTable dtpie = vdbmngr.SelectQuery(cmd).Tables[0];
                foreach (DataRow dr in dtpie.Rows)
                {
                    RouteList.Add(dr["SubCatName"].ToString());
                    string Amount = dr["Qty"].ToString();
                    if (Amount == "")
                    {
                        Amount = "0";
                    }
                    AmountList.Add(Amount);
                }
            }
            PieValues GetPieValues = new PieValues();
            GetPieValues.RouteName = RouteList;
            GetPieValues.Amount = AmountList;
            lPieValueslist.Add(GetPieValues);
            string errresponse = GetJson(lPieValueslist);
            context.Response.Write(errresponse);
        }
        catch
        {
        }
    }
    private void Getroutewiseleaks(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            DateTime FromDate = DateTime.Now;
            string s = context.Request["startDate"];
            var dt = DateTime.ParseExact(s, "ddd MMM dd yyyy HH:mm:ss 'GMT'zzz", System.Globalization.CultureInfo.InvariantCulture);
            string StartDate = dt.ToString("yyyy-MM-dd");
            DateTime ServerDateCurrentdate = VehicleDBMgr.GetTime(vdbmngr.conn);
            if (StartDate == "")
            {
                StartDate = ServerDateCurrentdate.ToString();
            }
            DateTime fmdate = Convert.ToDateTime(StartDate);
            string time = fmdate.ToString("dd-MM-yyyy HH:mm");
            string[] fromdatestrig = time.Split(' ');
            if (fromdatestrig.Length > 1)
            {
                if (fromdatestrig[0].Split('-').Length > 0)
                {
                    string[] dates = fromdatestrig[0].Split('-');
                    string[] times = fromdatestrig[1].Split(':');
                    FromDate = new DateTime(int.Parse(dates[2]), int.Parse(dates[1]), int.Parse(dates[0]), int.Parse(times[0]), int.Parse(times[1]), 0);
                }
            }

            DataTable dtTotalDispatches = new DataTable();
            string Status = context.Request["Status"];
            string BranchID = "";
            if (Status == "GraphicalNetSale")
            {
                BranchID = context.Request["ddlSalesOffice"];
            }
            else
            {
                BranchID = context.Session["branch"].ToString();
            }
            cmd = new MySqlCommand("select sno,DispName from dispatch where Branch_Id=@branchid and flag=@flag order by sno");
            cmd.Parameters.AddWithValue("@branchid", BranchID);
            cmd.Parameters.AddWithValue("@flag", "1");
            DataTable dtDispatches = vdbmngr.SelectQuery(cmd).Tables[0];
            cmd = new MySqlCommand("SELECT tripinfo.sno AS Tripsno, tripinfo.DispName, tripinfo.Branch_Id, SUM(ff.Qty) AS disqty, tripinfo.sno FROM (SELECT dispatch.sno, dispatch.DispName, dispatch.Branch_Id, triproutes.Tripdata_sno FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID WHERE (dispatch.Branch_Id = @branchid) OR (branchdata.SalesOfficeID = @branchid)) tripinfo INNER JOIN (SELECT Sno, Qty FROM (SELECT tripdata.Sno, tripsubdata.Qty FROM tripdata INNER JOIN tripsubdata ON tripdata.Sno = tripsubdata.Tripdata_sno WHERE (tripdata.I_Date BETWEEN @d1 AND @d2)) leaks) ff ON ff.Sno = tripinfo.Tripdata_sno GROUP BY tripinfo.DispName");
            string SalesType = context.Session["salestype"].ToString();
            if (SalesType == "Plant")
            {
                string ddlSalesOffice = context.Request["ddlSalesOffice"];
                cmd.Parameters.AddWithValue("@BranchId", BranchID);
            }
            else
            {
                cmd.Parameters.AddWithValue("@BranchId", BranchID);
            }
            cmd.Parameters.AddWithValue("@d1", CargoManagementSystem.DateConverter.GetLowDate(FromDate.AddDays(-1)));
            cmd.Parameters.AddWithValue("@d2", CargoManagementSystem.DateConverter.GetHighDate(FromDate.AddDays(-1)));
            DataTable dttotdispatch = vdbmngr.SelectQuery(cmd).Tables[0];
            dtTotalDispatches.Columns.Add("sno");
            dtTotalDispatches.Columns.Add("DispName");
            dtTotalDispatches.Columns.Add("Total Leaks");
            List<barvalues> lbarValueslist = new List<barvalues>();
            List<string> RouteList = new List<string>();
            List<string> Routeidlist = new List<string>();
            List<string> totalleak = new List<string>();

            foreach (DataRow dr in dtDispatches.Rows)
            {
                DataRow newrow = dtTotalDispatches.NewRow();
                newrow["sno"] = dr["sno"].ToString();
                newrow["DispName"] = dr["DispName"].ToString();
                newrow["Total Leaks"] = "0";
                dtTotalDispatches.Rows.Add(newrow);
                RouteList.Add(dr["DispName"].ToString());
                Routeidlist.Add(dr["sno"].ToString());
            }

            cmd = new MySqlCommand("SELECT ff.TripID, tripinfo.sno,tripinfo.DispName, tripinfo.Branch_Id, tripinfo.Tripdata_sno, SUM(ff.ReturnQty) AS returnqty, SUM(ff.FreeMilk) AS free, SUM(ff.ShortQty) AS short, SUM(ff.TotalLeaks) AS leaks FROM (SELECT dispatch.sno, dispatch.DispName, dispatch.Branch_Id, triproutes.Tripdata_sno FROM  branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID WHERE (dispatch.Branch_Id = @branchid) OR (branchdata.SalesOfficeID = @branchid)) tripinfo INNER JOIN (SELECT ReturnQty, FreeMilk, ShortQty, TotalLeaks, TripID FROM (SELECT leakages_1.ReturnQty, leakages_1.FreeMilk, leakages_1.ShortQty, leakages_1.TotalLeaks, leakages_1.TripID FROM tripdata INNER JOIN leakages leakages_1 ON tripdata.Sno = leakages_1.TripID WHERE (tripdata.I_Date BETWEEN @d1 AND @d2)) leakages) ff ON ff.TripID = tripinfo.Tripdata_sno GROUP BY tripinfo.DispName");
            cmd.Parameters.AddWithValue("@branchid", BranchID);
            cmd.Parameters.AddWithValue("@flag", "1");
            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate.AddDays(-1)));
            cmd.Parameters.AddWithValue("@d2", GetHighDate(FromDate.AddDays(-1)));
            DataTable dt_leaks = vdbmngr.SelectQuery(cmd).Tables[0];
            float totalleaks = 0;

            foreach (DataRow dr in dt_leaks.Rows)
            {
                float leak = 0;
                float.TryParse(dr["leaks"].ToString(), out leak);
                totalleaks += leak;

            }
            double TotalLeaks = 0;
            string Leaks = "";
            string Routes = "";
            int count = 0;
            foreach (DataRow drtotal in dtTotalDispatches.Rows)
            {
                foreach (DataRow dr in dt_leaks.Rows)
                {
                    if (drtotal["sno"].ToString() == dr["sno"].ToString())
                    {
                        float totdispch = 0;
                        foreach (DataRow drdisp in dttotdispatch.Select("sno='" + dr["sno"].ToString() + "'"))
                        {
                            float.TryParse(drdisp["disqty"].ToString(), out totdispch);
                        }
                        double leaks = 0;
                        double leaksqty = 0;
                        double.TryParse(dr["leaks"].ToString(), out leaks);
                        drtotal["Total Leaks"] = Math.Round(leaks, 2);
                        if (totdispch == 0.0)
                        {
                            totdispch = 1;
                        }
                        leaksqty = (leaks / totdispch) * 100;
                        leaksqty = Math.Round(leaksqty, 2);
                        TotalLeaks += leaksqty;
                        Leaks += leaksqty.ToString() + ",";
                        Routes += dr["DispName"].ToString().ToString() + ",";
                        count++;
                    }
                }
            }
            TotalLeaks = TotalLeaks / count;
            TotalLeaks = Math.Round(TotalLeaks, 2);
            totalleak.Add(Math.Round(TotalLeaks, 2).ToString());
            Leaks = Leaks.Substring(0, Leaks.Length - 1);
            Routes = Routes.Substring(0, Routes.Length - 1);
            string AvgLeak = "";
            foreach (DataRow drtotal in dtTotalDispatches.Rows)
            {
                foreach (DataRow dr in dt_leaks.Rows)
                {
                    if (drtotal["sno"].ToString() == dr["sno"].ToString())
                    {
                        AvgLeak += TotalLeaks.ToString() + ",";
                    }
                }
            }
            AvgLeak = AvgLeak.Substring(0, AvgLeak.Length - 1);
            LineChartValuesclass getLineChart = new LineChartValuesclass();
            List<string> unitlist = new List<string>();
            List<string> Deliverlist = new List<string>();
            List<string> Datelist = new List<string>();
            List<string> Statuslist = new List<string>();
            List<LineChartValuesclass> LineChartValuelist = new List<LineChartValuesclass>();
            getLineChart.Leaks = Leaks;
            getLineChart.AvgLeaks = AvgLeak;
            getLineChart.routename = Routes;
            LineChartValuelist.Add(getLineChart);
            string errresponse = GetJson(LineChartValuelist);
            context.Response.Write(errresponse);
        }
        catch
        {
        }
    }
    private void GetProductWiseleaks(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            DateTime FromDate = DateTime.Now;
            string StartDate = context.Request["startDate"];
            DateTime ServerDateCurrentdate = VehicleDBMgr.GetTime(vdbmngr.conn);
            if (StartDate == "")
            {
                StartDate = ServerDateCurrentdate.ToString();
            }
            DateTime fmdate = Convert.ToDateTime(StartDate);
            string time = fmdate.ToString("dd-MM-yyyy HH:mm");
            string[] fromdatestrig = time.Split(' ');
            if (fromdatestrig.Length > 1)
            {
                if (fromdatestrig[0].Split('-').Length > 0)
                {
                    string[] dates = fromdatestrig[0].Split('-');
                    string[] times = fromdatestrig[1].Split(':');
                    FromDate = new DateTime(int.Parse(dates[2]), int.Parse(dates[1]), int.Parse(dates[0]), int.Parse(times[0]), int.Parse(times[1]), 0);
                }
            }
            DataTable dtTotalDispatches = new DataTable();
            List<barvalues> lbarValueslist = new List<barvalues>();
            List<string> RouteList = new List<string>();
            List<string> totalleak = new List<string>();
            string Status = context.Request["Status"];
            string BranchID = "";
            if (Status == "GraphicalNetSale")
            {
                BranchID = context.Request["ddlSalesOffice"];
            }
            else
            {
                BranchID = context.Session["branch"].ToString();
            }
            cmd = new MySqlCommand("SELECT SUM(leakages.TotalLeaks) AS leaks, productsdata.sno, productsdata.ProductName FROM (SELECT Sno, I_Date FROM tripdata WHERE (I_Date BETWEEN @d1 AND @d2)) tripdat INNER JOIN triproutes ON tripdat.Sno = triproutes.Tripdata_sno INNER JOIN leakages ON tripdat.Sno = leakages.TripID INNER JOIN productsdata ON leakages.ProductID = productsdata.sno INNER JOIN dispatch ON triproutes.RouteID = dispatch.sno WHERE (dispatch.Branch_Id = @branchid) GROUP BY productsdata.sno ORDER BY productsdata.sno");

            cmd.Parameters.AddWithValue("@branchid", BranchID);
            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate.AddDays(-1)));
            cmd.Parameters.AddWithValue("@d2", GetHighDate(FromDate.AddDays(-1)));
            DataTable dt_leaks = vdbmngr.SelectQuery(cmd).Tables[0];
            float totalleaks = 0;

            foreach (DataRow dr in dt_leaks.Rows)
            {
                float leak = 0;
                float.TryParse(dr["leaks"].ToString(), out leak);
                totalleaks += leak;

            }

            foreach (DataRow dr in dt_leaks.Rows)
            {

                float leaks = 0;
                float leaksqty = 0;
                float.TryParse(dr["leaks"].ToString(), out leaks);
                leaksqty = (leaks / totalleaks) * 100;
                if (leaksqty == 0)
                {
                }
                else
                {
                    RouteList.Add(dr["ProductName"].ToString());
                    totalleak.Add(Math.Round(leaksqty, 2).ToString());
                }
            }

            barvalues GetbarValues = new barvalues();
            GetbarValues.RouteName = RouteList;
            GetbarValues.totalleak = totalleak;
            lbarValueslist.Add(GetbarValues);
            string errresponse = GetJson(lbarValueslist);
            context.Response.Write(errresponse);
        }
        catch
        {

        }
    }
    private void Getthreedaysindentdespatch(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            DateTime FromDate = DateTime.Now;
            string StartDate = context.Request["startDate"];
            DateTime ServerDateCurrentdate = VehicleDBMgr.GetTime(vdbmngr.conn);
            if (StartDate == "")
            {
                StartDate = ServerDateCurrentdate.ToString();
            }
            DateTime fmdate = Convert.ToDateTime(StartDate);
            string time = fmdate.ToString("dd-MM-yyyy HH:mm");
            string[] fromdatestrig = time.Split(' ');
            if (fromdatestrig.Length > 1)
            {
                if (fromdatestrig[0].Split('-').Length > 0)
                {
                    string[] dates = fromdatestrig[0].Split('-');
                    string[] times = fromdatestrig[1].Split(':');
                    FromDate = new DateTime(int.Parse(dates[2]), int.Parse(dates[1]), int.Parse(dates[0]), int.Parse(times[0]), int.Parse(times[1]), 0);
                }
            }

            DataTable dtTotalDispatches = new DataTable();

            List<barvalues> lbarValueslist = new List<barvalues>();
            List<string> RouteList = new List<string>();
            List<string> totaldispatch = new List<string>();
            List<string> totalsale = new List<string>();
            List<string> totalleak = new List<string>();
            List<string> totalreturn = new List<string>();
            List<string> totalshort = new List<string>();
            List<string> totalfree = new List<string>();
            string Status = context.Request["Status"];
            string BranchID = "";
            if (Status == "GraphicalNetSale")
            {
                BranchID = context.Request["ddlSalesOffice"];
            }
            else
            {
                BranchID = context.Session["branch"].ToString();
            }
            cmd = new MySqlCommand("SELECT SUM(tripsubdata.Qty) AS dispatch, tripdat.I_Date FROM dispatch INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN (SELECT Sno, DATE_FORMAT(I_Date, '%d %b %y') AS I_Date FROM tripdata WHERE (I_Date BETWEEN @d1 AND @d2)) tripdat ON triproutes.Tripdata_sno = tripdat.Sno INNER JOIN tripsubdata ON tripdat.Sno = tripsubdata.Tripdata_sno WHERE (dispatch.Branch_Id = @branchid) GROUP BY tripdat.I_Date");
            string SalesType = context.Session["salestype"].ToString();
            if (SalesType == "Plant")
            {
                string ddlSalesOffice = context.Request["ddlSalesOffice"];
                cmd.Parameters.AddWithValue("@BranchId", BranchID);
            }
            else
            {
                cmd.Parameters.AddWithValue("@BranchId", BranchID);
            }
            cmd.Parameters.AddWithValue("@d1", CargoManagementSystem.DateConverter.GetLowDate(FromDate.AddDays(-7)));
            cmd.Parameters.AddWithValue("@d2", CargoManagementSystem.DateConverter.GetHighDate(FromDate.AddDays(-1)));
            DataTable dttotdispatch = vdbmngr.SelectQuery(cmd).Tables[0];
            cmd = new MySqlCommand("SELECT tripdat.I_Date, SUM(indents_subtable.DeliveryQty) AS deliveryqty, SUM(indents_subtable.unitQty) AS indentqty FROM (SELECT Sno, DATE_FORMAT(I_Date, '%d %b %y') AS I_Date FROM tripdata WHERE (I_Date BETWEEN @d1 AND @d2)) tripdat INNER JOIN triproutes ON tripdat.Sno = triproutes.Tripdata_sno INNER JOIN dispatch ON triproutes.RouteID = dispatch.sno INNER JOIN indents_subtable ON tripdat.Sno = indents_subtable.DTripId WHERE (dispatch.Branch_Id = @branchid) GROUP BY tripdat.I_Date");
            cmd.Parameters.AddWithValue("@branchid", BranchID);
            cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate.AddDays(-7)));
            cmd.Parameters.AddWithValue("@d2", GetHighDate(FromDate.AddDays(-1)));
            DataTable dt_indent_sale = vdbmngr.SelectQuery(cmd).Tables[0];
            foreach (DataRow dr in dt_indent_sale.Rows)
            {

                float unitqty = 0;
                float saleqty = 0;
                string I_Date = "";
                float.TryParse(dr["deliveryqty"].ToString(), out saleqty);
                float.TryParse(dr["indentqty"].ToString(), out unitqty);
                I_Date = dr["I_Date"].ToString();
                totalsale.Add(Math.Round(saleqty, 2).ToString());
                totalleak.Add(Math.Round(unitqty, 2).ToString());
                totalreturn.Add(I_Date);
            }
            foreach (DataRow dr in dttotdispatch.Rows)
            {
                float disqty = 0;
                float.TryParse(dr["dispatch"].ToString(), out disqty);
                totaldispatch.Add(disqty.ToString());
            }

            barvalues GetbarValues = new barvalues();
            GetbarValues.totaldispatch = totaldispatch;
            GetbarValues.totalsale = totalsale;
            GetbarValues.totalleak = totalleak;
            GetbarValues.totalreturn = totalreturn;
            lbarValueslist.Add(GetbarValues);
            string errresponse = GetJson(lbarValueslist);
            context.Response.Write(errresponse);
        }
        catch
        {
        }
    }
    public class routeleaks
    {
        public string Sno { get; set; }
        public string RouteName { get; set; }
        public string ProductName { get; set; }
        public string LeakQty { get; set; }
        public string DispatchQty { get; set; }
        public string SaleValue { get; set; }
        public string MilkQty { get; set; }
        public string CurdQty { get; set; }
        public string OtherQty { get; set; }
        public string amount { get; set; }
        public string dueamount { get; set; }
    }
    public class barvalues
    {
        public List<string> RouteName { get; set; }
        public List<string> totaldispatch { get; set; }
        public List<string> totalsale { get; set; }
        public List<string> totalleak { get; set; }
        public List<string> totalreturn { get; set; }
        public List<string> totalshort { get; set; }
        public List<string> totalfree { get; set; }
        public List<string> routeid { get; set; }
        public List<string> avgsale { get; set; }
    }
    private void GetLineChartValues(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            string Fmdate = context.Request["startDate"];
            string AgentName = context.Request["AgentName"];
            string RouteName = context.Request["RouteName"];
            string SalesOffice = context.Request["SalesOffice"];
            string Type = context.Request["Type"];
            string ddldatatype = context.Request["ddldatatype"];
            DateTime fmdate = Convert.ToDateTime(Fmdate);
            string CTime = fmdate.ToString();
            DateTime dtFrmDate = Convert.ToDateTime(CTime);
            DateTime FromDate = DateTime.Now;
            string toDate = context.Request["endDate"];
            DateTime tDate = Convert.ToDateTime(toDate);
            string CTTime = tDate.ToString();
            DateTime dttoDate = Convert.ToDateTime(CTTime);
            DateTime Enddate = DateTime.Now;
            string time = dtFrmDate.ToString("dd-MM-yyyy HH:mm");//
            string[] fromdatestrig = time.Split(' ');
            if (fromdatestrig.Length > 1)
            {
                if (fromdatestrig[0].Split('-').Length > 0)
                {
                    string[] dates = fromdatestrig[0].Split('-');
                    string[] times = fromdatestrig[1].Split(':');
                    FromDate = new DateTime(int.Parse(dates[2]), int.Parse(dates[1]), int.Parse(dates[0]), int.Parse(times[0]), int.Parse(times[1]), 0);
                }
            }
            string endtime = dttoDate.ToString("dd-MM-yyyy HH:mm");
            string[] endfromdatestrig = endtime.Split(' ');
            if (endfromdatestrig.Length > 1)
            {
                if (endfromdatestrig[0].Split('-').Length > 0)
                {
                    string[] dates = endfromdatestrig[0].Split('-');
                    string[] times = endfromdatestrig[1].Split(':');
                    Enddate = new DateTime(int.Parse(dates[2]), int.Parse(dates[1]), int.Parse(dates[0]), int.Parse(times[0]), int.Parse(times[1]), 0);
                }
            }
            List<LineChartValuesclass> LineChartValuelist = new List<LineChartValuesclass>();
            DataTable dtReport = new DataTable();
            if (ddldatatype == "Day Wise")
            {
                TimeSpan dateSpan = Enddate.Subtract(FromDate);
                int NoOfdays = dateSpan.Days;
                if (NoOfdays > 32)
                {
                    string msg = "Please Select Monthly Wise";
                    List<string> LineChartlist = new List<string>();
                    LineChartlist.Add(msg);
                    string err_response = GetJson(LineChartlist);
                    context.Response.Write(err_response);
                }
                else
                {
                    if (Type == "Sales Office Wise")
                    {
                        cmd = new MySqlCommand("SELECT ROUND(SUM(indents_subtable.unitQty), 2) AS unitQty, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty, indents.I_date, indents_subtable.DTripId, branchroutes.BranchID FROM indents INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno INNER JOIN branchroutesubtable ON indents.Branch_id = branchroutesubtable.BranchID INNER JOIN branchroutes ON branchroutesubtable.RefNo = branchroutes.Sno WHERE (indents.I_date BETWEEN @d1 AND @d2) AND (indents_subtable.DeliveryQty > 0) AND (branchroutes.BranchID = @BranchID) GROUP BY  DATE(indents.I_date)");
                        cmd.Parameters.AddWithValue("@d1", CargoManagementSystem.DateConverter.GetLowDate(FromDate.AddDays(-1)));
                        cmd.Parameters.AddWithValue("@d2", CargoManagementSystem.DateConverter.GetHighDate(Enddate.AddDays(-1)));
                        cmd.Parameters.AddWithValue("@BranchID", SalesOffice);
                        dtReport = vdbmngr.SelectQuery(cmd).Tables[0];
                    }
                    if (Type == "Route Wise")
                    {
                        cmd = new MySqlCommand("SELECT ROUND(SUM(indents_subtable.unitQty), 2) AS unitQty, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty, indents.I_date, indents_subtable.DTripId, branchroutesubtable.RefNo FROM indents INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno INNER JOIN branchroutesubtable ON indents.Branch_id = branchroutesubtable.BranchID  WHERE (indents.I_date BETWEEN @d1 AND @d2) AND (branchroutesubtable.RefNo = @RouteID) AND (indents_subtable.DeliveryQty > 0)  GROUP BY indents_subtable.DTripId");
                        cmd.Parameters.AddWithValue("@d1", CargoManagementSystem.DateConverter.GetLowDate(FromDate.AddDays(-1)));
                        cmd.Parameters.AddWithValue("@d2", CargoManagementSystem.DateConverter.GetHighDate(Enddate.AddDays(-1)));
                        cmd.Parameters.AddWithValue("@RouteID", RouteName);
                        dtReport = vdbmngr.SelectQuery(cmd).Tables[0];
                    }
                    if (Type == "Agent Wise")
                    {
                        cmd = new MySqlCommand("SELECT round(SUM(indents_subtable.unitQty),2) AS unitQty, round(SUM(indents_subtable.DeliveryQty),2) AS DeliveryQty,indents.I_date FROM  indents INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE (indents.Branch_id = @BranchID) AND (indents.I_date BETWEEN @d1 AND @d2)GROUP BY indents.I_date");
                        cmd.Parameters.AddWithValue("@d1", CargoManagementSystem.DateConverter.GetLowDate(FromDate.AddDays(-1)));
                        cmd.Parameters.AddWithValue("@d2", CargoManagementSystem.DateConverter.GetHighDate(Enddate.AddDays(-1)));
                        cmd.Parameters.AddWithValue("@BranchID", AgentName);
                        dtReport = vdbmngr.SelectQuery(cmd).Tables[0];
                    }
                    LineChartValuesclass getLineChart = new LineChartValuesclass();
                    List<string> unitlist = new List<string>();
                    List<string> Deliverlist = new List<string>();
                    List<string> Datelist = new List<string>();
                    List<string> Statuslist = new List<string>();
                    List<string> ActMillist = new List<string>();
                    if (dtReport.Rows.Count > 0)
                    {

                        string MainQty = "";
                        string DelQty = "";
                        string IndDate = "";
                        string AvgMileage = "";
                        double avgSaleQty = 0;
                        int count = 0;
                        foreach (DataRow dr in dtReport.Rows)
                        {
                            string unitQty = dr["unitQty"].ToString();
                            MainQty += unitQty + ",";
                            string DeliveryQty = dr["DeliveryQty"].ToString();
                            DelQty += DeliveryQty + ",";
                            double milltr = 0;
                            double.TryParse(dr["DeliveryQty"].ToString(), out milltr);
                            avgSaleQty += milltr;
                            string IndentDate = dr["I_date"].ToString();
                            DateTime now = Convert.ToDateTime(IndentDate).AddDays(1);
                            string dayname = now.DayOfWeek.ToString();
                            DateTime dtIndentDate = Convert.ToDateTime(IndentDate).AddDays(1);
                            string ChangedTime = dtIndentDate.ToString("dd");
                            string newdate = ChangedTime + "/" + dayname;
                            IndDate += newdate + ",";
                            count++;
                        }
                        double avg = 0;
                        avg = (avgSaleQty / count);
                        avg = Math.Round(avg, 2);
                        foreach (DataRow dr in dtReport.Rows)
                        {
                            string TodayMileage = dr["DeliveryQty"].ToString();
                            if (TodayMileage != "0")
                            {
                                AvgMileage += avg.ToString() + ",";
                            }
                        }
                        AvgMileage = AvgMileage.Substring(0, AvgMileage.Length - 1);
                        IndDate = IndDate.Substring(0, IndDate.Length - 1);
                        DelQty = DelQty.Substring(0, DelQty.Length - 1);
                        MainQty = MainQty.Substring(0, MainQty.Length - 1);
                        Deliverlist.Add(DelQty);
                        Deliverlist.Add(AvgMileage);
                        Statuslist.Add("Sales");
                        Statuslist.Add("Avg Sales");
                        getLineChart.IndentDate = IndDate;
                        getLineChart.DeliveryQty = Deliverlist;
                        getLineChart.Status = Statuslist;
                        getLineChart.ActMileage = ActMillist;
                        LineChartValuelist.Add(getLineChart);
                    }
                    if (Type == "Sales Office Wise")
                    {
                        cmd = new MySqlCommand("select salestype,flag,sno,status,club_code From salestypemanagement WHERE (status = 1) group by club_code order by sno DESC");
                        DataTable dtsales = vdbmngr.SelectQuery(cmd).Tables[0];
                        foreach (DataRow dr in dtsales.Rows)
                        {
                            if (dr["club_code"].ToString() == "4")
                            {
                                cmd = new MySqlCommand("SELECT ROUND(SUM(indents_subtable.unitQty), 2) AS unitQty, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty, indents.I_date, indents_subtable.DTripId, branchroutes.BranchID FROM indents_subtable INNER JOIN indents ON indents_subtable.IndentNo = indents.IndentNo INNER JOIN branchdata ON indents.Branch_id = branchdata.sno INNER JOIN branchroutesubtable ON branchdata.sno = branchroutesubtable.BranchID INNER JOIN branchroutes ON branchroutesubtable.RefNo = branchroutes.Sno WHERE (indents.I_date BETWEEN @d1 AND @d2) AND (indents_subtable.DeliveryQty > 0) AND (branchroutes.BranchID = @BranchID) AND ((branchdata.SalesType =32) OR (branchdata.SalesType =36) OR (branchdata.SalesType =37))  GROUP BY  DATE(indents.I_date)");
                                cmd.Parameters.AddWithValue("@SalesType", dr["sno"].ToString());
                            }
                            else
                            {
                                cmd = new MySqlCommand("SELECT ROUND(SUM(indents_subtable.unitQty), 2) AS unitQty, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty, indents.I_date, indents_subtable.DTripId, branchroutes.BranchID FROM indents_subtable INNER JOIN indents ON indents_subtable.IndentNo = indents.IndentNo INNER JOIN branchdata ON indents.Branch_id = branchdata.sno INNER JOIN branchroutesubtable ON branchdata.sno = branchroutesubtable.BranchID INNER JOIN branchroutes ON branchroutesubtable.RefNo = branchroutes.Sno WHERE (indents.I_date BETWEEN @d1 AND @d2) AND (indents_subtable.DeliveryQty > 0) AND (branchroutes.BranchID = @BranchID) AND (branchdata.SalesType = @SalesType)  GROUP BY  DATE(indents.I_date)");
                                cmd.Parameters.AddWithValue("@SalesType", dr["sno"].ToString());
                            }
                            cmd.Parameters.AddWithValue("@d1", CargoManagementSystem.DateConverter.GetLowDate(FromDate.AddDays(-1)));
                            cmd.Parameters.AddWithValue("@d2", CargoManagementSystem.DateConverter.GetHighDate(Enddate.AddDays(-1)));
                            cmd.Parameters.AddWithValue("@BranchID", SalesOffice);
                            DataTable dtclass = vdbmngr.SelectQuery(cmd).Tables[0];
                            if (dtclass.Rows.Count > 0)
                            {
                                if (dr["club_code"].ToString() == "4")
                                {
                                    Statuslist.Add("INSTITUTIONAL");
                                    Statuslist.Add("Avg Sales");
                                }
                                else
                                {
                                    Statuslist.Add(dr["salestype"].ToString());
                                    Statuslist.Add("Avg Sales");
                                }
                                getLineChart.Status = Statuslist;
                                string DelQty = "";
                                string IndDate = "";
                                string AvgMileage = "";
                                double avgSaleQty = 0;
                                int count = 0;
                                foreach (DataRow drc in dtclass.Rows)
                                {
                                    string DeliveryQty = drc["DeliveryQty"].ToString();
                                    DelQty += DeliveryQty + ",";
                                    double milltr = 0;
                                    double.TryParse(drc["DeliveryQty"].ToString(), out milltr);
                                    avgSaleQty += milltr;
                                    string IndentDate = drc["I_date"].ToString();
                                    DateTime now = Convert.ToDateTime(IndentDate).AddDays(1);
                                    string dayname = now.DayOfWeek.ToString();
                                    DateTime dtIndentDate = Convert.ToDateTime(IndentDate).AddDays(1);
                                    string ChangedTime = dtIndentDate.ToString("dd");
                                    string newdate = ChangedTime + "/" + dayname;
                                    IndDate += newdate + ",";
                                    count++;
                                }
                                double avg = 0;
                                avg = (avgSaleQty / count);
                                avg = Math.Round(avg, 2);
                                foreach (DataRow drc in dtclass.Rows)
                                {
                                    string TodayMileage = drc["DeliveryQty"].ToString();
                                    if (TodayMileage != "0")
                                    {
                                        AvgMileage += avg.ToString() + ",";
                                    }
                                }
                                AvgMileage = AvgMileage.Substring(0, AvgMileage.Length - 1);
                                IndDate = IndDate.Substring(0, IndDate.Length - 1);
                                DelQty = DelQty.Substring(0, DelQty.Length - 1);
                                Deliverlist.Add(DelQty);
                                Deliverlist.Add(AvgMileage);

                                getLineChart.IndentDate = IndDate;
                                getLineChart.DeliveryQty = Deliverlist;
                                getLineChart.ActMileage = ActMillist;
                                LineChartValuelist.Add(getLineChart);
                            }
                        }
                    }
                    string errresponse = GetJson(LineChartValuelist);
                    context.Response.Write(errresponse);
                }
            }
            else
            {
                DataTable Report = new DataTable();
                DateTime firstmonth = new DateTime();
                DateTime lastmonth = new DateTime();
                Enddate = Enddate.AddMonths(1);
                TimeSpan dateSpan = Enddate.Subtract(FromDate);
                int years = (dateSpan.Days / 365);
                int months = ((dateSpan.Days % 365) / 31) + (years * 12);
                if (Type == "Sales Office Wise")
                {
                    Report.Columns.Add("SNo");
                    Report.Columns.Add("Date");
                    Report.Columns.Add("Qty");
                    int i = 1;
                    if (months != 0)
                    {
                        for (int j = 0; j < months; j++)
                        {
                            firstmonth = GetLowMonthRetrive(FromDate.AddMonths(j));
                            lastmonth = GetHighMonth(firstmonth);
                            cmd = new MySqlCommand("SELECT ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty, indents.I_date FROM indents_subtable INNER JOIN indents ON indents_subtable.IndentNo = indents.IndentNo INNER JOIN branchroutesubtable ON indents.Branch_id = branchroutesubtable.BranchID INNER JOIN branchroutes ON branchroutesubtable.RefNo = branchroutes.Sno WHERE (indents.I_date BETWEEN @d1 AND @d2) AND (branchroutes.BranchID = @BranchID) GROUP BY branchroutes.BranchID");
                            cmd.Parameters.AddWithValue("@BranchID", SalesOffice);
                            DateTime dtF = firstmonth.AddDays(-1);
                            cmd.Parameters.AddWithValue("@d1", dtF);
                            cmd.Parameters.AddWithValue("@d2", lastmonth);
                            TimeSpan dateSpan2 = lastmonth.Subtract(dtF);
                            int NoOfdays = dateSpan2.Days;
                            DataTable dtAgent = vdbmngr.SelectQuery(cmd).Tables[0];
                            string ChangedTime1 = firstmonth.ToString("MMM/yyyy");
                            string Changedt = firstmonth.ToString("MMM");
                            foreach (DataRow dr in dtAgent.Rows)
                            {
                                DataRow newrow = Report.NewRow();
                                newrow["SNo"] = i++.ToString();
                                newrow["Date"] = ChangedTime1;
                                double delQty = 0;
                                double.TryParse(dr["DeliveryQty"].ToString(), out delQty);
                                double qty = 0;
                                qty = delQty / NoOfdays;
                                newrow["Qty"] = qty.ToString("F2");
                                Report.Rows.Add(newrow);
                            }
                        }
                    }
                }
                if (Type == "Route Wise")
                {
                    Report.Columns.Add("SNo");
                    Report.Columns.Add("Date");
                    Report.Columns.Add("Qty");
                    int i = 1;
                    if (months != 0)
                    {
                        for (int j = 0; j < months; j++)
                        {
                            firstmonth = GetLowMonthRetrive(FromDate.AddMonths(j));
                            lastmonth = GetHighMonth(firstmonth);
                            cmd = new MySqlCommand("SELECT ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty, indents.I_date FROM indents_subtable INNER JOIN indents ON indents_subtable.IndentNo = indents.IndentNo INNER JOIN branchroutesubtable ON indents.Branch_id = branchroutesubtable.BranchID WHERE (indents.I_date BETWEEN @d1 AND @d2) AND (branchroutesubtable.RefNo = @RouteID) GROUP BY branchroutesubtable.RefNo");
                            cmd.Parameters.AddWithValue("@RouteID", RouteName);
                            DateTime dtF = firstmonth.AddDays(-1);
                            cmd.Parameters.AddWithValue("@d1", dtF);
                            cmd.Parameters.AddWithValue("@d2", lastmonth);
                            DataTable dtAgent = vdbmngr.SelectQuery(cmd).Tables[0];
                            string ChangedTime1 = firstmonth.ToString("MMM/yyyy");
                            string Changedt = firstmonth.ToString("MMM");
                            foreach (DataRow dr in dtAgent.Rows)
                            {
                                DataRow newrow = Report.NewRow();
                                newrow["SNo"] = i++.ToString();
                                newrow["Date"] = ChangedTime1;
                                double delQty = 0;
                                double.TryParse(dr["DeliveryQty"].ToString(), out delQty);
                                newrow["Qty"] = delQty.ToString();
                                Report.Rows.Add(newrow);
                            }
                        }
                    }
                }
                if (Type == "Agent Wise")
                {
                    Report.Columns.Add("SNo");
                    Report.Columns.Add("Date");
                    Report.Columns.Add("Qty");
                    int i = 1;
                    if (months != 0)
                    {
                        for (int j = 0; j < months; j++)
                        {
                            firstmonth = GetLowMonthRetrive(FromDate.AddMonths(j));
                            lastmonth = GetHighMonth(firstmonth);
                            cmd = new MySqlCommand("SELECT ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty, indents.I_date FROM indents_subtable INNER JOIN indents ON indents_subtable.IndentNo = indents.IndentNo WHERE (indents.I_date BETWEEN @d1 AND @d2) AND (indents.Branch_id = @AgentID) GROUP BY indents.Branch_id");
                            cmd.Parameters.AddWithValue("@AgentID", AgentName);
                            DateTime dtF = firstmonth.AddDays(-1);
                            cmd.Parameters.AddWithValue("@d1", dtF);
                            cmd.Parameters.AddWithValue("@d2", lastmonth);
                            DataTable dtAgent = vdbmngr.SelectQuery(cmd).Tables[0];
                            string ChangedTime1 = firstmonth.ToString("MMM/yyyy");
                            string Changedt = firstmonth.ToString("MMM");
                            foreach (DataRow dr in dtAgent.Rows)
                            {
                                DataRow newrow = Report.NewRow();
                                newrow["SNo"] = i++.ToString();
                                newrow["Date"] = ChangedTime1;
                                double delQty = 0;
                                double.TryParse(dr["DeliveryQty"].ToString(), out delQty);
                                newrow["Qty"] = delQty.ToString();
                                Report.Rows.Add(newrow);
                            }
                        }
                    }
                }
                if (Report.Rows.Count > 0)
                {
                    LineChartValuesclass getLineChart = new LineChartValuesclass();
                    List<string> unitlist = new List<string>();
                    List<string> Deliverlist = new List<string>();
                    List<string> Datelist = new List<string>();
                    List<string> Statuslist = new List<string>();
                    List<string> ActMillist = new List<string>();
                    string MainQty = "";
                    string DelQty = "";
                    string IndDate = "";
                    string AvgMileage = "";
                    double avgSaleQty = 0;
                    int count = 0;
                    foreach (DataRow dr in Report.Rows)
                    {
                        string DeliveryQty = dr["Qty"].ToString();
                        DelQty += DeliveryQty + ",";
                        double milltr = 0;
                        double.TryParse(dr["Qty"].ToString(), out milltr);
                        avgSaleQty += milltr;
                        string IndentDate = dr["Date"].ToString();
                        IndDate += IndentDate + ",";
                        count++;
                    }
                    double avg = 0;
                    avg = (avgSaleQty / count);
                    avg = Math.Round(avg, 2);
                    foreach (DataRow dr in Report.Rows)
                    {
                        string TodayMileage = dr["Qty"].ToString();
                        if (TodayMileage != "0")
                        {
                            AvgMileage += avg.ToString() + ",";
                        }
                    }
                    AvgMileage = AvgMileage.Substring(0, AvgMileage.Length - 1);
                    IndDate = IndDate.Substring(0, IndDate.Length - 1);
                    DelQty = DelQty.Substring(0, DelQty.Length - 1);
                    Deliverlist.Add(DelQty);
                    Deliverlist.Add(AvgMileage);
                    Statuslist.Add("Saels");
                    Statuslist.Add("Avg Sales");
                    getLineChart.IndentDate = IndDate;
                    getLineChart.DeliveryQty = Deliverlist;
                    getLineChart.UnitQty = MainQty;
                    getLineChart.Status = Statuslist;
                    getLineChart.ActMileage = ActMillist;
                    LineChartValuelist.Add(getLineChart);
                }
                string errresponse = GetJson(LineChartValuelist);
                context.Response.Write(errresponse);
            }
        }
        catch
        {
        }
    }
    public class LineChartValuesclass
    {
        public List<string> DeliveryQty { get; set; }
        public List<string> Status { get; set; }
        public string IndentDate { get; set; }
        public string UnitQty { get; set; }
        public string Leaks { get; set; }
        public string AvgLeaks { get; set; }
        public string routename { get; set; }
        public string dispatchqty { get; set; }
        public string dispatchvalue { get; set; }
        public string BranchName { get; set; }
        public string BranchID { get; set; }
        public List<string> ActMileage { get; set; }
        public string SaleQty { get; set; }
        public string salestypeid { get; set; }
        public string SalesType { get; set; }
        public string AgentName { get; set; }
        public string AgentId { get; set; }
        public string ProductName { get; set; }
        public string ProductId { get; set; }
        public string dqty { get; set; }
        public string type { get; set; }
        public string type1 { get; set; }
        public string AvgQty { get; set; }
        public string AvgSaleValue { get; set; }
        public string DataType { get; set; }
        public string yesterindent { get; set; }
        public string lastweekindent { get; set; }
        public string lastmonthindent { get; set; }
        public string lastyearindent { get; set; }
        public string presentweakindent { get; set; }
        public string presentmonthindent { get; set; }
        public string presentyearindent { get; set; }
        public string yesterdaypercentage { get; set; }
        public string lastweekpercentage { get; set; }
        public string lastmonthpercentage { get; set; }
        public string lastyearpercentage { get; set; }
        public string thismonthdate { get; set; }
        public string lastmonthdate { get; set; }
        public string lastyeardate { get; set; }
        public string thismonthtype { get; set; }
        public string lastmonthtype { get; set; }
        public string lastyeartype { get; set; }
        public string presentweakavg { get; set; }
        public string presentweakpercentage { get; set; }
        public string presentmonthavg { get; set; }
        public string presentmonthpercentage { get; set; }
        public string presentyearhavg { get; set; }
        public string presentyearpercentage { get; set; }
        public string lastmonthweekindent { get; set; }
        public string lastmonthweekaverage { get; set; }
        public string lastmonthweekpercentage { get; set; }
        public string lastyearweekindent { get; set; }
        public string lastyearweekaverage { get; set; }
        public string lastyearweekpercentage { get; set; }
        public string lastsixthmonthpercentage { get; set; }
        public string lastsixthmonthaverage { get; set; }
        public string lastsixthmonthindent { get; set; }
        public string lastyearmonthpercentage { get; set; }
        public string lastyearmonthaverage { get; set; }
        public string lastyearmonthindent { get; set; }
        public string yesterdayaverage { get; set; }
        public string lastweekaverage { get; set; }
        public string lastmonthaverage { get; set; }
        public string lastyearaverage { get; set; }
        public string temp { get; set; }
        public string temp1 { get; set; }
    }
    public class MainComaparisonDetails
    {
        public List<DayWiseDatescls> daywisedatescls { get; set; }
        public List<TotalProductclass> TotalProductclass { get; set; }
        public List<LineChartValuesclass> linechartvaluesclass { get; set; }
        public string one { get; set; }
    }
    public class RegionNames
    {
        public string Sno { get; set; }
        public string AgentName { get; set; }
    }
    private void get_branch_products(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            cmd = new MySqlCommand("SELECT productsdata.ProductName, productsdata.sno FROM branchproducts INNER JOIN productsdata ON branchproducts.product_sno = productsdata.sno WHERE (branchproducts.branch_sno = @brnch) AND (branchproducts.flag = 1)");
            cmd.Parameters.AddWithValue("@brnch", context.Session["branch"].ToString());
            DataTable dtprdtsclubbing = vdbmngr.SelectQuery(cmd).Tables[0];
            List<RouteNames> initializedatalist = new List<RouteNames>();
            foreach (DataRow dr in dtprdtsclubbing.Rows)
            {
                RouteNames initializedata = new RouteNames();
                initializedata.id = dr["sno"].ToString();
                initializedata.Name = dr["ProductName"].ToString();
                initializedatalist.Add(initializedata);
            }
            if (initializedatalist != null)
            {
                string response = GetJson(initializedatalist);
                context.Response.Write(response);
            }
        }
        catch
        {

        }
    }
    private void btnprdtclubbingSaveClick(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            DateTime ServerDateCurrentdate = VehicleDBMgr.GetTime(vdbmngr.conn);
            var js = new JavaScriptSerializer();
            string Username = context.Session["userdata_sno"].ToString();
            string routelevel = context.Session["LevelType"].ToString();
            var title1 = context.Request.Params[1];
            Orders obj = js.Deserialize<Orders>(title1);
            string clubname = obj.clubbingname;
            string btnSave = obj.btnSave;
            if (btnSave == "Save")
            {
                cmd = new MySqlCommand("insert into product_clubbing (ClubName,BranchID,EntryDate)values(@ClubName,@branchid,@EntryDate)");
                cmd.Parameters.AddWithValue("@ClubName", clubname);
                cmd.Parameters.AddWithValue("@branchid", context.Session["branch"].ToString());
                cmd.Parameters.AddWithValue("@EntryDate", ServerDateCurrentdate);
                long clubsno = vdbmngr.insertScalar(cmd);
                foreach (string o in obj.dataarr)
                {
                    cmd = new MySqlCommand("insert into subproductsclubbing (Clubsno,Productid)values(@Clubsno,@Productid)");
                    cmd.Parameters.AddWithValue("@Clubsno", clubsno);
                    cmd.Parameters.AddWithValue("@Productid", o);
                    vdbmngr.insert(cmd);
                }
                foreach (SlotDetails o in obj.slotdetails)
                {
                    cmd = new MySqlCommand("insert into slabs (club_sno,SlotQty,Amt)values(@Clubsno,@SlotQty,@Amt)");
                    cmd.Parameters.AddWithValue("@Clubsno", clubsno);
                    cmd.Parameters.AddWithValue("@SlotQty", o.range);
                    cmd.Parameters.AddWithValue("@Amt", o.amount);
                    vdbmngr.insert(cmd);
                }
                var jsonSerializer = new JavaScriptSerializer();
                var jsonString = String.Empty;
                context.Request.InputStream.Position = 0;
                using (var inputStream = new StreamReader(context.Request.InputStream))
                {
                    jsonString = inputStream.ReadToEnd();
                }
                List<string> MsgList = new List<string>();
                string msg = "Clubbing Name Successfully Saved";
                MsgList.Add(msg);
                string response = GetJson(MsgList);
                context.Response.Write(response);
            }
            else
            {
                string sno = obj.refno;
                cmd = new MySqlCommand("update  product_clubbing set ModifiedDate=@ModifiedDate,Flag=@flag WHERE  sno=@sno");
                cmd.Parameters.AddWithValue("@ModifiedDate", ServerDateCurrentdate);
                cmd.Parameters.AddWithValue("@flag", false);
                cmd.Parameters.AddWithValue("@sno", sno);
                vdbmngr.Update(cmd);
                cmd = new MySqlCommand("insert into product_clubbing (ClubName,BranchID,EntryDate,ModifySno)values(@ClubName,@branchid,@EntryDate,@ModifySno)");
                cmd.Parameters.AddWithValue("@ClubName", clubname);
                cmd.Parameters.AddWithValue("@branchid", context.Session["branch"].ToString());
                cmd.Parameters.AddWithValue("@EntryDate", ServerDateCurrentdate);
                cmd.Parameters.AddWithValue("@ModifySno", sno);
                long clubsno = vdbmngr.insertScalar(cmd);
                foreach (string o in obj.dataarr)
                {
                    cmd = new MySqlCommand("insert into subproductsclubbing (Clubsno,Productid)values(@Clubsno,@Productid)");
                    cmd.Parameters.AddWithValue("@Clubsno", clubsno);
                    cmd.Parameters.AddWithValue("@Productid", o);
                    vdbmngr.insert(cmd);
                }
                foreach (SlotDetails o in obj.slotdetails)
                {
                    cmd = new MySqlCommand("insert into slabs (club_sno,SlotQty,Amt)values(@Clubsno,@SlotQty,@Amt)");
                    cmd.Parameters.AddWithValue("@Clubsno", clubsno);
                    cmd.Parameters.AddWithValue("@SlotQty", o.range);
                    cmd.Parameters.AddWithValue("@Amt", o.amount);
                    vdbmngr.insert(cmd);
                }
                var jsonSerializer = new JavaScriptSerializer();
                var jsonString = String.Empty;
                context.Request.InputStream.Position = 0;
                using (var inputStream = new StreamReader(context.Request.InputStream))
                {
                    jsonString = inputStream.ReadToEnd();
                }
                List<string> MsgList = new List<string>();
                string msg = "Clubbing Name Successfully Updated";
                MsgList.Add(msg);
                string response = GetJson(MsgList);
                context.Response.Write(response);
            }
        }
        catch (Exception ex)
        {
            List<string> MsgList = new List<string>();
            string msg = ex.Message;
            MsgList.Add(msg);
            string response = GetJson(MsgList);
            context.Response.Write(response);
        }
    }
    private void updateprdt_clubbingtogrid(HttpContext context)
    {
        string ltype = context.Session["LevelType"].ToString();
        try
        {
            vdbmngr = new VehicleDBMgr();
            Dictionary<string, routesgrid> routesdesc = new Dictionary<string, routesgrid>();
            if (ltype == "MAdmin")
            {
                cmd = new MySqlCommand("SELECT productsdata.ProductName, product_clubbing.sno, product_clubbing.ClubName FROM product_clubbing INNER JOIN subproductsclubbing ON product_clubbing.sno = subproductsclubbing.Clubsno INNER JOIN productsdata ON subproductsclubbing.Productid = productsdata.sno");
            }
            else
            {
                cmd = new MySqlCommand("SELECT productsdata.ProductName, product_clubbing.sno, product_clubbing.ClubName FROM product_clubbing INNER JOIN subproductsclubbing ON product_clubbing.sno = subproductsclubbing.Clubsno INNER JOIN productsdata ON subproductsclubbing.Productid = productsdata.sno WHERE (product_clubbing.BranchID = @branchid)");
                cmd.Parameters.AddWithValue("@branchid", context.Session["branch"].ToString());
            }

            DataTable dt = vdbmngr.SelectQuery(cmd).Tables[0];
            foreach (DataRow dr in dt.Rows)
            {
                if (!routesdesc.ContainsKey(dr["sno"].ToString()))
                {
                    routesgrid routesobj = new routesgrid();
                    routesobj.RefNo = dr["sno"].ToString();
                    routesobj.RouteName = dr["ClubName"].ToString();
                    routesobj.DistributorName = dr["ProductName"].ToString();
                    routesdesc.Add(dr["sno"].ToString(), routesobj);
                }
                else
                {
                    routesgrid routesobj = new routesgrid();
                    routesobj = routesdesc[dr["sno"].ToString()];
                    routesobj.DistributorName += "->" + dr["ProductName"].ToString();
                }
            }
            string response = GetJson(routesdesc);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            if (ex.Message == "Object reference not set to an instance of an object.")
            {
                context.Response.ContentType = MediaTypeNames.Text.Plain;
                context.Response.StatusCode = 400;
                context.Response.Write("Session Expired");
            }
            else
            {
                context.Response.ContentType = MediaTypeNames.Text.Plain;
                context.Response.StatusCode = 300;
                context.Response.Write(ex.Message);
            }
        }
    }
    private void updatedivclubbingselected(HttpContext context)
    {
        try
        {
            string refnum = context.Request["refno"];
            vdbmngr = new VehicleDBMgr();
            List<divproductsclubbing> divselectedclubbinglist = new List<divproductsclubbing>();
            cmd = new MySqlCommand("SELECT productsdata.ProductName, productsdata.sno FROM productsdata INNER JOIN subproductsclubbing ON productsdata.sno = subproductsclubbing.Productid WHERE (subproductsclubbing.Clubsno = @clubsno)");
            cmd.Parameters.AddWithValue("@clubsno", refnum);
            DataTable dt = vdbmngr.SelectQuery(cmd).Tables[0];
            foreach (DataRow dr in dt.Rows)
            {
                divproductsclubbing Getproductclubbings = new divproductsclubbing();

                Getproductclubbings.productsno = dr["sno"].ToString();
                Getproductclubbings.ProductName = dr["ProductName"].ToString();
                divselectedclubbinglist.Add(Getproductclubbings);
            }
            string response = GetJson(divselectedclubbinglist);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {

        }
    }
    private void updatedivslots(HttpContext context)
    {
        try
        {
            string refnum = context.Request["refno"];
            vdbmngr = new VehicleDBMgr();
            List<divproductsclubbing> divselectedclubbinglist = new List<divproductsclubbing>();

            if (context.Session["LevelType"].ToString() == "Manager" || context.Session["LevelType"].ToString() == "Admin")
            {
                cmd = new MySqlCommand("SELECT SlotQty, Amt FROM slabs WHERE (club_sno = @clubsno)");
                cmd.Parameters.AddWithValue("@clubsno", refnum);
                DataTable dt = vdbmngr.SelectQuery(cmd).Tables[0];
                foreach (DataRow dr in dt.Rows)
                {
                    divproductsclubbing Getproductclubbings = new divproductsclubbing();
                    Getproductclubbings.range = dr["SlotQty"].ToString();
                    Getproductclubbings.amount = dr["Amt"].ToString();
                    divselectedclubbinglist.Add(Getproductclubbings);
                }
            }
            string response = GetJson(divselectedclubbinglist);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {

        }
    }
    private void get_routebranches(HttpContext context)
    {
        string routeno = context.Request["cmbroutenamename"];
        try
        {
            vdbmngr = new VehicleDBMgr();
            cmd = new MySqlCommand("SELECT branchdata.BranchName, branchdata.sno FROM branchdata INNER JOIN branchmappingtable ON branchdata.sno = branchmappingtable.SubBranch WHERE (branchmappingtable.SuperBranch = @superbranch) ORDER BY branchdata.BranchName");
            cmd.Parameters.AddWithValue("@superbranch", context.Session["branch"].ToString());
            DataTable dtroutebrnchs = vdbmngr.SelectQuery(cmd).Tables[0];
            List<RouteNames> initializedatalist = new List<RouteNames>();
            foreach (DataRow dr in dtroutebrnchs.Rows)
            {
                RouteNames initializedata = new RouteNames();
                initializedata.id = dr["sno"].ToString();
                initializedata.Name = dr["BranchName"].ToString();
                initializedatalist.Add(initializedata);
            }
            if (initializedatalist != null)
            {
                string response = GetJson(initializedatalist);
                context.Response.Write(response);
            }
        }
        catch
        {
        }
    }
    private void get_branch_clubbings(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            cmd = new MySqlCommand("SELECT sno, ClubName, BranchID FROM product_clubbing WHERE (BranchID = @brnch)");
            cmd.Parameters.AddWithValue("@brnch", context.Session["branch"].ToString());
            DataTable dtbrnch_prdtsclubbing = vdbmngr.SelectQuery(cmd).Tables[0];
            List<RouteNames> initializedatalist = new List<RouteNames>();
            foreach (DataRow dr in dtbrnch_prdtsclubbing.Rows)
            {
                RouteNames initializedata = new RouteNames();
                initializedata.id = dr["sno"].ToString();
                initializedata.Name = dr["ClubName"].ToString();
                initializedatalist.Add(initializedata);
            }
            if (initializedatalist != null)
            {
                string response = GetJson(initializedatalist);
                context.Response.Write(response);
            }
        }
        catch
        {
        }
    }
    class divproductsclubbing
    {
        public string productsno { set; get; }
        public string ProductName { set; get; }
        public string clubsno { set; get; }
        public string clubName { set; get; }
        public string range { set; get; }
        public string amount { set; get; }
    }
    private void btnStructureSaveClick(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            DateTime ServerDateCurrentdate = VehicleDBMgr.GetTime(vdbmngr.conn);
            var js = new JavaScriptSerializer();
            string Username = context.Session["userdata_sno"].ToString();
            string routelevel = context.Session["LevelType"].ToString();
            var title1 = context.Request.Params[1];
            Orders obj = js.Deserialize<Orders>(title1);
            string structurename = obj.structname;
            string btnstructureSave = obj.btnstructureSave;
            if (btnstructureSave == "Save")
            {
                cmd = new MySqlCommand("insert into incentive_structure (StructureName,BranchID,EntryDate)values(@StructureName,@branchid,@EntryDate)");
                cmd.Parameters.AddWithValue("@StructureName", structurename);
                cmd.Parameters.AddWithValue("@branchid", context.Session["branch"].ToString());
                cmd.Parameters.AddWithValue("@EntryDate", ServerDateCurrentdate);
                long is_sno = vdbmngr.insertScalar(cmd);
                foreach (string o in obj.dataarr)
                {
                    cmd = new MySqlCommand("insert into incentive_struct_sub (is_sno,clubbingID)values(@is_sno,@clubbingID)");
                    cmd.Parameters.AddWithValue("@is_sno", is_sno);
                    cmd.Parameters.AddWithValue("@clubbingID", o);
                    vdbmngr.insert(cmd);
                }
                var jsonSerializer = new JavaScriptSerializer();
                var jsonString = String.Empty;
                context.Request.InputStream.Position = 0;
                using (var inputStream = new StreamReader(context.Request.InputStream))
                {
                    jsonString = inputStream.ReadToEnd();
                }
                List<string> MsgList = new List<string>();
                string msg = "Structure Successfully Saved";
                MsgList.Add(msg);
                string response = GetJson(MsgList);
                context.Response.Write(response);
            }
            else
            {
                string sno = obj.refno;
                cmd = new MySqlCommand("update  incentive_structure set ModifiedDate=@ModifiedDate,Flag=@flag WHERE  sno=@sno");
                cmd.Parameters.AddWithValue("@ModifiedDate", ServerDateCurrentdate);
                cmd.Parameters.AddWithValue("@flag", false);
                cmd.Parameters.AddWithValue("@sno", sno);
                vdbmngr.Update(cmd);
                cmd = new MySqlCommand("insert into incentive_structure (StructureName,BranchID,EntryDate,ModifySno)values(@StructureName,@branchid,@EntryDate,@modifysno)");
                cmd.Parameters.AddWithValue("@StructureName", structurename);
                cmd.Parameters.AddWithValue("@branchid", context.Session["branch"].ToString());
                cmd.Parameters.AddWithValue("@EntryDate", ServerDateCurrentdate);
                cmd.Parameters.AddWithValue("@modifysno", sno);
                long is_sno = vdbmngr.insertScalar(cmd);
                foreach (string o in obj.dataarr)
                {
                    cmd = new MySqlCommand("insert into incentive_struct_sub (is_sno,clubbingID)values(@is_sno,@clubbingID)");
                    cmd.Parameters.AddWithValue("@is_sno", is_sno);
                    cmd.Parameters.AddWithValue("@clubbingID", o);
                    vdbmngr.insert(cmd);
                }
                var jsonSerializer = new JavaScriptSerializer();
                var jsonString = String.Empty;
                context.Request.InputStream.Position = 0;
                using (var inputStream = new StreamReader(context.Request.InputStream))
                {
                    jsonString = inputStream.ReadToEnd();
                }
                List<string> MsgList = new List<string>();
                string msg = "Structure Successfully Updated";
                MsgList.Add(msg);
                string response = GetJson(MsgList);
                context.Response.Write(response);
            }
        }
        catch (Exception ex)
        {
            List<string> MsgList = new List<string>();
            string msg = ex.Message;
            MsgList.Add(msg);
            string response = GetJson(MsgList);
            context.Response.Write(response);
        }
    }
    public class incentivestruct
    {
        public string RefNo { get; set; }
        public string RouteName { get; set; }
        public string DistributorName { get; set; }
        public string BranchName { get; set; }
        public string Mainroute { get; set; }
    }
    private void updatestructuretogrid(HttpContext context)
    {
        string levtype = context.Session["LevelType"].ToString();
        try
        {
            vdbmngr = new VehicleDBMgr();
            Dictionary<string, routesgrid> routesdesc = new Dictionary<string, routesgrid>();
            Dictionary<string, incentivestruct> incentive = new Dictionary<string, incentivestruct>();
            if (levtype == "MAdmin")
            {
                cmd = new MySqlCommand("SELECT product_clubbing.ClubName, incentive_structure.StructureName, incentive_structure.sno FROM product_clubbing INNER JOIN incentive_struct_sub ON product_clubbing.sno = incentive_struct_sub.clubbingID INNER JOIN incentive_structure ON incentive_struct_sub.is_sno = incentive_structure.sno");
            }
            else
            {
                cmd = new MySqlCommand("SELECT product_clubbing.ClubName, incentive_structure.StructureName, incentive_structure.sno FROM product_clubbing INNER JOIN incentive_struct_sub ON product_clubbing.sno = incentive_struct_sub.clubbingID INNER JOIN incentive_structure ON incentive_struct_sub.is_sno = incentive_structure.sno WHERE (incentive_structure.BranchID = @branchid)");
                cmd.Parameters.AddWithValue("@branchid", context.Session["branch"].ToString());
            }

            DataTable dt = vdbmngr.SelectQuery(cmd).Tables[0];
            foreach (DataRow dr in dt.Rows)
            {
                if (!routesdesc.ContainsKey(dr["sno"].ToString()))
                {
                    routesgrid routesobj = new routesgrid();
                    routesobj.RefNo = dr["sno"].ToString();
                    routesobj.RouteName = dr["StructureName"].ToString();
                    routesobj.DistributorName = dr["ClubName"].ToString();
                    routesdesc.Add(dr["sno"].ToString(), routesobj);
                }
                else
                {
                    routesgrid routesobj = new routesgrid();
                    routesobj = routesdesc[dr["sno"].ToString()];
                    routesobj.DistributorName += "->" + dr["ClubName"].ToString();
                }

            }
            string response = GetJson(routesdesc);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {

        }
    }
    private void updatediv_structure(HttpContext context)
    {
        try
        {
            string refnum = context.Request["refno"];
            vdbmngr = new VehicleDBMgr();
            List<divproductsclubbing> divselectedclubbinglist = new List<divproductsclubbing>();
            if (context.Session["LevelType"].ToString() == "Admin")
            {
                cmd = new MySqlCommand("SELECT product_clubbing.ClubName, incentive_structure.StructureName, product_clubbing.sno FROM product_clubbing INNER JOIN incentive_struct_sub ON product_clubbing.sno = incentive_struct_sub.clubbingID INNER JOIN incentive_structure ON incentive_struct_sub.is_sno = incentive_structure.sno WHERE (incentive_structure.sno = @structuresno)");
                cmd.Parameters.AddWithValue("@structuresno", refnum);
                DataTable dt = vdbmngr.SelectQuery(cmd).Tables[0];
                foreach (DataRow dr in dt.Rows)
                {
                    divproductsclubbing Getproductclubbings = new divproductsclubbing();

                    Getproductclubbings.clubsno = dr["sno"].ToString();
                    Getproductclubbings.clubName = dr["ClubName"].ToString();
                    divselectedclubbinglist.Add(Getproductclubbings);
                }
            }
            string response = GetJson(divselectedclubbinglist);
            context.Response.Write(response);
        }
        catch
        {

        }
    }
    private void BtnVarifyVehicleClick(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            string gatepasssno = context.Request["gatepasssno"];
            string UserID = context.Session["UserSno"].ToString();
            DateTime ServerDateCurrentdate = VehicleDBMgr.GetTime(vdbmngr.conn);
            cmd = new MySqlCommand("update gatepassdeatails set Status=@Status , verifydate=@verifydate,modifyby=@modifyby where Sno=@Sno");
            cmd.Parameters.AddWithValue("@verifydate", ServerDateCurrentdate);
            cmd.Parameters.AddWithValue("@Status", "V");
            cmd.Parameters.AddWithValue("@modifyby", UserID);
            cmd.Parameters.AddWithValue("@Sno", gatepasssno);
            vdbmngr.Update(cmd);
            string msg = "GatePass Varified Successfully";
            string response = GetJson(msg);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string msg = ex.ToString();
            string response = GetJson(msg);
            context.Response.Write(response);
        }
    }
    public class Userdetails
    {
        public string Sno { get; set; }
        public string Date { get; set; }
        public string Time { get; set; }
        public string UserName { get; set; }
        public string VehicleNo { get; set; }
        public string DCNo { get; set; }
    }
    private void GetGatePassDetails(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            DataTable dtdetails = new DataTable();
            string gatepasssno = context.Request["gatepasssno"];
            DataTable Report = new DataTable();
            Report.Columns.Add("Sno");
            Report.Columns.Add("InvName");
            Report.Columns.Add("Invno");
            Report.Columns.Add("Qty");
            cmd = new MySqlCommand("SELECT gatepassdeatails.sno, gatepassdeatails.doe, gatepassdeatails.vehicleno, gatepassdeatails.routename, gatepassdeatails.partyname, tripdata.Sno AS tripSno, tripdata.BranchID, tripdata.DCNo, SUM(tripinvdata.Qty) AS Qty, invmaster.InvName,invmaster.sno as invid  FROM  tripdata INNER JOIN gatepass_subtable ON tripdata.Sno = gatepass_subtable.refdcno INNER JOIN gatepassdeatails ON gatepass_subtable.gatepass_refno = gatepassdeatails.sno INNER JOIN tripinvdata ON tripdata.Sno = tripinvdata.Tripdata_sno INNER JOIN invmaster ON tripinvdata.invid = invmaster.sno WHERE (gatepassdeatails.sno = @GatePassID) and (gatepassdeatails.status='A') GROUP BY invmaster.InvName");
            cmd.Parameters.AddWithValue("@GatePassID", gatepasssno);
            dtdetails = vdbmngr.SelectQuery(cmd).Tables[0];
            int i = 1;
            foreach (DataRow dr in dtdetails.Rows)
            {
                DataRow newrow = Report.NewRow();
                newrow["Sno"] = i++.ToString();
                newrow["InvName"] = dr["InvName"].ToString();
                newrow["Invno"] = dr["invid"].ToString();
                newrow["Qty"] = dr["Qty"].ToString();
                Report.Rows.Add(newrow);
            }
            cmd = new MySqlCommand("SELECT tripdata.VehicleNo,tripdata.DispTime,tripdata.Sno, tripdata.EmpId, tripdata.DCNo,gatepassdeatails.routename,gatepassdeatails.Partyname, tripdata.BranchID FROM  gatepassdeatails INNER JOIN gatepass_subtable ON gatepassdeatails.sno = gatepass_subtable.gatepass_refno INNER JOIN  tripdata ON gatepass_subtable.refdcno = tripdata.Sno WHERE (gatepassdeatails.sno = @GatePassID) and (gatepassdeatails.status='A')");
            cmd.Parameters.AddWithValue("@GatePassID", gatepasssno);
            DataTable dtUserdetails = vdbmngr.SelectQuery(cmd).Tables[0];
            int k = 1;
            List<Userdetails> Userdetailslist = new List<Userdetails>();
            foreach (DataRow dr in dtUserdetails.Rows)
            {
                DataRow newrow = Report.NewRow();
                newrow["Sno"] = k++.ToString();
                newrow["InvName"] = "Ref Dc No";
                newrow["Invno"] = "0";
                newrow["Qty"] = dr["Sno"].ToString();
                Report.Rows.Add(newrow);
                DataRow newrow1 = Report.NewRow();
                newrow1["Sno"] = k++.ToString();
                newrow1["InvName"] = "Dc No";
                newrow1["Invno"] = "0";
                string BranchId = dr["BranchID"].ToString();
                string DcNo = dr["DCNo"].ToString();
                if (BranchId == "172")
                {
                    DcNo = "P" + DcNo;
                }
                if (BranchId == "1801")
                {
                    DcNo = "K" + DcNo;
                }
                else if (BranchId == "158")
                {
                    DcNo = "W" + DcNo;
                }
                else if (BranchId == "174")
                {
                    DcNo = "CSO" + DcNo;
                }
                else if (BranchId == "285")
                {
                    DcNo = "TPT" + DcNo;
                }
                else if (BranchId == "282")
                {
                    DcNo = "SKHT" + DcNo;
                }
                else if (BranchId == "271")
                {
                    DcNo = "NLR" + DcNo;
                }
                else if (BranchId == "306")
                {
                    DcNo = "KANCHI" + DcNo;
                }
                else if (BranchId == "570")
                {
                    DcNo = "VJD" + DcNo;
                }
                else if (BranchId == "3")
                {
                    DcNo = "KHM" + DcNo;
                }
                else if (BranchId == "159")
                {
                    DcNo = "HYD" + DcNo;
                }
                else if (BranchId == "457")
                {
                    DcNo = "WGL" + DcNo;
                }
                else if (BranchId == "538")
                {
                    DcNo = "BNGLR" + DcNo;
                }
                else if (BranchId == "527")
                {
                    DcNo = "PNR" + DcNo;
                }
                newrow1["Qty"] = DcNo;
                Report.Rows.Add(newrow1);
            }
            List<Dispatchdetails> Dispatchlist = new List<Dispatchdetails>();
            if (Report.Rows.Count > 0)
            {
                foreach (DataRow dr in Report.Rows)
                {
                    Dispatchdetails getdetails = new Dispatchdetails();
                    getdetails.Sno = dr["Sno"].ToString();
                    getdetails.InvName = dr["InvName"].ToString();
                    getdetails.Invno = dr["Invno"].ToString();
                    getdetails.Qty = dr["Qty"].ToString();
                    Dispatchlist.Add(getdetails);
                }

                string response = GetJson(Dispatchlist);
                context.Response.Write(response);
            }
            else
            {
                string msg = "No data found";
                string response = GetJson(msg);
                context.Response.Write(response);
            }
        }
        catch
        {
        }
    }
    public class Dispatchdetails
    {
        public string Sno { get; set; }
        public string InvName { get; set; }
        public string Invno { get; set; }
        public string Qty { get; set; }
    }
    private void GetDispatchVehicleNos(HttpContext context)
    {
        try
        {
            if (context.Session["branch"] == null)
            {
                string errmsg = "Session Expired";
                string errresponse = GetJson(errmsg);
                context.Response.Write(errresponse);
            }
            else
            {
                DataTable dtVehicles = new DataTable();
                vdbmngr = new VehicleDBMgr();
                cmd = new MySqlCommand("SELECT VehicleNo, Capacity, BranchID FROM vehiclemaster where BranchID=@BranchID");
                cmd.Parameters.AddWithValue("@BranchID", context.Session["branch"].ToString());
                dtVehicles = vdbmngr.SelectQuery(cmd).Tables[0];
                List<Vehiclenos> Vehiclelist = new List<Vehiclenos>();
                if (dtVehicles.Rows.Count > 0)
                {
                    foreach (DataRow dr in dtVehicles.Rows)
                    {
                        string VehicleNo = dr["VehicleNo"].ToString();
                        if (VehicleNo != "")
                        {
                            Vehiclenos GetVehicle = new Vehiclenos() { DCno = dr["VehicleNo"].ToString(), VehicleNo = dr["VehicleNo"].ToString() };
                            Vehiclelist.Add(GetVehicle);
                        }
                    }
                }
                string response = GetJson(Vehiclelist);
                context.Response.Write(response);
            }
        }
        catch
        {
        }
    }
    public class Vehiclenos
    {
        public string DCno { get; set; }
        public string VehicleNo { get; set; }
    }
    private void GetCsodispatchRoutes(HttpContext context)
    {
        try
        {
            if (context.Session["branch"] == null)
            {
                string errmsg = "Session Expired";
                string errresponse = GetJson(errmsg);
                context.Response.Write(errresponse);
            }
            else
            {
                vdbmngr = new VehicleDBMgr();
                DataTable dtBranch = new DataTable();
                if (context.Session["dtBranch"] == null)
                {
                    cmd = new MySqlCommand("SELECT DispName, sno FROM dispatch WHERE (Branch_Id = @Branch_Id) GROUP BY DispName");
                    cmd.Parameters.AddWithValue("@Branch_Id", context.Session["branch"].ToString());
                    dtBranch = vdbmngr.SelectQuery(cmd).Tables[0];
                }
                else
                {
                    dtBranch = (DataTable)context.Session["dtBranch"];
                }
                List<SORoute> Routelist = new List<SORoute>();
                foreach (DataRow dr in dtBranch.Rows)
                {
                    SORoute b = new SORoute() { rid = dr["sno"].ToString(), RouteName = dr["DispName"].ToString() };
                    Routelist.Add(b);
                }
                string response = GetJson(Routelist);
                context.Response.Write(response);
            }
        }
        catch
        {
        }
    }
    class SORoute
    {
        public string rid { set; get; }
        public string RouteName { set; get; }
        public string BranchID { set; get; }
    }
    private void btnReturnsVarifySaveClick(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            if (context.Session["userdata_sno"] == null)
            {
                string errmsg = "Session Expired";
                string errresponse = GetJson(errmsg);
                context.Response.Write(errresponse);
            }
            else
            {
                string Username = context.Session["userdata_sno"].ToString();
                DateTime ServerDateCurrentdate = VehicleDBMgr.GetTime(vdbmngr.conn);
                var js = new JavaScriptSerializer();
                var title1 = context.Request.Params[1];
                Orders obj = js.Deserialize<Orders>(title1);
                foreach (RouteLeakdetails o in obj.RouteLeakdetails)
                {
                    if (o.ProductID != null)
                    {
                        cmd = new MySqlCommand("Update Leakages set Vreturns=@Vreturns,VarifyReturnStatus=@VarifyReturnStatus,ReturnRemarks=@ReturnRemarks  where ProductID=@ProductID and TripID=@TripID");
                        float ReturnQty = 0;
                        float.TryParse(o.ReturnsQty, out ReturnQty);
                        cmd.Parameters.AddWithValue("@Vreturns", ReturnQty);
                        cmd.Parameters.AddWithValue("@ProductID", o.ProductID);
                        cmd.Parameters.AddWithValue("@TripID", o.TripID);
                        cmd.Parameters.AddWithValue("@VarifyReturnStatus", 'V');
                        cmd.Parameters.AddWithValue("@ReturnRemarks", o.ReturnRemarks);
                        if (vdbmngr.Update(cmd) == 0)
                        {
                            if (ReturnQty == 0)
                            {

                            }
                            else
                            {
                                cmd = new MySqlCommand("insert into Leakages (TripID,ProductID,Vreturns,VarifyReturnStatus,ReturnRemarks) values (@TripID,@ProductID,@Vreturns,@VarifyReturnStatus,@ReturnRemarks)");
                                cmd.Parameters.AddWithValue("@TripID", o.TripID);
                                cmd.Parameters.AddWithValue("@ProductID", o.ProductID);
                                cmd.Parameters.AddWithValue("@VarifyReturnStatus", 'V');
                                cmd.Parameters.AddWithValue("@Vreturns", ReturnQty);
                                cmd.Parameters.AddWithValue("@ReturnRemarks", o.ReturnRemarks);
                                vdbmngr.insert(cmd);
                            }
                        }
                    }
                }
            }
            string msg = "Returns Verified successfully";
            string response = GetJson(msg);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string msg = ex.ToString();
            string response = GetJson(msg);
            context.Response.Write(response);
        }
    }
    private void GetVerifyInventory(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            List<DispatchInventory> Inventorylist = new List<DispatchInventory>();
            if (context.Session["userdata_sno"] == null)
            {
                string errmsg = "Session Expired";
                string errresponse = GetJson(errmsg);
                context.Response.Write(errresponse);
            }
            else
            {
                string RouteSno = context.Request["RouteSno"];
                string tripSno = context.Request["tripsno"];
                cmd = new MySqlCommand("select DispType from dispatch where sno=@DispSno");
                cmd.Parameters.AddWithValue("@DispSno", RouteSno);
                DataTable DtDispSno = vdbmngr.SelectQuery(cmd).Tables[0];
                string DispType = DtDispSno.Rows[0]["DispType"].ToString();
                if (DispType == "SM")
                {
                    cmd = new MySqlCommand("SELECT invtransactions12.B_Inv_Sno,dispatch.sno, dispatch.DispName, invtransactions12.Qty, invmaster.InvName, invtransactions12.VarifyStatus,invtransactions12.Qty, invtransactions12.FromTran AS TripID FROM dispatch INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN invtransactions12 ON tripdata.Sno = invtransactions12.FromTran INNER JOIN invmaster ON invtransactions12.B_inv_sno = invmaster.sno WHERE (invtransactions12.FromTran = @TripID) AND (invtransactions12.VarifyStatus = @VarifyStatus) GROUP BY invmaster.InvName ORDER BY invmaster.sno");

                }
                else
                {
                    cmd = new MySqlCommand("SELECT invtransactions12.B_Inv_Sno,dispatch.sno, invmaster.InvName, invtransactions12.VarifyStatus, invtransactions12.Qty,dispatch.DispName, invtransactions12.ToTran AS TripID FROM dispatch INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN invtransactions12 ON tripdata.Sno = invtransactions12.ToTran INNER JOIN invmaster ON invtransactions12.B_inv_sno = invmaster.sno WHERE (invtransactions12.ToTran = @TripID) AND (invtransactions12.VarifyStatus = @VarifyStatus) GROUP BY invmaster.InvName");
                }
                cmd.Parameters.AddWithValue("@TripID", tripSno);
                cmd.Parameters.AddWithValue("@VarifyStatus", 'P');
                DataTable DtReport = vdbmngr.SelectQuery(cmd).Tables[0];
                context.Session["dtInventory"] = DtReport;
                if (DtReport.Rows.Count > 0)
                {
                    int i = 1;
                    foreach (DataRow dr in DtReport.Rows)
                    {
                        DispatchInventory GetInventory = new DispatchInventory();
                        GetInventory.Sno = i++.ToString();
                        GetInventory.InvName = dr["InvName"].ToString();
                        GetInventory.InvSno = dr["B_Inv_Sno"].ToString();
                        GetInventory.EmpName = dr["DispName"].ToString();
                        GetInventory.Invqty = dr["Qty"].ToString();
                        GetInventory.TripId = dr["TripID"].ToString();
                        Inventorylist.Add(GetInventory);
                    }
                    string response = GetJson(Inventorylist);
                    context.Response.Write(response);
                }
                else
                {
                    if (DispType == "SM")
                    {
                        cmd = new MySqlCommand("SELECT invtransactions12.B_Inv_Sno,dispatch.sno, dispatch.DispName, invtransactions12.Qty, invmaster.InvName, invtransactions12.VarifyStatus,invtransactions12.Qty, invtransactions12.FromTran AS TripID FROM dispatch INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN invtransactions12 ON tripdata.Sno = invtransactions12.FromTran INNER JOIN invmaster ON invtransactions12.B_inv_sno = invmaster.sno WHERE (dispatch.sno = @dispatchsno) AND (invtransactions12.VarifyStatus = @VarifyStatus) GROUP BY invmaster.InvName ORDER BY invmaster.sno");

                    }
                    else
                    {
                        cmd = new MySqlCommand("SELECT invtransactions12.B_Inv_Sno,dispatch.sno, invmaster.InvName, invtransactions12.VarifyStatus, invtransactions12.Qty,dispatch.DispName, invtransactions12.ToTran AS TripID FROM dispatch INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN invtransactions12 ON tripdata.Sno = invtransactions12.ToTran INNER JOIN invmaster ON invtransactions12.B_inv_sno = invmaster.sno WHERE (invtransactions12.ToTran = @tripid) AND (invtransactions12.VarifyStatus = @VarifyStatus) GROUP BY invmaster.InvName");
                    }
                    cmd.Parameters.AddWithValue("@tripid", tripSno);
                    cmd.Parameters.AddWithValue("@VarifyStatus", 'V');
                    DataTable Dtverinv = vdbmngr.SelectQuery(cmd).Tables[0];
                    if (Dtverinv.Rows.Count > 0)
                    {

                    }
                    else
                    {
                        cmd = new MySqlCommand("SELECT invmaster.sno, invmaster.InvName, dispatch.sno AS dispsno, dispatch.DispName FROM dispatch INNER JOIN inventory_monitor ON dispatch.BranchID = inventory_monitor.BranchId INNER JOIN invmaster ON inventory_monitor.Inv_Sno = invmaster.sno WHERE (dispatch.sno = @dispsno)");
                        cmd.Parameters.AddWithValue("@dispsno", RouteSno);
                        DataTable dtinventory = vdbmngr.SelectQuery(cmd).Tables[0];
                        int i = 1;
                        foreach (DataRow dr in dtinventory.Rows)
                        {
                            if (dr["sno"].ToString() == "6" || dr["sno"].ToString() == "7" || dr["sno"].ToString() == "8")
                            {

                            }
                            else
                            {
                                DispatchInventory GetInventory = new DispatchInventory();
                                GetInventory.Sno = i++.ToString();
                                GetInventory.InvName = dr["InvName"].ToString();
                                GetInventory.InvSno = dr["sno"].ToString();
                                GetInventory.EmpName = dr["DispName"].ToString();
                                GetInventory.Invqty = "0";
                                GetInventory.TripId = tripSno;
                                Inventorylist.Add(GetInventory);
                            }

                        }
                    }

                    string response = GetJson(Inventorylist);
                    context.Response.Write(response);
                }
            }
        }
        catch
        {
        }
    }
    private void btnLeakVarifySaveClick(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            if (context.Session["userdata_sno"] == null)
            {
                string errmsg = "Session Expired";
                string errresponse = GetJson(errmsg);
                context.Response.Write(errresponse);
            }
            else
            {
                string Username = context.Session["userdata_sno"].ToString();
                DateTime ServerDateCurrentdate = VehicleDBMgr.GetTime(vdbmngr.conn);
                var js = new JavaScriptSerializer();
                var title1 = context.Request.Params[1];
                Orders obj = js.Deserialize<Orders>(title1);
                foreach (RouteLeakdetails o in obj.RouteLeakdetails)
                {
                    if (o.ProductID != null)
                    {
                        cmd = new MySqlCommand("Update Leakages set VLeaks=@VLeaks,VarifyStatus=@VarifyStatus,LeakRemarks=@LeakRemarks  where ProductID=@ProductID and TripID=@TripID");
                        float TotalLeaks = 0;
                        float.TryParse(o.LeaksQty, out TotalLeaks);
                        cmd.Parameters.AddWithValue("@VLeaks", TotalLeaks);
                        cmd.Parameters.AddWithValue("@ProductID", o.ProductID);
                        cmd.Parameters.AddWithValue("@TripID", o.TripID);
                        cmd.Parameters.AddWithValue("@VarifyStatus", 'V');
                        cmd.Parameters.AddWithValue("@LeakRemarks", o.Remarks);
                        if (vdbmngr.Update(cmd) == 0)
                        {
                            if (TotalLeaks == 0)
                            {

                            }
                            else
                            {
                                cmd = new MySqlCommand("insert into Leakages (TripID,ProductID,TotalLeaks,VarifyStatus,VLeaks,LeakRemarks) values (@TripID,@ProductID,@TotalLeaks,@VarifyStatus,@VLeaks,@LeakRemarks)");
                                cmd.Parameters.AddWithValue("@TripID", o.TripID);
                                cmd.Parameters.AddWithValue("@ProductID", o.ProductID);
                                float totleaks = 0;
                                cmd.Parameters.AddWithValue("@TotalLeaks", totleaks);
                                cmd.Parameters.AddWithValue("@VarifyStatus", 'V');
                                cmd.Parameters.AddWithValue("@VLeaks", TotalLeaks);
                                cmd.Parameters.AddWithValue("@LeakRemarks", o.Remarks);
                                vdbmngr.insert(cmd);
                            }

                        }
                    }
                }
            }
            string msg = "Leaks Verified successfully";
            string response = GetJson(msg);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string msg = ex.ToString();
            string response = GetJson(msg);
            context.Response.Write(response);
        }
    }
    private void GetVerifyReturns(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            if (context.Session["userdata_sno"] == null)
            {
                string errmsg = "Session Expired";
                string errresponse = GetJson(errmsg);
                context.Response.Write(errresponse);
            }
            else
            {
                string RouteSno = context.Request["RouteSno"];
                string tripno = context.Request["tripsno"];
                List<VarifyReturnLeak> GetVarifyReturnLeaklist = new List<VarifyReturnLeak>();
                cmd = new MySqlCommand("SELECT tripdata.Sno, leakages.ReturnQty, leakages.ProductID, productsdata.ProductName, dispatch.DispName FROM dispatch INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN leakages ON tripdata.Sno = leakages.TripID INNER JOIN productsdata ON leakages.ProductID = productsdata.sno WHERE (leakages.VarifyReturnStatus = @VarifyReturnStatus) AND (leakages.TripID = @tripid)");
                cmd.Parameters.AddWithValue("@tripid", tripno);
                cmd.Parameters.AddWithValue("@VarifyReturnStatus", 'P');
                DataTable dtVarifyReturns = vdbmngr.SelectQuery(cmd).Tables[0];
                if (dtVarifyReturns.Rows.Count > 0)
                {
                    int i = 1;
                    foreach (DataRow dr in dtVarifyReturns.Rows)
                    {
                        VarifyReturnLeak GetVarifyReturnLeak = new VarifyReturnLeak();
                        GetVarifyReturnLeak.Sno = i++.ToString();
                        GetVarifyReturnLeak.ProdId = dr["ProductID"].ToString();
                        GetVarifyReturnLeak.ProdName = dr["ProductName"].ToString();
                        float ReturnQty = 0;
                        float.TryParse(dr["ReturnQty"].ToString(), out ReturnQty);
                        GetVarifyReturnLeak.Returns = ReturnQty.ToString();
                        GetVarifyReturnLeak.Trip = dr["Sno"].ToString();
                        GetVarifyReturnLeak.EmpName = dr["DispName"].ToString();
                        GetVarifyReturnLeaklist.Add(GetVarifyReturnLeak);
                    }
                }
                else
                {
                    cmd = new MySqlCommand("SELECT tripdata.Sno, leakages.ReturnQty, leakages.ProductID, productsdata.ProductName, dispatch.DispName FROM dispatch INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN leakages ON tripdata.Sno = leakages.TripID INNER JOIN productsdata ON leakages.ProductID = productsdata.sno WHERE (leakages.VarifyReturnStatus = @VarifyReturnStatus) AND (leakages.TripID = @tripid)");
                    cmd.Parameters.AddWithValue("@tripid", tripno);
                    cmd.Parameters.AddWithValue("@VarifyReturnStatus", 'V');
                    DataTable dtVarReturns = vdbmngr.SelectQuery(cmd).Tables[0];
                    if (dtVarReturns.Rows.Count > 0)
                    {

                    }
                    else
                    {
                        cmd = new MySqlCommand("SELECT productsdata.ProductName, dispatch.DispName, branchproducts.product_sno, dispatch.BranchID FROM branchproducts INNER JOIN productsdata ON branchproducts.product_sno = productsdata.sno INNER JOIN dispatch ON branchproducts.branch_sno = dispatch.BranchID WHERE (dispatch.sno = @dispsno) ORDER BY branchproducts.Rank");
                        cmd.Parameters.AddWithValue("@dispsno", RouteSno);
                        DataTable dtLeaks = vdbmngr.SelectQuery(cmd).Tables[0];
                        int i = 1;
                        foreach (DataRow dr in dtLeaks.Rows)
                        {
                            VarifyReturnLeak GetVarifyReturnLeak = new VarifyReturnLeak();
                            GetVarifyReturnLeak.Sno = i++.ToString();
                            GetVarifyReturnLeak.ProdId = dr["product_sno"].ToString();
                            GetVarifyReturnLeak.ProdName = dr["ProductName"].ToString();
                            float ReturnQty = 0;
                            GetVarifyReturnLeak.Returns = ReturnQty.ToString();
                            GetVarifyReturnLeak.Trip = tripno;
                            GetVarifyReturnLeak.EmpName = dr["DispName"].ToString();
                            GetVarifyReturnLeaklist.Add(GetVarifyReturnLeak);
                        }
                    }

                }
                string response = GetJson(GetVarifyReturnLeaklist);
                context.Response.Write(response);
            }
        }
        catch
        {
        }
    }
    private void GetVerifyLeaks(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            if (context.Session["userdata_sno"] == null)
            {
                string errmsg = "Session Expired";
                string errresponse = GetJson(errmsg);
                context.Response.Write(errresponse);
            }
            else
            {
                string RouteSno = context.Request["RouteSno"];
                string tripid = context.Request["tripsno"];
                List<VarifyReturnLeak> GetVarifyReturnLeaklist = new List<VarifyReturnLeak>();
                cmd = new MySqlCommand("SELECT tripdata.Sno, leakages.TotalLeaks, leakages.ProductID, productsdata.ProductName, dispatch.DispName FROM dispatch INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN leakages ON tripdata.Sno = leakages.TripID INNER JOIN productsdata ON leakages.ProductID = productsdata.sno WHERE (leakages.TripID = @tripid) AND (leakages.VarifyStatus = @VarifyStatus)");
                cmd.Parameters.AddWithValue("@tripid", tripid);
                cmd.Parameters.AddWithValue("@VarifyStatus", 'P');
                DataTable dtVarifyLeaks = vdbmngr.SelectQuery(cmd).Tables[0];
                if (dtVarifyLeaks.Rows.Count > 0)
                {
                    int i = 1;
                    foreach (DataRow dr in dtVarifyLeaks.Rows)
                    {
                        VarifyReturnLeak GetVarifyReturnLeak = new VarifyReturnLeak();
                        GetVarifyReturnLeak.Sno = i++.ToString();
                        GetVarifyReturnLeak.ProdId = dr["ProductID"].ToString();
                        GetVarifyReturnLeak.ProdName = dr["ProductName"].ToString();
                        float LeakQty = 0;
                        float.TryParse(dr["TotalLeaks"].ToString(), out LeakQty);
                        GetVarifyReturnLeak.Leaks = LeakQty.ToString();
                        GetVarifyReturnLeak.Trip = dr["Sno"].ToString();
                        GetVarifyReturnLeak.EmpName = dr["DispName"].ToString();
                        GetVarifyReturnLeaklist.Add(GetVarifyReturnLeak);
                    }
                }
                else
                {

                    cmd = new MySqlCommand("SELECT tripdata.Sno, leakages.TotalLeaks, leakages.ProductID, productsdata.ProductName, dispatch.DispName FROM dispatch INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN leakages ON tripdata.Sno = leakages.TripID INNER JOIN productsdata ON leakages.ProductID = productsdata.sno WHERE (leakages.TripID = @tripid) AND (leakages.VarifyStatus = @VarifyStatus)");
                    cmd.Parameters.AddWithValue("@tripid", tripid);
                    cmd.Parameters.AddWithValue("@VarifyStatus", 'V');
                    DataTable dtVarLeaks = vdbmngr.SelectQuery(cmd).Tables[0];
                    if (dtVarLeaks.Rows.Count > 0)
                    {

                    }
                    else
                    {
                        cmd = new MySqlCommand("SELECT productsdata.ProductName, dispatch.DispName, branchproducts.product_sno, dispatch.BranchID FROM branchproducts INNER JOIN productsdata ON branchproducts.product_sno = productsdata.sno INNER JOIN dispatch ON branchproducts.branch_sno = dispatch.BranchID WHERE (dispatch.sno = @dispsno) ORDER BY branchproducts.Rank");
                        cmd.Parameters.AddWithValue("@dispsno", RouteSno);
                        DataTable dtLeaks = vdbmngr.SelectQuery(cmd).Tables[0];
                        int i = 1;
                        foreach (DataRow dr in dtLeaks.Rows)
                        {
                            VarifyReturnLeak GetVarifyReturnLeak = new VarifyReturnLeak();
                            GetVarifyReturnLeak.Sno = i++.ToString();
                            GetVarifyReturnLeak.ProdId = dr["product_sno"].ToString();
                            GetVarifyReturnLeak.ProdName = dr["ProductName"].ToString();
                            float LeakQty = 0;
                            GetVarifyReturnLeak.Leaks = LeakQty.ToString();
                            GetVarifyReturnLeak.Trip = tripid;
                            GetVarifyReturnLeak.EmpName = dr["DispName"].ToString();
                            GetVarifyReturnLeaklist.Add(GetVarifyReturnLeak);
                        }
                    }
                }
                string response = GetJson(GetVarifyReturnLeaklist);
                context.Response.Write(response);
            }
        }
        catch
        {
        }
    }
    class VarifyReturnLeak
    {
        public string Sno { get; set; }
        public string ProdId { get; set; }
        public string ProdName { get; set; }
        public string Returns { get; set; }
        public string Leaks { get; set; }
        public string Trip { get; set; }
        public string EmpName { get; set; }
    }
    private void btnInventoryVerifySaveClick(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            if (context.Session["userdata_sno"] == null)
            {
                string errmsg = "Session Expired";
                string errresponse = GetJson(errmsg);
                context.Response.Write(errresponse);
            }
            else
            {
                string Username = context.Session["userdata_sno"].ToString();
                string frmdate = context.Session["IndentDate"].ToString();
                string DispatchStatus = context.Session["DispatchStatus"].ToString();
                DateTime IndentDate = Convert.ToDateTime(frmdate);
                DateTime ServerDateCurrentdate = VehicleDBMgr.GetTime(vdbmngr.conn);
                var js = new JavaScriptSerializer();
                var title1 = context.Request.Params[1];
                Orders obj = js.Deserialize<Orders>(title1);
                string tripid = "";
                foreach (InvDatails o in obj.InvDatails)
                {
                    if (o.SNo != null)
                    {
                        cmd = new MySqlCommand("update tripdata set status=@status ,Cdate=@Cdate where Sno=@Sno");
                        cmd.Parameters.AddWithValue("@status", 'V');
                        int TripID = 0;
                        int.TryParse(o.TripID, out TripID);
                        cmd.Parameters.AddWithValue("@Sno", TripID);
                        cmd.Parameters.AddWithValue("@Cdate", ServerDateCurrentdate);
                        vdbmngr.Update(cmd);
                        DataTable dtInventory = new DataTable();
                        cmd = new MySqlCommand("Update invtransactions12 set VarifyStatus=@VarifyStatus,VQty=@VQty,VEmpID=@VEmpID,Remarks=@Remarks where B_Inv_Sno=@B_Inv_Sno and  ToTran=@tripId and VarifyStatus=@PStatus");
                        cmd.Parameters.AddWithValue("@B_Inv_Sno", o.SNo);
                        cmd.Parameters.AddWithValue("@VarifyStatus", "V");
                        cmd.Parameters.AddWithValue("@PStatus", "P");
                        cmd.Parameters.AddWithValue("@VQty", o.Qty);
                        cmd.Parameters.AddWithValue("@tripId", o.TripID);
                        cmd.Parameters.AddWithValue("@VEmpID", context.Session["UserSno"].ToString());
                        cmd.Parameters.AddWithValue("@Remarks", o.Remarks);
                        tripid = o.TripID;
                        if (vdbmngr.Update(cmd) == 0)
                        {
                            cmd = new MySqlCommand("SELECT tripdata.Sno, dispatch.DispName, dispatch.BranchID FROM dispatch INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno WHERE (tripdata.Sno = @tripid)");
                            cmd.Parameters.AddWithValue("@tripid", o.TripID);
                            DataTable dtsobrnchid = vdbmngr.SelectQuery(cmd).Tables[0];
                            string sobrnchid = dtsobrnchid.Rows[0]["BranchID"].ToString();
                            cmd = new MySqlCommand("insert into invtransactions12 (TransType,FromTran,ToTran,Qty,VarifyStatus,VQty,VEmpID,B_inv_sno,Remarks) values (@TransType,@FromTran,@ToTran,@Qty,@VarifyStatus,@VQty,@VEmpID,@B_inv_sno,@Remarks)");
                            cmd.Parameters.AddWithValue("@TransType", "3");
                            cmd.Parameters.AddWithValue("@FromTran", sobrnchid);
                            cmd.Parameters.AddWithValue("@ToTran", o.TripID);
                            cmd.Parameters.AddWithValue("@Qty", "0");
                            cmd.Parameters.AddWithValue("@VarifyStatus", "V");
                            cmd.Parameters.AddWithValue("@VQty", o.Qty);
                            cmd.Parameters.AddWithValue("@VEmpID", context.Session["UserSno"].ToString());
                            cmd.Parameters.AddWithValue("@B_inv_sno", o.SNo);
                            cmd.Parameters.AddWithValue("@Remarks", o.Remarks);
                            vdbmngr.insert(cmd);
                        }
                        cmd = new MySqlCommand("Update Inventory_monitor set Qty=Qty+@Qty,Indent_Date=@Indent_Date where Inv_Sno=@Inv_Sno and  BranchID=@BranchID");
                        cmd.Parameters.AddWithValue("@Qty", o.Qty);
                        cmd.Parameters.AddWithValue("@Indent_Date", IndentDate);
                        cmd.Parameters.AddWithValue("@Inv_Sno", o.SNo);
                        cmd.Parameters.AddWithValue("@BranchID", context.Session["branch"].ToString());
                        cmd.Parameters.AddWithValue("@status", DispatchStatus);
                        if (vdbmngr.Update(cmd) == 0)
                        {
                            cmd = new MySqlCommand("insert into Inventory_monitor (Qty,Inv_Sno,BranchID,Indent_Date,status) values(@Qty,@Inv_Sno,@BranchID,@Indent_Date,@status)");
                            cmd.Parameters.AddWithValue("@Qty", o.Qty);
                            cmd.Parameters.AddWithValue("@Inv_Sno", o.SNo);
                            cmd.Parameters.AddWithValue("@BranchID", context.Session["branch"].ToString());
                            cmd.Parameters.AddWithValue("@Indent_Date", IndentDate);
                            cmd.Parameters.AddWithValue("@status", DispatchStatus);
                            vdbmngr.insert(cmd);
                        }
                        //}
                    }
                }
                cmd = new MySqlCommand("SELECT tripdata.AssignDate, tripdata.DCNo, triproutes.RouteID, dispatch.DispName, dispatch.BranchID, mobilenotable.EmailID FROM triproutes INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN dispatch ON triproutes.RouteID = dispatch.sno INNER JOIN mobilenotable ON dispatch.sno = mobilenotable.DispNo WHERE (tripdata.Sno = @tripid) AND (mobilenotable.EmailID IS NOT NULL)");
                cmd.Parameters.AddWithValue("@tripid", tripid);
                DataTable dtdispatchdetails = vdbmngr.SelectQuery(cmd).Tables[0];
                if (dtdispatchdetails.Rows.Count > 0)
                {
                    string dispatchname = dtdispatchdetails.Rows[0]["DispName"].ToString();
                    string dispatchSOBranch = dtdispatchdetails.Rows[0]["BranchID"].ToString();
                    string DCNO = dtdispatchdetails.Rows[0]["DCNo"].ToString();
                    string DC_DATE = dtdispatchdetails.Rows[0]["AssignDate"].ToString();
                    string emailid = dtdispatchdetails.Rows[0]["EmailID"].ToString();
                    cmd = new MySqlCommand("SELECT invmaster.InvName AS INVENTORY_NAME, invtransactions12.Qty AS SUBMITTED_QTY, invtransactions12.VQty AS VERIFIED_QTY, invtransactions12.Remarks AS REMARKS FROM invtransactions12 INNER JOIN invmaster ON invtransactions12.B_inv_sno = invmaster.sno WHERE (invtransactions12.ToTran = @ToTran) AND (invtransactions12.FromTran = @BranchID)");
                    cmd.Parameters.AddWithValue("@BranchID", dispatchSOBranch);
                    cmd.Parameters.AddWithValue("@ToTran", tripid);
                    DataTable dtinventoryverified = vdbmngr.SelectQuery(cmd).Tables[0];
                    cmd = new MySqlCommand("SELECT leakages.ProductID, productsdata.ProductName, leakages.TotalLeaks, leakages.VLeaks, leakages.LeakRemarks, leakages.ReturnQty, leakages.VReturns,leakages.ReturnRemarks FROM leakages INNER JOIN productsdata ON leakages.ProductID = productsdata.sno WHERE (leakages.TripID = @tripid)");
                    cmd.Parameters.AddWithValue("@tripid", tripid);
                    DataTable dtleaksverified = vdbmngr.SelectQuery(cmd).Tables[0];
                    SendHTMLMail(dtinventoryverified, dtleaksverified, DCNO, DC_DATE, dispatchname, dtdispatchdetails);
                }
                string msg = "Data Saved Successfully";
                string msgresponse = GetJson(msg);
                context.Response.Write(msgresponse);
            }
        }
        catch (Exception ex)
        {
            string msg = ex.ToString();
            string msgresponse = GetJson(msg);
            context.Response.Write(msgresponse);
        }
    }
    private object GetHighDate(string IndentDate)
    {
        throw new NotImplementedException();
    }
    public void SendHTMLMail(DataTable dt, DataTable dtleak, String dcno, String dcdate, String dispatchname, DataTable dtdispatchdetails)
    {
        foreach (DataRow dremail in dtdispatchdetails.Rows)
        {
            string emailid = "";
            emailid = dremail["EmailID"].ToString();
            MailMessage Msg = new MailMessage();
            MailAddress fromMail = new MailAddress("vyshnavidairyinfo@gmail.com");
            // Sender e-mail address.
            Msg.From = fromMail;
            const string password = "vyshnavi123";
            // Recipient e-mail address.
            if (emailid == "")
            {
                emailid = "vyshnavidairyinfo@gmail.com";
            }
            Msg.To.Add(new MailAddress(emailid));
            // Subject of e-mail
            Msg.Subject = "VERIFIED LEAKS AND INVENTORY FOR" + "%20" + dispatchname;
            Msg.Body += "Please check below data<br/><br/>";
            Msg.Body += "DC NO:" + "  " + dcno + "       " + "DC DATE:" + "   " + dcdate;
            Msg.Body += GetdatatableData(dt) + "<br/><br/>" + GetleakdatatableData(dtleak);
            Msg.IsBodyHtml = true;
            string sSmtpServer = "";
            sSmtpServer = "smtp.gmail.com";
            int portNumber = 587;
            SmtpClient a = new SmtpClient(sSmtpServer, portNumber);
            a.Host = sSmtpServer;
            a.Credentials = new NetworkCredential("vyshnavidairyinfo@gmail.com", password);
            a.EnableSsl = true;
            a.Send(Msg);
        }
    }
    public string GetdatatableData(DataTable dtinv)
    {
        StringBuilder strBuilder = new StringBuilder();
        StringWriter strWriter = new StringWriter(strBuilder);
        HtmlTextWriter htw = new HtmlTextWriter(strWriter);
        DataGrid dg = new DataGrid();
        dg.DataSource = dtinv;
        dg.DataBind();
        dg.RenderControl(htw);
        return strBuilder.ToString();
    }
    public string GetleakdatatableData(DataTable dtleaks)
    {
        StringBuilder strBuilder = new StringBuilder();
        StringWriter strWriter = new StringWriter(strBuilder);
        HtmlTextWriter htw = new HtmlTextWriter(strWriter);
        DataGrid dg = new DataGrid();
        dg.DataSource = dtleaks;
        dg.DataBind();
        dg.RenderControl(htw);
        return strBuilder.ToString();
    }
    public class totalplans
    {
        public string productsno { set; get; }
        public string product { set; get; }
        public List<productplans> _productplans = new List<productplans>();
    }
    public class productplans
    {
        public string planname { set; get; }
        public List<slots> _slots = new List<slots>();
    }
    public class slots
    {
        public float slotqty { set; get; }
        public float amount { set; get; }
    }
    class invoiceProducts
    {
        public string Productsno { set; get; }
        public string Productname { set; get; }
        public string Amount { set; get; }
        public string Qty { set; get; }
    }
    private void FillCategeoryname(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            List<string> MsgList = new List<string>();
            if (context.Session["userdata_sno"] == null)
            {
                string errmsg = "Session Expired";
                string errresponse = GetJson(errmsg);
                context.Response.Write(errresponse);
            }
            else
            {
                string username = context.Session["userdata_sno"].ToString();
                cmd = new MySqlCommand("select sno,Categoryname from products_category where flag=@flag and userdata_sno=@username");
                cmd.Parameters.AddWithValue("@username", "1");
                cmd.Parameters.AddWithValue("@flag", "1");
                List<Categoryclass> Categorylist = new List<Categoryclass>();
                foreach (DataRow dr in vdbmngr.SelectQuery(cmd).Tables[0].Rows)
                {
                    Categoryclass getCategory = new Categoryclass();
                    getCategory.sno = dr["sno"].ToString();
                    getCategory.categoryname = dr["Categoryname"].ToString();
                    Categorylist.Add(getCategory);
                }
                if (context.Session["getbranchcategorynames"] == null)
                {
                    cmd = new MySqlCommand("SELECT products_category.Categoryname, products_subcategory.SubCatName,products_subcategory.category_sno,products_subcategory.sno, productsdata.*  FROM productsdata RIGHT OUTER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno RIGHT OUTER JOIN products_category ON products_subcategory.category_sno = products_category.sno WHERE (products_category.flag<>0) AND (products_subcategory.Flag<>0) AND products_category.userdata_sno=@username");
                    cmd.Parameters.AddWithValue("@username", "1");
                    DataTable dt = vdbmngr.SelectQuery(cmd).Tables[0];
                    context.Session["getbranchcategorynames"] = dt;
                    cmd = new MySqlCommand("SELECT productsdata.sno, productsdata.SubCat_sno, productsdata.ProductName, productsdata.Qty, productsdata.Units, productsdata.UnitPrice, productsdata.Flag, productsdata.UserData_sno, products_subcategory.SubCatName FROM products_subcategory RIGHT OUTER JOIN productsdata ON products_subcategory.sno = productsdata.SubCat_sno WHERE (products_subcategory.Flag <> 0) AND productsdata.UserData_sno=@username");
                    //cmd = new MySqlCommand("SELECT products_category.Categoryname, products_subcategory.SubCatName,products_subcategory.category_sno, productsdata.*  FROM productsdata RIGHT OUTER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno RIGHT OUTER JOIN products_category ON products_subcategory.category_sno = products_category.sno WHERE (products_category.flag<>0) AND (products_subcategory.Flag<>0) AND products_category.userdata_sno=@username AND products_subcategory.userdata_sno=@username AND productsdata.UserData_sno=@username");
                    cmd.Parameters.AddWithValue("@username", context.Session["userdata_sno"].ToString());
                    DataTable dt1 = vdbmngr.SelectQuery(cmd).Tables[0];
                    context.Session["getproductsnames"] = dt1;
                }

                string response = GetJson(Categorylist);
                context.Response.Write(response);
            }
        }
        catch
        {
        }
    }
    class Categoryclass
    {
        public string sno { set; get; }
        public string categoryname { set; get; }
    }
    private void GetProductnames(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            DataTable dtproductsdata = new DataTable();
            if (context.Session["dtproductsdata"] == null)
            {
                cmd = new MySqlCommand("SELECT sno, ProductName FROM productsdata ORDER BY sno");
                dtproductsdata = vdbmngr.SelectQuery(cmd).Tables[0];
            }
            else
            {
                dtproductsdata = (DataTable)context.Session["dtproductsdata"];
            }
            if (dtproductsdata.Rows.Count > 0)
            {
                List<ProductsName> Prodlist = new List<ProductsName>();
                foreach (DataRow dr in dtproductsdata.Rows)
                {
                    ProductsName b = new ProductsName() { ProdID = dr["sno"].ToString(), ProdName = dr["ProductName"].ToString() };
                    Prodlist.Add(b);
                }
                string response = GetJson(Prodlist);
                context.Response.Write(response);
            }

        }
        catch
        {
        }
    }
    public class groupvalues
    {
        public string[] Xvalue { get; set; }
        public List<decimal[]> YYvalue { get; set; }
        public string Yvalue { get; set; }
        public List<string> Month { get; set; }
        public List<string> ProductName { get; set; }
    }
    private void getAvglastThreeDaysSaleReport(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            string FDate = context.Request["Fromdate"];
            string TDate = context.Request["Todate"];
            DateTime frmDate = Convert.ToDateTime(FDate);
            DateTime ToDate = Convert.ToDateTime(TDate);
            List<LineChartValuesclass> LineChartValuelist = new List<LineChartValuesclass>();
            DateTime ServerDateCurrentdate = VehicleDBMgr.GetTime(vdbmngr.conn);
            DataTable LeftTable = new DataTable();
            LeftTable = new DataTable();
            LeftTable.Columns.Add("SaleQty");
            LeftTable.Columns.Add("Date");
            LeftTable.Columns.Add("Branch");
            cmd = new MySqlCommand("SELECT ROUND(SUM(tripsubdata.Qty), 2) AS dispatchqty, tripdat.AssignDate FROM (SELECT Sno, EmpId, DATE_FORMAT(AssignDate, '%m %d %y') AS AssignDate FROM tripdata WHERE (AssignDate BETWEEN @d1 AND @d2) AND (BranchID = @BranchID)) tripdat INNER JOIN tripsubdata ON tripdat.Sno = tripsubdata.Tripdata_sno GROUP BY tripdat.AssignDate ORDER BY tripdat.AssignDate");
            cmd.Parameters.AddWithValue("@BranchID", context.Session["branch"].ToString());
            cmd.Parameters.AddWithValue("@d1", GetLowDate(frmDate));
            cmd.Parameters.AddWithValue("@d2", GetHighDate(ToDate));
            DataTable dtble = vdbmngr.SelectQuery(cmd).Tables[0];
            LineChartValuesclass getLineChart = new LineChartValuesclass();
            List<string> unitlist = new List<string>();
            List<string> Deliverlist = new List<string>();
            List<string> Datelist = new List<string>();
            List<string> Statuslist = new List<string>();
            List<string> ActMillist = new List<string>();
            string MainQty = "";
            string DelQty = "";
            string IndDate = "";
            string AvgMileage = "";
            double avgSaleQty = 0;
            int count = 0;
            foreach (DataRow dr in dtble.Rows)
            {
                string unitQty = dr["dispatchqty"].ToString();
                MainQty += unitQty + ",";
                string DeliveryQty = dr["dispatchqty"].ToString();
                DelQty += DeliveryQty + ",";
                double milltr = 0;
                double.TryParse(dr["dispatchqty"].ToString(), out milltr);
                avgSaleQty += milltr;
                string IndentDate = dr["AssignDate"].ToString();
                DateTime dtIndentDate = Convert.ToDateTime(IndentDate).AddDays(1);
                string ChangedTime = dtIndentDate.ToString("dd");
                IndDate += ChangedTime + ",";
                count++;
            }
            double avg = 0;
            avg = (avgSaleQty / count);
            avg = Math.Round(avg, 2);
            foreach (DataRow dr in dtble.Rows)
            {
                string TodayMileage = dr["dispatchqty"].ToString();
                if (TodayMileage != "0")
                {
                    AvgMileage += avg.ToString() + ",";
                }
            }
            AvgMileage = AvgMileage.Substring(0, AvgMileage.Length - 1);
            IndDate = IndDate.Substring(0, IndDate.Length - 1);
            DelQty = DelQty.Substring(0, DelQty.Length - 1);
            Deliverlist.Add(DelQty);
            Deliverlist.Add(AvgMileage);
            Statuslist.Add("Saels");
            Statuslist.Add("Avg Sales");
            getLineChart.IndentDate = IndDate;
            getLineChart.DeliveryQty = Deliverlist;
            getLineChart.UnitQty = MainQty;
            getLineChart.Status = Statuslist;
            getLineChart.ActMileage = ActMillist;
            LineChartValuelist.Add(getLineChart);
            string respnceString = GetJson(LineChartValuelist);
            context.Response.Write(respnceString);
        }
        catch
        {
        }
    }
    public class avgSale
    {
        public string SaleQty { get; set; }
        public string Date { get; set; }
    }
    private void btnChecksVerifySaveClick(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            if (context.Session["userdata_sno"] == null)
            {
                string errmsg = "Session Expired";
                string errresponse = GetJson(errmsg);
                context.Response.Write(errresponse);
            }
            else
            {
                string ddlType = context.Request["ddlType"].ToString();
                string AgentName = context.Request["AgentName"].ToString();

                DateTime ServerDateCurrentdate = VehicleDBMgr.GetTime(vdbmngr.conn);
                if (ddlType == "Cheque")
                {
                    string Username = context.Session["userdata_sno"].ToString();
                    string BranchSno = context.Request["BranchSno"];
                    string ChequeNo = context.Request["ChequeNo"];
                    string Amount = context.Request["Amount"];
                    string Status = context.Request["Status"];
                    string ctype = context.Request["type"];
                    string faaccuntno = context.Request["ddlfaaccno"];
                    string cleardate = context.Request["cleardate"];
                    if (ctype == "Agent")
                    {
                        //cmd = new MySqlCommand("SELECT Branchid, Sno, PaidDate, PaymentType, CheckStatus, ChequeNo, VarifyDate, ChequeDate, BankName,Remarks FROM collections WHERE (Branchid = @Branchid) AND (ChequeNo = @ChequeNo) AND (CheckStatus = 'P')");
                        //11/1/2017
                        cmd = new MySqlCommand("SELECT collections.Branchid, collections.Sno, collections.PaidDate, collections.PaymentType, collections.CheckStatus, collections.ChequeNo, collections.VarifyDate, collections.ChequeDate, collections.BankName,  collections.Remarks, branchmappingtable.SuperBranch FROM collections INNER JOIN branchmappingtable ON collections.Branchid = branchmappingtable.SubBranch WHERE (collections.Branchid = @Branchid) AND (collections.ChequeNo = @ChequeNo) AND (collections.CheckStatus = 'P')");
                        cmd.Parameters.AddWithValue("@Branchid", BranchSno);
                        cmd.Parameters.AddWithValue("@ChequeNo", ChequeNo);
                        DataTable dtCheques = vdbmngr.SelectQuery(cmd).Tables[0];
                        string sno = dtCheques.Rows[0]["sno"].ToString();
                        string VarifyDate = dtCheques.Rows[0]["VarifyDate"].ToString();
                        string Remarks = dtCheques.Rows[0]["Remarks"].ToString();
                        string SuperBranch = dtCheques.Rows[0]["SuperBranch"].ToString();
                        cmd = new MySqlCommand("Update  collections set  CheckStatus=@CheckStatus,VEmpID=@VEmpID,VarifyDate=@VarifyDate where  Branchid=@Branchid and Sno=@ChequeNo");
                        cmd.Parameters.AddWithValue("@Branchid", BranchSno);
                        cmd.Parameters.AddWithValue("@ChequeNo", sno);//row serial no
                        cmd.Parameters.AddWithValue("@VarifyDate", cleardate);
                        cmd.Parameters.AddWithValue("@VEmpID", context.Session["UserSno"].ToString());
                        if (Status == "Bounce")
                        {
                            cmd.Parameters.AddWithValue("@CheckStatus", 'B');
                        }
                        if (Status == "Approved")
                        {
                            cmd.Parameters.AddWithValue("@CheckStatus", 'V');
                        }
                        if (Status == "Rejected")
                        {
                            cmd.Parameters.AddWithValue("@CheckStatus", 'R');
                        }
                        if (vdbmngr.Update(cmd) != 0)
                        {
                            double BranchAmount = 0;
                            double.TryParse(Amount, out BranchAmount);
                            BranchAmount = Math.Round(BranchAmount, 2);
                            double actualamt = 0;
                            if (Status == "Bounce")
                            {
                            }
                            if (Status == "Approved")
                            {
                                cmd = new MySqlCommand("Update  Branchaccounts set  Amount=Amount-@Amount where  Branchid=@Branchid ");
                                cmd.Parameters.AddWithValue("@Branchid", BranchSno);
                                cmd.Parameters.AddWithValue("@Amount", BranchAmount);
                                vdbmngr.Update(cmd);
                                //25/09/2018 begin
                                //DateTime fromdate = new DateTime();
                                DateTime fromdate = Convert.ToDateTime(cleardate);
                                cmd = new MySqlCommand("SELECT   sno, OppBalance, SaleValue, paidamount, ClosingBalance, IndentDate, EntryDate, agentid, salesofficeid, SaleQty, ReceivedAmount, DiffAmount, RouteId, status FROM tempduetrasactions WHERE (agentid = @Agentid) AND (IndentDate BETWEEN @d1 AND @d2)");
                                cmd.Parameters.AddWithValue("@Agentid", BranchSno);
                                cmd.Parameters.AddWithValue("@d1", GetLowDate(fromdate).AddDays(-1));
                                cmd.Parameters.AddWithValue("@d2", GetLowDate(fromdate).AddDays(-1));
                                DataTable dtpresentverifieddue = vdbmngr.SelectQuery(cmd).Tables[0];
                                if (dtpresentverifieddue.Rows.Count > 0)
                                {
                                    double salevalue = 0;
                                    double.TryParse(dtpresentverifieddue.Rows[0]["SaleValue"].ToString(), out salevalue);
                                    double prevreceived = 0;
                                    double.TryParse(dtpresentverifieddue.Rows[0]["ReceivedAmount"].ToString(), out prevreceived);
                                    double opp = 0;
                                    double.TryParse(dtpresentverifieddue.Rows[0]["OppBalance"].ToString(), out opp);
                                    double clo = 0;
                                    double.TryParse(dtpresentverifieddue.Rows[0]["ClosingBalance"].ToString(), out clo);
                                    double prsentamount = 0;
                                    double.TryParse(Amount, out prsentamount);
                                    double opamt = opp + salevalue;/// - BranchAmount;
                                    double Closing = opamt + prevreceived - BranchAmount;
                                    if (BranchAmount >= prevreceived)
                                    {
                                        actualamt = BranchAmount - prevreceived;
                                    }
                                    else
                                    {
                                        actualamt = prevreceived - BranchAmount;
                                    }
                                    cmd = new MySqlCommand("Update  tempduetrasactions set  ClosingBalance=ClosingBalance-@ClosingBalance,ReceivedAmount=ReceivedAmount+@ReceivedAmount,checkamount=checkamount+@checkamount where  (agentid=@agentid) AND (IndentDate=@indentdate)");
                                    cmd.Parameters.AddWithValue("@ClosingBalance", BranchAmount);
                                    cmd.Parameters.AddWithValue("@ReceivedAmount", BranchAmount);
                                    cmd.Parameters.AddWithValue("@checkamount", BranchAmount);
                                    cmd.Parameters.AddWithValue("@agentid", BranchSno);
                                    cmd.Parameters.AddWithValue("@indentdate", GetLowDate(fromdate).AddDays(-1));
                                    vdbmngr.Update(cmd);
                                }
                                // collection agent_bal_trans
                                cmd = new MySqlCommand("SELECT MAX(sno) as sno FROM agent_bal_trans WHERE agentid=@Branchid");
                                cmd.Parameters.AddWithValue("@Branchid", BranchSno);
                                DataTable dtagenttrans = vdbmngr.SelectQuery(cmd).Tables[0];
                                if (dtagenttrans.Rows.Count > 0)
                                {
                                    string maxsno = dtagenttrans.Rows[0]["sno"].ToString();
                                    cmd = new MySqlCommand("Insert into agent_bal_trans_history(refno, paidamount, cashtype, createddate, entryby) values (@refno,@paidamount,@cashtype,@doe,@entryby)");
                                    cmd.Parameters.AddWithValue("@refno", maxsno);
                                    cmd.Parameters.AddWithValue("@paidamount", Math.Abs(BranchAmount));
                                    cmd.Parameters.AddWithValue("@cashtype", "Collectionsedit");
                                    cmd.Parameters.AddWithValue("@doe", ServerDateCurrentdate);
                                    cmd.Parameters.AddWithValue("@entryby", context.Session["UserSno"].ToString());
                                    vdbmngr.insert(cmd);

                                    cmd = new MySqlCommand("SELECT agentid, opp_balance,paidamount, inddate, salesvalue, clo_balance FROM agent_bal_trans WHERE sno=@sno");
                                    cmd.Parameters.AddWithValue("@sno", maxsno);
                                    DataTable dtmaxagenttrans = vdbmngr.SelectQuery(cmd).Tables[0];

                                    cmd = new MySqlCommand("SELECT agentid, opp_balance, inddate, salesvalue, clo_balance FROM agent_bal_trans WHERE agentid=@agentid AND inddate between @d1 and @d2");
                                    cmd.Parameters.AddWithValue("@agentid", BranchSno);
                                    cmd.Parameters.AddWithValue("@d1", GetLowDate(fromdate).AddDays(-1));
                                    cmd.Parameters.AddWithValue("@d2", GetHighDate(fromdate).AddDays(-1));
                                    DataTable dtIndentbal = vdbmngr.SelectQuery(cmd).Tables[0];
                                    if (dtIndentbal.Rows.Count > 0)
                                    {
                                        string oppbalance = dtmaxagenttrans.Rows[0]["opp_balance"].ToString();
                                        string salesvalue = dtmaxagenttrans.Rows[0]["salesvalue"].ToString();

                                        double Prev_amount = 0;
                                        double.TryParse(dtmaxagenttrans.Rows[0]["paidamount"].ToString(), out Prev_amount);
                                        if (Prev_amount > 0)
                                        {
                                            BranchAmount = BranchAmount + Prev_amount;
                                        }

                                        double total = Convert.ToDouble(oppbalance) + Convert.ToDouble(salesvalue);
                                        string closingbalance = dtmaxagenttrans.Rows[0]["clo_balance"].ToString();
                                        double clsvalue = Convert.ToDouble(closingbalance);
                                        double closingvalue = total - Math.Abs(BranchAmount);
                                        string inddate = dtmaxagenttrans.Rows[0]["inddate"].ToString();
                                        cmd = new MySqlCommand("UPDATE agent_bal_trans SET paidamount=@paidamount, clo_balance=@closing where sno=@refno");
                                        cmd.Parameters.AddWithValue("@paidamount", Math.Abs(BranchAmount));
                                        cmd.Parameters.AddWithValue("@refno", maxsno);
                                        cmd.Parameters.AddWithValue("@closing", closingvalue);
                                        vdbmngr.Update(cmd);
                                    }
                                    else
                                    {
                                        string closingbalance = dtmaxagenttrans.Rows[0]["clo_balance"].ToString();
                                        double clsvalue = Convert.ToDouble(closingbalance);
                                        double closingvalue = clsvalue - Math.Abs(BranchAmount);
                                        cmd = new MySqlCommand("UPDATE agent_bal_trans set  clo_balance=clo_balance-@clAmount  where agentid=@BranchId AND inddate=@inddate");
                                        cmd.Parameters.AddWithValue("@BranchId", BranchSno);
                                        cmd.Parameters.AddWithValue("@inddate", ServerDateCurrentdate);
                                        cmd.Parameters.AddWithValue("@clAmount", closingvalue);
                                        if (vdbmngr.Update(cmd) == 0)
                                        {
                                            cmd = new MySqlCommand("Insert Into agent_bal_trans(agentid, opp_balance, inddate, salesvalue,  clo_balance, createdate, entryby,paidamount) values (@BranchId,@opp_balance,@inddate, @salesvalue, @clo_balance, @createdate, @entryby,@paidamount)");
                                            cmd.Parameters.AddWithValue("@paidamount", Math.Abs(BranchAmount));
                                            cmd.Parameters.AddWithValue("@BranchId", BranchSno);
                                            cmd.Parameters.AddWithValue("@opp_balance", clsvalue);
                                            cmd.Parameters.AddWithValue("@inddate", ServerDateCurrentdate);
                                            cmd.Parameters.AddWithValue("@salesvalue", 0);
                                            cmd.Parameters.AddWithValue("@clo_balance", closingvalue);
                                            cmd.Parameters.AddWithValue("@createdate", ServerDateCurrentdate);
                                            cmd.Parameters.AddWithValue("@entryby", context.Session["UserSno"].ToString());
                                            vdbmngr.insert(cmd);
                                        }
                                    }
                                }
                                //end agent_bal_trans

                                cmd = new MySqlCommand("SELECT   sno, OppBalance, SaleValue, paidamount, ClosingBalance, IndentDate, agentid, salesofficeid, SaleQty, ReceivedAmount, DiffAmount, RouteId, EntryDate FROM tempduetrasactions WHERE  (agentid = @Agentid) AND (IndentDate BETWEEN @d1 AND @d2)");
                                cmd.Parameters.AddWithValue("@Agentid", BranchSno);
                                cmd.Parameters.AddWithValue("@d1", GetLowDate(fromdate));
                                cmd.Parameters.AddWithValue("@d2", GetHighDate(ServerDateCurrentdate));
                                DataTable dtDueTransactions = vdbmngr.SelectQuery(cmd).Tables[0];
                                foreach (DataRow drr in dtDueTransactions.Rows)
                                {
                                    string indentdate = drr["indentdate"].ToString();
                                    DateTime indent_date = Convert.ToDateTime(indentdate);
                                    cmd = new MySqlCommand("Update  tempduetrasactions set  OppBalance=OppBalance-@opningamount,ClosingBalance=ClosingBalance-@ClosingBalance where (agentid=@Branchid) AND (IndentDate=@indentdate)");
                                    cmd.Parameters.AddWithValue("@opningamount", BranchAmount);
                                    cmd.Parameters.AddWithValue("@ClosingBalance", BranchAmount);
                                    cmd.Parameters.AddWithValue("@indentdate", GetLowDate(indent_date));
                                    cmd.Parameters.AddWithValue("@Branchid", BranchSno);
                                    vdbmngr.Update(cmd);
                                }
                                //25/09/2018  end
                                cmd = new MySqlCommand("SELECT branchdata.BranchName, branchdata.tbranchname as S_tbranchname, branchdata.whcode as S_whcode, branchdata_1.BranchName AS P_BranchName, branchdata_1.tbranchname AS P_tbranchname, branchdata_1.whcode AS P_whcode,  branchdata_2.BranchName AS A_BranchName, branchdata_2.tbranchname  AS A_tBranchName FROM branchdata INNER JOIN  branchmappingtable ON branchdata.sno = branchmappingtable.SubBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable.SuperBranch = branchdata_1.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_2 ON branchmappingtable_1.SubBranch = branchdata_2.sno WHERE (branchdata.sno = @BranchId) AND (branchdata_2.sno = @AgentID)");
                                cmd.Parameters.AddWithValue("@BranchId", SuperBranch);//Branch is Salesofficer Branch
                                cmd.Parameters.AddWithValue("@AgentID", BranchSno);//BranchID is Agent Branch
                                DataTable dt_branch = vdbmngr.SelectQuery(cmd).Tables[0];
                                string tbranchname = "";//Agent 
                                string t_sobranchname = "";
                                string t_Pbranchname = "";
                                string S_whcode = "";
                                string P_whcode = "";
                                if (dt_branch.Rows.Count > 0)
                                {
                                    tbranchname = dt_branch.Rows[0]["A_tBranchName"].ToString();
                                    t_sobranchname = dt_branch.Rows[0]["S_tbranchname"].ToString();
                                    t_Pbranchname = dt_branch.Rows[0]["P_tbranchname"].ToString();
                                    S_whcode = dt_branch.Rows[0]["S_whcode"].ToString();
                                    P_whcode = dt_branch.Rows[0]["P_whcode"].ToString();
                                }

                            }
                            if (Status == "Approved")
                            {
                                cmd = new MySqlCommand("SELECT  DispNo, PhoneNumber, Sno, EmpID, EmailID, MsgType, name FROM mobilenotable where MsgType=@MsgType");
                                cmd.Parameters.AddWithValue("@MsgType", "4");
                                DataTable dtmobileno = vdbmngr.SelectQuery(cmd).Tables[0];
                                string message = "";
                                if (dtmobileno.Rows.Count > 0)
                                {
                                    DateTime from_date = Convert.ToDateTime(cleardate);
                                    string strdate = from_date.ToString("dd/MMM/yyyy");
                                    foreach (DataRow drmobile in dtmobileno.Rows)
                                    {
                                        string phonenumber = drmobile["PhoneNumber"].ToString();
                                        WebClient client = new WebClient();
                                        if (context.Session["TitleName"].ToString() == "SRI VYSHNAVI DAIRY SPECIALITIES (P) LTD")
                                        {
                                            //string baseurl = "http://103.225.76.43/blank/sms/user/urlsmstemp.php?username=vyshnavidairy&pass=vyshnavi@123&senderid=VYSHRM&dest_mobileno=" + phonenumber + "&message=Dear%20" + AgentName + "%20Your%20Incentive%20Amount%20Credeted%20for%20The%20Month%20Of%20%20" + strdate + "%20Amount%20is =" + PaidAmount + "&response=Y";
                                            //string baseurl = "http://www.smsstriker.com/API/sms.php?username=vaishnavidairy&password=vyshnavi@123&from=VSALES&to=" + phonenumber + "&msg=%20" + AgentName + "%20Cheque%20Amount%20Collected%20for%20The%20Date%20Of%20%20" + from_date + "%20Amount%20is =" + BranchAmount + "&type=1";

                                            string baseurl = "http://www.smsstriker.com/API/sms.php?username=vaishnavidairy&password=vyshnavi@123&from=VSALES&to=" + phonenumber + "&msg=%20" + AgentName + "%20Cheque%20Amount%20Collected%20today%20Date%20" + strdate + "%20Amount%20is =" + BranchAmount + "&type=1";
                                            //string strUrl = "http://roundsms.com/api/sendhttp.php?authkey=Y2U3NGE2MGFkM2V&mobiles=" + phonenumber + "&message=" + AgentName + " &sender=VYSNVI&type=1&route=2";
                                            message = "" + AgentName + "Your Cheque Amount Collected for The Date Of" + from_date + "Amount is =" + BranchAmount + "";
                                            Stream data = client.OpenRead(baseurl);
                                            StreamReader reader = new StreamReader(data);
                                            string ResponseID = reader.ReadToEnd();
                                            data.Close();
                                            reader.Close();
                                        }
                                        else
                                        {
                                            
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (ctype == "Other")
                    {
                        cmd = new MySqlCommand("Update  cashcollections set  CheckStatus=@CheckStatus ,VEmpID=@VEmpID,VarifyDate=@VarifyDate where  Sno=@sno ");
                        cmd.Parameters.AddWithValue("@sno", BranchSno);
                        cmd.Parameters.AddWithValue("@VarifyDate", ServerDateCurrentdate);
                        cmd.Parameters.AddWithValue("@VEmpID", context.Session["UserSno"].ToString());
                        if (Status == "Bounce")
                        {
                            cmd.Parameters.AddWithValue("@CheckStatus", 'B');
                        }
                        if (Status == "Approved")
                        {
                            cmd.Parameters.AddWithValue("@CheckStatus", 'V');
                        }
                        if (Status == "Rejected")
                        {
                            cmd.Parameters.AddWithValue("@CheckStatus", 'R');
                        }
                        vdbmngr.Update(cmd);
                    }
                    string errmsg = "Data Saved Successfully";
                    string errresponse = GetJson(errmsg);
                    context.Response.Write(errresponse);
                }
                else
                {
                    string CollSno = context.Request["CollSno"].ToString();
                    string Username = context.Session["userdata_sno"].ToString();
                    string BranchSno = context.Request["BranchSno"];
                    string Amount = context.Request["Amount"];
                    string Status = context.Request["Status"];
                    string cleardate = context.Request["cleardate"];
                    string faaccuntno = context.Request["ddlfaaccno"];
                    cmd = new MySqlCommand("SELECT collections.Branchid, collections.Sno, collections.PaidDate, collections.PaymentType, collections.CheckStatus, collections.ChequeNo, collections.VarifyDate, collections.ChequeDate, collections.BankName,  collections.Remarks, branchmappingtable.SuperBranch FROM collections INNER JOIN branchmappingtable ON collections.Branchid = branchmappingtable.SubBranch WHERE (collections.Branchid = @Branchid) AND (collections.banktransferstatus = 'P')");
                    cmd.Parameters.AddWithValue("@Branchid", BranchSno);
                    DataTable dtCheques = vdbmngr.SelectQuery(cmd).Tables[0];
                    string sno = dtCheques.Rows[0]["sno"].ToString();
                    string VarifyDate = dtCheques.Rows[0]["VarifyDate"].ToString();
                    string Remarks = dtCheques.Rows[0]["Remarks"].ToString();
                    string SuperBranch = dtCheques.Rows[0]["SuperBranch"].ToString();
                    cmd = new MySqlCommand("Update  collections set  banktransferstatus=@banktransferstatus,VEmpID=@VEmpID,VarifyDate=@VarifyDate where  Branchid=@Branchid and Sno=@Sno");
                    cmd.Parameters.AddWithValue("@Branchid", BranchSno);
                    cmd.Parameters.AddWithValue("@Sno", CollSno);//row serial no
                    cmd.Parameters.AddWithValue("@VarifyDate", cleardate);
                    cmd.Parameters.AddWithValue("@VEmpID", context.Session["UserSno"].ToString());
                    if (Status == "Approved")
                    {
                        cmd.Parameters.AddWithValue("@banktransferstatus", 'V');
                    }
                    if (Status == "Rejected")
                    {
                        cmd.Parameters.AddWithValue("@banktransferstatus", 'R');
                    }
                    if (vdbmngr.Update(cmd) != 0)
                    {
                        double BranchAmount = 0;
                        double.TryParse(Amount, out BranchAmount);
                        BranchAmount = Math.Round(BranchAmount, 2);
                        double actualamt = 0;
                        if (Status == "Bounce")
                        {
                        }
                        if (Status == "Approved")
                        {
                            cmd = new MySqlCommand("Update  Branchaccounts set  Amount=Amount-@Amount where  Branchid=@Branchid ");
                            cmd.Parameters.AddWithValue("@Branchid", BranchSno);
                            cmd.Parameters.AddWithValue("@Amount", BranchAmount);
                            vdbmngr.Update(cmd);
                            DateTime fromdate = Convert.ToDateTime(cleardate);
                            cmd = new MySqlCommand("SELECT   sno, OppBalance, SaleValue, paidamount, ClosingBalance, IndentDate, EntryDate, agentid, salesofficeid, SaleQty, ReceivedAmount, DiffAmount, RouteId, status FROM tempduetrasactions WHERE (agentid = @Agentid) AND (IndentDate BETWEEN @d1 AND @d2)");
                            cmd.Parameters.AddWithValue("@Agentid", BranchSno);
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(fromdate).AddDays(-1));
                            cmd.Parameters.AddWithValue("@d2", GetLowDate(fromdate).AddDays(-1));
                            DataTable dtpresentverifieddue = vdbmngr.SelectQuery(cmd).Tables[0];
                            if (dtpresentverifieddue.Rows.Count > 0)
                            {
                                double salevalue = 0;
                                double.TryParse(dtpresentverifieddue.Rows[0]["SaleValue"].ToString(), out salevalue);
                                double prevreceived = 0;
                                double.TryParse(dtpresentverifieddue.Rows[0]["ReceivedAmount"].ToString(), out prevreceived);
                                double opp = 0;
                                double.TryParse(dtpresentverifieddue.Rows[0]["OppBalance"].ToString(), out opp);
                                double clo = 0;
                                double.TryParse(dtpresentverifieddue.Rows[0]["ClosingBalance"].ToString(), out clo);
                                double prsentamount = 0;
                                double.TryParse(Amount, out prsentamount);
                                double opamt = opp + salevalue;/// - BranchAmount;
                                double Closing = opamt + prevreceived - BranchAmount;
                                if (BranchAmount >= prevreceived)
                                {
                                    actualamt = BranchAmount - prevreceived;
                                }
                                else
                                {
                                    actualamt = prevreceived - BranchAmount;
                                }
                                cmd = new MySqlCommand("Update  tempduetrasactions set  ClosingBalance=ClosingBalance-@ClosingBalance,ReceivedAmount=ReceivedAmount+@ReceivedAmount,banktransferamount=banktransferamount+@banktransferamount where  (agentid=@agentid) AND (IndentDate=@indentdate)");
                                cmd.Parameters.AddWithValue("@ClosingBalance", BranchAmount);
                                cmd.Parameters.AddWithValue("@ReceivedAmount", BranchAmount);
                                cmd.Parameters.AddWithValue("@banktransferamount", BranchAmount);
                                cmd.Parameters.AddWithValue("@agentid", BranchSno);
                                cmd.Parameters.AddWithValue("@indentdate", GetLowDate(fromdate).AddDays(-1));
                                vdbmngr.Update(cmd);
                            }
                            cmd = new MySqlCommand("SELECT   sno, OppBalance, SaleValue, paidamount, ClosingBalance, IndentDate, EntryDate, agentid, salesofficeid, SaleQty, ReceivedAmount, DiffAmount, RouteId, status FROM tempduetrasactions WHERE (agentid = @Agentid) AND (IndentDate BETWEEN @d1 AND @d2)");
                            cmd.Parameters.AddWithValue("@Agentid", BranchSno);
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(fromdate));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(ServerDateCurrentdate));
                            DataTable dtDueTransactions = vdbmngr.SelectQuery(cmd).Tables[0];
                            foreach (DataRow drr in dtDueTransactions.Rows)
                            {
                                string indentdate = drr["indentdate"].ToString();
                                DateTime indent_date = Convert.ToDateTime(indentdate);
                                cmd = new MySqlCommand("Update  tempduetrasactions set  OppBalance=OppBalance-@opningamount,ClosingBalance=ClosingBalance-@ClosingBalance where (agentid=@Branchid) AND (IndentDate=@indentdate)");
                                cmd.Parameters.AddWithValue("@opningamount", BranchAmount);
                                cmd.Parameters.AddWithValue("@ClosingBalance", BranchAmount);
                                cmd.Parameters.AddWithValue("@indentdate", GetLowDate(indent_date));
                                cmd.Parameters.AddWithValue("@Branchid", BranchSno);
                                vdbmngr.Update(cmd);
                            }
                            cmd = new MySqlCommand("SELECT  DispNo, PhoneNumber, Sno, EmpID, EmailID, MsgType, name FROM mobilenotable where MsgType=@MsgType");
                            cmd.Parameters.AddWithValue("@MsgType", "5");
                            DataTable dtmobileno = vdbmngr.SelectQuery(cmd).Tables[0];
                            string message = "";
                            if (dtmobileno.Rows.Count > 0)
                            {
                                DateTime from_date = Convert.ToDateTime(cleardate);
                                string strdate = from_date.ToString("dd/MMM/yyyy");

                                WebClient client = new WebClient();
                                foreach (DataRow drmobile in dtmobileno.Rows)
                                {
                                    string phonenumber = drmobile["PhoneNumber"].ToString();
                                    if (context.Session["TitleName"].ToString() == "SRI VYSHNAVI DAIRY SPECIALITIES (P) LTD")
                                    {
                                        //string baseurl = "http://103.225.76.43/blank/sms/user/urlsmstemp.php?username=vyshnavidairy&pass=vyshnavi@123&senderid=VYSHRM&dest_mobileno=" + phonenumber + "&message=Dear%20" + BranchName + "%20Your%20Incentive%20Amount%20Credeted%20for%20The%20Month%20Of%20%20" + strdate + "%20Amount%20is =" + PaidAmount + "&response=Y";
                                        //string baseurl = "http://www.smsstriker.com/API/sms.php?username=vaishnavidairy&password=vyshnavi@123&from=VSALES&to=" + phonenumber + "&msg=Dear%20" + AgentName + "%20Your%20BankTransfer%20Amount%20Credeted%20for%20The%20Date%20Of%20%20" + from_date + "%20Amount%20is =" + BranchAmount + "&type=1";
                                        string baseurl = "http://www.smsstriker.com/API/sms.php?username=vaishnavidairy&password=vyshnavi@123&from=VSALES&to=" + phonenumber + "&msg=%20" + AgentName + "%20BankTransfer%20Amount%20Collected%20today%20Date%20" + strdate + "%20Amount%20is =" + BranchAmount + "&type=1";


                                        message = "" + AgentName + "Your BankTransfer Amount Collected for The Date Of" + from_date + "Amount is =" + BranchAmount + "";
                                        Stream data = client.OpenRead(baseurl);
                                        StreamReader reader = new StreamReader(data);
                                        string ResponseID = reader.ReadToEnd();
                                        data.Close();
                                        reader.Close();
                                    }
                                    else
                                    {
                                        
                                    }
                                }
                            }
                            cmd = new MySqlCommand("SELECT branchdata.BranchName, branchdata.tbranchname as S_tbranchname, branchdata.whcode as S_whcode, branchdata_1.BranchName AS P_BranchName, branchdata_1.tbranchname AS P_tbranchname, branchdata_1.whcode AS P_whcode,  branchdata_2.BranchName AS A_BranchName, branchdata_2.tbranchname  AS A_tBranchName FROM branchdata INNER JOIN  branchmappingtable ON branchdata.sno = branchmappingtable.SubBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable.SuperBranch = branchdata_1.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_2 ON branchmappingtable_1.SubBranch = branchdata_2.sno WHERE (branchdata.sno = @BranchId) AND (branchdata_2.sno = @AgentID)");
                            cmd.Parameters.AddWithValue("@BranchId", SuperBranch);//Branch is Salesofficer Branch
                            cmd.Parameters.AddWithValue("@AgentID", BranchSno);//BranchID is Agent Branch
                            DataTable dt_branch = vdbmngr.SelectQuery(cmd).Tables[0];
                            string tbranchname = "";//Agent 
                            string t_sobranchname = "";
                            string t_Pbranchname = "";
                            string S_whcode = "";
                            string P_whcode = "";
                            if (dt_branch.Rows.Count > 0)
                            {
                                tbranchname = dt_branch.Rows[0]["A_tBranchName"].ToString();
                                t_sobranchname = dt_branch.Rows[0]["S_tbranchname"].ToString();
                                t_Pbranchname = dt_branch.Rows[0]["P_tbranchname"].ToString();
                                S_whcode = dt_branch.Rows[0]["S_whcode"].ToString();
                                P_whcode = dt_branch.Rows[0]["P_whcode"].ToString();
                            }
                        }
                    }
                    string errmsg = "Data Saved Successfully";
                    string errresponse = GetJson(errmsg);
                    context.Response.Write(errresponse);
                }
            }
        }
        catch (Exception ex)
        {
            string errmsg = ex.Message;
            string errresponse = GetJson(errmsg);
            context.Response.Write(errresponse);
        }
    }
    private void GetCheckDetails(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            DataTable dtothercheques = new DataTable();
            if (context.Session["userdata_sno"] == null)
            {
                string errmsg = "Session Expired";
                string errresponse = GetJson(errmsg);
                context.Response.Write(errresponse);
            }
            else
            {
                string ddlType = context.Request["ddlType"];
                string Username = context.Session["userdata_sno"].ToString();
                string FDate = context.Request["FromDate"];
                DateTime FromDate = Convert.ToDateTime(FDate);
                string TDate = context.Request["ToDate"];
                DateTime TODate = Convert.ToDateTime(TDate);
                string LevelType = context.Session["LevelType"].ToString();
                List<Chequeclass> Chequelist = new List<Chequeclass>();
                if (ddlType == "Cheque")
                {
                    if (LevelType == "AccountsOfficer" || LevelType == "Admin")
                    {
                        string BranchID = context.Request["BranchID"];

                        cmd = new MySqlCommand("SELECT Sno,Branchid, Name, Amount, Remarks,DATE_FORMAT(DOE, '%d %b %y') AS PaidDate, Receiptno, Agentid, PaymentType, CollectionType, CollectionFrom, CheckStatus, ChequeNo, VarifyDate, DATE_FORMAT(ChequeDate, '%d %b %y') AS chequeDate,BankName FROM cashcollections WHERE (CollectionType = 'Cheque') AND (Branchid = @SuperBranch) AND (CheckStatus = 'P')");
                        cmd.Parameters.AddWithValue("@SuperBranch", BranchID);
                        dtothercheques = vdbmngr.SelectQuery(cmd).Tables[0];
                        cmd = new MySqlCommand("SELECT branchdata_2.sno, branchdata_2.BranchName, collections.tripId, DATE_FORMAT(collections.PaidDate, '%d %b %y') AS PaidDate, collections.BankName, collections.ChequeNo, collections.AmountPaid, DATE_FORMAT(collections.ChequeDate, '%d %b %y') AS chequeDate FROM branchdata INNER JOIN branchmappingtable ON branchdata.sno = branchmappingtable.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable.SuperBranch = branchdata_1.sno INNER JOIN branchdata branchdata_2 ON branchmappingtable.SubBranch = branchdata_2.sno INNER JOIN collections ON branchdata_2.sno = collections.Branchid WHERE (branchdata.sno = @SuperBranch) AND (collections.PaymentType = 'Cheque') AND (collections.CheckStatus = @CheckStatus) AND (collections.PaidDate BETWEEN @d1 AND @d2) OR (branchdata_1.SalesOfficeID = @SuperBranch) AND (collections.PaymentType = 'Cheque') AND (collections.CheckStatus = @CheckStatus) AND (collections.PaidDate BETWEEN @d1 AND @d2)");
                        cmd.Parameters.AddWithValue("@CheckStatus", 'P');
                        cmd.Parameters.AddWithValue("@SuperBranch", BranchID);
                    }
                    else
                    {
                        cmd = new MySqlCommand("SELECT Sno,Branchid, Name, Amount, Remarks, DATE_FORMAT(DOE, '%d %b %y') AS PaidDate, Receiptno, Agentid, PaymentType, CollectionType, CollectionFrom, CheckStatus, ChequeNo, VarifyDate, DATE_FORMAT(ChequeDate, '%d %b %y') AS chequeDate,BankName FROM cashcollections WHERE (CollectionType = 'Cheque') AND (Branchid =  @SuperBranch) AND (CheckStatus = 'P')");
                        cmd.Parameters.AddWithValue("@SuperBranch", context.Session["branch"].ToString());
                        dtothercheques = vdbmngr.SelectQuery(cmd).Tables[0];
                        cmd = new MySqlCommand("SELECT branchdata_2.sno, branchdata_2.BranchName, collections.tripId, DATE_FORMAT(collections.PaidDate, '%d %b %y') AS PaidDate, collections.BankName, collections.ChequeNo, collections.AmountPaid, DATE_FORMAT(collections.ChequeDate, '%d %b %y') AS chequeDate FROM branchdata INNER JOIN branchmappingtable ON branchdata.sno = branchmappingtable.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable.SuperBranch = branchdata_1.sno INNER JOIN branchdata branchdata_2 ON branchmappingtable.SubBranch = branchdata_2.sno INNER JOIN collections ON branchdata_2.sno = collections.Branchid WHERE (branchdata.sno = @SuperBranch) AND (collections.PaymentType = 'Cheque') AND (collections.CheckStatus = @CheckStatus) AND (collections.PaidDate BETWEEN @d1 AND @d2) OR (branchdata_1.SalesOfficeID = @SuperBranch) AND (collections.PaymentType = 'Cheque') AND (collections.CheckStatus = @CheckStatus) AND (collections.PaidDate BETWEEN @d1 AND @d2)");
                        cmd.Parameters.AddWithValue("@CheckStatus", 'P');
                        cmd.Parameters.AddWithValue("@SuperBranch", context.Session["branch"].ToString());
                    }
                    cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate));
                    cmd.Parameters.AddWithValue("@d2", GetHighDate(TODate));
                    DataTable dtCheques = vdbmngr.SelectQuery(cmd).Tables[0];


                    int i = 1;
                    foreach (DataRow dr in dtCheques.Rows)
                    {
                        Chequeclass GetCheque = new Chequeclass();
                        GetCheque.Sno = i++.ToString();
                        GetCheque.BranchName = dr["BranchName"].ToString();
                        GetCheque.BranchSno = dr["Sno"].ToString();
                        GetCheque.PaidDate = dr["PaidDate"].ToString();
                        GetCheque.chequedate = dr["chequeDate"].ToString();
                        GetCheque.BankName = dr["BankName"].ToString();
                        GetCheque.Type = "Agent";

                        string ChequeNo = dr["ChequeNo"].ToString();
                        if (ChequeNo == "")
                        {
                        }
                        else
                        {
                            GetCheque.ChequeNo = dr["ChequeNo"].ToString();
                            GetCheque.Amount = dr["AmountPaid"].ToString();
                            Chequelist.Add(GetCheque);
                        }
                    }
                    foreach (DataRow dr in dtothercheques.Rows)
                    {
                        Chequeclass GetCheque1 = new Chequeclass();
                        GetCheque1.Sno = i++.ToString();
                        GetCheque1.BranchName = dr["Name"].ToString();
                        GetCheque1.BranchSno = dr["Sno"].ToString();
                        GetCheque1.Type = "Other";
                        GetCheque1.PaidDate = dr["PaidDate"].ToString();
                        GetCheque1.chequedate = dr["chequeDate"].ToString();
                        GetCheque1.BankName = dr["BankName"].ToString();
                        string ChequeNo = dr["ChequeNo"].ToString();
                        if (ChequeNo == "")
                        {
                        }
                        else
                        {
                            GetCheque1.ChequeNo = dr["ChequeNo"].ToString();
                            GetCheque1.Amount = dr["Amount"].ToString();
                            Chequelist.Add(GetCheque1);
                        }
                    }

                    string errresponse = GetJson(Chequelist);
                    context.Response.Write(errresponse);
                }
                else
                {
                    string BranchID = context.Request["BranchID"];
                    if (BranchID == "572")
                    {
                        BranchID = "158";
                    }

                    cmd = new MySqlCommand("SELECT branchdata.BranchName, branchdata.sno, collections.AmountPaid, collections.PaidDate, collections.PaymentType, collections.CheckStatus,collections.sno AS CollSno, collections.PayTime,collections.ChequeNo,collections.Remarks, collections.tripId, collections.ReceiptNo, dispatch.DispName FROM dispatch INNER JOIN branchroutes ON dispatch.Route_id = branchroutes.Sno INNER JOIN branchroutesubtable ON branchroutes.Sno = branchroutesubtable.RefNo INNER JOIN branchdata ON branchroutesubtable.BranchID = branchdata.sno INNER JOIN collections ON branchdata.sno = collections.Branchid WHERE (collections.PaidDate BETWEEN @d1 AND @d2) AND (collections.tripId IS NULL) AND (dispatch.Branch_Id = @brnchid) AND (collections.TransactionType IS NULL) AND (collections.PaymentType = @pt) AND collections.banktransferstatus=@banktransferstatus  GROUP BY collections.PaidDate");
                    cmd.Parameters.AddWithValue("@brnchid", BranchID);
                    cmd.Parameters.AddWithValue("@pt", "Bank Transfer");
                    cmd.Parameters.AddWithValue("@banktransferstatus", "P");
                    cmd.Parameters.AddWithValue("@d1", GetLowDate(FromDate));
                    cmd.Parameters.AddWithValue("@d2", GetHighDate(TODate));
                    DataTable dtroutecollection = vdbmngr.SelectQuery(cmd).Tables[0];

                    Report = new DataTable();
                    Report.Columns.Add("Route Name");
                    Report.Columns.Add("Agent Code");
                    Report.Columns.Add("Agent Name");
                    //Report.Columns.Add("Refno");
                    Report.Columns.Add("ReceiptNo");
                    Report.Columns.Add("Collected Time");
                    Report.Columns.Add("Collected Amount").DataType = typeof(Double);
                    Report.Columns.Add("Payment Type");
                    Report.Columns.Add("Collection Type");
                    Report.Columns.Add("Narration");
                    Report.Columns.Add("CollSno");
                    foreach (DataRow branch in dtroutecollection.Rows)
                    {
                        DataRow newrow = Report.NewRow();
                        newrow["Route Name"] = branch["DispName"].ToString();
                        newrow["Agent Code"] = branch["sno"].ToString();
                        newrow["Agent Name"] = branch["BranchName"].ToString();
                        //newrow["Refno"] = branch["ReceiptNo"].ToString();
                        newrow["ReceiptNo"] = branch["ReceiptNo"].ToString();
                        newrow["Collected Amount"] = branch["AmountPaid"].ToString();
                        newrow["Collected Time"] = branch["PaidDate"].ToString();
                        if (branch["PaymentType"].ToString() == "Cheque")
                        {
                            newrow["Payment Type"] = "Cheque No:" + branch["ChequeNo"].ToString() + "" + "Status:" + branch["CheckStatus"].ToString() + "";
                        }
                        else
                        {
                            newrow["Payment Type"] = branch["PaymentType"].ToString();
                        }
                        if (branch["tripId"].ToString() == "")
                        {
                            newrow["Collection Type"] = "Sales Office";
                        }
                        else
                        {
                            newrow["Collection Type"] = "Trip";
                        }
                        newrow["Narration"] = branch["Remarks"].ToString();
                        newrow["CollSno"] = branch["CollSno"].ToString();
                        Report.Rows.Add(newrow);
                    }
                    foreach (DataRow dr in Report.Rows)
                    {
                        Chequeclass GetCheque1 = new Chequeclass();
                        //GetCheque1.Sno = i++.ToString();
                        GetCheque1.RouteName = dr["Route Name"].ToString();
                        GetCheque1.AgentCode = dr["Agent Code"].ToString();
                        GetCheque1.AgentName = dr["Agent Name"].ToString();
                        GetCheque1.Amount = dr["Collected Amount"].ToString();
                        GetCheque1.CollectedDate = dr["Collected Time"].ToString();
                        GetCheque1.PaymentType = dr["Payment Type"].ToString();
                        GetCheque1.CollectionType = dr["Collection Type"].ToString();
                        GetCheque1.CollSno = dr["CollSno"].ToString();
                        Chequelist.Add(GetCheque1);
                    }
                    string errresponse = GetJson(Chequelist);
                    context.Response.Write(errresponse);
                }
            }
        }
        catch
        {
        }
    }
    class Chequeclass
    {
        public string Sno { get; set; }
        public string BranchSno { get; set; }
        public string BranchName { get; set; }
        public string PaidDate { get; set; }
        public string chequedate { get; set; }
        public string ChequeNo { get; set; }
        public string Amount { get; set; }
        public string BankName { get; set; }
        public string Type { get; set; }
        public string RouteName { get; set; }
        public string AgentCode { get; set; }
        public string AgentName { get; set; }
        public string CollectedDate { get; set; }
        public string PaymentType { get; set; }
        public string CollectionType { get; set; }
        public string CollSno { get; set; }
    }
    MySqlCommand cmd;
    SqlCommand cm_d;
    VehicleDBMgr vdbmngr;
    // SalesDBManager SalesDB;
    SqlCommand a_cmd;
    class InvDatails
    {
        public string SNo { set; get; }
        public string Qty { set; get; }
        public string TripID { set; get; }
        public string Remarks { set; get; }
    }
    class Leakagedetail
    {
        public string SNo { set; get; }
        public string ProductID { set; get; }
        public string LeakageQty { set; get; }
        public string DeductionAmount { set; get; }
    }
    class RouteLeakdetails
    {
        public string SNo { set; get; }
        public string ProductID { set; get; }
        public string LeaksQty { set; get; }
        public string ReturnsQty { set; get; }
        public string TripID { set; get; }
        public string Remarks { set; get; }
        public string ReturnRemarks { set; get; }
    }
    class SlotDetails
    {
        public string range { set; get; }
        public string amount { set; get; }
    }
    class LineChart
    {
        public string startDate { set; get; }
        public string endDate { set; get; }
        public string Region { set; get; }
        public string[] ReportType { set; get; }
        public string[] divAgent { set; get; }
    }
    class IndentDetails
    {
        public string Productsno { set; get; }
        public string Price { set; get; }
        public string SaleQty { set; get; }
    }
    class Orders
    {
        public string operation { set; get; }
        public string BranchID { set; get; }
        public string imagecode { set; get; }
        public List<orderdetail> data { set; get; }
        public List<inventorydetail> invdata { set; get; }
        public List<RouteLeakdetails> RouteLeakdetails { set; get; }
        public List<InvDatails> InvDatails { set; get; }
        public List<Inventorydetail> Inventorydetails { set; get; }
        public List<Helperdetails> HelperMasterdetails { set; get; }
        public List<IndentDetails> IndentDetails { set; get; }
        public List<offerorderdetails> Offerdetails { set; get; }
        public string[] dataarr { get; set; }
        public string[] Productlist { get; set; }
        public string[] Offer_Productlist { get; set; }
        public string[] divindentArray { get; set; }
        public string[] div_uncheck_Array { get; set; }
        public string[] div_check_Array { get; set; }
        public string totqty { set; get; }
        public string OfferName { set; get; }
        public string prdtqtyifabove { set; get; }
        public string offerprdtqty { set; get; }
        public string Offerfor { set; get; }
        public string Offerfrom { set; get; }
        public string Offerto { set; get; }
        public string Mobile { set; get; }
        public string dispatchsno { set; get; }
        public string totrate { set; get; }
        public string totTotal { set; get; }
        public string reportType { set; get; }
        public string WeekString { set; get; }
        public string routename { set; get; }
        public string type { set; get; }

        public string DispatchRoutename { set; get; }
        public string Dispatchflag { set; get; }
        public string btnSave { set; get; }
        public string btnaddmodify { set; get; }
        public string refno { set; get; }
        public string transactiontype { set; get; }
        public string EmpID { set; get; }
        public string AssignDate { set; get; }
        public string indentdate { set; get; }
        public string date { set; get; }
        public string Permissions { set; get; }
        public string Org_RouteNames { set; get; }
        public string VehicleNo { set; get; }
        public List<SlotDetails> slotdetails { set; get; }
        public string[] brancharray { get; set; }
        public string[] clubarray { get; set; }
        public string clubbingname { set; get; }
        public string structname { set; get; }
        public string btnstructureSave { set; get; }
        public string DispatchStatus { set; get; }
        public List<layoutstringcls> layoutstring { set; get; }
        public string tripid { set; get; }
        public string SalesType { set; get; }
        public string SalesOfficeID { set; get; }
        public string status { set; get; }
        public string IndentType { set; get; }
        public string DCType { set; get; }
        public string edittype { set; get; }
        public string Denominations { set; get; }
        public string ColAmount { set; get; }
        public string SubAmount { set; get; }
        public string Name { set; get; }
        public string desptype { set; get; }
        public string NoOfdays { set; get; }
        public string desptime { set; get; }
        public string indtime { set; get; }
        public string Remarks { set; get; }
        public string Permissiondate { set; get; }
        public string permissionfor { set; get; }
        public string fromaddress { set; get; }
        public string toaddress { set; get; }
        public string destination { set; get; }
        public string modeofterms { set; get; }
        public string vehcleno { set; get; }
        public string DispMode { set; get; }
        // public string remarks { set; get; }
        public string entry_by { get; set; }
        public string Approvdby { get; set; }
        public string ReturnDate { get; set; }
        public string ApproveDate { get; set; }
        public string sno { get; set; }
        public string RecieptNo { get; set; }
        public string SalesTypeId { get; set; }
        public List<Gatepasssubclass> gridBinding { set; get; }
    }
    public class Gatepasssubclass
    {
        public string refno { set; get; }

    }
    public class Helperdetails
    {
        public string Despsno { get; set; }
        public string Amount { get; set; }
        public string First { get; set; }
        public string Second { get; set; }
        public string Third { get; set; }
        public string Fourth { get; set; }
    }
    class layoutstringcls
    {
        public string cellcss { get; set; }
        public string cellvalue { get; set; }
    }
    class orderdetail
    {
        public string SNo { set; get; }
        public string Product { set; get; }
        public string Productsno { set; get; }
        public string Qty { set; get; }
        public string Rate { set; get; }
        public string Total { set; get; }
        public string ReturnQty { set; get; }
        public string ExtraQty { set; get; }
        public string Status { set; get; }
        public string ReceivedAmt { set; get; }
        public string SubmittedAmt { set; get; }
        public string TripId { set; get; }
        public string RemainingQty { set; get; }
        public string RecieptNo { set; get; }
        public string IndentNo { set; get; }
        public string DelQty { set; get; }
        public string DespSno { set; get; }
        public string PaidDate { get; set; }
        public string PaidAmount { get; set; }
        public string Branchid { get; set; }
        public string EntryDate { get; set; }
        public string LeakQty { get; set; }
        public string ShortQty { get; set; }
        public string StockQty { get; set; }
        public string FreeQty { get; set; }
        public string Routes { set; get; }
        public string Year { set; get; }
        public string Products { set; get; }
        public string FreeMilk { get; set; }
        public string Agentid { get; set; }
        public string Routeid { get; set; }
        public string Indent_Yesterday { get; set; }
        public string Indent_Today { get; set; }
        public string Indent_Increase { get; set; }
        public string Indent_Decrease { get; set; }
        public string Reason { get; set; }
        public string Remarks { get; set; }
        public string ActualRate { get; set; }
        public string Vat_Percent { get; set; }
        public string offerqty { get; set; }
        public string Tabletype { get; set; }
        public string Unitsqty { get; set; }
        public string UnitCost { get; set; }
        public string tubQty { get; set; }
        public string PktQty { get; set; }
        public string Puff_L { get; set; }
        public string PLQty { get; set; }
        public string PFQty { get; set; }
        public string PRQty { get; set; }
        public string PSQty { get; set; }
        public string PPufLQty { get; set; }
    }
    class offerorderdetails
    {
        public string SNo { set; get; }
        public string Productsno { set; get; }
        public string Qty { set; get; }
        public string offerqty { get; set; }
    }
    class Routes
    {
        public string operation { set; get; }
        public string routesno { set; get; }
        public string routename { set; get; }
        public string mainbrnch { set; get; }
        public string indenttype { set; get; }
    }
    class DispatchInventory
    {
        public string Sno { get; set; }
        public string InvSno { get; set; }
        public string InvName { get; set; }
        public string EmpName { get; set; }
        public string Invqty { get; set; }
        public string TripId { get; set; }
    }
    private void get_all_Routes(HttpContext context)
    {
        string salestypes = context.Session["salestype"].ToString();
        string branch = context.Session["branch"].ToString();
        try
        {
            vdbmngr = new VehicleDBMgr();
            if (salestypes == "Plant")
            {
                cmd = new MySqlCommand("SELECT Sno, RouteName, BranchID AS mainbranch FROM branchroutes WHERE (BranchID = @bid) UNION SELECT branchroutes_1.Sno, branchroutes_1.RouteName, branchroutes_1.BranchID AS mainbranch FROM branchmappingtable INNER JOIN branchroutes branchroutes_1 ON branchmappingtable.SubBranch = branchroutes_1.BranchID WHERE (branchmappingtable.SuperBranch = @bid)");
                cmd.Parameters.AddWithValue("@bid", branch);
            }
            else
            {
                cmd = new MySqlCommand("SELECT Sno, RouteName,BranchID AS mainbranch FROM branchroutes WHERE (BranchID = @bid)");
                cmd.Parameters.AddWithValue("@bid", branch);
            }

            DataTable dt = vdbmngr.SelectQuery(cmd).Tables[0];
            List<Routes> allRoutes = new List<Routes>();
            foreach (DataRow dr in dt.Rows)
            {
                Routes Getallroutes = new Routes();
                Getallroutes.routesno = dr["Sno"].ToString();
                Getallroutes.routename = dr["RouteName"].ToString();
                Getallroutes.mainbrnch = dr["mainbranch"].ToString();
                allRoutes.Add(Getallroutes);
            }
            string response = GetJson(allRoutes);
            context.Response.Write(response);
        }
        catch
        {

        }
    }
    private void updatedispatchestogrid(HttpContext context)
    {
        string ltype = context.Session["LevelType"].ToString();
        try
        {
            vdbmngr = new VehicleDBMgr();
            Dictionary<string, routesgrid> routesdesc = new Dictionary<string, routesgrid>();
            if (ltype == "MAdmin")
            {
                cmd = new MySqlCommand("SELECT branchroutesubtable.RefNo, branchroutes.RouteName, branchroutes.UserID, branchroutesubtable.BranchID, branchdata.BranchName FROM branchroutes INNER JOIN branchroutesubtable ON branchroutes.Sno = branchroutesubtable.RefNo INNER JOIN branchdata ON branchroutesubtable.BranchID = branchdata.sno WHERE (branchroutes.UserID = @username)");
                cmd.Parameters.AddWithValue("@username", context.Session["userdata_sno"].ToString());
            }
            else
            {
                cmd = new MySqlCommand("SELECT result.DispMode,result.RouteName, result.Route_id, result.DispName, branchroutes_1.RouteName AS MainRouteName,result.dispatch_sno,result.DispType,result.DispTime,result.IndTime,result.Dispdate, result.flag FROM (SELECT branchroutes.RouteName, dispatch_sub.Route_id, dispatch.DispName,dispatch.DispMode,dispatch.DispType,dispatch.DispTime,dispatch.IndTime,dispatch.Dispdate, dispatch.flag, dispatch.Route_id AS mainroute, dispatch_sub.dispatch_sno FROM dispatch INNER JOIN dispatch_sub ON dispatch.sno = dispatch_sub.dispatch_sno INNER JOIN branchroutes ON dispatch_sub.Route_id = branchroutes.Sno WHERE (dispatch.Branch_Id = @BranchID)) result INNER JOIN branchroutes branchroutes_1 ON result.mainroute = branchroutes_1.Sno");
                cmd.Parameters.AddWithValue("@BranchID", context.Session["branch"].ToString());
            }
            DataTable dt = vdbmngr.SelectQuery(cmd).Tables[0];
            foreach (DataRow dr in dt.Rows)
            {
                if (!routesdesc.ContainsKey(dr["DispName"].ToString()))
                {
                    routesgrid routesobj = new routesgrid();
                    routesobj.RefNo = dr["dispatch_sno"].ToString();
                    routesobj.RouteName = dr["DispName"].ToString();
                    routesobj.Mainroute = dr["MainRouteName"].ToString();
                    routesobj.DistributorName = dr["RouteName"].ToString();
                    routesobj.flag = dr["flag"].ToString();
                    routesobj.DespDate = dr["Dispdate"].ToString();
                    string DispType = dr["DispType"].ToString();
                    if (DispType == "SO")
                    {
                        DispType = "Sales Office";
                    }
                    if (DispType == "SM")
                    {
                        DispType = "Direct Routes";
                    }
                    routesobj.DespType = DispType;
                    routesobj.DespTime = dr["DispTime"].ToString();
                    routesobj.DispMode = dr["DispMode"].ToString();
                    routesobj.IndTime = dr["IndTime"].ToString();
                    routesdesc.Add(dr["DispName"].ToString(), routesobj);
                }
                else
                {
                    routesgrid routesobj = new routesgrid();
                    routesobj = routesdesc[dr["DispName"].ToString()];
                    routesobj.DistributorName += "->" + dr["RouteName"].ToString();
                }
            }
            string response = GetJson(routesdesc);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {

        }

    }
    private void updatedispatchselected(HttpContext context)
    {
        try
        {
            string dispatchsno = context.Request["dispatchsno"];
            vdbmngr = new VehicleDBMgr();
            List<dispatches> divselecteddispatch = new List<dispatches>();

            if (context.Session["LevelType"].ToString() == "Admin" || context.Session["LevelType"].ToString() == "MAdmin")
            {
                cmd = new MySqlCommand("SELECT dispatch_sub.IndentType, dispatch.DispName,branchroutes.RouteName AS subroutename, dispatch_sub.Route_id AS subroutesno,branchroutes_1.RouteName AS mainroute, branchroutes_1.Sno AS mainroutesno, dispatch.sno AS dispatchsno FROM dispatch INNER JOIN dispatch_sub ON dispatch.sno = dispatch_sub.dispatch_sno INNER JOIN branchroutes ON dispatch_sub.Route_id = branchroutes.Sno INNER JOIN branchroutes branchroutes_1 ON dispatch.Route_id = branchroutes_1.Sno WHERE (dispatch.sno = @dispatchsno)");
                cmd.Parameters.AddWithValue("@dispatchsno", dispatchsno);
                DataTable dt = vdbmngr.SelectQuery(cmd).Tables[0];
                foreach (DataRow dr in dt.Rows)
                {
                    dispatches Getdispatchroutes = new dispatches();
                    Getdispatchroutes.IndentType = dr["IndentType"].ToString();
                    Getdispatchroutes.mainroutesno = dr["mainroutesno"].ToString();
                    Getdispatchroutes.subroutename = dr["subroutename"].ToString();
                    Getdispatchroutes.subroutesno = dr["subroutesno"].ToString();
                    Getdispatchroutes.DispName = dr["DispName"].ToString();
                    divselecteddispatch.Add(Getdispatchroutes);
                }
            }
            string response = GetJson(divselecteddispatch);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string msg = ex.Message;
            string response = GetJson(msg);
            context.Response.Write(response);
        }
    }
    public class dispatches
    {
        public string IndentType { get; set; }
        public string mainroutesno { get; set; }
        public string subroutesno { get; set; }
        public string subroutename { get; set; }
        public string DispName { get; set; }
    }
    private void get_Routes_indents(HttpContext context)
    {
        string salestypes = context.Session["salestype"].ToString();
        string branch = context.Session["branch"].ToString();
        string selectedrouteid = context.Request["Selectedid"];
        try
        {
            vdbmngr = new VehicleDBMgr();
            cmd = new MySqlCommand("SELECT IndentType, RouteID FROM routeindents WHERE (RouteID =@routeid )");
            cmd.Parameters.AddWithValue("@routeid", selectedrouteid);
            DataTable dt = vdbmngr.SelectQuery(cmd).Tables[0];
            List<Routes> allRoutes = new List<Routes>();
            foreach (DataRow dr in dt.Rows)
            {
                Routes Getallroutes = new Routes();
                Getallroutes.routesno = dr["RouteID"].ToString();
                Getallroutes.indenttype = dr["IndentType"].ToString();
                allRoutes.Add(Getallroutes);
            }
            string response = GetJson(allRoutes);
            context.Response.Write(response);
        }
        catch
        {

        }
    }
    private void btn_dispatchRoutesClick(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            var js = new JavaScriptSerializer();
            string Username = context.Session["userdata_sno"].ToString();
            string branchid = context.Session["branch"].ToString();
            var title1 = context.Request.Params[1];
            Orders obj = js.Deserialize<Orders>(title1);
            string routenam = obj.DispatchRoutename;
            string originalRoute = obj.Org_RouteNames;
            string dispflag = obj.Dispatchflag;
            string btnaddmodify = obj.btnaddmodify;
            string DispMode = obj.DispMode;
            if (btnaddmodify == "Save")
            {
                cmd = new MySqlCommand("insert into dispatch (DispName,Branch_Id,Route_id,flag,DispMode)values(@DispName,@Branch_Id,@Route_id,@flag,@DispMode)");
                cmd.Parameters.AddWithValue("@DispName", routenam);
                cmd.Parameters.AddWithValue("@Branch_Id", branchid);
                cmd.Parameters.AddWithValue("@Route_id", originalRoute);
                cmd.Parameters.AddWithValue("@flag", true);
                cmd.Parameters.AddWithValue("@DispMode", DispMode);
                long dispatchsno = vdbmngr.insertScalar(cmd);
                foreach (string o in obj.dataarr)
                {
                    string[] routeindents = o.Split('-');
                    var r = routeindents[0];
                    var ind = routeindents[1];
                    cmd = new MySqlCommand("insert into dispatch_sub (dispatch_sno,Route_id,IndentType)values(@dispatch_sno,@Route_id,@itype)");
                    cmd.Parameters.AddWithValue("@dispatch_sno", dispatchsno);
                    cmd.Parameters.AddWithValue("@Route_id", r);
                    cmd.Parameters.AddWithValue("@itype", ind);
                    vdbmngr.insert(cmd);
                }
                var jsonSerializer = new JavaScriptSerializer();
                var jsonString = String.Empty;
                context.Request.InputStream.Position = 0;
                using (var inputStream = new StreamReader(context.Request.InputStream))
                {
                    jsonString = inputStream.ReadToEnd();
                }
                List<string> MsgList = new List<string>();
                string msg = "Data Successfully Saved";
                MsgList.Add(msg);
                string response = GetJson(MsgList);
                context.Response.Write(response);
            }
            else
            {
                string sno = obj.dispatchsno;
                cmd = new MySqlCommand("update dispatch set DispName=@dispName,Route_id=@Routeid,flag=@flag,DispMode=@DispMode WHERE sno=@sno");
                cmd.Parameters.AddWithValue("@dispName", routenam);
                cmd.Parameters.AddWithValue("@Routeid", originalRoute);
                cmd.Parameters.AddWithValue("@sno", sno);
                cmd.Parameters.AddWithValue("@DispMode", DispMode);

                if (dispflag == "Active")
                {
                    cmd.Parameters.AddWithValue("@flag", true);
                }
                else
                {
                    cmd.Parameters.AddWithValue("@flag", false);
                }
                vdbmngr.Update(cmd);
                cmd = new MySqlCommand("delete from  dispatch_sub Where dispatch_sno=@RefNo");
                cmd.Parameters.AddWithValue("@RefNo", sno);
                vdbmngr.Delete(cmd);

                foreach (string o in obj.dataarr)
                {
                    string[] routeindents = o.Split('-');
                    var r = routeindents[0];
                    var ind = routeindents[1];
                    cmd = new MySqlCommand("insert into dispatch_sub (dispatch_sno,Route_id,IndentType)values(@dispatch_sno,@Route_id,@itype)");
                    cmd.Parameters.AddWithValue("@dispatch_sno", sno);
                    cmd.Parameters.AddWithValue("@Route_id", r);
                    cmd.Parameters.AddWithValue("@itype", ind);
                    vdbmngr.insert(cmd);
                }

                var jsonSerializer = new JavaScriptSerializer();
                var jsonString = String.Empty;
                context.Request.InputStream.Position = 0;
                using (var inputStream = new StreamReader(context.Request.InputStream))
                {
                    jsonString = inputStream.ReadToEnd();
                }
                List<string> MsgList = new List<string>();
                string msg = "Data Successfully Updated";
                MsgList.Add(msg);
                string response = GetJson(MsgList);
                context.Response.Write(response);
            }

        }
        catch (Exception ex)
        {
            string msg = ex.Message;
            string response = GetJson(msg);
            context.Response.Write(response);
        }
    }
    public class brnchmapping
    {
        public string sno { get; set; }
        public string brncName { get; set; }
        public List<brnchmapping> lstbrnch = new List<brnchmapping>();
    }
    private void updatedivselected(HttpContext context)
    {
        try
        {
            string refnum = context.Request["refno"];
            vdbmngr = new VehicleDBMgr();
            List<divselected> divselectedlist = new List<divselected>();
            if (context.Session["LevelType"].ToString() == "Admin" || context.Session["LevelType"].ToString() == "MAdmin")
            {
                cmd = new MySqlCommand("SELECT branchroutesubtable.Rank, branchroutesubtable.RefNo, branchdata.BranchName, branchroutesubtable.BranchID FROM branchroutes INNER JOIN branchroutesubtable ON branchroutes.Sno = branchroutesubtable.RefNo INNER JOIN branchdata ON branchroutesubtable.BranchID = branchdata.sno WHERE (branchroutesubtable.RefNo = @refnum) ORDER BY branchroutesubtable.Rank");
                //cmd = new MySqlCommand("SELECT branchroutesubtable.Rank, branchroutesubtable.RefNo, branchroutesubtable.BranchID FROM branchroutes INNER JOIN branchroutesubtable ON branchroutes.Sno = branchroutesubtable.RefNo WHERE (branchroutesubtable.RefNo = @refnum) ORDER BY branchroutesubtable.Rank");
                cmd.Parameters.AddWithValue("@refnum", refnum);
                DataTable dt = vdbmngr.SelectQuery(cmd).Tables[0];
                cmd = new MySqlCommand("SELECT RouteID, IndentType FROM routeindents WHERE (RouteID = @refnum)");
                cmd.Parameters.AddWithValue("@refnum", refnum);
                DataTable dtrouteindents = vdbmngr.SelectQuery(cmd).Tables[0];
                foreach (DataRow dr in dt.Rows)
                {
                    divselected Getdistributors = new divselected();

                    Getdistributors.BranchID = dr["BranchID"].ToString();
                    Getdistributors.DistributorName = dr["BranchName"].ToString();
                    divselectedlist.Add(Getdistributors);
                }
            }
            string response = GetJson(divselectedlist);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string msg = ex.Message;
            string response = GetJson(msg);
            context.Response.Write(response);
        }
    }
    private void updatedivindents(HttpContext context)
    {
        try
        {
            string refnum = context.Request["refno"];
            vdbmngr = new VehicleDBMgr();
            List<divselected> divselectedlist = new List<divselected>();
            if (context.Session["LevelType"].ToString() == "Admin" || context.Session["LevelType"].ToString() == "MAdmin")
            {
                cmd = new MySqlCommand("SELECT RouteID, IndentType FROM routeindents WHERE (RouteID = @refnum)");
                cmd.Parameters.AddWithValue("@refnum", refnum);
                DataTable dtrouteindents = vdbmngr.SelectQuery(cmd).Tables[0];
                foreach (DataRow dr in dtrouteindents.Rows)
                {
                    divselected Getdistributors = new divselected();
                    Getdistributors.Indenttype = dr["IndentType"].ToString();
                    divselectedlist.Add(Getdistributors);
                }
            }
            string response = GetJson(divselectedlist);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string msg = ex.Message;
            string response = GetJson(msg);
            context.Response.Write(response);
        }
    }
    public class divselected
    {
        public string BranchID { get; set; }
        public string DistributorName { get; set; }
        public string BranchName { get; set; }
        public string Indenttype { get; set; }
    }
    private void get_Branches_Salesoffice(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            cmd = new MySqlCommand("SELECT result.BranchName, result.sno, branchroutesubtable.BranchID AS status FROM (SELECT branchdata_2.sno, branchdata_2.BranchName FROM branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN branchmappingtable ON branchdata.sno = branchmappingtable.SuperBranch INNER JOIN branchdata branchdata_2 ON branchmappingtable.SubBranch = branchdata_2.sno WHERE (branchdata_1.SalesOfficeID = @SOID) AND (branchdata.SalesType IS NOT NULL) OR (branchdata.SalesType IS NOT NULL) AND (branchdata.sno = @BranchID)) result LEFT OUTER JOIN branchroutesubtable ON result.sno = branchroutesubtable.BranchID GROUP BY result.sno ORDER BY result.BranchName");
            cmd.Parameters.AddWithValue("@SOID", context.Session["branch"].ToString());
            cmd.Parameters.AddWithValue("@BranchID", context.Session["branch"].ToString());
            DataTable dtBranch = vdbmngr.SelectQuery(cmd).Tables[0];
            List<RouteNames> initializedatalist = new List<RouteNames>();
            foreach (DataRow dr in dtBranch.Rows)
            {
                RouteNames initializedata = new RouteNames();
                initializedata.id = dr["sno"].ToString();
                initializedata.Name = dr["BranchName"].ToString();

                initializedata.status = dr["status"].ToString();
                initializedatalist.Add(initializedata);
            }
            if (initializedatalist != null)
            {
                string response = GetJson(initializedatalist);
                context.Response.Write(response);
            }

        }
        catch (Exception ex)
        {
            string msg = ex.Message;
            string response = GetJson(msg);
            context.Response.Write(response);
        }
    }
    private void departmentsave(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            string txtdepartmentname = context.Request["txtdepartmentname"];
            string operationtype = context.Request["operationtype"];
            string msg = "";
            if (operationtype == "SAVE")
            {
                cmd = new MySqlCommand("insert into deptmaster (DeptName) values (@txtdepartmentname)");
                cmd.Parameters.AddWithValue("@txtdepartmentname", txtdepartmentname);
                vdbmngr.insert(cmd);
                msg = "Department data successfully saved";
            }
            else if (operationtype == "MODIFY")
            {
                string sname = context.Request["sno"];
                cmd = new MySqlCommand("update deptmaster set DeptName=@txtdepartmentname where sno='" + sname + "'");
                cmd.Parameters.AddWithValue("@txtdepartmentname", txtdepartmentname);
                vdbmngr.Update(cmd);
                msg = "Department data successfully modified";
            }
            string response = GetJson(msg);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string msg = ex.Message;
            string response = GetJson(msg);
            context.Response.Write(response);
        }
    }
    private void updatedepartment_manage(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            string username = context.Request["username"];
            cmd = new MySqlCommand("select Sno,DeptName From deptmaster");
            DataTable dt = vdbmngr.SelectQuery(cmd).Tables[0];
            List<department> departmentlist = new List<department>();
            foreach (DataRow dr in dt.Rows)
            {
                department Getdepartmenttype = new department();
                Getdepartmenttype.DeptName = dr["DeptName"].ToString();
                Getdepartmenttype.sno = dr["Sno"].ToString();
                departmentlist.Add(Getdepartmenttype);
            }
            string response = GetJson(departmentlist);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            if (ex.Message == "Object reference not set to an instance of an object.")
            {
                context.Response.ContentType = MediaTypeNames.Text.Plain;
                context.Response.StatusCode = 400;
                context.Response.Write("Session Expired");
            }
            else
            {
                context.Response.ContentType = MediaTypeNames.Text.Plain;
                context.Response.StatusCode = 300;
                context.Response.Write(ex.Message);
            }
        }
    }
    public class department
    {
        public string sno { get; set; }
        public string DeptName { get; set; }
        public string flag { get; set; }
    }
    private void get_employees_department(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            List<initializedataclass> initializedatalist = new List<initializedataclass>();
            cmd = new MySqlCommand("select Sno,DeptName from deptmaster");
            foreach (DataRow dr in vdbmngr.SelectQuery(cmd).Tables[0].Rows)
            {
                initializedataclass initializedata = new initializedataclass();
                initializedata.sno = dr["Sno"].ToString();
                initializedata.Departmentname = dr["DeptName"].ToString();
                initializedatalist.Add(initializedata);
            }
            if (initializedatalist != null)
            {
                string response = GetJson(initializedatalist);
                context.Response.Write(response);
            }
        }
        catch (Exception ex)
        {
            string msg = ex.Message;
            string response = GetJson(msg);
            context.Response.Write(response);
        }
    }
    private void get_Plant_TripRoutes(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            DataTable dtTotalDispatches = new DataTable();
            string Username = context.Session["userdata_sno"].ToString();
            List<Route> brnch = new List<Route>();
            List<Dispatchplan> DispatchplanList = new List<Dispatchplan>();
            string Branchname = context.Session["BranchName"].ToString();
            string bid = context.Session["branch"].ToString();
            cmd = new MySqlCommand("select sno,DispName from dispatch where Branch_Id=@branchid and flag<>0 order by sno");
            cmd.Parameters.AddWithValue("@branchid", context.Session["branch"].ToString());
            DataTable dtDispatches = vdbmngr.SelectQuery(cmd).Tables[0];
            dtTotalDispatches.Columns.Add("sno");
            dtTotalDispatches.Columns.Add("DispName");
            dtTotalDispatches.Columns.Add("dispatchTime");
            dtTotalDispatches.Columns.Add("PlanStatus");
            dtTotalDispatches.Columns.Add("Plantime");
            dtTotalDispatches.Columns.Add("DespatchStatus");
            dtTotalDispatches.Columns.Add("EndStatus");
            dtTotalDispatches.Columns.Add("EndTime");
            foreach (DataRow dr in dtDispatches.Rows)
            {
                DataRow newrow = dtTotalDispatches.NewRow();
                newrow["sno"] = dr["sno"].ToString();
                newrow["DispName"] = dr["DispName"].ToString();
                newrow["dispatchTime"] = "";
                newrow["PlanStatus"] = "";
                newrow["Plantime"] = "";
                newrow["DespatchStatus"] = "";
                newrow["EndStatus"] = "";
                newrow["EndTime"] = "";
                dtTotalDispatches.Rows.Add(newrow);
            }
            DateTime ServerDateCurrentdate = VehicleDBMgr.GetTime(vdbmngr.conn);
            cmd = new MySqlCommand("SELECT dispatch.DispName, dispatch.sno, tripdata.PlanStatus,tripdata.status as EndStatus,tripdata.Cdate ,tripdata.PlanTime,tripdata.DispTime, tripdata.AssignDate, tripdata.DespatchStatus FROM  tripdata INNER JOIN triproutes ON tripdata.Sno = triproutes.Tripdata_sno RIGHT OUTER JOIN dispatch ON triproutes.RouteID = dispatch.sno WHERE  (dispatch.flag <> 0) AND  (dispatch.Branch_Id = @branchid) AND (tripdata.AssignDate BETWEEN @d1 AND @d2) GROUP BY dispatch.DispName order by dispatch.sno");
            cmd.Parameters.AddWithValue("@branchid", context.Session["branch"].ToString());
            cmd.Parameters.AddWithValue("@d1", GetLowDate(ServerDateCurrentdate));
            cmd.Parameters.AddWithValue("@d2", GetHighDate(ServerDateCurrentdate));
            DataTable dtAssignDisp = vdbmngr.SelectQuery(cmd).Tables[0];
            foreach (DataRow drtotal in dtTotalDispatches.Rows)
            {
                foreach (DataRow dr in dtAssignDisp.Rows)
                {
                    if (drtotal["sno"].ToString() == dr["sno"].ToString())
                    {
                        drtotal["dispatchTime"] = dr["DispTime"].ToString();
                        drtotal["PlanStatus"] = dr["PlanStatus"].ToString();
                        drtotal["Plantime"] = dr["Plantime"].ToString();
                        drtotal["DespatchStatus"] = dr["DespatchStatus"].ToString();
                        drtotal["EndStatus"] = dr["EndStatus"].ToString();
                        drtotal["EndTime"] = dr["Cdate"].ToString();
                    }
                }
            }
            if (dtTotalDispatches.Rows.Count > 0)
            {
                int i = 1;
                foreach (DataRow dr in dtTotalDispatches.Rows)
                {
                    Dispatchplan GetDispatch = new Dispatchplan();
                    GetDispatch.Sno = i++.ToString();
                    GetDispatch.Route_id = dr["Sno"].ToString();
                    GetDispatch.RouteName = dr["DispName"].ToString();
                    string DOE = dr["dispatchTime"].ToString();
                    if (DOE != "")
                    {
                        GetDispatch.DespTime = DOE;
                    }
                    else
                    {
                        string ChangedTime = "";
                        GetDispatch.DespTime = ChangedTime;
                    }
                    string Plantime = dr["Plantime"].ToString();
                    if (Plantime != "")
                    {
                        GetDispatch.PlanTime = Plantime;
                    }
                    else
                    {
                        string ChangedTime = "";
                        GetDispatch.PlanTime = ChangedTime;
                    }
                    string PlanStatus = dr["PlanStatus"].ToString();
                    if (PlanStatus == "")
                    {
                        PlanStatus = "Plan";
                    }
                    if (PlanStatus == "A")
                    {
                        PlanStatus = "Planned";
                    }
                    if (PlanStatus == "P")
                    {
                        PlanStatus = "Planned";
                    }
                    GetDispatch.PlantStatus = PlanStatus;
                    string EndStatus = dr["EndStatus"].ToString();
                    if (EndStatus == "A")
                    {
                        EndStatus = "Assign";
                    }
                    if (EndStatus == "P")
                    {
                        EndStatus = "Pending";
                    }
                    if (EndStatus == "V")
                    {
                        EndStatus = "Verified";
                    }
                    GetDispatch.EndStatus = EndStatus;
                    string EndTime = dr["EndTime"].ToString();
                    if (EndTime != "")
                    {
                        GetDispatch.EndTime = EndTime;
                    }
                    else
                    {
                        GetDispatch.EndTime = EndTime;
                    }
                    string DespatchStatus = dr["DespatchStatus"].ToString();
                    if (DespatchStatus == "")
                    {
                        DespatchStatus = "No";
                    }
                    GetDispatch.DespStatus = DespatchStatus;
                    GetDispatch.Branchname = Branchname;
                    DispatchplanList.Add(GetDispatch);
                }
                string response = GetJson(DispatchplanList);
                context.Response.Write(response);
            }
        }
        catch (Exception ex)
        {
            string msg = ex.Message;
            string response = GetJson(msg);
            context.Response.Write(response);
        }
    }
    class Dispatchplan
    {
        public string Sno { set; get; }
        public string Route_id { set; get; }
        public string RouteName { set; get; }
        public string PlanTime { set; get; }
        public string DespTime { set; get; }
        public string PlantStatus { set; get; }
        public string DespStatus { set; get; }
        public string EndStatus { set; get; }
        public string EndTime { set; get; }
        public string tripid { set; get; }
        public string Branchname { set; get; }
    }
    private DateTime GetLowDate(DateTime dt)
    {
        double Hour, Min, Sec;
        DateTime DT = DateTime.Now;
        DT = dt;
        Hour = -dt.Hour;
        Min = -dt.Minute;
        Sec = -dt.Second;
        DT = DT.AddHours(Hour);
        DT = DT.AddMinutes(Min);
        DT = DT.AddSeconds(Sec);
        return DT;

    }
    private DateTime GetHighDate(DateTime dt)
    {
        double Hour, Min, Sec;
        DateTime DT = DateTime.Now;
        Hour = 23 - dt.Hour;
        Min = 59 - dt.Minute;
        Sec = 59 - dt.Second;
        DT = dt;
        DT = DT.AddHours(Hour);
        DT = DT.AddMinutes(Min);
        DT = DT.AddSeconds(Sec);
        return DT;
    }
    int dtrowscount = 0;
    DataTable dtallProducts = new DataTable();
    string tripid = "";
    string empid = "";
    string vehcleno = "";
    private void get_Plant_Trip_RouteNameChange(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            var js = new JavaScriptSerializer();
            var title1 = context.Request.Params[1];
            Orders obj = js.Deserialize<Orders>(title1);
            string RouteID = obj.routename;
            empid = obj.EmpID;
            //string AssignDate = obj.date;
            string Username = context.Session["userdata_sno"].ToString();
            string salestype = context.Session["salestype"].ToString();
            List<Products> Productslist = new List<Products>();
            string DispatchStatus = obj.DispatchStatus;
            DateTime ServerDateCurrentdate = VehicleDBMgr.GetTime(vdbmngr.conn);
            string IndentDate = context.Session["IndentDate"].ToString();
            DateTime Currentdate = Convert.ToDateTime(IndentDate);
            DateTime AssignDate = Convert.ToDateTime(IndentDate);
            string dispdate = context.Session["DispatchDate"].ToString();
            if (dispdate == "0")
            {
                Currentdate = Currentdate;
            }
            else
            {
                ServerDateCurrentdate = Currentdate;
                Currentdate = Currentdate.AddDays(-1);
            }
            string LevelType = context.Session["LevelType"].ToString();
            context.Session["tripid"] = "";
            vehcleno = "";
            int Sno = 0;
            string branch = context.Session["branch"].ToString();
            DataTable dtproductsdata = new DataTable();
            cmd = new MySqlCommand("SELECT   productsdata.invqty,productsdata.sno, productsdata.ProductName, productsdata.Units, invmaster.Qty, productsdata.Inventorysno,  invmaster.InvName FROM  productsdata INNER JOIN invmaster ON productsdata.Inventorysno = invmaster.sno INNER JOIN branchproducts ON productsdata.sno = branchproducts.product_sno WHERE (branchproducts.branch_sno = @BranchID) AND (branchproducts.flag = @FLAG)  ORDER BY branchproducts.Rank");
            cmd.Parameters.AddWithValue("@FLAG", "1");
            cmd.Parameters.AddWithValue("@BranchID", context.Session["SOBranchId"].ToString());
            dtproductsdata = vdbmngr.SelectQuery(cmd).Tables[0];
            dtallProducts = new DataTable();
            dtallProducts.Columns.Add("sno");
            dtallProducts.Columns.Add("ProductName");
            dtallProducts.Columns.Add("TotalQty");
            dtallProducts.Columns.Add("Units");
            dtallProducts.Columns.Add("Qty");
            dtallProducts.Columns.Add("Inventorysno");
            dtallProducts.Columns.Add("InvName");
            dtallProducts.Columns.Add("Tubs");
            dtallProducts.Columns.Add("Cans");
            foreach (DataRow dr in dtproductsdata.Rows)
            {
                DataRow newRow = dtallProducts.NewRow();
                newRow["sno"] = dr["sno"].ToString();
                newRow["ProductName"] = dr["ProductName"].ToString();
                newRow["TotalQty"] = "0";
                newRow["Units"] = dr["Units"].ToString();
                newRow["Qty"] = dr["invqty"].ToString();
                newRow["Inventorysno"] = dr["Inventorysno"].ToString();
                newRow["InvName"] = dr["InvName"].ToString();
                newRow["Tubs"] = "0";
                newRow["Cans"] = "0";
                dtallProducts.Rows.Add(newRow);
            }
            DataView dv = dtallProducts.DefaultView;
            DataTable dtallProducts1 = dv.ToTable(true, "Inventorysno");
            DateTime todayy = DateTime.Now;
            cmd = new MySqlCommand("SELECT tripdata.Sno, tripdata.EmpId,tripdata.VehicleNo FROM tripdata INNER JOIN triproutes ON tripdata.Sno = triproutes.Tripdata_sno WHERE (triproutes.RouteID = @dispid) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)");
            cmd.Parameters.AddWithValue("@dispid", RouteID);
            cmd.Parameters.AddWithValue("@d1", GetLowDate(AssignDate));
            cmd.Parameters.AddWithValue("@d2", GetHighDate(AssignDate));
            DataTable dtcheck = vdbmngr.SelectQuery(cmd).Tables[0];
            if (dtcheck.Rows.Count > 0)
            {
                tripid = dtcheck.Rows[0]["Sno"].ToString();
                context.Session["tripid"] = tripid;
                empid = "";
                empid = dtcheck.Rows[0]["EmpId"].ToString();
                vehcleno = dtcheck.Rows[0]["VehicleNo"].ToString();
                cmd = new MySqlCommand("SELECT productsdata.sno,productsdata.ProductName,productsdata.ifdflag, tripsubdata.Qty AS TotalQty FROM tripdata INNER JOIN tripsubdata ON tripdata.Sno = tripsubdata.Tripdata_sno INNER JOIN productsdata ON tripsubdata.ProductId = productsdata.sno WHERE (tripdata.Sno = @tripid)");
                cmd.Parameters.AddWithValue("@tripid", tripid);
                DataTable dttripprdt = vdbmngr.SelectQuery(cmd).Tables[0];
                foreach (DataRow drtripprdt in dttripprdt.Rows)
                {
                    foreach (DataRow drprdtcpy in dtallProducts.Rows)
                    {
                        if (drtripprdt["sno"].ToString() == drprdtcpy["sno"].ToString())
                        {
                            float qty = 0;
                            float.TryParse(drtripprdt["TotalQty"].ToString(), out qty);
                            float qtycpy = 0;
                            float.TryParse(drprdtcpy["TotalQty"].ToString(), out qtycpy);
                            float totalqty = qty + qtycpy;
                            float invqty = 0;
                            foreach (DataRow drinvsno in dtallProducts1.Rows)
                            {
                                if (drprdtcpy["Inventorysno"].ToString() == drinvsno["Inventorysno"].ToString())
                                {
                                    float.TryParse(drprdtcpy["Qty"].ToString(), out invqty);
                                    drprdtcpy["Cans"] = totalqty / invqty;
                                }
                            }
                            drprdtcpy["TotalQty"] = totalqty;
                        }
                        else
                        {
                        }
                    }
                }
            }
            else
            {
                cmd = new MySqlCommand("select Route_id,IndentType from dispatch_sub where dispatch_sno=@dispsno");
                cmd.Parameters.AddWithValue("@dispsno", RouteID);
                DataTable dtrouteindenttype = vdbmngr.SelectQuery(cmd).Tables[0];
                foreach (DataRow drrouteitype in dtrouteindenttype.Rows)
                {
                    var routeid = drrouteitype["Route_id"].ToString();
                    var routeitype = drrouteitype["IndentType"].ToString();
                    DataTable dtProducts = new DataTable();
                    DataTable dtofferProducts = new DataTable();
                    DataTable dtprdtcpy = new DataTable();
                    cmd = new MySqlCommand("SELECT branchroutes.RouteName, ROUND(SUM(indents_subtable.unitQty),2) AS TotalQty,indents.IndentType, productsdata.sno, productsdata.ProductName,productsdata.ifdflag FROM branchroutes INNER JOIN branchroutesubtable ON branchroutes.Sno = branchroutesubtable.RefNo INNER JOIN branchdata ON branchroutesubtable.BranchID = branchdata.sno INNER JOIN indents ON branchdata.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE (branchroutes.Sno = '" + routeid + "') and indents.Status<>@st and indents.IndentType=@itype and (indents.I_date BETWEEN @d1 AND @d2)  GROUP BY productsdata.ProductName ");
                    cmd.Parameters.AddWithValue("@st", "D");
                    cmd.Parameters.AddWithValue("@d1", GetLowDate(Currentdate));
                    cmd.Parameters.AddWithValue("@d2", GetHighDate(Currentdate));
                    cmd.Parameters.AddWithValue("@itype", routeitype);
                    int.TryParse(context.Session["branch"].ToString(), out Sno);
                    dtProducts = vdbmngr.SelectQuery(cmd).Tables[0];

                    cmd = new MySqlCommand("SELECT branchroutes.RouteName, ROUND(SUM(offer_indents_sub.offer_indent_qty), 2) AS TotalofferQty, offer_indents.IndentType, productsdata.sno, productsdata.ProductName, productsdata.ifdflag FROM branchroutes INNER JOIN  branchroutesubtable ON branchroutes.Sno = branchroutesubtable.RefNo INNER JOIN  branchdata ON branchroutesubtable.BranchID = branchdata.sno INNER JOIN offer_indents ON branchdata.sno = offer_indents.agent_id INNER JOIN offer_indents_sub ON offer_indents.idoffer_indents = offer_indents_sub.idoffer_indents INNER JOIN productsdata ON offer_indents_sub.product_id = productsdata.sno WHERE  (branchroutes.Sno = '" + routeid + "') AND (offer_indents.IndentType = @iitype) AND (offer_indents.indent_date BETWEEN @d11 AND @d22) GROUP BY productsdata.ProductName");
                    cmd.Parameters.AddWithValue("@d11", GetLowDate(Currentdate));
                    cmd.Parameters.AddWithValue("@d22", GetHighDate(Currentdate));
                    cmd.Parameters.AddWithValue("@iitype", routeitype);
                    dtofferProducts = vdbmngr.SelectQuery(cmd).Tables[0];
                    foreach (DataRow drprdt in dtProducts.Rows)
                    {

                        foreach (DataRow drprdtcpy in dtallProducts.Rows)
                        {
                            if (drprdt["sno"].ToString() == drprdtcpy["sno"].ToString())
                            {
                                double TotalofferQty = 0;
                                foreach (DataRow dro in dtofferProducts.Select("sno='" + drprdt["sno"].ToString() + "'"))
                                {
                                    double offerqty = 0;
                                    double.TryParse(dro["TotalofferQty"].ToString(), out offerqty);
                                    TotalofferQty += offerqty;
                                }
                                float qty = 0;
                                float.TryParse(drprdt["TotalQty"].ToString(), out qty);
                                float qtycpy = 0;
                                float.TryParse(drprdtcpy["TotalQty"].ToString(), out qtycpy);
                                float totalqty = qty + qtycpy;
                                float invqty = 0;
                                foreach (DataRow drinvsno in dtallProducts1.Rows)
                                {
                                    if (drprdtcpy["Inventorysno"].ToString() == drinvsno["Inventorysno"].ToString())
                                    {
                                        float.TryParse(drprdtcpy["Qty"].ToString(), out invqty);
                                        drprdtcpy["Cans"] = totalqty / invqty;

                                        string invName = drprdtcpy["InvName"].ToString();
                                    }
                                }
                                drprdtcpy["TotalQty"] = totalqty + TotalofferQty;
                            }
                            else
                            {
                            }
                        }
                    }
                }
            }
            int i = 1;
            DataTable Report = new DataTable();
            Report.Columns.Add("Productsno");
            Report.Columns.Add("ProductName");
            Report.Columns.Add("TotalQty");
            Report.Columns.Add("tubs");
            Report.Columns.Add("cans");
            Report.Columns.Add("units");
            Report.Columns.Add("InvName");
            Report.Columns.Add("qty");
            Report.Columns.Add("empid");
            Report.Columns.Add("vehcleno");

            foreach (DataRow dr in dtallProducts.Rows)
            {
                DataRow newrow = Report.NewRow();
                if (DispatchStatus == "Load")
                {
                    if (dr["TotalQty"].ToString() != "0")
                    {
                        int prdtsno = 0;
                        int.TryParse(dr["sno"].ToString(), out prdtsno);
                        float total_indt_qty = 0;
                        float.TryParse(dr["TotalQty"].ToString(), out total_indt_qty);
                        Products getProducts = new Products();
                        getProducts.snoO = i++.ToString();
                        getProducts.ProductName = dr["ProductName"].ToString();
                        double TotalQty = 0;
                        double.TryParse(dr["TotalQty"].ToString(), out TotalQty);
                        TotalQty = Math.Round(TotalQty, 2);
                        getProducts.TotalQty = TotalQty.ToString();
                        getProducts.Productsno = dr["sno"].ToString();
                        getProducts.tubs = dr["Tubs"].ToString();
                        getProducts.cans = dr["Cans"].ToString();
                        getProducts.units = dr["InvName"].ToString();
                        getProducts.InvName = dr["InvName"].ToString();
                        getProducts.qty = dr["Qty"].ToString();
                        getProducts.empid = empid;
                        getProducts.vehcleno = vehcleno;
                        Productslist.Add(getProducts);
                        newrow["Productsno"] = dr["sno"].ToString();
                        newrow["ProductName"] = dr["ProductName"].ToString();
                        newrow["TotalQty"] = dr["TotalQty"].ToString();
                        newrow["tubs"] = dr["Tubs"].ToString();
                        newrow["cans"] = dr["Cans"].ToString();
                        newrow["units"] = dr["InvName"].ToString();
                        newrow["InvName"] = dr["InvName"].ToString();
                        newrow["qty"] = dr["Qty"].ToString();
                        newrow["empid"] = empid;
                        newrow["vehcleno"] = vehcleno;
                        Report.Rows.Add(newrow);

                    }
                }
                else
                {
                    int prdtsno = 0;
                    int.TryParse(dr["sno"].ToString(), out prdtsno);
                    float total_indt_qty = 0;
                    float.TryParse(dr["TotalQty"].ToString(), out total_indt_qty);
                    Products getProducts = new Products();
                    getProducts.snoO = i++.ToString();
                    getProducts.ProductName = dr["ProductName"].ToString();
                    double TotalQty = 0;
                    double.TryParse(dr["TotalQty"].ToString(), out TotalQty);
                    TotalQty = Math.Round(TotalQty, 2);
                    getProducts.TotalQty = TotalQty.ToString();
                    getProducts.Productsno = dr["sno"].ToString();
                    getProducts.tubs = dr["Tubs"].ToString();
                    getProducts.cans = dr["Cans"].ToString();
                    // getProducts.units = dr["Units"].ToString();
                    getProducts.units = dr["InvName"].ToString();
                    getProducts.InvName = dr["InvName"].ToString();
                    getProducts.qty = dr["Qty"].ToString();
                    getProducts.empid = empid;
                    getProducts.vehcleno = vehcleno;
                    Productslist.Add(getProducts);
                    newrow["Productsno"] = dr["sno"].ToString();
                    newrow["ProductName"] = dr["ProductName"].ToString();
                    newrow["TotalQty"] = dr["TotalQty"].ToString();
                    newrow["tubs"] = dr["Tubs"].ToString();
                    newrow["cans"] = dr["Cans"].ToString();
                    newrow["units"] = dr["InvName"].ToString();
                    newrow["InvName"] = dr["InvName"].ToString();
                    newrow["qty"] = dr["Qty"].ToString();
                    newrow["empid"] = empid;
                    newrow["vehcleno"] = vehcleno;
                    Report.Rows.Add(newrow);
                }
            }
            var jsonSerializer = new JavaScriptSerializer();
            var jsonString = String.Empty;
            context.Request.InputStream.Position = 0;
            using (var inputStream = new StreamReader(context.Request.InputStream))
            {
                jsonString = inputStream.ReadToEnd();
            }
            string response = GetJson(Productslist);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            if (ex.Message == "Object reference not set to an instance of an object.")
            {
                string msg = "Session Expired";
                string response = GetJson(msg);
                context.Response.Write(response);
            }
            else
            {
                string msg = ex.Message;
                string response = GetJson(msg);
                context.Response.Write(response);
            }
        }
    }
    private void GetTripEnd_Details(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            List<Products> Productslist = new List<Products>();
            var IndentDate = context.Request["IndentDate"];
            DateTime Currentdate = Convert.ToDateTime(IndentDate);
            string bid = context.Session["branch"].ToString();
            cmd = new MySqlCommand("SELECT dispatch.DispName, dispatch.sno, tripdata.Status, tripdata.CollectedAmount, tripdata.SubmittedAmount, tripdata.ReceivedAmount, tripdata.Sno AS Tripid,empmanage.EmpName, tripdata.Cdate FROM dispatch INNER JOIN branchdata ON dispatch.Branch_Id = branchdata.sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN empmanage ON tripdata.EmpId = empmanage.Sno WHERE (branchdata.sno = @brnch) AND (tripdata.Status = 'P') AND (tripdata.Permissions <> 'O') AND (tripdata.Cdate BETWEEN @d1 AND @d2) OR (branchdata_1.SalesOfficeID = @brnch) AND (tripdata.Status = 'P') AND (tripdata.Permissions <> 'O') AND (tripdata.Cdate BETWEEN @d1 AND @d2)");
            cmd.Parameters.AddWithValue("@brnch", context.Session["branch"].ToString());
            cmd.Parameters.AddWithValue("@d1", GetLowDate(Currentdate));
            cmd.Parameters.AddWithValue("@d2", GetHighDate(Currentdate));
            DataTable dttripend = vdbmngr.SelectQuery(cmd).Tables[0];
            foreach (DataRow dr in dttripend.Rows)
            {
                string collectedDate = "";
                Products getProducts = new Products();
                getProducts.tripdata = dr["Tripid"].ToString();
                getProducts.empname = dr["EmpName"].ToString();
                getProducts.routename = dr["DispName"].ToString();
                getProducts.collectedamount = dr["CollectedAmount"].ToString();
                getProducts.submittedamount = dr["SubmittedAmount"].ToString();
                getProducts.receivedamount = dr["SubmittedAmount"].ToString();
                collectedDate = dr["Cdate"].ToString();
                if (collectedDate != "")
                {
                    DateTime dtcollectedDate = Convert.ToDateTime(collectedDate);
                    string Cdate = dtcollectedDate.ToString("dd/MMM/yyyy");
                    getProducts.Cdate = Cdate;
                }
                else
                {
                    getProducts.Cdate = collectedDate;
                }
                Productslist.Add(getProducts);
            }
            string response = GetJson(Productslist);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string msg = ex.Message;
            string response = GetJson(msg);
            context.Response.Write(response);
        }
    }
    private void btnPlantTrip_EndSaveClick(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            string tripid = context.Request["TripId"];
            double submittedAmt = 0;
            double.TryParse(context.Request["SubmittedAmt"].ToString(), out submittedAmt);
            double recievedamt = 0;
            double.TryParse(context.Request["ReceivedAmt"].ToString(), out recievedamt);
            string remarks = context.Request["Remarks"];
            DateTime ServerDateCurrentdate = VehicleDBMgr.GetTime(vdbmngr.conn);
            DateTime dtapril = new DateTime();
            DateTime dtmarch = new DateTime();
            int currentyear = ServerDateCurrentdate.Year;
            int nextyear = ServerDateCurrentdate.Year + 1;
            if (ServerDateCurrentdate.Month > 3)
            {
                string apr = "4/1/" + currentyear;
                dtapril = DateTime.Parse(apr);
                string march = "3/31/" + nextyear;
                dtmarch = DateTime.Parse(march);
            }
            if (ServerDateCurrentdate.Month <= 3)
            {
                string apr = "4/1/" + (currentyear - 1);
                dtapril = DateTime.Parse(apr);
                string march = "3/31/" + (nextyear - 1);
                dtmarch = DateTime.Parse(march);
            }

            if (context.Session["branch"].ToString() == "174")
            {
                if (recievedamt >= 0)
                {
                    cmd = new MySqlCommand("Select IFNULL(MAX(GroupRecieptNo),0)+1 as Sno  from cashreceipts where BranchID=@BranchID AND (DOE BETWEEN @d1 AND @d2)");
                    cmd.Parameters.AddWithValue("@BranchID", context.Session["branch"].ToString());
                    cmd.Parameters.AddWithValue("@d1", GetLowDate(dtapril));
                    cmd.Parameters.AddWithValue("@d2", GetHighDate(dtmarch));
                    DataTable dtReceipt = vdbmngr.SelectQuery(cmd).Tables[0];
                    string CashReceiptNo = dtReceipt.Rows[0]["Sno"].ToString();
                    cmd = new MySqlCommand("UPDATE  tripdata set SubmittedAmount=@SubmittedAmount,ReceivedAmount=@ReceivedAmount,Cdate=@Cdate,Status=@status,RecieptNo=@Recieptno where Sno=@tripid");
                    cmd.Parameters.AddWithValue("@SubmittedAmount", submittedAmt);
                    cmd.Parameters.AddWithValue("@ReceivedAmount", recievedamt);
                    cmd.Parameters.AddWithValue("@Recieptno", CashReceiptNo);
                    cmd.Parameters.AddWithValue("@status", 'V');
                    cmd.Parameters.AddWithValue("@tripid", tripid);
                    cmd.Parameters.AddWithValue("@Cdate", ServerDateCurrentdate);
                    vdbmngr.Update(cmd);
                    cmd = new MySqlCommand("SELECT triproutes.RouteID, tripdata.EmpId FROM tripdata INNER JOIN triproutes ON tripdata.Sno = triproutes.Tripdata_sno WHERE (tripdata.Sno = @tripid)");
                    cmd.Parameters.AddWithValue("@tripid", tripid);
                    DataTable dtempid = vdbmngr.SelectQuery(cmd).Tables[0];
                    string empid = dtempid.Rows[0]["EmpId"].ToString();
                    string Routeid = dtempid.Rows[0]["RouteID"].ToString();
                    cmd = new MySqlCommand("Select Amount from branchaccounts where BranchId=@BranchId");
                    cmd.Parameters.AddWithValue("@BranchId", context.Session["branch"].ToString());
                    DataTable dtbrnchoppamt = vdbmngr.SelectQuery(cmd).Tables[0];
                    string amount = "0";
                    if (dtbrnchoppamt.Rows.Count > 0)
                    {
                        amount = dtbrnchoppamt.Rows[0]["Amount"].ToString();
                    }
                    if (recievedamt > 0)
                    {
                        cmd = new MySqlCommand("insert into cashreceipts (BranchId,ReceivedFrom,Empid,AmountPaid,DOE,Create_by,Remarks,OppBal,dispatchid,GroupRecieptNo) values (@BranchId,@ReceivedFrom,@Empid,@AmountPaid,@DOE, @Create_by,@Remarks,@OppBal,@dispatchid,@Receipt)");
                        cmd.Parameters.AddWithValue("@BranchId", context.Session["branch"].ToString());
                        cmd.Parameters.AddWithValue("@ReceivedFrom", "SalesMen");
                        cmd.Parameters.AddWithValue("@Empid", empid);
                        cmd.Parameters.AddWithValue("@AmountPaid", recievedamt);
                        cmd.Parameters.AddWithValue("DOE", ServerDateCurrentdate);
                        cmd.Parameters.AddWithValue("@Create_by", context.Session["UserSno"].ToString());
                        cmd.Parameters.AddWithValue("@Remarks", remarks);
                        cmd.Parameters.AddWithValue("@dispatchid", Routeid);
                        cmd.Parameters.AddWithValue("@OppBal", amount);
                        cmd.Parameters.AddWithValue("@Receipt", CashReceiptNo);
                        vdbmngr.insert(cmd);
                        cmd = new MySqlCommand("Update branchaccounts set Amount=Amount+@Amount where BranchId=@BranchId");
                        cmd.Parameters.AddWithValue("@Amount", recievedamt);
                        cmd.Parameters.AddWithValue("@BranchId", context.Session["branch"].ToString());
                        vdbmngr.Update(cmd);
                        string twothousand = "0";
                        string thousand = "0";
                        string fivehundred = "0";
                        string hundred = "0";
                        string fifty = "0";
                        string twenty = "0";
                        string ten = "0";
                        string five = "0";
                        string twos = "0";
                        string ones = "0";
                        string DenominationString = context.Request["DenominationString"];
                        DenominationString = DenominationString.Replace("+", " ");
                        foreach (string str in DenominationString.Split(' '))
                        {
                            if (str != "")
                            {
                                string[] price = str.Split('x');
                                string amountcount = price[0];
                                string notecount = price[1];
                                if (amountcount == "2000")
                                {
                                    twothousand = notecount;
                                }
                                if (amountcount == "1000")
                                {
                                    thousand = notecount;
                                }
                                if (amountcount == "500")
                                {
                                    fivehundred = notecount;
                                }
                                if (amountcount == "100")
                                {
                                    hundred = notecount;
                                }
                                if (amountcount == "50")
                                {
                                    fifty = notecount;
                                }
                                if (amountcount == "20")
                                {
                                    twenty = notecount;
                                }
                                if (amountcount == "10")
                                {
                                    ten = notecount;
                                }
                                if (amountcount == "5")
                                {
                                    five = notecount;
                                }
                                if (amountcount == "2")
                                {
                                    twos = notecount;
                                }
                                if (amountcount == "1")
                                {
                                    ones = notecount;
                                }
                            }
                        }
                        cmd = new MySqlCommand("Update branch_denomination set amount=amount+@amount,twothousand=twothousand+@twothousand,thousand=thousand+@thousand,fivehundred=fivehundred+@fivehundred,hundred=hundred+@hundred,fifty=fifty+@fifty,twenty=twenty+@twenty,ten=ten+@ten,five=five+@five,twos=twos+@twos,ones=ones+@ones where BranchID=@BranchID");
                        cmd.Parameters.AddWithValue("@amount", recievedamt);
                        cmd.Parameters.AddWithValue("@twothousand", twothousand);
                        cmd.Parameters.AddWithValue("@thousand", thousand);
                        cmd.Parameters.AddWithValue("@fivehundred", fivehundred);
                        cmd.Parameters.AddWithValue("@hundred", hundred);
                        cmd.Parameters.AddWithValue("@fifty", fifty);
                        cmd.Parameters.AddWithValue("@twenty", twenty);
                        cmd.Parameters.AddWithValue("@ten", ten);
                        cmd.Parameters.AddWithValue("@five", five);
                        cmd.Parameters.AddWithValue("@twos", twos);
                        cmd.Parameters.AddWithValue("@ones", ones);
                        cmd.Parameters.AddWithValue("@BranchID", context.Session["branch"].ToString());
                        vdbmngr.Update(cmd);
                        cmd = new MySqlCommand("SELECT Sno, BranchId, ReceivedFrom, AgentID, AmountPaid, DOE, Create_by,  Receipt, PaymentStatus, GroupRecieptNo, GroupRef, Tripid FROM cashreceipts WHERE (Tripid= @Tripid)");
                        cmd.Parameters.AddWithValue("@Tripid", tripid);
                        DataTable dtgrouprecipt = vdbmngr.SelectQuery(cmd).Tables[0];
                        if (dtgrouprecipt.Rows.Count > 0)
                        {
                            foreach (DataRow drrecipt in dtgrouprecipt.Rows)
                            {
                                cmd = new MySqlCommand("Update cashreceipts set GroupRef=@GroupRef where Sno=@Sno");
                                cmd.Parameters.AddWithValue("@Sno", drrecipt["Sno"].ToString());
                                cmd.Parameters.AddWithValue("@GroupRef", CashReceiptNo);
                                vdbmngr.Update(cmd);
                            }
                        }
                        cmd = new MySqlCommand("SELECT Sno, EmpName, Mobno FROM  empmanage WHERE (Sno = @Sno)");
                        cmd.Parameters.AddWithValue("@Sno", empid);
                        DataTable dtPhoneNo = vdbmngr.SelectQuery(cmd).Tables[0];
                        if (dtPhoneNo.Rows.Count > 0)
                        {
                            string EmpName = dtPhoneNo.Rows[0]["EmpName"].ToString();
                            string phonenumber = dtPhoneNo.Rows[0]["Mobno"].ToString();
                            if (phonenumber.Length == 10)
                            {
                                try
                                {

                                    if (context.Session["TitleName"].ToString() == "SRI VYSHNAVI DAIRY SPECIALITIES (P) LTD")
                                    {
                                        WebClient client = new WebClient();

                                        //http://www.smsstriker.com/API/sms.php?username=vaishnavidairy&password=vyshnavi@123&from=VYSNVI&to=

                                        string baseurl = "http://www.smsstriker.com/API/sms.php?username=vaishnavidairy&password=vyshnavi@123&from=VSALES&to=" + phonenumber + "&msg=Dear%20" + EmpName + "%20Your%20Amount%20Collected%20for%20today%20ReceiptNo%20%20" + CashReceiptNo + "%20Date%20" + ServerDateCurrentdate + "%20Amount%20is ->" + recievedamt + "&type=1";
                                        Stream data = client.OpenRead(baseurl);
                                        StreamReader reader = new StreamReader(data);
                                        string ResponseID = reader.ReadToEnd();
                                        data.Close();
                                        reader.Close();
                                    }
                                    else
                                    {
                                        WebClient client = new WebClient();

                                        //http://www.smsstriker.com/API/sms.php?username=vaishnavidairy&password=vyshnavi@123&from=VYSNVI&to=

                                        string baseurl = "http://www.smsstriker.com/API/sms.php?username=vaishnavidairy&password=vyshnavi@123&from=VFWYRA&to=" + phonenumber + "&msg=Dear%20" + EmpName + "%20Your%20Amount%20Collected%20for%20today%20ReceiptNo%20%20" + CashReceiptNo + "%20Date%20" + ServerDateCurrentdate + "%20Amount%20is ->" + recievedamt + "&type=1";
                                        Stream data = client.OpenRead(baseurl);
                                        StreamReader reader = new StreamReader(data);
                                        string ResponseID = reader.ReadToEnd();
                                        data.Close();
                                        reader.Close();
                                    }


                                    string message = "Dear " + EmpName + " Your Amount Collected for today ReceiptNo " + CashReceiptNo + " Date " + ServerDateCurrentdate + " Amount is ->" + recievedamt + "";
                                    // string text = message.Replace("\n", "\n" + System.Environment.NewLine);
                                    cmd = new MySqlCommand("insert into smsinfo (agentid,branchid,mainbranch,msg,mobileno,msgtype,branchname,doe) values (@agentid,@branchid,@mainbranch,@msg,@mobileno,@msgtype,@branchname,@doe)");
                                    cmd.Parameters.AddWithValue("@agentid", empid);
                                    cmd.Parameters.AddWithValue("@branchid", context.Session["branch"].ToString());
                                    cmd.Parameters.AddWithValue("@mainbranch", context.Session["SuperBranch"].ToString());
                                    cmd.Parameters.AddWithValue("@msg", message);
                                    cmd.Parameters.AddWithValue("@mobileno", phonenumber);
                                    cmd.Parameters.AddWithValue("@msgtype", "TripEdnd");
                                    cmd.Parameters.AddWithValue("@branchname", EmpName);
                                    cmd.Parameters.AddWithValue("@doe", ServerDateCurrentdate);

                                    vdbmngr.insert(cmd);
                                }
                                catch
                                {
                                }
                            }
                        }
                    }

                    List<string> MsgList = new List<string>();
                    string msg = "Data Successfully Saved";
                    MsgList.Add(msg);
                    string response = GetJson(MsgList);
                    context.Response.Write(response);
                }
                ////// }
            }
            else
            {
                if (recievedamt >= 0)
                {
                    DataTable dtReceipt = new DataTable();
                    string CashReceiptNo = "";
                    if (context.Session["branch"].ToString() == "306")
                    {
                        cmd = new MySqlCommand("Select IFNULL(MAX(GroupRecieptNo),0)+1 as Sno  from cashreceipts where BranchID=@BranchID AND (DOE BETWEEN @d1 AND @d2)");
                        cmd.Parameters.AddWithValue("@BranchID", context.Session["branch"].ToString());
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(dtapril));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(dtmarch));
                        dtReceipt = vdbmngr.SelectQuery(cmd).Tables[0];
                        CashReceiptNo = dtReceipt.Rows[0]["Sno"].ToString();
                        cmd = new MySqlCommand("UPDATE  tripdata set SubmittedAmount=@SubmittedAmount,ReceivedAmount=@ReceivedAmount,Cdate=@Cdate,Status=@status,RecieptNo=@Recieptno where Sno=@tripid");
                        cmd.Parameters.AddWithValue("@SubmittedAmount", submittedAmt);
                        cmd.Parameters.AddWithValue("@ReceivedAmount", recievedamt);
                        cmd.Parameters.AddWithValue("@Recieptno", CashReceiptNo);
                        cmd.Parameters.AddWithValue("@status", 'V');
                        cmd.Parameters.AddWithValue("@tripid", tripid);
                        cmd.Parameters.AddWithValue("@Cdate", ServerDateCurrentdate);
                        vdbmngr.Update(cmd);
                        cmd = new MySqlCommand("SELECT triproutes.RouteID, tripdata.EmpId FROM tripdata INNER JOIN triproutes ON tripdata.Sno = triproutes.Tripdata_sno WHERE (tripdata.Sno = @tripid)");
                        cmd.Parameters.AddWithValue("@tripid", tripid);
                        DataTable dtempid = vdbmngr.SelectQuery(cmd).Tables[0];
                        string empid = dtempid.Rows[0]["EmpId"].ToString();
                        string Routeid = dtempid.Rows[0]["RouteID"].ToString();
                        //vdbmngr.Update(cmd);
                        cmd = new MySqlCommand("Select Amount from branchaccounts where BranchId=@BranchId");
                        cmd.Parameters.AddWithValue("@BranchId", context.Session["branch"].ToString());
                        DataTable dtbrnchoppamt = vdbmngr.SelectQuery(cmd).Tables[0];
                        string amount = "0";
                        if (dtbrnchoppamt.Rows.Count > 0)
                        {
                            amount = dtbrnchoppamt.Rows[0]["Amount"].ToString();
                        }
                        if (recievedamt > 0)
                        {
                            //cmd = new MySqlCommand("insert into cashreceipts (BranchId,ReceivedFrom,Empid,AmountPaid,DOE,Create_by,Remarks,OppBal,dispatchid,Receipt) values (@BranchId,@ReceivedFrom,@Empid,@AmountPaid,@DOE, @Create_by,@Remarks,@OppBal,@dispatchid,@Receipt)");
                            cmd = new MySqlCommand("insert into cashreceipts (BranchId,ReceivedFrom,Empid,AmountPaid,DOE,Create_by,Remarks,OppBal,dispatchid,GroupRecieptNo) values (@BranchId,@ReceivedFrom,@Empid,@AmountPaid,@DOE, @Create_by,@Remarks,@OppBal,@dispatchid,@Receipt)");
                            cmd.Parameters.AddWithValue("@BranchId", context.Session["branch"].ToString());
                            cmd.Parameters.AddWithValue("@ReceivedFrom", "SalesMen");
                            cmd.Parameters.AddWithValue("@Empid", empid);
                            cmd.Parameters.AddWithValue("@AmountPaid", recievedamt);
                            cmd.Parameters.AddWithValue("DOE", ServerDateCurrentdate);
                            cmd.Parameters.AddWithValue("@Create_by", context.Session["UserSno"].ToString());
                            cmd.Parameters.AddWithValue("@Remarks", remarks);
                            cmd.Parameters.AddWithValue("@dispatchid", Routeid);
                            cmd.Parameters.AddWithValue("@OppBal", amount);
                            cmd.Parameters.AddWithValue("@Receipt", CashReceiptNo);
                            vdbmngr.insert(cmd);
                            cmd = new MySqlCommand("Update branchaccounts set Amount=Amount+@Amount where BranchId=@BranchId");
                            cmd.Parameters.AddWithValue("@Amount", recievedamt);
                            cmd.Parameters.AddWithValue("@BranchId", context.Session["branch"].ToString());
                            vdbmngr.Update(cmd);
                            //grouprecipt
                            string twothousand = "0";
                            string thousand = "0";
                            string fivehundred = "0";
                            string hundred = "0";
                            string fifty = "0";
                            string twenty = "0";
                            string ten = "0";
                            string five = "0";
                            string twos = "0";
                            string ones = "0";
                            string DenominationString = context.Request["DenominationString"];
                            DenominationString = DenominationString.Replace("+", " ");
                            foreach (string str in DenominationString.Split(' '))
                            {
                                if (str != "")
                                {
                                    string[] price = str.Split('x');
                                    string amountcount = price[0];
                                    string notecount = price[1];
                                    if (amountcount == "2000")
                                    {
                                        twothousand = notecount;
                                    }
                                    if (amountcount == "1000")
                                    {
                                        thousand = notecount;
                                    }
                                    if (amountcount == "500")
                                    {
                                        fivehundred = notecount;
                                    }
                                    if (amountcount == "100")
                                    {
                                        hundred = notecount;
                                    }
                                    if (amountcount == "50")
                                    {
                                        fifty = notecount;
                                    }
                                    if (amountcount == "20")
                                    {
                                        twenty = notecount;
                                    }
                                    if (amountcount == "10")
                                    {
                                        ten = notecount;
                                    }
                                    if (amountcount == "5")
                                    {
                                        five = notecount;
                                    }
                                    if (amountcount == "2")
                                    {
                                        twos = notecount;
                                    }
                                    if (amountcount == "1")
                                    {
                                        ones = notecount;
                                    }
                                }
                            }
                            cmd = new MySqlCommand("Update branch_denomination set amount=amount+@amount,twothousand=twothousand+@twothousand,thousand=thousand+@thousand,fivehundred=fivehundred+@fivehundred,hundred=hundred+@hundred,fifty=fifty+@fifty,twenty=twenty+@twenty,ten=ten+@ten,five=five+@five,twos=twos+@twos,ones=ones+@ones where BranchID=@BranchID");
                            cmd.Parameters.AddWithValue("@amount", recievedamt);
                            cmd.Parameters.AddWithValue("@twothousand", twothousand);
                            cmd.Parameters.AddWithValue("@thousand", thousand);
                            cmd.Parameters.AddWithValue("@fivehundred", fivehundred);
                            cmd.Parameters.AddWithValue("@hundred", hundred);
                            cmd.Parameters.AddWithValue("@fifty", fifty);
                            cmd.Parameters.AddWithValue("@twenty", twenty);
                            cmd.Parameters.AddWithValue("@ten", ten);
                            cmd.Parameters.AddWithValue("@five", five);
                            cmd.Parameters.AddWithValue("@twos", twos);
                            cmd.Parameters.AddWithValue("@ones", ones);
                            cmd.Parameters.AddWithValue("@BranchID", context.Session["branch"].ToString());
                            vdbmngr.Update(cmd);
                            cmd = new MySqlCommand("SELECT Sno, BranchId, ReceivedFrom, AgentID, AmountPaid, DOE, Create_by,  Receipt, PaymentStatus, GroupRecieptNo, GroupRef, Tripid FROM cashreceipts WHERE (Tripid= @Tripid)");
                            cmd.Parameters.AddWithValue("@Tripid", tripid);
                            DataTable dtgrouprecipt = vdbmngr.SelectQuery(cmd).Tables[0];
                            if (dtgrouprecipt.Rows.Count > 0)
                            {
                                foreach (DataRow drrecipt in dtgrouprecipt.Rows)
                                {
                                    cmd = new MySqlCommand("Update cashreceipts set GroupRef=@GroupRef where Sno=@Sno");
                                    cmd.Parameters.AddWithValue("@Sno", drrecipt["Sno"].ToString());
                                    cmd.Parameters.AddWithValue("@GroupRef", CashReceiptNo);
                                    vdbmngr.Update(cmd);
                                }
                            }

                            cmd = new MySqlCommand("SELECT Sno, EmpName, Mobno FROM  empmanage WHERE (Sno = @Sno)");
                            cmd.Parameters.AddWithValue("@Sno", empid);
                            DataTable dtPhoneNo = vdbmngr.SelectQuery(cmd).Tables[0];
                            if (dtPhoneNo.Rows.Count > 0)
                            {
                                string EmpName = dtPhoneNo.Rows[0]["EmpName"].ToString();
                                string phonenumber = dtPhoneNo.Rows[0]["Mobno"].ToString();
                                if (phonenumber.Length == 10)
                                {
                                    try
                                    {
                                        if (context.Session["TitleName"].ToString() == "SRI VYSHNAVI DAIRY SPECIALITIES (P) LTD")
                                        {
                                            WebClient client = new WebClient();
                                            //http://www.smsstriker.com/API/sms.php?username=vaishnavidairy&password=vyshnavi@123&from=VYSNVI&to=

                                            string baseurl = "http://www.smsstriker.com/API/sms.php?username=vaishnavidairy&password=vyshnavi@123&from=VSALES&to=" + phonenumber + "&msg=Dear%20" + EmpName + "%20Your%20Amount%20Collected%20for%20today%20ReceiptNo%20%20" + CashReceiptNo + "%20Date%20" + ServerDateCurrentdate + "%20Amount%20is ->" + recievedamt + "&type=1";
                                            Stream data = client.OpenRead(baseurl);
                                            StreamReader reader = new StreamReader(data);
                                            string ResponseID = reader.ReadToEnd();
                                            data.Close();
                                            reader.Close();
                                        }
                                        else
                                        {
                                            WebClient client = new WebClient();
                                            //http://www.smsstriker.com/API/sms.php?username=vaishnavidairy&password=vyshnavi@123&from=VYSNVI&to=

                                            string baseurl = "http://www.smsstriker.com/API/sms.php?username=vaishnavidairy&password=vyshnavi@123&from=VFWYRA&to=" + phonenumber + "&msg=Dear%20" + EmpName + "%20Your%20Amount%20Collected%20for%20today%20ReceiptNo%20%20" + CashReceiptNo + "%20Date%20" + ServerDateCurrentdate + "%20Amount%20is ->" + recievedamt + "&type=1";
                                            Stream data = client.OpenRead(baseurl);
                                            StreamReader reader = new StreamReader(data);
                                            string ResponseID = reader.ReadToEnd();
                                            data.Close();
                                            reader.Close();
                                        }
                                    }
                                    catch
                                    {
                                    }
                                }
                            }
                        }
                        List<string> MsgList = new List<string>();
                        string msg = "Data Successfully Saved";
                        MsgList.Add(msg);
                        string response = GetJson(MsgList);
                        context.Response.Write(response);
                    }
                    else
                    {
                        cmd = new MySqlCommand("Select IFNULL(MAX(Receipt),0)+1 as Sno  from cashreceipts where BranchID=@BranchID AND (DOE BETWEEN @d1 AND @d2)");
                        cmd.Parameters.AddWithValue("@BranchID", context.Session["branch"].ToString());
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(dtapril));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(dtmarch));
                        dtReceipt = vdbmngr.SelectQuery(cmd).Tables[0];
                        CashReceiptNo = dtReceipt.Rows[0]["Sno"].ToString();
                        cmd = new MySqlCommand("UPDATE  tripdata set SubmittedAmount=@SubmittedAmount,ReceivedAmount=@ReceivedAmount,Cdate=@Cdate,Status=@status,RecieptNo=@Recieptno where Sno=@tripid");
                        cmd.Parameters.AddWithValue("@SubmittedAmount", submittedAmt);
                        cmd.Parameters.AddWithValue("@ReceivedAmount", recievedamt);
                        cmd.Parameters.AddWithValue("@Recieptno", CashReceiptNo);
                        cmd.Parameters.AddWithValue("@status", 'V');
                        cmd.Parameters.AddWithValue("@tripid", tripid);
                        cmd.Parameters.AddWithValue("@Cdate", ServerDateCurrentdate);
                        vdbmngr.Update(cmd);
                        cmd = new MySqlCommand("SELECT triproutes.RouteID, tripdata.EmpId FROM tripdata INNER JOIN triproutes ON tripdata.Sno = triproutes.Tripdata_sno WHERE (tripdata.Sno = @tripid)");
                        cmd.Parameters.AddWithValue("@tripid", tripid);
                        DataTable dtempid = vdbmngr.SelectQuery(cmd).Tables[0];
                        string empid = dtempid.Rows[0]["EmpId"].ToString();
                        string Routeid = dtempid.Rows[0]["RouteID"].ToString();
                        vdbmngr.Update(cmd);
                        cmd = new MySqlCommand("Select Amount from branchaccounts where BranchId=@BranchId");
                        cmd.Parameters.AddWithValue("@BranchId", context.Session["branch"].ToString());
                        DataTable dtbrnchoppamt = vdbmngr.SelectQuery(cmd).Tables[0];
                        string amount = "0";
                        if (dtbrnchoppamt.Rows.Count > 0)
                        {
                            amount = dtbrnchoppamt.Rows[0]["Amount"].ToString();
                        }
                        cmd = new MySqlCommand("insert into cashreceipts (BranchId,ReceivedFrom,Empid,AmountPaid,DOE,Create_by,Remarks,OppBal,dispatchid,Receipt) values (@BranchId,@ReceivedFrom,@Empid,@AmountPaid,@DOE, @Create_by,@Remarks,@OppBal,@dispatchid,@Receipt)");
                        cmd.Parameters.AddWithValue("@BranchId", context.Session["branch"].ToString());
                        cmd.Parameters.AddWithValue("@ReceivedFrom", "SalesMen");
                        cmd.Parameters.AddWithValue("@Empid", empid);
                        cmd.Parameters.AddWithValue("@AmountPaid", recievedamt);
                        cmd.Parameters.AddWithValue("DOE", ServerDateCurrentdate);
                        cmd.Parameters.AddWithValue("@Create_by", context.Session["UserSno"].ToString());
                        cmd.Parameters.AddWithValue("@Remarks", remarks);
                        cmd.Parameters.AddWithValue("@dispatchid", Routeid);
                        cmd.Parameters.AddWithValue("@OppBal", amount);
                        cmd.Parameters.AddWithValue("@Receipt", CashReceiptNo);
                        vdbmngr.insert(cmd);
                        cmd = new MySqlCommand("Update branchaccounts set Amount=Amount+@Amount where BranchId=@BranchId");
                        cmd.Parameters.AddWithValue("@Amount", recievedamt);
                        cmd.Parameters.AddWithValue("@BranchId", context.Session["branch"].ToString());
                        vdbmngr.Update(cmd);
                        string twothousand = "0";
                        string thousand = "0";
                        string fivehundred = "0";
                        string hundred = "0";
                        string fifty = "0";
                        string twenty = "0";
                        string ten = "0";
                        string five = "0";
                        string twos = "0";
                        string ones = "0";
                        string DenominationString = context.Request["DenominationString"];
                        DenominationString = DenominationString.Replace("+", " ");
                        foreach (string str in DenominationString.Split(' '))
                        {
                            if (str != "")
                            {
                                string[] price = str.Split('x');
                                string amountcount = price[0];
                                string notecount = price[1];
                                if (amountcount == "2000")
                                {
                                    twothousand = notecount;
                                }
                                if (amountcount == "1000")
                                {
                                    thousand = notecount;
                                }
                                if (amountcount == "500")
                                {
                                    fivehundred = notecount;
                                }
                                if (amountcount == "100")
                                {
                                    hundred = notecount;
                                }
                                if (amountcount == "50")
                                {
                                    fifty = notecount;
                                }
                                if (amountcount == "20")
                                {
                                    twenty = notecount;
                                }
                                if (amountcount == "10")
                                {
                                    ten = notecount;
                                }
                                if (amountcount == "5")
                                {
                                    five = notecount;
                                }
                                if (amountcount == "2")
                                {
                                    twos = notecount;
                                }
                                if (amountcount == "1")
                                {
                                    ones = notecount;
                                }
                            }
                        }
                        cmd = new MySqlCommand("Update branch_denomination set amount=amount+@amount,twothousand=twothousand+@twothousand,thousand=thousand+@thousand,fivehundred=fivehundred+@fivehundred,hundred=hundred+@hundred,fifty=fifty+@fifty,twenty=twenty+@twenty,ten=ten+@ten,five=five+@five,twos=twos+@twos,ones=ones+@ones where BranchID=@BranchID");
                        cmd.Parameters.AddWithValue("@amount", recievedamt);
                        cmd.Parameters.AddWithValue("@twothousand", twothousand);
                        cmd.Parameters.AddWithValue("@thousand", thousand);
                        cmd.Parameters.AddWithValue("@fivehundred", fivehundred);
                        cmd.Parameters.AddWithValue("@hundred", hundred);
                        cmd.Parameters.AddWithValue("@fifty", fifty);
                        cmd.Parameters.AddWithValue("@twenty", twenty);
                        cmd.Parameters.AddWithValue("@ten", ten);
                        cmd.Parameters.AddWithValue("@five", five);
                        cmd.Parameters.AddWithValue("@twos", twos);
                        cmd.Parameters.AddWithValue("@ones", ones);
                        cmd.Parameters.AddWithValue("@BranchID", context.Session["branch"].ToString());
                        vdbmngr.Update(cmd);
                        cmd = new MySqlCommand("SELECT Sno, EmpName, Mobno FROM  empmanage WHERE (Sno = @Sno)");
                        cmd.Parameters.AddWithValue("@Sno", empid);
                        DataTable dtPhoneNo = vdbmngr.SelectQuery(cmd).Tables[0];
                        if (dtPhoneNo.Rows.Count > 0)
                        {
                            string EmpName = dtPhoneNo.Rows[0]["EmpName"].ToString();
                            string phonenumber = dtPhoneNo.Rows[0]["Mobno"].ToString();
                            if (phonenumber.Length == 10)
                            {
                                try
                                {
                                    if (context.Session["TitleName"].ToString() == "SRI VYSHNAVI DAIRY SPECIALITIES (P) LTD")
                                    {
                                        WebClient client = new WebClient();
                                        //http://www.smsstriker.com/API/sms.php?username=vaishnavidairy&password=vyshnavi@123&from=VYSNVI&to=

                                        string baseurl = "http://www.smsstriker.com/API/sms.php?username=vaishnavidairy&password=vyshnavi@123&from=VSALES&to=" + phonenumber + "&msg=Dear%20" + EmpName + "%20Your%20Amount%20Collected%20for%20today%20ReceiptNo%20%20" + CashReceiptNo + "%20Date%20" + ServerDateCurrentdate + "%20Amount%20is ->" + recievedamt + "&type=1";
                                        Stream data = client.OpenRead(baseurl);
                                        StreamReader reader = new StreamReader(data);
                                        string ResponseID = reader.ReadToEnd();
                                        data.Close();
                                        reader.Close();
                                    }
                                    else
                                    {
                                        WebClient client = new WebClient();
                                        //http://www.smsstriker.com/API/sms.php?username=vaishnavidairy&password=vyshnavi@123&from=VYSNVI&to=

                                        string baseurl = "http://www.smsstriker.com/API/sms.php?username=vaishnavidairy&password=vyshnavi@123&from=VFWYRA&to=" + phonenumber + "&msg=Dear%20" + EmpName + "%20Your%20Amount%20Collected%20for%20today%20ReceiptNo%20%20" + CashReceiptNo + "%20Date%20" + ServerDateCurrentdate + "%20Amount%20is ->" + recievedamt + "&type=1";
                                        Stream data = client.OpenRead(baseurl);
                                        StreamReader reader = new StreamReader(data);
                                        string ResponseID = reader.ReadToEnd();
                                        data.Close();
                                        reader.Close();
                                    }
                                }
                                catch
                                {
                                }
                            }
                        }
                        List<string> MsgList = new List<string>();
                        string msg = "Data Successfully Saved";
                        MsgList.Add(msg);
                        string response = GetJson(MsgList);
                        context.Response.Write(response);
                    }

                }
            }

        }
        catch (Exception ex)
        {
            List<string> MsgList = new List<string>();
            string msg = ex.Message;
            MsgList.Add(msg);
            string response = GetJson(MsgList);
            context.Response.Write(response);
        }
    }
    class Products
    {
        public string ProductName { set; get; }
        public string TotalQty { set; get; }
        public string empid { set; get; }
        public float Avail_prdtQty { set; get; }
        public string Productsno { set; get; }
        public string snoO { set; get; }
        public string tripdata { set; get; }
        public string empname { set; get; }
        public string Cdate { set; get; }
        public string routename { set; get; }
        public string collectedamount { set; get; }
        public string submittedamount { set; get; }
        public string receivedamount { set; get; }
        public string tubs { set; get; }
        public string cans { set; get; }
        public string units { set; get; }
        public string vehcleno { set; get; }
        public string qty { set; get; }
        public string status { set; get; }
        public string VatPercent { set; get; }
        public string KgPrice { set; get; }
        public string TotalOfferQty { set; get; }
        public string InvName { set; get; }
    }
    private void Get_SpL_Employe(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            string Username = context.Session["userdata_sno"].ToString();
            List<PlantEmployee> Employeelist = new List<PlantEmployee>();
            cmd = new MySqlCommand("SELECT empmanage.Sno, empmanage.EmpName FROM empmanage INNER JOIN branchmappingtable ON empmanage.Branch = branchmappingtable.SubBranch WHERE (empmanage.LevelType = 'SODispatcher') AND (branchmappingtable.SuperBranch = @Branch) ");
            cmd.Parameters.AddWithValue("@Branch", context.Session["branch"].ToString());
            DataTable dtEmployee = vdbmngr.SelectQuery(cmd).Tables[0];
            if (dtEmployee.Rows.Count > 0)
            {
                foreach (DataRow dr in dtEmployee.Rows)
                {
                    PlantEmployee b = new PlantEmployee() { Employee_id = dr["Sno"].ToString(), EmployeeName = dr["EmpName"].ToString() };
                    Employeelist.Add(b);
                }
                string response = GetJson(Employeelist);
                context.Response.Write(response);
            }
        }
        catch
        {
        }
    }
    private void Get_Employee_editDC(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            string Username = context.Session["UserSno"].ToString();
            string Tripdata_sno = context.Request["Dcno"];
            DataTable dtEmploye = new DataTable();
            cmd = new MySqlCommand("SELECT dispatch.Sno, dispatch.DispType, dispatch.DispMode FROM dispatch INNER JOIN triproutes ON triproutes.routeid = dispatch.sno WHERE (triproutes.Tripdata_sno = @Tripdata_sno)");
            cmd.Parameters.AddWithValue("@Tripdata_sno", Tripdata_sno);
            DataTable dtDespatch = vdbmngr.SelectQuery(cmd).Tables[0];
            if (dtDespatch.Rows.Count > 0)
            {
                string DispType = dtDespatch.Rows[0]["DispType"].ToString();
                string DispSno = dtDespatch.Rows[0]["Sno"].ToString();
                string DispMode = dtDespatch.Rows[0]["DispMode"].ToString();
                if (DispType == "SO" && DispMode != "AGENT")
                {
                    cmd = new MySqlCommand("SELECT empmanage.Sno, empmanage.UserName FROM empmanage INNER JOIN dispatch ON empmanage.Branch = dispatch.BranchID WHERE (dispatch.sno = @DispSno) AND (empmanage.LevelType = 'SODispatcher')");
                    cmd.Parameters.AddWithValue("@DispSno", DispSno);
                    dtEmploye = vdbmngr.SelectQuery(cmd).Tables[0];
                }
                else if (DispType == "SM")
                {
                    cmd = new MySqlCommand("SELECT Sno, UserName FROM empmanage WHERE (Branch = @BranchID) AND (LevelType = 'Opperations')");
                    cmd.Parameters.AddWithValue("@BranchID", context.Session["branch"]);
                    dtEmploye = vdbmngr.SelectQuery(cmd).Tables[0];
                }
                else if (DispType == "Staff" || DispType == "Free" || DispType == "LOCAL" || DispType == "AGENT" || DispMode == "AGENT")
                {
                    cmd = new MySqlCommand("SELECT Sno, UserName FROM empmanage WHERE (sno = @Username)");
                    cmd.Parameters.AddWithValue("@Username", Username);
                    dtEmploye = vdbmngr.SelectQuery(cmd).Tables[0];
                }
                else
                {
                    cmd = new MySqlCommand("SELECT empmanage.Sno, empmanage.UserName FROM empmanage INNER JOIN dispatch ON empmanage.Branch = dispatch.BranchID WHERE (dispatch.sno = @DispSno) AND (empmanage.LevelType = 'Opperations')");
                    cmd.Parameters.AddWithValue("@DispSno", DispSno);
                    dtEmploye = vdbmngr.SelectQuery(cmd).Tables[0];
                }
                List<PlantEmployee> Employeelist = new List<PlantEmployee>();
                if (dtEmploye.Rows.Count > 0)
                {
                    foreach (DataRow dr in dtEmploye.Rows)
                    {
                        PlantEmployee GetEmployee = new PlantEmployee();
                        GetEmployee.Employee_id = dr["Sno"].ToString();
                        GetEmployee.EmployeeName = dr["UserName"].ToString();
                        Employeelist.Add(GetEmployee);
                    }
                }
                string errresponse = GetJson(Employeelist);
                context.Response.Write(errresponse);
            }
        }
        catch (Exception ex)
        {
            string msg = ex.Message;
            string response = GetJson(msg);
            context.Response.Write(response);
        }
    }
    private void Get_Employee(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            string Username = context.Session["userdata_sno"].ToString();
            List<PlantEmployee> Employeelist = new List<PlantEmployee>();
            if (context.Session["LevelType"].ToString() == "Admin" || context.Session["LevelType"].ToString() == "MAdmin" || context.Session["LevelType"].ToString() == "PlantDispatcher")
            {
                string DispType = context.Session["DispType"].ToString();
                if (DispType == "SO")
                {
                    cmd = new MySqlCommand("SELECT empmanage.Sno, empmanage.EmpName FROM empmanage INNER JOIN branchmappingtable ON empmanage.Branch = branchmappingtable.SubBranch WHERE (empmanage.LevelType = 'SODispatcher') AND (branchmappingtable.SuperBranch = @Branch) ");
                    cmd.Parameters.AddWithValue("@Branch", context.Session["branch"].ToString());
                }
                else
                {
                    cmd = new MySqlCommand("select Sno,EmpName from empmanage where LevelType REGEXP 'Opperations|Dispatcher' and Userdata_sno=@UserName and Branch=@Branch ");
                    cmd.Parameters.AddWithValue("@UserName", Username);
                    cmd.Parameters.AddWithValue("@Branch", context.Session["branch"].ToString());
                }
            }
            if (context.Session["LevelType"].ToString() == "MAdmin")
            {
                cmd = new MySqlCommand("select Sno,EmpName from empmanage where Userdata_sno=@UserName and LevelType<>'Admin'");
                cmd.Parameters.AddWithValue("@UserName", Username);
            }
            DataTable dtEmployee = vdbmngr.SelectQuery(cmd).Tables[0];
            if (dtEmployee.Rows.Count > 0)
            {
                foreach (DataRow dr in dtEmployee.Rows)
                {
                    PlantEmployee b = new PlantEmployee() { Employee_id = dr["Sno"].ToString(), EmployeeName = dr["EmpName"].ToString() };
                    Employeelist.Add(b);
                }
                string response = GetJson(Employeelist);
                context.Response.Write(response);
            }
        }
        catch (Exception ex)
        {
            string msg = ex.Message;
            string response = GetJson(msg);
            context.Response.Write(response);
        }
    }
    class PlantEmployee
    {
        public string Employee_id { set; get; }
        public string EmployeeName { set; get; }
    }
    private void btnPlantTripSaveClick(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            var js = new JavaScriptSerializer();
            DateTime ServerDateCurrentdate = VehicleDBMgr.GetTime(vdbmngr.conn);
            DateTime dtapril = new DateTime();
            DateTime dtmarch = new DateTime();
            int currentyear = ServerDateCurrentdate.Year;
            int nextyear = ServerDateCurrentdate.Year + 1;
            if (ServerDateCurrentdate.Month > 3)
            {
                string apr = "4/1/" + currentyear;
                dtapril = DateTime.Parse(apr);
                string march = "3/31/" + nextyear;
                dtmarch = DateTime.Parse(march);
            }
            if (ServerDateCurrentdate.Month <= 3)
            {
                if (ServerDateCurrentdate.Day == 31 && ServerDateCurrentdate.Month == 3)
                {
                    string apr = "3/31/" + currentyear;
                    dtapril = DateTime.Parse(apr);
                    string march = "3/31/" + nextyear;
                    dtmarch = DateTime.Parse(march);
                }
                else
                {
                    string apr = "4/1/" + (currentyear - 1);
                    dtapril = DateTime.Parse(apr);
                    string march = "3/31/" + (nextyear - 1);
                    dtmarch = DateTime.Parse(march);
                }
            }
            DateTime ServerDate = ServerDateCurrentdate;
            Dictionary<string, routesgrid> tripasign = new Dictionary<string, routesgrid>();
            string tripid = "";
            List<string> MsgList = new List<string>();
            if (context.Session["tripid"] == null)
            {
            }
            else
            {
                tripid = context.Session["tripid"].ToString();
            }
            string Username = context.Session["userdata_sno"].ToString();
            string routelevel = context.Session["LevelType"].ToString();
            string dempid = context.Session["UserSno"].ToString();
            var title1 = context.Request.Params[1];
            Orders obj = js.Deserialize<Orders>(title1);
            string RouteID = obj.routename;
            string VehicleNo = obj.VehicleNo;
            string EmpID = "";
            EmpID = obj.EmpID;
            string BranchID = context.Session["branch"].ToString();
            string Branch_id = "";
            if (BranchID == "172" || BranchID == "3919")
            {
                cmd = new MySqlCommand("SELECT empmanage.Sno, empmanage.UserName, empmanage.EmpName, empmanage.Branch FROM dispatch INNER JOIN empmanage ON dispatch.BranchID = empmanage.Branch WHERE (dispatch.sno = @DespSno) AND (empmanage.LevelType = 'SODispatcher')");
                cmd.Parameters.AddWithValue("@DespSno", RouteID);
                DataTable dtemp = vdbmngr.SelectQuery(cmd).Tables[0];
                if (dtemp.Rows.Count > 0)
                {
                    EmpID = dtemp.Rows[0]["Sno"].ToString();
                    Branch_id = dtemp.Rows[0]["Branch"].ToString();
                }
            }
            else
            {
                cmd = new MySqlCommand("SELECT empmanage.Sno, empmanage.UserName, empmanage.EmpName, empmanage.Branch FROM dispatch INNER JOIN empmanage ON dispatch.BranchID = empmanage.Branch WHERE (dispatch.sno = @DespSno) AND (empmanage.LevelType = 'SODispatcher')");
                cmd.Parameters.AddWithValue("@DespSno", RouteID);
                DataTable dtemp = vdbmngr.SelectQuery(cmd).Tables[0];
                if (dtemp.Rows.Count > 0)
                {
                    Branch_id = dtemp.Rows[0]["Branch"].ToString();
                }
            }
            string IndentDate = context.Session["IndentDate"].ToString();
            DateTime Currentdate = Convert.ToDateTime(IndentDate);
            DateTime AssignDate = Currentdate;
            string dispdate = context.Session["DispatchDate"].ToString();
            if (dispdate == "0")
            {
                Currentdate = Currentdate;
            }
            else
            {
                Currentdate = Currentdate.AddDays(-1);
            }
            ServerDateCurrentdate = DateTime.Now;
            string operationtype = "";
            if (tripid == "")
            {
                operationtype = "SAVE";
            }
            else
            {
                operationtype = "EDIT";
            }
            if (operationtype == "SAVE")
            {
                string DispType = context.Session["DispType"].ToString();
                if (DispType == "SO")
                {
                    cmd = new MySqlCommand("SELECT triproutes.RouteID, tripdata.Status, tripdata.Sno FROM tripdata INNER JOIN triproutes ON tripdata.Sno = triproutes.Tripdata_sno WHERE (tripdata.Status = @Status) AND (triproutes.RouteID = @DispID) and (tripdata.EmpId=@EmpID) and (tripdata.Permissions<>'O')");
                    cmd.Parameters.AddWithValue("@Status", 'A');
                    cmd.Parameters.AddWithValue("@DispID", RouteID);
                    cmd.Parameters.AddWithValue("@EmpID", EmpID);
                    DataTable dtTrip = vdbmngr.SelectQuery(cmd).Tables[0];
                    if (dtTrip.Rows.Count > 0)
                    {
                        cmd = new MySqlCommand("update tripdata set Status=@status where  Sno=@TripID");
                        cmd.Parameters.AddWithValue("@status", 'P');
                        cmd.Parameters.AddWithValue("@TripID", dtTrip.Rows[0]["Sno"].ToString());
                        vdbmngr.Update(cmd);
                    }
                }
                else
                {
                    cmd = new MySqlCommand("update tripdata set Status=@status where Status=@st and EmpId='" + EmpID + "'");
                    cmd.Parameters.AddWithValue("@st", 'A');
                    cmd.Parameters.AddWithValue("@status", 'P');
                    vdbmngr.Update(cmd);
                }
                string fromstate = context.Session["stateid"].ToString();
                string tostate = "";
                string branchid = "";
                string companycode = "";
                string statecode = "";
                cmd = new MySqlCommand("SELECT branchdata.companycode, branchdata.sno, branchdata.stateid, statemastar.gststatecode FROM branchdata INNER JOIN statemastar ON branchdata.stateid = statemastar.sno WHERE (branchdata.sno = @BranchID)");
                cmd.Parameters.AddWithValue("@BranchID", Branch_id);
                DataTable dtEmpID = vdbmngr.SelectQuery(cmd).Tables[0];
                if (dtEmpID.Rows.Count > 0)
                {
                    tostate = dtEmpID.Rows[0]["stateid"].ToString();
                    branchid = dtEmpID.Rows[0]["sno"].ToString();
                    companycode = dtEmpID.Rows[0]["companycode"].ToString();
                    statecode = dtEmpID.Rows[0]["gststatecode"].ToString();
                }
                string TripDCNo = ""; string taxtripdcno = "";
                cmd = new MySqlCommand("insert into tripdata (EmpId,AssignDate,Status,Userdata_sno,Permissions,VehicleNo,I_Date,DEmpId,GPStatus,PlanStatus,Plantime,BranchID,DC_Type)values(@EmpId,@AssignDate,@status,@Userdata_sno,@Permissions,@VehicleNo,@indendate,@dempid,@gpstatus,@PlanStatus,@Plantime,@BranchID,@DC_Type)");
                cmd.Parameters.AddWithValue("@Permissions", obj.Permissions);
                cmd.Parameters.AddWithValue("@EmpId", EmpID);
                cmd.Parameters.AddWithValue("@AssignDate", AssignDate);
                cmd.Parameters.AddWithValue("@indendate", Currentdate);
                cmd.Parameters.AddWithValue("@dempid", dempid);
                cmd.Parameters.AddWithValue("@status", "A");
                cmd.Parameters.AddWithValue("@gpstatus", "A");
                cmd.Parameters.AddWithValue("@VehicleNo", VehicleNo);
                cmd.Parameters.AddWithValue("@Userdata_sno", Username);
                cmd.Parameters.AddWithValue("@PlanStatus", "Planned");
                cmd.Parameters.AddWithValue("@Plantime", ServerDateCurrentdate);
                cmd.Parameters.AddWithValue("@BranchID", context.Session["branch"].ToString());
                if (fromstate == tostate)
                {
                    cmd.Parameters.AddWithValue("@DC_Type", "1");
                }
                else
                {
                    cmd.Parameters.AddWithValue("@DC_Type", "0");
                }
                long Tripdata_Sno = vdbmngr.insertScalar(cmd);
                context.Session["TripIDSno"] = Tripdata_Sno;
                cmd = new MySqlCommand("insert into triproutes(Tripdata_sno,RouteID)values(@tripdata_sno,@routeid)");
                cmd.Parameters.AddWithValue("@tripdata_sno", Tripdata_Sno);
                cmd.Parameters.AddWithValue("@routeid", RouteID);
                vdbmngr.insert(cmd);
                DataTable taxdummytable = new DataTable();
                taxdummytable.Columns.Add("BranchId");
                taxdummytable.Columns.Add("soid");
                taxdummytable.Columns.Add("IndDate");
                taxdummytable.Columns.Add("agentdcno");
                taxdummytable.Columns.Add("Tripsno");
                taxdummytable.Columns.Add("productid");
                DataTable nontaxdummytable = new DataTable();
                nontaxdummytable.Columns.Add("BranchId");
                nontaxdummytable.Columns.Add("soid");
                nontaxdummytable.Columns.Add("IndDate");
                nontaxdummytable.Columns.Add("agentdcno");
                nontaxdummytable.Columns.Add("Tripsno");
                nontaxdummytable.Columns.Add("productid");
                foreach (orderdetail o in obj.data)
                {
                    if (o.Productsno != null)
                    {
                        if (o.Qty != "0")
                        {
                            cmd = new MySqlCommand("SELECT   sno, SubCat_sno, ProductName, Qty, Units, UnitPrice, Flag, UserData_sno, Rank, Inventorysno, VatPercent, Product_type, tproduct, sangam_flag, Itemcode, images,specification, materialtype, perunitprice, hsncode, igst, cgst, sgst, gsttaxcategory, pieces, invqty, description, ifdflag FROM productsdata WHERE (sno = @productsno)");
                            cmd.Parameters.AddWithValue("@productsno", o.Productsno);
                            DataTable dtproduct = vdbmngr.SelectQuery(cmd).Tables[0];
                            if (dtproduct.Rows[0]["igst"].ToString() == "0")
                            {
                                DataRow newrow = nontaxdummytable.NewRow();
                                newrow["BranchId"] = branchid;
                                newrow["soid"] = context.Session["branch"].ToString();
                                newrow["IndDate"] = Currentdate;
                                newrow["agentdcno"] = branchid;
                                newrow["productid"] = o.Productsno;
                                nontaxdummytable.Rows.Add(newrow);
                            }
                            else
                            {
                                DataRow newrow = taxdummytable.NewRow();
                                newrow["BranchId"] = branchid;
                                newrow["soid"] = context.Session["branch"].ToString();
                                newrow["IndDate"] = Currentdate;
                                newrow["agentdcno"] = branchid;
                                newrow["productid"] = o.Productsno;
                                taxdummytable.Rows.Add(newrow);
                            }
                        }
                    }
                }
                if (fromstate == tostate)
                {
                    if (taxdummytable.Rows.Count > 0)
                    {
                        cmd = new MySqlCommand("SELECT IFNULL(MAX(agentstno), 0) + 1 AS Sno FROM agenttaxst WHERE (soid = @soid) AND (IndDate BETWEEN @d1 AND @d2)");
                        cmd.Parameters.AddWithValue("@soid", context.Session["branch"].ToString());
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(dtapril));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(dtmarch));
                        DataTable dtadcno = vdbmngr.SelectQuery(cmd).Tables[0];
                        taxtripdcno = dtadcno.Rows[0]["Sno"].ToString();
                        cmd = new MySqlCommand("Insert Into agenttaxst (BranchId,soid,IndDate,agentstno,stateid,companycode,moduleid,doe,invoicetype,dcno) Values(@BranchId,@soid,@IndDate,@agentstno,@stateid,@companycode,@moduleid,@doe,@invoicetype,@dcno)");
                        cmd.Parameters.AddWithValue("@BranchId", branchid);
                        cmd.Parameters.AddWithValue("@soid", context.Session["branch"].ToString());
                        cmd.Parameters.AddWithValue("@IndDate", Currentdate);
                        cmd.Parameters.AddWithValue("@agentstno", taxtripdcno);
                        cmd.Parameters.AddWithValue("@stateid", statecode);
                        cmd.Parameters.AddWithValue("@companycode", companycode);
                        cmd.Parameters.AddWithValue("@moduleid", context.Session["moduleid"].ToString());
                        cmd.Parameters.AddWithValue("@doe", ServerDateCurrentdate);
                        cmd.Parameters.AddWithValue("@invoicetype", "PlantDispatch");
                        cmd.Parameters.AddWithValue("@dcno", Tripdata_Sno);
                        vdbmngr.insert(cmd);
                    }
                    if (nontaxdummytable.Rows.Count > 0)
                    {
                        cmd = new MySqlCommand("SELECT IFNULL(MAX(agentstno), 0) + 1 AS Sno FROM agentst WHERE (soid = @soid)  AND (IndDate BETWEEN @d1 AND @d2)");
                        cmd.Parameters.AddWithValue("@soid", context.Session["branch"].ToString());
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(dtapril));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(dtmarch));
                        DataTable dtadcno = vdbmngr.SelectQuery(cmd).Tables[0];
                        TripDCNo = dtadcno.Rows[0]["Sno"].ToString();
                        cmd = new MySqlCommand("Insert Into agentst (BranchId,soid,IndDate,agentstno,stateid,companycode,moduleid,doe,invoicetype,dcno) Values(@BranchId,@soid,@IndDate,@agentstno,@stateid,@companycode,@moduleid,@doe,@invoicetype,@dcno)");
                        cmd.Parameters.AddWithValue("@BranchId", branchid);
                        cmd.Parameters.AddWithValue("@soid", context.Session["branch"].ToString());
                        cmd.Parameters.AddWithValue("@IndDate", Currentdate);
                        cmd.Parameters.AddWithValue("@agentstno", TripDCNo);
                        cmd.Parameters.AddWithValue("@stateid", statecode);
                        cmd.Parameters.AddWithValue("@companycode", companycode);
                        cmd.Parameters.AddWithValue("@moduleid", context.Session["moduleid"].ToString());
                        cmd.Parameters.AddWithValue("@doe", ServerDateCurrentdate);
                        cmd.Parameters.AddWithValue("@invoicetype", "PlantDispatch");
                        cmd.Parameters.AddWithValue("@dcno", Tripdata_Sno);
                        vdbmngr.insert(cmd);
                    }
                }
                else
                {
                    if (taxdummytable.Rows.Count > 0)
                    {
                        cmd = new MySqlCommand("SELECT IFNULL(MAX(agentdcno), 0) + 1 AS Sno FROM agenttaxdc WHERE (soid = @soid)  AND (IndDate BETWEEN @d1 AND @d2)");
                        cmd.Parameters.AddWithValue("@soid", context.Session["branch"].ToString());
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(dtapril));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(dtmarch));
                        DataTable dtadcno = vdbmngr.SelectQuery(cmd).Tables[0];
                        taxtripdcno = dtadcno.Rows[0]["Sno"].ToString();
                        cmd = new MySqlCommand("Insert Into agenttaxdc (BranchId,soid,IndDate,agentdcno,stateid,companycode,moduleid,doe,invoicetype,DcNo) Values(@BranchId,@soid,@IndDate,@agentdcno,@stateid,@companycode,@moduleid,@doe,@invoicetype,@DcNo)");
                        cmd.Parameters.AddWithValue("@BranchId", branchid);
                        cmd.Parameters.AddWithValue("@soid", context.Session["branch"].ToString());
                        cmd.Parameters.AddWithValue("@IndDate", Currentdate);
                        cmd.Parameters.AddWithValue("@agentdcno", taxtripdcno);
                        cmd.Parameters.AddWithValue("@stateid", statecode);
                        cmd.Parameters.AddWithValue("@companycode", companycode);
                        cmd.Parameters.AddWithValue("@moduleid", context.Session["moduleid"].ToString());
                        cmd.Parameters.AddWithValue("@doe", ServerDateCurrentdate);
                        cmd.Parameters.AddWithValue("@invoicetype", "PlantDispatch");
                        cmd.Parameters.AddWithValue("@DcNo", Tripdata_Sno);
                        vdbmngr.insert(cmd);
                    }
                    if (nontaxdummytable.Rows.Count > 0)
                    {
                        cmd = new MySqlCommand("SELECT IFNULL(MAX(agentdcno), 0) + 1 AS Sno FROM agentdc WHERE (soid = @soid)  AND (IndDate BETWEEN @d1 AND @d2)");
                        cmd.Parameters.AddWithValue("@soid", context.Session["branch"].ToString());
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(dtapril));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(dtmarch));
                        DataTable dtadcno = vdbmngr.SelectQuery(cmd).Tables[0];
                        TripDCNo = dtadcno.Rows[0]["Sno"].ToString();
                        cmd = new MySqlCommand("Insert Into Agentdc (BranchId,soid,IndDate,agentdcno,stateid,companycode,moduleid,doe,invoicetype,DcNo) Values(@BranchId,@soid,@IndDate,@agentdcno,@stateid,@companycode,@moduleid,@doe,@invoicetype,@DcNo)");
                        cmd.Parameters.AddWithValue("@BranchId", branchid);
                        cmd.Parameters.AddWithValue("@soid", context.Session["branch"].ToString());
                        cmd.Parameters.AddWithValue("@IndDate", ServerDateCurrentdate);
                        cmd.Parameters.AddWithValue("@agentdcno", TripDCNo);
                        cmd.Parameters.AddWithValue("@stateid", statecode);
                        cmd.Parameters.AddWithValue("@companycode", companycode);
                        cmd.Parameters.AddWithValue("@moduleid", context.Session["moduleid"].ToString());
                        cmd.Parameters.AddWithValue("@doe", ServerDateCurrentdate);
                        cmd.Parameters.AddWithValue("@invoicetype", "PlantDispatch");
                        cmd.Parameters.AddWithValue("@DcNo", Tripdata_Sno);
                        vdbmngr.insert(cmd);
                    }
                }
                foreach (orderdetail o in obj.data)
                {
                    if (o.Productsno != null)
                    {
                        if (o.Qty != "0")
                        {
                            cmd = new MySqlCommand("SELECT   sno, SubCat_sno, ProductName, Qty, Units, UnitPrice, Flag, UserData_sno, Rank, Inventorysno, VatPercent, Product_type, tproduct, sangam_flag, Itemcode, images,specification, materialtype, perunitprice, hsncode, igst, cgst, sgst, gsttaxcategory, pieces, invqty, description, ifdflag FROM productsdata WHERE (sno = @productsno)");
                            cmd.Parameters.AddWithValue("@productsno", o.Productsno);
                            DataTable dtproduct = vdbmngr.SelectQuery(cmd).Tables[0];
                            cmd = new MySqlCommand("insert into tripsubdata (Tripdata_Sno,ProductId,Qty,DeliverQty)values(@Tripdata_Sno,@ProductId,@Qty,@deliverqty)");
                            cmd.Parameters.AddWithValue("@Tripdata_Sno", Tripdata_Sno);
                            cmd.Parameters.AddWithValue("@ProductId", o.Productsno);
                            float qty;
                            float.TryParse(o.Qty, out qty);
                            cmd.Parameters.AddWithValue("@Qty", qty);
                            float delqty = 0;
                            cmd.Parameters.AddWithValue("@deliverqty", delqty);
                            vdbmngr.insert(cmd);
                        }
                    }
                }
                cmd = new MySqlCommand("update tripdata set DCNO=@DCNO,taxdcno=@taxdcno,DC_Type=@DC_Type where sno=@tripsno");
                cmd.Parameters.AddWithValue("@DCNO", TripDCNo);
                cmd.Parameters.AddWithValue("@taxdcno", taxtripdcno);
                cmd.Parameters.AddWithValue("@tripsno", Tripdata_Sno);
                if (fromstate == tostate)
                {
                    cmd.Parameters.AddWithValue("@DC_Type", "1");
                }
                else
                {
                    cmd.Parameters.AddWithValue("@DC_Type", "0");
                }
                vdbmngr.Update(cmd);
                foreach (inventorydetail iv in obj.invdata)
                {
                    if (iv.InventorySno != null)
                    {
                        if (iv.Qty != "")
                        {
                            cmd = new MySqlCommand("insert into tripinvdata (Tripdata_Sno,invid,Qty,Remaining)values(@Tripdata_Sno,@invId,@Qty,@remaining)");
                            cmd.Parameters.AddWithValue("@Tripdata_Sno", Tripdata_Sno);
                            cmd.Parameters.AddWithValue("@invId", iv.InventorySno);
                            float qty;
                            float.TryParse(iv.Qty, out qty);
                            cmd.Parameters.AddWithValue("@Qty", qty);
                            cmd.Parameters.AddWithValue("@remaining", qty);
                            if (qty != 0.0)
                            {
                                vdbmngr.insert(cmd);
                            }
                        }
                    }
                }
                if (RouteID == "23" || RouteID == "2786")
                {
                    //  btnSMS_Click(context);
                }
                var jsonSerializer = new JavaScriptSerializer();
                var jsonString = String.Empty;
                context.Request.InputStream.Position = 0;
                using (var inputStream = new StreamReader(context.Request.InputStream))
                {
                    jsonString = inputStream.ReadToEnd();
                }
                string msg = "Data Successfully Saved";
                MsgList.Add(msg);
                string response = GetJson(MsgList);
                context.Response.Write(response);
            }
            else
            {
                cmd = new MySqlCommand("update tripdata set EmpId=@EmpId,AssignDate=@AssignDate,DespatchStatus=@DespatchStatus,DispTime=@DispTime,Status=@status,Userdata_sno=@Userdata_sno,Permissions=@Permissions,VehicleNo=@VehicleNo,I_Date=@indendate,DEmpId=@dempid where Sno=@tripid");
                cmd.Parameters.AddWithValue("@tripid", tripid);
                cmd.Parameters.AddWithValue("@Permissions", obj.Permissions);
                cmd.Parameters.AddWithValue("@DespatchStatus", "Yes");
                cmd.Parameters.AddWithValue("@EmpId", EmpID);
                cmd.Parameters.AddWithValue("@AssignDate", AssignDate);
                cmd.Parameters.AddWithValue("@indendate", Currentdate);
                cmd.Parameters.AddWithValue("@dempid", dempid);
                cmd.Parameters.AddWithValue("@status", "A");
                cmd.Parameters.AddWithValue("@VehicleNo", VehicleNo);
                cmd.Parameters.AddWithValue("@Userdata_sno", Username);
                cmd.Parameters.AddWithValue("@DispTime", ServerDateCurrentdate);
                vdbmngr.Update(cmd);
                context.Session["TripIDSno"] = tripid;
                cmd = new MySqlCommand("update triproutes set RouteID=@routeid where Tripdata_sno=@tripid");
                cmd.Parameters.AddWithValue("@tripid", tripid);
                cmd.Parameters.AddWithValue("@routeid", RouteID);
                if (vdbmngr.Update(cmd) == 0)
                {
                    cmd = new MySqlCommand("insert into triproutes(Tripdata_sno,RouteID)values(@tripdata_sno,@routeid) ");
                    cmd.Parameters.AddWithValue("@tripdata_sno", tripid);
                    cmd.Parameters.AddWithValue("@routeid", RouteID);
                    vdbmngr.insert(cmd);
                }
                foreach (orderdetail o in obj.data)
                {
                    if (o.Productsno != null)
                    {
                        if (o.Qty != "0")
                        {
                            cmd = new MySqlCommand("update tripsubdata set Tripdata_Sno=@Tripdata_Sno,ProductId=@ProductId,Qty=@Qty,DeliverQty=@deliverqty where Tripdata_Sno=@Tripdata_Sno and ProductId=@ProductId");
                            cmd.Parameters.AddWithValue("@Tripdata_Sno", tripid);
                            cmd.Parameters.AddWithValue("@ProductId", o.Productsno);
                            float qty;
                            float.TryParse(o.Qty, out qty);
                            cmd.Parameters.AddWithValue("@Qty", qty);
                            float delqty = 0;
                            cmd.Parameters.AddWithValue("@deliverqty", delqty);
                            if (vdbmngr.Update(cmd) == 0)
                            {
                                cmd = new MySqlCommand("insert into tripsubdata (Tripdata_Sno,ProductId,Qty,DeliverQty)values(@Tripdata_Sno,@ProductId,@Qty,@deliverqty)");
                                cmd.Parameters.AddWithValue("@Tripdata_Sno", tripid);
                                cmd.Parameters.AddWithValue("@ProductId", o.Productsno);
                                cmd.Parameters.AddWithValue("@Qty", qty);
                                cmd.Parameters.AddWithValue("@deliverqty", delqty);
                                vdbmngr.insert(cmd);
                            }
                        }
                        else
                        {
                            cmd = new MySqlCommand("DELETE FROM tripsubdata where Tripdata_Sno=@Tripdata_Sno and ProductId=@ProductId");
                            cmd.Parameters.AddWithValue("@Tripdata_Sno", tripid);
                            cmd.Parameters.AddWithValue("@ProductId", o.Productsno);
                            vdbmngr.Delete(cmd);
                        }
                    }
                }
                foreach (inventorydetail iv in obj.invdata)
                {
                    if (iv.InventorySno != null)
                    {
                        if (iv.Qty != "")
                        {
                            cmd = new MySqlCommand("update tripinvdata set Tripdata_Sno=@Tripdata_Sno,invid=@invId,Qty=@Qty,Remaining=@remaining where Tripdata_Sno=@Tripdata_Sno and invid=@invId");
                            cmd.Parameters.AddWithValue("@Tripdata_Sno", tripid);
                            cmd.Parameters.AddWithValue("@invId", iv.InventorySno);
                            float qty;
                            float.TryParse(iv.Qty, out qty);
                            cmd.Parameters.AddWithValue("@Qty", qty);
                            cmd.Parameters.AddWithValue("@remaining", qty);
                            if (vdbmngr.Update(cmd) == 0)
                            {
                                cmd = new MySqlCommand("insert into tripinvdata (Tripdata_Sno,invid,Qty,Remaining)values(@Tripdata_Sno,@invId,@Qty,@remaining)");
                                cmd.Parameters.AddWithValue("@Tripdata_Sno", tripid);
                                cmd.Parameters.AddWithValue("@invId", iv.InventorySno);
                                cmd.Parameters.AddWithValue("@Qty", qty);
                                cmd.Parameters.AddWithValue("@remaining", qty);
                                if (qty != 0.0)
                                {
                                    vdbmngr.insert(cmd);
                                }
                            }
                            cmd = new MySqlCommand("Update inventory_monitor Set Qty=Qty-@Qty where BranchId=@BranchId and Inv_Sno=@Inv_Sno");
                            cmd.Parameters.AddWithValue("@Inv_Sno", iv.InventorySno);
                            cmd.Parameters.AddWithValue("@Qty", qty);
                            cmd.Parameters.AddWithValue("@BranchId", context.Session["branch"].ToString());
                            if (vdbmngr.Update(cmd) == 0)
                            {
                                cmd = new MySqlCommand("Insert into inventory_monitor(Qty,Inv_Sno,BranchId) values(@Qty,@Inv_Sno,@BranchId)");
                                cmd.Parameters.AddWithValue("@Qty", qty);
                                cmd.Parameters.AddWithValue("@Inv_Sno", iv.InventorySno);
                                cmd.Parameters.AddWithValue("@BranchId", context.Session["branch"].ToString());
                                vdbmngr.insert(cmd);
                            }
                            cmd = new MySqlCommand("update invtransactions12 set Qty=@Qty,DOE=@DOE where FromTran=@From and B_Inv_Sno=@B_Inv_Sno and EmpID=@EmpID and ToTran=@To and TransType=@TransType");
                            cmd.Parameters.AddWithValue("@B_Inv_Sno", iv.InventorySno);
                            cmd.Parameters.AddWithValue("@Qty", qty);
                            cmd.Parameters.AddWithValue("@DOE", ServerDateCurrentdate);
                            cmd.Parameters.AddWithValue("@From", context.Session["branch"].ToString());
                            cmd.Parameters.AddWithValue("@TransType", "3");
                            cmd.Parameters.AddWithValue("@EmpID", context.Session["UserSno"].ToString());
                            cmd.Parameters.AddWithValue("@To", tripid);
                            if (vdbmngr.Update(cmd) == 0)
                            {
                                cmd = new MySqlCommand("Insert into  invtransactions12(B_Inv_Sno,Qty,DOE,EmpID,FromTran,ToTran,TransType) values(@B_Inv_Sno,@Qty,@DOE,@EmpID,@From,@To,@TransType)");
                                cmd.Parameters.AddWithValue("@B_Inv_Sno", iv.InventorySno);
                                cmd.Parameters.AddWithValue("@Qty", qty);
                                cmd.Parameters.AddWithValue("@DOE", ServerDateCurrentdate);
                                cmd.Parameters.AddWithValue("@From", context.Session["branch"].ToString());
                                cmd.Parameters.AddWithValue("@TransType", "3");
                                cmd.Parameters.AddWithValue("@EmpID", context.Session["UserSno"].ToString());
                                cmd.Parameters.AddWithValue("@To", tripid);
                                vdbmngr.insert(cmd);
                            }
                        }
                    }
                }
                #region sms

                cmd = new MySqlCommand("SELECT Sno, smsstatus, Status, AssignDate, EmpId, I_Date FROM tripdata WHERE (Sno = @tripid)");
                cmd.Parameters.AddWithValue("@tripid", tripid);
                DataTable dt_smsstatus = vdbmngr.SelectQuery(cmd).Tables[0];
                string sms_status = "0";
                if (dt_smsstatus.Rows.Count > 0)
                {
                    sms_status = dt_smsstatus.Rows[0]["smsstatus"].ToString();
                }
                if (sms_status == "0")
                {
                    string ProductName = "";
                    string DetailProductName = "";
                    string Producttot = "";
                    string dispatchtime = "";
                    double TotalQty = 0;
                    cmd = new MySqlCommand("SELECT result.Sno, result.AssignDate, result.Plantime, result.DispTime, dispatch.DispName FROM (SELECT Sno, AssignDate, Plantime, DispTime FROM tripdata WHERE (BranchID = @branchid) AND (AssignDate BETWEEN @d1 AND @d2) AND (DispTime IS NOT NULL)) result INNER JOIN triproutes ON result.Sno = triproutes.Tripdata_sno INNER JOIN dispatch ON triproutes.RouteID = dispatch.sno WHERE (dispatch.flag <> 0) AND (dispatch.Branch_Id = @branchid) ORDER BY result.DispTime");
                    cmd.Parameters.AddWithValue("@branchid", context.Session["branch"].ToString());
                    cmd.Parameters.AddWithValue("@d1", GetLowDate(AssignDate));
                    cmd.Parameters.AddWithValue("@d2", GetHighDate(AssignDate));
                    DataTable dtdispatchno = vdbmngr.SelectQuery(cmd).Tables[0];
                    if (dtdispatchno.Rows.Count > 0)
                    {
                        cmd = new MySqlCommand("SELECT DispTime FROM tripdata WHERE (Sno = @tripid)");
                        cmd.Parameters.AddWithValue("@tripid", tripid);
                        DataTable dtdisptime = vdbmngr.SelectQuery(cmd).Tables[0];
                        DateTime IndTime = ServerDateCurrentdate;
                        if (dtdisptime.Rows.Count > 0)
                        {
                            dispatchtime = dtdisptime.Rows[0]["DispTime"].ToString();
                            IndTime = Convert.ToDateTime(dtdisptime.Rows[0]["DispTime"].ToString());
                        }
                        string brch = "";
                        if (context.Session["branch"].ToString() == "172")
                        {
                            brch = "PBK__";
                        }
                        if (context.Session["branch"].ToString() == "158")
                        {
                            brch = "WYRA__";
                        }
                        if (context.Session["branch"].ToString() == "1801")
                        {
                            brch = "KPM__";
                        }
                        ProductName += brch + "Despatch-" + dtdispatchno.Rows.Count + "\r\n";
                        ProductName += "Date :" + AssignDate.ToString("dd-MM") + "   Time:" + IndTime.ToString("HH:mm") + "\r\n";
                    }
                    cmd = new MySqlCommand("SELECT sno, SubCat_sno, ProductName, Qty, Units, UnitPrice, Flag, UserData_sno, Rank, Inventorysno, VatPercent, Product_type FROM productsdata");
                    DataTable dtProducts = vdbmngr.SelectQuery(cmd).Tables[0];
                    foreach (orderdetail o in obj.data)
                    {
                        if (o.Productsno != null)
                        {
                            if (o.Qty != "0")
                            {
                                double unitQty = 0;
                                double.TryParse(o.Qty, out unitQty);
                                DataRow[] drproducts = dtProducts.Select("sno=" + o.Productsno + "");
                                string product = "";
                                foreach (DataRow drp in drproducts)
                                {
                                    product = drp["ProductName"].ToString();
                                }
                                DetailProductName += product + "=" + Math.Round(unitQty, 2) + ";" + "\r\n";
                                TotalQty += Math.Round(unitQty, 2);
                            }
                        }
                    }
                    // cmd = new MySqlCommand("SELECT dispatch.sno, dispatch.BranchID, SUM(tripsubdata.Qty) AS dispatchqty, products_category.Categoryname, products_category.sno AS categorysno,dispatch.DispName, productsdata.ProductName FROM dispatch INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN (SELECT Sno, AssignDate FROM tripdata WHERE (AssignDate BETWEEN @d1 AND @d2)) tripdat ON triproutes.Tripdata_sno = tripdat.Sno INNER JOIN tripsubdata ON tripdat.Sno = tripsubdata.Tripdata_sno INNER JOIN productsdata ON tripsubdata.ProductId = productsdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno WHERE (dispatch.DispMode IS NULL) AND (dispatch.sno = @dispid) OR (dispatch.DispMode = 'SPL') AND (dispatch.sno = @dispid) GROUP BY productsdata.sno ORDER BY categorysno");
                    cmd = new MySqlCommand("SELECT dispatch.sno, dispatch.BranchID, SUM(tripsubdata.Qty) AS dispatchqty, products_category.Categoryname, products_category.sno AS categorysno, dispatch.DispName, productsdata.ProductName FROM dispatch INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN (SELECT Sno, AssignDate FROM tripdata WHERE (AssignDate BETWEEN @d1 AND @d2)) tripdat ON triproutes.Tripdata_sno = tripdat.Sno INNER JOIN tripsubdata ON tripdat.Sno = tripsubdata.Tripdata_sno INNER JOIN productsdata ON tripsubdata.ProductId = productsdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno WHERE (dispatch.DispMode IS NULL) AND (dispatch.sno = @dispid) OR (dispatch.DispMode = 'SPL') AND (dispatch.sno = @dispid) GROUP BY categorysno");
                    cmd.Parameters.AddWithValue("@dispid", RouteID);
                    cmd.Parameters.AddWithValue("@d1", GetLowDate(AssignDate.AddDays(-1)));
                    cmd.Parameters.AddWithValue("@d2", GetHighDate(AssignDate.AddDays(-1)));
                    DataTable dtpreviousdispatch = vdbmngr.SelectQuery(cmd).Tables[0];
                    cmd = new MySqlCommand("SELECT dispatch.sno, dispatch.BranchID, SUM(tripsubdata.Qty) AS dispatchqty, products_category.Categoryname, products_category.sno AS categorysno, dispatch.DispName FROM dispatch INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN (SELECT Sno, AssignDate FROM tripdata WHERE (Sno = @tripid)) tripdat ON triproutes.Tripdata_sno = tripdat.Sno INNER JOIN tripsubdata ON tripdat.Sno = tripsubdata.Tripdata_sno INNER JOIN productsdata ON tripsubdata.ProductId = productsdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno WHERE (dispatch.DispMode IS NULL) OR (dispatch.DispMode = 'SPL') GROUP BY categorysno");
                    cmd.Parameters.AddWithValue("@tripid", tripid);
                    DataTable dtmilkandcurd = vdbmngr.SelectQuery(cmd).Tables[0];
                    cmd = new MySqlCommand("SELECT SUM(tripsubdata.Qty) AS dispatchqty, products_category.Categoryname, products_category.sno AS categorysno, dispatch.DispName, productsdata.sno, productsdata.ProductName FROM  dispatch INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN (SELECT Sno, AssignDate FROM tripdata WHERE (Sno = @tripid)) tripdat ON triproutes.Tripdata_sno = tripdat.Sno INNER JOIN tripsubdata ON tripdat.Sno = tripsubdata.Tripdata_sno INNER JOIN productsdata ON tripsubdata.ProductId = productsdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno WHERE (dispatch.DispMode IS NULL) AND (products_category.sno > 10) OR (dispatch.DispMode = 'SPL') GROUP BY productsdata.sno");
                    cmd.Parameters.AddWithValue("@tripid", tripid);
                    DataTable dtbiprdt = vdbmngr.SelectQuery(cmd).Tables[0];
                    double milk = 0;
                    double Prevmilk = 0;
                    double curd = 0;
                    double Prevcurd = 0;
                    double BM = 0;
                    double PrevBM = 0;
                    double other = 0;
                    double prevother = 0;
                    double totmilk = 0;
                    double totcurd = 0;
                    double totBM = 0;
                    double tot = 0;
                    double Prevtot = 0;
                    double diffmilk = 0;
                    double diffcurd = 0;
                    double diffBM = 0;
                    double finaldiff = 0;
                    if (dtmilkandcurd.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dtmilkandcurd.Rows)
                        {
                            if (dr["categorysno"].ToString() == "9")
                            {

                                double.TryParse(dr["dispatchqty"].ToString(), out milk);
                                milk = Math.Round(milk, 2);
                                totmilk += milk;
                                tot += milk;
                                foreach (DataRow drdtclubtotal in dtpreviousdispatch.Select("categorysno='" + dr["categorysno"].ToString() + "'"))
                                {
                                    double.TryParse(drdtclubtotal["dispatchqty"].ToString(), out Prevmilk);
                                }
                                diffmilk = Math.Round(milk - Prevmilk, 2);
                                Prevtot += Prevmilk;
                                Producttot += "MILK :" + milk + "(" + Math.Round(diffmilk, 2) + ")" + "\r\n";
                            }
                            else if (dr["categorysno"].ToString() == "10")
                            {
                                double.TryParse(dr["dispatchqty"].ToString(), out curd);
                                curd = Math.Round(curd, 2);
                                totcurd += curd;
                                tot += curd;

                                foreach (DataRow drdtclubtotal in dtpreviousdispatch.Select("categorysno='" + dr["categorysno"].ToString() + "'"))
                                {
                                    double.TryParse(drdtclubtotal["dispatchqty"].ToString(), out Prevcurd);
                                }
                                diffcurd = Math.Round(curd - Prevcurd, 2);
                                Prevtot += Prevcurd;
                                Producttot += "Curd :" + curd + "(" + Math.Round(diffcurd, 2) + ")" + "\r\n";
                            }
                            else if (dr["categorysno"].ToString() == "12")
                            {
                                double.TryParse(dr["dispatchqty"].ToString(), out BM);
                                BM = Math.Round(BM, 2);
                                totBM += BM;
                                tot += BM;
                                foreach (DataRow drdtclubtotal in dtpreviousdispatch.Select("categorysno='" + dr["categorysno"].ToString() + "'"))
                                {
                                    double.TryParse(drdtclubtotal["dispatchqty"].ToString(), out PrevBM);
                                }
                                diffBM = Math.Round(BM - PrevBM, 2);
                                Prevtot += PrevBM;
                                Producttot += "Butter Milk :" + BM + "(" + Math.Round(diffBM, 2) + ")" + "\r\n";
                            }
                            else
                            {
                                // double.TryParse(dr["dispatchqty"].ToString(), out other);
                                foreach (DataRow drdtclubtotal in dtbiprdt.Select("categorysno='" + dr["categorysno"].ToString() + "'"))
                                {
                                    double.TryParse(drdtclubtotal["dispatchqty"].ToString(), out other);
                                    other = Math.Round(other, 2);
                                    tot += other;
                                    Producttot += drdtclubtotal["ProductName"].ToString() + "  :" + other + "\r\n";
                                }
                            }
                        }
                        foreach (DataRow drdt in dtpreviousdispatch.Rows)
                        {
                            if (drdt["categorysno"].ToString() == "9")
                            {
                            }
                            else if (drdt["categorysno"].ToString() == "10")
                            {
                            }
                            else if (drdt["categorysno"].ToString() == "12")
                            {
                            }
                            else
                            {
                                double.TryParse(drdt["dispatchqty"].ToString(), out prevother);
                                prevother = Math.Round(prevother, 2);
                                Prevtot += prevother;
                            }
                        }
                    }
                    finaldiff = Math.Round(tot - Prevtot, 2);
                    Producttot += "Total :" + tot + "(" + Math.Round(finaldiff, 2) + ")" + "\r\n";
                    cmd = new MySqlCommand("SELECT mobilenotable.PhoneNumber, dispatch.DispName,dispatch.DispTime FROM mobilenotable INNER JOIN dispatch ON mobilenotable.DispNo = dispatch.sno WHERE (mobilenotable.DispNo = @DispNo) and (mobilenotable.MsgType = @Msgtype) ");
                    cmd.Parameters.AddWithValue("@DispNo", RouteID);
                    cmd.Parameters.AddWithValue("@Msgtype", 2);
                    DataTable dtPhoneNumbers = vdbmngr.SelectQuery(cmd).Tables[0];
                    int msgcount = 0;
                    if (dtPhoneNumbers.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dtPhoneNumbers.Rows)
                        {
                            string phonenumber = dr["PhoneNumber"].ToString();
                            string time = "";
                            if (dr["DispTime"].ToString() == "")
                            {
                                DateTime distime = Convert.ToDateTime(dispatchtime);
                                time = distime.ToString("HH:mm");
                            }
                            else
                            {
                                DateTime distime = Convert.ToDateTime(dr["DispTime"].ToString());
                                time = distime.ToString("HH:mm");
                            }

                            string DispatchName = dr["DispName"].ToString();
                            string[] words = DispatchName.Split('_');
                            string dttime = ServerDate.ToString("dd/MM/yyyy");
                            if (msgcount == 0)
                            {
                                ProductName += words[0] + "(" + time + ")" + "\r\n";
                                ProductName += "DC NO :" + tripid + "\r\n";
                                ProductName += Producttot;
                                msgcount++;
                            }
                            if (phonenumber.Length == 10)
                            {
                                try
                                {
                                    if (context.Session["TitleName"].ToString() == "SRI VYSHNAVI DAIRY SPECIALITIES (P) LTD")
                                    {
                                        WebClient client = new WebClient();
                                        //http://www.smsstriker.com/API/sms.php?username=vaishnavidairy&password=vyshnavi@123&from=VYSNVI&to=

                                        string baseurl = "http://www.smsstriker.com/API/sms.php?username=vaishnavidairy&password=vyshnavi@123&from=VSALES&to=" + phonenumber + "&msg=%20" + ProductName + "&type=1";
                                        Stream data = client.OpenRead(baseurl);
                                        StreamReader reader = new StreamReader(data);
                                        string ResponseID = reader.ReadToEnd();
                                        data.Close();
                                        reader.Close();

                                    }
                                    else
                                    {
                                        WebClient client = new WebClient();
                                        //http://www.smsstriker.com/API/sms.php?username=vaishnavidairy&password=vyshnavi@123&from=VYSNVI&to=

                                        string baseurl = "http://www.smsstriker.com/API/sms.php?username=vaishnavidairy&password=vyshnavi@123&from=VFWYRA&to=" + phonenumber + "&msg=%20" + ProductName + "&type=1";
                                        Stream data = client.OpenRead(baseurl);
                                        StreamReader reader = new StreamReader(data);
                                        string ResponseID = reader.ReadToEnd();
                                        data.Close();
                                        reader.Close();
                                    }
                                }
                                catch
                                {
                                }
                            }
                            if (phonenumber != "9382525919")
                            {
                                if (phonenumber.Length == 10)
                                {
                                    try
                                    {
                                        if (context.Session["TitleName"].ToString() == "SRI VYSHNAVI DAIRY SPECIALITIES (P) LTD")
                                        {
                                            WebClient client = new WebClient();

                                            //http://www.smsstriker.com/API/sms.php?username=vaishnavidairy&password=vyshnavi@123&from=VYSNVI&to=

                                            string baseurl = "http://www.smsstriker.com/API/sms.php?username=vaishnavidairy&password=vyshnavi@123&from=VSALES&to=" + phonenumber + "&msg=%20" + words[0] + "%20Despatch%20%20Completed%20%20for%20:" + dttime + "%20With\r\n" + "DCNo:" + tripid + "\r\n" + DetailProductName + "TotalQty =" + TotalQty + "&type=1";
                                            Stream data = client.OpenRead(baseurl);
                                            StreamReader reader = new StreamReader(data);
                                            string ResponseID = reader.ReadToEnd();
                                            data.Close();
                                            reader.Close();
                                        }
                                        else
                                        {
                                            WebClient client = new WebClient();

                                            //http://www.smsstriker.com/API/sms.php?username=vaishnavidairy&password=vyshnavi@123&from=VYSNVI&to=

                                            string baseurl = "http://www.smsstriker.com/API/sms.php?username=vaishnavidairy&password=vyshnavi@123&from=VFWYRA&to=" + phonenumber + "&msg=%20" + words[0] + "%20Despatch%20%20Completed%20%20for%20:" + dttime + "%20With\r\n" + "DCNo:" + tripid + "\r\n" + DetailProductName + "TotalQty =" + TotalQty + "&type=1";
                                            Stream data = client.OpenRead(baseurl);
                                            StreamReader reader = new StreamReader(data);
                                            string ResponseID = reader.ReadToEnd();
                                            data.Close();
                                            reader.Close();
                                        }
                                    }
                                    catch
                                    {
                                    }
                                }
                            }
                        }
                    }
                    int smsstat = 1;
                    cmd = new MySqlCommand("update tripdata set smsstatus=@sms_status where Sno=@tripid");
                    cmd.Parameters.AddWithValue("@tripid", tripid);
                    cmd.Parameters.AddWithValue("@sms_status", smsstat);
                    vdbmngr.Update(cmd);
                }
                #endregion
                var jsonSerializer = new JavaScriptSerializer();
                var jsonString = String.Empty;
                context.Request.InputStream.Position = 0;
                using (var inputStream = new StreamReader(context.Request.InputStream))
                {
                    jsonString = inputStream.ReadToEnd();
                }
                string msg = "Data Successfully Updated";
                MsgList.Add(msg);
                string response = GetJson(MsgList);
                context.Response.Write(response);
            }
        }
        catch (Exception ex)
        {
            string msg = ex.Message;
            string response = GetJson(msg);
            context.Response.Write(response);
        }
    }
    class inventorydetail
    {
        public string InventorySno { set; get; }
        public string Qty { set; get; }
        public string PrevInvQty { set; get; }
        public string Branchid { set; get; }
        public string Tripid { set; get; }
    }
    private void btnAgentSaleSaveclick(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            var js = new JavaScriptSerializer();
            var title1 = context.Request.Params[1];
            Orders obj = js.Deserialize<Orders>(title1);
            string Username = "1";
            DateTime AssignDate = VehicleDBMgr.GetTime(vdbmngr.conn);
            string BranchID = obj.BranchID;
            string SalesOfficeID = obj.SalesOfficeID;
            string vehicleNo = obj.VehicleNo;
            string IndentType = obj.IndentType;
            string indentdate = obj.indentdate;
            DateTime ServerDateCurrentdate = Convert.ToDateTime(indentdate);
            DateTime dtapril = new DateTime();
            DateTime dtmarch = new DateTime();
            int currentyear = ServerDateCurrentdate.Year;
            int nextyear = ServerDateCurrentdate.Year + 1;
            if (ServerDateCurrentdate.Month > 3)
            {
                string apr = "4/1/" + currentyear;
                dtapril = DateTime.Parse(apr);
                string march = "3/31/" + nextyear;
                dtmarch = DateTime.Parse(march);
            }
            if (ServerDateCurrentdate.Month <= 3)
            {
                if (ServerDateCurrentdate.Day == 31 && ServerDateCurrentdate.Month == 3)
                {
                    string apr = "3/31/" + currentyear;
                    dtapril = DateTime.Parse(apr);
                    string march = "3/31/" + nextyear;
                    dtmarch = DateTime.Parse(march);
                }
                else
                {
                    string apr = "4/1/" + (currentyear - 1);
                    dtapril = DateTime.Parse(apr);
                    string march = "3/31/" + (nextyear - 1);
                    dtmarch = DateTime.Parse(march);
                }
            }
            string LocalSaleName = obj.routename;
            string type = obj.type;
            string DispType = "SO";
            if (SalesOfficeID == "572")
            {
                DispType = "SM";
            }
            cmd = new MySqlCommand("UPDATE dispatch SET flag=@flag WHERE (DispName=@DispName) AND (Branch_id=@Branch_id)");
            cmd.Parameters.AddWithValue("@DispName", LocalSaleName);
            cmd.Parameters.AddWithValue("@Branch_id", context.Session["branch"].ToString());
            cmd.Parameters.AddWithValue("@flag", false);
            long RouteID = 0;
            if (vdbmngr.Update(cmd) == 0)
            {
                cmd = new MySqlCommand("insert into dispatch (DispName,Branch_id,flag,DispType,BranchID,DispMode) values(@DispName,@Branch_id,@flag,@DispType,@BranchID,@DispMode)");
                cmd.Parameters.AddWithValue("@DispName", LocalSaleName);
                cmd.Parameters.AddWithValue("@Branch_id", context.Session["branch"].ToString());
                cmd.Parameters.AddWithValue("@flag", false);
                cmd.Parameters.AddWithValue("@DispType", DispType);
                cmd.Parameters.AddWithValue("@DispMode", "AGENT");
                cmd.Parameters.AddWithValue("@BranchID", BranchID);
                RouteID = vdbmngr.insertScalar(cmd);
            }
            else
            {
                cmd = new MySqlCommand("Select * from dispatch  WHERE (DispName=@DispName) AND (Branch_id=@Branch_id)");
                cmd.Parameters.AddWithValue("@DispName", LocalSaleName);
                cmd.Parameters.AddWithValue("@Branch_id", context.Session["branch"].ToString());
                DataTable dtDisp = vdbmngr.SelectQuery(cmd).Tables[0];
                if (dtDisp.Rows.Count > 0)
                {
                    string dispno = dtDisp.Rows[0]["sno"].ToString();
                    long.TryParse(dispno, out RouteID);
                }
            }

            string tostate = "";
            string branchid = "";
            string companycode = "";
            string statecode = "";
            cmd = new MySqlCommand("SELECT  branchdata.sno, branchdata.BranchName,branchdata.companycode, branchdata.SalesType, branchdata.Lat, branchdata.Lng, branchdata.Radius, statemastar.gststatecode, branchdata.stateid FROM branchdata INNER JOIN statemastar ON branchdata.stateid = statemastar.sno WHERE (branchdata.sno = @BranchID)");
            cmd.Parameters.AddWithValue("@BranchID", SalesOfficeID);
            DataTable dtEmpID = vdbmngr.SelectQuery(cmd).Tables[0];
            if (dtEmpID.Rows.Count > 0)
            {
                tostate = dtEmpID.Rows[0]["stateid"].ToString();
                branchid = dtEmpID.Rows[0]["sno"].ToString();
                companycode = dtEmpID.Rows[0]["companycode"].ToString();
                statecode = dtEmpID.Rows[0]["gststatecode"].ToString();
            }
            string TripDCNo = "0"; string taxtripdcno = "0";

            string salestype = context.Session["salestype"].ToString();
            long TripSno = 0;
            cmd = new MySqlCommand("insert into tripdata (EmpId,AssignDate,Status,Userdata_sno,Permissions,VehicleNo,I_Date,GPStatus,PlanStatus,Plantime,DespatchStatus,DispTime,DEmpID,BranchID,DCno)values(@EmpId,@AssignDate,@status,@Userdata_sno,@Permissions,@VehicleNo,@indendate,@gpstatus,@PlanStatus,@Plantime,@DespatchStatus,@DispTime,@DEmpID,@BranchID,@DCno)");
            cmd.Parameters.AddWithValue("@Permissions", "D");
            cmd.Parameters.AddWithValue("@DEmpID", context.Session["UserSno"].ToString());
            cmd.Parameters.AddWithValue("@EmpId", context.Session["UserSno"].ToString());
            cmd.Parameters.AddWithValue("@AssignDate", ServerDateCurrentdate);
            cmd.Parameters.AddWithValue("@indendate", ServerDateCurrentdate);
            cmd.Parameters.AddWithValue("@status", "A");
            cmd.Parameters.AddWithValue("@gpstatus", "A");
            cmd.Parameters.AddWithValue("@VehicleNo", vehicleNo);
            cmd.Parameters.AddWithValue("@Userdata_sno", Username);
            cmd.Parameters.AddWithValue("@PlanStatus", "Planned");
            cmd.Parameters.AddWithValue("@DespatchStatus", "Yes");
            cmd.Parameters.AddWithValue("@Plantime", AssignDate);
            cmd.Parameters.AddWithValue("@DispTime", AssignDate);
            cmd.Parameters.AddWithValue("@BranchID", context.Session["branch"].ToString());
            cmd.Parameters.AddWithValue("@DCno", TripDCNo);
            TripSno = vdbmngr.insertScalar(cmd);
            context.Session["TripIDSno"] = TripSno;
            cmd = new MySqlCommand("insert into triproutes(Tripdata_sno,RouteID)values(@tripdata_sno,@routeid) ");
            cmd.Parameters.AddWithValue("@tripdata_sno", TripSno);
            cmd.Parameters.AddWithValue("@routeid", RouteID);
            vdbmngr.insert(cmd);
            cmd = new MySqlCommand("insert into indents (Branch_id,I_date,UserData_sno,Status,PaymentStatus,I_createdby,IndentType)values(@Branch_id,@I_date,@UserData_sno,@Status,@PaymentStatus,@I_createdby,@IndentType)");
            cmd.Parameters.AddWithValue("@Branch_id", BranchID);
            cmd.Parameters.AddWithValue("@I_date", ServerDateCurrentdate);
            cmd.Parameters.AddWithValue("@UserData_sno", Username);
            cmd.Parameters.AddWithValue("@Status", "O");
            cmd.Parameters.AddWithValue("@PaymentStatus", 'A');
            cmd.Parameters.AddWithValue("@IndentType", IndentType);
            cmd.Parameters.AddWithValue("@I_createdby", context.Session["UserSno"].ToString());
            //long IndentNo = 0;
            long IndentNo = vdbmngr.insertScalar(cmd);


            DataTable taxdummytable = new DataTable();
            taxdummytable.Columns.Add("BranchId");
            taxdummytable.Columns.Add("soid");
            taxdummytable.Columns.Add("IndDate");
            taxdummytable.Columns.Add("agentdcno");
            taxdummytable.Columns.Add("Tripsno");
            taxdummytable.Columns.Add("productid");
            DataTable nontaxdummytable = new DataTable();
            nontaxdummytable.Columns.Add("BranchId");
            nontaxdummytable.Columns.Add("soid");
            nontaxdummytable.Columns.Add("IndDate");
            nontaxdummytable.Columns.Add("agentdcno");
            nontaxdummytable.Columns.Add("Tripsno");
            nontaxdummytable.Columns.Add("productid");
            foreach (orderdetail o in obj.data)
            {
                if (o.Productsno != null)
                {
                    if (o.Qty != "0")
                    {
                        cmd = new MySqlCommand("SELECT   sno, SubCat_sno, ProductName, Qty, Units, UnitPrice, Flag, UserData_sno, Rank, Inventorysno, VatPercent, Product_type, tproduct, sangam_flag, Itemcode, images,specification, materialtype, perunitprice, hsncode, igst, cgst, sgst, gsttaxcategory, pieces, invqty, description, ifdflag FROM productsdata WHERE (sno = @productsno)");
                        cmd.Parameters.AddWithValue("@productsno", o.Productsno);
                        DataTable dtproduct = vdbmngr.SelectQuery(cmd).Tables[0];
                        if (dtproduct.Rows[0]["igst"].ToString() == "0")
                        {
                            DataRow newrow = nontaxdummytable.NewRow();
                            newrow["BranchId"] = branchid;
                            newrow["soid"] = context.Session["branch"].ToString();
                            newrow["IndDate"] = ServerDateCurrentdate;
                            newrow["agentdcno"] = branchid;
                            newrow["productid"] = o.Productsno;
                            nontaxdummytable.Rows.Add(newrow);
                        }
                        else
                        {
                            DataRow newrow = taxdummytable.NewRow();
                            newrow["BranchId"] = branchid;
                            newrow["soid"] = context.Session["branch"].ToString();
                            newrow["IndDate"] = ServerDateCurrentdate;
                            newrow["agentdcno"] = branchid;
                            newrow["productid"] = o.Productsno;
                            taxdummytable.Rows.Add(newrow);
                        }
                    }
                }
            }
            if (taxdummytable.Rows.Count > 0)
            {
                string Soid = context.Session["branch"].ToString();
                if (Soid == "4626")
                {
                    Soid = "159";
                }
                cmd = new MySqlCommand("SELECT IFNULL(MAX(agentdcno), 0) + 1 AS Sno FROM agenttaxdc WHERE (soid = @soid)  AND (IndDate BETWEEN @d1 AND @d2)");
                cmd.Parameters.AddWithValue("@soid", Soid);
                cmd.Parameters.AddWithValue("@d1", GetLowDate(dtapril));
                cmd.Parameters.AddWithValue("@d2", GetHighDate(dtmarch));
                DataTable dtadcno = vdbmngr.SelectQuery(cmd).Tables[0];
                taxtripdcno = dtadcno.Rows[0]["Sno"].ToString();
                cmd = new MySqlCommand("Insert Into agenttaxdc (BranchId,soid,IndDate,agentdcno,stateid,companycode,moduleid,doe,invoicetype,DcNo,indentno) Values(@BranchId,@soid,@IndDate,@agentdcno,@stateid,@companycode,@moduleid,@doe,@invoicetype,@DcNo,@indentno)");
                cmd.Parameters.AddWithValue("@BranchId", BranchID);
                cmd.Parameters.AddWithValue("@soid", Soid);
                cmd.Parameters.AddWithValue("@IndDate", ServerDateCurrentdate);
                cmd.Parameters.AddWithValue("@agentdcno", taxtripdcno);
                cmd.Parameters.AddWithValue("@stateid", statecode);
                cmd.Parameters.AddWithValue("@companycode", companycode);
                cmd.Parameters.AddWithValue("@moduleid", context.Session["moduleid"].ToString());
                cmd.Parameters.AddWithValue("@doe", ServerDateCurrentdate);
                cmd.Parameters.AddWithValue("@invoicetype", "ASales");
                cmd.Parameters.AddWithValue("@DcNo", TripSno);
                cmd.Parameters.AddWithValue("@indentno", IndentNo);
                vdbmngr.insert(cmd);
            }
            if (nontaxdummytable.Rows.Count > 0)
            {
                string Soid = context.Session["branch"].ToString();

                if (Soid == "4626")
                {
                    Soid = "159";
                }
                cmd = new MySqlCommand("SELECT IFNULL(MAX(agentdcno), 0) + 1 AS Sno FROM agentdc WHERE (soid = @soid)  AND (IndDate BETWEEN @d1 AND @d2)");
                cmd.Parameters.AddWithValue("@soid", Soid);
                cmd.Parameters.AddWithValue("@d1", GetLowDate(dtapril));
                cmd.Parameters.AddWithValue("@d2", GetHighDate(dtmarch));
                DataTable dtadcno = vdbmngr.SelectQuery(cmd).Tables[0];
                TripDCNo = dtadcno.Rows[0]["Sno"].ToString();
                cmd = new MySqlCommand("Insert Into Agentdc (BranchId,soid,IndDate,agentdcno,stateid,companycode,moduleid,doe,invoicetype,DcNo,indentno) Values(@BranchId,@soid,@IndDate,@agentdcno,@stateid,@companycode,@moduleid,@doe,@invoicetype,@DcNo,@indentno)");
                cmd.Parameters.AddWithValue("@BranchId", BranchID);
                cmd.Parameters.AddWithValue("@soid", Soid);
                cmd.Parameters.AddWithValue("@IndDate", ServerDateCurrentdate);
                cmd.Parameters.AddWithValue("@agentdcno", TripDCNo);
                cmd.Parameters.AddWithValue("@stateid", statecode);
                cmd.Parameters.AddWithValue("@companycode", companycode);
                cmd.Parameters.AddWithValue("@moduleid", context.Session["moduleid"].ToString());
                cmd.Parameters.AddWithValue("@doe", ServerDateCurrentdate);
                cmd.Parameters.AddWithValue("@invoicetype", "ASales");
                cmd.Parameters.AddWithValue("@DcNo", TripSno);
                cmd.Parameters.AddWithValue("@indentno", IndentNo);
                vdbmngr.insert(cmd);
            }
            cmd = new MySqlCommand("update  tripdata set DCNO=@DCNO,taxdcno=@taxdcno,DC_Type=@DC_Type where sno=@tripsno");
            cmd.Parameters.AddWithValue("@DCNO", TripDCNo);
            cmd.Parameters.AddWithValue("@taxdcno", taxtripdcno);
            cmd.Parameters.AddWithValue("@tripsno", TripSno);
            cmd.Parameters.AddWithValue("@DC_Type", "0");
            vdbmngr.Update(cmd);
            foreach (orderdetail o in obj.data)
            {
                if (o.Productsno != null)
                {
                    if (o.Qty != "0" || o.offerqty != "0")
                    {
                        cmd = new MySqlCommand("insert into tripsubdata (Tripdata_Sno,ProductId,Qty,DeliverQty,offerqty)values(@Tripdata_Sno,@ProductId,@Qty,@deliverqty,@offerqty)");
                        cmd.Parameters.AddWithValue("@Tripdata_Sno", TripSno);
                        cmd.Parameters.AddWithValue("@ProductId", o.Productsno);
                        double DeliveryQty = 0;
                        double.TryParse(o.Unitsqty, out DeliveryQty);
                        DeliveryQty = Math.Round(DeliveryQty, 2);
                        float manuftreming_qty = 0;
                        float.TryParse(o.RemainingQty, out manuftreming_qty);
                        cmd.Parameters.AddWithValue("@Qty", DeliveryQty);
                        float delqty = 0;
                        cmd.Parameters.AddWithValue("@deliverqty", delqty);
                        cmd.Parameters.AddWithValue("@offerqty", o.offerqty);
                        vdbmngr.insert(cmd);
                        cmd = new MySqlCommand("SELECT branchproducts.unitprice, branchproducts.product_sno, productsdata.Qty, productsdata.Units FROM branchproducts INNER JOIN productsdata ON branchproducts.product_sno = productsdata.sno WHERE (branchproducts.branch_sno = @BranchID) and (branchproducts.product_sno=@sno) and (branchproducts.flag=@flag)");
                        cmd.Parameters.AddWithValue("@sno", o.Productsno);
                        cmd.Parameters.AddWithValue("@BranchID", BranchID);
                        cmd.Parameters.AddWithValue("@flag", 1);
                        DataTable dtBranchProduct = vdbmngr.SelectQuery(cmd).Tables[0];
                        string AunitPrice = "0";
                        if (dtBranchProduct.Rows.Count > 0)
                        {
                            AunitPrice = dtBranchProduct.Rows[0]["unitprice"].ToString();
                        }
                        if (AunitPrice == "0")
                        {
                            cmd = new MySqlCommand("SELECT productsdata.UnitPrice,productsdata.Qty, productsdata.Units, branchproducts.product_sno, branchproducts.unitprice AS Bunitprice , productsdata.ProductName FROM productsdata INNER JOIN branchproducts ON productsdata.sno = branchproducts.product_sno INNER JOIN branchmappingtable ON branchproducts.branch_sno = branchmappingtable.SuperBranch WHERE (branchmappingtable.SubBranch = @BranchID) AND (branchproducts.product_sno = @Sno)");
                            cmd.Parameters.AddWithValue("@sno", o.Productsno);
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            DataTable dtProduct = vdbmngr.SelectQuery(cmd).Tables[0];
                            if (dtProduct.Rows.Count > 0)
                            {
                                string BranchUnitPrice = dtProduct.Rows[0]["BUnitPrice"].ToString();
                                if (BranchUnitPrice != "0")
                                {
                                    AunitPrice = dtProduct.Rows[0]["BUnitPrice"].ToString();
                                }
                                else
                                {
                                    AunitPrice = dtProduct.Rows[0]["UnitPrice"].ToString();
                                }
                            }
                        }
                        cmd = new MySqlCommand("insert into indents_subtable (IndentNo,Product_sno,Status,unitQty,UnitCost,OTripId,DtripID,DeliveryQty,D_date,tub_qty,pkt_qty)values(@IndentNo,@Product_sno,@Status,@unitQty,@UnitCost,@OTripId,@DtripID,@DeliveryQty,@D_date,@tubqty,@pktqty)");
                        cmd.Parameters.AddWithValue("@IndentNo", IndentNo);
                        cmd.Parameters.AddWithValue("@Product_sno", o.Productsno);
                        double UnitCost = 0;
                        double.TryParse(o.UnitCost, out UnitCost);
                        UnitCost = Math.Round(UnitCost, 2);
                        cmd.Parameters.AddWithValue("@UnitCost", UnitCost);
                        //double DeliveryQty = 0;
                        double.TryParse(o.Unitsqty, out DeliveryQty);
                        DeliveryQty = Math.Round(DeliveryQty, 2);
                        double pktqty = 0;
                        double.TryParse(o.PktQty, out pktqty);
                        pktqty = Math.Round(pktqty, 2);
                        double unitQty = 0;
                        double tubqty = 0;
                        double.TryParse(o.tubQty, out tubqty);
                        tubqty = Math.Round(tubqty, 2);
                        //cmd.Parameters.AddWithValue("@tubqty", tubqty);
                        //cmd.Parameters.AddWithValue("@pktqty", pktqty);
                        cmd.Parameters.AddWithValue("@unitQty", unitQty);
                        cmd.Parameters.AddWithValue("@DeliveryQty", DeliveryQty);
                        cmd.Parameters.AddWithValue("@Status", "Delivered");
                        cmd.Parameters.AddWithValue("@OTripId", TripSno);
                        cmd.Parameters.AddWithValue("@DtripID", TripSno);
                        cmd.Parameters.AddWithValue("@D_date", ServerDateCurrentdate.AddDays(1));
                        cmd.Parameters.AddWithValue("@tubqty", tubqty);
                        cmd.Parameters.AddWithValue("@pktqty", pktqty);
                        if (DeliveryQty != 0.0)
                        {
                            vdbmngr.insert(cmd);
                        }
                        if (salestype == "Plant")
                        {
                        }
                        else
                        {
                            cmd = new MySqlCommand("update branchProducts set BranchQty=BranchQty-@BranchQty where Branch_sno=@BranchID and Product_sno=@ProductID");
                            cmd.Parameters.AddWithValue("@BranchQty", DeliveryQty);
                            cmd.Parameters.AddWithValue("@ProductID", o.Productsno);
                            cmd.Parameters.AddWithValue("@BranchID", context.Session["branch"].ToString());
                            vdbmngr.Update(cmd);
                        }
                        cmd = new MySqlCommand("Update branchaccounts set Amount=Amount+@Amount where BranchId=@BranchId");
                        double TotRate = 0;
                        TotRate = UnitCost * DeliveryQty;
                        TotRate = Math.Round(TotRate, 2);
                        cmd.Parameters.AddWithValue("@Amount", TotRate);
                        cmd.Parameters.AddWithValue("@BranchId", BranchID);
                        if (vdbmngr.Update(cmd) == 0)
                        {
                            cmd = new MySqlCommand("Insert Into branchaccounts(Amount,BranchId) values(@Amount,@BranchId)");
                            cmd.Parameters.AddWithValue("@Amount", TotRate);
                            cmd.Parameters.AddWithValue("@BranchId", BranchID);
                            vdbmngr.insert(cmd);
                        }

                        string opbal = "0";
                        string clobal = "0";
                        cmd = new MySqlCommand("SELECT MAX(sno) as sno FROM agent_bal_trans WHERE agentid=@agentid");
                        cmd.Parameters.AddWithValue("@agentid", BranchID);
                        DataTable dtagentbal = vdbmngr.SelectQuery(cmd).Tables[0];
                        if (dtagentbal.Rows.Count > 0)
                        {
                            string sno = dtagentbal.Rows[0]["sno"].ToString();
                            cmd = new MySqlCommand("SELECT  opp_balance, clo_balance FROM agent_bal_trans WHERE sno=@sno");
                            cmd.Parameters.AddWithValue("@sno", sno);
                            DataTable dtopbal = vdbmngr.SelectQuery(cmd).Tables[0];
                            if (dtopbal.Rows.Count > 0)
                            {
                                opbal = dtopbal.Rows[0]["opp_balance"].ToString();
                                clobal = dtopbal.Rows[0]["clo_balance"].ToString();
                            }
                            cmd = new MySqlCommand("UPDATE agent_bal_trans set salesvalue=salesvalue+@Amount, clo_balance=clo_balance+@Amount  where agentid=@BranchId AND inddate=@inddate");
                            cmd.Parameters.AddWithValue("@inddate", ServerDateCurrentdate);
                            cmd.Parameters.AddWithValue("@Amount", TotRate);
                            cmd.Parameters.AddWithValue("@BranchId", BranchID);
                            if (vdbmngr.Update(cmd) == 0)
                            {
                                double clsval = Convert.ToDouble(clobal) + TotRate;
                                cmd = new MySqlCommand("Insert Into agent_bal_trans(agentid, opp_balance, inddate, salesvalue,  clo_balance, createdate, entryby,Paidamount) values (@BranchId,@opp_balance,@inddate, @salesvalue, @clo_balance, @createdate, @entryby,@Paidamount)");
                                cmd.Parameters.AddWithValue("@BranchId", BranchID);
                                cmd.Parameters.AddWithValue("@opp_balance", clobal);
                                cmd.Parameters.AddWithValue("@inddate", ServerDateCurrentdate);
                                cmd.Parameters.AddWithValue("@salesvalue", TotRate);
                                cmd.Parameters.AddWithValue("@Paidamount", 0);
                                cmd.Parameters.AddWithValue("@clo_balance", clsval);
                                cmd.Parameters.AddWithValue("@createdate", ServerDateCurrentdate);
                                cmd.Parameters.AddWithValue("@entryby", Username);
                                vdbmngr.insert(cmd);
                            }
                        }
                        else
                        {
                            cmd = new MySqlCommand("UPDATE agent_bal_trans set salesvalue=salesvalue+@Amount, clo_balance=clo_balance+@Amount  where agentid=@BranchId AND inddate=@inddate");
                            cmd.Parameters.AddWithValue("@inddate", ServerDateCurrentdate);
                            cmd.Parameters.AddWithValue("@Amount", TotRate);
                            cmd.Parameters.AddWithValue("@BranchId", BranchID);
                            if (vdbmngr.Update(cmd) == 0)
                            {
                                cmd = new MySqlCommand("Insert Into agent_bal_trans(agentid, opp_balance, inddate, salesvalue,  clo_balance, createdate, entryby,Paidamount) values (@BranchId,@opp_balance,@inddate, @salesvalue, @clo_balance, @createdate, @entryby,@Paidamount)");
                                cmd.Parameters.AddWithValue("@BranchId", BranchID);
                                cmd.Parameters.AddWithValue("@opp_balance", 0);
                                cmd.Parameters.AddWithValue("@inddate", ServerDateCurrentdate);
                                cmd.Parameters.AddWithValue("@salesvalue", TotRate);
                                cmd.Parameters.AddWithValue("@Paidamount", 0);
                                cmd.Parameters.AddWithValue("@clo_balance", TotRate);
                                cmd.Parameters.AddWithValue("@createdate", ServerDateCurrentdate);
                                cmd.Parameters.AddWithValue("@entryby", Username);
                                vdbmngr.insert(cmd);
                            }
                        }
                    }
                }
            }
            foreach (inventorydetail iv in obj.invdata)
            {
                if (iv.InventorySno != null)
                {
                    float qty;
                    float.TryParse(iv.Qty, out qty);
                    if (qty > 0)
                    {
                        cmd = new MySqlCommand("insert into tripinvdata (Tripdata_Sno,invid,Qty,Remaining)values(@Tripdata_Sno,@invId,@Qty,@remaining)");
                        cmd.Parameters.AddWithValue("@Tripdata_Sno", TripSno);
                        cmd.Parameters.AddWithValue("@invId", iv.InventorySno);
                        cmd.Parameters.AddWithValue("@Qty", qty);
                        cmd.Parameters.AddWithValue("@remaining", qty);
                        vdbmngr.insert(cmd);
                        cmd = new MySqlCommand("update inventory_monitor set Qty=Qty+@Qty where Inv_Sno=@Inv_Sno and BranchId=@BranchId");
                        cmd.Parameters.AddWithValue("@Qty", qty);
                        cmd.Parameters.AddWithValue("@Inv_Sno", iv.InventorySno);
                        cmd.Parameters.AddWithValue("@BranchId", BranchID);
                        if (vdbmngr.Update(cmd) == 0)
                        {
                            cmd = new MySqlCommand("Insert into inventory_monitor(Qty,Inv_Sno,BranchId) values(@Qty,@Inv_Sno,@BranchId)");
                            cmd.Parameters.AddWithValue("@Qty", qty);
                            cmd.Parameters.AddWithValue("@Inv_Sno", iv.InventorySno);
                            cmd.Parameters.AddWithValue("@BranchId", BranchID);
                            vdbmngr.insert(cmd);
                        }
                    }
                }
            }
            var jsonSerializer = new JavaScriptSerializer();
            var jsonString = String.Empty;
            context.Request.InputStream.Position = 0;
            using (var inputStream = new StreamReader(context.Request.InputStream))
            {
                jsonString = inputStream.ReadToEnd();
            }
            string msg = "Agent Sale Successfully Saved";
            string response = GetJson(msg);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string msg = ex.Message;
            string response = GetJson(msg);
            context.Response.Write(response);
        }
    }
    private void btnSpecialSaleSaveclick(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            var js = new JavaScriptSerializer();
            string Username = context.Session["userdata_sno"].ToString();
            string routelevel = context.Session["LevelType"].ToString();
            var title1 = context.Request.Params[1];
            Orders obj = js.Deserialize<Orders>(title1);
            string LocalSaleName = obj.routename;
            string VehicleNo = "";
            string BranchID = "";
            BranchID = obj.BranchID;
            string EmpID = obj.EmpID;
            DateTime ServerDateCurrentdate = VehicleDBMgr.GetTime(vdbmngr.conn);
            DateTime dtapril = new DateTime();
            DateTime dtmarch = new DateTime();
            int currentyear = ServerDateCurrentdate.Year;
            int nextyear = ServerDateCurrentdate.Year + 1;
            if (ServerDateCurrentdate.Month > 3)
            {
                string apr = "4/1/" + currentyear;
                dtapril = DateTime.Parse(apr);
                string march = "3/31/" + nextyear;
                dtmarch = DateTime.Parse(march);
            }
            if (ServerDateCurrentdate.Month <= 3)
            {
                if (ServerDateCurrentdate.Day == 31 && ServerDateCurrentdate.Month == 3)
                {
                    string apr = "3/31/" + currentyear;
                    dtapril = DateTime.Parse(apr);
                    string march = "3/31/" + nextyear;
                    dtmarch = DateTime.Parse(march);
                }
                else
                {
                    string apr = "4/1/" + (currentyear - 1);
                    dtapril = DateTime.Parse(apr);
                    string march = "3/31/" + (nextyear - 1);
                    dtmarch = DateTime.Parse(march);
                }
            }
            cmd = new MySqlCommand("UPDATE dispatch SET flag=@flag WHERE (DispName=@DispName) AND (Branch_id=@Branch_id)");
            cmd.Parameters.AddWithValue("@DispName", LocalSaleName);
            cmd.Parameters.AddWithValue("@Branch_id", context.Session["branch"].ToString());
            cmd.Parameters.AddWithValue("@flag", false);
            long RouteID = 0;
            if (vdbmngr.Update(cmd) == 0)
            {
                cmd = new MySqlCommand("insert into dispatch (DispName,Branch_id,flag,DispType,DispMode,BranchID) values(@DispName,@Branch_id,@flag,@DispType,@DispMode,@BranchID)");
                cmd.Parameters.AddWithValue("@DispName", LocalSaleName);
                cmd.Parameters.AddWithValue("@Branch_id", context.Session["branch"].ToString());
                cmd.Parameters.AddWithValue("@flag", false);
                cmd.Parameters.AddWithValue("@DispType", "SO");
                cmd.Parameters.AddWithValue("@DispMode", "SPL");
                cmd.Parameters.AddWithValue("@BranchID", BranchID);
                RouteID = vdbmngr.insertScalar(cmd);
            }
            else
            {
                cmd = new MySqlCommand("Select * from dispatch  WHERE (DispName=@DispName) AND (Branch_id=@Branch_id)");
                cmd.Parameters.AddWithValue("@DispName", LocalSaleName);
                cmd.Parameters.AddWithValue("@Branch_id", context.Session["branch"].ToString());
                DataTable dtDisp = vdbmngr.SelectQuery(cmd).Tables[0];
                if (dtDisp.Rows.Count > 0)
                {
                    string dispno = dtDisp.Rows[0]["sno"].ToString();
                    long.TryParse(dispno, out RouteID);
                    BranchID = dtDisp.Rows[0]["BranchID"].ToString();
                }
            }
            string fromstate = context.Session["stateid"].ToString();
            string tostate = "";
            string branchid = "";
            string companycode = "";
            string statecode = "";
            cmd = new MySqlCommand("SELECT  branchdata.sno, branchdata.BranchName,branchdata.companycode, branchdata.SalesType, branchdata.Lat, branchdata.Lng, branchdata.Radius, statemastar.gststatecode, branchdata.stateid FROM branchdata INNER JOIN statemastar ON branchdata.stateid = statemastar.sno WHERE (branchdata.sno = @BranchID)");
            cmd.Parameters.AddWithValue("@BranchID", BranchID);
            DataTable dtEmpID = vdbmngr.SelectQuery(cmd).Tables[0];
            if (dtEmpID.Rows.Count > 0)
            {
                tostate = dtEmpID.Rows[0]["stateid"].ToString();
                branchid = dtEmpID.Rows[0]["sno"].ToString();
                companycode = dtEmpID.Rows[0]["companycode"].ToString();
                statecode = dtEmpID.Rows[0]["gststatecode"].ToString();
            }
            cmd = new MySqlCommand("insert into tripdata (EmpId,AssignDate,Status,Userdata_sno,Permissions,VehicleNo,I_Date,GPStatus,PlanStatus,Plantime,DespatchStatus,DispTime,DEmpID,BranchID)values(@EmpId,@AssignDate,@status,@Userdata_sno,@Permissions,@VehicleNo,@indendate,@gpstatus,@PlanStatus,@Plantime,@DespatchStatus,@DispTime,@DEmpID,@BranchID)");
            cmd.Parameters.AddWithValue("@Permissions", "D");
            cmd.Parameters.AddWithValue("@DEmpID", context.Session["UserSno"].ToString());
            cmd.Parameters.AddWithValue("@EmpId", EmpID);
            cmd.Parameters.AddWithValue("@AssignDate", ServerDateCurrentdate);
            cmd.Parameters.AddWithValue("@indendate", ServerDateCurrentdate);
            cmd.Parameters.AddWithValue("@status", "A");
            cmd.Parameters.AddWithValue("@gpstatus", "A");
            cmd.Parameters.AddWithValue("@VehicleNo", VehicleNo);
            cmd.Parameters.AddWithValue("@Userdata_sno", Username);
            cmd.Parameters.AddWithValue("@PlanStatus", "Planned");
            cmd.Parameters.AddWithValue("@DespatchStatus", "Yes");
            cmd.Parameters.AddWithValue("@Plantime", ServerDateCurrentdate);
            cmd.Parameters.AddWithValue("@DispTime", ServerDateCurrentdate);
            cmd.Parameters.AddWithValue("@BranchID", context.Session["branch"].ToString());
            long TripSno = vdbmngr.insertScalar(cmd);
            //string TripSno = "";//Testing
            string TripDCNo = ""; string taxtripdcno = "";
            context.Session["TripIDSno"] = TripSno;
            cmd = new MySqlCommand("insert into triproutes(Tripdata_sno,RouteID)values(@tripdata_sno,@routeid) ");
            cmd.Parameters.AddWithValue("@tripdata_sno", TripSno);
            cmd.Parameters.AddWithValue("@routeid", RouteID);
            vdbmngr.insert(cmd);
            DataTable taxdummytable = new DataTable();
            taxdummytable.Columns.Add("BranchId");
            taxdummytable.Columns.Add("soid");
            taxdummytable.Columns.Add("IndDate");
            taxdummytable.Columns.Add("agentdcno");
            taxdummytable.Columns.Add("Tripsno");
            taxdummytable.Columns.Add("productid");
            DataTable nontaxdummytable = new DataTable();
            nontaxdummytable.Columns.Add("BranchId");
            nontaxdummytable.Columns.Add("soid");
            nontaxdummytable.Columns.Add("IndDate");
            nontaxdummytable.Columns.Add("agentdcno");
            nontaxdummytable.Columns.Add("Tripsno");
            nontaxdummytable.Columns.Add("productid");
            foreach (orderdetail o in obj.data)
            {
                if (o.Productsno != null)
                {
                    if (o.Qty != "0")
                    {
                        cmd = new MySqlCommand("SELECT   sno, SubCat_sno, ProductName, Qty, Units, UnitPrice, Flag, UserData_sno, Rank, Inventorysno, VatPercent, Product_type, tproduct, sangam_flag, Itemcode, images,specification, materialtype, perunitprice, hsncode, igst, cgst, sgst, gsttaxcategory, pieces, invqty, description, ifdflag FROM productsdata WHERE (sno = @productsno)");
                        cmd.Parameters.AddWithValue("@productsno", o.Productsno);
                        DataTable dtproduct = vdbmngr.SelectQuery(cmd).Tables[0];
                        if (dtproduct.Rows[0]["igst"].ToString() == "0")
                        {
                            DataRow newrow = nontaxdummytable.NewRow();
                            newrow["BranchId"] = branchid;
                            newrow["soid"] = context.Session["branch"].ToString();
                            newrow["IndDate"] = ServerDateCurrentdate;
                            newrow["agentdcno"] = branchid;
                            newrow["productid"] = o.Productsno;
                            nontaxdummytable.Rows.Add(newrow);
                        }
                        else
                        {
                            DataRow newrow = taxdummytable.NewRow();
                            newrow["BranchId"] = branchid;
                            newrow["soid"] = context.Session["branch"].ToString();
                            newrow["IndDate"] = ServerDateCurrentdate;
                            newrow["agentdcno"] = branchid;
                            newrow["productid"] = o.Productsno;
                            taxdummytable.Rows.Add(newrow);
                        }
                    }
                }
            }
            if (fromstate == tostate)
            {
                if (taxdummytable.Rows.Count > 0)
                {
                    cmd = new MySqlCommand("SELECT IFNULL(MAX(agentstno), 0) + 1 AS Sno FROM agenttaxst WHERE (soid = @soid) AND (IndDate BETWEEN @d1 AND @d2)");
                    cmd.Parameters.AddWithValue("@soid", context.Session["branch"].ToString());
                    //cmd.Parameters.AddWithValue("@moduleid", context.Session["moduleid"].ToString());
                    cmd.Parameters.AddWithValue("@d1", GetLowDate(dtapril));
                    cmd.Parameters.AddWithValue("@d2", GetHighDate(dtmarch));
                    DataTable dtadcno = vdbmngr.SelectQuery(cmd).Tables[0];
                    taxtripdcno = dtadcno.Rows[0]["Sno"].ToString();
                    cmd = new MySqlCommand("Insert Into agenttaxst (BranchId,soid,IndDate,agentstno,stateid,companycode,moduleid,doe,invoicetype,dcno) Values(@BranchId,@soid,@IndDate,@agentstno,@stateid,@companycode,@moduleid,@doe,@invoicetype,@dcno)");
                    cmd.Parameters.AddWithValue("@BranchId", branchid);
                    cmd.Parameters.AddWithValue("@soid", context.Session["branch"].ToString());
                    cmd.Parameters.AddWithValue("@IndDate", ServerDateCurrentdate);
                    cmd.Parameters.AddWithValue("@agentstno", taxtripdcno);
                    cmd.Parameters.AddWithValue("@stateid", statecode);
                    cmd.Parameters.AddWithValue("@companycode", companycode);
                    cmd.Parameters.AddWithValue("@moduleid", context.Session["moduleid"].ToString());
                    cmd.Parameters.AddWithValue("@doe", ServerDateCurrentdate);
                    cmd.Parameters.AddWithValue("@invoicetype", "SpecialDispatch");
                    cmd.Parameters.AddWithValue("@dcno", TripSno);
                    vdbmngr.insert(cmd);
                }
                if (nontaxdummytable.Rows.Count > 0)
                {
                    cmd = new MySqlCommand("SELECT IFNULL(MAX(agentstno), 0) + 1 AS Sno FROM agentst WHERE (soid = @soid) AND (IndDate BETWEEN @d1 AND @d2)");
                    cmd.Parameters.AddWithValue("@soid", context.Session["branch"].ToString());
                    //cmd.Parameters.AddWithValue("@moduleid", context.Session["moduleid"].ToString());
                    cmd.Parameters.AddWithValue("@d1", GetLowDate(dtapril));
                    cmd.Parameters.AddWithValue("@d2", GetHighDate(dtmarch));
                    DataTable dtadcno = vdbmngr.SelectQuery(cmd).Tables[0];
                    TripDCNo = dtadcno.Rows[0]["Sno"].ToString();
                    cmd = new MySqlCommand("Insert Into agentst (BranchId,soid,IndDate,agentstno,stateid,companycode,moduleid,doe,invoicetype,dcno) Values(@BranchId,@soid,@IndDate,@agentstno,@stateid,@companycode,@moduleid,@doe,@invoicetype,@dcno)");
                    cmd.Parameters.AddWithValue("@BranchId", branchid);
                    cmd.Parameters.AddWithValue("@soid", context.Session["branch"].ToString());
                    cmd.Parameters.AddWithValue("@IndDate", ServerDateCurrentdate);
                    cmd.Parameters.AddWithValue("@agentstno", TripDCNo);
                    cmd.Parameters.AddWithValue("@stateid", statecode);
                    cmd.Parameters.AddWithValue("@companycode", companycode);
                    cmd.Parameters.AddWithValue("@moduleid", context.Session["moduleid"].ToString());
                    cmd.Parameters.AddWithValue("@doe", ServerDateCurrentdate);
                    cmd.Parameters.AddWithValue("@invoicetype", "SpecialDispatch");
                    cmd.Parameters.AddWithValue("@dcno", TripSno);
                    vdbmngr.insert(cmd);
                }
            }
            else
            {
                if (taxdummytable.Rows.Count > 0)
                {
                    cmd = new MySqlCommand("SELECT IFNULL(MAX(agentdcno), 0) + 1 AS Sno FROM agenttaxdc WHERE (soid = @soid) AND (IndDate BETWEEN @d1 AND @d2)");
                    cmd.Parameters.AddWithValue("@soid", context.Session["branch"].ToString());
                    //cmd.Parameters.AddWithValue("@moduleid", context.Session["moduleid"].ToString());
                    cmd.Parameters.AddWithValue("@d1", GetLowDate(dtapril));
                    cmd.Parameters.AddWithValue("@d2", GetHighDate(dtmarch));
                    DataTable dtadcno = vdbmngr.SelectQuery(cmd).Tables[0];
                    taxtripdcno = dtadcno.Rows[0]["Sno"].ToString();
                    cmd = new MySqlCommand("Insert Into agenttaxdc (BranchId,soid,IndDate,agentdcno,stateid,companycode,moduleid,doe,invoicetype,dcno) Values(@BranchId,@soid,@IndDate,@agentdcno,@stateid,@companycode,@moduleid,@doe,@invoicetype,@dcno)");
                    cmd.Parameters.AddWithValue("@BranchId", branchid);
                    cmd.Parameters.AddWithValue("@soid", context.Session["branch"].ToString());
                    cmd.Parameters.AddWithValue("@IndDate", ServerDateCurrentdate);
                    cmd.Parameters.AddWithValue("@agentdcno", taxtripdcno);
                    cmd.Parameters.AddWithValue("@stateid", statecode);
                    cmd.Parameters.AddWithValue("@companycode", companycode);
                    cmd.Parameters.AddWithValue("@moduleid", context.Session["moduleid"].ToString());
                    cmd.Parameters.AddWithValue("@doe", ServerDateCurrentdate);
                    cmd.Parameters.AddWithValue("@invoicetype", "SpecialDispatch");
                    cmd.Parameters.AddWithValue("@dcno", TripSno);
                    vdbmngr.insert(cmd);
                }
                if (nontaxdummytable.Rows.Count > 0)
                {
                    cmd = new MySqlCommand("SELECT IFNULL(MAX(agentdcno), 0) + 1 AS Sno FROM agentdc WHERE (soid = @soid)  AND (IndDate BETWEEN @d1 AND @d2)");
                    cmd.Parameters.AddWithValue("@soid", context.Session["branch"].ToString());
                    //cmd.Parameters.AddWithValue("@moduleid", context.Session["moduleid"].ToString());
                    cmd.Parameters.AddWithValue("@d1", GetLowDate(dtapril));
                    cmd.Parameters.AddWithValue("@d2", GetHighDate(dtmarch));
                    DataTable dtadcno = vdbmngr.SelectQuery(cmd).Tables[0];
                    TripDCNo = dtadcno.Rows[0]["Sno"].ToString();
                    cmd = new MySqlCommand("Insert Into Agentdc (BranchId,soid,IndDate,agentdcno,stateid,companycode,moduleid,doe,invoicetype,dcno) Values(@BranchId,@soid,@IndDate,@agentdcno,@stateid,@companycode,@moduleid,@doe,@invoicetype,@dcno)");
                    cmd.Parameters.AddWithValue("@BranchId", branchid);
                    cmd.Parameters.AddWithValue("@soid", context.Session["branch"].ToString());
                    cmd.Parameters.AddWithValue("@IndDate", ServerDateCurrentdate);
                    cmd.Parameters.AddWithValue("@agentdcno", TripDCNo);
                    cmd.Parameters.AddWithValue("@stateid", statecode);
                    cmd.Parameters.AddWithValue("@companycode", companycode);
                    cmd.Parameters.AddWithValue("@moduleid", context.Session["moduleid"].ToString());
                    cmd.Parameters.AddWithValue("@doe", ServerDateCurrentdate);
                    cmd.Parameters.AddWithValue("@invoicetype", "SpecialDispatch");
                    cmd.Parameters.AddWithValue("@dcno", TripSno);
                    vdbmngr.insert(cmd);
                }
            }
            cmd = new MySqlCommand("update tripdata set DCNO=@DCNO,taxdcno=@taxdcno,DC_Type=@DC_Type where sno=@tripsno");
            cmd.Parameters.AddWithValue("@DCNO", TripDCNo);
            cmd.Parameters.AddWithValue("@taxdcno", taxtripdcno);
            cmd.Parameters.AddWithValue("@tripsno", TripSno);
            if (fromstate == tostate)
            {
                cmd.Parameters.AddWithValue("@DC_Type", "1");
            }
            else
            {
                cmd.Parameters.AddWithValue("@DC_Type", "0");
            }
            vdbmngr.Update(cmd);
            foreach (orderdetail o in obj.data)
            {
                if (o.Productsno != null)
                {
                    if (o.Qty != "0")
                    {
                        cmd = new MySqlCommand("insert into tripsubdata (Tripdata_Sno,ProductId,Qty,DeliverQty)values(@Tripdata_Sno,@ProductId,@Qty,@deliverqty)");
                        cmd.Parameters.AddWithValue("@Tripdata_Sno", TripSno);
                        cmd.Parameters.AddWithValue("@ProductId", o.Productsno);
                        float qty;
                        float.TryParse(o.Qty, out qty);
                        float manuftreming_qty = 0;
                        float.TryParse(o.RemainingQty, out manuftreming_qty);
                        cmd.Parameters.AddWithValue("@Qty", qty);
                        float delqty = 0;
                        cmd.Parameters.AddWithValue("@deliverqty", delqty);
                        vdbmngr.insert(cmd);
                    }
                }
            }
            foreach (inventorydetail iv in obj.invdata)
            {
                if (iv.InventorySno != null)
                {
                    if (iv.Qty != "")
                    {
                        cmd = new MySqlCommand("insert into tripinvdata (Tripdata_Sno,invid,Qty,Remaining)values(@Tripdata_Sno,@invId,@Qty,@remaining)");
                        cmd.Parameters.AddWithValue("@Tripdata_Sno", TripSno);
                        cmd.Parameters.AddWithValue("@invId", iv.InventorySno);
                        float qty;
                        float.TryParse(iv.Qty, out qty);
                        cmd.Parameters.AddWithValue("@Qty", qty);
                        cmd.Parameters.AddWithValue("@remaining", qty);
                        if (qty != 0.0)
                        {
                            vdbmngr.insert(cmd);
                        }
                    }
                }
            }
            string msg = "Special Sale Successfully Saved";
            string response = GetJson(msg);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string msg = ex.Message;
            string response = GetJson(msg);
            context.Response.Write(response);
        }
    }
    private void btnLocalSaleSaveclick(HttpContext context)
    {
        #region
        try
        {
            vdbmngr = new VehicleDBMgr();
            var js = new JavaScriptSerializer();
            string Username = context.Session["userdata_sno"].ToString();
            string routelevel = context.Session["LevelType"].ToString();
            var title1 = context.Request.Params[1];
            Orders obj = js.Deserialize<Orders>(title1);
            string LocalSaleName = obj.routename;
            string SalesType = obj.SalesType;
            string SalesTypeId = obj.SalesTypeId;
            string RecieptNo = obj.RecieptNo;
            string VehicleNo = "";
            DateTime ServerDateCurrentdate = VehicleDBMgr.GetTime(vdbmngr.conn);
            DateTime dtapril = new DateTime();
            DateTime dtmarch = new DateTime();
            int currentyear = ServerDateCurrentdate.Year;
            int nextyear = ServerDateCurrentdate.Year + 1;
            if (ServerDateCurrentdate.Month > 3)
            {
                string apr = "4/1/" + currentyear;
                dtapril = DateTime.Parse(apr);
                string march = "3/31/" + nextyear;
                dtmarch = DateTime.Parse(march);
            }
            if (ServerDateCurrentdate.Month <= 3)
            {
                if (ServerDateCurrentdate.Day == 31 && ServerDateCurrentdate.Month == 3)
                {
                    string apr = "3/31/" + currentyear;
                    dtapril = DateTime.Parse(apr);
                    string march = "3/31/" + nextyear;
                    dtmarch = DateTime.Parse(march);
                }
                else
                {
                    string apr = "4/1/" + (currentyear - 1);
                    dtapril = DateTime.Parse(apr);
                    string march = "3/31/" + (nextyear - 1);
                    dtmarch = DateTime.Parse(march);
                }
            }
            cmd = new MySqlCommand("UPDATE dispatch SET flag=@flag WHERE (DispName=@DispName) AND (Branch_id=@Branch_id)");
            cmd.Parameters.AddWithValue("@DispName", LocalSaleName);
            cmd.Parameters.AddWithValue("@Branch_id", context.Session["branch"].ToString());
            cmd.Parameters.AddWithValue("@flag", false);
            long RouteID = 0;
            if (vdbmngr.Update(cmd) == 0)
            {
                cmd = new MySqlCommand("insert into dispatch (DispName,Branch_id,flag,DispType,BranchID,DispMode) values(@DispName,@Branch_id,@flag,@DispType,@BranchID,@DispMode)");
                cmd.Parameters.AddWithValue("@DispName", LocalSaleName);
                if (SalesType == "Local Sale")
                {
                    cmd.Parameters.AddWithValue("@DispType", "LOCAL");
                    cmd.Parameters.AddWithValue("@DispMode", "LOCAL");
                    string BID = context.Session["branch"].ToString();
                    cmd.Parameters.AddWithValue("@BranchID", BID);
                }
                if (SalesType == "Staff Sale")
                {
                    cmd.Parameters.AddWithValue("@DispType", "Staff");
                    cmd.Parameters.AddWithValue("@DispMode", "Staff");
                    string TitleName = context.Session["TitleName"].ToString();
                    string BID = "";
                    if (TitleName == "SRI VYSHNAVI DAIRY SPECIALITIES (P) LTD")
                    {
                        BID = "760";
                        cmd.Parameters.AddWithValue("@BranchID", BID);
                    }
                    else
                    {
                        BID = "702";
                        cmd.Parameters.AddWithValue("@BranchID", BID);
                    }
                }
                if (SalesType == "Free Sale")
                {
                    cmd.Parameters.AddWithValue("@DispType", "Free");
                    cmd.Parameters.AddWithValue("@DispMode", "Free");
                    string TitleName = context.Session["TitleName"].ToString();
                    if (TitleName == "SRI VYSHNAVI DAIRY SPECIALITIES (P) LTD")
                    {
                        cmd.Parameters.AddWithValue("@BranchID", context.Session["branch"].ToString());
                    }
                    else
                    {
                        cmd.Parameters.AddWithValue("@BranchID", context.Session["branch"].ToString());
                    }
                }
                cmd.Parameters.AddWithValue("@Branch_id", context.Session["branch"].ToString());
                cmd.Parameters.AddWithValue("@flag", false);
                RouteID = vdbmngr.insertScalar(cmd);
            }
            else
            {
                cmd = new MySqlCommand("Select * from dispatch  WHERE (DispName=@DispName) AND (Branch_id=@Branch_id)");
                cmd.Parameters.AddWithValue("@DispName", LocalSaleName);
                cmd.Parameters.AddWithValue("@Branch_id", context.Session["branch"].ToString());
                DataTable dtDisp = vdbmngr.SelectQuery(cmd).Tables[0];
                if (dtDisp.Rows.Count > 0)
                {
                    string dispno = dtDisp.Rows[0]["sno"].ToString();
                    long.TryParse(dispno, out RouteID);
                }
            }
            cmd = new MySqlCommand("UPDATE branchdata SET flag=@flag WHERE (BranchName=@BranchName) AND (SalesOfficeID=@SalesOfficeID)");
            cmd.Parameters.AddWithValue("@BranchName", LocalSaleName);
            cmd.Parameters.AddWithValue("@SalesOfficeID", context.Session["branch"].ToString());
            cmd.Parameters.AddWithValue("@flag", false);
            long BranchID = 0;
            if (vdbmngr.Update(cmd) == 0)
            {
                cmd = new MySqlCommand("insert into branchdata (BranchName,SalesOfficeID) values(@BranchName,@SalesOfficeID)");
                cmd.Parameters.AddWithValue("@BranchName", LocalSaleName);
                cmd.Parameters.AddWithValue("@SalesOfficeID", context.Session["branch"].ToString());
                BranchID = vdbmngr.insertScalar(cmd);
            }
            else
            {
                cmd = new MySqlCommand("Select * from branchdata  WHERE (BranchName=@BranchName) AND (SalesOfficeID=@SalesOfficeID)");
                cmd.Parameters.AddWithValue("@BranchName", LocalSaleName);
                cmd.Parameters.AddWithValue("@SalesOfficeID", context.Session["branch"].ToString());
                DataTable dtDisp = vdbmngr.SelectQuery(cmd).Tables[0];
                if (dtDisp.Rows.Count > 0)
                {
                    string dispno = dtDisp.Rows[0]["sno"].ToString();
                    long.TryParse(dispno, out BranchID);
                }
            }
            string tostate = "";
            string branchid = "";
            string companycode = "";
            string statecode = "";
            cmd = new MySqlCommand("SELECT  branchdata.sno, branchdata.BranchName,branchdata.companycode, branchdata.SalesType, branchdata.Lat, branchdata.Lng, branchdata.Radius, statemastar.gststatecode, branchdata.stateid FROM branchdata INNER JOIN statemastar ON branchdata.stateid = statemastar.sno WHERE (branchdata.sno = @BranchID)");
            cmd.Parameters.AddWithValue("@BranchID", context.Session["branch"].ToString());
            DataTable dtEmpID = vdbmngr.SelectQuery(cmd).Tables[0];
            if (dtEmpID.Rows.Count > 0)
            {
                tostate = dtEmpID.Rows[0]["stateid"].ToString();
                branchid = dtEmpID.Rows[0]["sno"].ToString();
                companycode = dtEmpID.Rows[0]["companycode"].ToString();
                statecode = dtEmpID.Rows[0]["gststatecode"].ToString();
            }
            string TripDCNo = ""; string taxtripdcno = "";
            cmd = new MySqlCommand("insert into tripdata (EmpId,AssignDate,Status,Userdata_sno,Permissions,VehicleNo,I_Date,GPStatus,PlanStatus,Plantime,DespatchStatus,DispTime,DEmpID,BranchID,DCNo,RecieptNo)values(@EmpId,@AssignDate,@status,@Userdata_sno,@Permissions,@VehicleNo,@indendate,@gpstatus,@PlanStatus,@Plantime,@DespatchStatus,@DispTime,@DEmpID,@BranchID,@DCNo,@RecieptNo)");
            cmd.Parameters.AddWithValue("@Permissions", "D");
            cmd.Parameters.AddWithValue("@DEmpID", context.Session["UserSno"].ToString());
            cmd.Parameters.AddWithValue("@EmpId", context.Session["UserSno"].ToString());
            cmd.Parameters.AddWithValue("@AssignDate", ServerDateCurrentdate);
            string BranchType = context.Session["salestype"].ToString();
            if (BranchType == "SALES OFFICE")
            {
                cmd.Parameters.AddWithValue("@indendate", ServerDateCurrentdate.AddDays(-1));
            }
            else
            {
                cmd.Parameters.AddWithValue("@indendate", ServerDateCurrentdate);
            }
            cmd.Parameters.AddWithValue("@status", "A");
            cmd.Parameters.AddWithValue("@gpstatus", "A");
            cmd.Parameters.AddWithValue("@VehicleNo", VehicleNo);
            cmd.Parameters.AddWithValue("@Userdata_sno", Username);
            cmd.Parameters.AddWithValue("@PlanStatus", "Planned");
            cmd.Parameters.AddWithValue("@DespatchStatus", "Yes");
            cmd.Parameters.AddWithValue("@Plantime", ServerDateCurrentdate);
            cmd.Parameters.AddWithValue("@DispTime", ServerDateCurrentdate);
            cmd.Parameters.AddWithValue("@BranchID", context.Session["branch"].ToString());
            cmd.Parameters.AddWithValue("@DCNo", TripDCNo);
            cmd.Parameters.AddWithValue("@RecieptNo", RecieptNo);
            long TripSno = vdbmngr.insertScalar(cmd);
            context.Session["TripIDSno"] = TripSno;
            cmd = new MySqlCommand("insert into triproutes(Tripdata_sno,RouteID)values(@tripdata_sno,@routeid) ");
            cmd.Parameters.AddWithValue("@tripdata_sno", TripSno);
            cmd.Parameters.AddWithValue("@routeid", RouteID);
            vdbmngr.insert(cmd);
            string IndentType = "SP1";
            cmd = new MySqlCommand("insert into indents (Branch_id,I_date,UserData_sno,Status,PaymentStatus,I_createdby,IndentType)values(@Branch_id,@I_date,@UserData_sno,@Status,@PaymentStatus,@I_createdby,@IndentType)");
            cmd.Parameters.AddWithValue("@Branch_id", BranchID);
            cmd.Parameters.AddWithValue("@I_date", ServerDateCurrentdate);
            cmd.Parameters.AddWithValue("@UserData_sno", Username);
            cmd.Parameters.AddWithValue("@Status", "O");
            cmd.Parameters.AddWithValue("@PaymentStatus", 'A');
            cmd.Parameters.AddWithValue("@I_createdby", context.Session["UserSno"].ToString());
            cmd.Parameters.AddWithValue("@IndentType", IndentType);
            long IndentNo = vdbmngr.insertScalar(cmd);
            double totalamount = 0;
            string remarks = "";
            DataTable taxdummytable = new DataTable();
            taxdummytable.Columns.Add("BranchId");
            taxdummytable.Columns.Add("soid");
            taxdummytable.Columns.Add("IndDate");
            taxdummytable.Columns.Add("agentdcno");
            taxdummytable.Columns.Add("Tripsno");
            taxdummytable.Columns.Add("productid");
            DataTable nontaxdummytable = new DataTable();
            nontaxdummytable.Columns.Add("BranchId");
            nontaxdummytable.Columns.Add("soid");
            nontaxdummytable.Columns.Add("IndDate");
            nontaxdummytable.Columns.Add("agentdcno");
            nontaxdummytable.Columns.Add("Tripsno");
            nontaxdummytable.Columns.Add("productid");
            foreach (orderdetail o in obj.data)
            {
                if (o.Productsno != null)
                {
                    if (o.Qty != "0")
                    {
                        cmd = new MySqlCommand("SELECT   sno, SubCat_sno, ProductName, Qty, Units, UnitPrice, Flag, UserData_sno, Rank, Inventorysno, VatPercent, Product_type, tproduct, sangam_flag, Itemcode, images,specification, materialtype, perunitprice, hsncode, igst, cgst, sgst, gsttaxcategory, pieces, invqty, description, ifdflag FROM productsdata WHERE (sno = @productsno)");
                        cmd.Parameters.AddWithValue("@productsno", o.Productsno);
                        DataTable dtproduct = vdbmngr.SelectQuery(cmd).Tables[0];
                        if (dtproduct.Rows[0]["igst"].ToString() == "0")
                        {
                            DataRow newrow = nontaxdummytable.NewRow();
                            newrow["BranchId"] = branchid;
                            newrow["soid"] = context.Session["branch"].ToString();
                            newrow["IndDate"] = ServerDateCurrentdate;
                            newrow["agentdcno"] = branchid;
                            newrow["productid"] = o.Productsno;
                            nontaxdummytable.Rows.Add(newrow);
                        }
                        else
                        {
                            DataRow newrow = taxdummytable.NewRow();
                            newrow["BranchId"] = branchid;
                            newrow["soid"] = context.Session["branch"].ToString();
                            newrow["IndDate"] = ServerDateCurrentdate;
                            newrow["agentdcno"] = branchid;
                            newrow["productid"] = o.Productsno;
                            taxdummytable.Rows.Add(newrow);
                        }
                    }
                }
            }
            if (taxdummytable.Rows.Count > 0)
            {
                string Soid = context.Session["branch"].ToString();
                if (Soid == "4626")
                {
                    Soid = "159";
                }
                cmd = new MySqlCommand("SELECT IFNULL(MAX(agentdcno), 0) + 1 AS Sno FROM agenttaxdc WHERE (soid = @soid) AND (IndDate BETWEEN @d1 AND @d2)");
                cmd.Parameters.AddWithValue("@soid", Soid);
                //cmd.Parameters.AddWithValue("@moduleid", context.Session["moduleid"].ToString());
                cmd.Parameters.AddWithValue("@d1", GetLowDate(dtapril));
                cmd.Parameters.AddWithValue("@d2", GetHighDate(dtmarch));
                DataTable dtadcno = vdbmngr.SelectQuery(cmd).Tables[0];
                taxtripdcno = dtadcno.Rows[0]["Sno"].ToString();
                cmd = new MySqlCommand("Insert Into agenttaxdc (BranchId,soid,IndDate,agentdcno,stateid,companycode,moduleid,doe,invoicetype,DcNo,indentno) Values(@BranchId,@soid,@IndDate,@agentdcno,@stateid,@companycode,@moduleid,@doe,@invoicetype,@DcNo,@indentno)");
                cmd.Parameters.AddWithValue("@BranchId", branchid);
                cmd.Parameters.AddWithValue("@soid", Soid);
                cmd.Parameters.AddWithValue("@IndDate", ServerDateCurrentdate);
                cmd.Parameters.AddWithValue("@agentdcno", taxtripdcno);
                cmd.Parameters.AddWithValue("@stateid", statecode);
                cmd.Parameters.AddWithValue("@companycode", companycode);
                cmd.Parameters.AddWithValue("@moduleid", context.Session["moduleid"].ToString());
                cmd.Parameters.AddWithValue("@doe", ServerDateCurrentdate);
                cmd.Parameters.AddWithValue("@invoicetype", "LSales");
                cmd.Parameters.AddWithValue("@DcNo", TripSno);
                cmd.Parameters.AddWithValue("@indentno", IndentNo);
                vdbmngr.insert(cmd);
            }
            if (nontaxdummytable.Rows.Count > 0)
            {
                string Soid = context.Session["branch"].ToString();
                if (Soid == "4626")
                {
                    Soid = "159";
                }
                cmd = new MySqlCommand("SELECT IFNULL(MAX(agentdcno), 0) + 1 AS Sno FROM agentdc WHERE (soid = @soid)  AND (IndDate BETWEEN @d1 AND @d2)");
                cmd.Parameters.AddWithValue("@soid", Soid);
                //cmd.Parameters.AddWithValue("@moduleid", context.Session["moduleid"].ToString());
                cmd.Parameters.AddWithValue("@d1", GetLowDate(dtapril));
                cmd.Parameters.AddWithValue("@d2", GetHighDate(dtmarch));
                DataTable dtadcno = vdbmngr.SelectQuery(cmd).Tables[0];
                TripDCNo = dtadcno.Rows[0]["Sno"].ToString();
                cmd = new MySqlCommand("Insert Into Agentdc (BranchId,soid,IndDate,agentdcno,stateid,companycode,moduleid,doe,invoicetype,DcNo,indentno) Values(@BranchId,@soid,@IndDate,@agentdcno,@stateid,@companycode,@moduleid,@doe,@invoicetype,@DcNo,@indentno)");
                cmd.Parameters.AddWithValue("@BranchId", BranchID);
                cmd.Parameters.AddWithValue("@soid", Soid);
                cmd.Parameters.AddWithValue("@IndDate", ServerDateCurrentdate);
                cmd.Parameters.AddWithValue("@agentdcno", TripDCNo);
                cmd.Parameters.AddWithValue("@stateid", statecode);
                cmd.Parameters.AddWithValue("@companycode", companycode);
                cmd.Parameters.AddWithValue("@moduleid", context.Session["moduleid"].ToString());
                cmd.Parameters.AddWithValue("@doe", ServerDateCurrentdate);
                cmd.Parameters.AddWithValue("@invoicetype", "LSales");
                cmd.Parameters.AddWithValue("@DcNo", TripSno);
                cmd.Parameters.AddWithValue("@indentno", IndentNo);
                vdbmngr.insert(cmd);
            }
            cmd = new MySqlCommand("update tripdata set  DCNO=@DCNO,taxdcno=@taxdcno,DC_Type=@DC_Type where sno=@tripsno");
            cmd.Parameters.AddWithValue("@DCNO", TripDCNo);
            cmd.Parameters.AddWithValue("@taxdcno", taxtripdcno);
            cmd.Parameters.AddWithValue("@tripsno", TripSno);
            cmd.Parameters.AddWithValue("@DC_Type", "0");
            vdbmngr.Update(cmd);
            foreach (orderdetail o in obj.data)
            {
                if (o.Productsno != null)
                {
                    if (o.Qty != "0")
                    {
                        cmd = new MySqlCommand("insert into tripsubdata (Tripdata_Sno,ProductId,Qty,DeliverQty)values(@Tripdata_Sno,@ProductId,@Qty,@deliverqty)");
                        cmd.Parameters.AddWithValue("@Tripdata_Sno", TripSno);
                        cmd.Parameters.AddWithValue("@ProductId", o.Productsno);
                        float qty;
                        float.TryParse(o.Qty, out qty);
                        float manuftreming_qty = 0;
                        float.TryParse(o.RemainingQty, out manuftreming_qty);
                        cmd.Parameters.AddWithValue("@Qty", qty);
                        float delqty = 0;
                        cmd.Parameters.AddWithValue("@deliverqty", delqty);
                        vdbmngr.insert(cmd);
                        string AunitPrice = "0";
                        double UnitCost = 0;
                        string ProductName = "";
                        if (SalesType == "Free Sale")
                        {
                            if (BranchType == "SALES OFFICE")
                            {
                                cmd = new MySqlCommand("update branchProducts set BranchQty=BranchQty-@BranchQty where Branch_sno=@BranchID and Product_sno=@ProductID");
                                cmd.Parameters.AddWithValue("@BranchQty", delqty);
                                cmd.Parameters.AddWithValue("@ProductID", o.Productsno);
                                cmd.Parameters.AddWithValue("@BranchID", context.Session["branch"].ToString());
                                vdbmngr.Update(cmd);
                            }
                        }
                        else
                        {
                            cmd = new MySqlCommand("SELECT branchproducts.unitprice, branchproducts.product_sno, productsdata.Qty, productsdata.Units FROM branchproducts INNER JOIN productsdata ON branchproducts.product_sno = productsdata.sno WHERE (branchproducts.branch_sno = @BranchID) and (branchproducts.product_sno=@sno) and (branchproducts.flag=@flag)");
                            cmd.Parameters.AddWithValue("@sno", o.Productsno);
                            cmd.Parameters.AddWithValue("@BranchID", BranchID);
                            cmd.Parameters.AddWithValue("@flag", 1);
                            DataTable dtBranchProduct = vdbmngr.SelectQuery(cmd).Tables[0];
                            if (dtBranchProduct.Rows.Count > 0)
                            {
                                AunitPrice = dtBranchProduct.Rows[0]["unitprice"].ToString();
                            }
                            if (AunitPrice == "0")
                            {
                                cmd = new MySqlCommand("SELECT productsdata.UnitPrice,productsdata.Qty, productsdata.Units, branchproducts.product_sno, branchproducts.unitprice AS Bunitprice , productsdata.ProductName FROM productsdata INNER JOIN branchproducts ON productsdata.sno = branchproducts.product_sno INNER JOIN branchmappingtable ON branchproducts.branch_sno = branchmappingtable.SuperBranch WHERE (branchmappingtable.SubBranch = @BranchID) AND (branchproducts.product_sno = @Sno)");
                                cmd.Parameters.AddWithValue("@sno", o.Productsno);
                                cmd.Parameters.AddWithValue("@BranchID", BranchID);
                                DataTable dtProduct = vdbmngr.SelectQuery(cmd).Tables[0];
                                if (dtProduct.Rows.Count > 0)
                                {
                                    string BranchUnitPrice = dtProduct.Rows[0]["BUnitPrice"].ToString();
                                    if (BranchUnitPrice != "0")
                                    {
                                        AunitPrice = dtProduct.Rows[0]["BUnitPrice"].ToString();
                                    }
                                    else
                                    {
                                        AunitPrice = dtProduct.Rows[0]["UnitPrice"].ToString();
                                    }
                                }
                                else
                                {
                                    if (SalesType == "Local Sale")
                                    {
                                        cmd = new MySqlCommand(" SELECT productsdata.sno, productsdata.ProductName, productsdata.Units, branchproducts.unitprice, invmaster.Qty, products_category.Categoryname FROM branchproducts INNER JOIN productsdata ON branchproducts.product_sno = productsdata.sno INNER JOIN invmaster ON productsdata.Inventorysno = invmaster.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno WHERE (branchproducts.branch_sno = @branchhsno) and (branchproducts.product_sno=@Sno) ORDER BY branchproducts.Rank");
                                        cmd.Parameters.AddWithValue("@Sno", o.Productsno);
                                        cmd.Parameters.AddWithValue("@branchhsno", BranchID);
                                    }
                                    else
                                    {
                                        cmd = new MySqlCommand("SELECT  productsdata.sno, productsdata.ProductName, productsdata.Units, branchproducts.unitprice, invmaster.Qty, products_category.Categoryname FROM branchproducts INNER JOIN productsdata ON branchproducts.product_sno = productsdata.sno INNER JOIN invmaster ON productsdata.Inventorysno = invmaster.sno INNER JOIN branchdata ON branchproducts.branch_sno = branchdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno WHERE (branchdata.SalesOfficeID = @SOID) and (branchproducts.product_sno=@Sno) and (branchdata.SalesType=@SalesType)  ORDER BY branchproducts.Rank");
                                        cmd.Parameters.AddWithValue("@Sno", o.Productsno);
                                        cmd.Parameters.AddWithValue("@SalesType", "20");
                                        cmd.Parameters.AddWithValue("@SOID", context.Session["branch"].ToString());// here write code
                                    }
                                    DataTable dtbrnchprdts = vdbmngr.SelectQuery(cmd).Tables[0];
                                    if (dtbrnchprdts.Rows.Count > 0)
                                    {
                                        AunitPrice = dtbrnchprdts.Rows[0]["unitprice"].ToString();
                                        ProductName = dtbrnchprdts.Rows[0]["ProductName"].ToString();
                                    }
                                }
                            }
                            cmd = new MySqlCommand("insert into indents_subtable (IndentNo,Product_sno,Status,unitQty,UnitCost,OTripId,DtripID,DeliveryQty)values(@IndentNo,@Product_sno,@Status,@unitQty,@UnitCost,@OTripId,@DtripID,@DeliveryQty)");
                            cmd.Parameters.AddWithValue("@IndentNo", IndentNo);
                            cmd.Parameters.AddWithValue("@Product_sno", o.Productsno);
                            double.TryParse(AunitPrice, out UnitCost);
                            UnitCost = Math.Round(UnitCost, 2);
                            cmd.Parameters.AddWithValue("@UnitCost", UnitCost);
                            double unitQty = 0;
                            double DeliveryQty = 0;
                            double.TryParse(o.Qty, out DeliveryQty);
                            DeliveryQty = Math.Round(DeliveryQty, 2);
                            cmd.Parameters.AddWithValue("@unitQty", unitQty);
                            cmd.Parameters.AddWithValue("@DeliveryQty", DeliveryQty);
                            cmd.Parameters.AddWithValue("@Status", "Delivered");
                            cmd.Parameters.AddWithValue("@OTripId", TripSno);
                            cmd.Parameters.AddWithValue("@DtripID", TripSno);
                            double amount = DeliveryQty * UnitCost;
                            remarks += ProductName + ",Qty=" + DeliveryQty.ToString() + ",Amount=" + amount.ToString() + ",";
                            totalamount += amount;
                            if (DeliveryQty != 0.0)
                            {
                                vdbmngr.insert(cmd);
                            }
                        }
                    }
                }
            }

            foreach (inventorydetail iv in obj.invdata)
            {
                if (iv.InventorySno != null)
                {
                    if (iv.Qty != "")
                    {
                        cmd = new MySqlCommand("insert into tripinvdata (Tripdata_Sno,invid,Qty,Remaining)values(@Tripdata_Sno,@invId,@Qty,@remaining)");
                        cmd.Parameters.AddWithValue("@Tripdata_Sno", TripSno);
                        cmd.Parameters.AddWithValue("@invId", iv.InventorySno);
                        float qty;
                        float.TryParse(iv.Qty, out qty);
                        cmd.Parameters.AddWithValue("@Qty", qty);
                        cmd.Parameters.AddWithValue("@remaining", qty);
                        if (qty != 0.0)
                        {
                            vdbmngr.insert(cmd);
                        }
                    }
                }
            }
            string msg = "Local Sale Successfully Saved";
            string response = GetJson(msg);
            context.Response.Write(response);
        }

        catch (Exception ex)
        {
            string msg = ex.Message;
            string response = GetJson(msg);
            context.Response.Write(response);
        }
        #endregion
    }
    private void btnRoutesSaveClick(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            var js = new JavaScriptSerializer();
            string Username = context.Session["userdata_sno"].ToString();
            string routelevel = context.Session["LevelType"].ToString();
            var title1 = context.Request.Params[1];
            Orders obj = js.Deserialize<Orders>(title1);
            string routenam = obj.routename;
            string btnSave = obj.btnSave;
            string Name = obj.Name;
            DateTime ServerDateCurrentdate = VehicleDBMgr.GetTime(vdbmngr.conn);
            if (btnSave == "Save")
            {
                cmd = new MySqlCommand("insert into branchroutes (RouteName,RouteLevel,UserID,BranchID,srname,flag)values(@RouteName,@RouteLevel,@UserID,@BranchID,@srname,@flag)");
                cmd.Parameters.AddWithValue("@RouteName", routenam);
                cmd.Parameters.AddWithValue("@RouteLevel", routelevel);
                cmd.Parameters.AddWithValue("@UserID", Username);
                cmd.Parameters.AddWithValue("@srname", Name);
                cmd.Parameters.AddWithValue("@flag", true);
                cmd.Parameters.AddWithValue("@BranchID", context.Session["branch"].ToString());
                vdbmngr.insert(cmd);
                cmd = new MySqlCommand("insert into modifiedroutes (RouteName,RouteLevel,UserID,BranchID,flag)values(@RouteName,@RouteLevel,@UserID,@BranchID,@flag)");
                cmd.Parameters.AddWithValue("@RouteName", routenam);
                cmd.Parameters.AddWithValue("@RouteLevel", routelevel);
                cmd.Parameters.AddWithValue("@UserID", Username);
                cmd.Parameters.AddWithValue("@flag", true);
                cmd.Parameters.AddWithValue("@BranchID", context.Session["branch"].ToString());
                vdbmngr.insert(cmd);
                cmd = new MySqlCommand("Select SNo from branchroutes where RouteName=@RouteName and RouteLevel=@RouteLevel and UserID=@UserID ");
                cmd.Parameters.AddWithValue("@RouteName", routenam);
                cmd.Parameters.AddWithValue("@RouteLevel", routelevel);
                cmd.Parameters.AddWithValue("@UserID", Username);
                DataTable dt = vdbmngr.SelectQuery(cmd).Tables[0];
                int Sno = (int)dt.Rows[0]["Sno"];
                int i = 1;
                foreach (string o in obj.dataarr)
                {
                    cmd = new MySqlCommand("insert into branchroutesubtable (RefNo,Rank,LevelType,BranchID)values(@refno,@rank,@LevelType,@BranchID)");
                    cmd.Parameters.AddWithValue("@refno", Sno);
                    cmd.Parameters.AddWithValue("@rank", i++);
                    cmd.Parameters.AddWithValue("@LevelType", routelevel);
                    cmd.Parameters.AddWithValue("@BranchId", o);
                    vdbmngr.insert(cmd);
                    cmd = new MySqlCommand("update branchdata set RouteID=@routeid where sno=@branchid");
                    cmd.Parameters.AddWithValue("@routeid", Sno);
                    cmd.Parameters.AddWithValue("@branchid", o);
                    vdbmngr.Update(cmd);
                    cmd = new MySqlCommand("insert into modifiedroutesubtable (RefNo,Rank,LevelType,BranchID,CDate)values(@refno,@rank,@LevelType,@BranchID,@CDate)");
                    cmd.Parameters.AddWithValue("@refno", Sno);
                    cmd.Parameters.AddWithValue("@rank", i++);
                    cmd.Parameters.AddWithValue("@LevelType", routelevel);
                    cmd.Parameters.AddWithValue("@BranchId", o);
                    cmd.Parameters.AddWithValue("@CDate", GetLowDate(ServerDateCurrentdate));
                    vdbmngr.insert(cmd);
                }
                foreach (string indent in obj.divindentArray)
                {
                    cmd = new MySqlCommand("insert into routeindents (RouteID,IndentType)values(@RouteID,@IndentType)");
                    cmd.Parameters.AddWithValue("@RouteID", Sno);
                    cmd.Parameters.AddWithValue("@IndentType", indent);
                    vdbmngr.insert(cmd);
                }
                var jsonSerializer = new JavaScriptSerializer();
                var jsonString = String.Empty;
                context.Request.InputStream.Position = 0;
                using (var inputStream = new StreamReader(context.Request.InputStream))
                {
                    jsonString = inputStream.ReadToEnd();
                }
                List<string> MsgList = new List<string>();
                string msg = "Data Successfully Saved";
                MsgList.Add(msg);
                string response = GetJson(MsgList);
                context.Response.Write(response);
            }
            else
            {
                string sno = obj.refno;
                cmd = new MySqlCommand("update  branchroutes set srname=@srname, RouteName=@RouteName,RouteLevel=@RouteLevel WHERE UserID=@UserID and Sno=@sno");
                cmd.Parameters.AddWithValue("@srname", Name);
                cmd.Parameters.AddWithValue("@RouteName", routenam);
                cmd.Parameters.AddWithValue("@RouteLevel", routelevel);
                cmd.Parameters.AddWithValue("@UserID", Username);
                cmd.Parameters.AddWithValue("@sno", sno);
                vdbmngr.Update(cmd);
                cmd = new MySqlCommand("delete from  branchroutesubtable Where RefNo=@RefNo");
                cmd.Parameters.AddWithValue("@RefNo", sno);
                vdbmngr.Delete(cmd);
                cmd = new MySqlCommand("delete from  routeindents Where RouteID=@RefNo");
                cmd.Parameters.AddWithValue("@RefNo", sno);
                vdbmngr.Delete(cmd);
                int i = 1;
                foreach (string o in obj.dataarr)
                {
                    cmd = new MySqlCommand("insert into branchroutesubtable (RefNo,Rank,LevelType,BranchID)values(@refno,@rank,@LevelType,@BranchID)");
                    cmd.Parameters.AddWithValue("@refno", sno);
                    cmd.Parameters.AddWithValue("@rank", i++);
                    cmd.Parameters.AddWithValue("@LevelType", routelevel);
                    cmd.Parameters.AddWithValue("@BranchId", o);
                    vdbmngr.insert(cmd);
                }
                foreach (string o in obj.div_check_Array)
                {
                    cmd = new MySqlCommand("update modifiedroutesubtable set RefNo=@refno,Rank=@rank,LevelType=@LevelType, CDate=@CDate, EDate=NULL where BranchID=@BranchID and CDate=@CDate");
                    cmd.Parameters.AddWithValue("@refno", sno);
                    cmd.Parameters.AddWithValue("@rank", i++);
                    cmd.Parameters.AddWithValue("@LevelType", routelevel);
                    cmd.Parameters.AddWithValue("@BranchId", o);
                    cmd.Parameters.AddWithValue("@cdate", GetLowDate(ServerDateCurrentdate));
                    if (vdbmngr.Update(cmd) == 0)
                    {
                        cmd = new MySqlCommand("insert into modifiedroutesubtable (RefNo,Rank,LevelType,BranchID,CDate)values(@refno,@rank,@LevelType,@BranchID,@cdate)");
                        cmd.Parameters.AddWithValue("@refno", sno);
                        cmd.Parameters.AddWithValue("@rank", i++);
                        cmd.Parameters.AddWithValue("@LevelType", routelevel);
                        cmd.Parameters.AddWithValue("@BranchId", o);
                        cmd.Parameters.AddWithValue("@cdate", GetLowDate(ServerDateCurrentdate));
                        vdbmngr.insert(cmd);
                    }
                }
                foreach (string o in obj.div_uncheck_Array)
                {
                    cmd = new MySqlCommand("update modifiedroutesubtable set EDate=@EDate where BranchID=@BranchID and EDate IS NULL");
                    cmd.Parameters.AddWithValue("@EDate", GetLowDate(ServerDateCurrentdate));
                    cmd.Parameters.AddWithValue("@BranchID", o);
                    if (vdbmngr.Update(cmd) == 0)
                    {
                        cmd = new MySqlCommand("insert into modifiedroutesubtable (RefNo,Rank,LevelType,BranchID,CDate)values(@refno,@rank,@LevelType,@BranchID,@cdate)");
                        cmd.Parameters.AddWithValue("@refno", sno);
                        cmd.Parameters.AddWithValue("@rank", i++);
                        cmd.Parameters.AddWithValue("@LevelType", routelevel);
                        cmd.Parameters.AddWithValue("@BranchId", o);
                        cmd.Parameters.AddWithValue("@cdate", GetLowDate(ServerDateCurrentdate));
                        vdbmngr.insert(cmd);
                    }
                }
                foreach (string indent in obj.divindentArray)
                {
                    cmd = new MySqlCommand("insert into routeindents (RouteID,IndentType)values(@RouteID,@IndentType)");
                    cmd.Parameters.AddWithValue("@RouteID", sno);
                    cmd.Parameters.AddWithValue("@IndentType", indent);
                    vdbmngr.insert(cmd);
                }
                var jsonSerializer = new JavaScriptSerializer();
                var jsonString = String.Empty;
                context.Request.InputStream.Position = 0;
                using (var inputStream = new StreamReader(context.Request.InputStream))
                {
                    jsonString = inputStream.ReadToEnd();
                }
                List<string> MsgList = new List<string>();
                string msg = "Data Successfully Updated";
                MsgList.Add(msg);
                string response = GetJson(MsgList);
                context.Response.Write(response);
            }
        }
        catch (Exception ex)
        {
            List<string> MsgList = new List<string>();
            string msg = ex.ToString();
            MsgList.Add(msg);
            string response = GetJson(MsgList);
            context.Response.Write(response);
        }
    }
    private void btnRoutesDeleteClick(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            string sno = context.Request["refno"];
            string Username = context.Session["userdata_sno"].ToString();
            cmd = new MySqlCommand("delete from branchroutes  WHERE UserID=@UserID and Sno=@sno");
            cmd.Parameters.AddWithValue("@UserID", Username);
            cmd.Parameters.AddWithValue("@sno", sno);
            vdbmngr.Delete(cmd);
            cmd = new MySqlCommand("delete from  branchroutesubtable Where RefNo=@RefNo");
            cmd.Parameters.AddWithValue("@RefNo", sno);
            vdbmngr.Delete(cmd);
            cmd = new MySqlCommand("delete from routeindents where RouteID=@routeid");
            cmd.Parameters.AddWithValue("@routeid", sno);
            vdbmngr.Delete(cmd);
            List<string> MsgList = new List<string>();
            string msg = "Data Successfully Deleted";
            MsgList.Add(msg);
            string response = GetJson(MsgList);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string msg = ex.Message;
            string response = GetJson(msg);
            context.Response.Write(response);
        }
    }
    private void updateroutestogrid(HttpContext context)
    {
        string ltype = context.Session["LevelType"].ToString();
        try
        {
            vdbmngr = new VehicleDBMgr();
            Dictionary<string, routesgrid> routesdesc = new Dictionary<string, routesgrid>();
            if (ltype == "MAdmin")
            {
                cmd = new MySqlCommand("SELECT branchroutesubtable.RefNo,branchroutes.srname, branchroutes.RouteName, branchroutes.UserID, branchroutesubtable.BranchID, branchdata.BranchName FROM branchroutes INNER JOIN branchroutesubtable ON branchroutes.Sno = branchroutesubtable.RefNo INNER JOIN branchdata ON branchroutesubtable.BranchID = branchdata.sno WHERE (branchroutes.UserID = @username)");
                cmd.Parameters.AddWithValue("@username", context.Session["userdata_sno"].ToString());
            }
            else
            {
                string isno = context.Session["userdata_sno"].ToString();
                string bid = context.Session["branch"].ToString();
                cmd = new MySqlCommand("SELECT result.sno, branchroutes.RouteName,branchroutes.srname, branchroutes.UserID, branchroutesubtable.RefNo, branchroutesubtable.BranchID, branchdata_2.BranchName FROM (SELECT  branchdata.BranchName, branchdata.sno FROM branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno WHERE  (branchdata_1.SalesOfficeID = @SOID) AND (branchdata.SalesType IS NOT NULL) OR (branchdata.SalesType IS NOT NULL) AND (branchdata.sno = @BranchID)) result INNER JOIN branchroutes ON result.sno = branchroutes.BranchID INNER JOIN branchroutesubtable ON branchroutes.Sno = branchroutesubtable.RefNo INNER JOIN branchdata branchdata_2 ON branchroutesubtable.BranchID = branchdata_2.sno WHERE (branchroutes.UserID = @username) AND (branchroutes.RouteLevel = @RouteLevel)");
                cmd.Parameters.AddWithValue("@username", context.Session["userdata_sno"].ToString());
                cmd.Parameters.AddWithValue("@BranchID", context.Session["branch"].ToString());
                cmd.Parameters.AddWithValue("@SOID", context.Session["branch"].ToString());
                cmd.Parameters.AddWithValue("@RouteLevel", ltype);
            }

            DataTable dt = vdbmngr.SelectQuery(cmd).Tables[0];
            foreach (DataRow dr in dt.Rows)
            {
                if (!routesdesc.ContainsKey(dr["RouteName"].ToString()))
                {
                    routesgrid routesobj = new routesgrid();
                    routesobj.RefNo = dr["RefNo"].ToString();
                    routesobj.RouteName = dr["RouteName"].ToString();
                    routesobj.srname = dr["srname"].ToString();
                    routesobj.DistributorName = dr["BranchName"].ToString();
                    cmd = new MySqlCommand("SELECT branchroutes.RouteName, routeindents.IndentType FROM branchroutes INNER JOIN routeindents ON branchroutes.Sno = routeindents.RouteID WHERE (routeindents.RouteID = @routeid)");
                    cmd.Parameters.AddWithValue("@routeid", dr["RefNo"].ToString());
                    DataTable dtindents = vdbmngr.SelectQuery(cmd).Tables[0];
                    foreach (DataRow drindents in dtindents.Rows)
                    {
                        routesobj.Indenttype += drindents["IndentType"].ToString() + " ";
                    }
                    routesdesc.Add(dr["RouteName"].ToString(), routesobj);
                }
                else
                {
                    routesgrid routesobj = new routesgrid();
                    routesobj = routesdesc[dr["RouteName"].ToString()];
                    routesobj.DistributorName += "=" + dr["BranchName"].ToString();
                }
            }
            string response = GetJson(routesdesc);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string msg = ex.Message;
            string response = GetJson(msg);
            context.Response.Write(response);
        }
    }
    public class routesgrid
    {
        public string RefNo { get; set; }
        public string RouteName { get; set; }
        public string DistributorName { get; set; }
        public string Indenttype { get; set; }
        public string BranchName { get; set; }
        public string Mainroute { get; set; }
        public string flag { get; set; }
        public string DespDate { get; set; }
        public string DespType { get; set; }
        public string DespTime { get; set; }
        public string IndTime { get; set; }
        public string srname { get; set; }
        public string DispMode { get; set; }
    }
    public void Agent_profile_pic_files_upload(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            if (context.Request.Files.Count > 0)
            {
                string sno = context.Request["sno"];
                HttpFileCollection files = context.Request.Files;
                for (int i = 0; i < files.Count; i++)
                {
                    HttpPostedFile file = files[i];
                    string[] extension = file.FileName.Split('.');
                    string upload_filename = sno + "_profilepic_" + sno + ".jpeg";// +extension[extension.Length - 1];
                    if (UploadToFTP(file, upload_filename))
                    {
                        MySqlCommand cmd = new MySqlCommand("update branchdata set Agent_PIC=@Agent_PIC where sno=@sno");
                        cmd.Parameters.AddWithValue("@sno", sno);
                        cmd.Parameters.AddWithValue("@Agent_PIC", upload_filename);
                        vdbmngr.Update(cmd);
                    }
                }
                context.Response.ContentType = "text/plain";
                context.Response.Write("File Uploaded Successfully!");
            }
        }
        catch (Exception ex)
        {
            List<string> MsgList = new List<string>();
            string msg = ex.ToString();
            MsgList.Add(msg);
            string response = GetJson(MsgList);
            context.Response.Write(response);
        }
    }
    public void Employee_profile_pic_files_upload(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            if (context.Request.Files.Count > 0)
            {
                string sno = context.Request["sno"];
                HttpFileCollection files = context.Request.Files;
                for (int i = 0; i < files.Count; i++)
                {
                    HttpPostedFile file = files[i];
                    string[] extension = file.FileName.Split('.');
                    string upload_filename = sno + "_profilepic_" + sno + ".jpeg";// +extension[extension.Length - 1];
                    if (UploadToFTP(file, upload_filename))
                    {
                        MySqlCommand cmd = new MySqlCommand("update empmanage set Emp_PIC=@Emp_PIC where sno=@sno");
                        cmd.Parameters.AddWithValue("@sno", sno);
                        cmd.Parameters.AddWithValue("@Emp_PIC", upload_filename);
                        vdbmngr.Update(cmd);
                    }
                }
                context.Response.ContentType = "text/plain";
                context.Response.Write("File Uploaded Successfully!");
            }
        }
        catch (Exception ex)
        {
            List<string> MsgList = new List<string>();
            string msg = ex.ToString();
            MsgList.Add(msg);
            string response = GetJson(MsgList);
            context.Response.Write(response);
        }
    }
    public void save_Offers(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            var js = new JavaScriptSerializer();
            string Username = context.Session["UserSno"].ToString();
            string routelevel = context.Session["LevelType"].ToString();
            var title1 = context.Request.Params[1];
            Orders obj = js.Deserialize<Orders>(title1);
            string btnSave = obj.btnSave;
            string OfferName = obj.OfferName;
            string Offerfor = obj.Offerfor;
            string prdtqtyifabove = obj.prdtqtyifabove;
            string offerprdtqty = obj.offerprdtqty;
            DateTime ServerDateCurrentdate = VehicleDBMgr.GetTime(vdbmngr.conn);

            cmd = new MySqlCommand("INSERT INTO offers (offer_name,offer_from,offer_to, offer_type, salesofficeid, create_date, created_by, Status) VALUES (@offer_name,@offer_from,@offer_to, @offer_type, @salesofficeid, @create_date, @created_by, @Status)");
            cmd.Parameters.AddWithValue("@salesofficeid", obj.SalesOfficeID);
            cmd.Parameters.AddWithValue("@create_date", ServerDateCurrentdate);
            cmd.Parameters.AddWithValue("@offer_from", ServerDateCurrentdate);
            cmd.Parameters.AddWithValue("@offer_to", ServerDateCurrentdate);
            cmd.Parameters.AddWithValue("@Status", "1");
            cmd.Parameters.AddWithValue("@offer_type", Offerfor);
            cmd.Parameters.AddWithValue("@offer_name", OfferName);
            cmd.Parameters.AddWithValue("@created_by", Username);
            long offersno = vdbmngr.insertScalar(cmd);
            foreach (string o in obj.Productlist)
            {
                foreach (string item in obj.Offer_Productlist)
                {
                    cmd = new MySqlCommand("INSERT INTO offers_sub (idoffers, product_id, offer_product_id, qty_if_above, offer_qty,present_price) VALUES (@idoffers, @product_id, @offer_product_id, @qty_if_above, @offer_qty,@present_price)");
                    cmd.Parameters.AddWithValue("@idoffers", offersno);
                    cmd.Parameters.AddWithValue("@product_id", o);
                    cmd.Parameters.AddWithValue("@offer_product_id", item);
                    cmd.Parameters.AddWithValue("@qty_if_above", prdtqtyifabove);
                    cmd.Parameters.AddWithValue("@offer_qty", offerprdtqty);
                    cmd.Parameters.AddWithValue("@present_price", "0");
                    vdbmngr.insert(cmd);
                }
            }
            List<string> MsgList = new List<string>();
            string msg = "Offer Saved Successfully";
            MsgList.Add(msg);
            string response = GetJson(MsgList);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            List<string> MsgList = new List<string>();
            string msg = ex.ToString();
            MsgList.Add(msg);
            string response = GetJson(MsgList);
            context.Response.Write(response);
        }

    }
    public void save_Offers_assignment(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            var js = new JavaScriptSerializer();
            string Username = context.Session["UserSno"].ToString();
            string routelevel = context.Session["LevelType"].ToString();
            var title1 = context.Request.Params[1];
            Orders obj = js.Deserialize<Orders>(title1);
            string btnSave = obj.btnSave;
            string OfferName = obj.OfferName;
            string Offerfor = obj.Offerfor;
            string prdtqtyifabove = obj.prdtqtyifabove;
            string offerprdtqty = obj.offerprdtqty;
            string Offerfrom = obj.Offerfrom;
            string Offerto = obj.Offerto;
            string SalesOfficeID = obj.SalesOfficeID;
            int offertype = 0;
            DateTime ServerDateCurrentdate = VehicleDBMgr.GetTime(vdbmngr.conn);

            cmd = new MySqlCommand("INSERT INTO offers_assignment (offers_assignment_name, offer_type, offer_from, offer_to, created_date, created_by, status,salesoffice_id) VALUES (@offers_assignment_name, @offer_type, @offer_from, @offer_to, @created_date, @created_by, @status,@salesoffice_id)");
            cmd.Parameters.AddWithValue("@offers_assignment_name", OfferName);
            cmd.Parameters.AddWithValue("@created_date", ServerDateCurrentdate);
            cmd.Parameters.AddWithValue("@offer_from", Offerfrom);
            cmd.Parameters.AddWithValue("@offer_to", Offerto);
            cmd.Parameters.AddWithValue("@Status", "1");
            if (Offerfor == "Sales Office")
            {
                offertype = 1;
            }
            if (Offerfor == "Routes")
            {
                offertype = 2;
            }
            if (Offerfor == "Agents")
            {
                offertype = 3;
            }
            cmd.Parameters.AddWithValue("@offer_type", offertype);
            cmd.Parameters.AddWithValue("@offer_name", OfferName);
            cmd.Parameters.AddWithValue("@created_by", Username);
            cmd.Parameters.AddWithValue("@salesoffice_id", SalesOfficeID);
            long offersno = vdbmngr.insertScalar(cmd);
            foreach (string o in obj.dataarr)
            {

                cmd = new MySqlCommand("INSERT INTO offers_assignment_sub (idoffers_assignment, id_offers) VALUES (@idoffers_assignment, @id_offers)");
                cmd.Parameters.AddWithValue("@idoffers_assignment", offersno);
                cmd.Parameters.AddWithValue("@id_offers", o);
                vdbmngr.insert(cmd);
            }
            List<string> MsgList = new List<string>();
            string msg = "Offer Saved Successfully";
            MsgList.Add(msg);
            string response = GetJson(MsgList);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            List<string> MsgList = new List<string>();
            string msg = ex.ToString();
            MsgList.Add(msg);
            string response = GetJson(MsgList);
            context.Response.Write(response);
        }
    }
    public class initializedataclass
    {
        public string sno { get; set; }
        public string subcategorynam { get; set; }
        public string subcategorynames { get; set; }
        public string SubCat_sno { get; set; }
        public string ProductName { get; set; }
        public string productname { get; set; }
        public string Qty { get; set; }
        public string salestype { get; set; }
        public string categoryname { get; set; }
        public string Units { get; set; }
        public string UnitPrice { get; set; }
        public string unitprice { get; set; }
        public string branchname { get; set; }
        public string branchtype { get; set; }
        public string RegionName { get; set; }
        public string SubregionName { get; set; }
        public string RouteName { get; set; }
        public string Distributorname { get; set; }
        public string InvName { get; set; }
        public string Departmentname { get; set; }
        public string empname { get; set; }
    }
    private void intialize_productsmanagement_subcatgry(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            List<initializedataclass> initializedatalist = new List<initializedataclass>();
            string FormType = context.Request["FormType"];
            // string FormType = "NewProductMaster";
            if (FormType == "NewProductMaster")
            {
                cmd = new MySqlCommand("select sno,description AS Categoryname from products_category where flag=@flag and userdata_sno=@username AND tempcatsno IS NOT NULL");
                cmd.Parameters.AddWithValue("@username", context.Session["userdata_sno"].ToString());
                cmd.Parameters.AddWithValue("@flag", "1");
            }
            else
            {
                cmd = new MySqlCommand("select sno,Categoryname from products_category where flag=@flag and userdata_sno=@username");
                cmd.Parameters.AddWithValue("@username", context.Session["userdata_sno"].ToString());
                cmd.Parameters.AddWithValue("@flag", "1");
            }
            foreach (DataRow dr in vdbmngr.SelectQuery(cmd).Tables[0].Rows)
            {
                initializedataclass initializedata = new initializedataclass();
                initializedata.sno = dr["sno"].ToString();
                initializedata.categoryname = dr["Categoryname"].ToString();
                initializedatalist.Add(initializedata);
            }
            if (initializedatalist != null)
            {
                string response = GetJson(initializedatalist);
                context.Response.Write(response);
            }
        }
        catch (Exception ex)
        {
            string msg = ex.Message;
            string response = GetJson(msg);
            context.Response.Write(response);
        }
    }
    private void intialize_productsmanagement_products(HttpContext context)
    {

        try
        {
            vdbmngr = new VehicleDBMgr();
            List<initializedataclass> initializedatalist = new List<initializedataclass>();
            string FormType = context.Request["FormType"];
            if (FormType == "NewProductMaster")
            {
                cmd = new MySqlCommand("select tempcatsno AS sno,description AS Categoryname from products_category where flag=@flag and userdata_sno=@username AND tempcatsno IS NOT NULL");
                cmd.Parameters.AddWithValue("@username", context.Session["userdata_sno"].ToString());
                cmd.Parameters.AddWithValue("@flag", "1");
            }
            else
            {
                cmd = new MySqlCommand("select sno,Categoryname from products_category where flag=@flag and userdata_sno=@username");
                cmd.Parameters.AddWithValue("@username", context.Session["userdata_sno"].ToString());
                cmd.Parameters.AddWithValue("@flag", "1");
            }
            foreach (DataRow dr in vdbmngr.SelectQuery(cmd).Tables[0].Rows)
            {
                initializedataclass initializedata = new initializedataclass();
                initializedata.sno = dr["sno"].ToString();
                initializedata.categoryname = dr["Categoryname"].ToString();
                initializedatalist.Add(initializedata);
            }
            if (FormType == "NewProductMaster")
            {
                cmd = new MySqlCommand("SELECT   productsdata.ifdflag, productsdata.description, productsdata.invqty, productsdata.pieces, productsdata.specification, productsdata.materialtype, productsdata.PerUnitPrice, products_subcategory.SubCatName,products_subcategory.sno AS SubCatsno, productsdata.images, productsdata.hsncode, productsdata.igst, productsdata.sgst, productsdata.cgst, productsdata.gsttaxcategory, products_category.Categoryname,products_category.sno AS categorysno, productsdata.tproduct, productsdata.Itemcode, productsdata.ProductName, productsdata.sno, productsdata.Qty, productsdata.Units, productsdata.UnitPrice, productsdata.Flag, products_subcategory.category_sno, productsdata.SubCat_sno, productsdata.VatPercent, invmaster.InvName, productsdata.tempsubcatsno, products_category.tempcatsno,products_subcategory.tempsub_catsno, products_category.description AS Expr1, products_subcategory.description AS Expr2 FROM  products_category INNER JOIN products_subcategory ON products_category.tempcatsno = products_subcategory.tempcatsno INNER JOIN productsdata ON products_subcategory.tempsub_catsno = productsdata.tempsubcatsno INNER JOIN invmaster ON productsdata.Inventorysno = invmaster.sno");
                cmd.Parameters.AddWithValue("@username", context.Session["userdata_sno"].ToString());
            }
            else
            {
                cmd = new MySqlCommand("SELECT products_category.Categoryname, products_subcategory.SubCatName,products_subcategory.category_sno,products_subcategory.sno, productsdata.*  FROM productsdata RIGHT OUTER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno RIGHT OUTER JOIN products_category ON products_subcategory.category_sno = products_category.sno WHERE (products_category.flag<>0) AND (products_subcategory.Flag<>0) AND products_category.userdata_sno=@username");
                cmd.Parameters.AddWithValue("@username", context.Session["userdata_sno"].ToString());
            }
            DataTable dt = vdbmngr.SelectQuery(cmd).Tables[0];
            context.Session["getcategorynames"] = dt;
            if (initializedatalist != null)
            {
                string response = GetJson(initializedatalist);
                context.Response.Write(response);
            }
        }
        catch (Exception ex)
        {
            string msg = ex.Message;
            string response = GetJson(msg);
            context.Response.Write(response);
        }
    }
    private void intialize_Prdt_inventory(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            List<initializedataclass> initializedatalist = new List<initializedataclass>();
            cmd = new MySqlCommand("select sno,InvName from invmaster where flag=@flag and Userdata_sno=@username");
            cmd.Parameters.AddWithValue("@username", context.Session["userdata_sno"].ToString());
            cmd.Parameters.AddWithValue("@flag", "1");
            foreach (DataRow dr in vdbmngr.SelectQuery(cmd).Tables[0].Rows)
            {
                initializedataclass initializedata = new initializedataclass();
                initializedata.sno = dr["sno"].ToString();
                initializedata.categoryname = dr["InvName"].ToString();
                initializedatalist.Add(initializedata);
            }
            if (initializedatalist != null)
            {
                string response = GetJson(initializedatalist);
                context.Response.Write(response);
            }
        }
        catch (Exception ex)
        {

        }
    }
    private void get_subcategory_data(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            List<initializedataclass> initializedatalist = new List<initializedataclass>();
            string catgryname = context.Request["cmbcatgryname"];
            string FormType = context.Request["FormType"];

            DataTable productdata = (DataTable)context.Session["getcategorynames"];
            DataTable categorys = new DataTable();
            if (FormType == "NewProductMaster")
            {
                categorys = productdata.DefaultView.ToTable(true, "tempcatsno", "Expr2", "tempsub_catsno");
                DataRow[] subcatgry = categorys.Select("tempcatsno=" + catgryname + "");
                foreach (DataRow dr in subcatgry)
                {
                    initializedataclass initializedata = new initializedataclass();
                    initializedata.subcategorynames = dr["Expr2"].ToString();
                    initializedata.sno = dr["tempsub_catsno"].ToString();
                    initializedatalist.Add(initializedata);
                }
            }
            else
            {
                categorys = productdata.DefaultView.ToTable(true, "category_sno", "SubCatName", "sno");
                DataRow[] subcatgry = categorys.Select("category_sno=" + catgryname + "");
                foreach (DataRow dr in subcatgry)
                {
                    initializedataclass initializedata = new initializedataclass();
                    initializedata.subcategorynames = dr["SubCatName"].ToString();
                    initializedata.sno = dr["sno"].ToString();
                    initializedatalist.Add(initializedata);
                }
            }
            if (initializedatalist != null)
            {
                string response = GetJson(initializedatalist);
                context.Response.Write(response);
            }
        }
        catch (Exception ex)
        {
            string msg = ex.Message;
            string response = GetJson(msg);
            context.Response.Write(response);
        }
    }
    private void intialize_branchesmanages_salestype(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            List<initializedataclass> initializedatalist = new List<initializedataclass>();
            cmd = new MySqlCommand("select sno,salestype from salestypemanagement where flag=@flag");
            cmd.Parameters.AddWithValue("@flag", "1");
            foreach (DataRow dr in vdbmngr.SelectQuery(cmd).Tables[0].Rows)
            {
                initializedataclass initializedata = new initializedataclass();
                initializedata.sno = dr["sno"].ToString();
                initializedata.salestype = dr["salestype"].ToString();
                initializedatalist.Add(initializedata);
            }

            if (initializedatalist != null)
            {
                string response = GetJson(initializedatalist);
                context.Response.Write(response);
            }
        }
        catch (Exception ex)
        {
            string msg = ex.Message;
            string response = GetJson(msg);
            context.Response.Write(response);
        }
    }
    private void intialize_branchesproducts_branchname(HttpContext context)
    {
        try
        {
            string BranchID = context.Request["BranchID"];
            string Type = context.Request["Type"];
            string levltype = context.Session["LevelType"].ToString();
            vdbmngr = new VehicleDBMgr();
            List<initializedataclass> initializedatalist = new List<initializedataclass>();
            if (levltype == "Admin" || levltype == "MAdmin")
            {
                cmd = new MySqlCommand("select sno,BranchName,SalesType from branchdata where flag=@flag and userdata_sno=@username");
                cmd.Parameters.AddWithValue("@username", context.Session["userdata_sno"].ToString());
                cmd.Parameters.AddWithValue("@flag", "1");
            }
            foreach (DataRow dr in vdbmngr.SelectQuery(cmd).Tables[0].Rows)
            {
                initializedataclass initializedata = new initializedataclass();
                initializedata.sno = dr["sno"].ToString();
                initializedata.branchname = dr["BranchName"].ToString();
                initializedata.salestype = dr["SalesType"].ToString();
                initializedatalist.Add(initializedata);
            }
            cmd = new MySqlCommand("select sno,Categoryname from products_category where flag=@flag and userdata_sno=@username");
            cmd.Parameters.AddWithValue("@username", context.Session["userdata_sno"].ToString());
            cmd.Parameters.AddWithValue("@flag", "1");
            foreach (DataRow dr in vdbmngr.SelectQuery(cmd).Tables[0].Rows)
            {
                initializedataclass initializedata = new initializedataclass();
                initializedata.sno = dr["sno"].ToString();
                initializedata.categoryname = dr["Categoryname"].ToString();
                initializedatalist.Add(initializedata);
            }
            cmd = new MySqlCommand("SELECT products_category.Categoryname, products_subcategory.SubCatName,products_subcategory.category_sno,products_subcategory.sno, productsdata.*  FROM productsdata RIGHT OUTER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno RIGHT OUTER JOIN products_category ON products_subcategory.category_sno = products_category.sno WHERE (products_category.flag<>0) AND (products_subcategory.Flag<>0) AND products_category.userdata_sno=@username");
            cmd.Parameters.AddWithValue("@username", context.Session["userdata_sno"].ToString());
            DataTable dt = vdbmngr.SelectQuery(cmd).Tables[0];
            context.Session["getbranchcategorynames"] = dt;
            string userdatasno = context.Session["userdata_sno"].ToString();
            cmd = new MySqlCommand("SELECT productsdata.sno, productsdata.SubCat_sno, productsdata.ProductName, productsdata.Qty, productsdata.Units, productsdata.UnitPrice, productsdata.Flag, productsdata.UserData_sno, products_subcategory.SubCatName FROM products_subcategory RIGHT OUTER JOIN productsdata ON products_subcategory.sno = productsdata.SubCat_sno WHERE (products_subcategory.Flag <> 0) AND productsdata.UserData_sno=@username");
            //cmd = new MySqlCommand("SELECT products_category.Categoryname, products_subcategory.SubCatName,products_subcategory.category_sno, productsdata.*  FROM productsdata RIGHT OUTER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno RIGHT OUTER JOIN products_category ON products_subcategory.category_sno = products_category.sno WHERE (products_category.flag<>0) AND (products_subcategory.Flag<>0) AND products_category.userdata_sno=@username AND products_subcategory.userdata_sno=@username AND productsdata.UserData_sno=@username");
            cmd.Parameters.AddWithValue("@username", context.Session["userdata_sno"].ToString());
            DataTable dt1 = vdbmngr.SelectQuery(cmd).Tables[0];
            context.Session["getproductsnames"] = dt1;
            if (initializedatalist != null)
            {
                string response = GetJson(initializedatalist);
                context.Response.Write(response);
            }
        }
        catch (Exception ex)
        {
            string msg = ex.Message;
            string response = GetJson(msg);
            context.Response.Write(response);
        }
    }
    private void get_product_subcategory_data(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            List<initializedataclass> initializedatalist = new List<initializedataclass>();
            string catgryname = context.Request["cmbcatgryname"];
            DataTable categorys = (DataTable)context.Session["getbranchcategorynames"];
            DataTable subcatgrynames = categorys.DefaultView.ToTable(true, "category_sno", "SubCatName", "sno");
            DataRow[] subcatgry = subcatgrynames.Select("category_sno=" + catgryname + "");
            foreach (DataRow dr in subcatgry)
            {
                initializedataclass initializedata = new initializedataclass();
                initializedata.sno = dr["sno"].ToString();
                initializedata.subcategorynames = dr["SubCatName"].ToString();
                initializedatalist.Add(initializedata);
            }
            if (initializedatalist != null)
            {
                string response = GetJson(initializedatalist);
                context.Response.Write(response);
            }
        }
        catch (Exception ex)
        {
            string msg = ex.Message;
            string response = GetJson(msg);
            context.Response.Write(response);
        }
    }
    private void get_products_data(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            List<initializedataclass> initializedatalist = new List<initializedataclass>();
            string subcatname = context.Request["cmbsubcatgryname"];
            DataTable subcategorys = (DataTable)context.Session["getproductsnames"];
            DataTable productnames = subcategorys.DefaultView.ToTable(true, "SubCat_sno", "ProductName", "sno");
            DataRow[] products = productnames.Select("SubCat_sno=" + subcatname + "");
            foreach (DataRow dr in products)
            {
                initializedataclass initializedata = new initializedataclass();
                initializedata.ProductName = dr["ProductName"].ToString();
                initializedata.sno = dr["sno"].ToString();
                initializedatalist.Add(initializedata);
            }
            if (initializedatalist != null)
            {
                string response = GetJson(initializedatalist);
                context.Response.Write(response);
            }
        }
        catch (Exception ex)
        {
            string msg = ex.Message;
            string response = GetJson(msg);
            context.Response.Write(response);
        }
    }
    public class RouteNames
    {
        public String id { get; set; }
        public String Name { get; set; }
        public String status { get; set; }
    }
    private void salestypemanage(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            string category = context.Request["category"];
            string salestype = context.Request["salestype"];
            string flag = context.Request["salestypeflag"];
            string operationtype = context.Request["operationtype"];
            string msg = "";
            if (operationtype == "SAVE")
            {
                cmd = new MySqlCommand("insert into salestypemanagement (salestype,category,UserData_sno) values (@salestype,@category, @username)");
                cmd.Parameters.AddWithValue("@salestype", salestype);
                cmd.Parameters.AddWithValue("@category", category);
                cmd.Parameters.AddWithValue("@username", context.Session["userdata_sno"].ToString());
                vdbmngr.insert(cmd);
                msg = "Salestype data successfully saved";
            }
            else if (operationtype == "MODIFY")
            {
                string sname = context.Request["sno"];
                cmd = new MySqlCommand("update salestypemanagement set category=@category,flag=@flag where sno='" + sname + "'");
                //cmd.Parameters.AddWithValue("@salestype", salestype);
                cmd.Parameters.AddWithValue("@category", category);
                if (flag == "Active")
                {
                    cmd.Parameters.AddWithValue("@flag", true);
                }
                else
                {
                    cmd.Parameters.AddWithValue("@flag", false);
                }
                vdbmngr.Update(cmd);
                msg = "Salestype data successfully modified";
            }
            string response = GetJson(msg);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string msg = ex.Message;
            string response = GetJson(msg);
            context.Response.Write(response);
        }
    }
    private void updatesalestypemanage(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            string username = context.Request["username"];
            cmd = new MySqlCommand("select category,salestype,flag,sno,status From salestypemanagement Where UserData_sno= @username order by rank");
            cmd.Parameters.AddWithValue("@username", context.Session["userdata_sno"].ToString());
            DataTable dt = vdbmngr.SelectQuery(cmd).Tables[0];
            List<Salestype> Saleslist = new List<Salestype>();
            foreach (DataRow dr in dt.Rows)
            {
                Salestype GetSalestype = new Salestype();
                GetSalestype.salestype = dr["salestype"].ToString();
                GetSalestype.flag = dr["flag"].ToString();
                GetSalestype.status = dr["status"].ToString();
                GetSalestype.sno = dr["sno"].ToString();
                GetSalestype.category = dr["category"].ToString();
                Saleslist.Add(GetSalestype);
            }
            string response = GetJson(Saleslist);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string msg = ex.Message;
            string response = GetJson(msg);
            context.Response.Write(response);
        }
    }
    public class Salestype
    {
        public string sno { get; set; }
        public string salestype { get; set; }
        public string flag { get; set; }
        public string status { get; set; }
        public string category { get; set; }
    }
    private void producttypemanagement(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();

            string productname = context.Request["productname"];
            string flag = context.Request["producttypeflag"];
            string tcategoryname = context.Request["tcategoryname"];
            string categorycode = context.Request["categorycode"];
            string username = context.Request["username"];
            string operationtype = context.Request["operationtype"];
            string msg = "";
            if (operationtype == "SAVE")
            {
                cmd = new MySqlCommand("insert into products_category (Categoryname,userdata_sno,tcategory,categorycode) values (@productname, @username,@tcategory,@categorycode)");
                cmd.Parameters.AddWithValue("@productname", productname);

                cmd.Parameters.AddWithValue("@username", context.Session["userdata_sno"].ToString());
                cmd.Parameters.AddWithValue("@tcategory", tcategoryname);
                cmd.Parameters.AddWithValue("@categorycode", categorycode);
                vdbmngr.insert(cmd);
                msg = "Products data successfully saved";
            }
            else if (operationtype == "MODIFY")
            {
                string sno = context.Request["sno"];
                cmd = new MySqlCommand("update products_category set Categoryname=@productname,flag=@flag,tcategory=@tcategory,categorycode=@categorycode where sno='" + sno + "'");
                cmd.Parameters.AddWithValue("@productname", productname);
                if (flag == "Active")
                {
                    cmd.Parameters.AddWithValue("@flag", true);
                }
                else
                {
                    cmd.Parameters.AddWithValue("@flag", false);
                }
                cmd.Parameters.AddWithValue("@tcategory", tcategoryname);
                cmd.Parameters.AddWithValue("@categorycode", categorycode);
                vdbmngr.Update(cmd);
                msg = "products data successfully modified";
            }
            string response = GetJson(msg);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string msg = "Operation failes.please try again";
            string response = GetJson(msg);
            context.Response.Write(response);
        }
    }
    private void Updateproducttypemanage(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            string username = context.Request["username"];
            string FormType = context.Request["FormType"];
            List<Producttype> Productlist = new List<Producttype>();

            if (FormType == "NewProductMaster")
            {
                cmd = new MySqlCommand("SELECT  sno, Categoryname, flag, userdata_sno, tcategory, categorycode, rank, description, tempcatsno FROM products_category WHERE (userdata_sno = @username) AND (tempcatsno IS NOT NULL)");
                cmd.Parameters.AddWithValue("@username", context.Session["userdata_sno"]);
                DataTable dt = vdbmngr.SelectQuery(cmd).Tables[0];
                foreach (DataRow dr in dt.Rows)
                {
                    Producttype GetProducttype = new Producttype();
                    GetProducttype.Categoryname = dr["description"].ToString();
                    GetProducttype.tcategory = dr["tcategory"].ToString();
                    GetProducttype.categorycode = dr["categorycode"].ToString();
                    GetProducttype.flag = dr["flag"].ToString();
                    GetProducttype.sno = dr["tempcatsno"].ToString();
                    Productlist.Add(GetProducttype);
                }
            }
            else
            {
                cmd = new MySqlCommand("select Categoryname,flag,sno,tcategory,categorycode From products_category Where userdata_sno= @username");
                cmd.Parameters.AddWithValue("@username", context.Session["userdata_sno"]);
                DataTable dt = vdbmngr.SelectQuery(cmd).Tables[0];
                foreach (DataRow dr in dt.Rows)
                {
                    Producttype GetProducttype = new Producttype();
                    GetProducttype.Categoryname = dr["Categoryname"].ToString();
                    GetProducttype.tcategory = dr["tcategory"].ToString();
                    GetProducttype.categorycode = dr["categorycode"].ToString();
                    GetProducttype.flag = dr["flag"].ToString();
                    GetProducttype.sno = dr["sno"].ToString();
                    Productlist.Add(GetProducttype);
                }
            }
            string response = GetJson(Productlist);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string msg = ex.Message;
            string response = GetJson(msg);
            context.Response.Write(response);
        }
    }
    public class Producttype
    {
        public string tcategory { get; set; }
        public string categorycode { get; set; }
        public string Categoryname { get; set; }
        public string flag { get; set; }
        public string sno { get; set; }
    }
    private void subcategorytypemanagement(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            string subcategory = context.Request["subcategoryname"];
            string categorynum = context.Request["categoryname"];
            string flag = context.Request["subproductflag"];
            string description = context.Request["description"];
            string username = context.Session["UserName"].ToString();
            string operationtype = context.Request["operationtype"];
            string msg = "";
            if (operationtype == "SAVE")
            {
                cmd = new MySqlCommand("insert into products_subcategory (SubCatName,category_sno,description,userdata_sno) values (@subcatname,@categorynum,@description,@username)");
                cmd.Parameters.AddWithValue("@subcatname", subcategory);
                cmd.Parameters.AddWithValue("@categorynum", categorynum);
                cmd.Parameters.AddWithValue("@description", description);
                cmd.Parameters.AddWithValue("@username", context.Session["userdata_sno"].ToString());
                vdbmngr.insert(cmd);
                msg = "sub category data successfully saved";
            }
            else if (operationtype == "MODIFY")
            {
                string sno = context.Request["sno"];
                cmd = new MySqlCommand("update products_subcategory set category_sno=@categorynum,SubCatName=@subcatname,description=@description,flag=@flag where sno='" + sno + "'");
                cmd.Parameters.AddWithValue("@categorynum", categorynum);
                cmd.Parameters.AddWithValue("@subcatname", subcategory);
                cmd.Parameters.AddWithValue("@description", description);
                if (flag == "Active")
                {
                    cmd.Parameters.AddWithValue("@flag", true);
                }
                else
                {
                    cmd.Parameters.AddWithValue("@flag", false);
                }
                //cmd.Parameters.AddWithValue("@flag", flag);
                vdbmngr.Update(cmd);
                msg = "SubCategory data successfully modified";
            }
            string response = GetJson(msg);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string msg = "Operation failes.please try again";
            string response = GetJson(msg);
            context.Response.Write(response);
        }
    }
    private void Updatesubcategorytypemanage(HttpContext context)
    {

        try
        {
            vdbmngr = new VehicleDBMgr();
            string username = context.Session["userdata_sno"].ToString();
            List<subcategytype> subcatlist = new List<subcategytype>();
            string FormType = context.Request["FormType"];
            if (FormType == "NewProductMaster")
            {
                cmd = new MySqlCommand("SELECT   products_subcategory.SubCatName, products_category.Categoryname, products_subcategory.description, products_subcategory.Flag, products_subcategory.sno, products_category.tempcatsno,products_subcategory.tempsub_catsno, products_category.description AS Expr1 FROM  products_category INNER JOIN products_subcategory ON products_category.tempcatsno = products_subcategory.tempcatsno WHERE (products_subcategory.userdata_sno = @username) AND (products_subcategory.tempsub_catsno IS NOT NULL)");
                cmd.Parameters.AddWithValue("@username", username);
                DataTable dt = vdbmngr.SelectQuery(cmd).Tables[0];
                foreach (DataRow dr in dt.Rows)
                {
                    subcategytype Getsubcattype = new subcategytype();
                    Getsubcattype.subcatname = dr["description"].ToString();
                    Getsubcattype.Categoryname = dr["Expr1"].ToString();
                    Getsubcattype.flag = dr["Flag"].ToString();
                    Getsubcattype.sno = dr["tempsub_catsno"].ToString();
                    Getsubcattype.catgrysno = dr["tempcatsno"].ToString();
                    Getsubcattype.description = dr["description"].ToString();
                    subcatlist.Add(Getsubcattype);
                }
            }
            else
            {
                cmd = new MySqlCommand("SELECT products_subcategory.SubCatName, products_category.Categoryname, products_subcategory.description,products_subcategory.Flag,products_subcategory.sno FROM  products_category INNER JOIN products_subcategory ON products_category.sno = products_subcategory.category_sno WHERE products_subcategory.userdata_sno=@username");
                cmd.Parameters.AddWithValue("@username", username);
                DataTable dt = vdbmngr.SelectQuery(cmd).Tables[0];
                foreach (DataRow dr in dt.Rows)
                {
                    subcategytype Getsubcattype = new subcategytype();
                    Getsubcattype.subcatname = dr["SubCatName"].ToString();
                    Getsubcattype.Categoryname = dr["Categoryname"].ToString();
                    Getsubcattype.flag = dr["Flag"].ToString();
                    Getsubcattype.sno = dr["sno"].ToString();
                    Getsubcattype.catgrysno = dr["categoryname"].ToString();
                    Getsubcattype.description = dr["description"].ToString();
                    subcatlist.Add(Getsubcattype);
                }
            }
            string response = GetJson(subcatlist);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string msg = ex.Message;
            string response = GetJson(msg);
            context.Response.Write(response);
        }
    }
    public class subcategytype
    {
        public string sno { get; set; }
        public string subcatname { get; set; }
        public string Categoryname { get; set; }
        public string flag { get; set; }
        public string catgrysno { get; set; }
        public string description { get; set; }
    }
    private void productunitsmanagement(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            string productcatg = context.Request["cmbproductcategory"];
            string subcatg = context.Request["productsubcategory"];
            string prdtname = context.Request["productname"];
            string ProductCode = context.Request["ProductCode"];
            string tproductname = context.Request["tproductname"];
            string prdtQty = context.Request["productsqty"];
            string productunits = context.Request["productsunits"];
            string productsunitprice = context.Request["productsunitprice"];
            string username = context.Request["username"];
            string flag = context.Request["branchesproductsflag"];
            string operationtype = context.Request["operationtype"];
            string prdtinvsno = context.Request["prdtinvsno"];
            string invqty = context.Request["invqty"];
            string vatPercent = context.Request["vatPercent"];
            string specification = context.Request["specification"];
            string materialtype = context.Request["materialtype"];
            string perunitprice = context.Request["perunitprice"];
            string HSNCode = context.Request["HSNCode"];
            string igst = context.Request["igst"];
            string cgst = context.Request["cgst"];
            string sgst = context.Request["sgst"];
            string gsttaxcategory = context.Request["gsttaxcategory"];
            string pieces = context.Request["pieces"];
            string description = context.Request["description"];
            string ifdflag = context.Request["ifdflag"];
            string FormType = context.Request["FormType"];
            DateTime ServerDateCurrentdate = VehicleDBMgr.GetTime(vdbmngr.conn);
            string msg = "";
            if (operationtype == "SAVE")
            {
                cmd = new MySqlCommand("insert into productsdata (ProductName,Qty,Units,Unitprice,SubCat_sno,userdata_sno,Inventorysno,tproduct,itemcode,specification,materialtype,perunitprice,hsncode,igst,cgst,sgst,gsttaxcategory,pieces,invqty,description,ifdflag) values (@ProductName,@Qty,@Units,@Unitprice,@SubCatnum, @username,@invsno,@tproduct,@itemcode,@specification,@materialtype,@perunitprice,@hsncode,@igst,@cgst,@sgst,@gsttaxcategory,@pieces,@invqty,@description,@ifdflag)");
                cmd.Parameters.AddWithValue("@ProductName", prdtname);
                cmd.Parameters.AddWithValue("@Qty", prdtQty);
                cmd.Parameters.AddWithValue("@Units", productunits);
                cmd.Parameters.AddWithValue("@Unitprice", productsunitprice);
                cmd.Parameters.AddWithValue("@SubCatnum", subcatg);
                cmd.Parameters.AddWithValue("@username", context.Session["userdata_sno"].ToString());
                cmd.Parameters.AddWithValue("@invsno", prdtinvsno);
                //cmd.Parameters.AddWithValue("@VatPercent", vatPercent);
                cmd.Parameters.AddWithValue("@tproduct", tproductname);
                cmd.Parameters.AddWithValue("@itemcode", ProductCode);
                cmd.Parameters.AddWithValue("@specification", specification);
                cmd.Parameters.AddWithValue("@materialtype", materialtype);
                cmd.Parameters.AddWithValue("@perunitprice", perunitprice);
                cmd.Parameters.AddWithValue("@hsncode", HSNCode);
                cmd.Parameters.AddWithValue("@igst", igst);
                cmd.Parameters.AddWithValue("@cgst", cgst);
                cmd.Parameters.AddWithValue("@sgst", sgst);
                cmd.Parameters.AddWithValue("@gsttaxcategory", gsttaxcategory);
                cmd.Parameters.AddWithValue("@pieces", pieces);
                cmd.Parameters.AddWithValue("@invqty", invqty);
                cmd.Parameters.AddWithValue("@description", description);
                cmd.Parameters.AddWithValue("@ifdflag", ifdflag);
                vdbmngr.insert(cmd);
                msg = "Products data successfully saved";
            }
            else if (operationtype == "MODIFY")
            {
                string sno = context.Request["sno"];
                if (FormType == "NewProductMaster")
                {
                    cmd = new MySqlCommand("update productsdata set hsncode=@hsncode, igst=@igst, cgst=@cgst, sgst=@sgst, gsttaxcategory=@gsttaxcategory, tproduct=@tproduct,itemcode=@itemcode,ProductName=@ProductName,tempsubcatsno=@SubCatnum,Qty=@Qty,Units=@Units,Unitprice=@Unitprice,Flag=@flag,Inventorysno=@invsno,specification=@specification,materialtype=@materialtype,perunitprice=@perunitprice,pieces=@pieces,invqty=@invqty,description=@description,ifdflag=@ifdflag  where sno='" + sno + "'");
                    cmd.Parameters.AddWithValue("@tproduct", tproductname);
                    cmd.Parameters.AddWithValue("@ProductName", prdtname);
                    cmd.Parameters.AddWithValue("@SubCatnum", subcatg);
                    cmd.Parameters.AddWithValue("@Qty", prdtQty);
                    cmd.Parameters.AddWithValue("@Units", productunits);
                    cmd.Parameters.AddWithValue("@Unitprice", productsunitprice);
                    cmd.Parameters.AddWithValue("@invsno", prdtinvsno);
                    //cmd.Parameters.AddWithValue("@VatPercent", vatPercent);
                    cmd.Parameters.AddWithValue("@itemcode", ProductCode);
                    cmd.Parameters.AddWithValue("@specification", specification);
                    cmd.Parameters.AddWithValue("@materialtype", materialtype);
                    cmd.Parameters.AddWithValue("@perunitprice", perunitprice);
                    cmd.Parameters.AddWithValue("@hsncode", HSNCode);
                    cmd.Parameters.AddWithValue("@igst", igst);
                    cmd.Parameters.AddWithValue("@cgst", cgst);
                    cmd.Parameters.AddWithValue("@sgst", sgst);
                    cmd.Parameters.AddWithValue("@gsttaxcategory", gsttaxcategory);
                    cmd.Parameters.AddWithValue("@pieces", pieces);
                    cmd.Parameters.AddWithValue("@invqty", invqty);
                    cmd.Parameters.AddWithValue("@description", description);
                    if (flag == "Active")
                    {
                        cmd.Parameters.AddWithValue("@flag", true);
                    }
                    else
                    {
                        cmd.Parameters.AddWithValue("@flag", false);
                    }
                    if (ifdflag == "Active")
                    {
                        cmd.Parameters.AddWithValue("@ifdflag", true);
                    }
                    else
                    {
                        cmd.Parameters.AddWithValue("@ifdflag", false);
                    }
                    vdbmngr.Update(cmd);
                    msg = "products data successfully modified";
                }
                else
                {
                    cmd = new MySqlCommand("update productsdata set hsncode=@hsncode, igst=@igst, cgst=@cgst, sgst=@sgst, gsttaxcategory=@gsttaxcategory, tproduct=@tproduct,itemcode=@itemcode,ProductName=@ProductName,SubCat_sno=@SubCatnum,Qty=@Qty,Units=@Units,Unitprice=@Unitprice,Flag=@flag,Inventorysno=@invsno,specification=@specification,materialtype=@materialtype,perunitprice=@perunitprice,pieces=@pieces,invqty=@invqty,description=@description,ifdflag=@ifdflag  where sno='" + sno + "'");
                    cmd.Parameters.AddWithValue("@tproduct", tproductname);
                    cmd.Parameters.AddWithValue("@ProductName", prdtname);
                    cmd.Parameters.AddWithValue("@SubCatnum", subcatg);
                    cmd.Parameters.AddWithValue("@Qty", prdtQty);
                    cmd.Parameters.AddWithValue("@Units", productunits);
                    cmd.Parameters.AddWithValue("@Unitprice", productsunitprice);
                    cmd.Parameters.AddWithValue("@invsno", prdtinvsno);
                    //cmd.Parameters.AddWithValue("@VatPercent", vatPercent);
                    cmd.Parameters.AddWithValue("@itemcode", ProductCode);
                    cmd.Parameters.AddWithValue("@specification", specification);
                    cmd.Parameters.AddWithValue("@materialtype", materialtype);
                    cmd.Parameters.AddWithValue("@perunitprice", perunitprice);
                    cmd.Parameters.AddWithValue("@hsncode", HSNCode);
                    cmd.Parameters.AddWithValue("@igst", igst);
                    cmd.Parameters.AddWithValue("@cgst", cgst);
                    cmd.Parameters.AddWithValue("@sgst", sgst);
                    cmd.Parameters.AddWithValue("@gsttaxcategory", gsttaxcategory);
                    cmd.Parameters.AddWithValue("@pieces", pieces);
                    cmd.Parameters.AddWithValue("@invqty", invqty);
                    cmd.Parameters.AddWithValue("@description", description);
                    if (flag == "Active")
                    {
                        cmd.Parameters.AddWithValue("@flag", true);
                    }
                    else
                    {
                        cmd.Parameters.AddWithValue("@flag", false);
                    }
                    if (ifdflag == "Active")
                    {
                        cmd.Parameters.AddWithValue("@ifdflag", true);
                    }
                    else
                    {
                        cmd.Parameters.AddWithValue("@ifdflag", false);
                    }
                    vdbmngr.Update(cmd);
                    msg = "products data successfully modified";
                }

            }
            string response = GetJson(msg);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string msg = "Operation failes.please try again";
            string response = GetJson(msg);
            context.Response.Write(response);
        }
    }
    private void Updateproductunitsmanage(HttpContext context)
    {

        try
        {
            vdbmngr = new VehicleDBMgr();
            string username = context.Request["username"];
            string FormType = context.Request["FormType"];
            List<ProductUnits> ProductUnitlist = new List<ProductUnits>();

            if (FormType == "NewProductMaster")
            {
                cmd = new MySqlCommand("SELECT   productsdata.ifdflag, productsdata.description, productsdata.invqty, productsdata.pieces, productsdata.specification, productsdata.materialtype, productsdata.PerUnitPrice, products_subcategory.SubCatName,products_subcategory.sno AS SubCatsno, productsdata.images, productsdata.hsncode, productsdata.igst, productsdata.sgst, productsdata.cgst, productsdata.gsttaxcategory, products_category.Categoryname,products_category.sno AS categorysno, productsdata.tproduct, productsdata.Itemcode, productsdata.ProductName, productsdata.sno, productsdata.Qty, productsdata.Units, productsdata.UnitPrice, productsdata.Flag, products_subcategory.category_sno, productsdata.SubCat_sno, productsdata.VatPercent, invmaster.InvName, productsdata.tempsubcatsno, products_category.tempcatsno,products_subcategory.tempsub_catsno, products_category.description AS Expr1, products_subcategory.description AS Expr2 FROM  products_category INNER JOIN products_subcategory ON products_category.tempcatsno = products_subcategory.tempcatsno INNER JOIN productsdata ON products_subcategory.tempsub_catsno = productsdata.tempsubcatsno INNER JOIN invmaster ON productsdata.Inventorysno = invmaster.sno");
                cmd.Parameters.AddWithValue("@username", context.Session["userdata_sno"].ToString());
                DataTable dt = vdbmngr.SelectQuery(cmd).Tables[0];
                foreach (DataRow dr in dt.Rows)
                {

                    ProductUnits GetProductUnit = new ProductUnits();
                    GetProductUnit.SubCatName = dr["Expr2"].ToString();
                    GetProductUnit.Categoryname = dr["Expr1"].ToString();
                    GetProductUnit.ProductName = dr["ProductName"].ToString();
                    GetProductUnit.ProductCode = dr["itemcode"].ToString();
                    GetProductUnit.TProductName = dr["tproduct"].ToString();
                    GetProductUnit.InvName = dr["InvName"].ToString();
                    GetProductUnit.sno = dr["sno"].ToString();
                    GetProductUnit.Qty = dr["Qty"].ToString();
                    GetProductUnit.ProductUnit = dr["Units"].ToString();
                    GetProductUnit.UnitPrice = dr["UnitPrice"].ToString();
                    GetProductUnit.subcatsno = dr["tempsub_catsno"].ToString();
                    GetProductUnit.catgrysno = dr["tempcatsno"].ToString();
                    GetProductUnit.flag = dr["Flag"].ToString();
                    //GetProductUnit.VatPercent = dr["VatPercent"].ToString();
                    GetProductUnit.categorysno = dr["tempcatsno"].ToString();
                    GetProductUnit.SubCatsno = dr["tempsub_catsno"].ToString();
                    GetProductUnit.specification = dr["specification"].ToString();
                    GetProductUnit.materialtype = dr["materialtype"].ToString();
                    GetProductUnit.perunitprice = dr["perunitprice"].ToString();
                    GetProductUnit.hsncode = dr["hsncode"].ToString();
                    GetProductUnit.igst = dr["igst"].ToString();
                    GetProductUnit.cgst = dr["cgst"].ToString();
                    GetProductUnit.sgst = dr["sgst"].ToString();
                    GetProductUnit.gsttaxcategory = dr["gsttaxcategory"].ToString();
                    GetProductUnit.pieces = dr["pieces"].ToString();
                    GetProductUnit.images = dr["images"].ToString();
                    GetProductUnit.invqty = dr["invqty"].ToString();
                    GetProductUnit.description = dr["description"].ToString();
                    GetProductUnit.ifdflag = dr["ifdflag"].ToString();
                    GetProductUnit.ftplocation = "ftp://223.196.32.30:21/Sales/";
                    ProductUnitlist.Add(GetProductUnit);
                }
            }
            else
            {

                //cmd = new MySqlCommand("SELECT   productsdata.hsncode,productsdata.specification,productsdata.materialtype,productsdata.packtype,products_subcategory.SubCatName,products_subcategory.sno AS SubCatsno ,productsdata.images, products_category.Categoryname,products_category.sno AS categorysno,productsdata.tproduct,productsdata.itemcode, productsdata.ProductName, productsdata.sno, productsdata.Qty, productsdata.Units,productsdata.UnitPrice, productsdata.Flag, products_subcategory.category_sno, productsdata.SubCat_sno,productsdata.VatPercent, invmaster.InvName FROM products_category INNER JOIN products_subcategory ON products_category.sno = products_subcategory.category_sno INNER JOIN productsdata ON products_subcategory.sno = productsdata.SubCat_sno INNER JOIN invmaster ON productsdata.Inventorysno = invmaster.sno");
                cmd = new MySqlCommand("SELECT   productsdata.ifdflag,productsdata.description,productsdata.invqty,productsdata.pieces,productsdata.specification,productsdata.materialtype,productsdata.perunitprice,products_subcategory.SubCatName,products_subcategory.sno AS SubCatsno ,productsdata.images,productsdata.hsncode,productsdata.igst,productsdata.sgst,productsdata.cgst, productsdata.gsttaxcategory, products_category.Categoryname,products_category.sno AS categorysno,productsdata.tproduct,productsdata.itemcode, productsdata.ProductName, productsdata.sno, productsdata.Qty, productsdata.Units,productsdata.UnitPrice, productsdata.Flag, products_subcategory.category_sno, productsdata.SubCat_sno,productsdata.VatPercent, invmaster.InvName FROM products_category INNER JOIN products_subcategory ON products_category.sno = products_subcategory.category_sno INNER JOIN productsdata ON products_subcategory.sno = productsdata.SubCat_sno INNER JOIN invmaster ON productsdata.Inventorysno = invmaster.sno");
                cmd.Parameters.AddWithValue("@username", context.Session["userdata_sno"].ToString());
                DataTable dt = vdbmngr.SelectQuery(cmd).Tables[0];
                //List<ProductUnits> ProductUnitlist = new List<ProductUnits>();
                foreach (DataRow dr in dt.Rows)
                {

                    ProductUnits GetProductUnit = new ProductUnits();
                    GetProductUnit.SubCatName = dr["SubCatName"].ToString();
                    GetProductUnit.Categoryname = dr["Categoryname"].ToString();
                    GetProductUnit.ProductName = dr["ProductName"].ToString();
                    GetProductUnit.ProductCode = dr["itemcode"].ToString();
                    GetProductUnit.TProductName = dr["tproduct"].ToString();
                    GetProductUnit.InvName = dr["InvName"].ToString();
                    GetProductUnit.sno = dr["sno"].ToString();
                    GetProductUnit.Qty = dr["Qty"].ToString();
                    GetProductUnit.ProductUnit = dr["Units"].ToString();
                    GetProductUnit.UnitPrice = dr["UnitPrice"].ToString();
                    GetProductUnit.subcatsno = dr["SubCat_sno"].ToString();
                    GetProductUnit.catgrysno = dr["categoryname"].ToString();
                    GetProductUnit.flag = dr["Flag"].ToString();
                    //GetProductUnit.VatPercent = dr["VatPercent"].ToString();
                    GetProductUnit.categorysno = dr["categorysno"].ToString();
                    GetProductUnit.SubCatsno = dr["SubCatsno"].ToString();
                    GetProductUnit.specification = dr["specification"].ToString();
                    GetProductUnit.materialtype = dr["materialtype"].ToString();
                    GetProductUnit.perunitprice = dr["perunitprice"].ToString();
                    GetProductUnit.hsncode = dr["hsncode"].ToString();
                    GetProductUnit.igst = dr["igst"].ToString();
                    GetProductUnit.cgst = dr["cgst"].ToString();
                    GetProductUnit.sgst = dr["sgst"].ToString();
                    GetProductUnit.gsttaxcategory = dr["gsttaxcategory"].ToString();
                    GetProductUnit.pieces = dr["pieces"].ToString();
                    GetProductUnit.images = dr["images"].ToString();
                    GetProductUnit.invqty = dr["invqty"].ToString();
                    GetProductUnit.description = dr["description"].ToString();
                    GetProductUnit.ifdflag = dr["ifdflag"].ToString();
                    GetProductUnit.ftplocation = "ftp://223.196.32.30:21/Sales/";
                    ProductUnitlist.Add(GetProductUnit);
                }
            }
            string response = GetJson(ProductUnitlist);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string msg = ex.Message;
            string response = GetJson(msg);
            context.Response.Write(response);
        }
    }
    public class ProductUnits
    {
        public string sno { get; set; }
        public string SubCatName { get; set; }
        public string Categoryname { get; set; }
        public string ProductName { get; set; }
        public string ProductCode { get; set; }
        public string TProductName { get; set; }
        public string InvName { get; set; }
        public string subcatsno { get; set; }
        public string catgrysno { get; set; }
        public string subproductname { get; set; }
        public string Qty { get; set; }
        public string ProductUnit { get; set; }
        public string UnitPrice { get; set; }
        public string flag { get; set; }
        public string VatPercent { get; set; }
        public string ftplocation { get; set; }
        public string images { get; set; }
        public string SubCatsno { get; set; }
        public string categorysno { get; set; }
        public string specification { get; set; }
        public string materialtype { get; set; }
        public string perunitprice { get; set; }
        public string hsncode { get; set; }
        public string igst { get; set; }
        public string cgst { get; set; }
        public string sgst { get; set; }
        public string gsttaxcategory { get; set; }
        public string pieces { get; set; }
        public string invqty { get; set; }
        public string description { get; set; }
        public string ifdflag { get; set; }
    }
    private void Save_branchsmanagement_click(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            string checkedbranch = context.Request["checkedbranch"];
            string branchcode = context.Request["branchcode"];
            string whccode = context.Request["whccode"];
            string customercode = context.Request["customercode"];
            string brnchsname = context.Request["brnchsname"];
            string ledgerdr = context.Request["ledgerdr"];
            string LedgerCode = context.Request["LedgerCode"];
            string tally_branchname = context.Request["tally_branchname"];
            string SRName = context.Request["txtsr"];
            string salestype = context.Request["cmbsalestype"];
            string collectiontype = context.Request["cmbcollectiontype"];
            string cmblimittype = context.Request["cmblimittype"];
            double duelimit = 0;
            double.TryParse(context.Request["txtduelimit"], out duelimit);
            string flag = context.Request["branchesManageflag"];
            string agent_mobile = context.Request["branchesManage_Phone"];
            string operationtype = context.Request["operationtype"];
            double brnchlong = 0;
            double brnchlatitude = 0;
            double.TryParse(context.Request["brnchlong"], out brnchlong);
            double.TryParse(context.Request["brnchlat"], out brnchlatitude);
            string street = context.Request["street"];
            string city = context.Request["city"];
            string mandal = context.Request["mandal"];
            string district = context.Request["district"];
            string state = context.Request["state"];
            string pincode = context.Request["pincode"];
            string tinno = context.Request["tinno"];
            string panno = context.Request["panno"];
            string cst = context.Request["cst"];
            string email = context.Request["email"];
            string GSTIN = context.Request["GSTIN"];
            string regtype = context.Request["regtype"];
            string doorno = context.Request["doorno"];
            string area = context.Request["area"];

            string mmname = context.Request["mmname"];
            string mename = context.Request["mename"];
            string amount = context.Request["amount"];
            string amountsince = context.Request["amountsince"];
            //  'mmname': mmname, 'mename': mename, 'amount': amount, 'amountsince': amountsince

            string bankid = context.Request["Bankid"];
            string ifsccode = context.Request["ifsccode"];
            string customeraccno = context.Request["customeraccno"];

            int dtarget = 0;
            int wtarget = 0;
            int mtarget = 0;
            int.TryParse(context.Request["txt_monthtarget"], out mtarget);
            string cmbpaymentterm = context.Request["cmbpaymentterm"];
            context.Session["FILL_checkedbranch_TO_GRID"] = checkedbranch;
            DateTime ServerDateCurrentdate = VehicleDBMgr.GetTime(vdbmngr.conn);
            string msg = "";
            string level = context.Session["LevelType"].ToString();
            if (level == "Admin" || level == "MAdmin")
            {
                if (operationtype == "SAVE")
                {
                    cmd = new MySqlCommand("insert into branchdata (BranchName,SalesType,Lat,Lng,phonenumber,userdata_sno,WTarget,MTarget,DTarget,CollectionType,DateOfEntry,DueLimit,SalesRepresentative,Due_Limit_Days,Due_Limit_Type,tBranchName,BranchCode,TinNumber,ladger_dr,panno,stateid,ladger_dr_code,customercode,whcode,street,city,mandal,district,pincode,cst,email,gstno,doorno,area,Bankid,ifsccode,accountno,regtype) values (@brnchsname,@salestype,@lat,@lng,@phonenumber, @username,@wtarget,@mtarget,@dtarget,@ct,@branchaddeddate,@DueLimit,@SalesRepresentative,@Due_Limit_Days,@Due_Limit_Type,@tBranchName,@BranchCode,@TinNumber,@ladger_dr,@panno,@stateid,@ladger_dr_code,@customercode,@whcode,@street,@city,@mandal,@district,@pincode,@cst,@email,@gstno,@doorno,@area,@Bankid,@ifsccode,@accountno,@regtype)");
                    cmd.Parameters.AddWithValue("@brnchsname", brnchsname);
                    cmd.Parameters.AddWithValue("@salestype", salestype);
                    cmd.Parameters.AddWithValue("@lat", brnchlatitude);
                    cmd.Parameters.AddWithValue("@lng", brnchlong);
                    cmd.Parameters.AddWithValue("@phonenumber", agent_mobile);
                    cmd.Parameters.AddWithValue("@username", context.Session["userdata_sno"].ToString());
                    cmd.Parameters.AddWithValue("@wtarget", wtarget);
                    cmd.Parameters.AddWithValue("@mtarget", mtarget);
                    cmd.Parameters.AddWithValue("@dtarget", dtarget);
                    cmd.Parameters.AddWithValue("@ct", collectiontype);
                    cmd.Parameters.AddWithValue("@branchaddeddate", ServerDateCurrentdate);
                    cmd.Parameters.AddWithValue("@DueLimit", duelimit);
                    cmd.Parameters.AddWithValue("@SalesRepresentative", SRName);
                    cmd.Parameters.AddWithValue("@Due_Limit_Type", cmblimittype);
                    //akbar
                    cmd.Parameters.AddWithValue("@tBranchName", tally_branchname);
                    cmd.Parameters.AddWithValue("@BranchCode", branchcode);
                    cmd.Parameters.AddWithValue("@TinNumber", tinno);
                    cmd.Parameters.AddWithValue("@ladger_dr", ledgerdr);
                    cmd.Parameters.AddWithValue("@panno", panno);
                    cmd.Parameters.AddWithValue("@stateid", state);
                    cmd.Parameters.AddWithValue("@ladger_dr_code", LedgerCode);
                    cmd.Parameters.AddWithValue("@customercode", customercode);
                    cmd.Parameters.AddWithValue("@whcode", whccode);
                    cmd.Parameters.AddWithValue("@street", street);
                    cmd.Parameters.AddWithValue("@city", city);
                    cmd.Parameters.AddWithValue("@mandal", mandal);
                    cmd.Parameters.AddWithValue("@district", district);
                    cmd.Parameters.AddWithValue("@pincode", pincode);
                    cmd.Parameters.AddWithValue("@cst", cst);
                    cmd.Parameters.AddWithValue("@email", email);
                    cmd.Parameters.AddWithValue("@gstno", GSTIN);
                    cmd.Parameters.AddWithValue("@doorno", doorno);
                    cmd.Parameters.AddWithValue("@area", area);
                    cmd.Parameters.AddWithValue("@bankid", bankid);
                    cmd.Parameters.AddWithValue("@ifsccode", ifsccode);
                    cmd.Parameters.AddWithValue("@accountno", customeraccno);
                    cmd.Parameters.AddWithValue("@regtype", regtype);
                    if (cmblimittype == "Amount")
                    {
                        double limitdays = 0;
                        cmd.Parameters.AddWithValue("@Due_Limit_Days", limitdays);
                    }
                    if (cmblimittype == "Days")
                    {
                        double limitdays = 0;
                        cmd.Parameters.AddWithValue("@Due_Limit_Days", limitdays);
                    }
                    long sno = vdbmngr.insertScalar(cmd);
                    cmd = new MySqlCommand("insert into branchmappingtable (SubBranch,SuperBranch) values (@subbranch,@superbranch)");
                    cmd.Parameters.AddWithValue("@subbranch", sno);
                    cmd.Parameters.AddWithValue("@superbranch", checkedbranch);
                    vdbmngr.insert(cmd);
                    cmd = new MySqlCommand("Insert Into branchaccounts(Amount,BranchId) values(@Amount,@BranchId)");
                    cmd.Parameters.AddWithValue("@Amount", "0");
                    cmd.Parameters.AddWithValue("@BranchId", sno);
                    vdbmngr.insert(cmd);
                    cmd = new MySqlCommand("SELECT product_sno FROM branchproducts WHERE (branch_sno = @superbranch) and (flag=@flag)");
                    cmd.Parameters.AddWithValue("@superbranch", checkedbranch);
                    cmd.Parameters.AddWithValue("@flag", "1");
                    DataTable dtsuperbrnchprdt = vdbmngr.SelectQuery(cmd).Tables[0];
                    int unitprice = 0;
                    int DTarget = 0;
                    int WTarget = 0;
                    int MTarget = 0;
                    bool flaginactive = false;
                    foreach (DataRow drbrnchprdt in dtsuperbrnchprdt.Rows)
                    {
                        cmd = new MySqlCommand("insert into branchproducts (branch_sno,product_sno,unitprice,flag,userdata_sno,DTarget,WTarget,MTarget) values (@branchname,@productname,@unitprice,@flag, @username,@DTarget,@WTarget,@MTarget)");
                        cmd.Parameters.AddWithValue("@branchname", sno);
                        cmd.Parameters.AddWithValue("@productname", drbrnchprdt["product_sno"].ToString());
                        cmd.Parameters.AddWithValue("@unitprice", unitprice);
                        cmd.Parameters.AddWithValue("@flag", flaginactive);
                        cmd.Parameters.AddWithValue("@username", context.Session["userdata_sno"].ToString());
                        cmd.Parameters.AddWithValue("@DTarget", DTarget);
                        cmd.Parameters.AddWithValue("@WTarget", WTarget);
                        cmd.Parameters.AddWithValue("@MTarget", MTarget);
                        vdbmngr.insert(cmd);
                    }
                    cmd = new MySqlCommand("insert into inventory_monitor (BranchId,Inv_Sno,Qty) values (@brnchid,@inv_sno,@qty) ");
                    cmd.Parameters.AddWithValue("@brnchid", sno);
                    int invsno = 1;
                    int qty = 0;
                    cmd.Parameters.AddWithValue("@inv_sno", invsno);
                    cmd.Parameters.AddWithValue("@qty", qty);
                    vdbmngr.insert(cmd);
                    msg = "Branch data successfully saved";
                }
                else if (operationtype == "MODIFY")
                {
                    string sno = context.Request["brncsno"];
                    cmd = new MySqlCommand("update branchdata set stateid=@stateid, gstno=@gstno, regtype=@regtype, doorno=@doorno,area=@area, BranchName=@brnchsname,salestype=@salestype,Lat=@lat,Lng=@lng,phonenumber=@phonenumber,flag=@flag,WTarget=@wtarget,MTarget=@mtarget,DTarget=@dtarget,CollectionType=@ct,DueLimit=@DueLimit,SalesRepresentative=@SalesRepresentative,Due_Limit_Days=@Due_Limit_Days,Due_Limit_Type=@Due_Limit_Type,ladger_dr_code=@ladger_dr_code,tBranchName=@tBranchName,BranchCode=@BranchCode,TinNumber=@TinNumber,ladger_dr=@ladger_dr,panno=@panno,statename=@statename,customercode=@customercode,whcode=@whcode,street=@street,city=@city,mandal=@mandal,district=@district,pincode=@pincode,cst=@cst,email=@email,bankid=@bankid,ifsccode=@ifsccode,accountno=@accountno where sno=@sno");
                    cmd.Parameters.AddWithValue("@gstno", GSTIN);
                    cmd.Parameters.AddWithValue("@doorno", doorno);
                    cmd.Parameters.AddWithValue("@area", area);
                    cmd.Parameters.AddWithValue("@brnchsname", brnchsname);
                    cmd.Parameters.AddWithValue("@salestype", salestype);
                    cmd.Parameters.AddWithValue("@lat", brnchlatitude);
                    cmd.Parameters.AddWithValue("@lng", brnchlong);
                    cmd.Parameters.AddWithValue("@phonenumber", agent_mobile);
                    if (flag == "Active")
                    {
                        cmd.Parameters.AddWithValue("@flag", true);
                    }
                    else
                    {
                        cmd.Parameters.AddWithValue("@flag", false);
                    }
                    cmd.Parameters.AddWithValue("@wtarget", wtarget);
                    cmd.Parameters.AddWithValue("@mtarget", mtarget);
                    cmd.Parameters.AddWithValue("@dtarget", dtarget);
                    cmd.Parameters.AddWithValue("@ct", collectiontype);
                    if (cmblimittype == "Amount")
                    {
                        double limitdays = 0;
                        cmd.Parameters.AddWithValue("@DueLimit", duelimit);
                        cmd.Parameters.AddWithValue("@Due_Limit_Days", limitdays);
                    }
                    cmd.Parameters.AddWithValue("@SalesRepresentative", SRName);
                    cmd.Parameters.AddWithValue("@Due_Limit_Type", cmblimittype);
                    if (cmblimittype == "Days")
                    {
                        double limitdays = 0;
                        cmd.Parameters.AddWithValue("@DueLimit", limitdays);
                        cmd.Parameters.AddWithValue("@Due_Limit_Days", duelimit);
                    }
                    cmd.Parameters.AddWithValue("@ladger_dr_code", LedgerCode);
                    cmd.Parameters.AddWithValue("@tBranchName", tally_branchname);
                    cmd.Parameters.AddWithValue("@BranchCode", branchcode);
                    cmd.Parameters.AddWithValue("@TinNumber", tinno);
                    cmd.Parameters.AddWithValue("@ladger_dr", ledgerdr);
                    cmd.Parameters.AddWithValue("@panno", panno);
                    cmd.Parameters.AddWithValue("@statename", state);
                    cmd.Parameters.AddWithValue("@stateid", state);
                    cmd.Parameters.AddWithValue("@customercode", customercode);
                    cmd.Parameters.AddWithValue("@whcode", whccode);
                    //cmd.Parameters.AddWithValue("@branchaddress", branchaddress);
                    cmd.Parameters.AddWithValue("@street", street);
                    cmd.Parameters.AddWithValue("@city", city);
                    cmd.Parameters.AddWithValue("@mandal", mandal);
                    cmd.Parameters.AddWithValue("@district", district);
                    cmd.Parameters.AddWithValue("@pincode", pincode);
                    cmd.Parameters.AddWithValue("@cst", cst);
                    cmd.Parameters.AddWithValue("@email", email);
                    cmd.Parameters.AddWithValue("@regtype", regtype);
                    cmd.Parameters.AddWithValue("@bankid", bankid);
                    cmd.Parameters.AddWithValue("@ifsccode", ifsccode);
                    cmd.Parameters.AddWithValue("@accountno", customeraccno);
                    cmd.Parameters.AddWithValue("@sno", sno);
                    vdbmngr.Update(cmd);
                    msg = "Branch data successfully modified";
                }
                string response = GetJson(msg);
                context.Response.Write(response);
            }
        }
        catch (Exception ex)
        {
            string msg = ex.Message;
            string response = GetJson(msg);
            context.Response.Write(response);
        }
    }
    private void Updatebranchmanagement(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            string level = context.Session["LevelType"].ToString();
            cmd = new MySqlCommand("SELECT branchdata_2.bankid,branchdata_2.ifsccode,branchdata_2.accountno,branchdata_2.gstno,branchdata_2.regtype,branchdata_2.doorno,branchdata_2.area,branchdata_2.stateid,  branchdata.BranchName AS SuperBranchName,branchdata.sno AS SuperSno,branchdata_2.street,branchdata_2.city,branchdata_2.mandal,branchdata_2.district,branchdata_2.pincode,branchdata_2.cst,branchdata_2.email,branchdata_2.Agent_PIC,branchdata_2.ladger_dr_code,branchdata_2.BranchCode,branchdata_2.customercode,branchdata_2.whcode, branchdata_2.TinNumber,branchdata_2.ladger_dr, branchdata_2.incentivename, branchdata_2.panno, branchdata_2.statename,branchdata_2.sno, branchdata_2.BranchName,branchdata_2.tbranchname, branchdata_2.Lat, branchdata_2.Lng, branchdata_2.phonenumber, branchdata_2.userdata_sno, branchdata_2.flag,branchdata_2.WTarget, branchdata_2.MTarget, branchdata_2.DTarget, branchdata_2.CollectionType, branchdata_2.Address, branchdata_2.OrtherBrands,branchdata_2.duelimit, salestypemanagement.salestype, branchmappingtable.SuperBranch, branchdata_2.SalesRepresentative,branchdata_2.Due_Limit_Days,branchdata_2.Due_Limit_Type FROM branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno INNER JOIN branchmappingtable ON branchdata.sno = branchmappingtable.SuperBranch INNER JOIN branchdata branchdata_2 ON branchmappingtable.SubBranch = branchdata_2.sno INNER JOIN salestypemanagement ON branchdata_2.SalesType = salestypemanagement.sno WHERE (branchdata.SalesType IS NOT NULL) AND (branchdata_1.SalesOfficeID = @SOID) AND (branchdata_2.userdata_sno = @username) OR (branchdata.SalesType IS NOT NULL) AND (branchdata_2.userdata_sno = @username) AND (branchdata.sno = @BranchID) ORDER BY branchdata_2.BranchName");
            cmd.Parameters.AddWithValue("@username", context.Session["userdata_sno"].ToString());
            cmd.Parameters.AddWithValue("@SOID", context.Session["branch"].ToString());
            cmd.Parameters.AddWithValue("@BranchID", context.Session["branch"].ToString());
            DataTable dt = vdbmngr.SelectQuery(cmd).Tables[0];
            cmd = new MySqlCommand("SELECT branchdata.* FROM branchdata INNER JOIN branchdata branchdata_1 ON branchdata.sno = branchdata_1.sno WHERE (branchdata_1.SalesOfficeID = @SOID) AND (branchdata.SalesType IS NOT NULL) OR (branchdata.SalesType IS NOT NULL) AND (branchdata.sno = @BranchID)");
            cmd.Parameters.AddWithValue("@SOID", context.Session["branch"].ToString());
            cmd.Parameters.AddWithValue("@BranchID", context.Session["branch"].ToString());
            DataTable dtBranch = vdbmngr.SelectQuery(cmd).Tables[0];
            List<BranchDetails> BranchDetailslist = new List<BranchDetails>();

            foreach (DataRow dr in dt.Rows)
            {
                BranchDetails GetBranchDetails = new BranchDetails();
                GetBranchDetails.BranchName = dr["BranchName"].ToString();
                GetBranchDetails.Branchid = dr["SuperBranch"].ToString();
                GetBranchDetails.TBranchName = dr["TBranchName"].ToString();
                GetBranchDetails.Salestype = dr["salestype"].ToString();
                GetBranchDetails.collectiontyp = dr["CollectionType"].ToString();
                GetBranchDetails.phone = dr["phonenumber"].ToString();
                GetBranchDetails.address = "" + dr["street"].ToString() + "" + dr["city"].ToString() + "" + dr["mandal"].ToString() + "" + dr["district"].ToString() + "" + dr["pincode"].ToString() + "" + dr["cst"].ToString() + "" + dr["email"].ToString() + "";
                GetBranchDetails.Flag = dr["flag"].ToString();
                GetBranchDetails.WTarget = dr["WTarget"].ToString();
                GetBranchDetails.DTarget = dr["DTarget"].ToString();
                GetBranchDetails.MTarget = dr["MTarget"].ToString();
                GetBranchDetails.refsno = dr["sno"].ToString();
                GetBranchDetails.sno = dr["SuperBranch"].ToString();
                GetBranchDetails.Otherbrands = dr["OrtherBrands"].ToString();
                GetBranchDetails.lat = dr["Lat"].ToString();
                GetBranchDetails.lng = dr["Lng"].ToString();
                GetBranchDetails.Salesrep = dr["SalesRepresentative"].ToString();
                GetBranchDetails.branchcode = dr["BranchCode"].ToString();
                GetBranchDetails.tinno = dr["TinNumber"].ToString();
                GetBranchDetails.ledgerdr = dr["ladger_dr"].ToString();
                GetBranchDetails.incentive = dr["incentivename"].ToString();
                GetBranchDetails.panno = dr["panno"].ToString();
                GetBranchDetails.state = dr["stateid"].ToString();
                GetBranchDetails.customercode = dr["customercode"].ToString();
                GetBranchDetails.whcode = dr["whcode"].ToString();
                GetBranchDetails.ladger_dr_code = dr["ladger_dr_code"].ToString();
                GetBranchDetails.street = dr["street"].ToString();
                GetBranchDetails.city = dr["city"].ToString();
                GetBranchDetails.mandal = dr["mandal"].ToString();
                GetBranchDetails.district = dr["district"].ToString();
                GetBranchDetails.pincode = dr["pincode"].ToString();
                GetBranchDetails.cst = dr["cst"].ToString();
                GetBranchDetails.email = dr["email"].ToString();
                GetBranchDetails.SuperBranchName = dr["SuperBranchName"].ToString();
                GetBranchDetails.SuperSno = dr["SuperSno"].ToString();
                GetBranchDetails.Agent_PIC = dr["Agent_PIC"].ToString();
                GetBranchDetails.ftplocation = "ftp://223.196.32.30:21/Sales/";
                GetBranchDetails.area = dr["area"].ToString();
                GetBranchDetails.gstin = dr["gstno"].ToString();
                GetBranchDetails.regtype = dr["regtype"].ToString();
                GetBranchDetails.doorno = dr["doorno"].ToString();
                GetBranchDetails.duelimit = dr["DueLimit"].ToString();
                GetBranchDetails.LimitDays = dr["Due_Limit_Days"].ToString();
                GetBranchDetails.Bankid = dr["bankid"].ToString();
                GetBranchDetails.ifsccode = dr["ifsccode"].ToString();
                GetBranchDetails.customeraccno = dr["accountno"].ToString();
                BranchDetailslist.Add(GetBranchDetails);
            }
            foreach (DataRow dr in dtBranch.Rows)
            {
                BranchDetails GetBranchDetails = new BranchDetails();
                GetBranchDetails.BranchName = dr["BranchName"].ToString();
                GetBranchDetails.Branchid = context.Session["branch"].ToString();
                GetBranchDetails.TBranchName = dr["TBranchName"].ToString();
                GetBranchDetails.Salestype = dr["salestype"].ToString();
                GetBranchDetails.SuperBranchName = dr["BranchName"].ToString();
                GetBranchDetails.SuperSno = dr["sno"].ToString();
                GetBranchDetails.collectiontyp = dr["CollectionType"].ToString();
                GetBranchDetails.phone = dr["phonenumber"].ToString();
                GetBranchDetails.address = "" + dr["street"].ToString() + "" + dr["city"].ToString() + "" + dr["mandal"].ToString() + "" + dr["district"].ToString() + "" + dr["pincode"].ToString() + "" + dr["cst"].ToString() + "" + dr["email"].ToString() + "";
                GetBranchDetails.Flag = dr["flag"].ToString();
                GetBranchDetails.WTarget = dr["WTarget"].ToString();
                GetBranchDetails.DTarget = dr["DTarget"].ToString();
                GetBranchDetails.MTarget = dr["MTarget"].ToString();
                GetBranchDetails.refsno = dr["sno"].ToString();
                //GetBranchDetails.sno = dr["SuperBranch"].ToString();
                GetBranchDetails.Otherbrands = dr["OrtherBrands"].ToString();
                GetBranchDetails.lat = dr["Lat"].ToString();
                GetBranchDetails.lng = dr["Lng"].ToString();
                GetBranchDetails.Salesrep = dr["SalesRepresentative"].ToString();
                GetBranchDetails.branchcode = dr["BranchCode"].ToString();
                GetBranchDetails.tinno = dr["TinNumber"].ToString();
                GetBranchDetails.ledgerdr = dr["ladger_dr"].ToString();
                GetBranchDetails.incentive = dr["incentivename"].ToString();
                GetBranchDetails.panno = dr["panno"].ToString();
                GetBranchDetails.state = dr["statename"].ToString();
                GetBranchDetails.customercode = dr["customercode"].ToString();
                GetBranchDetails.whcode = dr["whcode"].ToString();
                GetBranchDetails.ladger_dr_code = dr["ladger_dr_code"].ToString();
                GetBranchDetails.street = dr["street"].ToString();
                GetBranchDetails.city = dr["city"].ToString();
                GetBranchDetails.mandal = dr["mandal"].ToString();
                GetBranchDetails.district = dr["district"].ToString();
                GetBranchDetails.pincode = dr["pincode"].ToString();
                GetBranchDetails.cst = dr["cst"].ToString();
                GetBranchDetails.email = dr["email"].ToString();
                GetBranchDetails.Agent_PIC = dr["Agent_PIC"].ToString();
                GetBranchDetails.ftplocation = "ftp://223.196.32.30:21/Sales/";
                GetBranchDetails.area = dr["area"].ToString();
                GetBranchDetails.gstin = dr["gstno"].ToString();
                GetBranchDetails.regtype = dr["regtype"].ToString();
                GetBranchDetails.doorno = dr["doorno"].ToString();
                GetBranchDetails.duelimit = dr["DueLimit"].ToString();
                GetBranchDetails.Bankid = dr["bankid"].ToString();
                GetBranchDetails.ifsccode = dr["ifsccode"].ToString();
                GetBranchDetails.customeraccno = dr["accountno"].ToString();
                GetBranchDetails.LimitDays = dr["Due_Limit_Days"].ToString();
                BranchDetailslist.Add(GetBranchDetails);
            }
            string response = GetJson(BranchDetailslist);
            context.Response.Write(response);

        }
        catch (Exception ex)
        {
            string msg = ex.Message;
            string response = GetJson(msg);
            context.Response.Write(response);
        }
    }
    private void Update_grid_oncheck_change_branchmanagement(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            string level = context.Session["LevelType"].ToString();
            string brnch_checked = context.Request["checkedbranch"];
            if (level == "Admin")
            {
                cmd = new MySqlCommand("SELECT branchdata.BranchName,branchdata.tbranchname,branchdata.sno,branchdata.CollectionType, branchdata.userdata_sno,branchdata.phonenumber, branchdata.flag,branchdata.WTarget,branchdata.MTarget,branchdata.DTarget, salestypemanagement.salestype, branchmappingtable.SuperBranch FROM branchdata INNER JOIN salestypemanagement ON branchdata.SalesType = salestypemanagement.sno INNER JOIN branchmappingtable ON branchdata.sno = branchmappingtable.SubBranch WHERE (branchdata.userdata_sno = @username) and branchmappingtable.SubBranch=@subbrnch ");
                cmd.Parameters.AddWithValue("@username", context.Session["userdata_sno"].ToString());
                cmd.Parameters.AddWithValue("@subbrnch", context.Session["Branch"].ToString());
            }
            if (level == "MAdmin")
            {
                cmd = new MySqlCommand("SELECT branchdata.BranchName,branchdata.sno,branchdata.tbranchname,branchdata.CollectionType, branchdata.userdata_sno,branchdata.phonenumber, branchdata.flag,branchdata.WTarget,branchdata.MTarget,branchdata.DTarget, salestypemanagement.salestype, branchmappingtable.SuperBranch FROM branchdata INNER JOIN salestypemanagement ON branchdata.SalesType = salestypemanagement.sno INNER JOIN branchmappingtable ON branchdata.sno = branchmappingtable.SubBranch WHERE (branchdata.userdata_sno = @username) ");
                cmd.Parameters.AddWithValue("@username", context.Session["userdata_sno"].ToString());
            }
            DataTable dt = vdbmngr.SelectQuery(cmd).Tables[0];
            List<BranchDetails> BranchDetailslist = new List<BranchDetails>();
            foreach (DataRow dr in dt.Rows)
            {
                BranchDetails GetBranchDetails = new BranchDetails();
                GetBranchDetails.BranchName = dr["BranchName"].ToString();
                GetBranchDetails.TBranchName = dr["tbranchname"].ToString();
                GetBranchDetails.Salestype = dr["salestype"].ToString();
                GetBranchDetails.collectiontyp = dr["CollectionType"].ToString();
                GetBranchDetails.phone = dr["phonenumber"].ToString();
                GetBranchDetails.Flag = dr["flag"].ToString();
                GetBranchDetails.WTarget = dr["WTarget"].ToString();
                GetBranchDetails.DTarget = dr["DTarget"].ToString();
                GetBranchDetails.MTarget = dr["MTarget"].ToString();
                GetBranchDetails.refsno = dr["sno"].ToString();
                GetBranchDetails.sno = dr["SuperBranch"].ToString();
                BranchDetailslist.Add(GetBranchDetails);
            }
            string response = GetJson(BranchDetailslist);
            context.Response.Write(response);

        }
        catch (Exception ex)
        {
            string msg = ex.Message;
            string response = GetJson(msg);
            context.Response.Write(response);
        }
    }
    public class BranchDetails
    {
        public string sno { get; set; }
        public string WTarget { get; set; }
        public string MTarget { get; set; }
        public string DTarget { get; set; }
        public string BranchName { get; set; }
        public string TBranchName { get; set; }
        public string Salestype { get; set; }
        public string PaymentTerm { get; set; }
        public string phone { get; set; }
        public string address { get; set; }
        public string Flag { get; set; }
        public string refsno { get; set; }
        public string ladger_dr_code { get; set; }
        public string collectiontyp { get; set; }
        public string lat { get; set; }
        public string lng { get; set; }
        public string Otherbrands { get; set; }
        public string duelimit { get; set; }
        public string Salesrep { get; set; }
        public string LimitDays { get; set; }
        public string Due_Limit_Type { get; set; }
        public string branchcode { get; set; }
        public string tinno { get; set; }
        public string ledgerdr { get; set; }
        public string state { get; set; }
        public string incentive { get; set; }
        public string panno { get; set; }
        public string whcode { get; set; }
        public string customercode { get; set; }
        public string Lat_Lng { get; set; }
        public string RouteName { get; set; }
        public string CompanyName { get; set; }
        public string doorno { get; set; }
        public string area { get; set; }
        public string gstin { get; set; }
        public string freezer_type { get; set; }
        public string TotalAmount { get; set; }
        public string InstallAmount { get; set; }
        public string CratesDue { get; set; }
        public string CansDue { get; set; }
        public string BalAmount { get; set; }
        public string DueLimit { get; set; }
        public string CreateDate { get; set; }
        public string Branchid { get; set; }
        public string ftplocation { get; set; }
        public string Agent_PIC { get; set; }
        public string street { get; set; }
        public string city { get; set; }
        public string mandal { get; set; }
        public string district { get; set; }
        public string pincode { get; set; }
        public string cst { get; set; }
        public string email { get; set; }
        public string SuperBranchName { get; set; }
        public string SuperSno { get; set; }

        public string Bankid { get; set; }
        public string ifsccode { get; set; }
        public string customeraccno { get; set; }
        public string regtype { get; set; }
    }
    private void save_branchproducts_click(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            string checkedbranch = context.Request["checkedbranch"];
            string categoryname = context.Request["categoryname"];
            string cmbbranchsubcatgry = context.Request["cmbsubcatgry"];
            string cmbproductname = context.Request["cmbproductname"];
            string unitprice = context.Request["productunitprice"];
            string VatPercent = context.Request["VatPercent"];
            string mrp = context.Request["mrp"];

            string cgst = context.Request["cgst"];
            string sgst = context.Request["sgst"];
            string igst = context.Request["igst"];
            DateTime ServerDateCurrentdate = VehicleDBMgr.GetTime(vdbmngr.conn);
            int productDaytarget = 0;
            int productWeektarget = 0;
            int productMonthtarget = 0;
            string flag = context.Request["branchproductflag"];
            string username = context.Request["username"];
            string operationtype = context.Request["operationtype"];
            string msg = "";
            if (operationtype == "SAVE")
            {
                cmd = new MySqlCommand("Select IFNULL(MAX(Rank),0)+1 as Sno  from branchproducts where branch_sno=@BranchID");
                cmd.Parameters.AddWithValue("@BranchID", checkedbranch);
                DataTable dtrank = vdbmngr.SelectQuery(cmd).Tables[0];
                string Rank = dtrank.Rows[0]["Sno"].ToString();
                cmd = new MySqlCommand("insert into branchproducts (branch_sno,product_sno,unitprice,userdata_sno,DTarget,WTarget,MTarget,Rank,VatPercent,cgst,sgst,igst,mrp) values (@branchname,@productname,@unitprice, @username,@DTarget,@WTarget,@MTarget,@Rank,@VatPercent,@cgst,@sgst,@igst,@mrp)");
                // cmd = new MySqlCommand("insert into branchproducts (branch_sno,product_sno,unitprice,userdata_sno,DTarget,WTarget,MTarget,Rank,VatPercent) values (@branchname,@productname,@unitprice, @username,@DTarget,@WTarget,@MTarget,@Rank,@VatPercent)");
                cmd.Parameters.AddWithValue("@branchname", checkedbranch);
                cmd.Parameters.AddWithValue("@productname", cmbproductname);
                cmd.Parameters.AddWithValue("@unitprice", unitprice);
                cmd.Parameters.AddWithValue("@username", context.Session["userdata_sno"].ToString());
                cmd.Parameters.AddWithValue("@DTarget", productDaytarget);
                cmd.Parameters.AddWithValue("@WTarget", productWeektarget);
                cmd.Parameters.AddWithValue("@MTarget", productMonthtarget);
                int ranking = 0;
                int.TryParse(Rank, out ranking);
                cmd.Parameters.AddWithValue("@Rank", ranking);
                cmd.Parameters.AddWithValue("@VatPercent", VatPercent);
                cmd.Parameters.AddWithValue("@cgst", cgst);
                cmd.Parameters.AddWithValue("@sgst", sgst);
                cmd.Parameters.AddWithValue("@igst", igst);
                cmd.Parameters.AddWithValue("@mrp", mrp);
                vdbmngr.insert(cmd);
                msg = "Branch products data successfully Saved";
            }
            else if (operationtype == "MODIFY")
            {
                string sno = context.Request["sno"];
                cmd = new MySqlCommand("SELECT branch_sno, product_sno, unitprice,VatPercent FROM branchproducts WHERE (product_sno = @prdtsno) AND (branch_sno = @brnch_sno)");
                cmd.Parameters.AddWithValue("@prdtsno", cmbproductname);
                cmd.Parameters.AddWithValue("@brnch_sno", sno);
                DataTable dtprevious_prdtrates = vdbmngr.SelectQuery(cmd).Tables[0];
                cmd = new MySqlCommand("update branchproducts set branch_sno=@branchname,product_sno=@productname,unitprice=@unitprice,flag=@flag,DTarget=@DTarget,WTarget=@WTarget,MTarget=@MTarget,VatPercent=@VatPercent,cgst=@cgst,sgst=@sgst,igst=@igst,mrp=@mrp where branch_sno='" + sno + "' and product_sno='" + cmbproductname + "'");
                //  cmd = new MySqlCommand("update branchproducts set branch_sno=@branchname,product_sno=@productname,unitprice=@unitprice,flag=@flag,DTarget=@DTarget,WTarget=@WTarget,MTarget=@MTarget,VatPercent=@VatPercent where branch_sno='" + sno + "' and product_sno='" + cmbproductname + "'");
                cmd.Parameters.AddWithValue("@branchname", checkedbranch);
                cmd.Parameters.AddWithValue("@productname", cmbproductname);
                cmd.Parameters.AddWithValue("@unitprice", unitprice);
                cmd.Parameters.AddWithValue("@DTarget", productDaytarget);
                cmd.Parameters.AddWithValue("@WTarget", productWeektarget);
                cmd.Parameters.AddWithValue("@MTarget", productMonthtarget);
                cmd.Parameters.AddWithValue("@VatPercent", VatPercent);
                cmd.Parameters.AddWithValue("@cgst", cgst);
                cmd.Parameters.AddWithValue("@sgst", sgst);
                cmd.Parameters.AddWithValue("@igst", igst);
                cmd.Parameters.AddWithValue("@mrp", mrp);
                if (flag == "Active")
                {
                    cmd.Parameters.AddWithValue("@flag", true);
                }
                else
                {
                    cmd.Parameters.AddWithValue("@flag", false);
                }
                vdbmngr.Update(cmd);
                foreach (DataRow dreditproducts in dtprevious_prdtrates.Rows)
                {
                    cmd = new MySqlCommand("insert into productsrateslogs (PrdtSno,BranchId,OldPrice,EditedPrice,EditedUserid,DateOfEdit,VatPercent,EditedVAT) values (@PrdtSno,@BranchId,@OldPrice,@EditedPrice,@EditedUserid,@DateOfEdit,@VatPercent,@EditedVAT)");
                    cmd.Parameters.AddWithValue("@PrdtSno", cmbproductname);
                    cmd.Parameters.AddWithValue("@BranchId", checkedbranch);
                    cmd.Parameters.AddWithValue("@OldPrice", dreditproducts["unitprice"].ToString());
                    cmd.Parameters.AddWithValue("@EditedPrice", unitprice);
                    cmd.Parameters.AddWithValue("@EditedUserid", context.Session["UserSno"].ToString());
                    cmd.Parameters.AddWithValue("@DateOfEdit", ServerDateCurrentdate);
                    if (dreditproducts["VatPercent"].ToString() == "")
                    {
                        cmd.Parameters.AddWithValue("@VatPercent", "0");
                    }
                    else
                    {
                        cmd.Parameters.AddWithValue("@VatPercent", dreditproducts["VatPercent"].ToString());

                    }
                    cmd.Parameters.AddWithValue("@EditedVAT", VatPercent);
                    vdbmngr.insert(cmd);
                }
                msg = "Branch products data successfully modified";
            }
            string response = GetJson(msg);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string msg = ex.Message;
            string response = GetJson(msg);
            context.Response.Write(response);
        }
    }
    private void UpdateBranchProducts(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            string username = context.Request["username"];
            string CustomerSno = context.Request["CustomerSno"];
            string level = context.Session["LevelType"].ToString();
            if (level == "Admin")
            {
                cmd = new MySqlCommand("SELECT branchproducts.cgst,branchproducts.mrp,branchproducts.sgst, branchproducts.igst,branchdata.BranchName, productsdata.sno, productsdata.ProductName, branchproducts.unitprice, branchproducts.DTarget, branchproducts.WTarget, branchproducts.MTarget, branchproducts.branch_sno, branchproducts.flag, branchproducts.VatPercent, products_subcategory.SubCatName,products_subcategory.sno As SubCatSno, products_category.Categoryname,products_category.sno AS CatSno FROM branchdata INNER JOIN branchproducts ON branchdata.sno = branchproducts.branch_sno INNER JOIN productsdata ON branchproducts.product_sno = productsdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno WHERE (branchproducts.branch_sno = @CustomerSno) ORDER BY branchdata.BranchName");
                cmd.Parameters.AddWithValue("@CustomerSno", CustomerSno);
            }
            if (level == "MAdmin")
            {
                cmd = new MySqlCommand("SELECT branchproducts.cgst, branchproducts.mrp,branchproducts.sgst, branchproducts.igst,branchdata.BranchName,productsdata.sno, productsdata.ProductName, branchproducts.unitprice,branchproducts.DTarget,branchproducts.WTarget,branchproducts.MTarget, branchproducts.branch_sno,branchproducts.VatPercent, branchproducts.flag,products_subcategory.SubCatName, products_category.Categoryname, branchmappingtable.SuperBranch FROM branchdata INNER JOIN branchproducts ON branchdata.sno = branchproducts.branch_sno INNER JOIN productsdata ON branchproducts.product_sno = productsdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno INNER JOIN branchmappingtable ON branchdata.sno = branchmappingtable.SubBranch ORDER BY branchdata.BranchName");
            }
            DataTable dt = vdbmngr.SelectQuery(cmd).Tables[0];
            List<BranchProducts> BranchProductslist = new List<BranchProducts>();
            foreach (DataRow dr in dt.Rows)
            {
                BranchProducts GetBranchProducts = new BranchProducts();
                GetBranchProducts.branchsno = dr["branch_sno"].ToString();
                GetBranchProducts.pdtsno = dr["sno"].ToString();
                GetBranchProducts.BranchName = dr["BranchName"].ToString();
                GetBranchProducts.Categoryname = dr["Categoryname"].ToString();
                GetBranchProducts.SubCatName = dr["SubCatName"].ToString();
                GetBranchProducts.ProductName = dr["ProductName"].ToString();
                GetBranchProducts.UnitPrice = dr["unitprice"].ToString();
                GetBranchProducts.DTarget = dr["DTarget"].ToString();
                GetBranchProducts.WTarget = dr["WTarget"].ToString();
                GetBranchProducts.MTarget = dr["MTarget"].ToString();
                GetBranchProducts.flag = dr["flag"].ToString();
                GetBranchProducts.VatPercent = dr["VatPercent"].ToString();
                GetBranchProducts.CatSno = dr["CatSno"].ToString();
                GetBranchProducts.SubCatSno = dr["SubCatSno"].ToString();
                GetBranchProducts.cgst = dr["cgst"].ToString();
                GetBranchProducts.sgst = dr["sgst"].ToString();
                GetBranchProducts.igst = dr["igst"].ToString();
                GetBranchProducts.mrp = dr["mrp"].ToString();
                BranchProductslist.Add(GetBranchProducts);
            }
            string response = GetJson(BranchProductslist);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string msg = ex.Message;
            string response = GetJson(msg);
            context.Response.Write(response);
        }
    }
    private void updatebrnchprdt_check_togrid(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            string username = context.Request["username"];
            string level = context.Session["LevelType"].ToString();
            string brnch_prdt_checked = context.Request["checkedbranch"];
            if (level == "Admin")
            {
                cmd = new MySqlCommand("SELECT branchdata.BranchName, productsdata.sno, productsdata.ProductName, branchproducts.unitprice, branchproducts.DTarget, branchproducts.WTarget,branchproducts.MTarget, branchproducts.branch_sno, branchproducts.flag, branchproducts.VatPercent, products_subcategory.SubCatName, products_category.Categoryname FROM branchdata INNER JOIN branchproducts ON branchdata.sno = branchproducts.branch_sno INNER JOIN productsdata ON branchproducts.product_sno = productsdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno WHERE (branchproducts.branch_sno = @superbrch)");
                cmd.Parameters.AddWithValue("@superbrch", brnch_prdt_checked);
            }
            if (level == "MAdmin")
            {
                cmd = new MySqlCommand("SELECT branchdata.BranchName,productsdata.sno, productsdata.ProductName, branchproducts.unitprice,branchproducts.DTarget,branchproducts.WTarget,branchproducts.MTarget, branchproducts.branch_sno, branchproducts.flag,branchproducts.VatPercent,products_subcategory.SubCatName, products_category.Categoryname, branchmappingtable.SuperBranch FROM branchdata INNER JOIN branchproducts ON branchdata.sno = branchproducts.branch_sno INNER JOIN productsdata ON branchproducts.product_sno = productsdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno INNER JOIN branchmappingtable ON branchdata.sno = branchmappingtable.SubBranch WHERE(branchmappingtable.SubBranch=@superbrch)");
                cmd.Parameters.AddWithValue("@superbrch", brnch_prdt_checked);
            }
            DataTable dt = vdbmngr.SelectQuery(cmd).Tables[0];
            List<BranchProducts> BranchProductslist = new List<BranchProducts>();
            foreach (DataRow dr in dt.Rows)
            {
                BranchProducts GetBranchProducts = new BranchProducts();
                GetBranchProducts.branchsno = dr["branch_sno"].ToString();
                GetBranchProducts.pdtsno = dr["sno"].ToString();
                GetBranchProducts.BranchName = dr["BranchName"].ToString();
                GetBranchProducts.Categoryname = dr["Categoryname"].ToString();
                GetBranchProducts.SubCatName = dr["SubCatName"].ToString();
                GetBranchProducts.ProductName = dr["ProductName"].ToString();
                GetBranchProducts.UnitPrice = dr["unitprice"].ToString();
                GetBranchProducts.DTarget = dr["DTarget"].ToString();
                GetBranchProducts.WTarget = dr["WTarget"].ToString();
                GetBranchProducts.MTarget = dr["MTarget"].ToString();
                GetBranchProducts.flag = dr["flag"].ToString();
                GetBranchProducts.VatPercent = dr["VatPercent"].ToString();
                BranchProductslist.Add(GetBranchProducts);
            }
            string response = GetJson(BranchProductslist);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string msg = ex.Message;
            string response = GetJson(msg);
            context.Response.Write(response);
        }
    }
    public class BranchProducts
    {
        public string BranchName { get; set; }
        public string Categoryname { get; set; }
        public string SubCatName { get; set; }
        public string ProductName { get; set; }
        public string UnitPrice { get; set; }
        public string flag { get; set; }
        public string branchsno { get; set; }
        public string pdtsno { get; set; }
        public string DTarget { get; set; }
        public string WTarget { get; set; }
        public string MTarget { get; set; }
        public string VatPercent { get; set; }
        public string SubCatSno { get; set; }
        public string CatSno { get; set; }
        public string cgst { get; set; }
        public string sgst { get; set; }
        public string igst { get; set; }
        public string mrp { get; set; }
    }
    private void Emplogins_management(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            string lvltype = context.Session["LevelType"].ToString();
            string Username = context.Session["userdata_sno"].ToString();
            string checkedbranch = context.Request["checkedbranch"];
            string loginusername = context.Request["loginsusername"];
            string loginpassword = context.Request["loginspassword"];
            string leveltype = context.Request["loginsleveltype"];
            string employeename = context.Request["employeename"];
            string mobileno = context.Request["mobileno"];
            string address = context.Request["address"];
            string email = context.Request["email"];
            string previouscompany = context.Request["Previouscompany"];
            string refference = context.Request["refference"];
            string departmentsno = context.Request["department"];
            string flag = context.Request["loginsflag"];
            string street = context.Request["street"];
            string city = context.Request["city"];
            string mandal = context.Request["mandal"];
            string district = context.Request["district"];
            string state = context.Request["state"];
            string pincode = context.Request["pincode"];
            string tinno = context.Request["tinno"];
            string cstno = context.Request["cstno"];
            string panno = context.Request["panno"];
            string otpstatus = context.Request["otpstatus"];
            DateTime ServerDateCurrentdate = VehicleDBMgr.GetTime(vdbmngr.conn);
            int dtrgt = 0;
            int wtrgt = 0;
            int mtrgt = 0;
            int.TryParse(context.Request["daytarget"], out dtrgt);
            int.TryParse(context.Request["weektarget"], out wtrgt);
            int.TryParse(context.Request["monthtarget"], out mtrgt);
            string operationtype = context.Request["operationtype"];
            List<string> MsgList = new List<string>();
            if (operationtype == "SAVE")
            {
                cmd = new MySqlCommand("insert into empmanage (UserName,Password,LevelType,UserData_sno,Branch,EmpName,Address,Mobno,Email,LWC,RefName,Dept_Sno,MTarget,WTarget,DTarget,street,city,mandal,distic,state,pincode,panno,otpstatus) values (@loginusername,@loginpassword,@leveltype,@UserName,@checkedbranch,@EmpName,@Address,@Mobno,@email,@previouscompany,@refference,@departmentsno,@mtrgt,@wtrgt,@dtrgt,@street,@city,@mandal,@distic,@state,@pincode,@panno,@otpstatus)");
                cmd.Parameters.AddWithValue("@loginusername", loginusername);
                cmd.Parameters.AddWithValue("@loginpassword", loginpassword);
                cmd.Parameters.AddWithValue("@leveltype", leveltype);
                cmd.Parameters.AddWithValue("@checkedbranch", checkedbranch);
                cmd.Parameters.AddWithValue("@UserName", context.Session["userdata_sno"].ToString());
                cmd.Parameters.AddWithValue("@EmpName", employeename);
                cmd.Parameters.AddWithValue("@Address", address);
                cmd.Parameters.AddWithValue("@email", email);
                cmd.Parameters.AddWithValue("@previouscompany", previouscompany);
                cmd.Parameters.AddWithValue("@refference", refference);
                cmd.Parameters.AddWithValue("@departmentsno", departmentsno);
                cmd.Parameters.AddWithValue("@Mobno", mobileno);
                cmd.Parameters.AddWithValue("@dtrgt", dtrgt);
                cmd.Parameters.AddWithValue("@wtrgt", wtrgt);
                cmd.Parameters.AddWithValue("@mtrgt", mtrgt);
                cmd.Parameters.AddWithValue("@street", street);
                cmd.Parameters.AddWithValue("@city", city);
                cmd.Parameters.AddWithValue("@mandal", mandal);
                cmd.Parameters.AddWithValue("@distic", district);
                cmd.Parameters.AddWithValue("@state", state);
                cmd.Parameters.AddWithValue("@pincode", pincode);
                cmd.Parameters.AddWithValue("@panno", panno);
                cmd.Parameters.AddWithValue("@otpstatus", otpstatus);
                long empid = vdbmngr.insertScalar(cmd);
                string msg = "Employees data successfully Saved";
                string response = GetJson(msg);
                context.Response.Write(response);
            }
            else if (operationtype == "MODIFY")
            {
                string sno = context.Request["sno"];
                cmd = new MySqlCommand("update empmanage set UserName=@loginusername,Password=@loginpassword,LevelType=@LevelType,Branch=@branchsno,flag=@flag,EmpName=@EmpName,Address=@Address,Mobno=@Mobno,Email=@email,LWC=@previouscompany,RefName=@refference,Dept_Sno=@departmentsno,MTarget=@mtrgt,WTarget=@wtrgt,DTarget=@dtrgt,street=@street,city=@city,mandal=@mandal,distic=@distic,state=@state,pincode=@pincode,panno=@panno,otpstatus=@otpstatus where Sno='" + sno + "'");
                cmd.Parameters.AddWithValue("@loginusername", loginusername);
                cmd.Parameters.AddWithValue("@loginpassword", loginpassword);
                cmd.Parameters.AddWithValue("@leveltype", leveltype);
                cmd.Parameters.AddWithValue("@branchsno", checkedbranch);
                cmd.Parameters.AddWithValue("@EmpName", employeename);
                cmd.Parameters.AddWithValue("@Address", address);
                cmd.Parameters.AddWithValue("@Mobno", mobileno);
                cmd.Parameters.AddWithValue("@email", email);
                cmd.Parameters.AddWithValue("@previouscompany", previouscompany);
                cmd.Parameters.AddWithValue("@refference", refference);
                cmd.Parameters.AddWithValue("@departmentsno", departmentsno);
                cmd.Parameters.AddWithValue("@dtrgt", dtrgt);
                cmd.Parameters.AddWithValue("@wtrgt", wtrgt);
                cmd.Parameters.AddWithValue("@mtrgt", mtrgt);
                cmd.Parameters.AddWithValue("@street", street);
                cmd.Parameters.AddWithValue("@city", city);
                cmd.Parameters.AddWithValue("@mandal", mandal);
                cmd.Parameters.AddWithValue("@distic", district);
                cmd.Parameters.AddWithValue("@state", state);
                cmd.Parameters.AddWithValue("@pincode", pincode);
                cmd.Parameters.AddWithValue("@panno", panno);
                if (flag == "Active")
                {
                    cmd.Parameters.AddWithValue("@flag", true);
                }
                else
                {
                    cmd.Parameters.AddWithValue("@flag", false);
                }
                cmd.Parameters.AddWithValue("@otpstatus", otpstatus);

                vdbmngr.Update(cmd);
                string msg = "Employees data successfully modified";
                string response = GetJson(msg);
                context.Response.Write(response);
            }
            string content = "Dear%20" + employeename + "%20Your%20Userid%20" + loginusername + ",%&password%20is%20" + loginpassword + ",%20in%20vyshnavi.in%20,please%20Change%20Your%20Userid%20and%20PassWord";
            WebClient client = new WebClient();
            if (mobileno.Length == 10)
            {
                string Date = DateTime.Now.AddDays(1).ToString("dd/MM/yyyy");
                if (context.Session["TitleName"].ToString() == "SRI VYSHNAVI DAIRY SPECIALITIES (P) LTD")
                {
                    //http://www.smsstriker.com/API/sms.php?username=vaishnavidairy&password=vyshnavi@123&from=VYSNVI&to=


                    string baseurl = "http://www.smsstriker.com/API/sms.php?username=vaishnavidairy&password=vyshnavi@123&from=VSALES&to=" + mobileno + "&msg=" + content + "&type=1";
                    Stream data = client.OpenRead(baseurl);
                    StreamReader reader = new StreamReader(data);
                    string ResponseID = reader.ReadToEnd();
                    data.Close();
                    reader.Close();
                }
                else
                {
                    //http://www.smsstriker.com/API/sms.php?username=vaishnavidairy&password=vyshnavi@123&from=VYSNVI&to=


                    string baseurl = "http://www.smsstriker.com/API/sms.php?username=vaishnavidairy&password=vyshnavi@123&from=VFWYRA&to=" + mobileno + "&msg=" + content + "&type=1";
                    Stream data = client.OpenRead(baseurl);
                    StreamReader reader = new StreamReader(data);
                    string ResponseID = reader.ReadToEnd();
                    data.Close();
                    reader.Close();

                }
            }
        }
        catch (Exception ex)
        {
            string msg = ex.Message;
            string response = GetJson(msg);
            context.Response.Write(response);
        }
    }
    private void update_employees_management(HttpContext context)
    {

        try
        {
            string lvltype = context.Session["LevelType"].ToString();
            vdbmngr = new VehicleDBMgr();
            cmd = new MySqlCommand("SELECT branchdata.BranchName,branchdata.sno as BranchSno, branchmappingtable.SubBranch, branchmappingtable.SuperBranch, empmanage.UserName, empmanage.Sno,empmanage.Password, empmanage.Emp_PIC, empmanage.LevelType,empmanage.otpstatus, empmanage.Branch, empmanage.flag, empmanage.Userdata_sno, empmanage.Owner, empmanage.EmpName, empmanage.Address, empmanage.Mobno, empmanage.Email, empmanage.LWC, empmanage.RefName,empmanage.MTarget,empmanage.WTarget,empmanage.DTarget, deptmaster.DeptName ,empmanage.street,empmanage.city,empmanage.mandal,empmanage.distic,empmanage.state,empmanage.pincode,empmanage.panno FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN empmanage ON branchdata.sno = empmanage.Branch INNER JOIN deptmaster ON empmanage.Dept_Sno = deptmaster.Sno  where  empmanage.flag=@flag group by empmanage.UserName");
            cmd.Parameters.AddWithValue("@flag", "1");
            DataTable dt = vdbmngr.SelectQuery(cmd).Tables[0];
            DataTable clonedt = dt.Clone();
            List<employeesmgnt> branchlist = new List<employeesmgnt>();
            DataRow[] drr = dt.Select("SuperBranch=" + context.Session["branch"].ToString());
            DataTable dtt = new DataTable();
            cmd = new MySqlCommand("SELECT branchdata.BranchName,branchdata.sno as BranchSno,empmanage.Sno, empmanage.Branch, empmanage.UserName, empmanage.Password,empmanage.Emp_PIC, empmanage.EmpName, empmanage.Address, empmanage.Mobno, empmanage.Email,empmanage.otpstatus, empmanage.LWC, empmanage.RefName, empmanage.MTarget, empmanage.WTarget, empmanage.DTarget, empmanage.Dept_Sno, deptmaster.DeptName,empmanage.street,empmanage.city,empmanage.mandal,empmanage.distic,empmanage.state,empmanage.pincode,empmanage.panno, empmanage.flag,empmanage.Userdata_sno, empmanage.LevelType FROM branchdata INNER JOIN empmanage ON branchdata.sno = empmanage.Branch INNER JOIN deptmaster ON empmanage.Dept_Sno = deptmaster.Sno WHERE (empmanage.Branch = @brnchsno) ");
            cmd.Parameters.AddWithValue("@brnchsno", context.Session["branch"].ToString());
            DataTable dt1 = vdbmngr.SelectQuery(cmd).Tables[0];
            foreach (DataRow gotdata1 in dt1.Rows)
            {
                DataRow dr1 = clonedt.NewRow();
                dr1["BranchName"] = gotdata1["BranchName"];
                dr1["BranchSno"] = gotdata1["BranchSno"];
                dr1["Sno"] = gotdata1["Sno"];
                dr1["UserName"] = gotdata1["UserName"];
                dr1["Password"] = gotdata1["Password"];
                dr1["EmpName"] = gotdata1["EmpName"];
                dr1["Address"] = gotdata1["Address"];
                dr1["Mobno"] = gotdata1["Mobno"];
                dr1["Email"] = gotdata1["Email"];
                dr1["LWC"] = gotdata1["LWC"];
                dr1["RefName"] = gotdata1["RefName"];
                dr1["MTarget"] = gotdata1["MTarget"];
                dr1["WTarget"] = gotdata1["WTarget"];
                dr1["DTarget"] = gotdata1["DTarget"];
                dr1["DeptName"] = gotdata1["DeptName"];
                dr1["flag"] = gotdata1["flag"];
                dr1["Userdata_sno"] = gotdata1["Userdata_sno"];
                dr1["LevelType"] = gotdata1["LevelType"];

                dr1["street"] = gotdata1["street"];
                dr1["city"] = gotdata1["city"];
                dr1["mandal"] = gotdata1["mandal"];
                dr1["distic"] = gotdata1["distic"];
                dr1["state"] = gotdata1["state"];
                dr1["pincode"] = gotdata1["pincode"];
                dr1["panno"] = gotdata1["panno"];
                dr1["otpstatus"] = gotdata1["otpstatus"];

                dr1["Emp_PIC"] = gotdata1["Emp_PIC"];

                clonedt.Rows.Add(dr1);
            }

            foreach (DataRow gotdata in drr)
            {
                clonedt.ImportRow(gotdata);
            }
            List<employeesmgnt> employeesmgntlist = new List<employeesmgnt>();
            foreach (DataRow dr in clonedt.Rows)
            {
                employeesmgnt employeesmgntobj = new employeesmgnt();
                employeesmgntobj.UserName = dr["UserName"].ToString();
                employeesmgntobj.Password = dr["Password"].ToString();
                employeesmgntobj.LevelType = dr["LevelType"].ToString();
                employeesmgntobj.Branchname = dr["BranchName"].ToString();
                employeesmgntobj.EmpName = dr["EmpName"].ToString();
                employeesmgntobj.Address = dr["Address"].ToString();
                employeesmgntobj.Mobno = dr["Mobno"].ToString();
                employeesmgntobj.email = dr["Email"].ToString();
                employeesmgntobj.previouscompny = dr["LWC"].ToString();
                employeesmgntobj.refference = dr["RefName"].ToString();
                employeesmgntobj.mtrgt = dr["MTarget"].ToString();
                employeesmgntobj.wtrgt = dr["WTarget"].ToString();
                employeesmgntobj.dtrgt = dr["DTarget"].ToString();
                employeesmgntobj.department = dr["DeptName"].ToString();
                employeesmgntobj.Loginsflag = dr["flag"].ToString();
                employeesmgntobj.sno = dr["Sno"].ToString();
                employeesmgntobj.BranchSno = dr["BranchSno"].ToString();
                employeesmgntobj.street = dr["street"].ToString();
                employeesmgntobj.city = dr["city"].ToString();
                employeesmgntobj.mandal = dr["mandal"].ToString();
                employeesmgntobj.district = dr["distic"].ToString();
                employeesmgntobj.state = dr["state"].ToString();
                employeesmgntobj.pincode = dr["pincode"].ToString();
                employeesmgntobj.panno = dr["panno"].ToString();
                employeesmgntobj.Emp_PIC = dr["Emp_PIC"].ToString();
                employeesmgntobj.otpstatus = dr["otpstatus"].ToString();
                employeesmgntobj.ftplocation = "ftp://223.196.32.30:21/Sales/";
                employeesmgntlist.Add(employeesmgntobj);
            }
            string response = GetJson(employeesmgntlist);
            context.Response.Write(response);
            //}
        }
        catch (Exception ex)
        {
            string msg = ex.Message;
            string response = GetJson(msg);
            context.Response.Write(response);
        }
    }
    List<employeesmgnt> getemployeelist(ref DataTable dt, DataTable ADt, DataTable FTable)
    {
        List<employeesmgnt> lst = new List<employeesmgnt>();
        try
        {
            foreach (DataRow dr in FTable.Rows)
            {
                DataRow[] drr = ADt.Select("SuperBranch=" + dr["SubBranch"].ToString());
                DataTable dtt = new DataTable();
                foreach (DataRow gotdata in drr)
                {
                    dt.ImportRow(gotdata);
                }
                if (drr.Length > 0)
                {
                    getemployeelist(ref dt, ADt, drr.CopyToDataTable<DataRow>());
                }
            }
        }
        catch (Exception ex)
        {

        }
        return lst;
    }
    public class employeesmgnt
    {
        public string sno { get; set; }
        public string PlantName { get; set; }
        public string Salesoffice { get; set; }
        public string Distributorname { get; set; }
        public string Branchname { get; set; }
        public string LevelType { get; set; }
        public string Loginsflag { get; set; }
        public string UserName { get; set; }
        public string Password { get; set; }
        public string EmpName { get; set; }
        public string Address { get; set; }
        public string Mobno { get; set; }
        public string email { get; set; }
        public string previouscompny { get; set; }
        public string refference { get; set; }
        public string mtrgt { get; set; }
        public string wtrgt { get; set; }
        public string dtrgt { get; set; }
        public string department { get; set; }
        public string BranchSno { get; set; }
        public string street { get; set; }
        public string city { get; set; }
        public string mandal { get; set; }
        public string district { get; set; }
        public string state { get; set; }
        public string pincode { get; set; }
        public string tinno { get; set; }
        public string cstno { get; set; }
        public string panno { get; set; }
        public string Emp_PIC { get; set; }
        public string otpstatus { get; set; }
        public string ftplocation { get; set; }
        public string empid { get; set; }
        public List<employeesmgnt> lstbrnch = new List<employeesmgnt>();
    }
    private void Inventorymanage(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            string inventoryname = context.Request["inventoryname"];
            string flag = context.Request["invflag"];
            string invqty = context.Request["invqty"];
            string operationtype = context.Request["operationtype"];
            string msg = "";
            if (operationtype == "SAVE")
            {
                cmd = new MySqlCommand("insert into invmaster (InvName,Userdata_sno,Qty) values (@inventoryname, @username,@qty)");
                cmd.Parameters.AddWithValue("@inventoryname", inventoryname);
                cmd.Parameters.AddWithValue("@username", context.Session["userdata_sno"].ToString());
                cmd.Parameters.AddWithValue("@qty", invqty);
                vdbmngr.insert(cmd);
                msg = "Inventory Data Successfully Saved";
            }
            else if (operationtype == "MODIFY")
            {
                string sname = context.Request["sno"];

                cmd = new MySqlCommand("update invmaster set InvName=@inventoryname,flag=@flag,Qty=@qty where sno='" + sname + "'");
                cmd.Parameters.AddWithValue("@inventoryname", inventoryname);
                cmd.Parameters.AddWithValue("@qty", invqty);
                if (flag == "Active")
                {
                    cmd.Parameters.AddWithValue("@flag", true);
                }
                else
                {
                    cmd.Parameters.AddWithValue("@flag", false);
                }
                vdbmngr.Update(cmd);
                msg = "Inventory Data Successfully Modified";
            }
            string response = GetJson(msg);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string msg = ex.Message;
            string response = GetJson(msg);
            context.Response.Write(response);
        }
    }
    private void update_inventory_manage(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            string username = context.Request["username"];
            cmd = new MySqlCommand("select InvName,flag,sno,Qty From invmaster Where Userdata_sno= @username");
            cmd.Parameters.AddWithValue("@username", context.Session["userdata_sno"].ToString());
            DataTable dt = vdbmngr.SelectQuery(cmd).Tables[0];
            List<inventorymng> inventorylist = new List<inventorymng>();
            foreach (DataRow dr in dt.Rows)
            {
                inventorymng Getinventorymng = new inventorymng();
                Getinventorymng.inventoryname = dr["InvName"].ToString();
                Getinventorymng.flag = dr["flag"].ToString();
                Getinventorymng.sno = dr["sno"].ToString();
                Getinventorymng.Qty = dr["Qty"].ToString();
                inventorylist.Add(Getinventorymng);
            }
            string response = GetJson(inventorylist);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string msg = ex.Message;
            string response = GetJson(msg);
            context.Response.Write(response);
        }
    }
    private void Gettripinventory_manage(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            DataTable dt = new DataTable();
            DataTable dtallinv = new DataTable();
            DataTable dtassigned_inv = new DataTable();
            DateTime todaydt = DateTime.Now;
            string username = context.Request["username"];
            string BranchID = context.Session["branch"].ToString();
            if (context.Session["tripid"] != "")
            {
                string tripid = context.Session["tripid"].ToString();
                cmd = new MySqlCommand("SELECT tripinvdata.Qty, invmaster.InvName, invmaster.sno FROM tripdata INNER JOIN tripinvdata ON tripdata.Sno = tripinvdata.Tripdata_sno INNER JOIN invmaster ON tripinvdata.invid = invmaster.sno WHERE (tripdata.Sno = @tripid) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)");
                cmd.Parameters.AddWithValue("@tripid", context.Session["tripid"].ToString());
                cmd.Parameters.AddWithValue("@d1", GetLowDate(todaydt));
                cmd.Parameters.AddWithValue("@d2", GetHighDate(todaydt));
                dt = vdbmngr.SelectQuery(cmd).Tables[0];

                cmd = new MySqlCommand("SELECT invmaster.InvName, invmaster.flag, invmaster.sno FROM invmaster INNER JOIN inventory_monitor ON invmaster.sno = inventory_monitor.Inv_Sno WHERE (inventory_monitor.BranchId = @BranchID)");
                cmd.Parameters.AddWithValue("@BranchID", BranchID);
                dtassigned_inv = vdbmngr.SelectQuery(cmd).Tables[0];
                dtallinv = new DataTable();
                dtallinv.Columns.Add("sno");
                dtallinv.Columns.Add("InvName");
                dtallinv.Columns.Add("TotalQty");
                foreach (DataRow dr in dtassigned_inv.Rows)
                {
                    DataRow newRow = dtallinv.NewRow();
                    newRow["sno"] = dr["sno"].ToString();
                    newRow["InvName"] = dr["InvName"].ToString();
                    newRow["TotalQty"] = "0";
                    dtallinv.Rows.Add(newRow);
                }
                foreach (DataRow drinv in dt.Rows)
                {
                    foreach (DataRow drallinv in dtallinv.Rows)
                    {
                        if (drinv["sno"].ToString() == drallinv["sno"].ToString())
                        {
                            float qtycpy = 0;
                            float.TryParse(drinv["Qty"].ToString(), out qtycpy);
                            float totalqty = qtycpy;
                            drallinv["TotalQty"] = totalqty;
                        }
                        else
                        {

                        }
                    }
                }
            }
            else
            {
                cmd = new MySqlCommand("SELECT invmaster.InvName, invmaster.flag, invmaster.sno FROM invmaster INNER JOIN inventory_monitor ON invmaster.sno = inventory_monitor.Inv_Sno WHERE (inventory_monitor.BranchId = @BranchID)");
                cmd.Parameters.AddWithValue("@BranchID", BranchID);
                dt = vdbmngr.SelectQuery(cmd).Tables[0];
                dtallinv = new DataTable();
                dtallinv.Columns.Add("sno");
                dtallinv.Columns.Add("InvName");
                dtallinv.Columns.Add("TotalQty");
                foreach (DataRow dr in dt.Rows)
                {
                    DataRow newRow = dtallinv.NewRow();
                    newRow["sno"] = dr["sno"].ToString();
                    newRow["InvName"] = dr["InvName"].ToString();
                    newRow["TotalQty"] = "0";
                    dtallinv.Rows.Add(newRow);
                }
                foreach (DataRow drinv in dt.Rows)
                {
                    foreach (DataRow drallinv in dtallinv.Rows)
                    {
                        if (drinv["sno"].ToString() == drallinv["sno"].ToString())
                        {
                            float qtycpy = 0;
                            float.TryParse(drallinv["TotalQty"].ToString(), out qtycpy);
                            float totalqty = qtycpy;
                            drallinv["TotalQty"] = totalqty;
                        }
                        else
                        {
                        }
                    }
                }

            }
            List<inventorymng> inventorylist = new List<inventorymng>();
            int i = 1;
            if (context.Session["get_orderedprdtsnames"] != "")
            {
                foreach (DataRow dr in dtallinv.Rows)
                {
                    inventorymng Getinventorymng = new inventorymng();
                    Getinventorymng.snoO = i++.ToString();
                    Getinventorymng.inventoryname = dr["InvName"].ToString();
                    //Getinventorymng.flag = dr["flag"].ToString();
                    Getinventorymng.sno = dr["sno"].ToString();
                    Getinventorymng.totqty = dr["TotalQty"].ToString();
                    inventorylist.Add(Getinventorymng);
                }
            }
            else
            {
            }
            string response = GetJson(inventorylist);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string msg = ex.Message;
            string response = GetJson(msg);
            context.Response.Write(response);
        }
    }
    public class inventorymng
    {
        public string snoO { get; set; }
        public string sno { get; set; }
        public string inventoryname { get; set; }
        public string totqty { get; set; }
        public string purchasedate { get; set; }
        public string qty { get; set; }
        public string Qty { get; set; }
        public string cost { get; set; }
        public string total { get; set; }
        public string flag { get; set; }
        public string brnchname { get; set; }
        public string employeename { get; set; }
        public string prdtname { get; set; }
        public string mtrgt { get; set; }
        public string wtrgt { get; set; }
        public string dtrgt { get; set; }
        public string brnchhidden { get; set; }
        public string category_sno { get; set; }
        public string SubCat_sno { get; set; }
        public string employeesno { get; set; }
        public string tripid { get; set; }
    }
    //////complete

    private void Inventory_Purchase_manage(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            string inventoryname = context.Request["inventoryname"];
            string purchasedate = context.Request["purchasedate"];
            string purchaseqty = context.Request["purchaseqty"];
            string purchasecost = context.Request["purchasecost"];
            string purchasetotal = context.Request["purchasetotal"];
            string operationtype = context.Request["operationtype"];
            string msg = "";
            if (operationtype == "SAVE")
            {
                cmd = new MySqlCommand("insert into invpurchases (inv_no,DOP,Qty,Cost,Total) values (@inventoryname,@purchasedate,@purchaseqty,@purchasecost,@purchasetotal)");
                cmd.Parameters.AddWithValue("@inventoryname", inventoryname);
                cmd.Parameters.AddWithValue("@purchasedate", purchasedate);
                cmd.Parameters.AddWithValue("@purchaseqty", purchaseqty);
                cmd.Parameters.AddWithValue("@purchasecost", purchasecost);
                cmd.Parameters.AddWithValue("@purchasetotal", purchasetotal);

                //cmd.Parameters.AddWithValue("@username", context.Session["userdata_sno"].ToString());
                vdbmngr.insert(cmd);
                msg = "Purchase Data Successfully Saved";
            }
            else if (operationtype == "MODIFY")
            {
                string sname = context.Request["sno"];

                cmd = new MySqlCommand("update invpurchases set inv_no=@inventoryname,DOP=@purchasedate,Qty=@purchaseqty,Cost=@purchasecost,Total=@purchasetotal where inv_no='" + sname + "'");
                cmd.Parameters.AddWithValue("@inventoryname", inventoryname);
                cmd.Parameters.AddWithValue("@purchasedate", purchasedate);
                cmd.Parameters.AddWithValue("@purchaseqty", purchaseqty);
                cmd.Parameters.AddWithValue("@purchasecost", purchasecost);
                cmd.Parameters.AddWithValue("@purchasetotal", purchasetotal);

                vdbmngr.Update(cmd);
                msg = "Purchase Data Successfully Modified";
            }
            string response = GetJson(msg);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string msg = ex.Message;
            string response = GetJson(msg);
            context.Response.Write(response);
        }
    }
    private void update_inventory_Purchase_manage(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();

            string username = context.Request["username"];
            cmd = new MySqlCommand("SELECT invpurchases.inv_no, invmaster.InvName, invmaster.Userdata_sno, invmaster.flag, invpurchases.DOP, invpurchases.Qty, invpurchases.Cost,invpurchases.Total FROM invmaster INNER JOIN invpurchases ON invmaster.sno = invpurchases.inv_no WHERE (invmaster.Userdata_sno = @username) AND (invmaster.flag <>0)");

            // cmd = new MySqlCommand("select InvName,flag,sno From invmaster Where Userdata_sno= @username");
            cmd.Parameters.AddWithValue("@username", context.Session["userdata_sno"].ToString());
            DataTable dt = vdbmngr.SelectQuery(cmd).Tables[0];
            List<inventorymng> inventorylist = new List<inventorymng>();
            foreach (DataRow dr in dt.Rows)
            {
                inventorymng Getinventorymng = new inventorymng();
                Getinventorymng.inventoryname = dr["InvName"].ToString();
                Getinventorymng.purchasedate = ((DateTime)dr["DOP"]).ToString("yyyy-MM-dd");
                Getinventorymng.qty = dr["Qty"].ToString();
                Getinventorymng.cost = dr["Cost"].ToString();
                Getinventorymng.total = dr["Total"].ToString();
                Getinventorymng.flag = dr["flag"].ToString();
                Getinventorymng.sno = dr["inv_no"].ToString();
                inventorylist.Add(Getinventorymng);
            }
            string response = GetJson(inventorylist);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string msg = ex.Message;
            string response = GetJson(msg);
            context.Response.Write(response);
        }
    }
    private void intialize_purchase_invname(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            List<initializedataclass> initializedatalist = new List<initializedataclass>();
            cmd = new MySqlCommand("select sno,InvName from invmaster where flag=@flag and Userdata_sno=@username");
            cmd.Parameters.AddWithValue("@username", context.Session["userdata_sno"].ToString());
            cmd.Parameters.AddWithValue("@flag", "1");
            foreach (DataRow dr in vdbmngr.SelectQuery(cmd).Tables[0].Rows)
            {
                initializedataclass initializedata = new initializedataclass();
                initializedata.sno = dr["sno"].ToString();
                initializedata.InvName = dr["InvName"].ToString();
                initializedatalist.Add(initializedata);
            }
            if (initializedatalist != null)
            {
                string response = GetJson(initializedatalist);
                context.Response.Write(response);
            }
        }
        catch (Exception ex)
        {
            string msg = ex.Message;
            string response = GetJson(msg);
            context.Response.Write(response);
        }
    }
    private void vehlayoutsave(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            string msg = "";
            var js = new JavaScriptSerializer();
            var title1 = context.Request.Params[1];
            Orders obj = js.Deserialize<Orders>(title1);
            string tripid = obj.tripid;
            foreach (layoutstringcls o in obj.layoutstring)
            {
                if (o.cellcss != null)
                {
                    cmd = new MySqlCommand("insert into triplayout(Tripid, Cellcode, Cellvalue) values (@Tripid, @Cellcode, @Cellvalue)");
                    cmd.Parameters.AddWithValue("@Tripid", tripid);
                    cmd.Parameters.AddWithValue("@Cellcode", o.cellcss);
                    cmd.Parameters.AddWithValue("@Cellvalue", o.cellvalue);
                    vdbmngr.insert(cmd);
                }
            }
            msg = "Data inserted successfully";
            string response = GetJson(msg);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string response = GetJson("Error\n" + ex.Message);
            context.Response.Write(response);
        }
    }
    private static string GetJson(object obj)
    {
        JavaScriptSerializer jsonSerializer = new JavaScriptSerializer();
        return jsonSerializer.Serialize(obj);
    }
    private static object GetUnJson(string obj)
    {
        JavaScriptSerializer jsonSerializer = new JavaScriptSerializer();
        return jsonSerializer.Deserialize(obj, Type.GetType("System.Object"));
    }
    private void savestateDetails(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            string statename = context.Request["statename"];
            string statecode = context.Request["statecode"];
            string ecode = context.Request["ecode"];
            string gststatecode = context.Request["gststatecode"];
            string btnSave = context.Request["btnVal"];
            if (btnSave == "Save")
            {
                cmd = new MySqlCommand("insert into statemastar (statename,statecode,ecode,gststatecode) values (@statename,@statecode,@ecode,@gststatecode)");
                cmd.Parameters.AddWithValue("@statename", statename);
                cmd.Parameters.AddWithValue("@statecode", statecode);
                cmd.Parameters.AddWithValue("@ecode", ecode);
                cmd.Parameters.AddWithValue("@gststatecode", gststatecode);
                vdbmngr.insert(cmd);
                string msg = "State detailes successfully Saved";
                string response = GetJson(msg);
                context.Response.Write(response);
            }
            else
            {
                string sno = context.Request["sno"];
                cmd = new MySqlCommand("Update statemastar set  statename=@statename,statecode=@statecode,ecode=@ecode,gststatecode=@gststatecode where sno=@sno ");
                cmd.Parameters.AddWithValue("@statename", statename);
                cmd.Parameters.AddWithValue("@statecode", statecode);
                cmd.Parameters.AddWithValue("@ecode", ecode);
                cmd.Parameters.AddWithValue("@gststatecode", gststatecode);
                cmd.Parameters.AddWithValue("@sno", sno);
                vdbmngr.Update(cmd);
                string msg = "State detailes successfully Updated";
                string response = GetJson(msg);
                context.Response.Write(response);
            }
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }
    private void get_state_details(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            cmd = new MySqlCommand("SELECT  sno,statename,statecode,ecode,gststatecode FROM  statemastar");
            DataTable dtstates = vdbmngr.SelectQuery(cmd).Tables[0];
            List<statemaster> stateslist = new List<statemaster>();
            foreach (DataRow dr in dtstates.Rows)
            {
                statemaster obj1 = new statemaster();
                obj1.sno = dr["sno"].ToString();
                obj1.statename = dr["statename"].ToString();
                obj1.statecode = dr["statecode"].ToString();
                obj1.ecode = dr["ecode"].ToString();
                obj1.gststatecode = dr["gststatecode"].ToString();
                obj1.sno = dr["sno"].ToString();
                stateslist.Add(obj1);
            }
            string response = GetJson(stateslist);
            context.Response.Write(response);
        }
        catch
        {
        }
    }
    private void btnSMS_Click(HttpContext context)
    {
        try
        {
            //string MobNo;


            DateTime fromdate = DateTime.Now;
            vdbmngr = new VehicleDBMgr();
            DateTime ServerDateCurrentdate = VehicleDBMgr.GetTime(vdbmngr.conn);
            string IndentDate = context.Session["IndentDate"].ToString();
            DateTime Currentdate = Convert.ToDateTime(IndentDate);
            DateTime AssignDate = Currentdate;
            string leveltype = context.Session["LevelType"].ToString();
            if (leveltype == "PlantDispatcher")
            {

                cmd = new MySqlCommand("SELECT     Sno, UserName, Password, LevelType, Branch, flag, Userdata_sno, Owner, EmpName, Address, Mobno, Email, street, city, mandal, distic, state, pincode, tinno, cstno, panno, Emp_PIC, loginstatus FROM  empmanage WHERE   (Branch = @branchid) AND (LevelType = 'MessageSend')");
                cmd.Parameters.AddWithValue("@branchid", context.Session["branch"]);
                DataTable dtmobilenumbers = vdbmngr.SelectQuery(cmd).Tables[0];
                foreach (DataRow drmobile in dtmobilenumbers.Rows)
                {
                    string MobNo = drmobile["Mobno"].ToString();
                    //MobNo = "9959693439";
                    string DispatchName = context.Session["branchname"].ToString();
                    DataTable Report = new DataTable();
                    ///Ravi
                    cmd = new MySqlCommand("SELECT ProductInfo.ProductName, SUM(ProductInfo.Qty) AS Qty FROM (SELECT tripdata.Sno, tripdata.DCNo, tripdata.I_Date, tripdata.VehicleNo, tripdata.Status, dispatch.DispName, dispatch.DispType, dispatch.DispMode FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno WHERE  (dispatch.Branch_Id = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT  ProductName, Sno, Qty FROM (SELECT productsdata.ProductName, tripdata_1.Sno, tripsubdata.Qty FROM tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno INNER JOIN productsdata ON tripsubdata.ProductId = productsdata.sno WHERE (tripdata_1.AssignDate BETWEEN @d1 AND @d2)) TripSubInfo) ProductInfo ON TripInfo.Sno = ProductInfo.Sno GROUP BY ProductInfo.ProductName");
                    //// cmd = new MySqlCommand("SELECT ROUND(SUM(tripsubdata.Qty), 2) AS Qty, productsdata.ProductName FROM dispatch INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN (SELECT Sno, AssignDate, Status FROM tripdata WHERE (AssignDate BETWEEN @d1 AND @d2) AND (Status <> 'C')) tripdat ON triproutes.Tripdata_sno = tripdat.Sno INNER JOIN tripsubdata ON tripdat.Sno = tripsubdata.Tripdata_sno INNER JOIN (SELECT branch_sno, product_sno, unitprice, flag, userdata_sno, DTarget, WTarget, MTarget, BranchQty, LeakQty, Rank FROM branchproducts WHERE (branch_sno = @branch)) brnchprdt ON tripsubdata.ProductId = brnchprdt.product_sno INNER JOIN productsdata ON brnchprdt.product_sno = productsdata.sno WHERE (dispatch.Branch_Id = @branch) GROUP BY productsdata.sno ORDER BY brnchprdt.Rank");
                    cmd.Parameters.AddWithValue("@branch", context.Session["branch"]);
                    cmd.Parameters.AddWithValue("@d1", GetLowDate(Currentdate));
                    cmd.Parameters.AddWithValue("@d2", GetHighDate(Currentdate));
                    DataTable dtTotalDespatch = vdbmngr.SelectQuery(cmd).Tables[0];
                    cmd = new MySqlCommand("SELECT ProductInfo.ProductName, SUM(ProductInfo.Qty) AS Qty FROM (SELECT tripdata.Sno, tripdata.DCNo, tripdata.I_Date, tripdata.VehicleNo, tripdata.Status, dispatch.DispName, dispatch.DispType, dispatch.DispMode FROM branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno WHERE  (dispatch.Branch_Id = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT  ProductName, Sno, Qty FROM (SELECT productsdata.ProductName, tripdata_1.Sno, tripsubdata.Qty FROM tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno INNER JOIN productsdata ON tripsubdata.ProductId = productsdata.sno WHERE (tripdata_1.AssignDate BETWEEN @d1 AND @d2)) TripSubInfo) ProductInfo ON TripInfo.Sno = ProductInfo.Sno GROUP BY ProductInfo.ProductName");
                    ////cmd = new MySqlCommand("SELECT ROUND(SUM(tripsubdata.Qty), 2) AS Qty, productsdata.ProductName FROM dispatch INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN (SELECT Sno, AssignDate, Status FROM tripdata WHERE (AssignDate BETWEEN @d1 AND @d2) AND (Status <> 'C')) tripdat ON triproutes.Tripdata_sno = tripdat.Sno INNER JOIN tripsubdata ON tripdat.Sno = tripsubdata.Tripdata_sno INNER JOIN (SELECT branch_sno, product_sno, unitprice, flag, userdata_sno, DTarget, WTarget, MTarget, BranchQty, LeakQty, Rank FROM branchproducts WHERE (branch_sno = @branch)) brnchprdt ON tripsubdata.ProductId = brnchprdt.product_sno INNER JOIN productsdata ON brnchprdt.product_sno = productsdata.sno WHERE (dispatch.Branch_Id = @branch) GROUP BY productsdata.sno ORDER BY brnchprdt.Rank");
                    cmd.Parameters.AddWithValue("@branch", context.Session["branch"]);
                    cmd.Parameters.AddWithValue("@d1", GetLowDate(Currentdate.AddDays(-1)));
                    cmd.Parameters.AddWithValue("@d2", GetHighDate(Currentdate.AddDays(-1)));
                    DataTable dtPreviousTotalDespatch = vdbmngr.SelectQuery(cmd).Tables[0];
                    double TotalQty = 0;
                    double PrevTotalQty = 0;
                    string ProductName = "";
                    ProductName += DispatchName + " Total Dispatch For Date  " + fromdate.ToString("dd/MM/yyyy") + ":" + "\r\n";
                    if (dtTotalDespatch.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dtTotalDespatch.Rows)
                        {
                            double unitQty = 0;
                            double PrevunitQty = 0;
                            double diffprdt = 0;
                            double.TryParse(dr["Qty"].ToString(), out unitQty);
                            foreach (DataRow drdtclubtotal in dtPreviousTotalDespatch.Select("ProductName='" + dr["ProductName"].ToString() + "'"))
                            {
                                double.TryParse(drdtclubtotal["Qty"].ToString(), out PrevunitQty);
                            }
                            diffprdt = Math.Round(unitQty - PrevunitQty, 2);
                            ProductName += dr["ProductName"].ToString() + "=" + Math.Round(unitQty, 2) + "(" + Math.Round(diffprdt, 2) + ")" + ";" + "\r\n";
                            TotalQty += Math.Round(unitQty, 2);
                            PrevTotalQty += Math.Round(PrevunitQty, 2);
                        }
                    }
                    double diffproduct = 0;
                    diffproduct = Math.Round(TotalQty - PrevTotalQty, 2);
                    if (MobNo.Length == 10)
                    {
                        string Date = DateTime.Now.ToString("dd/MM/yyyy");
                        if (context.Session["TitleName"].ToString() == "SRI VYSHNAVI DAIRY SPECIALITIES (P) LTD")
                        {
                            WebClient client = new WebClient();
                            //http://www.smsstriker.com/API/sms.php?username=vaishnavidairy&password=vyshnavi@123&from=VYSNVI&to=


                            string baseurl = "http://www.smsstriker.com/API/sms.php?username=vaishnavidairy&password=vyshnavi@123&from=VSALES&to=" + MobNo + "&msg=%20" + ProductName + "TotalQty =" + TotalQty + "(" + diffproduct + ")" + "&type=1";
                            Stream data = client.OpenRead(baseurl);
                            StreamReader reader = new StreamReader(data);
                            string ResponseID = reader.ReadToEnd();
                            data.Close();
                            reader.Close();
                        }
                        else
                        {
                            WebClient client = new WebClient();
                            //http://www.smsstriker.com/API/sms.php?username=vaishnavidairy&password=vyshnavi@123&from=VYSNVI&to=


                            string baseurl = "http://www.smsstriker.com/API/sms.php?username=vaishnavidairy&password=vyshnavi@123&from=VFWYRA&to=" + MobNo + "&msg=%20" + ProductName + "TotalQty =" + TotalQty + "(" + diffproduct + ")" + "&type=1";
                            Stream data = client.OpenRead(baseurl);
                            StreamReader reader = new StreamReader(data);
                            string ResponseID = reader.ReadToEnd();
                            data.Close();
                            reader.Close();
                        }

                        //string message = "" + MobNo + " " + ProductName + "TotalQty =" + TotalQty + "(" + diffproduct + ")" + "";
                        //// string text = message.Replace("\n", "\n" + System.Environment.NewLine);
                        //cmd = new MySqlCommand("insert into smsinfo (agentid,branchid,mainbranch,msg,mobileno,msgtype,branchname,doe) values (@agentid,@branchid,@mainbranch,@msg,@mobileno,@msgtype,@branchname,@doe)");
                        //cmd.Parameters.AddWithValue("@agentid", context.Session["branch"].ToString());
                        //cmd.Parameters.AddWithValue("@branchid", context.Session["branch"].ToString());
                        //cmd.Parameters.AddWithValue("@mainbranch", context.Session["SuperBranch"].ToString());
                        //cmd.Parameters.AddWithValue("@msg", message);
                        //cmd.Parameters.AddWithValue("@mobileno", MobNo);
                        //cmd.Parameters.AddWithValue("@msgtype", "TripEdnd");
                        //cmd.Parameters.AddWithValue("@branchname", DispatchName);
                        //cmd.Parameters.AddWithValue("@doe", ServerDateCurrentdate);
                        //vdbmngr.insert(cmd);
                    }
                    else
                    {
                        cmd = new MySqlCommand("SELECT Sno, UserName, Mobno FROM empmanage WHERE (Branch = @BranchID) AND (LevelType = 'Manager' OR LevelType = 'Director')");
                        cmd.Parameters.AddWithValue("@BranchID", context.Session["branch"]);
                        DataTable DtPhone = vdbmngr.SelectQuery(cmd).Tables[0];
                        if (DtPhone.Rows.Count > 0)
                        {
                            foreach (DataRow dr in DtPhone.Rows)
                            {
                                string PhoneNumber = dr["Mobno"].ToString();
                                if (PhoneNumber.Length == 10)
                                {
                                    string Date = DateTime.Now.ToString("dd/MM/yyyy");
                                    if (context.Session["TitleName"].ToString() == "SRI VYSHNAVI DAIRY SPECIALITIES (P) LTD")
                                    {
                                        WebClient client = new WebClient();

                                        //http://www.smsstriker.com/API/sms.php?username=vaishnavidairy&password=vyshnavi@123&from=VYSNVI&to=
                                        string baseurl = "http://www.smsstriker.com/API/sms.php?username=vaishnavidairy&password=vyshnavi@123&from=VSALES&to=" + MobNo + "&msg=%20" + ProductName + "TotalQty =" + TotalQty + "(" + diffproduct + ")" + "&type=1";
                                        Stream data = client.OpenRead(baseurl);
                                        StreamReader reader = new StreamReader(data);
                                        string ResponseID = reader.ReadToEnd();
                                        data.Close();
                                        reader.Close();
                                    }
                                    else
                                    {
                                        WebClient client = new WebClient();

                                        //http://www.smsstriker.com/API/sms.php?username=vaishnavidairy&password=vyshnavi@123&from=VYSNVI&to=
                                        string baseurl = "http://www.smsstriker.com/API/sms.php?username=vaishnavidairy&password=vyshnavi@123&from=VFWYRA&to=" + MobNo + "&msg=%20" + ProductName + "TotalQty =" + TotalQty + "(" + diffproduct + ")" + "&type=1";
                                        Stream data = client.OpenRead(baseurl);
                                        StreamReader reader = new StreamReader(data);
                                        string ResponseID = reader.ReadToEnd();
                                        data.Close();
                                        reader.Close();
                                    }

                                    //string message = "" + MobNo + " " + ProductName + " TotalQty =" + TotalQty + "(" + diffproduct + ")" + " ";

                                    //// string text = message.Replace("\n", "\n" + System.Environment.NewLine);
                                    //cmd = new MySqlCommand("insert into smsinfo (agentid,branchid,mainbranch,msg,mobileno,msgtype,branchname,doe) values (@agentid,@branchid,@mainbranch,@msg,@mobileno,@msgtype,@branchname,@doe)");
                                    //cmd.Parameters.AddWithValue("@agentid", context.Session["branch"].ToString());
                                    //cmd.Parameters.AddWithValue("@branchid", context.Session["branch"].ToString());
                                    //cmd.Parameters.AddWithValue("@mainbranch", context.Session["SuperBranch"].ToString());
                                    //cmd.Parameters.AddWithValue("@msg", message);
                                    //cmd.Parameters.AddWithValue("@mobileno", MobNo);
                                    //cmd.Parameters.AddWithValue("@msgtype", "TripEdnd");
                                    //cmd.Parameters.AddWithValue("@branchname", DispatchName);
                                    //cmd.Parameters.AddWithValue("@doe", ServerDateCurrentdate);
                                    //vdbmngr.insert(cmd);
                                }
                            }
                        }
                    }
                    // cmd = new MySqlCommand("SELECT ROUND(SUM(tripsubdata.Qty), 2) AS Qty, products_subcategory.SubCatName, products_category.Categoryname, products_category.sno FROM tripdata INNER JOIN tripsubdata ON tripdata.Sno = tripsubdata.Tripdata_sno INNER JOIN triproutes ON tripdata.Sno = triproutes.Tripdata_sno INNER JOIN dispatch ON triproutes.RouteID = dispatch.sno INNER JOIN branchroutes ON dispatch.Route_id = branchroutes.Sno INNER JOIN productsdata ON tripsubdata.ProductId = productsdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno WHERE (dispatch.Branch_Id = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2) GROUP BY products_subcategory.sno");
                    cmd = new MySqlCommand("SELECT ROUND(SUM(tripsubdata.Qty), 2) AS Qty, products_subcategory.SubCatName, products_category.Categoryname, products_category.sno AS categorysno, products_subcategory.sno FROM dispatch INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN (SELECT Sno, AssignDate, Status FROM tripdata WHERE (AssignDate BETWEEN @d1 AND @d2) AND (Status <> 'C')) tripdat ON triproutes.Tripdata_sno = tripdat.Sno INNER JOIN tripsubdata ON tripdat.Sno = tripsubdata.Tripdata_sno INNER JOIN productsdata ON tripsubdata.ProductId = productsdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno WHERE (dispatch.Branch_Id = @branch) GROUP BY categorysno, products_subcategory.sno ORDER BY categorysno");
                    cmd.Parameters.AddWithValue("@branch", context.Session["branch"]);
                    cmd.Parameters.AddWithValue("@d1", GetLowDate(Currentdate));
                    cmd.Parameters.AddWithValue("@d2", GetHighDate(Currentdate));
                    DataTable dtTotalDespatch_subcategorywise = vdbmngr.SelectQuery(cmd).Tables[0];

                    //previous day dispatch subcategory wise
                    cmd = new MySqlCommand("SELECT ROUND(SUM(tripsubdata.Qty), 2) AS Qty, products_subcategory.SubCatName, products_category.Categoryname, products_category.sno AS categorysno, products_subcategory.sno FROM dispatch INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN (SELECT Sno, AssignDate, Status FROM tripdata WHERE (AssignDate BETWEEN @d1 AND @d2) AND (Status <> 'C')) tripdat ON triproutes.Tripdata_sno = tripdat.Sno INNER JOIN tripsubdata ON tripdat.Sno = tripsubdata.Tripdata_sno INNER JOIN productsdata ON tripsubdata.ProductId = productsdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno WHERE (dispatch.Branch_Id = @branch) GROUP BY categorysno, products_subcategory.sno ORDER BY categorysno");
                    cmd.Parameters.AddWithValue("@branch", context.Session["branch"]);
                    cmd.Parameters.AddWithValue("@d1", GetLowDate(Currentdate.AddDays(-1)));
                    cmd.Parameters.AddWithValue("@d2", GetHighDate(Currentdate.AddDays(-1)));
                    DataTable dtPreviousday_subcategorywise = vdbmngr.SelectQuery(cmd).Tables[0];

                    double SubCategoryTotalQty = 0;
                    double PreviousSubTotalQty = 0;
                    double prevsubdiff = 0;
                    double PreviousSubCategoryTotalQty = 0;
                    string subcategoryName = "";
                    subcategoryName += DispatchName + " Total Dispatch For Date  " + fromdate.ToString("dd/MM/yyyy") + ":" + "\r\n";
                    if (dtTotalDespatch_subcategorywise.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dtTotalDespatch_subcategorywise.Rows)
                        {
                            double unitQty = 0;
                            double subcategorydiff = 0;
                            double.TryParse(dr["Qty"].ToString(), out unitQty);
                            if (dr["categorysno"].ToString() == "10")
                            {
                                foreach (DataRow drdtclubtotal in dtPreviousday_subcategorywise.Select("SubCatName='" + dr["SubCatName"].ToString() + "'"))
                                {
                                    if (dr["SubCatName"].ToString() == drdtclubtotal["SubCatName"].ToString())
                                    {
                                        double.TryParse(drdtclubtotal["Qty"].ToString(), out PreviousSubCategoryTotalQty);
                                    }
                                }
                                subcategorydiff = Math.Round(unitQty - PreviousSubCategoryTotalQty, 2);
                                subcategoryName += dr["SubCatName"].ToString() + "CURD" + "=" + Math.Round(unitQty, 2) + "(" + Math.Round(subcategorydiff, 2) + ")" + ";" + "\r\n";
                            }
                            else
                            {
                                foreach (DataRow drdtclubtotal in dtPreviousday_subcategorywise.Select("SubCatName='" + dr["SubCatName"].ToString() + "'"))
                                {
                                    if (drdtclubtotal["categorysno"].ToString() != "10")
                                    {
                                        if (dr["SubCatName"].ToString() == drdtclubtotal["SubCatName"].ToString())
                                        {
                                            double.TryParse(drdtclubtotal["Qty"].ToString(), out PreviousSubCategoryTotalQty);
                                        }
                                    }
                                }
                                subcategorydiff = Math.Round(unitQty - PreviousSubCategoryTotalQty, 2);
                                subcategoryName += dr["SubCatName"].ToString() + "=" + Math.Round(unitQty, 2) + "(" + Math.Round(subcategorydiff, 2) + ")" + ";" + "\r\n";
                            }
                            PreviousSubTotalQty += Math.Round(PreviousSubCategoryTotalQty, 2);
                            SubCategoryTotalQty += Math.Round(unitQty, 2);
                        }
                    }
                    prevsubdiff = Math.Round(SubCategoryTotalQty - PreviousSubTotalQty);
                    if (MobNo.Length == 10)
                    {
                        if (context.Session["TitleName"].ToString() == "SRI VYSHNAVI DAIRY SPECIALITIES (P) LTD")
                        {
                            WebClient client1 = new WebClient();
                            //http://www.smsstriker.com/API/sms.php?username=vaishnavidairy&password=vyshnavi@123&from=VYSNVI&to=
                            string baseurl1 = "http://www.smsstriker.com/API/sms.php?username=vaishnavidairy&password=vyshnavi@123&from=VSALES&to=" + MobNo + "&msg=%20" + subcategoryName + "TotalQty =" + SubCategoryTotalQty + "(" + prevsubdiff + ")" + "&type=1";
                            Stream data1 = client1.OpenRead(baseurl1);
                            StreamReader reader1 = new StreamReader(data1);
                            string ResponseID1 = reader1.ReadToEnd();
                            data1.Close();
                            reader1.Close();
                        }
                        else
                        {
                            WebClient client1 = new WebClient();
                            //http://www.smsstriker.com/API/sms.php?username=vaishnavidairy&password=vyshnavi@123&from=VYSNVI&to=
                            string baseurl1 = "http://www.smsstriker.com/API/sms.php?username=vaishnavidairy&password=vyshnavi@123&from=VFWYRA&to=" + MobNo + "&msg=%20" + subcategoryName + "TotalQty =" + SubCategoryTotalQty + "(" + prevsubdiff + ")" + "&type=1";
                            Stream data1 = client1.OpenRead(baseurl1);
                            StreamReader reader1 = new StreamReader(data1);
                            string ResponseID1 = reader1.ReadToEnd();
                            data1.Close();
                            reader1.Close();
                        }
                        //string message = " " + subcategoryName + " TotalQty =" + SubCategoryTotalQty + "(" + prevsubdiff + ")" + " ";
                        //// string text = message.Replace("\n", "\n" + System.Environment.NewLine);
                        //cmd = new MySqlCommand("insert into smsinfo (agentid,branchid,mainbranch,msg,mobileno,msgtype,branchname,doe) values (@agentid,@branchid,@mainbranch,@msg,@mobileno,@msgtype,@branchname,@doe)");
                        //cmd.Parameters.AddWithValue("@agentid", context.Session["branch"].ToString());
                        //cmd.Parameters.AddWithValue("@branchid", context.Session["branch"].ToString());
                        //cmd.Parameters.AddWithValue("@mainbranch", context.Session["SuperBranch"].ToString());
                        //cmd.Parameters.AddWithValue("@msg", message);
                        //cmd.Parameters.AddWithValue("@mobileno", MobNo);
                        //cmd.Parameters.AddWithValue("@msgtype", "TripEdnd");
                        //cmd.Parameters.AddWithValue("@branchname", DispatchName);
                        //cmd.Parameters.AddWithValue("@doe", ServerDateCurrentdate);
                        //vdbmngr.insert(cmd);
                    }
                    else
                    {
                        cmd = new MySqlCommand("SELECT Sno, UserName, Mobno FROM empmanage WHERE (Branch = @BranchID) AND (LevelType = 'Manager' OR LevelType = 'Director')");
                        cmd.Parameters.AddWithValue("@BranchID", context.Session["branch"]);
                        DataTable DtPhone = vdbmngr.SelectQuery(cmd).Tables[0];
                        if (DtPhone.Rows.Count > 0)
                        {
                            foreach (DataRow dr in DtPhone.Rows)
                            {
                                string PhoneNumber = dr["Mobno"].ToString();
                                if (PhoneNumber.Length == 10)
                                {
                                    if (context.Session["TitleName"].ToString() == "SRI VYSHNAVI DAIRY SPECIALITIES (P) LTD")
                                    {
                                        WebClient client1 = new WebClient();

                                        //http://www.smsstriker.com/API/sms.php?username=vaishnavidairy&password=vyshnavi@123&from=VYSNVI&to=


                                        string baseurl1 = "http://www.smsstriker.com/API/sms.php?username=vaishnavidairy&password=vyshnavi@123&from=VSALES&to=" + MobNo + "&msg=%20" + subcategoryName + "TotalQty =" + SubCategoryTotalQty + "(" + prevsubdiff + ")" + "&type=1";
                                        Stream data1 = client1.OpenRead(baseurl1);
                                        StreamReader reader1 = new StreamReader(data1);
                                        string ResponseID1 = reader1.ReadToEnd();
                                        data1.Close();
                                        reader1.Close();
                                    }
                                    else
                                    {
                                        WebClient client1 = new WebClient();

                                        //http://www.smsstriker.com/API/sms.php?username=vaishnavidairy&password=vyshnavi@123&from=VYSNVI&to=


                                        string baseurl1 = "http://www.smsstriker.com/API/sms.php?username=vaishnavidairy&password=vyshnavi@123&from=VFWYRA&to=" + MobNo + "&msg=%20" + subcategoryName + "TotalQty =" + SubCategoryTotalQty + "(" + prevsubdiff + ")" + "&type=1";
                                        Stream data1 = client1.OpenRead(baseurl1);
                                        StreamReader reader1 = new StreamReader(data1);
                                        string ResponseID1 = reader1.ReadToEnd();
                                        data1.Close();
                                        reader1.Close();
                                    }

                                    //string message = "" + subcategoryName + " TotalQty =" + SubCategoryTotalQty + "(" + prevsubdiff + ")" + " ";
                                    //// string text = message.Replace("\n", "\n" + System.Environment.NewLine);
                                    //cmd = new MySqlCommand("insert into smsinfo (agentid,branchid,mainbranch,msg,mobileno,msgtype,branchname,doe) values (@agentid,@branchid,@mainbranch,@msg,@mobileno,@msgtype,@branchname,@doe)");
                                    //cmd.Parameters.AddWithValue("@agentid", context.Session["branch"].ToString());
                                    //cmd.Parameters.AddWithValue("@branchid", context.Session["branch"].ToString());
                                    //cmd.Parameters.AddWithValue("@mainbranch", context.Session["SuperBranch"].ToString());
                                    //cmd.Parameters.AddWithValue("@msg", message);
                                    //cmd.Parameters.AddWithValue("@mobileno", MobNo);
                                    //cmd.Parameters.AddWithValue("@msgtype", "TripEdnd");
                                    //cmd.Parameters.AddWithValue("@branchname", DispatchName);
                                    //cmd.Parameters.AddWithValue("@doe", ServerDateCurrentdate);
                                    //vdbmngr.insert(cmd);
                                }
                            }
                        }
                    }

                    //milk and curd
                    cmd = new MySqlCommand("SELECT    dispatch.sno, dispatch.BranchID, SUM(tripsubdata.Qty) AS dispatchqty, products_category.Categoryname, products_category.sno AS categorysno,branchdata.BranchName, productsdata.Inventorysno FROM  dispatch INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN (SELECT  Sno, AssignDate FROM  tripdata WHERE (AssignDate BETWEEN @d1 AND @d2)) tripdat ON triproutes.Tripdata_sno = tripdat.Sno INNER JOIN tripsubdata ON tripdat.Sno = tripsubdata.Tripdata_sno INNER JOIN productsdata ON tripsubdata.ProductId = productsdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno INNER JOIN branchdata ON dispatch.BranchID = branchdata.sno WHERE  (dispatch.Branch_Id = @BranchID) AND (dispatch.DispMode IS NULL) AND (products_category.sno = 10) OR (dispatch.Branch_Id = @BranchID) AND (dispatch.DispMode = 'SPL') AND (products_category.sno = 10) GROUP BY dispatch.BranchID, categorysno, branchdata.BranchName, productsdata.Inventorysno ORDER BY dispatch.BranchID");

                    //cmd = new MySqlCommand("SELECT dispatch.sno, dispatch.BranchID, SUM(tripsubdata.Qty) AS dispatchqty, products_category.Categoryname, products_category.sno AS categorysno,branchdata.BranchName FROM dispatch INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN (SELECT Sno, AssignDate FROM tripdata WHERE (AssignDate BETWEEN @d1 AND @d2)) tripdat ON triproutes.Tripdata_sno = tripdat.Sno INNER JOIN tripsubdata ON tripdat.Sno = tripsubdata.Tripdata_sno INNER JOIN productsdata ON tripsubdata.ProductId = productsdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno INNER JOIN branchdata ON dispatch.BranchID = branchdata.sno WHERE (dispatch.Branch_Id = @BranchID) AND (dispatch.DispMode IS NULL) AND (products_category.sno = 10) OR (dispatch.Branch_Id = @BranchID) AND (dispatch.DispMode = 'SPL') AND (products_category.sno = 10) GROUP BY dispatch.BranchID, categorysno, branchdata.BranchName ORDER BY dispatch.BranchID");
                    cmd.Parameters.AddWithValue("@d1", GetLowDate(Currentdate));
                    cmd.Parameters.AddWithValue("@d2", GetHighDate(Currentdate));
                    cmd.Parameters.AddWithValue("@BranchID", context.Session["branch"]);
                    DataTable dtTotalCurd_BranchWise = vdbmngr.SelectQuery(cmd).Tables[0];
                    cmd = new MySqlCommand("SELECT    dispatch.sno, dispatch.BranchID, SUM(tripsubdata.Qty) AS dispatchqty, products_category.Categoryname, products_category.sno AS categorysno,branchdata.BranchName, productsdata.Inventorysno FROM  dispatch INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN (SELECT  Sno, AssignDate FROM  tripdata WHERE (AssignDate BETWEEN @d1 AND @d2)) tripdat ON triproutes.Tripdata_sno = tripdat.Sno INNER JOIN tripsubdata ON tripdat.Sno = tripsubdata.Tripdata_sno INNER JOIN productsdata ON tripsubdata.ProductId = productsdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno INNER JOIN branchdata ON dispatch.BranchID = branchdata.sno WHERE  (dispatch.Branch_Id = @BranchID) AND (dispatch.DispMode IS NULL) AND (products_category.sno = 10) OR (dispatch.Branch_Id = @BranchID) AND (dispatch.DispMode = 'SPL') AND (products_category.sno = 10) GROUP BY dispatch.BranchID, categorysno, branchdata.BranchName, productsdata.Inventorysno ORDER BY dispatch.BranchID");

                    //cmd = new MySqlCommand("SELECT dispatch.sno, dispatch.BranchID, SUM(tripsubdata.Qty) AS dispatchqty, products_category.Categoryname, products_category.sno AS categorysno,branchdata.BranchName FROM dispatch INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN (SELECT Sno, AssignDate FROM tripdata WHERE (AssignDate BETWEEN @d1 AND @d2)) tripdat ON triproutes.Tripdata_sno = tripdat.Sno INNER JOIN tripsubdata ON tripdat.Sno = tripsubdata.Tripdata_sno INNER JOIN productsdata ON tripsubdata.ProductId = productsdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno INNER JOIN branchdata ON dispatch.BranchID = branchdata.sno WHERE (dispatch.Branch_Id = @BranchID) AND (dispatch.DispMode IS NULL) AND (products_category.sno = 10) OR (dispatch.Branch_Id = @BranchID) AND (dispatch.DispMode = 'SPL') AND (products_category.sno = 10) GROUP BY dispatch.BranchID, categorysno, branchdata.BranchName ORDER BY dispatch.BranchID");
                    cmd.Parameters.AddWithValue("@d1", GetLowDate(Currentdate.AddDays(-1)));
                    cmd.Parameters.AddWithValue("@d2", GetHighDate(Currentdate.AddDays(-1)));
                    cmd.Parameters.AddWithValue("@BranchID", context.Session["branch"]);
                    DataTable Previous_dtTotalCurd_BranchWise = vdbmngr.SelectQuery(cmd).Tables[0];
                    cmd = new MySqlCommand("SELECT    dispatch.sno, dispatch.BranchID, SUM(tripsubdata.Qty) AS dispatchqty, products_category.Categoryname, products_category.sno AS categorysno, branchdata.BranchName, productsdata.Inventorysno FROM  dispatch INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN (SELECT Sno, AssignDate  FROM  tripdata WHERE (AssignDate BETWEEN @d1 AND @d2)) tripdat ON triproutes.Tripdata_sno = tripdat.Sno INNER JOIN tripsubdata ON tripdat.Sno = tripsubdata.Tripdata_sno INNER JOIN productsdata ON tripsubdata.ProductId = productsdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno INNER JOIN branchdata ON dispatch.BranchID = branchdata.sno WHERE  (dispatch.Branch_Id = @BranchID) AND (dispatch.DispMode IS NULL) AND (products_category.sno = 9) OR (dispatch.Branch_Id = @BranchID) AND (dispatch.DispMode = 'SPL') AND (products_category.sno = 9) GROUP BY dispatch.BranchID, categorysno, branchdata.BranchName, productsdata.Inventorysno ORDER BY dispatch.BranchID");
                    //cmd = new MySqlCommand("SELECT dispatch.sno, dispatch.BranchID, SUM(tripsubdata.Qty) AS dispatchqty, products_category.Categoryname, products_category.sno AS categorysno,branchdata.BranchName FROM dispatch INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN (SELECT Sno, AssignDate FROM tripdata WHERE (AssignDate BETWEEN @d1 AND @d2)) tripdat ON triproutes.Tripdata_sno = tripdat.Sno INNER JOIN tripsubdata ON tripdat.Sno = tripsubdata.Tripdata_sno INNER JOIN productsdata ON tripsubdata.ProductId = productsdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno INNER JOIN branchdata ON dispatch.BranchID = branchdata.sno WHERE (dispatch.Branch_Id = @BranchID) AND (dispatch.DispMode IS NULL) AND (products_category.sno = 9) OR (dispatch.Branch_Id = @BranchID) AND (dispatch.DispMode = 'SPL') AND (products_category.sno = 9) GROUP BY dispatch.BranchID, categorysno, branchdata.BranchName ORDER BY dispatch.BranchID");
                    cmd.Parameters.AddWithValue("@d1", GetLowDate(Currentdate));
                    cmd.Parameters.AddWithValue("@d2", GetHighDate(Currentdate));
                    cmd.Parameters.AddWithValue("@BranchID", context.Session["branch"]);
                    DataTable dtTotalMilk_BranchWise = vdbmngr.SelectQuery(cmd).Tables[0];
                    cmd = new MySqlCommand("SELECT   dispatch.sno, dispatch.BranchID, SUM(tripsubdata.Qty) AS dispatchqty, products_category.Categoryname, products_category.sno AS categorysno, branchdata.BranchName, productsdata.Inventorysno FROM  dispatch INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN (SELECT Sno, AssignDate  FROM  tripdata WHERE (AssignDate BETWEEN @d1 AND @d2)) tripdat ON triproutes.Tripdata_sno = tripdat.Sno INNER JOIN tripsubdata ON tripdat.Sno = tripsubdata.Tripdata_sno INNER JOIN productsdata ON tripsubdata.ProductId = productsdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno INNER JOIN branchdata ON dispatch.BranchID = branchdata.sno WHERE  (dispatch.Branch_Id = @BranchID) AND (dispatch.DispMode IS NULL) AND (products_category.sno = 9) OR (dispatch.Branch_Id = @BranchID) AND (dispatch.DispMode = 'SPL') AND (products_category.sno = 9) GROUP BY dispatch.BranchID, categorysno, branchdata.BranchName, productsdata.Inventorysno ORDER BY dispatch.BranchID");
                    //cmd = new MySqlCommand("SELECT dispatch.sno, dispatch.BranchID, SUM(tripsubdata.Qty) AS dispatchqty, products_category.Categoryname, products_category.sno AS categorysno,branchdata.BranchName FROM dispatch INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN (SELECT Sno, AssignDate FROM tripdata WHERE (AssignDate BETWEEN @d1 AND @d2)) tripdat ON triproutes.Tripdata_sno = tripdat.Sno INNER JOIN tripsubdata ON tripdat.Sno = tripsubdata.Tripdata_sno INNER JOIN productsdata ON tripsubdata.ProductId = productsdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno INNER JOIN branchdata ON dispatch.BranchID = branchdata.sno WHERE (dispatch.Branch_Id = @BranchID) AND (dispatch.DispMode IS NULL) AND (products_category.sno = 9) OR (dispatch.Branch_Id = @BranchID) AND (dispatch.DispMode = 'SPL') AND (products_category.sno = 9) GROUP BY dispatch.BranchID, categorysno, branchdata.BranchName ORDER BY dispatch.BranchID");
                    cmd.Parameters.AddWithValue("@d1", GetLowDate(Currentdate.AddDays(-1)));
                    cmd.Parameters.AddWithValue("@d2", GetHighDate(Currentdate.AddDays(-1)));
                    cmd.Parameters.AddWithValue("@BranchID", context.Session["branch"]);
                    DataTable Previous_dtTotalMilk_BranchWise = vdbmngr.SelectQuery(cmd).Tables[0];
                    cmd = new MySqlCommand("SELECT dispatch.sno, dispatch.BranchID, SUM(tripsubdata.Qty) AS dispatchqty, products_category.Categoryname, products_category.sno AS categorysno,branchdata.BranchName FROM dispatch INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN (SELECT Sno, AssignDate FROM tripdata WHERE (AssignDate BETWEEN @d1 AND @d2)) tripdat ON triproutes.Tripdata_sno = tripdat.Sno INNER JOIN tripsubdata ON tripdat.Sno = tripsubdata.Tripdata_sno INNER JOIN productsdata ON tripsubdata.ProductId = productsdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno INNER JOIN branchdata ON dispatch.BranchID = branchdata.sno WHERE (dispatch.Branch_Id = @branch) AND (dispatch.DispMode IS NOT NULL) AND (products_category.sno = 10) AND (dispatch.DispMode <> 'SPL') UNION SELECT dispatch_1.sno, dispatch_1.BranchID, SUM(tripsubdata_1.Qty) AS dispatchqty, products_category_1.Categoryname, products_category_1.sno AS categorysno,branchdata_1.BranchName FROM dispatch dispatch_1 INNER JOIN triproutes triproutes_1 ON dispatch_1.sno = triproutes_1.RouteID INNER JOIN (SELECT Sno, AssignDate FROM tripdata tripdata_1 WHERE (AssignDate BETWEEN @d1 AND @d2)) tripdat_1 ON triproutes_1.Tripdata_sno = tripdat_1.Sno INNER JOIN tripsubdata tripsubdata_1 ON tripdat_1.Sno = tripsubdata_1.Tripdata_sno INNER JOIN productsdata productsdata_1 ON tripsubdata_1.ProductId = productsdata_1.sno INNER JOIN products_subcategory products_subcategory_1 ON productsdata_1.SubCat_sno = products_subcategory_1.sno INNER JOIN products_category products_category_1 ON products_subcategory_1.category_sno = products_category_1.sno INNER JOIN branchdata branchdata_1 ON dispatch_1.BranchID = branchdata_1.sno WHERE (dispatch_1.Branch_Id = @branch) AND (dispatch_1.DispMode IS NOT NULL) AND (products_category_1.sno = 9) AND (dispatch_1.DispMode <> 'SPL')");
                    cmd.Parameters.AddWithValue("@d1", GetLowDate(Currentdate));
                    cmd.Parameters.AddWithValue("@d2", GetHighDate(Currentdate));
                    cmd.Parameters.AddWithValue("@branch", context.Session["branch"]);
                    DataTable dtdirectdispatch = vdbmngr.SelectQuery(cmd).Tables[0];
                    cmd = new MySqlCommand("SELECT dispatch.sno, dispatch.BranchID, SUM(tripsubdata.Qty) AS dispatchqty, products_category.Categoryname, products_category.sno AS categorysno,branchdata.BranchName FROM dispatch INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN (SELECT Sno, AssignDate FROM tripdata WHERE (AssignDate BETWEEN @d1 AND @d2)) tripdat ON triproutes.Tripdata_sno = tripdat.Sno INNER JOIN tripsubdata ON tripdat.Sno = tripsubdata.Tripdata_sno INNER JOIN productsdata ON tripsubdata.ProductId = productsdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno INNER JOIN branchdata ON dispatch.BranchID = branchdata.sno WHERE (dispatch.Branch_Id = @branch) AND (dispatch.DispMode IS NOT NULL) AND (products_category.sno = 10) AND (dispatch.DispMode <> 'SPL') UNION SELECT dispatch_1.sno, dispatch_1.BranchID, SUM(tripsubdata_1.Qty) AS dispatchqty, products_category_1.Categoryname, products_category_1.sno AS categorysno,branchdata_1.BranchName FROM dispatch dispatch_1 INNER JOIN triproutes triproutes_1 ON dispatch_1.sno = triproutes_1.RouteID INNER JOIN (SELECT Sno, AssignDate FROM tripdata tripdata_1 WHERE (AssignDate BETWEEN @d1 AND @d2)) tripdat_1 ON triproutes_1.Tripdata_sno = tripdat_1.Sno INNER JOIN tripsubdata tripsubdata_1 ON tripdat_1.Sno = tripsubdata_1.Tripdata_sno INNER JOIN productsdata productsdata_1 ON tripsubdata_1.ProductId = productsdata_1.sno INNER JOIN products_subcategory products_subcategory_1 ON productsdata_1.SubCat_sno = products_subcategory_1.sno INNER JOIN products_category products_category_1 ON products_subcategory_1.category_sno = products_category_1.sno INNER JOIN branchdata branchdata_1 ON dispatch_1.BranchID = branchdata_1.sno WHERE (dispatch_1.Branch_Id = @branch) AND (dispatch_1.DispMode IS NOT NULL) AND (products_category_1.sno = 9) AND (dispatch_1.DispMode <> 'SPL')");
                    cmd.Parameters.AddWithValue("@d1", GetLowDate(Currentdate.AddDays(-1)));
                    cmd.Parameters.AddWithValue("@d2", GetHighDate(Currentdate.AddDays(-1)));
                    cmd.Parameters.AddWithValue("@branch", context.Session["branch"]);
                    DataTable Previous_dtdirectdispatch = vdbmngr.SelectQuery(cmd).Tables[0];
                    cmd = new MySqlCommand("SELECT SUM(tripsubdata.Qty) AS dispatchqty, products_category.Categoryname, products_category.sno AS categorysno, productsdata.sno AS productsno, products_subcategory.sno AS subcategory, products_subcategory.SubCatName, productsdata.ProductName, productsdata.Inventorysno FROM dispatch INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN (SELECT Sno, AssignDate FROM tripdata WHERE (AssignDate BETWEEN @d1 AND @d2)) tripdat ON triproutes.Tripdata_sno = tripdat.Sno INNER JOIN tripsubdata ON tripdat.Sno = tripsubdata.Tripdata_sno INNER JOIN productsdata ON tripsubdata.ProductId = productsdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno INNER JOIN branchdata ON dispatch.BranchID = branchdata.sno WHERE (dispatch.Branch_Id = @branch) GROUP BY productsdata.Inventorysno, products_category.sno ORDER BY productsdata.Inventorysno");
                    cmd.Parameters.AddWithValue("@d1", GetLowDate(Currentdate));
                    cmd.Parameters.AddWithValue("@d2", GetHighDate(Currentdate));
                    cmd.Parameters.AddWithValue("@branch", context.Session["branch"]);
                    DataTable dtBiProducts = vdbmngr.SelectQuery(cmd).Tables[0];
                    cmd = new MySqlCommand("SELECT SUM(tripsubdata.Qty) AS dispatchqty, products_category.Categoryname, products_category.sno AS categorysno, productsdata.sno AS productsno, products_subcategory.sno AS subcategory, products_subcategory.SubCatName, productsdata.ProductName, productsdata.Inventorysno FROM dispatch INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN (SELECT Sno, AssignDate FROM tripdata WHERE (AssignDate BETWEEN @d1 AND @d2)) tripdat ON triproutes.Tripdata_sno = tripdat.Sno INNER JOIN tripsubdata ON tripdat.Sno = tripsubdata.Tripdata_sno INNER JOIN productsdata ON tripsubdata.ProductId = productsdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno INNER JOIN branchdata ON dispatch.BranchID = branchdata.sno WHERE (dispatch.Branch_Id = @branch) GROUP BY productsdata.Inventorysno, products_category.sno ORDER BY productsdata.Inventorysno");
                    cmd.Parameters.AddWithValue("@d1", GetLowDate(Currentdate.AddDays(-1)));
                    cmd.Parameters.AddWithValue("@d2", GetHighDate(Currentdate.AddDays(-1)));
                    cmd.Parameters.AddWithValue("@branch", context.Session["branch"]);
                    DataTable Previous_dtBiProducts = vdbmngr.SelectQuery(cmd).Tables[0];
                    double SubCategoryTotalQty1 = 0;
                    double PrevSubCategoryTotalQty1 = 0;
                    double GTotalDiff = 0;
                    double milktotal = 0;
                    double totalmilk_CansQty = 0;
                    double totalcurd_CansQty = 0;
                    double Previousmilktotal = 0;
                    double curdtotal = 0;
                    double Previouscurdtotal = 0;
                    string subcategoryName1 = "";
                    subcategoryName1 += DispatchName + "\r\n";
                    subcategoryName1 += "TOTAL MILK AND CURD" + "   For Date:   " + fromdate.ToString("dd/MM/yyyy") + "\r\n";

                    DataView temptable = new DataView(dtTotalMilk_BranchWise);
                    DataTable distincttabledue = temptable.ToTable(true, "BranchID");
                    if (dtTotalMilk_BranchWise.Rows.Count > 0)
                    {
                        foreach (DataRow drbranch in distincttabledue.Rows)
                        {
                            double milkdiff = 0;
                            double milkcandiff = 0;
                            double curdcandiff = 0;
                            double milkQty = 0;
                            double PreviousmilkQty = 0;
                            double milkQtyCurdqty = 0;
                            double PreviousmilkQtyCurdqty = 0;
                            double DiffmilkQtyCurdqty = 0;
                            //double PreviousmilkQty1 = 0;
                            double canstotal = 0;
                            double prevcanstotal = 0;
                            string branchname = "";

                            foreach (DataRow dr in dtTotalMilk_BranchWise.Select("BranchID='" + drbranch["BranchID"].ToString() + "'"))
                            {

                                branchname = dr["BranchName"].ToString();
                                if (dr["Inventorysno"].ToString() == "1" || dr["Inventorysno"].ToString() == "14" || dr["Inventorysno"].ToString() == "5")
                                {

                                    double tempmilkQty = 0;
                                    string branchid = dr["BranchID"].ToString();
                                    double.TryParse(dr["dispatchqty"].ToString(), out tempmilkQty);
                                    milkQty += tempmilkQty;
                                }
                                else
                                {
                                    double cansqty = 0;
                                    double.TryParse(dr["dispatchqty"].ToString(), out cansqty);
                                    canstotal += cansqty;
                                }
                            }
                            foreach (DataRow drdtclubtotal in Previous_dtTotalMilk_BranchWise.Select("BranchID='" + drbranch["BranchID"].ToString() + "'"))
                            {

                                if (drdtclubtotal["Inventorysno"].ToString() == "1" || drdtclubtotal["Inventorysno"].ToString() == "14" || drdtclubtotal["Inventorysno"].ToString() == "5")
                                {
                                    double temppreviousMilkQty = 0;
                                    double.TryParse(drdtclubtotal["dispatchqty"].ToString(), out temppreviousMilkQty);
                                    PreviousmilkQty += temppreviousMilkQty;
                                }
                                else
                                {
                                    double prevcansqty = 0;
                                    double.TryParse(drdtclubtotal["dispatchqty"].ToString(), out prevcansqty);
                                    prevcanstotal += prevcansqty;
                                }
                            }
                            milkdiff = Math.Round(milkQty - PreviousmilkQty, 2);
                            milkcandiff = Math.Round(canstotal - prevcanstotal, 2);


                            subcategoryName1 += branchname + "\r\n";
                            if (milkQty != 0)
                            {
                                subcategoryName1 += "MILK" + "  =" + Math.Round(milkQty, 2) + "\r\n";
                            }
                            if (canstotal != 0)
                            {
                                subcategoryName1 += "MILKCANS" + "  =" + Math.Round(canstotal, 2) + "\r\n";
                            }
                            SubCategoryTotalQty1 += Math.Round(milkQty, 2);
                            milktotal += Math.Round(milkQty, 2);
                            Previousmilktotal += Math.Round(PreviousmilkQty, 2);
                            SubCategoryTotalQty1 += Math.Round(canstotal, 2);
                            totalmilk_CansQty += Math.Round(canstotal, 2);


                            //new
                            double PreviousQty = 0;
                            double DiffQty = 0;
                            double unitQty = 0;
                            double cansunitQty = 0;
                            double PreviousCansQty = 0;
                            //new close
                            foreach (DataRow drcurd in dtTotalCurd_BranchWise.Select("BranchID='" + drbranch["BranchID"].ToString() + "'"))
                            {
                                //if (drbranch["BranchID"].ToString() == drcurd["BranchID"].ToString())
                                //{

                                if (drcurd["Inventorysno"].ToString() == "1" || drcurd["Inventorysno"].ToString() == "14" || drcurd["Inventorysno"].ToString() == "5")
                                {
                                    double tempcansunitQty = 0;
                                    double.TryParse(drcurd["dispatchqty"].ToString(), out tempcansunitQty);
                                    cansunitQty += tempcansunitQty;
                                }
                                else
                                {
                                    double tempunitQty = 0;
                                    double.TryParse(drcurd["dispatchqty"].ToString(), out tempunitQty);
                                    unitQty += tempunitQty;
                                }
                            }
                            foreach (DataRow drdtclubtotal in Previous_dtTotalCurd_BranchWise.Select("BranchID='" + drbranch["BranchID"].ToString() + "'"))
                            {
                                if (drdtclubtotal["Inventorysno"].ToString() == "1" || drdtclubtotal["Inventorysno"].ToString() == "14" || drdtclubtotal["Inventorysno"].ToString() == "5")
                                {
                                    double tempprevcansqtyunitQty = 0;
                                    double.TryParse(drdtclubtotal["dispatchqty"].ToString(), out tempprevcansqtyunitQty);
                                    PreviousCansQty += tempprevcansqtyunitQty;
                                }
                                else
                                {
                                    double tempPreviousQty = 0;
                                    double.TryParse(drdtclubtotal["dispatchqty"].ToString(), out tempPreviousQty);
                                    PreviousQty += tempPreviousQty;
                                }
                            }
                            DiffQty = Math.Round(unitQty - PreviousQty, 2);
                            curdcandiff = Math.Round(cansunitQty - PreviousCansQty, 2);
                            if (unitQty != 0)
                            {
                                subcategoryName1 += "CURD" + "  =" + Math.Round(unitQty, 2) + "\r\n";
                            }
                            if (cansunitQty != 0)
                            {
                                subcategoryName1 += "CURDCans" + "  =" + Math.Round(cansunitQty, 2) + "\r\n";
                            }
                            SubCategoryTotalQty1 += Math.Round(unitQty, 2);
                            curdtotal += Math.Round(unitQty, 2);

                            SubCategoryTotalQty1 += Math.Round(cansunitQty, 2);
                            totalcurd_CansQty += cansunitQty;

                            Previouscurdtotal += Math.Round(PreviousQty, 2);
                            milkQtyCurdqty = Math.Round(milkQty + unitQty + cansunitQty + canstotal, 2);
                            PreviousmilkQtyCurdqty = Math.Round(PreviousmilkQty + PreviousQty, 2);
                            //}
                            //}
                            DiffmilkQtyCurdqty = Math.Round(milkQtyCurdqty - PreviousmilkQtyCurdqty, 2);
                            subcategoryName1 += "TOTAL" + "  =" + Math.Round(milkQtyCurdqty, 2) + "(" + Math.Round(DiffmilkQtyCurdqty, 2) + ")" + "\r\n";
                            //}
                        }
                        subcategoryName1 += "Direct Sale" + ":" + "\r\n";
                        double DirectmilkQtyCurdqty = 0;
                        foreach (DataRow dr in dtdirectdispatch.Rows)
                        {
                            double DirectmilkQty = 0;
                            double PreviousDirectmilkQty = 0;
                            double.TryParse(dr["dispatchqty"].ToString(), out DirectmilkQty);
                            if (dr["categorysno"].ToString() == "9")
                            {
                                if (DirectmilkQty != 0)
                                {
                                    subcategoryName1 += "MILK" + "  =" + Math.Round(DirectmilkQty, 2) + "\r\n";
                                }
                                SubCategoryTotalQty1 += Math.Round(DirectmilkQty, 2);
                                foreach (DataRow drdtclubtotal in Previous_dtdirectdispatch.Select("categorysno='" + dr["categorysno"].ToString() + "'"))
                                {
                                    double.TryParse(drdtclubtotal["dispatchqty"].ToString(), out PreviousDirectmilkQty);
                                }
                                milktotal += Math.Round(DirectmilkQty, 2);
                                Previousmilktotal += Math.Round(PreviousDirectmilkQty, 2);
                                DirectmilkQtyCurdqty += Math.Round(DirectmilkQty, 2);
                            }
                            if (dr["categorysno"].ToString() == "10")
                            {
                                if (DirectmilkQty != 0)
                                {
                                    subcategoryName1 += "CURD" + "  =" + Math.Round(DirectmilkQty, 2) + "\r\n";
                                }
                                SubCategoryTotalQty1 += Math.Round(DirectmilkQty, 2);
                                foreach (DataRow drdtclubtotal in Previous_dtdirectdispatch.Select("categorysno='" + dr["categorysno"].ToString() + "'"))
                                {
                                    double.TryParse(drdtclubtotal["dispatchqty"].ToString(), out PreviousDirectmilkQty);
                                }
                                curdtotal += Math.Round(DirectmilkQty, 2);
                                Previouscurdtotal += Math.Round(PreviousDirectmilkQty, 2);
                                DirectmilkQtyCurdqty += Math.Round(DirectmilkQty, 2);
                            }
                        }
                        subcategoryName1 += "TOTAL" + "  =" + Math.Round(DirectmilkQtyCurdqty, 2) + "\r\n";
                        double totbuttermilk = 0;
                        double Previoustotbuttermilk = 0;
                        double totCupcurd200 = 0;
                        double totCupcurd100 = 0;
                        double totCupcurd500 = 0;
                        double totMilkcan10ltr = 0;
                        double totMilkcan5ltr = 0;
                        double totMilkcan20ltr = 0;
                        double totMilkcan40ltr = 0;
                        double totCurdcan40ltr = 0;
                        double totCurdcan20ltr = 0;
                        double totCurdcan10ltr = 0;
                        double totCurdcan5ltr = 0;
                        double totBkts10kgs = 0;
                        double totBkts5kgs = 0;
                        foreach (DataRow dr in dtBiProducts.Rows)
                        {
                            if (dr["Inventorysno"].ToString() == "1")
                            {
                                if (dr["categorysno"].ToString() == "12")
                                {
                                    double buttermilk = 0;
                                    double Previousbuttermilk = 0;
                                    double.TryParse(dr["dispatchqty"].ToString(), out buttermilk);
                                    foreach (DataRow drdtclubtotal in Previous_dtBiProducts.Select("categorysno='" + dr["categorysno"].ToString() + "'"))
                                    {
                                        double.TryParse(drdtclubtotal["dispatchqty"].ToString(), out Previousbuttermilk);
                                    }
                                    totbuttermilk += buttermilk;
                                    Previoustotbuttermilk += Previousbuttermilk;
                                }
                                if (dr["productsno"].ToString() == "101")
                                {
                                    double Cupcurd200 = 0;
                                    double.TryParse(dr["dispatchqty"].ToString(), out Cupcurd200);
                                    totCupcurd200 += Cupcurd200;
                                }
                                if (dr["productsno"].ToString() == "100")
                                {
                                    double Cupcurd100 = 0;
                                    double.TryParse(dr["dispatchqty"].ToString(), out Cupcurd100);
                                    totCupcurd100 += Cupcurd100;
                                }
                            }
                            if (dr["Inventorysno"].ToString() == "2")
                            {
                                if (dr["categorysno"].ToString() == "9")
                                {
                                    double Milkcan10ltr = 0;
                                    double.TryParse(dr["dispatchqty"].ToString(), out Milkcan10ltr);
                                    totMilkcan10ltr += Milkcan10ltr;
                                }
                                if (dr["categorysno"].ToString() == "10")
                                {
                                    double Curdcan10ltr = 0;
                                    double.TryParse(dr["dispatchqty"].ToString(), out Curdcan10ltr);
                                    totCurdcan10ltr += Curdcan10ltr;
                                }
                            }
                            if (dr["Inventorysno"].ToString() == "3")
                            {
                                if (dr["categorysno"].ToString() == "9")
                                {
                                    double Milkcan20ltr = 0;
                                    double.TryParse(dr["dispatchqty"].ToString(), out Milkcan20ltr);
                                    totMilkcan20ltr += Milkcan20ltr;
                                }
                                if (dr["categorysno"].ToString() == "10")
                                {
                                    double Curdcan20ltr = 0;
                                    double.TryParse(dr["dispatchqty"].ToString(), out Curdcan20ltr);
                                    totCurdcan20ltr += Curdcan20ltr;
                                }
                            }
                            if (dr["Inventorysno"].ToString() == "4")
                            {
                                if (dr["categorysno"].ToString() == "9")
                                {
                                    double Milkcan40ltr = 0;
                                    double.TryParse(dr["dispatchqty"].ToString(), out Milkcan40ltr);
                                    totMilkcan40ltr += Milkcan40ltr;
                                }
                                if (dr["categorysno"].ToString() == "10")
                                {
                                    double Curdcan40ltr = 0;
                                    double.TryParse(dr["dispatchqty"].ToString(), out Curdcan40ltr);
                                    totCurdcan40ltr += Curdcan40ltr;
                                }
                            }
                            if (dr["Inventorysno"].ToString() == "5")
                            {
                                if (dr["categorysno"].ToString() == "9")
                                {
                                    double Milkcan5ltr = 0;
                                    double.TryParse(dr["dispatchqty"].ToString(), out Milkcan5ltr);
                                    totMilkcan5ltr += Milkcan5ltr;
                                }
                                if (dr["categorysno"].ToString() == "10")
                                {
                                    double Curdcan5ltr = 0;
                                    double.TryParse(dr["dispatchqty"].ToString(), out Curdcan5ltr);
                                    totCurdcan5ltr += Curdcan5ltr;
                                }
                            }
                            if (dr["Inventorysno"].ToString() == "7")
                            {

                                if (dr["categorysno"].ToString() == "10")
                                {
                                    double bkt10kgs = 0;
                                    double.TryParse(dr["dispatchqty"].ToString(), out bkt10kgs);
                                    totBkts10kgs += bkt10kgs;
                                }
                            }
                            if (dr["Inventorysno"].ToString() == "8")
                            {

                                if (dr["categorysno"].ToString() == "10")
                                {
                                    double bkt5kgs = 0;
                                    double.TryParse(dr["dispatchqty"].ToString(), out bkt5kgs);
                                    totBkts5kgs += bkt5kgs;
                                }
                            }

                            if (dr["Inventorysno"].ToString() == "6")
                            {
                                if (dr["productsno"].ToString() == "140")
                                {
                                    double Cupcurd500 = 0;
                                    double.TryParse(dr["dispatchqty"].ToString(), out Cupcurd500);
                                    totCupcurd500 += Cupcurd500;
                                }
                            }
                        }
                        double totmilkcan = totMilkcan10ltr + totMilkcan20ltr + totMilkcan40ltr + totMilkcan5ltr;
                        double totcurdcan = totCurdcan10ltr + totCurdcan20ltr + totCurdcan40ltr + totCurdcan5ltr;
                        double totcurdbucket = totBkts10kgs + totBkts5kgs;
                        double previousMilkdifftot = 0;
                        double previousCurddifftot = 0;
                        previousMilkdifftot = Math.Round(milktotal - Previousmilktotal, 2);
                        previousCurddifftot = Math.Round(curdtotal - Previouscurdtotal, 2);
                        //subcategoryName1 += "TOTAL MILK" + "  :" + Math.Round(milktotal, 2) + "(" + previousMilkdifftot + ")" + "\r\n";
                        //subcategoryName1 += "TOTAL CURD" + "  :" + Math.Round(curdtotal, 2) + "(" + previousCurddifftot + ")" + "\r\n";
                        //if (totbuttermilk > 0)
                        //{
                        //    subcategoryName1 += "BUTTER MILK" + "  :" + Math.Round(totbuttermilk, 2) + "\r\n";
                        //    SubCategoryTotalQty1 += Math.Round(totbuttermilk, 2);
                        //}
                        //PrevSubCategoryTotalQty1 = Previousmilktotal + Previouscurdtotal + Previoustotbuttermilk;
                        //GTotalDiff = Math.Round(SubCategoryTotalQty1 - PrevSubCategoryTotalQty1, 2);
                        //subcategoryName1 += "G. TOTAL" + "  :" + Math.Round(SubCategoryTotalQty1, 2) + "(" + GTotalDiff + ")" + "\r\n";
                        if (totCupcurd100 != 0)
                        {
                            subcategoryName1 += "100mlBox" + "  :" + Math.Round(totCupcurd100, 2) + "\r\n";

                        }
                        if (totCupcurd200 != 0)
                        {
                            subcategoryName1 += "200mlBox" + "  :" + Math.Round(totCupcurd200, 2) + "\r\n";
                        }
                        if (totCupcurd500 != 0)
                        {
                            subcategoryName1 += "500mlBox" + "  :" + Math.Round(totCupcurd500, 2) + "\r\n";

                        }

                        if (totmilkcan > 0)
                        {
                            subcategoryName1 += "CAN MILK" + "  :" + Math.Round(totmilkcan, 2) + "\r\n";
                        }
                        if (totCurdcan5ltr > 0)
                        {
                            subcategoryName1 += "CURD CAN 5 ltr" + "  :" + Math.Round(totCurdcan5ltr / 5, 2) + "\r\n";
                        }
                        if (totCurdcan10ltr > 0)
                        {
                            subcategoryName1 += "CURD CAN 10 ltr" + "  :" + Math.Round(totCurdcan10ltr / 10, 2) + "\r\n";
                        }
                        if (totCurdcan20ltr > 0)
                        {
                            subcategoryName1 += "CURD CAN 20 ltr" + "  :" + Math.Round(totCurdcan20ltr / 20, 2) + "\r\n";
                        }
                        if (totCurdcan40ltr > 0)
                        {
                            subcategoryName1 += "CURD CAN 40 ltr" + "  :" + Math.Round(totCurdcan40ltr / 40, 2) + "\r\n";
                        }
                        if (totBkts5kgs > 0)
                        {
                            subcategoryName1 += "CURD BUCKET 5 kgs" + "  :" + Math.Round(totBkts5kgs / 5, 2) + "\r\n";
                        }
                        if (totBkts10kgs > 0)
                        {
                            subcategoryName1 += "CURD BUCKET 10 kgs" + "  :" + Math.Round(totBkts10kgs / 10, 2) + "\r\n";
                        }
                        if (milktotal != 0)
                        {
                            subcategoryName1 += "T.MILK" + "  =" + Math.Round(milktotal, 2) + "(" + previousMilkdifftot + ")" + "\r\n";
                        }
                        if (totalmilk_CansQty != 0)
                        {
                            subcategoryName1 += "T.MILKCAN" + "  =" + Math.Round(totalmilk_CansQty, 2) + "\r\n";
                        }
                        if (curdtotal != 0)
                        {
                            subcategoryName1 += "T.CURD" + "  =" + Math.Round(curdtotal, 2) + "(" + previousCurddifftot + ")" + "\r\n";
                        }
                        if (totalcurd_CansQty != 0)
                        {
                            subcategoryName1 += "T.CURDCAN" + "  =" + Math.Round(totalcurd_CansQty, 2) + "\r\n";
                        }
                        if (totbuttermilk > 0)
                        {
                            subcategoryName1 += "BUTTER MILK" + "  =" + Math.Round(totbuttermilk, 2) + "\r\n";
                            SubCategoryTotalQty1 += Math.Round(totbuttermilk, 2);
                        }
                        PrevSubCategoryTotalQty1 = Previousmilktotal + Previouscurdtotal + Previoustotbuttermilk;
                        GTotalDiff = Math.Round(SubCategoryTotalQty1 - PrevSubCategoryTotalQty1, 2);
                        subcategoryName1 += "G. TOTAL" + "  =" + Math.Round(SubCategoryTotalQty1, 2) + "(" + GTotalDiff + ")" + "\r\n";
                    }
                    if (MobNo.Length == 10)
                    {
                        if (context.Session["TitleName"].ToString() == "SRI VYSHNAVI DAIRY SPECIALITIES (P) LTD")
                        {
                            WebClient client2 = new WebClient();
                            //http://www.smsstriker.com/API/sms.php?username=vaishnavidairy&password=vyshnavi@123&from=VYSNVI&to=
                            string baseurl2 = "http://www.smsstriker.com/API/sms.php?username=vaishnavidairy&password=vyshnavi@123&from=VSALES&to=" + MobNo + "&msg=%20" + subcategoryName1 + "&type=1";
                            Stream data2 = client2.OpenRead(baseurl2);
                            StreamReader reader2 = new StreamReader(data2);
                            string ResponseID2 = reader2.ReadToEnd();
                            data2.Close();
                            reader2.Close();
                        }
                        else
                        {
                            WebClient client2 = new WebClient();
                            //http://www.smsstriker.com/API/sms.php?username=vaishnavidairy&password=vyshnavi@123&from=VYSNVI&to=
                            string baseurl2 = "http://www.smsstriker.com/API/sms.php?username=vaishnavidairy&password=vyshnavi@123&from=VFWYRA&to=" + MobNo + "&msg=%20" + subcategoryName1 + "&type=1";
                            Stream data2 = client2.OpenRead(baseurl2);
                            StreamReader reader2 = new StreamReader(data2);
                            string ResponseID2 = reader2.ReadToEnd();
                            data2.Close();
                            reader2.Close();
                        }

                        //string message = " " + subcategoryName1 + " ";
                        //// string text = message.Replace("\n", "\n" + System.Environment.NewLine);
                        //cmd = new MySqlCommand("insert into smsinfo (agentid,branchid,mainbranch,msg,mobileno,msgtype,branchname,doe) values (@agentid,@branchid,@mainbranch,@msg,@mobileno,@msgtype,@branchname,@doe)");
                        //cmd.Parameters.AddWithValue("@agentid", context.Session["branch"].ToString());
                        //cmd.Parameters.AddWithValue("@branchid", context.Session["branch"].ToString());
                        //cmd.Parameters.AddWithValue("@mainbranch", context.Session["SuperBranch"].ToString());
                        //cmd.Parameters.AddWithValue("@msg", message);
                        //cmd.Parameters.AddWithValue("@mobileno", MobNo);
                        //cmd.Parameters.AddWithValue("@msgtype", "TripEdnd");
                        //cmd.Parameters.AddWithValue("@branchname", DispatchName);
                        //cmd.Parameters.AddWithValue("@doe", ServerDateCurrentdate);
                        //vdbmngr.insert(cmd);

                    }
                    else
                    {
                        cmd = new MySqlCommand("SELECT Sno, UserName, Mobno FROM empmanage WHERE (Branch = @BranchID) AND (LevelType = 'Manager' OR LevelType = 'Director')");
                        cmd.Parameters.AddWithValue("@BranchID", context.Session["branch"]);
                        DataTable DtPhone = vdbmngr.SelectQuery(cmd).Tables[0];
                        if (DtPhone.Rows.Count > 0)
                        {
                            foreach (DataRow dr in DtPhone.Rows)
                            {
                                string PhoneNumber = dr["Mobno"].ToString();
                                if (PhoneNumber.Length == 10)
                                {
                                    if (context.Session["TitleName"].ToString() == "SRI VYSHNAVI DAIRY SPECIALITIES (P) LTD")
                                    {
                                        WebClient client2 = new WebClient();
                                        //http://www.smsstriker.com/API/sms.php?username=vaishnavidairy&password=vyshnavi@123&from=VYSNVI&to=
                                        string baseurl2 = "http://www.smsstriker.com/API/sms.php?username=vaishnavidairy&password=vyshnavi@123&from=VSALES&to=" + MobNo + "&msg=%20" + subcategoryName1 + "&type=1";
                                        Stream data2 = client2.OpenRead(baseurl2);
                                        StreamReader reader2 = new StreamReader(data2);
                                        string ResponseID2 = reader2.ReadToEnd();
                                        data2.Close();
                                        reader2.Close();
                                    }
                                    else
                                    {
                                        WebClient client2 = new WebClient();
                                        //http://www.smsstriker.com/API/sms.php?username=vaishnavidairy&password=vyshnavi@123&from=VYSNVI&to=
                                        string baseurl2 = "http://www.smsstriker.com/API/sms.php?username=vaishnavidairy&password=vyshnavi@123&from=VFWYRA&to=" + MobNo + "&msg=%20" + subcategoryName1 + "&type=1";
                                        Stream data2 = client2.OpenRead(baseurl2);
                                        StreamReader reader2 = new StreamReader(data2);
                                        string ResponseID2 = reader2.ReadToEnd();
                                        data2.Close();
                                        reader2.Close();
                                    }

                                    //string message = " " + subcategoryName1 + " ";
                                    //// string text = message.Replace("\n", "\n" + System.Environment.NewLine);
                                    //cmd = new MySqlCommand("insert into smsinfo (agentid,branchid,mainbranch,msg,mobileno,msgtype,branchname,doe) values (@agentid,@branchid,@mainbranch,@msg,@mobileno,@msgtype,@branchname,@doe)");
                                    //cmd.Parameters.AddWithValue("@agentid", context.Session["branch"].ToString());
                                    //cmd.Parameters.AddWithValue("@branchid", context.Session["branch"].ToString());
                                    //cmd.Parameters.AddWithValue("@mainbranch", context.Session["SuperBranch"].ToString());
                                    //cmd.Parameters.AddWithValue("@msg", message);
                                    //cmd.Parameters.AddWithValue("@mobileno", MobNo);
                                    //cmd.Parameters.AddWithValue("@msgtype", "TripEdnd");
                                    //cmd.Parameters.AddWithValue("@branchname", DispatchName);
                                    //cmd.Parameters.AddWithValue("@doe", ServerDateCurrentdate);
                                    //vdbmngr.insert(cmd);
                                }
                            }
                        }
                    }
                }

            }
        }
        catch (Exception ex)
        {
        }
    }
    private void btn_approve_voucher_grid(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            string VoucherID = context.Request["VoucherID"];
            string Approvalamt = context.Request["Amount"];
            double Amount = 0;
            double.TryParse(Approvalamt, out Amount);
            string Remarks = context.Request["remarks"];
            string Status = "A";
            string BranchID = "0";
            string LevelType = context.Session["LevelType"].ToString();
            if (LevelType == "AccountsOfficer" || LevelType == "Director")
            {
                BranchID = context.Request["branchID"];
            }
            else
            {
                BranchID = context.Session["branch"].ToString();
            }
            DateTime ServerDateCurrentdate = VehicleDBMgr.GetTime(vdbmngr.conn);
            cmd = new MySqlCommand("SELECT Branchid, UserData_sno, AmountPaid, Denominations, Remarks, Sno, PaidDate FROM collections WHERE (Branchid = @BranchID) AND (PaidDate BETWEEN @d1 AND @d2)");
            cmd.Parameters.AddWithValue("@BranchID", BranchID);
            cmd.Parameters.AddWithValue("@d1", GetLowDate(ServerDateCurrentdate));
            cmd.Parameters.AddWithValue("@d2", GetHighDate(ServerDateCurrentdate));
            DataTable dtcashbookstatus = vdbmngr.SelectQuery(cmd).Tables[0];
            if (dtcashbookstatus.Rows.Count > 0)
            {
                string msg = "Cash Book Has Been Closed For This Day";
                string response = GetJson(msg);
                context.Response.Write(response);
            }
            else
            {
                cmd = new MySqlCommand("Update cashpayables set Remarks=@Remarks,DOE=@DOE, ApprovedAmount=@ApprovedAmount ,ApprovalRemarks=@ApprovalRemarks,Status=@Status where Sno=@VocherID and BranchID=@BranchID");
                cmd.Parameters.AddWithValue("@Status", Status);
                cmd.Parameters.AddWithValue("@ApprovedAmount", Approvalamt);
                cmd.Parameters.AddWithValue("@ApprovalRemarks", Remarks);
                cmd.Parameters.AddWithValue("@Remarks", Remarks);
                cmd.Parameters.AddWithValue("@VocherID", VoucherID);
                cmd.Parameters.AddWithValue("@BranchID", BranchID);
                cmd.Parameters.AddWithValue("@DOE", ServerDateCurrentdate);
                vdbmngr.Update(cmd);
                string msg = "Voucher Approved successfully";
                string response = GetJson(msg);
                context.Response.Write(response);
            }

        }
        catch (Exception ex)
        {
            string msg = ex.Message;
            string response = GetJson(msg);
            context.Response.Write(response);
        }
    }
    private void get_fillsaleoffice_details_despatch(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            List<SoClass> Solist = new List<SoClass>();
            DataTable dtBranch = new DataTable();
            if (context.Session["salestype"].ToString() == "Plant")
            {
                //DataTable dtBranch = new DataTable();
                dtBranch.Columns.Add("BranchName");
                dtBranch.Columns.Add("sno");

                cmd = new MySqlCommand("SELECT branchdata.BranchName, branchdata.sno FROM branchdata INNER JOIN branchmappingtable ON branchdata.sno = branchmappingtable.SubBranch WHERE (branchmappingtable.SuperBranch = @SuperBranch) and (branchdata.SalesType=@SalesType) and (branchdata.flag<>0) ");
                cmd.Parameters.AddWithValue("@SuperBranch", context.Session["branch"]);
                cmd.Parameters.AddWithValue("@SalesType", "21");
                cmd.Parameters.AddWithValue("@SalesType1", "26");
                DataTable dtRoutedata = vdbmngr.SelectQuery(cmd).Tables[0];
                foreach (DataRow dr in dtRoutedata.Rows)
                {
                    DataRow newrow = dtBranch.NewRow();
                    newrow["BranchName"] = dr["BranchName"].ToString();
                    newrow["sno"] = dr["sno"].ToString();
                    dtBranch.Rows.Add(newrow);
                }
                cmd = new MySqlCommand("SELECT BranchName, sno FROM  branchdata WHERE (sno = @BranchID) and (flag<>0)");
                cmd.Parameters.AddWithValue("@BranchID", context.Session["branch"]);
                DataTable dtPlant = vdbmngr.SelectQuery(cmd).Tables[0];
                foreach (DataRow dr in dtPlant.Rows)
                {
                    DataRow newrow = dtBranch.NewRow();
                    newrow["BranchName"] = dr["BranchName"].ToString();
                    newrow["sno"] = dr["sno"].ToString();
                    dtBranch.Rows.Add(newrow);
                }
                cmd = new MySqlCommand("SELECT branchdata.BranchName, branchdata.sno FROM branchdata INNER JOIN branchmappingtable ON branchdata.sno = branchmappingtable.SubBranch WHERE (branchmappingtable.SuperBranch = @SuperBranch) and (branchdata.SalesType=@SalesType) and (branchdata.flag<>0) ");
                cmd.Parameters.AddWithValue("@SuperBranch", context.Session["branch"]);
                cmd.Parameters.AddWithValue("@SalesType", "23");
                DataTable dtNewPlant = vdbmngr.SelectQuery(cmd).Tables[0];
                foreach (DataRow dr in dtNewPlant.Rows)
                {
                    DataRow newrow = dtBranch.NewRow();
                    newrow["BranchName"] = dr["BranchName"].ToString();
                    newrow["sno"] = dr["sno"].ToString();
                    dtBranch.Rows.Add(newrow);
                }
            }
            else
            {
                cmd = new MySqlCommand("SELECT dispatch.DispName As BranchName , dispatch.sno As sno FROM dispatch INNER JOIN branchdata ON dispatch.Branch_Id = branchdata.sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE ((branchdata.sno = @BranchID)  and (DispType is NULL) AND   (dispatch.flag=@flag))  OR ((branchdata_1.SalesOfficeID = @SOID)  and (DispType is NULL) AND  (dispatch.flag=@flag))");
                //cmd = new MySqlCommand("SELECT DispName, sno FROM dispatch WHERE (Branch_Id = @BranchD)");
                cmd.Parameters.AddWithValue("@BranchID", context.Session["branch"].ToString());
                cmd.Parameters.AddWithValue("@SOID", context.Session["branch"].ToString());
                cmd.Parameters.AddWithValue("@flag", "1");
                dtBranch = vdbmngr.SelectQuery(cmd).Tables[0];
            }
            foreach (DataRow dr in dtBranch.Rows)
            {
                SoClass GetSoClass = new SoClass();
                GetSoClass.Sno = dr["sno"].ToString();
                GetSoClass.BranchName = dr["BranchName"].ToString();
                Solist.Add(GetSoClass);
            }
            string errresponse = GetJson(Solist);
            context.Response.Write(errresponse);
        }
        catch
        {
        }
    }
    private void get_fillroute_details_despatch(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            List<SoClass> Solist = new List<SoClass>();
            string ddlSalesOffice = "";
            if (context.Session["salestype"].ToString() == "Plant")
            {
                ddlSalesOffice = context.Request["ddlSalesOffice"];
            }
            else
            {
                ddlSalesOffice = context.Session["branch"].ToString();
            }
            cmd = new MySqlCommand("SELECT dispatch.DispName, dispatch.sno FROM dispatch INNER JOIN branchdata ON dispatch.Branch_Id = branchdata.sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE (branchdata.sno = @BranchID) AND   (dispatch.flag=@flag) OR (branchdata_1.SalesOfficeID = @SOID) AND   (dispatch.flag=@flag)");
            cmd.Parameters.AddWithValue("@BranchID", ddlSalesOffice);
            cmd.Parameters.AddWithValue("@SOID", ddlSalesOffice);
            cmd.Parameters.AddWithValue("@flag", "1");
            DataTable dtRoutedata = vdbmngr.SelectQuery(cmd).Tables[0];
            foreach (DataRow dr in dtRoutedata.Rows)
            {
                SoClass GetSoClass = new SoClass();
                GetSoClass.Sno = dr["sno"].ToString();
                GetSoClass.BranchName = dr["DispName"].ToString();
                Solist.Add(GetSoClass);
            }
            string errresponse = GetJson(Solist);
            context.Response.Write(errresponse);
        }
        catch
        {
        }
    }
    public class delaveryprod
    {
        public string Variety { get; set; }
        public string Qty { get; set; }
        public string DispQty { get; set; }
        public string Returns { get; set; }
        public string Leaks { get; set; }
        public string Short { get; set; }
        public string FreeMilk { get; set; }
        public string Sales { get; set; }
        public string SalesValue { get; set; }
    }
    public class delaveryagent
    {
        public string SNo { get; set; }
        public string AgentCode { get; set; }
        public string AgentName { get; set; }
        public string Crates { get; set; }
        public string OppeningBalance { get; set; }
        public string SaleValue { get; set; }
        public string AmountToBePaid { get; set; }
        public string PaidAmount { get; set; }
        public string DueAmount { get; set; }
        public string ToDayDueAmount { get; set; }
    }
    public class delaveryinven
    {
        public string Inventory { get; set; }
        public string Opp { get; set; }
        public string Issued { get; set; }
        public string Received { get; set; }
        public string Difference { get; set; }
        public string Closing { get; set; }
    }
    public class delaverysalety
    {
        public string SalesType { get; set; }
        public string SaleValue { get; set; }
        public string PaidAmount { get; set; }
        public string DueValue { get; set; }
    }
    public class delaverysaletyamt
    {
        public string SaleType { get; set; }
        public string Amount { get; set; }
    }
    public class delaverydenomi
    {
        public string Cash { get; set; }
        public string Count { get; set; }
        public string Amount { get; set; }
        public string EmpName { get; set; }
    }
    public class delaveryalldet
    {
        public List<delaveryprod> delaveryprod { get; set; }
        public List<delaveryagent> delaveryagent { get; set; }
        public List<delaveryinven> delaveryinven { get; set; }
        public List<delaverysalety> delaverysalety { get; set; }
        public List<delaverysaletyamt> delaverysaletyamt { get; set; }
        public List<delaverydenomi> delaverydenomi { get; set; }
    }
    private void get_delavery_report_details(HttpContext context)
    {
        try
        {
            VehicleDBMgr vdm = new VehicleDBMgr();
            float denominationtotal = 0;
            string ddlSalesOffice = context.Request["ddlSalesOffice"];
            string ddlRouteName = context.Request["ddlRouteName"];
            string txtdate = context.Request["txtdate"];
            DateTime fromdate = Convert.ToDateTime(txtdate);
            Report = new DataTable();
            DateTime ServerDateCurrentdate = VehicleDBMgr.GetTime(vdm.conn);
            List<delaveryalldet> delaveryalldetlist = new List<delaveryalldet>();
            List<delaveryprod> delaveryprodlist = new List<delaveryprod>();
            List<delaveryagent> delaveryagentlist = new List<delaveryagent>();
            List<delaveryinven> delaveryinvenlist = new List<delaveryinven>();
            List<delaverysalety> delaverysaletylist = new List<delaverysalety>();
            List<delaverysaletyamt> delaverysaletyamtlist = new List<delaverysaletyamt>();
            List<delaverydenomi> delaverydenomilist = new List<delaverydenomi>();
            //lblDate.Text = fromdate.ToString("dd/MMM/yyyy");
            cmd = new MySqlCommand("SELECT dispatch.sno, dispatch.DispName, dispatch.Branch_Id, dispatch.Route_id, tripdata.SyncStatus, tripdata.Sno AS tripid, tripdata.EmpId, tripdata.AssignDate,tripdata.Status FROM dispatch INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno WHERE (dispatch.sno = @dispatchSno) AND (tripdata.I_Date BETWEEN @d1 AND @d2) AND (tripdata.SyncStatus <> '0')");
            //if (chkDispatch.Checked == true)
            //{
            //    cmd.Parameters.AddWithValue("@dispatchSno", ddlPlantDispName.SelectedValue);
            //}
            //else
            //{
            cmd.Parameters.AddWithValue("@dispatchSno", ddlRouteName);
            //}
            cmd.Parameters.AddWithValue("@d1", GetLowDate(fromdate.AddDays(-1)));
            cmd.Parameters.AddWithValue("@d2", GetHighDate(fromdate.AddDays(-1)));
            DataTable dtsyncstatus = vdm.SelectQuery(cmd).Tables[0];
            if (dtsyncstatus.Rows.Count > 0)
            {
                //btnPrint.Visible = true;

                cmd = new MySqlCommand("SELECT ROUND(SUM(indents_subtable.unitQty), 2) AS unitQty, productsdata.ProductName, ROUND(SUM(indents_subtable.DeliveryQty), 2) AS DeliveryQty,ROUND(SUM(indents_subtable.LeakQty), 2) AS LeakQty, indents_subtable.UnitCost, indent.IndentNo, indent.Branch_id,ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty), 2) AS Total, indents_subtable.Product_sno FROM dispatch INNER JOIN dispatch_sub ON dispatch.sno = dispatch_sub.dispatch_sno INNER JOIN modifiedroutes ON dispatch_sub.Route_id = modifiedroutes.Sno INNER JOIN modifiedroutesubtable ON modifiedroutes.Sno = modifiedroutesubtable.RefNo INNER JOIN (SELECT IndentNo, Branch_id, I_date, IndentType FROM indents WHERE (I_date BETWEEN @starttime AND @endtime)) indent ON modifiedroutesubtable.BranchID = indent.Branch_id AND dispatch_sub.IndentType = indent.IndentType INNER JOIN indents_subtable ON indent.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE (dispatch.sno = @dispatchSno) AND (modifiedroutesubtable.EDate IS NULL) AND (modifiedroutesubtable.CDate <= @starttime) OR (dispatch.sno = @dispatchSno) AND (modifiedroutesubtable.EDate > @starttime) AND (modifiedroutesubtable.CDate <= @starttime) GROUP BY indents_subtable.Product_sno");
                //if (chkDispatch.Checked == true)
                //{
                //    cmd.Parameters.AddWithValue("@dispatchSno", ddlPlantDispName.SelectedValue);
                //}
                //else
                //{
                cmd.Parameters.AddWithValue("@dispatchSno", ddlRouteName);
                //}
                cmd.Parameters.AddWithValue("@starttime", GetLowDate(fromdate.AddDays(-1)));
                cmd.Parameters.AddWithValue("@endtime", GetHighDate(fromdate.AddDays(-1)));
                DataTable dtble = vdm.SelectQuery(cmd).Tables[0];
                cmd = new MySqlCommand("SELECT branchdata.BranchName,branchdata.SalesType, branchaccounts.BranchId, branchaccounts.Amount FROM dispatch INNER JOIN modifiedroutes ON dispatch.Route_id = modifiedroutes.Sno INNER JOIN modifiedroutesubtable ON modifiedroutes.Sno = modifiedroutesubtable.RefNo INNER JOIN branchdata ON modifiedroutesubtable.BranchID = branchdata.sno INNER JOIN branchaccounts ON branchdata.sno = branchaccounts.BranchId WHERE (dispatch.sno = @dispsno) AND (modifiedroutesubtable.EDate IS NULL) AND (modifiedroutesubtable.CDate <= @dt) AND (branchdata.flag=1) OR (dispatch.sno = @dispsno) AND (modifiedroutesubtable.EDate > @dt) AND (modifiedroutesubtable.CDate <= @dt) and (branchdata.flag=1) AND (branchaccounts.Amount > 0 OR branchaccounts.Amount < 0 ) order by branchdata.BranchName");
                //if (chkDispatch.Checked == true)
                //{
                //    cmd.Parameters.AddWithValue("@dispsno", ddlPlantDispName.SelectedValue);
                //}
                //else
                //{
                cmd.Parameters.AddWithValue("@dispsno", ddlRouteName);
                //}
                cmd.Parameters.AddWithValue("@dt", GetLowDate(fromdate.AddDays(-1)));

                DataTable dtbranchammount = vdm.SelectQuery(cmd).Tables[0];

                cmd = new MySqlCommand("SELECT * FROM agent_bal_trans WHERE inddate between @d1 and @d2");
                cmd.Parameters.AddWithValue("@d1", GetLowDate(fromdate.AddDays(-1)));
                cmd.Parameters.AddWithValue("@d2", GetHighDate(fromdate.AddDays(-1)));
                DataTable dtagenttrans = vdm.SelectQuery(cmd).Tables[0];

                cmd = new MySqlCommand("SELECT  inventory_monitor.Inv_Sno, inventory_monitor.Qty,modifiedroutesubtable.BranchID FROM dispatch INNER JOIN modifiedroutes ON dispatch.Route_id = modifiedroutes.Sno INNER JOIN modifiedroutesubtable ON modifiedroutes.Sno = modifiedroutesubtable.RefNo INNER JOIN inventory_monitor ON modifiedroutesubtable.BranchID = inventory_monitor.BranchId WHERE (dispatch.sno = @dispsno) AND (modifiedroutesubtable.EDate IS NULL) AND (modifiedroutesubtable.CDate <= @dt) OR (dispatch.sno = @dispsno) AND (modifiedroutesubtable.EDate > @dt) AND (modifiedroutesubtable.CDate <= @dt) ");
                //if (chkDispatch.Checked == true)
                //{
                //    cmd.Parameters.AddWithValue("@dispsno", ddlPlantDispName.SelectedValue);
                //}
                //else
                //{
                cmd.Parameters.AddWithValue("@dispsno", ddlRouteName);
                //}
                cmd.Parameters.AddWithValue("@dt", GetLowDate(fromdate.AddDays(-1)));

                DataTable dtAgentInventory = vdm.SelectQuery(cmd).Tables[0];
                cmd = new MySqlCommand("SELECT MIN(Ind.D_date) AS midate, MAX(collect.PaidDate) AS madate FROM dispatch INNER JOIN modifiedroutesubtable ON dispatch.Route_id = modifiedroutesubtable.RefNo INNER JOIN (SELECT indents.Branch_id, MIN(indents_subtable.D_date) AS D_date, MAX(indents_subtable.DTripId) AS DTripId FROM indents INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo WHERE (indents.I_date BETWEEN @starttime AND @endtime) AND (indents_subtable.D_date IS NOT NULL) GROUP BY indents.Branch_id) Ind ON modifiedroutesubtable.BranchID = Ind.Branch_id INNER JOIN (SELECT PaidDate, tripId FROM collections) collect ON Ind.DTripId = collect.tripId WHERE (dispatch.sno = @dispatchSno) AND (modifiedroutesubtable.EDate IS NULL) AND (modifiedroutesubtable.CDate <= @starttime) OR (dispatch.sno = @dispatchSno) AND (modifiedroutesubtable.EDate > @starttime) AND (modifiedroutesubtable.CDate <= @starttime)");
                //if (chkDispatch.Checked == true)
                //{
                //    cmd.Parameters.AddWithValue("@dispatchSno", ddlPlantDispName.SelectedValue);
                //}
                //else
                //{
                cmd.Parameters.AddWithValue("@dispatchSno", ddlRouteName);
                //}
                cmd.Parameters.AddWithValue("@starttime", GetLowDate(fromdate.AddDays(-1)));
                cmd.Parameters.AddWithValue("@endtime", GetHighDate(ServerDateCurrentdate));
                DataTable dtminmax = vdm.SelectQuery(cmd).Tables[0];
                string mindate = dtminmax.Rows[0]["midate"].ToString();
                string maxdate = dtminmax.Rows[0]["madate"].ToString();
                DateTime midate = DateTime.Parse(mindate);
                DateTime madate = DateTime.Parse(maxdate);
                cmd = new MySqlCommand("SELECT branchdata.BranchName, indents_subtable.DTripId, SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost) AS totalamount, indents_subtable.D_date, indent.Branch_id, modifiedroutes.Sno FROM dispatch INNER JOIN modifiedroutes ON dispatch.Route_id = modifiedroutes.Sno INNER JOIN modifiedroutesubtable ON modifiedroutesubtable.RefNo = modifiedroutes.Sno INNER JOIN branchdata ON modifiedroutesubtable.BranchID = branchdata.sno INNER JOIN (SELECT IndentNo, I_date, Branch_id FROM indents WHERE (I_date BETWEEN @starttime AND @endtime)) indent ON branchdata.sno = indent.Branch_id INNER JOIN indents_subtable ON indent.IndentNo = indents_subtable.IndentNo WHERE (modifiedroutesubtable.EDate IS NULL) AND (modifiedroutesubtable.CDate <= @starttime) AND (dispatch.sno = @dispatchSno) AND (indents_subtable.DeliveryQty >  0) OR (modifiedroutesubtable.EDate > @starttime) AND (modifiedroutesubtable.CDate <= @starttime) AND (dispatch.sno = @dispatchSno) AND (indents_subtable.DeliveryQty > 0) GROUP BY branchdata.BranchName, modifiedroutes.Sno");
                //if (chkDispatch.Checked == true)
                //{
                //    cmd.Parameters.AddWithValue("@dispatchSno", ddlPlantDispName.SelectedValue);
                //}
                //else
                //{
                cmd.Parameters.AddWithValue("@dispatchSno", ddlRouteName);
                //}
                cmd.Parameters.AddWithValue("@starttime", GetLowDate(fromdate).AddDays(-1));
                cmd.Parameters.AddWithValue("@endtime", GetHighDate(fromdate).AddDays(-1));
                cmd.Parameters.AddWithValue("@Paidstime", GetLowDate(fromdate));
                cmd.Parameters.AddWithValue("@Paidetime", GetHighDate(fromdate));
                DataTable dttodaycollection = vdm.SelectQuery(cmd).Tables[0];// Today SaleValue
                if (dttodaycollection.Rows.Count > 0)
                {
                    cmd = new MySqlCommand("SELECT branchdata.BranchName, collections.Branchid, branchdata.sno, collections.AmountPaid, collections.PaidDate, collections.PaymentType, collections.CheckStatus, collections.PayTime, collections.ChequeNo, collections.tripId, collections.ReceiptNo FROM dispatch INNER JOIN branchroutes ON dispatch.Route_id = branchroutes.Sno INNER JOIN branchroutesubtable ON branchroutes.Sno = branchroutesubtable.RefNo INNER JOIN  branchdata ON branchroutesubtable.BranchID = branchdata.sno INNER JOIN collections ON branchdata.sno = collections.Branchid WHERE (dispatch.sno = @dispatchsno) AND (collections.AmountPaid > 0) AND (collections.tripId = @TripID)");
                    //if (chkDispatch.Checked == true)
                    //{
                    //    cmd.Parameters.AddWithValue("@dispatchSno", ddlPlantDispName.SelectedValue);
                    //}
                    //else
                    //{
                    cmd.Parameters.AddWithValue("@dispatchSno", ddlRouteName);
                    //}
                    if (dttodaycollection.Rows[0]["DTripId"].ToString() == "")
                    {
                        cmd.Parameters.AddWithValue("@TripID", dttodaycollection.Rows[1]["DTripId"].ToString());
                    }
                    else
                    {
                        if (dttodaycollection.Rows[0]["D_date"].ToString() == "")
                        {
                            cmd.Parameters.AddWithValue("@TripID", dttodaycollection.Rows[1]["DTripId"].ToString());
                        }
                        else
                        {
                            cmd.Parameters.AddWithValue("@TripID", dttodaycollection.Rows[0]["DTripId"].ToString());
                        }
                    }
                }
                DataTable dtroutecollection = vdm.SelectQuery(cmd).Tables[0];//
                cmd = new MySqlCommand("SELECT  result.Branch_id, result.BranchName, result.totalamount, result.D_date, result.DTripId, result.DelTime, SUM(collections.AmountPaid) AS AmountPaid,collections.PayTime FROM (SELECT branchdata.sno AS Branch_id, branchdata.BranchName, SUM(indentssub.DeliveryQty * indentssub.UnitCost) AS totalamount, indentssub.D_date,indentssub.DTripId, indentssub.DelTime FROM (SELECT IndentNo, Product_sno, DeliveryQty, D_date, UnitCost, DTripId, DelTime FROM indents_subtable WHERE (D_date BETWEEN @starttime AND @endtime)) indentssub INNER JOIN (SELECT IndentNo, Branch_id, TotalQty, TotalPrice, I_date, D_date, Status, UserData_sno, PaymentStatus, I_createdby, I_modifiedby,IndentType FROM indents WHERE (I_date BETWEEN @Indd1 AND @indd2)) ind ON indentssub.IndentNo = ind.IndentNo RIGHT OUTER JOIN dispatch INNER JOIN modifiedroutes ON dispatch.Route_id = modifiedroutes.Sno INNER JOIN (SELECT RefNo, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifroutessub ON modifiedroutes.Sno = modifroutessub.RefNo INNER JOIN branchdata ON modifroutessub.BranchID = branchdata.sno ON ind.Branch_id = branchdata.sno WHERE (dispatch.sno = @dispatchSno) GROUP BY branchdata.sno) result INNER JOIN collections ON result.Branch_id = collections.Branchid WHERE (collections.PaidDate BETWEEN @starttime AND @endtime) AND (collections.tripId <> 'NULL')  GROUP BY result.Branch_id");
                //if (chkDispatch.Checked == true)
                //{
                //    cmd.Parameters.AddWithValue("@dispatchSno", ddlPlantDispName.SelectedValue);
                //}
                //else
                //{
                cmd.Parameters.AddWithValue("@dispatchSno", ddlRouteName);
                //}
                cmd.Parameters.AddWithValue("@starttime", midate);
                cmd.Parameters.AddWithValue("@endtime", madate);
                cmd.Parameters.AddWithValue("@Paidstime", midate);
                cmd.Parameters.AddWithValue("@Paidetime", GetHighDate(fromdate));
                cmd.Parameters.AddWithValue("@Indd1", GetLowDate(fromdate).AddDays(-1));
                cmd.Parameters.AddWithValue("@Indd2", GetHighDate(madate));
                DataTable dtBranchcollection = vdm.SelectQuery(cmd).Tables[0];

                cmd = new MySqlCommand("SELECT  result.Branch_id, result.BranchName, result.totalamount, result.D_date, result.DTripId, result.DelTime, SUM(collections.AmountPaid) AS AmountPaid,collections.PayTime, collections.PaymentType, collections.CheckStatus, collections.VarifyDate FROM (SELECT branchdata.sno AS Branch_id, branchdata.BranchName, SUM(indentssub.DeliveryQty * indentssub.UnitCost) AS totalamount, indentssub.D_date,indentssub.DTripId, indentssub.DelTime FROM (SELECT IndentNo, Product_sno, DeliveryQty, D_date, UnitCost, DTripId, DelTime FROM indents_subtable WHERE (D_date BETWEEN @starttime AND @endtime)) indentssub INNER JOIN (SELECT IndentNo, Branch_id, TotalQty, TotalPrice, I_date, D_date, Status, UserData_sno, PaymentStatus, I_createdby, I_modifiedby,IndentType FROM indents WHERE (I_date BETWEEN @Indd1 AND @indd2)) ind ON indentssub.IndentNo = ind.IndentNo RIGHT OUTER JOIN dispatch INNER JOIN modifiedroutes ON dispatch.Route_id = modifiedroutes.Sno INNER JOIN (SELECT RefNo, BranchID, CDate, EDate FROM  modifiedroutesubtable WHERE (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifroutessub ON modifiedroutes.Sno = modifroutessub.RefNo INNER JOIN branchdata ON modifroutessub.BranchID = branchdata.sno ON ind.Branch_id = branchdata.sno WHERE (dispatch.sno = @dispatchSno) GROUP BY branchdata.sno) result INNER JOIN collections ON result.Branch_id = collections.Branchid WHERE (collections.PaidDate BETWEEN @starttime AND @endtime) AND (collections.tripId IS NULL) AND (collections.AmountPaid > 0) GROUP BY result.Branch_id");
                cmd.Parameters.AddWithValue("@dispatchSno", ddlRouteName);
                cmd.Parameters.AddWithValue("@starttime", midate);
                cmd.Parameters.AddWithValue("@endtime", madate);
                cmd.Parameters.AddWithValue("@Paidstime", GetLowDate(fromdate));
                cmd.Parameters.AddWithValue("@Paidetime", GetHighDate(fromdate));
                cmd.Parameters.AddWithValue("@Indd1", GetLowDate(fromdate).AddDays(-1));
                cmd.Parameters.AddWithValue("@Indd2", GetHighDate(madate));
                DataTable dtsalesofficecollection = vdm.SelectQuery(cmd).Tables[0];
                cmd = new MySqlCommand("SELECT products_category.Categoryname,productsdata.Sno, productsdata.ProductName, products_subcategory.SubCatName  FROM branchproducts INNER JOIN productsdata ON branchproducts.product_sno = productsdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno WHERE (branchproducts.branch_sno = @BranchID) Group by productsdata.ProductName ORDER BY productsdata.Rank");
                if (context.Session["salestype"].ToString() == "Plant")
                {
                    cmd.Parameters.AddWithValue("@BranchID", ddlSalesOffice);
                }
                else
                {
                    cmd.Parameters.AddWithValue("@BranchID", context.Session["branch"].ToString());
                }
                DataTable produtstbl = vdm.SelectQuery(cmd).Tables[0];
                cmd = new MySqlCommand("SELECT tripdata.Sno, tripdata.Denominations, tripdata.Remarks, tripdata.CollectedAmount, tripdata.SubmittedAmount, tripdata.Cdate, empmanage.EmpName FROM tripdata INNER JOIN triproutes ON tripdata.Sno = triproutes.Tripdata_sno INNER JOIN dispatch ON triproutes.RouteID = dispatch.sno INNER JOIN empmanage ON tripdata.EmpId = empmanage.Sno WHERE (tripdata.I_Date BETWEEN @starttime AND @endtime) AND (dispatch.sno = @dispatchSno) AND (tripdata.Status <> 'C')");
                cmd.Parameters.AddWithValue("@starttime", GetLowDate(fromdate.AddDays(-1)));
                cmd.Parameters.AddWithValue("@endtime", GetHighDate(fromdate.AddDays(-1)));
                //if (chkDispatch.Checked == true)
                //{
                //    cmd.Parameters.AddWithValue("@dispatchSno", ddlPlantDispName.SelectedValue);
                //}
                //else
                //{
                cmd.Parameters.AddWithValue("@dispatchSno", ddlRouteName);
                //}
                DataTable dtDenomin = vdm.SelectQuery(cmd).Tables[0];
                ///09/01/2016  Ravi
                cmd = new MySqlCommand("SELECT  ff.TripID, Triproutes.RouteID, ff.DispQty, ff.sno FROM (SELECT Tripdata_sno, RouteID, Sno FROM triproutes triproutes_1 WHERE (RouteID = @dispatchSno)) Triproutes INNER JOIN (SELECT TripID, DispQty, sno FROM  (SELECT tripdata.Sno AS TripID, tripsubdata.Qty AS DispQty, tripsubdata.ProductId AS sno FROM  tripdata INNER JOIN tripsubdata ON tripdata.Sno = tripsubdata.Tripdata_sno WHERE (tripdata.I_Date BETWEEN @starttime AND @endtime)) tripinfo) ff ON ff.TripID = Triproutes.Tripdata_sno");
                cmd.Parameters.AddWithValue("@starttime", GetLowDate(fromdate.AddDays(-1)));
                cmd.Parameters.AddWithValue("@endtime", GetHighDate(fromdate.AddDays(-1)));
                //if (chkDispatch.Checked == true)
                //{
                //    cmd.Parameters.AddWithValue("@dispatchSno", ddlPlantDispName.SelectedValue);
                //}
                //else
                //{
                cmd.Parameters.AddWithValue("@dispatchSno", ddlRouteName);
                //}
                DataTable dtSubData = vdm.SelectQuery(cmd).Tables[0];

                cmd = new MySqlCommand("SELECT dispatch.sno, dispatch.DispName, ROUND(SUM(offer_indents_sub.offer_indent_qty), 2) AS unitQty, productsdata.ProductName, productsdata.Units, productsdata.sno AS productid, ROUND(SUM(offer_indents_sub.offer_delivered_qty), 2) AS Delqty, products_category.Categoryname FROM dispatch INNER JOIN dispatch_sub ON dispatch.sno = dispatch_sub.dispatch_sno INNER JOIN modifiedroutes ON dispatch_sub.Route_id = modifiedroutes.Sno INNER JOIN modifiedroutesubtable ON modifiedroutes.Sno = modifiedroutesubtable.RefNo INNER JOIN (SELECT idoffer_indents, idoffers_assignment, salesoffice_id, route_id, agent_id, indent_date, indents_id, IndentType, I_modified_by FROM offer_indents WHERE (indent_date BETWEEN @starttime AND @endtime) ) offerindents ON modifiedroutesubtable.BranchID = offerindents.agent_id INNER JOIN offer_indents_sub ON offerindents.idoffer_indents = offer_indents_sub.idoffer_indents INNER JOIN productsdata ON offer_indents_sub.product_id = productsdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno WHERE (modifiedroutesubtable.EDate IS NULL) AND (modifiedroutesubtable.CDate <= @starttime) AND (dispatch.sno = @dispatchSno) OR (modifiedroutesubtable.EDate > @starttime) AND (modifiedroutesubtable.CDate <= @starttime) AND (dispatch.sno = @dispatchSno) GROUP BY productsdata.sno");
                //if (chkDispatch.Checked == true)
                //{
                //    cmd.Parameters.AddWithValue("@dispatchSno", ddlPlantDispName.SelectedValue);
                //}
                //else
                //{
                cmd.Parameters.AddWithValue("@dispatchSno", ddlRouteName);
                //}
                cmd.Parameters.AddWithValue("@starttime", GetLowDate(fromdate.AddDays(-1)));
                cmd.Parameters.AddWithValue("@endtime", GetHighDate(fromdate.AddDays(-1)));
                DataTable dt_offertble = vdm.SelectQuery(cmd).Tables[0];

                DataTable dtLeakages = new DataTable();
                DataTable dtallprdts = new DataTable();
                dtallprdts.Columns.Add("Product_sno");
                dtallprdts.Columns.Add("ProductName");
                dtallprdts.Columns.Add("unitQty");
                dtallprdts.Columns.Add("DeliveryQty");
                dtallprdts.Columns.Add("LeakQty");
                dtallprdts.Columns.Add("Total");
                foreach (DataRow dr in produtstbl.Rows)
                {
                    float unitqty = 0;
                    float deliveryqty = 0;
                    float leakqty = 0;
                    float Total = 0;
                    DataRow newRow = dtallprdts.NewRow();
                    newRow["Product_sno"] = dr["Sno"].ToString();
                    newRow["ProductName"] = dr["ProductName"].ToString();
                    newRow["unitQty"] = unitqty;
                    newRow["DeliveryQty"] = deliveryqty;
                    newRow["LeakQty"] = leakqty;
                    newRow["Total"] = Total;
                    dtallprdts.Rows.Add(newRow);
                }
                foreach (DataRow drprdt in dtallprdts.Rows)
                {
                    foreach (DataRow drindent in dtble.Rows)
                    {
                        if (drprdt["Product_sno"].ToString() == drindent["Product_sno"].ToString())
                        {
                            float qty = 0;
                            float unitqty = 0;
                            float leakqty = 0;
                            float total = 0;
                            float.TryParse(drindent["DeliveryQty"].ToString(), out qty);
                            float.TryParse(drindent["unitQty"].ToString(), out unitqty);
                            float.TryParse(drindent["LeakQty"].ToString(), out leakqty);
                            float.TryParse(drindent["Total"].ToString(), out total);
                            float qtycpy = 0;
                            float unitqtycpy = 0;
                            float leakqtycpy = 0;
                            float totalcpy = 0;
                            float.TryParse(drprdt["DeliveryQty"].ToString(), out qtycpy);
                            float.TryParse(drprdt["unitQty"].ToString(), out unitqtycpy);
                            float.TryParse(drprdt["LeakQty"].ToString(), out leakqtycpy);
                            float.TryParse(drprdt["Total"].ToString(), out totalcpy);
                            float totalqty = qty + qtycpy;
                            float totalunitqty = unitqty + unitqtycpy;
                            float totalleakqty = leakqty + leakqtycpy;
                            float totalsaleqty = total + totalcpy;
                            drprdt["DeliveryQty"] = totalqty;
                            drprdt["unitQty"] = totalunitqty;
                            drprdt["LeakQty"] = totalleakqty;
                            drprdt["Total"] = totalsaleqty;
                        }
                    }
                }
                DataTable dtInventory = new DataTable();
                if (dtSubData.Rows.Count > 0)
                {
                    string Sno = dtSubData.Rows[0]["TripID"].ToString();
                    cmd = new MySqlCommand("select LeakQty,ShortQty,FreeMilk,ProductID from Leakages where TripId=@TripId and VarifyStatus IS NULL Group by ProductID order by ProductID ");
                    cmd.Parameters.AddWithValue("@TripId", Sno);
                    dtLeakages = vdm.SelectQuery(cmd).Tables[0];
                    cmd = new MySqlCommand("SELECT tripinvdata.Qty, tripinvdata.Remaining,invmaster.sno, invmaster.InvName FROM tripinvdata INNER JOIN invmaster ON tripinvdata.invid = invmaster.sno WHERE (tripinvdata.Tripdata_sno = @Tripdata_sno) GROUP BY invmaster.InvName ORDER BY invmaster.sno");
                    cmd.Parameters.AddWithValue("@Tripdata_sno", Sno);
                    dtInventory = vdm.SelectQuery(cmd).Tables[0];
                }
                dtble.DefaultView.Sort = "Product_sno ASC";
                dtble = dtble.DefaultView.ToTable(true);
                if (dtble.Rows.Count > 0)
                {
                    Report = new DataTable();
                    Report.Columns.Add("Variety");
                    Report.Columns.Add("Qty");
                    Report.Columns.Add("DispQty");
                    Report.Columns.Add("Returns");
                    Report.Columns.Add("Leaks");
                    Report.Columns.Add("Short");
                    Report.Columns.Add("FreeMilk");
                    Report.Columns.Add("Sales");
                    Report.Columns.Add("Sales Value");
                    double totalqty = 0;
                    double Leakqty = 0;
                    double tDispqty = 0;
                    double tReturnqty = 0;
                    double delqty = 0;
                    double TotAmount = 0;

                    double Totcashamount = 0; ;
                    double Totdueamount = 0;
                    double Totcompassamount = 0;
                    double Totfhamount = 0;
                    double Totcateringamount = 0;
                    double Totinstituteamount = 0;
                    double Totdueagentamount = 0;
                    double TotCRagentamount = 0;
                    double TotGauravagentamount = 0;

                    double Totcashpaidamount = 0; ;
                    double Totcompasspaidamount = 0;
                    double Totfhpaidamount = 0;
                    double Totcateringpaidamount = 0;
                    double Totinstitutepaidamount = 0;
                    double Totdueagentpaidamount = 0;
                    double TotCRagentpaidamount = 0;
                    double TotGauravagentPaidamount = 0;

                    int count = 0;
                    if (dtDenomin.Rows.Count > 0)
                    {
                        //lblEmpName.Text = dtDenomin.Rows[0]["EmpName"].ToString();
                        string stramount = dtDenomin.Rows[0]["Denominations"].ToString();
                        stramount = stramount.Replace("+", " ");
                        foreach (string str in stramount.Split(' '))
                        {
                            if (str == "")
                            {
                            }
                            else
                            {
                                count++;
                            }
                        }
                    }
                    float totdispqty = 0;
                    count = count + 1;
                    if (dtble.Rows.Count > count)
                    {
                        foreach (DataRow branch in dtallprdts.Rows)
                        {
                            DataRow newrow = Report.NewRow();
                            newrow["Variety"] = branch["ProductName"].ToString();
                            newrow["Qty"] = branch["unitQty"].ToString();
                            float DispQty = 0;
                            float ReturnQty = 0;
                            foreach (DataRow drSubData in dtSubData.Rows)
                            {
                                if (branch["Product_sno"].ToString() == drSubData["sno"].ToString())
                                {
                                    float.TryParse(drSubData["DispQty"].ToString(), out DispQty);
                                    if (DispQty > 0)
                                    {
                                        newrow["DispQty"] = drSubData["DispQty"].ToString();
                                        totdispqty += DispQty;
                                    }
                                }
                            }
                            float Leaks = 0;
                            float Totqty = 0;
                            float ShortQty = 0;
                            float FreeMilk = 0;
                            float DeliveryQty = 0;
                            if (dtLeakages.Rows.Count > 0)
                            {
                                string ProductID = branch["Product_sno"].ToString();
                                DataRow[] drleak = dtLeakages.Select("ProductID = '" + ProductID + "'");
                                if (drleak.Length != 0)
                                {
                                    for (int i = 0; i < drleak.Length; i++)
                                    {
                                        if (branch["Product_sno"].ToString() == drleak[i][3].ToString())
                                        {
                                            string str = drleak[i][0].ToString();
                                            float Ileak = 0;
                                            float.TryParse(branch["LeakQty"].ToString(), out Ileak);
                                            float Rleak = 0;
                                            float.TryParse(str, out Rleak);
                                            Leaks = Ileak + Rleak;
                                            newrow["Leaks"] = Leaks;
                                            float.TryParse(drleak[i][1].ToString(), out ShortQty);
                                            newrow["Short"] = ShortQty;
                                            float.TryParse(drleak[i][2].ToString(), out FreeMilk);
                                            float schemeqty = 0;
                                            foreach (DataRow drscheme in dt_offertble.Select("productid='" + branch["Product_sno"].ToString() + "'"))
                                            {
                                                float.TryParse(drscheme["Delqty"].ToString(), out schemeqty);
                                            }
                                            newrow["FreeMilk"] = FreeMilk + schemeqty;
                                            float.TryParse(branch["DeliveryQty"].ToString(), out DeliveryQty);
                                            Totqty = Leaks + DeliveryQty + FreeMilk + ShortQty + schemeqty;
                                            ReturnQty = DispQty - Totqty;
                                            newrow["Returns"] = Math.Round(ReturnQty, 2);
                                        }
                                        else
                                        {
                                            newrow["Leaks"] = branch["LeakQty"].ToString();
                                            float.TryParse(branch["LeakQty"].ToString(), out Leaks);
                                            float schemeqty = 0;
                                            foreach (DataRow drscheme in dt_offertble.Select("productid='" + branch["Product_sno"].ToString() + "'"))
                                            {
                                                float.TryParse(drscheme["Delqty"].ToString(), out schemeqty);
                                            }
                                            float.TryParse(branch["DeliveryQty"].ToString(), out DeliveryQty);
                                            newrow["Short"] = ShortQty;
                                            newrow["FreeMilk"] = FreeMilk + schemeqty;
                                            Totqty = Leaks + DeliveryQty + FreeMilk + ShortQty + schemeqty;
                                            ReturnQty = DispQty - Totqty;
                                            newrow["Returns"] = Math.Round(ReturnQty, 2);
                                        }
                                        tReturnqty += Math.Round(ReturnQty, 2);
                                        tDispqty += DispQty;
                                        Leakqty += Leaks;
                                    }
                                }
                                else
                                {
                                    newrow["Leaks"] = branch["LeakQty"].ToString();
                                    float.TryParse(branch["LeakQty"].ToString(), out Leaks);
                                    float schemeqty = 0;
                                    foreach (DataRow drscheme in dt_offertble.Select("productid='" + branch["Product_sno"].ToString() + "'"))
                                    {
                                        float.TryParse(drscheme["Delqty"].ToString(), out schemeqty);
                                    }
                                    float.TryParse(branch["DeliveryQty"].ToString(), out DeliveryQty);
                                    newrow["Short"] = ShortQty;
                                    newrow["FreeMilk"] = FreeMilk + schemeqty;
                                    Totqty = Leaks + DeliveryQty + FreeMilk + ShortQty + schemeqty;
                                    ReturnQty = DispQty - Totqty;
                                    newrow["Returns"] = Math.Round(ReturnQty, 2);
                                    tReturnqty += Math.Round(ReturnQty, 2); ;
                                    tDispqty += DispQty;
                                    Leakqty += Leaks;
                                }
                            }
                            else
                            {
                                newrow["Leaks"] = branch["LeakQty"].ToString();
                                float.TryParse(branch["LeakQty"].ToString(), out Leaks);
                                float schemeqty = 0;
                                foreach (DataRow drscheme in dt_offertble.Select("productid='" + branch["Product_sno"].ToString() + "'"))
                                {
                                    float.TryParse(drscheme["Delqty"].ToString(), out schemeqty);
                                }
                                float.TryParse(branch["DeliveryQty"].ToString(), out DeliveryQty);
                                newrow["Short"] = ShortQty;
                                newrow["FreeMilk"] = FreeMilk + schemeqty;
                                Totqty = Leaks + DeliveryQty + FreeMilk + ShortQty + schemeqty;
                                ReturnQty = DispQty - Totqty;
                                newrow["Returns"] = Math.Round(ReturnQty, 2);
                                tReturnqty += Math.Round(ReturnQty, 2); ;
                                tDispqty += DispQty;
                                Leakqty += Leaks;
                            }
                            newrow["Sales"] = branch["DeliveryQty"].ToString();
                            newrow["Sales Value"] = branch["Total"].ToString();
                            double qtyvalue = 0;
                            float delqtyvalue = 0;
                            double TotAmountvalue = 0;
                            double.TryParse(branch["unitQty"].ToString(), out qtyvalue);
                            totalqty += Math.Round(qtyvalue, 2);
                            float.TryParse(branch["DeliveryQty"].ToString(), out delqtyvalue);
                            delqty += Math.Round(delqtyvalue, 2);
                            float Prdtschemeqty1 = 0;
                            foreach (DataRow drscheme in dt_offertble.Select("productid='" + branch["Product_sno"].ToString() + "'"))
                            {
                                float.TryParse(drscheme["Delqty"].ToString(), out Prdtschemeqty1);
                            }
                            Totqty = Leaks + delqtyvalue + FreeMilk + ShortQty + Prdtschemeqty1;
                            ReturnQty = DispQty - Totqty;
                            newrow["Returns"] = Math.Round(ReturnQty, 2);
                            double.TryParse(branch["Total"].ToString(), out TotAmountvalue);
                            TotAmount += Math.Round(TotAmountvalue, 2);
                            if (DispQty > 0)
                            {
                                Report.Rows.Add(newrow);
                            }
                        }
                    }
                    else
                    {
                        foreach (DataRow branch in dtallprdts.Rows)
                        {
                            DataRow newrow = Report.NewRow();
                            newrow["Variety"] = branch["ProductName"].ToString();
                            newrow["Qty"] = branch["unitQty"].ToString();
                            float DispQty = 0;
                            float ReturnQty = 0;
                            foreach (DataRow drSubData in dtSubData.Rows)
                            {
                                if (branch["Product_sno"].ToString() == drSubData["sno"].ToString())
                                {
                                    float.TryParse(drSubData["DispQty"].ToString(), out DispQty);
                                    if (DispQty > 0)
                                    {
                                        newrow["DispQty"] = drSubData["DispQty"].ToString();
                                        totdispqty += DispQty;
                                    }
                                }
                            }
                            float Leaks = 0;
                            float Totqty = 0;
                            float ShortQty = 0;
                            float FreeMilk = 0;
                            float DeliveryQty = 0;

                            if (dtLeakages.Rows.Count > 0)
                            {
                                string ProductID = branch["Product_sno"].ToString();
                                DataRow[] drleak = dtLeakages.Select("ProductID = '" + ProductID + "'");
                                for (int i = 0; i < drleak.Length; i++)
                                {
                                    if (branch["Product_sno"].ToString() == drleak[i][3].ToString())
                                    {
                                        float Ileak = 0;
                                        float.TryParse(branch["LeakQty"].ToString(), out Ileak);
                                        float Rleak = 0;
                                        float.TryParse(drleak[i][0].ToString(), out Rleak);
                                        Leaks = Ileak + Rleak;
                                        newrow["Leaks"] = Leaks;
                                        float.TryParse(drleak[i][1].ToString(), out ShortQty);
                                        newrow["Short"] = ShortQty;
                                        float.TryParse(drleak[i][2].ToString(), out FreeMilk);
                                        float schemeqty = 0;
                                        foreach (DataRow drscheme in dt_offertble.Select("productid='" + branch["Product_sno"].ToString() + "'"))
                                        {
                                            float.TryParse(drscheme["Delqty"].ToString(), out schemeqty);
                                        }
                                        newrow["FreeMilk"] = FreeMilk + schemeqty;

                                        float.TryParse(branch["DeliveryQty"].ToString(), out DeliveryQty);
                                        Totqty = Leaks + DeliveryQty + FreeMilk + ShortQty + schemeqty;
                                        ReturnQty = DispQty - Totqty;
                                        newrow["Returns"] = Math.Round(ReturnQty, 2);
                                    }
                                    else
                                    {
                                        newrow["Leaks"] = branch["LeakQty"].ToString();
                                        float.TryParse(branch["LeakQty"].ToString(), out Leaks);
                                        float.TryParse(branch["DeliveryQty"].ToString(), out DeliveryQty);
                                        newrow["Short"] = ShortQty;
                                        float schemeqty = 0;
                                        foreach (DataRow drscheme in dt_offertble.Select("productid='" + branch["Product_sno"].ToString() + "'"))
                                        {
                                            float.TryParse(drscheme["Delqty"].ToString(), out schemeqty);
                                        }
                                        newrow["FreeMilk"] = FreeMilk + schemeqty;

                                        Totqty = Leaks + DeliveryQty + FreeMilk + ShortQty + schemeqty;
                                        ReturnQty = DispQty - Totqty;
                                        newrow["Returns"] = Math.Round(ReturnQty, 2);
                                    }
                                    tReturnqty += Math.Round(ReturnQty, 2);
                                    tDispqty += DispQty;
                                    Leakqty += Leaks;
                                }
                            }
                            else
                            {
                                newrow["Leaks"] = branch["LeakQty"].ToString();
                                float.TryParse(branch["LeakQty"].ToString(), out Leaks);
                                float.TryParse(branch["DeliveryQty"].ToString(), out DeliveryQty);
                                newrow["Short"] = ShortQty;
                                float schemeqty = 0;
                                foreach (DataRow drscheme in dt_offertble.Select("productid='" + branch["Product_sno"].ToString() + "'"))
                                {
                                    float.TryParse(drscheme["Delqty"].ToString(), out schemeqty);
                                }
                                newrow["FreeMilk"] = FreeMilk + schemeqty;

                                Totqty = Leaks + DeliveryQty + FreeMilk + ShortQty + schemeqty;
                                ReturnQty = DispQty - Totqty;
                                newrow["Returns"] = Math.Round(ReturnQty, 2);
                                tReturnqty += Math.Round(ReturnQty, 2); ;
                                tDispqty += DispQty;
                                Leakqty += Leaks;
                            }
                            newrow["Sales"] = branch["DeliveryQty"].ToString();
                            newrow["Sales Value"] = branch["Total"].ToString();
                            double qtyvalue = 0;
                            float delqtyvalue = 0;
                            double TotAmountvalue = 0;
                            double.TryParse(branch["unitQty"].ToString(), out qtyvalue);
                            totalqty += Math.Round(qtyvalue, 2);
                            float.TryParse(branch["DeliveryQty"].ToString(), out delqtyvalue);
                            delqty += Math.Round(delqtyvalue, 2);
                            float Prdtschemeqty = 0;
                            foreach (DataRow drscheme in dt_offertble.Select("productid='" + branch["Product_sno"].ToString() + "'"))
                            {
                                float.TryParse(drscheme["Delqty"].ToString(), out Prdtschemeqty);
                            }
                            newrow["FreeMilk"] = FreeMilk + Prdtschemeqty;
                            Totqty = Leaks + delqtyvalue + FreeMilk + ShortQty + Prdtschemeqty;
                            ReturnQty = DispQty - Totqty;
                            newrow["Returns"] = Math.Round(ReturnQty, 2);
                            double.TryParse(branch["Total"].ToString(), out TotAmountvalue);
                            TotAmount += Math.Round(TotAmountvalue, 2);
                            if (DispQty > 0)
                            {
                                Report.Rows.Add(newrow);
                            }
                        }
                    }
                    DataRow newvartical = Report.NewRow();
                    newvartical["Variety"] = "Total";
                    newvartical["Qty"] = Math.Round(totalqty, 2);
                    newvartical["DispQty"] = Math.Round(totdispqty, 2);
                    newvartical["Returns"] = Math.Round(tReturnqty, 2);
                    newvartical["Leaks"] = Math.Round(Leakqty, 2);
                    newvartical["Sales"] = Math.Round(delqty, 2);
                    newvartical["Sales Value"] = TotAmount;
                    double diffvalu = TotAmount - Math.Round(Totdueamount, 2);
                    Report.Rows.Add(newvartical);
                    foreach (DataRow drp in Report.Rows)
                    {
                        delaveryprod obj = new delaveryprod();
                        obj.Variety = drp["Variety"].ToString();
                        obj.Qty = drp["Qty"].ToString();
                        obj.DispQty = drp["DispQty"].ToString();
                        obj.Returns = drp["Returns"].ToString();
                        obj.Leaks = drp["Leaks"].ToString();
                        obj.Short = drp["Short"].ToString();
                        obj.FreeMilk = drp["FreeMilk"].ToString();
                        obj.Sales = drp["Sales"].ToString();
                        obj.SalesValue = drp["Sales Value"].ToString();
                        delaveryprodlist.Add(obj);
                    }
                    //grdReports.DataSource = Report;
                    //grdReports.DataBind();
                    // One Grid Completed
                    DataTable dtinventary = new DataTable();
                    dtinventary.Columns.Add("Inventory");
                    dtinventary.Columns.Add("Opp");
                    dtinventary.Columns.Add("Issued");
                    dtinventary.Columns.Add("Received");
                    dtinventary.Columns.Add("Difference");
                    dtinventary.Columns.Add("Closing");
                    cmd = new MySqlCommand("SELECT modifiedroutes.Sno AS routesno, modifiedroutes.RouteName, modifidroutssubtab.BranchID, inventory_monitor.Inv_Sno, SUM(inventory_monitor.Qty) AS opp, branchdata.BranchName FROM dispatch INNER JOIN dispatch_sub ON dispatch.sno = dispatch_sub.dispatch_sno INNER JOIN modifiedroutes ON dispatch_sub.Route_id = modifiedroutes.Sno INNER JOIN (SELECT RefNo, Rank, LevelType, BranchID, CDate, EDate FROM modifiedroutesubtable WHERE (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo INNER JOIN branchdata ON modifidroutssubtab.BranchID = branchdata.sno LEFT OUTER JOIN inventory_monitor ON modifidroutssubtab.BranchID = inventory_monitor.BranchId WHERE (dispatch.sno = @routesno) AND (branchdata.flag <> 0) GROUP BY routesno, inventory_monitor.Inv_Sno ORDER BY routesno");
                    cmd.Parameters.AddWithValue("@routesno", ddlRouteName);
                    cmd.Parameters.AddWithValue("@starttime", GetLowDate(fromdate.AddDays(-1)));
                    DataTable dtclosing = vdm.SelectQuery(cmd).Tables[0];

                    cmd = new MySqlCommand("SELECT modifiedroutes.Sno AS routesno, modifiedroutes.RouteName, modifidroutssubtab.BranchID, SUM(invtran.Qty) AS deliverd, invtran.B_inv_sno FROM dispatch INNER JOIN dispatch_sub ON dispatch.sno = dispatch_sub.dispatch_sno INNER JOIN modifiedroutes ON dispatch_sub.Route_id = modifiedroutes.Sno INNER JOIN (SELECT RefNo, Rank, LevelType, BranchID, CDate, EDate FROM modifiedroutesubtable WHERE (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo INNER JOIN (SELECT TransType, FromTran, ToTran, Qty, B_inv_sno, DOE FROM invtransactions12 WHERE (TransType = 1) AND (DOE BETWEEN @d1 AND @d2) OR (TransType = 3) AND (DOE BETWEEN @d1 AND @d2)) invtran ON modifidroutssubtab.BranchID = invtran.FromTran WHERE (dispatch.sno = @routesno) GROUP BY routesno, invtran.B_inv_sno ORDER BY routesno");
                    cmd.Parameters.AddWithValue("@routesno", ddlRouteName);
                    cmd.Parameters.AddWithValue("@starttime", GetLowDate(fromdate.AddDays(-1)));
                    DateTime dtmin = GetLowDate(fromdate.AddDays(-1));
                    DateTime dtmax = GetLowDate(ServerDateCurrentdate);
                    cmd.Parameters.AddWithValue("@d1", dtmin.AddHours(15));
                    cmd.Parameters.AddWithValue("@d2", dtmax.AddHours(15));
                    DataTable dtinvcollection = vdm.SelectQuery(cmd).Tables[0];
                    cmd = new MySqlCommand("SELECT modifiedroutes.Sno AS routesno, modifiedroutes.RouteName, modifidroutssubtab.BranchID, SUM(invtran.Qty) AS deliverd, invtran.B_inv_sno FROM dispatch INNER JOIN dispatch_sub ON dispatch.sno = dispatch_sub.dispatch_sno INNER JOIN modifiedroutes ON dispatch_sub.Route_id = modifiedroutes.Sno INNER JOIN (SELECT RefNo, Rank, LevelType, BranchID, CDate, EDate FROM modifiedroutesubtable WHERE (EDate IS NULL) AND (CDate <= @starttime) OR (EDate > @starttime) AND (CDate <= @starttime)) modifidroutssubtab ON modifiedroutes.Sno = modifidroutssubtab.RefNo INNER JOIN (SELECT TransType, FromTran, ToTran, Qty, B_inv_sno, DOE FROM invtransactions12 WHERE (TransType = 1) AND (DOE BETWEEN @d1 AND @d2) OR (TransType = 2) AND (DOE BETWEEN @d1 AND @d2)) invtran ON modifidroutssubtab.BranchID = invtran.ToTran WHERE (dispatch.sno = @routesno) GROUP BY routesno, invtran.B_inv_sno ORDER BY routesno");
                    cmd.Parameters.AddWithValue("@routesno", ddlRouteName);
                    cmd.Parameters.AddWithValue("@starttime", GetLowDate(fromdate.AddDays(-1)));
                    cmd.Parameters.AddWithValue("@d1", dtmin.AddHours(15));
                    cmd.Parameters.AddWithValue("@d2", dtmax.AddHours(15));
                    DataTable dtinvdelivery = vdm.SelectQuery(cmd).Tables[0];
                    foreach (DataRow dr in dtInventory.Rows)
                    {
                        DataRow drnew = dtinventary.NewRow();
                        int closing = 0;
                        int invdel = 0;
                        int invcoll = 0;
                        int oppening = 0;
                        drnew["Inventory"] = dr["InvName"].ToString();
                        drnew["Issued"] = dr["Qty"].ToString();
                        drnew["Received"] = dr["Remaining"].ToString();
                        int issued = int.Parse(dr["Qty"].ToString());
                        int received = int.Parse(dr["Remaining"].ToString());
                        foreach (DataRow drclosing in dtclosing.Select("Inv_Sno='" + dr["sno"].ToString() + "'"))
                        {
                            int.TryParse(drclosing["opp"].ToString(), out closing);
                        }
                        foreach (DataRow drinvdel in dtinvdelivery.Select("B_inv_sno='" + dr["sno"].ToString() + "'"))
                        {
                            int.TryParse(drinvdel["deliverd"].ToString(), out invdel);
                        }
                        foreach (DataRow drinvcol in dtinvcollection.Select("B_inv_sno='" + dr["sno"].ToString() + "'"))
                        {
                            int.TryParse(drinvcol["deliverd"].ToString(), out invcoll);
                        }
                        oppening = (closing + received) - issued;
                        drnew["Opp"] = oppening;
                        drnew["Closing"] = (oppening + issued) - received;
                        drnew["Difference"] = issued - received;
                        dtinventary.Rows.Add(drnew);
                    }
                    foreach (DataRow drin in dtinventary.Rows)
                    {
                        delaveryinven obj = new delaveryinven();
                        obj.Inventory = drin["Inventory"].ToString();
                        obj.Opp = drin["Opp"].ToString();
                        obj.Issued = drin["Issued"].ToString();
                        obj.Received = drin["Received"].ToString();
                        obj.Difference = drin["Difference"].ToString();
                        obj.Closing = drin["Closing"].ToString();
                        delaveryinvenlist.Add(obj);
                    }
                    //grdReports1.DataSource = dtinventary;
                    //grdReports1.DataBind();
                    // Two Grids Completed
                    DataTable Rpt = new DataTable();
                    Rpt.Columns.Add("SNo");
                    Rpt.Columns.Add("Agent Code");
                    Rpt.Columns.Add("Agent Name");
                    Rpt.Columns.Add("Crates");
                    Rpt.Columns.Add("Oppening Balance");
                    Rpt.Columns.Add("Sale Value");
                    Rpt.Columns.Add("Amount To Be Paid");
                    Rpt.Columns.Add("Paid Amount");
                    Rpt.Columns.Add("ToDayDue");
                    Rpt.Columns.Add("Due Amount");
                    DataTable dtreport = new DataTable();
                    dtreport.Columns.Add("Agent Code");
                    dtreport.Columns.Add("Agent Name");
                    dtreport.Columns.Add("Crates");
                    dtreport.Columns.Add("Oppening Balance");
                    dtreport.Columns.Add("Sale Value");
                    dtreport.Columns.Add("Amount To Be Paid");
                    dtreport.Columns.Add("Paid Amount");
                    dtreport.Columns.Add("Due Amount");
                    dtreport.Columns.Add("today sale");
                    dtreport.Columns.Add("today collected");
                    dtreport.Columns.Add("SalesType");
                    foreach (DataRow dr in dtbranchammount.Rows)
                    {
                        DataRow newRow = dtreport.NewRow();
                        newRow["Agent Code"] = dr["BranchId"].ToString();

                        //Akbar
                        DataRow[] dragenttrans = dtagenttrans.Select("agentid='" + dr["BranchID"].ToString() + "'");
                        if (dragenttrans.Length <= 0)
                        {
                            cmd = new MySqlCommand("SELECT MAX(sno) as sno FROM agent_bal_trans WHERE agentid=@Branchid AND (inddate < @d1)");
                            cmd.Parameters.AddWithValue("@Branchid", dr["BranchID"].ToString());
                            cmd.Parameters.AddWithValue("@d1", fromdate.AddDays(-1));
                            DataTable dtPrev_trans = vdm.SelectQuery(cmd).Tables[0];
                            if (dtPrev_trans.Rows.Count > 0)
                            {
                                string sno = dtPrev_trans.Rows[0]["sno"].ToString();
                                if (sno == "")
                                {
                                    double closingbalance = 0;
                                    newRow["Oppening Balance"] = closingbalance;
                                }
                                else
                                {
                                    cmd = new MySqlCommand("SELECT agentid, opp_balance, inddate, salesvalue, clo_balance FROM agent_bal_trans WHERE sno=@sno");
                                    cmd.Parameters.AddWithValue("@sno", dtPrev_trans.Rows[0]["sno"].ToString());
                                    DataTable dtagent_value = vdm.SelectQuery(cmd).Tables[0];
                                    if (dtagent_value.Rows.Count > 0)
                                    {
                                        double closingbalance = 0;
                                        double.TryParse(dtagent_value.Rows[0]["clo_balance"].ToString(), out closingbalance);
                                        string inddate = dtagent_value.Rows[0]["inddate"].ToString();
                                        DateTime dtinddate = Convert.ToDateTime(inddate);
                                        if (dtinddate < fromdate)
                                        {
                                            newRow["Oppening Balance"] = closingbalance;
                                        }
                                        else
                                        {
                                            newRow["Oppening Balance"] = 0;
                                        }
                                    }
                                }
                            }
                            else
                            {
                                double closingbalance = 0;
                                newRow["Oppening Balance"] = closingbalance;
                            }
                        }
                        else
                        {
                            foreach (DataRow drr in dtagenttrans.Select("agentid='" + dr["BranchID"].ToString() + "'"))
                            {
                                newRow["Oppening Balance"] = drr["opp_balance"].ToString();
                            }
                        }
                        //akbar
                        newRow["Agent Name"] = dr["BranchName"].ToString();
                        newRow["Sale Value"] = "0";
                        newRow["Amount To Be Paid"] = "0";
                        newRow["Paid Amount"] = "0";
                        newRow["Due Amount"] = "0";
                        newRow["today sale"] = "0";
                        newRow["today collected"] = "0";
                        newRow["SalesType"] = dr["SalesType"].ToString();
                        dtreport.Rows.Add(newRow);
                    }
                    foreach (DataRow drbrncnamtcoll in dtreport.Rows)
                    {
                        foreach (DataRow dr in dttodaycollection.Rows)
                        {
                            if (drbrncnamtcoll["Agent Code"].ToString() == dr["Branch_id"].ToString())
                            {
                                float salevalue = 0;
                                float.TryParse(dr["totalamount"].ToString(), out salevalue);//Sale Value Today
                                drbrncnamtcoll["today sale"] = Math.Round(salevalue, 2);
                            }
                        }
                    }
                    foreach (DataRow drbrncnamtcoll in dtreport.Rows)
                    {
                        foreach (DataRow dr in dtroutecollection.Rows)
                        {
                            if (drbrncnamtcoll["Agent Code"].ToString() == dr["Branchid"].ToString())
                            {
                                float paidamt = 0;
                                float.TryParse(dr["AmountPaid"].ToString(), out paidamt);//Today Amount Paid
                                drbrncnamtcoll["today collected"] = Math.Round(paidamt, 2);
                            }
                        }
                    }
                    foreach (DataRow drbrnchamt in dtreport.Rows)
                    {
                        foreach (DataRow drbrnchcollection in dtBranchcollection.Rows)///Selected Date To PresentDate   Total SaleValue AND PaidAmount
                        {
                            if (drbrnchamt["Agent Code"].ToString() == drbrnchcollection["Branch_id"].ToString())
                            {

                                float salevalue = 0;
                                float.TryParse(drbrnchcollection["totalamount"].ToString(), out salevalue);
                                float paidamt = 0;
                                float.TryParse(drbrnchcollection["AmountPaid"].ToString(), out paidamt);
                                float dueamt = 0;
                                drbrnchamt["Sale Value"] = Math.Round(salevalue, 2);
                                drbrnchamt["Paid Amount"] = Math.Round(paidamt, 2);
                                drbrnchamt["Due Amount"] = Math.Round(dueamt, 2);
                            }
                        }
                    }
                    double pchequeamt = 0; double vchequeamt = 0; double totchequeamount = 0;
                    foreach (DataRow drbrnchamt in dtreport.Rows)
                    {
                        foreach (DataRow drsocollection in dtsalesofficecollection.Rows)
                        {
                            if (drbrnchamt["Agent Code"].ToString() == drsocollection["Branch_id"].ToString())
                            {
                                if (drsocollection["PaymentType"].ToString() == "Cheque")
                                {
                                    if (drsocollection["CheckStatus"].ToString() == "P")
                                    {
                                        float pcheamt = 0;
                                        float.TryParse(drsocollection["AmountPaid"].ToString(), out pcheamt);
                                        pchequeamt += pcheamt;
                                        totchequeamount += pcheamt;
                                    }
                                    else if (drsocollection["CheckStatus"].ToString() == "V")
                                    {
                                        float vcheamt = 0;
                                        float.TryParse(drsocollection["AmountPaid"].ToString(), out vcheamt);
                                        vchequeamt += vcheamt;
                                        totchequeamount += vcheamt;
                                    }
                                }
                                float sopaidamt = 0;
                                float.TryParse(drsocollection["AmountPaid"].ToString(), out sopaidamt);
                                float trippaid = 0;
                                float.TryParse(drbrnchamt["Paid Amount"].ToString(), out trippaid);
                                float amtpaid = sopaidamt + trippaid;
                                drbrnchamt["Paid Amount"] = Math.Round(amtpaid, 2);
                            }
                        }
                    }



                    DataTable testtable = new DataTable();
                    testtable.Columns.Add("Agent Code");
                    testtable.Columns.Add("Agent Name");
                    testtable.Columns.Add("Crates");
                    testtable.Columns.Add("Oppening Balance");
                    testtable.Columns.Add("Sale Value");
                    testtable.Columns.Add("Amount To Be Paid");
                    testtable.Columns.Add("Paid Amount");
                    testtable.Columns.Add("Due Amount");
                    testtable.Columns.Add("today sale");
                    testtable.Columns.Add("today collected");
                    testtable.Columns.Add("ToDayDue");
                    testtable.Columns.Add("SalesType");



                    foreach (DataRow drag in dtreport.Rows)
                    {
                        if (drag["SalesType"].ToString() == "20")
                        {

                            if (drag["Oppening Balance"].ToString() != "0" || drag["Sale Value"].ToString() != "0" || drag["Amount To Be Paid"].ToString() != "0" || drag["Due Amount"].ToString() != "0" || drag["Paid Amount"].ToString() != "0" || drag["today collected"].ToString() != "0" || drag["today sale"].ToString() != "0")
                            {
                                DataRow newRow = testtable.NewRow();
                                //delaveryagent obj = new delaveryagent();
                                newRow["Agent Code"] = drag["Agent Code"].ToString();
                                newRow["Agent Name"] = drag["Agent Name"].ToString();
                                newRow["Oppening Balance"] = drag["Oppening Balance"].ToString();
                                newRow["Sale Value"] = drag["Sale Value"].ToString();
                                newRow["Amount To Be Paid"] = drag["Amount To Be Paid"].ToString();
                                newRow["Paid Amount"] = drag["Paid Amount"].ToString();
                                newRow["Due Amount"] = drag["Due Amount"].ToString();
                                newRow["today sale"] = drag["today sale"].ToString(); ;
                                newRow["today collected"] = drag["today collected"].ToString();
                                newRow["SalesType"] = drag["SalesType"].ToString();
                                //obj.ToDayDueAmount = drag["ToDayDue"].ToString();
                                //obj.Crates = drag["Crates"].ToString();
                                //obj.SNo = drag["SNo"].ToString();
                                testtable.Rows.Add(newRow);
                            }
                        }
                        else
                        {
                            if (drag["Sale Value"].ToString() != "0" || drag["Amount To Be Paid"].ToString() != "0" || drag["Due Amount"].ToString() != "0" || drag["Paid Amount"].ToString() != "0" || drag["today collected"].ToString() != "0" || drag["today sale"].ToString() != "0")
                            {
                                DataRow newRow1 = testtable.NewRow();
                                newRow1["Agent Code"] = drag["Agent Code"].ToString();
                                newRow1["Agent Name"] = drag["Agent Name"].ToString();
                                newRow1["Oppening Balance"] = drag["Oppening Balance"].ToString();
                                newRow1["Sale Value"] = drag["Sale Value"].ToString();
                                newRow1["Amount To Be Paid"] = drag["Amount To Be Paid"].ToString();
                                newRow1["Paid Amount"] = drag["Paid Amount"].ToString();
                                newRow1["Due Amount"] = drag["Due Amount"].ToString();
                                newRow1["today sale"] = drag["today sale"].ToString(); ;
                                newRow1["today collected"] = drag["today collected"].ToString();
                                newRow1["SalesType"] = drag["SalesType"].ToString();
                                testtable.Rows.Add(newRow1);
                            }
                        }
                    }
                    int k = 1;
                    double totalcrates = 0;
                    cmd = new MySqlCommand("SELECT sno,salestype FROM salestypemanagement WHERE (status = 1) ORDER BY salestype DESC");
                    DataTable dtsalesType = vdm.SelectQuery(cmd).Tables[0];
                    foreach (DataRow dr in dtsalesType.Rows)
                    {
                        DataRow[] drsalestype = testtable.Select("SalesType='" + dr["sno"].ToString() + "'");
                        if (drsalestype.Length > 0)
                        {
                            DataRow newRow41 = Rpt.NewRow();
                            newRow41["Agent Code"] = dr["salestype"].ToString();
                            Rpt.Rows.Add(newRow41);
                        }
                        foreach (DataRow drbrnchamt in testtable.Select("SalesType='" + dr["sno"].ToString() + "'"))
                        {
                            DataRow newRow1 = Rpt.NewRow();
                            newRow1["SNo"] = k;
                            newRow1["Agent Code"] = drbrnchamt["Agent Code"].ToString();
                            DataRow[] dragentinv = dtAgentInventory.Select("BranchID='" + drbrnchamt["Agent Code"].ToString() + "'");
                            string creates = "";
                            foreach (DataRow drc in dragentinv)
                            {
                                string invsno = drc.ItemArray[0].ToString();
                                if (invsno == "1" || invsno == "2" || invsno == "3" || invsno == "4")
                                {
                                    if (drc.ItemArray[1].ToString() == "0")
                                    {
                                    }
                                    else
                                    {
                                        creates += drc.ItemArray[1].ToString();
                                        newRow1["Crates"] = creates;
                                        float cratescount = 0;
                                        float.TryParse(creates, out cratescount);
                                        totalcrates += cratescount;
                                    }
                                }
                            }
                            newRow1["Agent Name"] = drbrnchamt["Agent Name"].ToString();
                            newRow1["Sale Value"] = drbrnchamt["today sale"].ToString();
                            float salevalue = 0;
                            float.TryParse(drbrnchamt["Sale Value"].ToString(), out salevalue);

                            float todaysalevalue = 0;
                            float.TryParse(drbrnchamt["today sale"].ToString(), out todaysalevalue);
                            float todaypaid = 0;
                            float.TryParse(drbrnchamt["today collected"].ToString(), out todaypaid);



                            if (dr["sno"].ToString() == "20")
                            {
                                Totcashamount += todaysalevalue;
                                Totcashpaidamount += todaypaid;
                            }
                            if (dr["sno"].ToString() == "36")
                            {
                                Totfhamount += todaysalevalue;
                                Totfhpaidamount += todaypaid;
                            }
                            if (dr["sno"].ToString() == "32")
                            {
                                Totcateringamount += todaysalevalue;
                                Totcateringpaidamount += todaypaid;
                            }
                            if (dr["sno"].ToString() == "37")
                            {
                                Totcompassamount += todaysalevalue;
                                Totcompasspaidamount += todaypaid;
                            }
                            if (dr["sno"].ToString() == "18")
                            {
                                Totinstituteamount += todaysalevalue;
                                Totinstitutepaidamount += todaypaid;
                            }
                            if (dr["sno"].ToString() == "33")
                            {
                                Totdueagentamount += todaysalevalue;
                                Totdueagentpaidamount += todaypaid;
                            }
                            if (dr["sno"].ToString() == "42")
                            {
                                TotCRagentamount += todaysalevalue;
                                TotCRagentpaidamount += todaypaid;
                            }
                            if (dr["sno"].ToString() == "44")
                            {
                                TotGauravagentamount += todaysalevalue;
                                TotGauravagentPaidamount += todaypaid;
                            }

                            float paidamt = 0;
                            float.TryParse(drbrnchamt["Paid Amount"].ToString(), out paidamt);



                            float oppamt = 0;
                            float.TryParse(drbrnchamt["Oppening Balance"].ToString(), out oppamt);

                            float ToDayDue = 0;
                            ToDayDue = todaysalevalue - todaypaid;
                            newRow1["ToDayDue"] = ToDayDue;

                            //float aopp = 0;
                            //aopp = oppamt + paidamt - salevalue;
                            float totaldue = 0;
                            totaldue = oppamt + todaysalevalue - todaypaid;
                            float amounttobepaid = 0;
                            amounttobepaid = oppamt + todaysalevalue;
                            if (dr["sno"].ToString() == "20")
                            {
                                newRow1["Oppening Balance"] = oppamt;
                                newRow1["Amount To Be Paid"] = amounttobepaid;
                                newRow1["Paid Amount"] = Math.Round(todaypaid, 2);
                                newRow1["Due Amount"] = Math.Round(totaldue, 2);
                                Rpt.Rows.Add(newRow1);
                            }
                            else
                            {
                                newRow1["Oppening Balance"] = 0; ;
                                newRow1["Amount To Be Paid"] = 0;
                                newRow1["Due Amount"] = 0;
                                newRow1["Paid Amount"] = Math.Round(todaypaid, 2);
                                Rpt.Rows.Add(newRow1);
                            }
                            k++;
                        }
                    }
                    // Three Grid Completed
                    double TDAMOUNT = 0;
                    double tReturns = 0;
                    double TDSale = 0;
                    double TDAmount = 0;
                    double TDPaid = 0;
                    double TDSV = 0;
                    double TDTodayDue = 0;
                    double Todayamount = 0;
                    foreach (DataRow dr in Rpt.Rows)
                    {
                        string Salestype = dr["Agent Name"].ToString();
                        double Returns = 0;
                        double.TryParse(dr["Oppening Balance"].ToString(), out Returns);
                        tReturns += Returns;
                        double Sale = 0;
                        double.TryParse(dr["Sale Value"].ToString(), out Sale);
                        TDSale += Sale;
                        double Amount = 0;
                        double.TryParse(dr["Amount To Be Paid"].ToString(), out Amount);
                        TDAmount += Amount;
                        double Paid = 0;
                        double.TryParse(dr["Paid Amount"].ToString(), out Paid);
                        TDPaid += Paid;
                        double todaysale = 0;
                        double todaypaid = 0;
                        double.TryParse(dr["Sale Value"].ToString(), out todaysale);
                        double.TryParse(dr["Paid Amount"].ToString(), out todaypaid);
                        TDAMOUNT += todaypaid;
                        double todaydue = todaysale - todaypaid;
                        TDTodayDue += todaydue;
                        double DueAmount = 0;
                        double.TryParse(dr["Due Amount"].ToString(), out DueAmount);
                        if (Salestype == "AGENTS")
                        {
                            if (DueAmount > 0)
                            {
                                Todayamount += DueAmount;
                            }
                        }
                        TDSV += DueAmount;
                        double amountcount = 0;
                        if (Returns < 0)
                        {
                            Returns = 0;
                        }
                        amountcount = Sale + Amount + Paid + Returns;
                    }
                    DataRow newTotal = Rpt.NewRow();
                    newTotal["SNo"] = "";
                    newTotal["Agent Code"] = "";
                    newTotal["Agent Name"] = "Total";
                    newTotal["Oppening Balance"] = Math.Round(tReturns, 2);
                    newTotal["Sale Value"] = Math.Round(TDSale, 2);
                    newTotal["Amount To Be Paid"] = Math.Round(TDAmount, 2);
                    newTotal["Paid Amount"] = Math.Round(TDPaid, 2);
                    newTotal["ToDayDue"] = Math.Round(TDTodayDue, 2);
                    newTotal["Due Amount"] = Math.Round(TDSV, 2);
                    Rpt.Rows.Add(newTotal);
                    foreach (DataRow drag in Rpt.Rows)
                    {
                        //if (drag["Oppening Balance"].ToString() != "0" || drag["Sale Value"].ToString() != "0" || drag["Amount To Be Paid"].ToString() != "0" || drag["Due Amount"].ToString() != "0" || drag["Paid Amount"].ToString() != "0" || drag["ToDayDue"].ToString() != "0")
                        //{
                        delaveryagent obj = new delaveryagent();
                        obj.SNo = drag["SNo"].ToString();
                        obj.AgentCode = drag["Agent Code"].ToString();
                        obj.AgentName = drag["Agent Name"].ToString();
                        obj.OppeningBalance = drag["Oppening Balance"].ToString();
                        obj.SaleValue = drag["Sale Value"].ToString();
                        obj.AmountToBePaid = drag["Amount To Be Paid"].ToString();
                        obj.PaidAmount = drag["Paid Amount"].ToString();
                        obj.DueAmount = drag["Due Amount"].ToString();
                        obj.ToDayDueAmount = drag["ToDayDue"].ToString();
                        obj.Crates = drag["Crates"].ToString();
                        delaveryagentlist.Add(obj);
                        //}
                    }
                    DataRow space1 = Rpt.NewRow();
                    space1["SNo"] = "";
                    Rpt.Rows.Add(space1);
                    DataRow space2 = Rpt.NewRow();
                    space2["SNo"] = "";
                    Rpt.Rows.Add(space2);
                    float totcollectedamt = 0;
                    float.TryParse(dtDenomin.Rows[0]["CollectedAmount"].ToString(), out totcollectedamt);
                    //grdReports2.DataSource = Rpt;
                    //grdReports2.DataBind();
                    // Three Grid Completed Total Calculaton
                    DataTable dtsummary = new DataTable();
                    dtsummary.Columns.Add("Sales Type");
                    dtsummary.Columns.Add("Sale Value");
                    dtsummary.Columns.Add("Paid Amount");
                    dtsummary.Columns.Add("Due Value");
                    DataRow space6 = dtsummary.NewRow();
                    space6["Sales Type"] = "INSTITUTIONAL";
                    if (Totinstituteamount > 0)
                    {
                        space6["Sale Value"] = Totinstituteamount;
                        space6["Paid Amount"] = Totinstitutepaidamount;
                        space6["Due Value"] = Totinstituteamount - Totinstitutepaidamount;
                        dtsummary.Rows.Add(space6);
                    }
                    DataRow space7 = dtsummary.NewRow();
                    space7["Sales Type"] = "DUE AGENTs";
                    space7["Sale Value"] = Totdueagentamount;
                    space7["Paid Amount"] = Math.Round(Totdueagentpaidamount, 2);
                    space7["Due Value"] = Totdueagentamount - Totdueagentpaidamount;
                    if (Totdueagentamount > 0)
                    {
                        dtsummary.Rows.Add(space7);
                    }
                    DataRow space8 = dtsummary.NewRow();
                    space8["Sales Type"] = "Comapass Group";
                    space8["Sale Value"] = Totcompassamount;
                    space8["Paid Amount"] = Math.Round(Totcompasspaidamount, 2);
                    space8["Due Value"] = Totcompassamount - Totcompasspaidamount;
                    if (Totcompassamount > 0)
                    {
                        dtsummary.Rows.Add(space8);
                    }
                    DataRow space9 = dtsummary.NewRow();
                    space9["Sales Type"] = "Fresh and Honest cafe";
                    if (Totfhamount > 0)
                    {
                        space9["Sale Value"] = Totfhamount;
                        space9["Paid Amount"] = Totfhpaidamount;
                        space9["Due Value"] = Totfhamount - Totfhpaidamount;
                        dtsummary.Rows.Add(space9);
                    }
                    DataRow space10 = dtsummary.NewRow();
                    space10["Sales Type"] = "Catering Agents";
                    if (Totcateringamount > 0)
                    {
                        space10["Sale Value"] = Totcateringamount;
                        space10["Paid Amount"] = Totcateringpaidamount;
                        space10["Due Value"] = Totcateringamount - Totcateringpaidamount;
                        dtsummary.Rows.Add(space10);
                    }
                    DataRow space11 = dtsummary.NewRow();
                    space11["Sales Type"] = "Cash Agents Sale value";
                    if (Totcashamount > 0)
                    {
                        space11["Sale Value"] = Math.Round(Totcashamount, 2);
                        space11["Paid Amount"] = Math.Round(Totcashpaidamount, 2);
                        double duevalue = 0;
                        duevalue = Totcashamount - Totcashpaidamount;
                        duevalue = Math.Round(duevalue, 2);
                        space11["Due Value"] = duevalue;
                        dtsummary.Rows.Add(space11);
                    }


                    DataRow space22 = dtsummary.NewRow();
                    space22["Sales Type"] = "Gaurav";
                    if (Totinstituteamount > 0)
                    {
                        space22["Sale Value"] = TotGauravagentamount;
                        space22["Paid Amount"] = TotGauravagentPaidamount;
                        space22["Due Value"] = TotGauravagentamount - TotGauravagentPaidamount;
                        dtsummary.Rows.Add(space22);
                    }

                    double deduction = 0;
                    deduction = Totinstituteamount + Totdueagentamount + Totcompassamount + Totfhamount + Totcateringamount;
                    DataRow space13 = dtsummary.NewRow();
                    space13["Sales Type"] = "Total";
                    double total = 0;
                    total = Totcashamount + Totinstituteamount + Totcompassamount + Totcateringamount + Totfhamount + Totdueagentamount;
                    total = Math.Round(total, 0);
                    double totDueSale = Totinstituteamount + Totcompassamount + Totcateringamount + Totfhamount + Totdueagentamount;
                    space13["Sale Value"] = total;
                    space13["Paid Amount"] = totcollectedamt;
                    double DueValue = total - totcollectedamt;
                    space13["Due Value"] = DueValue - pchequeamt; ;
                    dtsummary.Rows.Add(space13);
                    foreach (DataRow drast in dtsummary.Rows)
                    {
                        delaverysalety obj = new delaverysalety();
                        obj.SalesType = drast["Sales Type"].ToString();
                        obj.SaleValue = drast["Sale Value"].ToString();
                        obj.PaidAmount = drast["Paid Amount"].ToString();
                        obj.DueValue = drast["Due Value"].ToString();
                        delaverysaletylist.Add(obj);
                    }
                    //grdReports3.DataSource = dtsummary;
                    //grdReports3.DataBind();
                    DataTable denomination = new DataTable();
                    denomination.Columns.Add("Cash");
                    denomination.Columns.Add("Count");
                    denomination.Columns.Add("Amount");
                    DataTable dtsummaryreport = new DataTable();
                    dtsummaryreport.Columns.Add("SaleType");
                    dtsummaryreport.Columns.Add("Amount");
                    DataRow newsummary = dtsummaryreport.NewRow();
                    newsummary["SaleType"] = "SaleValue";
                    newsummary["Amount"] = total;
                    dtsummaryreport.Rows.Add(newsummary);
                    DataRow newsummary1 = dtsummaryreport.NewRow();
                    newsummary1["SaleType"] = "TotalDueSale";
                    newsummary1["Amount"] = totDueSale;
                    dtsummaryreport.Rows.Add(newsummary1);
                    DataRow newsummary2 = dtsummaryreport.NewRow();
                    newsummary2["SaleType"] = "TotalCashSale";
                    newsummary2["Amount"] = Math.Round(Totcashamount, 2);
                    dtsummaryreport.Rows.Add(newsummary2);
                    DataRow newsummary3 = dtsummaryreport.NewRow();
                    newsummary3["SaleType"] = "CollectedCash";
                    newsummary3["Amount"] = totcollectedamt;
                    dtsummaryreport.Rows.Add(newsummary3);

                    if (pchequeamt > 0)
                    {
                        DataRow newsummary4 = dtsummaryreport.NewRow();
                        newsummary4["SaleType"] = "PendingChequeAmount";
                        newsummary4["Amount"] = pchequeamt;
                        dtsummaryreport.Rows.Add(newsummary4);
                    }
                    if (vchequeamt > 0)
                    {
                        DataRow newsummary5 = dtsummaryreport.NewRow();
                        newsummary5["SaleType"] = "VerifyChequeAmount";
                        newsummary5["Amount"] = vchequeamt;
                        dtsummaryreport.Rows.Add(newsummary5);
                    }
                    //if (totchequeamount > 0)
                    //{
                    DataRow newsummary6 = dtsummaryreport.NewRow();
                    newsummary6["SaleType"] = "TotalChequeAmount";
                    newsummary6["Amount"] = totchequeamount;
                    dtsummaryreport.Rows.Add(newsummary6);
                    //}

                    DataRow newsummary7 = dtsummaryreport.NewRow();
                    newsummary7["SaleType"] = "DueAmount";
                    newsummary7["Amount"] = DueValue - pchequeamt; ;
                    dtsummaryreport.Rows.Add(newsummary7);
                    foreach (DataRow dramt in dtsummaryreport.Rows)
                    {
                        delaverysaletyamt obj = new delaverysaletyamt();
                        obj.SaleType = dramt["SaleType"].ToString();
                        obj.Amount = dramt["Amount"].ToString();
                        delaverysaletyamtlist.Add(obj);
                    }
                    //grdReports5.DataSource = dtsummaryreport;
                    //grdReports5.DataBind();
                    string EmpName = dtDenomin.Rows[0]["EmpName"].ToString();
                    string strDenomin = dtDenomin.Rows[0]["Denominations"].ToString();
                    string status = "True";
                    strDenomin = strDenomin.Replace("+", " ");
                    foreach (string str in strDenomin.Split(' '))
                    {
                        if (str != "")
                        {
                            DataRow newden = denomination.NewRow();
                            if (status == "True")
                            {
                                status = "False";
                            }
                            string[] price = str.Split('x');
                            newden["Cash"] = price[0];
                            newden["Count"] = price[1];
                            float denamount = 0;
                            if (price[0] == "Vouchers")
                            {
                                denamount = 1;
                            }
                            else
                            {
                                float.TryParse(price[0], out denamount);
                            }
                            float DencAmount = 0;
                            float.TryParse(price[1], out DencAmount);
                            newden["Amount"] = Convert.ToDecimal(denamount * DencAmount).ToString("#,##0.00");
                            denominationtotal += denamount * DencAmount;
                            denomination.Rows.Add(newden);
                        }
                    }
                    DataRow space12 = denomination.NewRow();
                    space12["Cash"] = "Total Amount";
                    space12["Amount"] = denominationtotal;
                    denomination.Rows.Add(space12);
                    foreach (DataRow drcash in denomination.Rows)
                    {
                        delaverydenomi obj = new delaverydenomi();
                        obj.Cash = drcash["Cash"].ToString();
                        obj.Count = drcash["Count"].ToString();
                        obj.Amount = drcash["Amount"].ToString();
                        obj.EmpName = EmpName;
                        delaverydenomilist.Add(obj);
                    }
                    //grdReports4.DataSource = denomination;
                    //grdReports4.DataBind();
                    delaveryalldet objs = new delaveryalldet();
                    objs.delaveryprod = delaveryprodlist;
                    objs.delaveryagent = delaveryagentlist;
                    objs.delaveryinven = delaveryinvenlist;
                    objs.delaverysalety = delaverysaletylist;
                    objs.delaverysaletyamt = delaverysaletyamtlist;
                    objs.delaverydenomi = delaverydenomilist;
                    delaveryalldetlist.Add(objs);

                    string response = GetJson(delaveryalldetlist);
                    context.Response.Write(response);
                }
            }
            else
            {
                string msg = "Deliveries Not Found";
                string response = GetJson(msg);
                context.Response.Write(response);
            }
        }
        catch
        {
        }
    }
    private void pickervaluesettosession(HttpContext context)
    {
        string IndDate = context.Request["IndDate"];
        string Todate = context.Request["Todate"];
        string s = context.Request["IndDate"].ToString();
        var dt = DateTime.ParseExact(s, "ddd MMM dd yyyy HH:mm:ss 'GMT'zzz", System.Globalization.CultureInfo.InvariantCulture);
        string Ind_Date = dt.ToString("yyyy-MM-dd");
        DateTime ServerDateCurrentdate = Convert.ToDateTime(Ind_Date);
        DateTime Selectedfromdate = ServerDateCurrentdate;
        string edate = context.Request["Todate"].ToString();
        var edt = DateTime.ParseExact(edate, "ddd MMM dd yyyy HH:mm:ss 'GMT'zzz", System.Globalization.CultureInfo.InvariantCulture);
        string Tdate = edt.ToString("yyyy-MM-dd");
        DateTime To_Date = Convert.ToDateTime(Tdate);
        DateTime SelectedTodatedate = To_Date;
        TimeSpan dateSpan2 = SelectedTodatedate.Subtract(Selectedfromdate);
        int NoOfdays = dateSpan2.Days;
        //if (context.Session["Days"] == null)
        //{
        context.Session["Todate"] = Todate;
        context.Session["IndDate"] = IndDate;
        context.Session["DIndDate"] = IndDate;
        //context.Session["Days"] = NoOfdays;
        //}
        //else if (IndDate == context.Session["IndDate"])
        //{
        //    Todate = context.Session["Todate"].ToString();
        //    context.Session["Todate"] = Todate;
        //    context.Session["IndDate"] = IndDate;
        //}
        //else
        //{
        //    context.Session["IndDate"] = IndDate;
        //    context.Session["Days"] = null;
        //    context.Session["Days"] = NoOfdays;
        //    context.Session["Todate"] = Todate;
        //   // context.Session["ToDay"] = NoOfdays;
        //}
        string msg = "ok";
        string response = GetJson(msg);
        context.Response.Write(response);
    }
    public class PlantInventaryDetails
    {
        public string productid { get; set; }
        public string IssuedQty { get; set; }
        public string supplyqty { get; set; }
        public string subsno { get; set; }
        public string productname { get; set; }
        public string return_stock_refno { get; set; }
        public string InvName { get; set; }
        public string InvSno { get; set; }
        public string BranchName { get; set; }
        public string BranchID { get; set; }
        public string ReceivedQty { get; set; }
        public string Tripid { get; set; }
        public string opening { get; set; }
        public string closing { get; set; }
        public string closingdate { get; set; }
        public string ReceivedCrates { get; set; }
        public string ReturnCrates { get; set; }
        public string DifferenceCrates { get; set; }
        public string ReceivedCan40ltr { get; set; }
        public string DifferenceCan40ltr { get; set; }
        public string ReturnCan40ltr { get; set; }
        public string ReceivedCan20ltr { get; set; }
        public string ReturnCan20ltr { get; set; }
        public string DifferenceCan20ltr { get; set; }
    }
    private void get_PlantDirectSales_Wise_InventaryDetails(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            DateTime AssignDate = VehicleDBMgr.GetTime(vdbmngr.conn);
            string frmdate = context.Request["fromdate"];
            DateTime fromdate = Convert.ToDateTime(frmdate);

            string branchid = context.Request["Branchid"].ToString();
            cmd = new MySqlCommand("SELECT    dispatch.sno, branchdata.BranchName As Expr2, dispatch.Branch_Id, dispatch.BranchID, SUM(tripinvdata.Qty) AS IssuedQty, dispatch.CompanyId, invmaster.InvName,tripdat.Sno As TripId, invmaster.sno AS InvSno, branchdata_1.BranchName AS BranchName FROM dispatch INNER JOIN branchdata ON dispatch.Branch_Id = branchdata.sno INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN (SELECT  Sno, I_Date FROM  tripdata WHERE (AssignDate BETWEEN @d1 AND @d2)) tripdat ON triproutes.Tripdata_sno = tripdat.Sno INNER JOIN tripinvdata ON tripdat.Sno = tripinvdata.Tripdata_sno INNER JOIN invmaster ON invmaster.sno = tripinvdata.invid INNER JOIN branchdata branchdata_1 ON dispatch.BranchID = branchdata_1.sno WHERE (dispatch.Branch_Id = @branchid) AND (dispatch.DispMode = 'AGENT') GROUP BY dispatch.BranchID, invmaster.sno, branchdata_1.BranchName");
            cmd.Parameters.AddWithValue("@d1", GetLowDate(fromdate));
            cmd.Parameters.AddWithValue("@d2", GetHighDate(fromdate));
            cmd.Parameters.AddWithValue("@branchid", branchid);
            DataTable routes = vdbmngr.SelectQuery(cmd).Tables[0];
            List<PlantInventaryDetails> plant_inventary_List = new List<PlantInventaryDetails>();
            foreach (DataRow dr in routes.Rows)
            {
                PlantInventaryDetails obj1 = new PlantInventaryDetails();
                obj1.BranchID = dr["Branch_Id"].ToString();
                obj1.BranchName = dr["BranchName"].ToString();
                obj1.InvName = dr["InvName"].ToString();
                obj1.InvSno = dr["InvSno"].ToString();
                obj1.IssuedQty = dr["IssuedQty"].ToString();
                obj1.Tripid = dr["TripId"].ToString();
                plant_inventary_List.Add(obj1);
            }
            string response = GetJson(plant_inventary_List);
            context.Response.Write(response);
        }
        catch
        {
        }
    }
    private void get_Plant_Wise_InventaryDetails(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            DateTime AssignDate = VehicleDBMgr.GetTime(vdbmngr.conn);
            string frmdate = context.Request["fromdate"];
            DateTime fromdate = Convert.ToDateTime(frmdate);
            string to_date = context.Request["todate"];
            DateTime todate = Convert.ToDateTime(to_date);
            string branchid = context.Request["Branchid"].ToString();
            //cmd = new MySqlCommand("SELECT  triproutes.Tripdata_sno, SUM(tripinvdata.Qty) AS DispatchQty, SUM(tripinvdata.Remaining) AS ReceivedQty, invmaster.tempinvname AS InvName, invmaster.sno AS InvSno, dispatch.Branch_Id FROM  tripdata INNER JOIN triproutes ON tripdata.Sno = triproutes.Tripdata_sno INNER JOIN dispatch ON triproutes.RouteID = dispatch.sno INNER JOIN tripinvdata ON tripdata.Sno = tripinvdata.Tripdata_sno INNER JOIN invmaster ON tripinvdata.invid = invmaster.sno WHERE (tripdata.I_Date BETWEEN @d1 AND @d2) AND (dispatch.Branch_Id = @branchid) GROUP BY invmaster.sno");
            ////cmd = new MySqlCommand("SELECT    dispatch.sno, branchdata.BranchName, dispatch.Branch_Id, dispatch.BranchID, SUM(tripinvdata.Qty) AS IssuedQty, SUM(tripinvdata.Remaining) AS ReceivedQty,dispatch.CompanyId, invmaster.InvName, invmaster.sno AS InvSno FROM  dispatch INNER JOIN branchdata ON dispatch.Branch_Id = branchdata.sno INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN (SELECT  Sno, I_Date FROM   tripdata WHERE  (AssignDate BETWEEN @d1 AND @d2)) tripdat ON triproutes.Tripdata_sno = tripdat.Sno INNER JOIN tripinvdata ON tripdat.Sno = tripinvdata.Tripdata_sno INNER JOIN invmaster ON invmaster.sno = tripinvdata.invid WHERE (dispatch.Branch_Id = @branchid) GROUP BY dispatch.Branch_Id, invmaster.sno");
            //cmd.Parameters.AddWithValue("@d1", GetLowDate(fromdate).AddDays(-1));
            //cmd.Parameters.AddWithValue("@d2", GetHighDate(todate).AddDays(-1));
            //cmd.Parameters.AddWithValue("@branchid", branchid);
            //DataTable routes = vdbmngr.SelectQuery(cmd).Tables[0];
            List<PlantInventaryDetails> plant_inventary_List = new List<PlantInventaryDetails>();
            //foreach (DataRow dr in routes.Rows)
            //{
            //    PlantInventaryDetails obj1 = new PlantInventaryDetails();
            //    obj1.BranchID = "" + dr["InvSno"].ToString() + "_" + dr["Branch_Id"].ToString() + "";// dr["Branch_Id"].ToString();
            //    obj1.BranchName = dr["BranchName"].ToString();
            //    obj1.InvName = dr["InvName"].ToString();
            //    obj1.InvSno = dr["InvSno"].ToString();
            //    obj1.IssuedQty = dr["DispatchQty"].ToString();
            //    obj1.ReceivedQty = dr["ReceivedQty"].ToString();
            //    plant_inventary_List.Add(obj1);
            //}
            //string response = GetJson(plant_inventary_List);
            //context.Response.Write(response);

            cmd = new MySqlCommand("SELECT   inventarytransactions.sno, inventarytransactions.invsno, SUM(inventarytransactions.openinginv) AS openinginv, SUM(inventarytransactions.isuue_invqty) AS isuue_invqty, SUM(inventarytransactions.receive_invqty) AS receive_invqty, SUM(inventarytransactions.closing_invqty) AS closing_invqty,inventarytransactions.doe, inventarytransactions.closing_date, inventarytransactions.branchid, invmaster.InvName FROM inventarytransactions INNER JOIN invmaster ON inventarytransactions.invsno = invmaster.sno WHERE (inventarytransactions.branchid = @branchid) AND (inventarytransactions.closing_date BETWEEN @d1 AND @d2) GROUP BY inventarytransactions.invsno order by inventarytransactions.invsno");
            cmd.Parameters.AddWithValue("@d1", GetLowDate(fromdate));
            cmd.Parameters.AddWithValue("@d2", GetHighDate(todate));
            cmd.Parameters.AddWithValue("@branchid", branchid);
            DataTable dtinvopp = vdbmngr.SelectQuery(cmd).Tables[0];
            foreach (DataRow drdaycoll in dtinvopp.Rows)
            {
                PlantInventaryDetails obj1 = new PlantInventaryDetails();
                obj1.BranchID = "" + drdaycoll["InvSno"].ToString() + "_" + drdaycoll["branchid"].ToString() + "";// dr["Branch_Id"].ToString();
                //obj1.BranchName = dr["BranchName"].ToString();
                obj1.InvName = drdaycoll["InvName"].ToString();
                obj1.InvSno = drdaycoll["InvSno"].ToString();
                obj1.IssuedQty = drdaycoll["isuue_invqty"].ToString();
                obj1.ReceivedQty = drdaycoll["receive_invqty"].ToString();
                obj1.opening = drdaycoll["openinginv"].ToString();
                obj1.closing = drdaycoll["closing_invqty"].ToString();
                DateTime cdate = Convert.ToDateTime(drdaycoll["closing_date"].ToString());
                obj1.closingdate = cdate.ToString("dd/MM/yyyy");
                plant_inventary_List.Add(obj1);
            }
            string response = GetJson(plant_inventary_List);
            context.Response.Write(response);
        }
        catch
        {
        }
    }
    private void get_Plant_DayWise_InventaryDetails(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            DateTime AssignDate = VehicleDBMgr.GetTime(vdbmngr.conn);
            string frmdate = context.Request["fromdate"];
            DateTime fromdate = Convert.ToDateTime(frmdate);
            string to_date = context.Request["todate"];
            DateTime todate = Convert.ToDateTime(to_date);
            string branchid = context.Request["Branchid"].ToString();
            //string invsno = context.Request["Invsno"].ToString();


            string[] arr = branchid.Split('_');
            string t1 = arr.Length.ToString();
            string inventarysno = "";
            inventarysno = arr[0];
            branchid = arr[1];

            //cmd = new MySqlCommand("SELECT  triproutes.Tripdata_sno, SUM(tripinvdata.Qty) AS DispatchQty, SUM(tripinvdata.Remaining) AS ReceivedQty, invmaster.tempinvname AS InvName, invmaster.sno AS InvSno, dispatch.Branch_Id FROM  tripdata INNER JOIN triproutes ON tripdata.Sno = triproutes.Tripdata_sno INNER JOIN dispatch ON triproutes.RouteID = dispatch.sno INNER JOIN tripinvdata ON tripdata.Sno = tripinvdata.Tripdata_sno INNER JOIN invmaster ON tripinvdata.invid = invmaster.sno WHERE (tripdata.I_Date BETWEEN @d1 AND @d2) AND (dispatch.Branch_Id = @branchid) GROUP BY invmaster.sno");
            ////cmd = new MySqlCommand("SELECT    dispatch.sno, branchdata.BranchName, dispatch.Branch_Id, dispatch.BranchID, SUM(tripinvdata.Qty) AS IssuedQty, SUM(tripinvdata.Remaining) AS ReceivedQty,dispatch.CompanyId, invmaster.InvName, invmaster.sno AS InvSno FROM  dispatch INNER JOIN branchdata ON dispatch.Branch_Id = branchdata.sno INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN (SELECT  Sno, I_Date FROM   tripdata WHERE  (AssignDate BETWEEN @d1 AND @d2)) tripdat ON triproutes.Tripdata_sno = tripdat.Sno INNER JOIN tripinvdata ON tripdat.Sno = tripinvdata.Tripdata_sno INNER JOIN invmaster ON invmaster.sno = tripinvdata.invid WHERE (dispatch.Branch_Id = @branchid) GROUP BY dispatch.Branch_Id, invmaster.sno");
            //cmd.Parameters.AddWithValue("@d1", GetLowDate(fromdate).AddDays(-1));
            //cmd.Parameters.AddWithValue("@d2", GetHighDate(todate).AddDays(-1));
            //cmd.Parameters.AddWithValue("@branchid", branchid);
            //DataTable routes = vdbmngr.SelectQuery(cmd).Tables[0];
            List<PlantInventaryDetails> plant_inventary_List = new List<PlantInventaryDetails>();
            //foreach (DataRow dr in routes.Rows)
            //{
            //    PlantInventaryDetails obj1 = new PlantInventaryDetails();
            //    obj1.BranchID = "" + dr["InvSno"].ToString() + "_" + dr["Branch_Id"].ToString() + "";// dr["Branch_Id"].ToString();
            //    obj1.BranchName = dr["BranchName"].ToString();
            //    obj1.InvName = dr["InvName"].ToString();
            //    obj1.InvSno = dr["InvSno"].ToString();
            //    obj1.IssuedQty = dr["DispatchQty"].ToString();
            //    obj1.ReceivedQty = dr["ReceivedQty"].ToString();
            //    plant_inventary_List.Add(obj1);
            //}
            //string response = GetJson(plant_inventary_List);
            //context.Response.Write(response);

            cmd = new MySqlCommand("SELECT   inventarytransactions.sno, inventarytransactions.invsno, inventarytransactions.openinginv, inventarytransactions.isuue_invqty, inventarytransactions.receive_invqty, inventarytransactions.closing_invqty,inventarytransactions.doe, inventarytransactions.closing_date, inventarytransactions.branchid, invmaster.InvName FROM inventarytransactions INNER JOIN invmaster ON inventarytransactions.invsno = invmaster.sno WHERE (inventarytransactions.branchid = @branchid) AND (inventarytransactions.closing_date BETWEEN @d1 AND @d2) AND (inventarytransactions.invsno=@invsno) order by inventarytransactions.invsno");
            cmd.Parameters.AddWithValue("@d1", GetLowDate(fromdate));
            cmd.Parameters.AddWithValue("@d2", GetHighDate(todate));
            cmd.Parameters.AddWithValue("@branchid", branchid);
            cmd.Parameters.AddWithValue("@invsno", inventarysno);
            DataTable dtinvopp = vdbmngr.SelectQuery(cmd).Tables[0];


            foreach (DataRow drdaycoll in dtinvopp.Rows)
            {
                PlantInventaryDetails obj1 = new PlantInventaryDetails();
                obj1.BranchID = "" + drdaycoll["InvSno"].ToString() + "_" + drdaycoll["branchid"].ToString() + "";// dr["Branch_Id"].ToString();
                //obj1.BranchName = dr["BranchName"].ToString();
                obj1.InvName = drdaycoll["InvName"].ToString();
                obj1.InvSno = drdaycoll["InvSno"].ToString();
                obj1.IssuedQty = drdaycoll["isuue_invqty"].ToString();
                obj1.ReceivedQty = drdaycoll["receive_invqty"].ToString();
                obj1.opening = drdaycoll["openinginv"].ToString();
                obj1.closing = drdaycoll["closing_invqty"].ToString();
                DateTime cdate = Convert.ToDateTime(drdaycoll["closing_date"].ToString());
                obj1.closingdate = cdate.ToString("dd/MM/yyyy");
                plant_inventary_List.Add(obj1);
            }
            string response = GetJson(plant_inventary_List);
            context.Response.Write(response);
        }
        catch
        {
        }
    }
    private void get_Branch_Wise_InventaryDetails(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            DateTime AssignDate = VehicleDBMgr.GetTime(vdbmngr.conn);
            string frmdate = context.Request["fromdate"];
            DateTime fromdate = Convert.ToDateTime(frmdate);
            string branchid = context.Request["Branchid"].ToString();

            string[] arr = branchid.Split('_');
            string t1 = arr.Length.ToString();
            string inventarysno = "";
            inventarysno = arr[0];
            branchid = arr[1];
            cmd = new MySqlCommand("SELECT dispatch.DispName, dispatch.sno, dispatch.BranchID, tripdata.I_Date FROM dispatch INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno WHERE (dispatch.Branch_id = @BranchID) AND (tripdata.I_Date BETWEEN @d1 AND @d2) GROUP BY dispatch.DispName");
            cmd.Parameters.AddWithValue("@BranchID", branchid);
            cmd.Parameters.AddWithValue("@d1", GetLowDate(fromdate.AddDays(-1)));
            cmd.Parameters.AddWithValue("@d2", GetHighDate(fromdate.AddDays(-1)));
            DataTable dtDispnames = vdbmngr.SelectQuery(cmd).Tables[0];
            cmd = new MySqlCommand("SELECT clotrans.BranchId, invmaster.InvName, invmaster.sno, closubtraninventory.StockQty FROM clotrans INNER JOIN closubtraninventory ON clotrans.Sno = closubtraninventory.RefNo INNER JOIN invmaster ON closubtraninventory.InvSno = invmaster.sno WHERE (clotrans.BranchId = @BranchID) AND (clotrans.IndDate BETWEEN @d1 AND @d2) GROUP BY invmaster.sno");
            cmd.Parameters.AddWithValue("@BranchID", branchid);
            cmd.Parameters.AddWithValue("@d1", GetLowDate(fromdate.AddDays(-1)));
            cmd.Parameters.AddWithValue("@d2", GetHighDate(fromdate.AddDays(-1)));
            DataTable dtClo = vdbmngr.SelectQuery(cmd).Tables[0];

            cmd = new MySqlCommand("SELECT  sno, InvName, Userdata_sno, flag, Qty,tempinvname FROM invmaster ");
            DataTable dtInventary = vdbmngr.SelectQuery(cmd).Tables[0];
            string InventaryName = "";
            foreach (DataRow drInventary in dtInventary.Select("sno='" + inventarysno + "'"))
            {
                InventaryName = drInventary["tempinvname"].ToString();
            }
            Report = new DataTable();
            Report.Columns.Add("Sno");
            Report.Columns.Add("Dispatch Name");
            Report.Columns.Add("Received " + InventaryName + "").DataType = typeof(double); ;
            Report.Columns.Add("Return " + InventaryName + "").DataType = typeof(double); ;
            Report.Columns.Add("Difference " + InventaryName + "").DataType = typeof(double); ;

            int i = 1;
            int cratesreceived = 0;
            int cratesreturned = 0;
            int can20received = 0;
            int can20returned = 0;
            int can40received = 0;
            int can40returned = 0;
            foreach (DataRow drSub in dtDispnames.Rows)
            {
                cmd = new MySqlCommand("SELECT    triproutes.Tripdata_sno, tripinvdata.Qty, tripinvdata.Remaining, invmaster.InvName, invmaster.sno FROM  tripdata INNER JOIN triproutes ON tripdata.Sno = triproutes.Tripdata_sno INNER JOIN dispatch ON triproutes.RouteID = dispatch.sno INNER JOIN tripinvdata ON tripdata.Sno = tripinvdata.Tripdata_sno INNER JOIN invmaster ON tripinvdata.invid = invmaster.sno WHERE  (tripdata.I_Date BETWEEN @d1 AND @d2) AND (dispatch.sno = @dispatchSno) AND (invmaster.sno = @inventarysno)");
                cmd.Parameters.AddWithValue("@dispatchSno", drSub["sno"].ToString());
                cmd.Parameters.AddWithValue("@d1", GetLowDate(fromdate.AddDays(-1)));
                cmd.Parameters.AddWithValue("@d2", GetHighDate(fromdate.AddDays(-1)));
                cmd.Parameters.AddWithValue("@inventarysno", inventarysno);
                DataTable DtTripSubData = vdbmngr.SelectQuery(cmd).Tables[0];
                string Disp = drSub["DispName"].ToString();
                string[] strName = Disp.Split('_');
                DataRow newSo = Report.NewRow();
                DataRow drinventry = Report.NewRow();
                drinventry["Sno"] = i;
                drinventry["Dispatch Name"] = Disp;
                int Ctotcan40ltr = 0;
                int Ctotcrates = 0;
                int Ctotcan20ltr = 0;
                int Dtotcrates = 0;
                int Dtotcan20ltr = 0;
                int Dtotcan40ltr = 0;
                foreach (DataRow drtripinv in DtTripSubData.Select("sno='" + inventarysno + "'"))
                {
                    int Dcrates = 0;
                    int.TryParse(drtripinv["Qty"].ToString(), out Dcrates);
                    Dtotcrates += Dcrates;
                    int Ccrates = 0;
                    int.TryParse(drtripinv["Remaining"].ToString(), out Ccrates);
                    Ctotcrates += Ccrates;
                }
                drinventry["Received " + InventaryName + ""] = Dtotcrates;
                drinventry["Return " + InventaryName + ""] = Ctotcrates;
                drinventry["Difference " + InventaryName + ""] = Dtotcrates - Ctotcrates;
                Report.Rows.Add(drinventry);
                i++;
                cratesreceived += Dtotcrates;
                cratesreturned += Ctotcrates;
                can20received += Dtotcan20ltr;
                can20returned += Ctotcan20ltr;
                can40received += Dtotcan40ltr;
                can40returned += Ctotcan40ltr;
            }
            DataRow totalinventory = Report.NewRow();
            totalinventory["Dispatch Name"] = "TOTAL";
            double val = 0.0;
            foreach (DataColumn dc in Report.Columns)
            {
                if (dc.DataType == typeof(Double))
                {
                    val = 0.0;
                    double.TryParse(Report.Compute("sum([" + dc.ToString() + "])", "[" + dc.ToString() + "]<>'0'").ToString(), out val);
                    totalinventory[dc.ToString()] = val;
                }
            }
            Report.Rows.Add(totalinventory);
            List<PlantInventaryDetails> plant_inventary_List = new List<PlantInventaryDetails>();
            foreach (DataRow dr in Report.Rows)
            {
                PlantInventaryDetails obj1 = new PlantInventaryDetails();
                obj1.BranchName = dr["Dispatch Name"].ToString();
                obj1.ReceivedCrates = dr["Received " + InventaryName + ""].ToString();
                obj1.ReturnCrates = dr["Return " + InventaryName + ""].ToString();
                obj1.DifferenceCrates = dr["Difference " + InventaryName + ""].ToString();
                obj1.InvSno = inventarysno.ToString(); ;
                obj1.InvName = InventaryName;//inventarysno.ToString(); ;
                plant_inventary_List.Add(obj1);
            }
            string response = GetJson(plant_inventary_List);
            context.Response.Write(response);
        }
        catch
        {
        }
    }
    private void btnPlant_InventarySaveClick(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            var js = new JavaScriptSerializer();
            DateTime ServerDateCurrentdate = VehicleDBMgr.GetTime(vdbmngr.conn);
            var title1 = context.Request.Params[1];
            ProductsName obj = js.Deserialize<ProductsName>(title1);
            string Branchid = obj.Branch_Id;
            DateTime fromdate = Convert.ToDateTime(obj.fromdate);
            ////foreach (PlantProducts o in obj.BrancProductList)
            ////{

            ////    cmd = new MySqlCommand("Update Inventory_monitor set Qty=Qty+@Qty,Indent_Date=@IndentDate where Inv_Sno=@Inv_Sno and  BranchID=@BranchID");
            ////    cmd.Parameters.AddWithValue("@Qty", o.Qty);
            ////    cmd.Parameters.AddWithValue("@Indent_Date", IndentDate);
            ////    cmd.Parameters.AddWithValue("@Inv_Sno", o.SNo);
            ////    cmd.Parameters.AddWithValue("@BranchID", context.Session["branch"].ToString());
            ////    cmd.Parameters.AddWithValue("@status", DispatchStatus);
            ////    if (vdbmngr.Update(cmd) == 0)
            ////    {
            ////        cmd = new MySqlCommand("insert into Inventory_monitor (Qty,Inv_Sno,BranchID,Indent_Date,status) values(@Qty,@Inv_Sno,@BranchID,@IndentDate,@status)");
            ////        cmd.Parameters.AddWithValue("@Qty", o.Qty);
            ////        cmd.Parameters.AddWithValue("@Inv_Sno", o.SNo);
            ////        cmd.Parameters.AddWithValue("@BranchID", context.Session["branch"].ToString());
            ////        cmd.Parameters.AddWithValue("@Indent_Date", IndentDate);
            ////        cmd.Parameters.AddWithValue("@status", DispatchStatus);
            ////        vdbmngr.insert(cmd);
            ////    }

            ////    cmd = new MySqlCommand("UPDATE branchproducts SET  product_sno = @product_sno, unitprice = @unitprice, sgst = @sgst, cgst = @cgst, igst = @igst, flag = @flag WHERE  (branch_sno = @branch_sno) AND (product_sno=@product_sno)");
            ////    cmd.Parameters.AddWithValue("@product_sno", o.Product_Id);
            ////    cmd.Parameters.AddWithValue("@unitprice", o.Rate);
            ////    cmd.Parameters.AddWithValue("@igst", o.igst);
            ////    cmd.Parameters.AddWithValue("@sgst", o.sgst);
            ////    cmd.Parameters.AddWithValue("@cgst", o.cgst);
            ////    cmd.Parameters.AddWithValue("@flag", "1");
            ////    cmd.Parameters.AddWithValue("@branch_sno", Branchid);
            ////    if (vdbmngr.Update(cmd) == 0)
            ////    {
            ////        cmd = new MySqlCommand("INSERT INTO branchproducts (product_sno, unitprice, sgst, cgst, igst, flag,branch_sno) VALUES (@product_sno, @unitprice, @sgst, @cgst, @igst, @flag, @branch_sno)");
            ////        cmd.Parameters.AddWithValue("@product_sno", o.Product_Id);
            ////        cmd.Parameters.AddWithValue("@unitprice", o.Rate);
            ////        cmd.Parameters.AddWithValue("@igst", o.igst);
            ////        cmd.Parameters.AddWithValue("@sgst", o.sgst);
            ////        cmd.Parameters.AddWithValue("@cgst", o.cgst);
            ////        cmd.Parameters.AddWithValue("@flag", "1");
            ////        cmd.Parameters.AddWithValue("@branch_sno", Branchid);
            ////        vdbmngr.insert(cmd);
            ////    }
            ////}
            tripid = "";
            foreach (PlantProducts o in obj.BrancProductList)
            {
                if (o.SNo != null)
                {
                    cmd = new MySqlCommand("update tripdata set status=@status ,Cdate=@Cdate where Sno=@Sno");
                    cmd.Parameters.AddWithValue("@status", 'V');
                    int TripID = 0;
                    int.TryParse(o.TripID, out TripID);
                    cmd.Parameters.AddWithValue("@Sno", TripID);
                    cmd.Parameters.AddWithValue("@Cdate", ServerDateCurrentdate);
                    vdbmngr.Update(cmd);
                    DataTable dtInventory = new DataTable();
                    cmd = new MySqlCommand("SELECT tripdata.Sno, dispatch.DispName, dispatch.BranchID FROM dispatch INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno WHERE (tripdata.Sno = @tripid)");
                    cmd.Parameters.AddWithValue("@tripid", o.TripID);
                    DataTable dtsobrnchid = vdbmngr.SelectQuery(cmd).Tables[0];
                    string sobrnchid = dtsobrnchid.Rows[0]["BranchID"].ToString();
                    cmd = new MySqlCommand("Update invtransactions12 set TransType=@TransType,FromTran=@FromTran,VarifyStatus=@VarifyStatus,VQty=@VQty,VEmpID=@VEmpID where B_Inv_Sno=@B_Inv_Sno and  ToTran=@tripId and VarifyStatus=@PStatus");
                    cmd.Parameters.AddWithValue("@TransType", "3");
                    cmd.Parameters.AddWithValue("@FromTran", sobrnchid);
                    cmd.Parameters.AddWithValue("@B_Inv_Sno", o.InventarySno);
                    cmd.Parameters.AddWithValue("@VarifyStatus", "V");
                    cmd.Parameters.AddWithValue("@PStatus", "P");
                    cmd.Parameters.AddWithValue("@VQty", o.ReceivedQty);
                    cmd.Parameters.AddWithValue("@tripId", o.TripID);
                    cmd.Parameters.AddWithValue("@VEmpID", context.Session["UserSno"].ToString());
                    tripid = o.TripID;
                    if (vdbmngr.Update(cmd) == 0)
                    {
                        cmd = new MySqlCommand("insert into invtransactions12 (TransType,FromTran,ToTran,Qty,VarifyStatus,VQty,VEmpID,B_inv_sno) values (@TransType,@FromTran,@ToTran,@Qty,@VarifyStatus,@VQty,@VEmpID,@B_inv_sno)");
                        cmd.Parameters.AddWithValue("@TransType", "3");
                        cmd.Parameters.AddWithValue("@FromTran", sobrnchid);
                        cmd.Parameters.AddWithValue("@ToTran", o.TripID);
                        cmd.Parameters.AddWithValue("@Qty", "0");
                        cmd.Parameters.AddWithValue("@VarifyStatus", "V");
                        cmd.Parameters.AddWithValue("@VQty", o.ReceivedQty);
                        cmd.Parameters.AddWithValue("@VEmpID", context.Session["UserSno"].ToString());
                        cmd.Parameters.AddWithValue("@B_inv_sno", o.InventarySno);
                        vdbmngr.insert(cmd);
                    }
                    cmd = new MySqlCommand("Update Inventory_monitor set Qty=Qty+@Qty,Indent_Date=@IndentDate where Inv_Sno=@Inv_Sno and  BranchID=@BranchID");
                    cmd.Parameters.AddWithValue("@Qty", o.ReceivedQty);
                    cmd.Parameters.AddWithValue("@IndentDate", fromdate);
                    cmd.Parameters.AddWithValue("@Inv_Sno", o.InventarySno);
                    cmd.Parameters.AddWithValue("@BranchID", context.Session["branch"].ToString());
                    if (vdbmngr.Update(cmd) == 0)
                    {
                        cmd = new MySqlCommand("insert into Inventory_monitor (Qty,Inv_Sno,BranchID,Indent_Date,status) values(@Qty,@Inv_Sno,@BranchID,@IndentDate,@status)");
                        cmd.Parameters.AddWithValue("@Qty", o.ReceivedQty);
                        cmd.Parameters.AddWithValue("@Inv_Sno", o.InventarySno);
                        cmd.Parameters.AddWithValue("@BranchID", context.Session["branch"].ToString());
                        cmd.Parameters.AddWithValue("@IndentDate", fromdate);
                        vdbmngr.insert(cmd);
                    }
                }
            }
            string msg = "Data Updated Successfully";
            string response = GetJson(msg);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string msg = ex.Message;
            string response = GetJson(msg);
            context.Response.Write(response);
        }
    }
    private void SaveFormName(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            //vdbmngr = new v();
            string FormName = context.Request["FormName"];
            DateTime ServerDateCurrentdate = VehicleDBMgr.GetTime(vdbmngr.conn);
            string btn_save = context.Request["btnVal"];
            cmd = new MySqlCommand("insert into formdetails (formname,doe,status) values (@formname,@doe,@status)");
            cmd.Parameters.AddWithValue("@formname", FormName);
            cmd.Parameters.AddWithValue("@doe", ServerDateCurrentdate);
            cmd.Parameters.AddWithValue("@status", "1");
            vdbmngr.insert(cmd);
            string msg = FormName;
            string Response = GetJson(msg);
            context.Response.Write(Response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }
    private void GetSalevlue(HttpContext context)
    {
        try
        {
            //
            vdbmngr = new VehicleDBMgr();
            DataTable Report = new DataTable();
            //Report.Columns.Add("CategoeryName");
            //Report.Columns.Add("ProductName");
            //Report.Columns.Add("ProductId");
            //Report.Columns.Add("Deliverqty");
            //Report.Columns.Add("AvgQty");
            //Report.Columns.Add("SaleValue");
            //Report.Columns.Add("ReturnQty");
            //Report.Columns.Add("ShortQty");
            //Report.Columns.Add("IndentDate");
            //Report.Columns.Add("Month");
            // string IndentType = context.Request["IndentType"];

            //DateTime ServerDateCurrentdate = VehicleDBMgr.GetTime(vdbmngr.conn);

            //DateTime FromDate = ServerDateCurrentdate.AddMonths(-1);
            //DateTime Todate = ServerDateCurrentdate;
            //DateTime From_Date = Convert.ToDateTime(FromDate).AddDays(2);
            //DateTime Enddate = Convert.ToDateTime(Todate);

            //int Ndays = (Enddate - From_Date).Days;
            //int countdays = Ndays - 4;
            //string type = "";
            //if (countdays <= 7)
            //{
            //    type = "Daily";
            //}
            //else if (countdays <= 30 || countdays <= 8)
            //{
            //    type = "Weekly";
            //}
            //else
            //{
            //    type = "Monthly";
            //}

            //string branchid = "1";
            //string IndentType = "Indent1";
            //DataTable dtsalevalue = new DataTable();
            //DataTable dtlekages = new DataTable();


            DateTime ServerDateCurrentdate = VehicleDBMgr.GetTime(vdbmngr.conn);
            DateTime Enddate = new DateTime(ServerDateCurrentdate.Year, ServerDateCurrentdate.Month + 1, 1).AddDays(-1);
            //string mymonth = context.Request["month"].ToString();
            //string myyear = context.Request["year"].ToString();
            //if (mymonth == "")
            //{
            //}
            //else
            //{
            //    if (mymonth == "12")
            //    {
            //        string dta = mymonth + "/" + "01" + "/" + myyear;
            //        ServerDateCurrentdate = Convert.ToDateTime(dta);
            //        Enddate = new DateTime(ServerDateCurrentdate.Year, ServerDateCurrentdate.Month, 1).AddDays(30);
            //    }
            //}
            DateTime firstMonthDay = new DateTime(ServerDateCurrentdate.Year, ServerDateCurrentdate.Month, 1);
            DateTime firstMonthMonday = firstMonthDay.AddDays((DayOfWeek.Monday + 7 - firstMonthDay.DayOfWeek) % 7);
            if (firstMonthMonday > ServerDateCurrentdate)
            {
                firstMonthDay = firstMonthDay.AddMonths(-1);
                firstMonthMonday = firstMonthDay.AddDays((DayOfWeek.Monday + 7 - firstMonthDay.DayOfWeek) % 7);
            }
            int count = (ServerDateCurrentdate - firstMonthMonday).Days / 7 + 1;

            DateTime From_Date = new DateTime(ServerDateCurrentdate.Year, ServerDateCurrentdate.Month, 1);

            List<weekcls> weekslist = new List<weekcls>();
            List<SalelDetails> SalelDetailslist1 = new List<SalelDetails>();
            List<WeekDetailsClass> totalweekslist = new List<WeekDetailsClass>();
            DataTable distinctproducts = new DataTable();
            DataTable distictbranches = new DataTable();

            string strfromdate = From_Date.ToString();
            DateTime fromDate = DateTime.Parse(strfromdate.Trim());
            var d_fromdate = fromDate;
            CultureInfo cul_from = CultureInfo.CurrentCulture;
            int from_weekNum = cul_from.Calendar.GetWeekOfYear(
                d_fromdate,
                CalendarWeekRule.FirstDay,
                DayOfWeek.Monday);

            string strtodate = Enddate.ToString();
            DateTime toDate = DateTime.Parse(strtodate.Trim());
            var d_toDate = toDate;
            CultureInfo cul_to = CultureInfo.CurrentCulture;
            int to_weekNum = cul_to.Calendar.GetWeekOfYear(
                d_toDate,
                CalendarWeekRule.FirstDay,
                DayOfWeek.Monday);
            int diffweeks = to_weekNum - from_weekNum;
            DateTime firstmonth = new DateTime();
            DateTime lastmonth = new DateTime();
            Enddate = Enddate.AddMonths(1);
            TimeSpan dateSpan = Enddate.Subtract(From_Date);
            int years = (dateSpan.Days / 365);
            int months = ((dateSpan.Days % 365) / 31) + (years * 12);
            if (months != 0)
            {
                ArrayList al = new ArrayList();
                DataTable Sorttable = new DataTable();
                Report.Columns.Add("Sno");
                Report.Columns.Add("BranchId");
                Report.Columns.Add("BranchName");

                Sorttable.Columns.Add("Sno");
                Sorttable.Columns.Add("BranchId");
                Sorttable.Columns.Add("BranchName");
                int newweek = from_weekNum;
                for (int j = 0; j < diffweeks; j++)
                {
                    firstmonth = GetLowDate(From_Date);
                    lastmonth = GetHighDate(firstmonth.AddDays(7));
                    DateTime dtF = firstmonth.AddDays(-1);
                    TimeSpan dateSpan2 = lastmonth.Subtract(dtF);
                    int NoOfdays = dateSpan2.Days;
                    string ChangedTime1 = firstmonth.ToString("dd/MMM");
                    string ChangedTime2 = lastmonth.ToString("dd/MMM");
                    string week = "W" + newweek + "_" + ChangedTime1 + "_" + ChangedTime2 + "";
                    al.Add(week);
                    Report.Columns.Add(week);
                    Sorttable.Columns.Add(week);
                    weekcls obj1 = new weekcls();
                    obj1.week = week;
                    weekslist.Add(obj1);
                    newweek = newweek + 1;
                    From_Date = From_Date.AddDays(7);
                }
                for (int m = 0; m < al.Count; m++)
                {
                    string weekvalue = al[m].ToString();
                    DateTime fromdate = ServerDateCurrentdate;
                    string frmdate = fromdate.ToString("MM/dd/yyyy");
                    string[] str = frmdate.Split('/');
                    string year = str[2];
                    string[] logstr = weekvalue.Split('_');
                    string date = logstr[0];
                    string month = logstr[1];
                    string cmnth = logstr[2];
                    string fdate = month + "/" + year;
                    string todate = cmnth + "/" + year;
                    DateTime dtfrom = Convert.ToDateTime(fdate);
                    DateTime dtto = Convert.ToDateTime(todate);
                    DataTable dtAll = new DataTable();
                    DateTime dtF = firstmonth;
                    DataTable tempbranchindentsale = new DataTable();
                    DataTable dtDispatchesbranches = new DataTable();
                    cmd = new MySqlCommand("SELECT  branchmappingtable.SubBranch, branchmappingtable.SuperBranch, branchmappingtable.SubBranch AS Expr1, branchdata.BranchName,branchdata.SalesType FROM  branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno WHERE  (branchmappingtable.SuperBranch = @Branchid) GROUP BY branchmappingtable.SubBranch ORDER BY companyname, branchmappingtable.SubBranch");
                    cmd.Parameters.AddWithValue("@Branchid", "8009");
                    DataTable BtGroupBranches = vdbmngr.SelectQuery(cmd).Tables[0];

                    //cmd = new MySqlCommand("SELECT    TripInfo.Sno, ProductInfo.Categoryname, ROUND(SUM(ProductInfo.Qty) ) AS dispatchqty, TripInfo.I_Date, ProductInfo.CatSno, TripInfo.BranchName, TripInfo.BranchID, TripInfo.Branch_Id, TripInfo.GroupId,TripInfo.CompanyId FROM (SELECT tripdata.Sno, tripdata.I_Date, branchdata_1.BranchName, dispatch.BranchID, dispatch.Branch_Id, dispatch.GroupId, dispatch.CompanyId FROM  branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE (dispatch.GroupId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT Categoryname, Sno, Qty, CatSno FROM (SELECT  products_category.sno AS CatSno, products_category.Categoryname, tripdata_1.Sno, tripsubdata.Qty FROM tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno INNER JOIN productsdata ON tripsubdata.ProductId = productsdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno WHERE (tripdata_1.AssignDate BETWEEN @d1 AND @d2)) TripSubInfo) ProductInfo ON TripInfo.Sno = ProductInfo.Sno GROUP BY TripInfo.Branch_Id ORDER BY TripInfo.CompanyId");
                    //// cmd = new MySqlCommand("SELECT   dispatch.sno, branchdata.BranchName, dispatch.Branch_Id, dispatch.BranchID, ROUND(SUM(tripsubdata.Qty),2) AS dispatchqty FROM dispatch INNER JOIN branchdata ON dispatch.Branch_Id = branchdata.sno INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN (SELECT  Sno, I_Date FROM tripdata WHERE  (AssignDate BETWEEN @d1 AND @d2)) tripdat ON triproutes.Tripdata_sno = tripdat.Sno INNER JOIN tripsubdata ON tripdat.Sno = tripsubdata.Tripdata_sno WHERE (dispatch.GroupId  = @branchid)  GROUP BY dispatch.Branch_Id");
                    //cmd.Parameters.AddWithValue("@branch", BranchID);
                    //cmd.Parameters.AddWithValue("@d1", GetLowDate(dtfrom));
                    //cmd.Parameters.AddWithValue("@d2", GetHighDate(dtto));
                    //dtDispatchesbranches = vdbmngr.SelectQuery(cmd).Tables[0];
                    foreach (DataRow drgrbranch in BtGroupBranches.Rows)
                    {
                        if (drgrbranch["SubBranch"].ToString() == "172")
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS salevalue, branchmappingtable.SuperBranch FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo  WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch NOT IN (538, 1801, 3625)) GROUP BY branchmappingtable.SuperBranch");
                            //cmd = new MySqlCommand("SELECT  SubBranch, ROUND(SUM(DeliveryQty) ) AS DeliveryQty, ROUND(SUM(DeliveryQty * UnitCost) ) AS salevalue, SuperBranch FROM  (SELECT  t1.SubBranch, t1.SuperBranch, t2.DeliveryQty, t2.unitQty, t2.UnitCost FROM (SELECT branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch FROM  branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch WHERE (branchmappingtable_1.SuperBranch = @branchid) AND (branchmappingtable_1.SubBranch NOT IN(2,2749,2948,538,3625)) GROUP BY branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch) t1 LEFT OUTER JOIN (SELECT  indents_subtable.DeliveryQty, indents_subtable.unitQty, indents_subtable.UnitCost, branchmappingtable_2.SuperBranch, branchmappingtable_2.SubBranch FROM   branchmappingtable branchmappingtable_2 INNER JOIN (SELECT  IndentNo, Branch_id, I_date FROM   indents WHERE  (I_date BETWEEN @d1 AND @d2)) ind ON branchmappingtable_2.SubBranch = ind.Branch_id INNER JOIN indents_subtable ON ind.IndentNo = indents_subtable.IndentNo) t2 ON t2.SuperBranch = t1.SubBranch) derivedtbl_1 GROUP BY SuperBranch");
                            cmd.Parameters.AddWithValue("@BranchID", drgrbranch["SubBranch"].ToString());
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(dtfrom).AddDays(-1));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(dtto).AddDays(-1));
                            tempbranchindentsale = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else if (drgrbranch["SubBranch"].ToString() == "3625")
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS salevalue, branchmappingtable.SuperBranch FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo  WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch NOT IN (174,527,306,285,271,538,2749,282,172,2948,3928)) GROUP BY branchmappingtable.SuperBranch");
                            //cmd = new MySqlCommand("SELECT  SubBranch, ROUND(SUM(DeliveryQty) ) AS DeliveryQty,  ROUND(SUM(DeliveryQty * UnitCost) ) AS salevalue, SuperBranch FROM  (SELECT  t1.SubBranch, t1.SuperBranch, t2.DeliveryQty, t2.unitQty, t2.UnitCost FROM (SELECT branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch FROM  branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch WHERE (branchmappingtable_1.SuperBranch = @branchid) AND (branchmappingtable_1.SubBranch IN(4609,3625)) GROUP BY branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch) t1 LEFT OUTER JOIN (SELECT  indents_subtable.DeliveryQty, indents_subtable.unitQty, indents_subtable.UnitCost, branchmappingtable_2.SuperBranch, branchmappingtable_2.SubBranch FROM   branchmappingtable branchmappingtable_2 INNER JOIN (SELECT  IndentNo, Branch_id, I_date FROM   indents WHERE  (I_date BETWEEN @d1 AND @d2)) ind ON branchmappingtable_2.SubBranch = ind.Branch_id INNER JOIN indents_subtable ON ind.IndentNo = indents_subtable.IndentNo) t2 ON t2.SuperBranch = t1.SubBranch) derivedtbl_1 GROUP BY SuperBranch");
                            cmd.Parameters.AddWithValue("@BranchID", drgrbranch["SubBranch"].ToString());
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(dtfrom).AddDays(-1));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(dtto).AddDays(-1));
                            tempbranchindentsale = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else if (drgrbranch["SubBranch"].ToString() == "1801")
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS salevalue, branchmappingtable.SuperBranch FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo  WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) GROUP BY branchmappingtable.SuperBranch");

                            //cmd = new MySqlCommand("SELECT  SubBranch, ROUND(SUM(DeliveryQty) ) AS DeliveryQty,  ROUND(SUM(DeliveryQty * UnitCost) ) AS salevalue, SuperBranch FROM  (SELECT  t1.SubBranch, t1.SuperBranch, t2.DeliveryQty, t2.unitQty, t2.UnitCost FROM (SELECT branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch FROM  branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch WHERE (branchmappingtable_1.SuperBranch = @branchid) GROUP BY branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch) t1 LEFT OUTER JOIN (SELECT  indents_subtable.DeliveryQty, indents_subtable.unitQty, indents_subtable.UnitCost, branchmappingtable_2.SuperBranch, branchmappingtable_2.SubBranch FROM   branchmappingtable branchmappingtable_2 INNER JOIN (SELECT  IndentNo, Branch_id, I_date FROM   indents WHERE  (I_date BETWEEN @d1 AND @d2)) ind ON branchmappingtable_2.SubBranch = ind.Branch_id INNER JOIN indents_subtable ON ind.IndentNo = indents_subtable.IndentNo) t2 ON t2.SuperBranch = t1.SubBranch) derivedtbl_1 GROUP BY SuperBranch");
                            cmd.Parameters.AddWithValue("@BranchID", drgrbranch["SubBranch"].ToString());
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(dtfrom).AddDays(-1));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(dtto).AddDays(-1));
                            tempbranchindentsale = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        else if (drgrbranch["SubBranch"].ToString() == "158")
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS salevalue, branchmappingtable.SuperBranch FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch NOT IN (159,4626)) GROUP BY branchmappingtable.SuperBranch");
                            //cmd = new MySqlCommand("SELECT  SubBranch, ROUND(SUM(DeliveryQty) ) AS DeliveryQty,  ROUND(SUM(DeliveryQty * UnitCost) ) AS salevalue, SuperBranch FROM  (SELECT  t1.SubBranch, t1.SuperBranch, t2.DeliveryQty, t2.unitQty, t2.UnitCost FROM (SELECT branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch FROM  branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch WHERE (branchmappingtable_1.SuperBranch = @branchid) GROUP BY branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch) t1 LEFT OUTER JOIN (SELECT  indents_subtable.DeliveryQty, indents_subtable.unitQty, indents_subtable.UnitCost, branchmappingtable_2.SuperBranch, branchmappingtable_2.SubBranch FROM   branchmappingtable branchmappingtable_2 INNER JOIN (SELECT  IndentNo, Branch_id, I_date FROM   indents WHERE  (I_date BETWEEN @d1 AND @d2)) ind ON branchmappingtable_2.SubBranch = ind.Branch_id INNER JOIN indents_subtable ON ind.IndentNo = indents_subtable.IndentNo) t2 ON t2.SuperBranch = t1.SubBranch) derivedtbl_1 GROUP BY SuperBranch");
                            cmd.Parameters.AddWithValue("@BranchID", drgrbranch["SubBranch"].ToString());
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(dtfrom).AddDays(-1));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(dtto).AddDays(-1));
                            tempbranchindentsale = vdbmngr.SelectQuery(cmd).Tables[0];

                            cmd = new MySqlCommand("SELECT  ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty)) AS salevalue, indents_subtable.UnitCost, branchmappingtable.SuperBranch FROM (SELECT  IndentNo, Branch_id, I_date, Status, IndentType FROM  indents WHERE (I_date BETWEEN @d1 AND @d2) AND (Status <> 'D')) indent INNER JOIN branchdata ON indent.Branch_id = branchdata.sno INNER JOIN indents_subtable ON indent.IndentNo = indents_subtable.IndentNo INNER JOIN branchmappingtable ON branchdata.sno = branchmappingtable.SubBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable.SuperBranch = branchdata_1.sno WHERE (branchmappingtable.SuperBranch = @BranchID) AND (indents_subtable.DeliveryQty <> 0) GROUP BY branchmappingtable.SuperBranch ORDER BY branchdata.BranchName");
                            //cmd = new MySqlCommand("SELECT  SubBranch, ROUND(SUM(DeliveryQty) ) AS DeliveryQty,  ROUND(SUM(DeliveryQty * UnitCost) ) AS salevalue, SuperBranch FROM  (SELECT  t1.SubBranch, t1.SuperBranch, t2.DeliveryQty, t2.unitQty, t2.UnitCost FROM (SELECT branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch FROM  branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch WHERE (branchmappingtable_1.SuperBranch = @branchid) GROUP BY branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch) t1 LEFT OUTER JOIN (SELECT  indents_subtable.DeliveryQty, indents_subtable.unitQty, indents_subtable.UnitCost, branchmappingtable_2.SuperBranch, branchmappingtable_2.SubBranch FROM   branchmappingtable branchmappingtable_2 INNER JOIN (SELECT  IndentNo, Branch_id, I_date FROM   indents WHERE  (I_date BETWEEN @d1 AND @d2)) ind ON branchmappingtable_2.SubBranch = ind.Branch_id INNER JOIN indents_subtable ON ind.IndentNo = indents_subtable.IndentNo) t2 ON t2.SuperBranch = t1.SubBranch) derivedtbl_1 GROUP BY SuperBranch");
                            cmd.Parameters.AddWithValue("@BranchID", drgrbranch["SubBranch"].ToString());
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(dtfrom).AddDays(-1));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(dtto).AddDays(-1));
                            DataTable temptable = vdbmngr.SelectQuery(cmd).Tables[0];
                            tempbranchindentsale.Merge(temptable);
                        }
                        else
                        {
                            cmd = new MySqlCommand("SELECT   branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS salevalue, branchmappingtable.SuperBranch FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) GROUP BY branchmappingtable.SuperBranch");
                            //cmd = new MySqlCommand("SELECT  SubBranch, ROUND(SUM(DeliveryQty) ) AS DeliveryQty,  ROUND(SUM(DeliveryQty * UnitCost) ) AS salevalue, SuperBranch FROM  (SELECT  t1.SubBranch, t1.SuperBranch, t2.DeliveryQty, t2.unitQty, t2.UnitCost FROM (SELECT branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch FROM  branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch WHERE (branchmappingtable_1.SuperBranch = @branchid) GROUP BY branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch) t1 LEFT OUTER JOIN (SELECT  indents_subtable.DeliveryQty, indents_subtable.unitQty, indents_subtable.UnitCost, branchmappingtable_2.SuperBranch, branchmappingtable_2.SubBranch FROM   branchmappingtable branchmappingtable_2 INNER JOIN (SELECT  IndentNo, Branch_id, I_date FROM   indents WHERE  (I_date BETWEEN @d1 AND @d2)) ind ON branchmappingtable_2.SubBranch = ind.Branch_id INNER JOIN indents_subtable ON ind.IndentNo = indents_subtable.IndentNo) t2 ON t2.SuperBranch = t1.SubBranch) derivedtbl_1 GROUP BY SuperBranch");
                            cmd.Parameters.AddWithValue("@BranchID", drgrbranch["SubBranch"].ToString());
                            cmd.Parameters.AddWithValue("@d1", GetLowDate(dtfrom).AddDays(-1));
                            cmd.Parameters.AddWithValue("@d2", GetHighDate(dtto).AddDays(-1));
                            tempbranchindentsale = vdbmngr.SelectQuery(cmd).Tables[0];
                        }
                        dtAll.Merge(tempbranchindentsale);
                    }
                    if (dtAll.Rows.Count > 0)
                    {
                        DataView view = new DataView(dtAll);
                        distinctproducts = view.ToTable(true, "SuperBranch");
                    }
                    DataTable Temptable = new DataTable();
                    Temptable.Columns.Add("Sno");
                    Temptable.Columns.Add("SuperBranch");
                    Temptable.Columns.Add("BranchName");
                    Temptable.Columns.Add("DeliveryQty");
                    Temptable.Columns.Add("salevalue");
                    foreach (DataRow drr in distinctproducts.Rows)
                    {
                        DataRow tempnewrow = Temptable.NewRow();
                        double temptotsalevalue = 0, totalsale = 0;
                        tempnewrow["SuperBranch"] = drr["SuperBranch"].ToString();
                        foreach (DataRow drbranchname in BtGroupBranches.Select("SubBranch='" + drr["SuperBranch"].ToString() + "'"))
                        {
                            tempnewrow["BranchName"] = drbranchname["BranchName"].ToString();
                            foreach (DataRow drindent in dtAll.Select("SuperBranch='" + drr["SuperBranch"].ToString() + "'"))
                            {
                                double tempqty = 0;
                                double.TryParse(drindent["DeliveryQty"].ToString(), out tempqty);
                                double tempsalevalue = 0;
                                double.TryParse(drindent["salevalue"].ToString(), out tempsalevalue);
                                temptotsalevalue += tempsalevalue;
                                totalsale += tempqty;
                            }
                            tempnewrow["DeliveryQty"] = totalsale;
                            tempnewrow["salevalue"] = temptotsalevalue;
                            Temptable.Rows.Add(tempnewrow);
                        }
                    }
                    if (Temptable.Rows.Count > 0)
                    {
                        DataView view1 = new DataView(Temptable);
                        distictbranches = view1.ToTable(true, "SuperBranch", "BranchName");
                    }

                    if (distictbranches.Rows.Count > 0)
                    {
                        int k = 1;
                        foreach (DataRow dr in distictbranches.Rows)
                        {
                            DataRow newrow = Report.NewRow();
                            newrow["Sno"] = k++.ToString();
                            newrow["BranchName"] = dr["BranchName"].ToString();
                            string parlorname = dr["BranchName"].ToString();
                            string branchid = dr["SuperBranch"].ToString();
                            foreach (DataRow drDriver in Temptable.Rows)
                            {

                                if (branchid == drDriver["SuperBranch"].ToString())
                                {
                                    string totqty = "";
                                    string DelivaryQty = drDriver["DeliveryQty"].ToString();
                                    if (DelivaryQty != "")
                                    {
                                        double tqty = Convert.ToDouble(DelivaryQty);
                                        tqty = Math.Round(tqty, 0);
                                        newrow[weekvalue] = tqty;
                                        totqty = tqty.ToString();
                                    }
                                    else
                                    {
                                        newrow[weekvalue] = "0";
                                    }
                                    string bid = drDriver["SuperBranch"].ToString();
                                    newrow["BranchId"] = drDriver["SuperBranch"].ToString();
                                    Report.Rows.Add(newrow);
                                }

                            }

                        }
                    }
                    newweek = newweek + 1;
                    From_Date = From_Date.AddDays(7);

                }

                string week1 = "";
                string week2 = "";
                string week3 = "";
                string week4 = "";
                string week5 = "";
                if (Report.Rows.Count > 0)
                {

                    int a = 1;
                    foreach (DataRow drb in distictbranches.Rows)
                    {
                        string branchid = drb["SuperBranch"].ToString();
                        DataRow newrow = Sorttable.NewRow();
                        string parlorname = drb["BranchName"].ToString();
                        string columnname4 = "";
                        string columnname5 = "";
                        string columnname6 = "";
                        string columnname7 = "";
                        string columnname8 = "";
                        int columncount = Report.Columns.Count;
                        if (columncount > 7)
                        {
                            columnname4 = Report.Columns[3].ToString();
                            columnname5 = Report.Columns[4].ToString();
                            columnname6 = Report.Columns[5].ToString();
                            columnname7 = Report.Columns[6].ToString();
                            columnname8 = Report.Columns[7].ToString();
                            week1 = columnname4;
                            week2 = columnname5;
                            week3 = columnname6;
                            week4 = columnname7;
                            week5 = columnname8;
                        }
                        else
                        {
                            columnname4 = Report.Columns[3].ToString();
                            columnname5 = Report.Columns[4].ToString();
                            columnname6 = Report.Columns[5].ToString();
                            columnname7 = Report.Columns[6].ToString();
                            week1 = columnname4;
                            week2 = columnname5;
                            week3 = columnname6;
                            week4 = columnname7;

                        }
                        newrow["Sno"] = a++.ToString();
                        newrow["BranchName"] = drb["BranchName"].ToString();
                        string prname = drb["BranchName"].ToString();
                        string colum4value = "";
                        string colum5value = "";
                        string colum6value = "";
                        string colum7value = "";
                        string colum8value = "";


                        foreach (DataRow dra in Report.Select("BranchId='" + branchid + "'"))
                        {
                            string parlorid = dra["BranchId"].ToString();
                            string wee = dra["BranchId"].ToString();
                            if (branchid == parlorid)
                            {
                                newrow["BranchId"] = parlorid;

                                if (columncount > 7)
                                {
                                    if (colum4value != "")
                                    {
                                        newrow[columnname4] = colum4value;
                                    }
                                    else
                                    {
                                        colum4value = dra[columnname4].ToString();
                                        if (colum4value != "")
                                        {
                                            newrow[columnname4] = colum4value;
                                        }
                                    }
                                    if (colum5value != "")
                                    {
                                        newrow[columnname5] = colum5value;
                                    }
                                    else
                                    {
                                        colum5value = dra[columnname5].ToString();
                                        if (colum5value != "")
                                        {
                                            newrow[columnname5] = dra[columnname5].ToString();
                                        }
                                    }

                                    if (colum6value != "")
                                    {
                                        newrow[columnname6] = colum6value;

                                    }
                                    else
                                    {
                                        colum6value = dra[columnname6].ToString();
                                        if (colum6value != "")
                                        {
                                            newrow[columnname6] = dra[columnname6].ToString();

                                        }
                                    }

                                    if (colum7value != "")
                                    {
                                        newrow[columnname7] = colum7value;

                                    }
                                    else
                                    {
                                        colum7value = dra[columnname7].ToString();
                                        if (colum7value != "")
                                        {
                                            newrow[columnname7] = dra[columnname7].ToString();

                                        }
                                    }

                                    if (colum8value != "")
                                    {
                                        newrow[columnname8] = colum8value;

                                    }
                                    else
                                    {
                                        colum8value = dra[columnname8].ToString();
                                        if (colum8value != "")
                                        {
                                            newrow[columnname8] = dra[columnname8].ToString();

                                        }
                                    }
                                }
                                else
                                {
                                    if (colum4value != "")
                                    {
                                        newrow[columnname4] = colum4value;
                                    }
                                    else
                                    {
                                        colum4value = dra[columnname4].ToString();
                                        if (colum4value != "")
                                        {
                                            newrow[columnname4] = colum4value;
                                        }
                                    }

                                    if (colum5value != "")
                                    {
                                        newrow[columnname5] = colum5value;
                                    }
                                    else
                                    {
                                        colum5value = dra[columnname5].ToString();
                                        if (colum5value != "")
                                        {
                                            newrow[columnname5] = dra[columnname5].ToString();
                                        }
                                    }

                                    if (colum6value != "")
                                    {
                                        newrow[columnname6] = colum6value;

                                    }
                                    else
                                    {
                                        colum6value = dra[columnname6].ToString();
                                        if (colum6value != "")
                                        {
                                            newrow[columnname6] = dra[columnname6].ToString();

                                        }
                                    }

                                    if (colum7value != "")
                                    {
                                        newrow[columnname7] = colum7value;

                                    }
                                    else
                                    {
                                        colum7value = dra[columnname7].ToString();
                                        if (colum7value != "")
                                        {
                                            newrow[columnname7] = dra[columnname7].ToString();

                                        }
                                    }
                                }
                            }
                        }

                        Sorttable.Rows.Add(newrow);
                    }
                }
                if (Sorttable.Rows.Count > 0)
                {
                    foreach (DataRow drs in Sorttable.Rows)
                    {
                        SalelDetails getsaledetails = new SalelDetails();
                        string parlorid = drs["BranchId"].ToString();
                        getsaledetails.Branchid = drs["BranchId"].ToString();
                        getsaledetails.BranchName = drs["BranchName"].ToString();
                        string week1tval = week1;
                        string week1value = drs["BranchId"].ToString();
                        string linkval1 = week1tval + "_" + week1value;

                        string week2tval = week2;
                        string week2value = drs["BranchId"].ToString();
                        string linkval2 = week2tval + "_" + week2value;

                        string week3tval = week3;
                        string week3value = drs["BranchId"].ToString();
                        string linkval3 = week3tval + "_" + week3value;

                        string week4tval = week4;
                        string week4value = drs["BranchId"].ToString();
                        string linkval4 = week4tval + "_" + week4value;

                        string week5tval = week5;
                        string week5value = drs["BranchId"].ToString();
                        string linkval5 = week5tval + "_" + week5value;

                        getsaledetails.week1 = drs[week1].ToString();
                        getsaledetails.week2 = drs[week2].ToString();
                        getsaledetails.week3 = drs[week3].ToString();
                        getsaledetails.week4 = drs[week4].ToString();
                        if (week5 != "")
                        {
                            getsaledetails.week5 = drs[week5].ToString();
                        }

                        getsaledetails.idate1 = linkval1;
                        getsaledetails.idate2 = linkval2;
                        getsaledetails.idate3 = linkval3;
                        getsaledetails.idate4 = linkval4;
                        getsaledetails.idate5 = linkval5;
                        SalelDetailslist1.Add(getsaledetails);
                    }
                }
            }
            WeekDetailsClass obj2 = new WeekDetailsClass();
            obj2.SalelDetails = SalelDetailslist1;
            obj2.wweekcls = weekslist;
            totalweekslist.Add(obj2);
            string response = GetJson(totalweekslist);
            context.Response.Write(response);
            //}
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }
    private void get_currentweekpossalevalue_details(HttpContext context)
    {
        try
        {
            //
            vdbmngr = new VehicleDBMgr();
            DataTable Report = new DataTable();
            DateTime ServerDateCurrentdate = VehicleDBMgr.GetTime(vdbmngr.conn);
            // string branchid = "";
            DateTime monday = DateTime.Today.AddDays(-(int)DateTime.Today.DayOfWeek + (int)DayOfWeek.Monday);
            DateTime sunday = DateTime.Today.AddDays(-(int)DateTime.Today.DayOfWeek + (int)DayOfWeek.Sunday);
            DateTime fromdate = GetLowDate(monday);
            DateTime todate = GetLowDate(monday).AddDays(6);
            TimeSpan dateSpan = todate.Subtract(fromdate);
            int NoOfdays = dateSpan.Days;
            NoOfdays = NoOfdays + 2;

            List<weekcls> weekslist = new List<weekcls>();
            List<SalelDetails> SalelDetailslist1 = new List<SalelDetails>();
            List<WeekDetailsClass> totalweekslist = new List<WeekDetailsClass>();
            DataTable distinctproducts = new DataTable();
            DataTable distictbranches = new DataTable();


            ArrayList al = new ArrayList();
            DataTable Sorttable = new DataTable();
            Report.Columns.Add("Sno");
            Report.Columns.Add("BranchId");
            Report.Columns.Add("BranchName");
            Sorttable.Columns.Add("Sno");
            Sorttable.Columns.Add("BranchId");
            Sorttable.Columns.Add("BranchName");

            int count = 0;
            DateTime dtFrm = new DateTime();
            for (int j = 1; j < NoOfdays; j++)
            {
                if (j == 1)
                {
                    dtFrm = fromdate.AddDays(-1);
                }
                else
                {
                    dtFrm = dtFrm.AddDays(1);
                }
                DayOfWeek dow = dtFrm.DayOfWeek; //enum
                string str = dow.ToString();
                string strdate = dtFrm.ToString("dd/MMM");
                string columndate = strdate + "(" + str + ")";
                Report.Columns.Add(columndate);
                weekcls obj1 = new weekcls();
                obj1.week = columndate;
                weekslist.Add(obj1);
                count++;
            }
            DataTable dtAll = new DataTable();
            DataTable tempbranchindentsale = new DataTable();
            DataTable dtDispatchesbranches = new DataTable();
            cmd = new MySqlCommand("SELECT  branchmappingtable.SubBranch, branchmappingtable.SuperBranch, branchmappingtable.SubBranch AS Expr1, branchdata.BranchName,branchdata.SalesType FROM  branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno WHERE  (branchmappingtable.SuperBranch = @Branchid) GROUP BY branchmappingtable.SubBranch ORDER BY companyname, branchmappingtable.SubBranch");
            cmd.Parameters.AddWithValue("@Branchid", "8009");
            DataTable BtGroupBranches = vdbmngr.SelectQuery(cmd).Tables[0];
            //cmd = new MySqlCommand("SELECT    TripInfo.Sno, ProductInfo.Categoryname, ROUND(SUM(ProductInfo.Qty) ) AS dispatchqty, TripInfo.I_Date, ProductInfo.CatSno, TripInfo.BranchName, TripInfo.BranchID, TripInfo.Branch_Id, TripInfo.GroupId,TripInfo.CompanyId FROM (SELECT tripdata.Sno, tripdata.I_Date, branchdata_1.BranchName, dispatch.BranchID, dispatch.Branch_Id, dispatch.GroupId, dispatch.CompanyId FROM  branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE (dispatch.GroupId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT Categoryname, Sno, Qty, CatSno FROM (SELECT  products_category.sno AS CatSno, products_category.Categoryname, tripdata_1.Sno, tripsubdata.Qty FROM tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno INNER JOIN productsdata ON tripsubdata.ProductId = productsdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno WHERE (tripdata_1.AssignDate BETWEEN @d1 AND @d2)) TripSubInfo) ProductInfo ON TripInfo.Sno = ProductInfo.Sno GROUP BY TripInfo.Branch_Id ORDER BY TripInfo.CompanyId");
            //// cmd = new MySqlCommand("SELECT   dispatch.sno, branchdata.BranchName, dispatch.Branch_Id, dispatch.BranchID, ROUND(SUM(tripsubdata.Qty),2) AS dispatchqty FROM dispatch INNER JOIN branchdata ON dispatch.Branch_Id = branchdata.sno INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN (SELECT  Sno, I_Date FROM tripdata WHERE  (AssignDate BETWEEN @d1 AND @d2)) tripdat ON triproutes.Tripdata_sno = tripdat.Sno INNER JOIN tripsubdata ON tripdat.Sno = tripsubdata.Tripdata_sno WHERE (dispatch.GroupId  = @branchid)  GROUP BY dispatch.Branch_Id");
            //cmd.Parameters.AddWithValue("@branch", BranchID);
            //cmd.Parameters.AddWithValue("@d1", GetLowDate(fromdate));
            //cmd.Parameters.AddWithValue("@d2", GetHighDate(todate));
            //dtDispatchesbranches = vdbmngr.SelectQuery(cmd).Tables[0];
            foreach (DataRow drgrbranch in BtGroupBranches.Rows)
            {
                if (drgrbranch["SubBranch"].ToString() == "172")
                {
                    cmd = new MySqlCommand("SELECT   DATE_FORMAT(indents.I_date, '%d %b %y') AS I_date,branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS salevalue, branchmappingtable.SuperBranch FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo  WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch NOT IN (538, 1801, 3625)) GROUP BY DATE(indents.I_date),branchmappingtable.SuperBranch");
                    //cmd = new MySqlCommand("SELECT  SubBranch, ROUND(SUM(DeliveryQty) ) AS DeliveryQty, ROUND(SUM(DeliveryQty * UnitCost) ) AS salevalue, SuperBranch FROM  (SELECT  t1.SubBranch, t1.SuperBranch, t2.DeliveryQty, t2.unitQty, t2.UnitCost FROM (SELECT branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch FROM  branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch WHERE (branchmappingtable_1.SuperBranch = @branchid) AND (branchmappingtable_1.SubBranch NOT IN(2,2749,2948,538,3625)) GROUP BY branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch) t1 LEFT OUTER JOIN (SELECT  indents_subtable.DeliveryQty, indents_subtable.unitQty, indents_subtable.UnitCost, branchmappingtable_2.SuperBranch, branchmappingtable_2.SubBranch FROM   branchmappingtable branchmappingtable_2 INNER JOIN (SELECT  IndentNo, Branch_id, I_date FROM   indents WHERE  (I_date BETWEEN @d1 AND @d2)) ind ON branchmappingtable_2.SubBranch = ind.Branch_id INNER JOIN indents_subtable ON ind.IndentNo = indents_subtable.IndentNo) t2 ON t2.SuperBranch = t1.SubBranch) derivedtbl_1 GROUP BY SuperBranch");
                    cmd.Parameters.AddWithValue("@BranchID", drgrbranch["SubBranch"].ToString());
                    cmd.Parameters.AddWithValue("@d1", GetLowDate(fromdate).AddDays(-2));
                    cmd.Parameters.AddWithValue("@d2", GetHighDate(todate).AddDays(-2));
                    tempbranchindentsale = vdbmngr.SelectQuery(cmd).Tables[0];
                }
                else if (drgrbranch["SubBranch"].ToString() == "3625")
                {
                    cmd = new MySqlCommand("SELECT   DATE_FORMAT(indents.I_date, '%d %b %y') AS I_date,branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS salevalue, branchmappingtable.SuperBranch FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo  WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) GROUP BY DATE(indents.I_date),branchmappingtable.SuperBranch");
                    //cmd = new MySqlCommand("SELECT  SubBranch, ROUND(SUM(DeliveryQty) ) AS DeliveryQty,  ROUND(SUM(DeliveryQty * UnitCost) ) AS salevalue, SuperBranch FROM  (SELECT  t1.SubBranch, t1.SuperBranch, t2.DeliveryQty, t2.unitQty, t2.UnitCost FROM (SELECT branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch FROM  branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch WHERE (branchmappingtable_1.SuperBranch = @branchid) AND (branchmappingtable_1.SubBranch IN(4609,3625)) GROUP BY branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch) t1 LEFT OUTER JOIN (SELECT  indents_subtable.DeliveryQty, indents_subtable.unitQty, indents_subtable.UnitCost, branchmappingtable_2.SuperBranch, branchmappingtable_2.SubBranch FROM   branchmappingtable branchmappingtable_2 INNER JOIN (SELECT  IndentNo, Branch_id, I_date FROM   indents WHERE  (I_date BETWEEN @d1 AND @d2)) ind ON branchmappingtable_2.SubBranch = ind.Branch_id INNER JOIN indents_subtable ON ind.IndentNo = indents_subtable.IndentNo) t2 ON t2.SuperBranch = t1.SubBranch) derivedtbl_1 GROUP BY SuperBranch");
                    cmd.Parameters.AddWithValue("@BranchID", drgrbranch["SubBranch"].ToString());
                    cmd.Parameters.AddWithValue("@d1", GetLowDate(fromdate).AddDays(-2));
                    cmd.Parameters.AddWithValue("@d2", GetHighDate(todate).AddDays(-2));
                    tempbranchindentsale = vdbmngr.SelectQuery(cmd).Tables[0];
                }
                else if (drgrbranch["SubBranch"].ToString() == "1801")
                {
                    cmd = new MySqlCommand("SELECT   DATE_FORMAT(indents.I_date, '%d %b %y') AS I_date,branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS salevalue, branchmappingtable.SuperBranch FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo  WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) GROUP BY DATE(indents.I_date),branchmappingtable.SuperBranch");

                    //cmd = new MySqlCommand("SELECT  SubBranch, ROUND(SUM(DeliveryQty) ) AS DeliveryQty,  ROUND(SUM(DeliveryQty * UnitCost) ) AS salevalue, SuperBranch FROM  (SELECT  t1.SubBranch, t1.SuperBranch, t2.DeliveryQty, t2.unitQty, t2.UnitCost FROM (SELECT branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch FROM  branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch WHERE (branchmappingtable_1.SuperBranch = @branchid) GROUP BY branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch) t1 LEFT OUTER JOIN (SELECT  indents_subtable.DeliveryQty, indents_subtable.unitQty, indents_subtable.UnitCost, branchmappingtable_2.SuperBranch, branchmappingtable_2.SubBranch FROM   branchmappingtable branchmappingtable_2 INNER JOIN (SELECT  IndentNo, Branch_id, I_date FROM   indents WHERE  (I_date BETWEEN @d1 AND @d2)) ind ON branchmappingtable_2.SubBranch = ind.Branch_id INNER JOIN indents_subtable ON ind.IndentNo = indents_subtable.IndentNo) t2 ON t2.SuperBranch = t1.SubBranch) derivedtbl_1 GROUP BY SuperBranch");
                    cmd.Parameters.AddWithValue("@BranchID", drgrbranch["SubBranch"].ToString());
                    cmd.Parameters.AddWithValue("@d1", GetLowDate(fromdate).AddDays(-2));
                    cmd.Parameters.AddWithValue("@d2", GetHighDate(todate).AddDays(-2));
                    tempbranchindentsale = vdbmngr.SelectQuery(cmd).Tables[0];
                }
                else if (drgrbranch["SubBranch"].ToString() == "158")
                {
                    cmd = new MySqlCommand("SELECT   DATE_FORMAT(indents.I_date, '%d %b %y') AS I_date,branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS salevalue, branchmappingtable.SuperBranch FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch NOT IN (159,4626)) GROUP BY DATE(indents.I_date),branchmappingtable.SuperBranch");
                    //cmd = new MySqlCommand("SELECT  SubBranch, ROUND(SUM(DeliveryQty) ) AS DeliveryQty,  ROUND(SUM(DeliveryQty * UnitCost) ) AS salevalue, SuperBranch FROM  (SELECT  t1.SubBranch, t1.SuperBranch, t2.DeliveryQty, t2.unitQty, t2.UnitCost FROM (SELECT branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch FROM  branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch WHERE (branchmappingtable_1.SuperBranch = @branchid) GROUP BY branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch) t1 LEFT OUTER JOIN (SELECT  indents_subtable.DeliveryQty, indents_subtable.unitQty, indents_subtable.UnitCost, branchmappingtable_2.SuperBranch, branchmappingtable_2.SubBranch FROM   branchmappingtable branchmappingtable_2 INNER JOIN (SELECT  IndentNo, Branch_id, I_date FROM   indents WHERE  (I_date BETWEEN @d1 AND @d2)) ind ON branchmappingtable_2.SubBranch = ind.Branch_id INNER JOIN indents_subtable ON ind.IndentNo = indents_subtable.IndentNo) t2 ON t2.SuperBranch = t1.SubBranch) derivedtbl_1 GROUP BY SuperBranch");
                    cmd.Parameters.AddWithValue("@BranchID", drgrbranch["SubBranch"].ToString());
                    cmd.Parameters.AddWithValue("@d1", GetLowDate(fromdate).AddDays(-2));
                    cmd.Parameters.AddWithValue("@d2", GetHighDate(todate).AddDays(-2));
                    tempbranchindentsale = vdbmngr.SelectQuery(cmd).Tables[0];

                    cmd = new MySqlCommand("SELECT  DATE_FORMAT(indent.I_date, '%d %b %y') AS I_date,ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty)) AS salevalue, indents_subtable.UnitCost, branchmappingtable.SuperBranch FROM (SELECT  IndentNo, Branch_id, I_date, Status, IndentType FROM  indents WHERE (I_date BETWEEN @d1 AND @d2) AND (Status <> 'D')) indent INNER JOIN branchdata ON indent.Branch_id = branchdata.sno INNER JOIN indents_subtable ON indent.IndentNo = indents_subtable.IndentNo INNER JOIN branchmappingtable ON branchdata.sno = branchmappingtable.SubBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable.SuperBranch = branchdata_1.sno WHERE (branchmappingtable.SuperBranch = @BranchID) AND (indents_subtable.DeliveryQty <> 0) GROUP BY DATE(indent.I_date),branchmappingtable.SuperBranch ORDER BY branchdata.BranchName");
                    //cmd = new MySqlCommand("SELECT  SubBranch, ROUND(SUM(DeliveryQty) ) AS DeliveryQty,  ROUND(SUM(DeliveryQty * UnitCost) ) AS salevalue, SuperBranch FROM  (SELECT  t1.SubBranch, t1.SuperBranch, t2.DeliveryQty, t2.unitQty, t2.UnitCost FROM (SELECT branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch FROM  branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch WHERE (branchmappingtable_1.SuperBranch = @branchid) GROUP BY branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch) t1 LEFT OUTER JOIN (SELECT  indents_subtable.DeliveryQty, indents_subtable.unitQty, indents_subtable.UnitCost, branchmappingtable_2.SuperBranch, branchmappingtable_2.SubBranch FROM   branchmappingtable branchmappingtable_2 INNER JOIN (SELECT  IndentNo, Branch_id, I_date FROM   indents WHERE  (I_date BETWEEN @d1 AND @d2)) ind ON branchmappingtable_2.SubBranch = ind.Branch_id INNER JOIN indents_subtable ON ind.IndentNo = indents_subtable.IndentNo) t2 ON t2.SuperBranch = t1.SubBranch) derivedtbl_1 GROUP BY SuperBranch");
                    cmd.Parameters.AddWithValue("@BranchID", drgrbranch["SubBranch"].ToString());
                    cmd.Parameters.AddWithValue("@d1", GetLowDate(fromdate).AddDays(-2));
                    cmd.Parameters.AddWithValue("@d2", GetHighDate(todate).AddDays(-2));
                    DataTable temptable = vdbmngr.SelectQuery(cmd).Tables[0];
                    tempbranchindentsale.Merge(temptable);
                }
                else
                {
                    cmd = new MySqlCommand("SELECT   DATE_FORMAT(indents.I_date, '%d %b %y') AS I_date,branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS salevalue, branchmappingtable.SuperBranch FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) GROUP BY DATE(indents.I_date),branchmappingtable.SuperBranch");
                    //cmd = new MySqlCommand("SELECT  SubBranch, ROUND(SUM(DeliveryQty) ) AS DeliveryQty,  ROUND(SUM(DeliveryQty * UnitCost) ) AS salevalue, SuperBranch FROM  (SELECT  t1.SubBranch, t1.SuperBranch, t2.DeliveryQty, t2.unitQty, t2.UnitCost FROM (SELECT branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch FROM  branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch WHERE (branchmappingtable_1.SuperBranch = @branchid) GROUP BY branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch) t1 LEFT OUTER JOIN (SELECT  indents_subtable.DeliveryQty, indents_subtable.unitQty, indents_subtable.UnitCost, branchmappingtable_2.SuperBranch, branchmappingtable_2.SubBranch FROM   branchmappingtable branchmappingtable_2 INNER JOIN (SELECT  IndentNo, Branch_id, I_date FROM   indents WHERE  (I_date BETWEEN @d1 AND @d2)) ind ON branchmappingtable_2.SubBranch = ind.Branch_id INNER JOIN indents_subtable ON ind.IndentNo = indents_subtable.IndentNo) t2 ON t2.SuperBranch = t1.SubBranch) derivedtbl_1 GROUP BY SuperBranch");
                    cmd.Parameters.AddWithValue("@BranchID", drgrbranch["SubBranch"].ToString());
                    cmd.Parameters.AddWithValue("@d1", GetLowDate(fromdate).AddDays(-2));
                    cmd.Parameters.AddWithValue("@d2", GetHighDate(todate).AddDays(-2));
                    tempbranchindentsale = vdbmngr.SelectQuery(cmd).Tables[0];
                }
                dtAll.Merge(tempbranchindentsale);
            }
            if (dtAll.Rows.Count > 0)
            {
                DataView view = new DataView(dtAll);
                distinctproducts = view.ToTable(true, "SuperBranch", "i_date");
            }
            DataTable Temptable = new DataTable();
            Temptable.Columns.Add("Sno");
            Temptable.Columns.Add("SuperBranch");
            Temptable.Columns.Add("BranchName");
            Temptable.Columns.Add("DeliveryQty");
            Temptable.Columns.Add("salevalue");
            Temptable.Columns.Add("i_date");
            foreach (DataRow drr in distinctproducts.Rows)
            {
                DataRow tempnewrow = Temptable.NewRow();
                double temptotsalevalue = 0, totalsale = 0;
                tempnewrow["SuperBranch"] = drr["SuperBranch"].ToString();
                string idate = "";
                foreach (DataRow drbranchname in BtGroupBranches.Select("SubBranch='" + drr["SuperBranch"].ToString() + "'"))
                {
                    tempnewrow["BranchName"] = drbranchname["BranchName"].ToString();
                    foreach (DataRow drindent in dtAll.Select("SuperBranch='" + drr["SuperBranch"].ToString() + "'AND i_date='" + drr["i_date"].ToString() + "'"))
                    {
                        double tempqty = 0;
                        double.TryParse(drindent["DeliveryQty"].ToString(), out tempqty);
                        double tempsalevalue = 0;
                        double.TryParse(drindent["salevalue"].ToString(), out tempsalevalue);
                        temptotsalevalue += tempsalevalue;
                        totalsale += tempqty;
                        ServerDateCurrentdate = Convert.ToDateTime(drindent["i_date"].ToString()); ;
                        ServerDateCurrentdate = ServerDateCurrentdate.AddDays(1);
                        idate = ServerDateCurrentdate.ToString("dd/MMM");
                    }
                    tempnewrow["DeliveryQty"] = totalsale;
                    tempnewrow["salevalue"] = temptotsalevalue;
                    tempnewrow["i_date"] = idate;
                    Temptable.Rows.Add(tempnewrow);
                }
            }
            if (Temptable.Rows.Count > 0)
            {
                DataView view1 = new DataView(Temptable);
                distictbranches = view1.ToTable(true, "SuperBranch", "BranchName");
            }
            int i = 1;
            foreach (DataRow dr in distictbranches.Rows)
            {
                DataRow newrow = Report.NewRow();
                newrow["Sno"] = i++.ToString();
                newrow["BranchName"] = dr["BranchName"].ToString();
                string parlorname = dr["BranchName"].ToString();
                //string cmpid = dr["cmpid"].ToString();
                string branchid = dr["SuperBranch"].ToString();
                foreach (DataRow drDriver in Temptable.Rows)
                {
                    SalelDetails getattendance = new SalelDetails();

                    if (branchid == drDriver["SuperBranch"].ToString())
                    {
                        string logdate = "";
                        string totsalevalue = "";
                        string attendance_date = drDriver["i_date"].ToString();
                        if (attendance_date != "")
                        {
                            DateTime dtDoe = Convert.ToDateTime(attendance_date);
                            string strdate = dtDoe.ToString("dd/MMM");
                            DayOfWeek dow = dtDoe.DayOfWeek; //enum
                            string str = dow.ToString();
                            string columndate = strdate + "(" + str + ")";
                            logdate = columndate;
                            string salevalue = drDriver["DeliveryQty"].ToString();
                            if (salevalue != "")
                            {
                                double tsval = Convert.ToDouble(salevalue);
                                tsval = Math.Round(tsval, 0);
                                newrow[columndate] = tsval;
                                totsalevalue = tsval.ToString();
                            }
                            else
                            {
                                newrow[columndate] = "0";
                            }
                        }
                        else
                        {
                        }
                        string bid = drDriver["SuperBranch"].ToString();
                        newrow["Branchid"] = drDriver["SuperBranch"].ToString();
                        //getattendance.cmpid = cmpid;
                        getattendance.BranchName = parlorname;
                        getattendance.idate = logdate;
                        getattendance.salevalue = totsalevalue;
                        getattendance.Branchid = bid;
                        SalelDetailslist1.Add(getattendance);
                    }
                }
                Report.Rows.Add(newrow);
            }
            WeekDetailsClass obj2 = new WeekDetailsClass();
            obj2.SalelDetails = SalelDetailslist1;
            obj2.wweekcls = weekslist;
            totalweekslist.Add(obj2);
            string response = GetJson(totalweekslist);
            context.Response.Write(response);
            //}
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }
    private void get_weekpossalevalue_details(HttpContext context)
    {
        try
        {
            //
            vdbmngr = new VehicleDBMgr();
            DataTable Report = new DataTable();
            DateTime ServerDateCurrentdate = VehicleDBMgr.GetTime(vdbmngr.conn);
            string eid = context.Request["parlorid"].ToString();
            string[] bs = eid.Split('_');
            string frmlogdate = bs[1];
            string tologdate = bs[2];
            string branchid = bs[3];

            DateTime dtfromdate = ServerDateCurrentdate;
            DateTime dttodate = ServerDateCurrentdate;
            DateTime fromdate = ServerDateCurrentdate;
            string frmdate = fromdate.ToString("MM/dd/yyyy");
            string[] str = frmdate.Split('/');
            string years = str[2];
            string[] frmlogstr = frmlogdate.Split('/');
            string date = frmlogstr[0];
            string month = frmlogstr[1];

            string[] mth = month.Split('(');
            string cmnth = mth[0];

            string biologdate = cmnth + "/" + date + "/" + years;

            if (month == "Dec")
            {
                int my = (Convert.ToInt32(years) - 1);
                string myye = my.ToString();
                biologdate = cmnth + "/" + date + "/" + myye;
            }

            DateTime dtfrom = Convert.ToDateTime(biologdate);

            string[] tologstr = tologdate.Split('/');
            string todate = tologstr[0];
            string tomonth = tologstr[1];

            string[] tomth = tomonth.Split('(');
            string tocmnth = tomth[0];
            string tobiologdate = tocmnth + "/" + todate + "/" + years;
            if (tocmnth == "Dec")
            {
                int myy = (Convert.ToInt32(years) - 1);
                string myyee = myy.ToString();
                tobiologdate = tocmnth + "/" + todate + "/" + myyee;
            }
            DateTime dtto = Convert.ToDateTime(tobiologdate);

            DataTable dtAll = new DataTable();
            DataTable distinctproducts = new DataTable();
            DataTable distictbranches = new DataTable();

            DateTime dfromdate = GetLowDate(dtfrom);
            DateTime dtodate = GetLowDate(dtto);
            TimeSpan dateSpan = dtodate.Subtract(dfromdate);
            int NoOfdays = dateSpan.Days;
            NoOfdays = NoOfdays + 2;

            List<weekcls> weekslist = new List<weekcls>();
            List<SalelDetails> SalelDetailslist1 = new List<SalelDetails>();
            List<WeekDetailsClass> totalweekslist = new List<WeekDetailsClass>();
            ArrayList al = new ArrayList();
            DataTable Sorttable = new DataTable();
            Report.Columns.Add("Sno");
            Report.Columns.Add("BranchId");
            Report.Columns.Add("BranchName");

            Sorttable.Columns.Add("Sno");
            Sorttable.Columns.Add("BranchId");
            Sorttable.Columns.Add("BranchName");

            int count = 0;
            DateTime dtFrm = new DateTime();
            for (int j = 1; j < NoOfdays; j++)
            {
                if (j == 1)
                {
                    dtFrm = dfromdate.AddDays(-1);
                }
                else
                {
                    dtFrm = dtFrm.AddDays(1);
                }
                DayOfWeek dow = dtFrm.DayOfWeek; //enum
                string strr = dow.ToString();
                string strdate = dtFrm.ToString("dd/MMM");
                string columndate = strdate + "(" + strr + ")";
                Report.Columns.Add(columndate);
                weekcls obj1 = new weekcls();
                obj1.week = columndate;
                weekslist.Add(obj1);
                count++;
            }



            DataTable tempbranchindentsale = new DataTable();
            //string BranchID = "8009";
            cmd = new MySqlCommand("SELECT  branchmappingtable.SubBranch, branchmappingtable.SuperBranch, branchmappingtable.SubBranch AS Expr1, branchdata.BranchName,branchdata.SalesType FROM  branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno WHERE  (branchmappingtable.SuperBranch = @Branchid) GROUP BY branchmappingtable.SubBranch ORDER BY companyname, branchmappingtable.SubBranch");
            cmd.Parameters.AddWithValue("@Branchid", "8009");
            DataTable BtGroupBranches = vdbmngr.SelectQuery(cmd).Tables[0];
            //cmd = new MySqlCommand("SELECT    TripInfo.Sno, ProductInfo.Categoryname, ROUND(SUM(ProductInfo.Qty) ) AS dispatchqty, TripInfo.I_Date, ProductInfo.CatSno, TripInfo.BranchName, TripInfo.BranchID, TripInfo.Branch_Id, TripInfo.GroupId,TripInfo.CompanyId FROM (SELECT tripdata.Sno, tripdata.I_Date, branchdata_1.BranchName, dispatch.BranchID, dispatch.Branch_Id, dispatch.GroupId, dispatch.CompanyId FROM  branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE (dispatch.GroupId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT Categoryname, Sno, Qty, CatSno FROM (SELECT  products_category.sno AS CatSno, products_category.Categoryname, tripdata_1.Sno, tripsubdata.Qty FROM tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno INNER JOIN productsdata ON tripsubdata.ProductId = productsdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno WHERE (tripdata_1.AssignDate BETWEEN @d1 AND @d2)) TripSubInfo) ProductInfo ON TripInfo.Sno = ProductInfo.Sno GROUP BY TripInfo.Branch_Id ORDER BY TripInfo.CompanyId");
            //// cmd = new MySqlCommand("SELECT   dispatch.sno, branchdata.BranchName, dispatch.Branch_Id, dispatch.BranchID, ROUND(SUM(tripsubdata.Qty),2) AS dispatchqty FROM dispatch INNER JOIN branchdata ON dispatch.Branch_Id = branchdata.sno INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN (SELECT  Sno, I_Date FROM tripdata WHERE  (AssignDate BETWEEN @d1 AND @d2)) tripdat ON triproutes.Tripdata_sno = tripdat.Sno INNER JOIN tripsubdata ON tripdat.Sno = tripsubdata.Tripdata_sno WHERE (dispatch.GroupId  = @branchid)  GROUP BY dispatch.Branch_Id");
            //cmd.Parameters.AddWithValue("@branch", BranchID);
            //cmd.Parameters.AddWithValue("@d1", GetLowDate(fromdate));
            //cmd.Parameters.AddWithValue("@d2", GetHighDate(todate));
            //dtDispatchesbranches = vdbmngr.SelectQuery(cmd).Tables[0];
            //foreach (DataRow drgrbranch in BtGroupBranches.Rows)
            //{
            if (branchid == "172")
            {
                cmd = new MySqlCommand("SELECT   DATE_FORMAT(indents.I_date, '%d %b %y') AS I_date,branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS salevalue, branchmappingtable.SuperBranch FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo  WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch NOT IN (538, 1801, 3625)) GROUP BY DATE(indents.I_date),branchmappingtable.SuperBranch");
                //cmd = new MySqlCommand("SELECT  SubBranch, ROUND(SUM(DeliveryQty) ) AS DeliveryQty, ROUND(SUM(DeliveryQty * UnitCost) ) AS salevalue, SuperBranch FROM  (SELECT  t1.SubBranch, t1.SuperBranch, t2.DeliveryQty, t2.unitQty, t2.UnitCost FROM (SELECT branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch FROM  branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch WHERE (branchmappingtable_1.SuperBranch = @branchid) AND (branchmappingtable_1.SubBranch NOT IN(2,2749,2948,538,3625)) GROUP BY branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch) t1 LEFT OUTER JOIN (SELECT  indents_subtable.DeliveryQty, indents_subtable.unitQty, indents_subtable.UnitCost, branchmappingtable_2.SuperBranch, branchmappingtable_2.SubBranch FROM   branchmappingtable branchmappingtable_2 INNER JOIN (SELECT  IndentNo, Branch_id, I_date FROM   indents WHERE  (I_date BETWEEN @d1 AND @d2)) ind ON branchmappingtable_2.SubBranch = ind.Branch_id INNER JOIN indents_subtable ON ind.IndentNo = indents_subtable.IndentNo) t2 ON t2.SuperBranch = t1.SubBranch) derivedtbl_1 GROUP BY SuperBranch");
                cmd.Parameters.AddWithValue("@BranchID", branchid);
                cmd.Parameters.AddWithValue("@d1", GetLowDate(dtfrom).AddDays(-2));
                cmd.Parameters.AddWithValue("@d2", GetHighDate(dtto).AddDays(-2));
                tempbranchindentsale = vdbmngr.SelectQuery(cmd).Tables[0];
            }
            else if (branchid == "3625")
            {
                cmd = new MySqlCommand("SELECT   DATE_FORMAT(indents.I_date, '%d %b %y') AS I_date,branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS salevalue, branchmappingtable.SuperBranch FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo  WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) GROUP BY DATE(indents.I_date),branchmappingtable.SuperBranch");
                //cmd = new MySqlCommand("SELECT  SubBranch, ROUND(SUM(DeliveryQty) ) AS DeliveryQty,  ROUND(SUM(DeliveryQty * UnitCost) ) AS salevalue, SuperBranch FROM  (SELECT  t1.SubBranch, t1.SuperBranch, t2.DeliveryQty, t2.unitQty, t2.UnitCost FROM (SELECT branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch FROM  branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch WHERE (branchmappingtable_1.SuperBranch = @branchid) AND (branchmappingtable_1.SubBranch IN(4609,3625)) GROUP BY branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch) t1 LEFT OUTER JOIN (SELECT  indents_subtable.DeliveryQty, indents_subtable.unitQty, indents_subtable.UnitCost, branchmappingtable_2.SuperBranch, branchmappingtable_2.SubBranch FROM   branchmappingtable branchmappingtable_2 INNER JOIN (SELECT  IndentNo, Branch_id, I_date FROM   indents WHERE  (I_date BETWEEN @d1 AND @d2)) ind ON branchmappingtable_2.SubBranch = ind.Branch_id INNER JOIN indents_subtable ON ind.IndentNo = indents_subtable.IndentNo) t2 ON t2.SuperBranch = t1.SubBranch) derivedtbl_1 GROUP BY SuperBranch");
                cmd.Parameters.AddWithValue("@BranchID", branchid);
                cmd.Parameters.AddWithValue("@d1", GetLowDate(dtfrom).AddDays(-2));
                cmd.Parameters.AddWithValue("@d2", GetHighDate(dtto).AddDays(-2));
                tempbranchindentsale = vdbmngr.SelectQuery(cmd).Tables[0];
            }
            else if (branchid == "1801")
            {
                cmd = new MySqlCommand("SELECT   DATE_FORMAT(indents.I_date, '%d %b %y') AS I_date,branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS salevalue, branchmappingtable.SuperBranch FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo  WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) GROUP BY DATE(indents.I_date),branchmappingtable.SuperBranch");
                //cmd = new MySqlCommand("SELECT  SubBranch, ROUND(SUM(DeliveryQty) ) AS DeliveryQty,  ROUND(SUM(DeliveryQty * UnitCost) ) AS salevalue, SuperBranch FROM  (SELECT  t1.SubBranch, t1.SuperBranch, t2.DeliveryQty, t2.unitQty, t2.UnitCost FROM (SELECT branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch FROM  branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch WHERE (branchmappingtable_1.SuperBranch = @branchid) GROUP BY branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch) t1 LEFT OUTER JOIN (SELECT  indents_subtable.DeliveryQty, indents_subtable.unitQty, indents_subtable.UnitCost, branchmappingtable_2.SuperBranch, branchmappingtable_2.SubBranch FROM   branchmappingtable branchmappingtable_2 INNER JOIN (SELECT  IndentNo, Branch_id, I_date FROM   indents WHERE  (I_date BETWEEN @d1 AND @d2)) ind ON branchmappingtable_2.SubBranch = ind.Branch_id INNER JOIN indents_subtable ON ind.IndentNo = indents_subtable.IndentNo) t2 ON t2.SuperBranch = t1.SubBranch) derivedtbl_1 GROUP BY SuperBranch");
                cmd.Parameters.AddWithValue("@BranchID", branchid);
                cmd.Parameters.AddWithValue("@d1", GetLowDate(dtfrom).AddDays(-2));
                cmd.Parameters.AddWithValue("@d2", GetHighDate(dtto).AddDays(-2));
                tempbranchindentsale = vdbmngr.SelectQuery(cmd).Tables[0];
            }
            else if (branchid == "158")
            {
                cmd = new MySqlCommand("SELECT   DATE_FORMAT(indents.I_date, '%d %b %y') AS I_date,branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS salevalue, branchmappingtable.SuperBranch FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch NOT IN (159,4626)) GROUP BY DATE(indents.I_date),branchmappingtable.SuperBranch");
                //cmd = new MySqlCommand("SELECT  SubBranch, ROUND(SUM(DeliveryQty) ) AS DeliveryQty,  ROUND(SUM(DeliveryQty * UnitCost) ) AS salevalue, SuperBranch FROM  (SELECT  t1.SubBranch, t1.SuperBranch, t2.DeliveryQty, t2.unitQty, t2.UnitCost FROM (SELECT branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch FROM  branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch WHERE (branchmappingtable_1.SuperBranch = @branchid) GROUP BY branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch) t1 LEFT OUTER JOIN (SELECT  indents_subtable.DeliveryQty, indents_subtable.unitQty, indents_subtable.UnitCost, branchmappingtable_2.SuperBranch, branchmappingtable_2.SubBranch FROM   branchmappingtable branchmappingtable_2 INNER JOIN (SELECT  IndentNo, Branch_id, I_date FROM   indents WHERE  (I_date BETWEEN @d1 AND @d2)) ind ON branchmappingtable_2.SubBranch = ind.Branch_id INNER JOIN indents_subtable ON ind.IndentNo = indents_subtable.IndentNo) t2 ON t2.SuperBranch = t1.SubBranch) derivedtbl_1 GROUP BY SuperBranch");
                cmd.Parameters.AddWithValue("@BranchID", branchid);
                cmd.Parameters.AddWithValue("@d1", GetLowDate(dtfrom).AddDays(-2));
                cmd.Parameters.AddWithValue("@d2", GetHighDate(dtto).AddDays(-2));
                tempbranchindentsale = vdbmngr.SelectQuery(cmd).Tables[0];

                cmd = new MySqlCommand("SELECT  DATE_FORMAT(indent.I_date, '%d %b %y') AS I_date,ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty)) AS salevalue, indents_subtable.UnitCost, branchmappingtable.SuperBranch FROM (SELECT  IndentNo, Branch_id, I_date, Status, IndentType FROM  indents WHERE (I_date BETWEEN @d1 AND @d2) AND (Status <> 'D')) indent INNER JOIN branchdata ON indent.Branch_id = branchdata.sno INNER JOIN indents_subtable ON indent.IndentNo = indents_subtable.IndentNo INNER JOIN branchmappingtable ON branchdata.sno = branchmappingtable.SubBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable.SuperBranch = branchdata_1.sno WHERE (branchmappingtable.SuperBranch = @BranchID) AND (indents_subtable.DeliveryQty <> 0) GROUP BY DATE(indent.I_date),branchmappingtable.SuperBranch ORDER BY branchdata.BranchName");
                //cmd = new MySqlCommand("SELECT  SubBranch, ROUND(SUM(DeliveryQty) ) AS DeliveryQty,  ROUND(SUM(DeliveryQty * UnitCost) ) AS salevalue, SuperBranch FROM  (SELECT  t1.SubBranch, t1.SuperBranch, t2.DeliveryQty, t2.unitQty, t2.UnitCost FROM (SELECT branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch FROM  branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch WHERE (branchmappingtable_1.SuperBranch = @branchid) GROUP BY branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch) t1 LEFT OUTER JOIN (SELECT  indents_subtable.DeliveryQty, indents_subtable.unitQty, indents_subtable.UnitCost, branchmappingtable_2.SuperBranch, branchmappingtable_2.SubBranch FROM   branchmappingtable branchmappingtable_2 INNER JOIN (SELECT  IndentNo, Branch_id, I_date FROM   indents WHERE  (I_date BETWEEN @d1 AND @d2)) ind ON branchmappingtable_2.SubBranch = ind.Branch_id INNER JOIN indents_subtable ON ind.IndentNo = indents_subtable.IndentNo) t2 ON t2.SuperBranch = t1.SubBranch) derivedtbl_1 GROUP BY SuperBranch");
                cmd.Parameters.AddWithValue("@BranchID", branchid);
                cmd.Parameters.AddWithValue("@d1", GetLowDate(dtfrom).AddDays(-2));
                cmd.Parameters.AddWithValue("@d2", GetHighDate(dtto).AddDays(-2));
                DataTable temptable = vdbmngr.SelectQuery(cmd).Tables[0];
                tempbranchindentsale.Merge(temptable);
            }
            else
            {
                cmd = new MySqlCommand("SELECT   DATE_FORMAT(indents.I_date, '%d %b %y') AS I_date,branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS salevalue, branchmappingtable.SuperBranch FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) GROUP BY DATE(indents.I_date),branchmappingtable.SuperBranch");
                //cmd = new MySqlCommand("SELECT  SubBranch, ROUND(SUM(DeliveryQty) ) AS DeliveryQty,  ROUND(SUM(DeliveryQty * UnitCost) ) AS salevalue, SuperBranch FROM  (SELECT  t1.SubBranch, t1.SuperBranch, t2.DeliveryQty, t2.unitQty, t2.UnitCost FROM (SELECT branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch FROM  branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch WHERE (branchmappingtable_1.SuperBranch = @branchid) GROUP BY branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch) t1 LEFT OUTER JOIN (SELECT  indents_subtable.DeliveryQty, indents_subtable.unitQty, indents_subtable.UnitCost, branchmappingtable_2.SuperBranch, branchmappingtable_2.SubBranch FROM   branchmappingtable branchmappingtable_2 INNER JOIN (SELECT  IndentNo, Branch_id, I_date FROM   indents WHERE  (I_date BETWEEN @d1 AND @d2)) ind ON branchmappingtable_2.SubBranch = ind.Branch_id INNER JOIN indents_subtable ON ind.IndentNo = indents_subtable.IndentNo) t2 ON t2.SuperBranch = t1.SubBranch) derivedtbl_1 GROUP BY SuperBranch");
                cmd.Parameters.AddWithValue("@BranchID", branchid);
                cmd.Parameters.AddWithValue("@d1", GetLowDate(dtfrom).AddDays(-2));
                cmd.Parameters.AddWithValue("@d2", GetHighDate(dtto).AddDays(-2));
                tempbranchindentsale = vdbmngr.SelectQuery(cmd).Tables[0];
            }
            dtAll.Merge(tempbranchindentsale);
            if (dtAll.Rows.Count > 0)
            {
                DataView view = new DataView(dtAll);
                distinctproducts = view.ToTable(true, "SuperBranch", "i_date");
            }
            DataTable Temptable = new DataTable();
            Temptable.Columns.Add("Sno");
            Temptable.Columns.Add("SuperBranch");
            Temptable.Columns.Add("BranchName");
            Temptable.Columns.Add("DeliveryQty");
            Temptable.Columns.Add("salevalue");
            Temptable.Columns.Add("i_date");
            foreach (DataRow drr in distinctproducts.Rows)
            {
                DataRow tempnewrow = Temptable.NewRow();
                double temptotsalevalue = 0, totalsale = 0;
                tempnewrow["SuperBranch"] = drr["SuperBranch"].ToString();
                string idate = "";
                foreach (DataRow drbranchname in BtGroupBranches.Select("SubBranch='" + drr["SuperBranch"].ToString() + "'"))
                {
                    tempnewrow["BranchName"] = drbranchname["BranchName"].ToString();
                    foreach (DataRow drindent in dtAll.Select("SuperBranch='" + drr["SuperBranch"].ToString() + "'AND i_date='" + drr["i_date"].ToString() + "'"))
                    {
                        double tempqty = 0;
                        double.TryParse(drindent["DeliveryQty"].ToString(), out tempqty);
                        double tempsalevalue = 0;
                        double.TryParse(drindent["salevalue"].ToString(), out tempsalevalue);
                        temptotsalevalue += tempsalevalue;
                        totalsale += tempqty;
                        idate = drindent["i_date"].ToString();
                        ServerDateCurrentdate = Convert.ToDateTime(drindent["i_date"].ToString()); ;
                        ServerDateCurrentdate = ServerDateCurrentdate.AddDays(1);
                        idate = ServerDateCurrentdate.ToString("dd/MMM");
                    }
                    tempnewrow["DeliveryQty"] = totalsale;
                    tempnewrow["salevalue"] = temptotsalevalue;
                    tempnewrow["i_date"] = idate;
                    Temptable.Rows.Add(tempnewrow);
                }
            }
            if (Temptable.Rows.Count > 0)
            {
                DataView view1 = new DataView(Temptable);
                distictbranches = view1.ToTable(true, "SuperBranch", "BranchName");
            }
            int i = 1;
            foreach (DataRow dr in distictbranches.Rows)
            {
                DataRow newrow = Report.NewRow();
                newrow["Sno"] = i++.ToString();
                newrow["BranchName"] = dr["BranchName"].ToString();
                string parlorname = dr["BranchName"].ToString();
                //string cmpid = dr["cmpid"].ToString();
                branchid = dr["SuperBranch"].ToString();
                foreach (DataRow drDriver in Temptable.Rows)
                {
                    SalelDetails getattendance = new SalelDetails();

                    if (branchid == drDriver["SuperBranch"].ToString())
                    {
                        string logdate = "";
                        string totsalevalue = "";
                        string attendance_date = drDriver["i_date"].ToString();
                        if (attendance_date != "")
                        {
                            DateTime dtDoe = Convert.ToDateTime(attendance_date);
                            string strdate = dtDoe.ToString("dd/MMM");
                            DayOfWeek dow = dtDoe.DayOfWeek; //enum
                            string str1 = dow.ToString();
                            string columndate = strdate + "(" + str1 + ")";
                            logdate = columndate;
                            string salevalue = drDriver["DeliveryQty"].ToString();
                            if (salevalue != "")
                            {
                                double tsval = Convert.ToDouble(salevalue);
                                tsval = Math.Round(tsval, 0);
                                newrow[columndate] = tsval;
                                totsalevalue = tsval.ToString();
                            }
                            else
                            {
                                newrow[columndate] = "0";
                            }
                        }
                        else
                        {
                        }
                        string bid = drDriver["SuperBranch"].ToString();
                        newrow["Branchid"] = drDriver["SuperBranch"].ToString();
                        //getattendance.cmpid = cmpid;
                        getattendance.BranchName = parlorname;
                        getattendance.idate = logdate;
                        getattendance.salevalue = totsalevalue;
                        getattendance.Branchid = bid;
                        SalelDetailslist1.Add(getattendance);
                    }
                }
                Report.Rows.Add(newrow);
            }
            WeekDetailsClass obj2 = new WeekDetailsClass();
            obj2.SalelDetails = SalelDetailslist1;
            obj2.wweekcls = weekslist;
            totalweekslist.Add(obj2);
            string response = GetJson(totalweekslist);
            context.Response.Write(response);
            //}
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }
    private void GetLastweekSalesDetails(HttpContext context)
    {
        try
        {
            //
            vdbmngr = new VehicleDBMgr();
            DataTable Report = new DataTable();
            DateTime ServerDateCurrentdate = VehicleDBMgr.GetTime(vdbmngr.conn);
            DateTime lastMonday = DateTime.Now.AddDays(-6);
            while (lastMonday.DayOfWeek != DayOfWeek.Monday)
                lastMonday = lastMonday.AddDays(-1);

            DateTime fromdate = GetLowDate(lastMonday);
            DateTime todate = GetLowDate(lastMonday).AddDays(6);
            TimeSpan dateSpan = todate.Subtract(fromdate);
            int NoOfdays = dateSpan.Days;
            NoOfdays = NoOfdays + 2;
            DateTime monday = DateTime.Today.AddDays(-(int)DateTime.Today.DayOfWeek + (int)DayOfWeek.Monday);

            List<weekcls> weekslist = new List<weekcls>();
            List<SalelDetails> SalelDetailslist1 = new List<SalelDetails>();
            List<WeekDetailsClass> totalweekslist = new List<WeekDetailsClass>();
            DataTable distinctproducts = new DataTable();
            DataTable distictbranches = new DataTable();


            ArrayList al = new ArrayList();
            DataTable Sorttable = new DataTable();
            Report.Columns.Add("Sno");
            Report.Columns.Add("BranchId");
            Report.Columns.Add("BranchName");

            Sorttable.Columns.Add("Sno");
            Sorttable.Columns.Add("BranchId");
            Sorttable.Columns.Add("BranchName");

            int count = 0;
            DateTime dtFrm = new DateTime();
            for (int j = 1; j < NoOfdays; j++)
            {
                if (j == 1)
                {
                    dtFrm = fromdate.AddDays(-1);
                }
                else
                {
                    dtFrm = dtFrm.AddDays(1);
                }
                DayOfWeek dow = dtFrm.DayOfWeek; //enum
                string str = dow.ToString();
                string strdate = dtFrm.ToString("dd/MMM");
                string columndate = strdate + "(" + str + ")";
                Report.Columns.Add(columndate);
                weekcls obj1 = new weekcls();
                obj1.week = columndate;
                weekslist.Add(obj1);
                count++;
            }
            DataTable dtAll = new DataTable();
            DataTable tempbranchindentsale = new DataTable();
            DataTable dtDispatchesbranches = new DataTable();
            cmd = new MySqlCommand("SELECT  branchmappingtable.SubBranch, branchmappingtable.SuperBranch, branchmappingtable.SubBranch AS Expr1, branchdata.BranchName,branchdata.SalesType FROM  branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno WHERE  (branchmappingtable.SuperBranch = @Branchid) GROUP BY branchmappingtable.SubBranch ORDER BY companyname, branchmappingtable.SubBranch");
            cmd.Parameters.AddWithValue("@Branchid", "8009");
            DataTable BtGroupBranches = vdbmngr.SelectQuery(cmd).Tables[0];
            //cmd = new MySqlCommand("SELECT    TripInfo.Sno, ProductInfo.Categoryname, ROUND(SUM(ProductInfo.Qty) ) AS dispatchqty, TripInfo.I_Date, ProductInfo.CatSno, TripInfo.BranchName, TripInfo.BranchID, TripInfo.Branch_Id, TripInfo.GroupId,TripInfo.CompanyId FROM (SELECT tripdata.Sno, tripdata.I_Date, branchdata_1.BranchName, dispatch.BranchID, dispatch.Branch_Id, dispatch.GroupId, dispatch.CompanyId FROM  branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE (dispatch.GroupId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT Categoryname, Sno, Qty, CatSno FROM (SELECT  products_category.sno AS CatSno, products_category.Categoryname, tripdata_1.Sno, tripsubdata.Qty FROM tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno INNER JOIN productsdata ON tripsubdata.ProductId = productsdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno WHERE (tripdata_1.AssignDate BETWEEN @d1 AND @d2)) TripSubInfo) ProductInfo ON TripInfo.Sno = ProductInfo.Sno GROUP BY TripInfo.Branch_Id ORDER BY TripInfo.CompanyId");
            //// cmd = new MySqlCommand("SELECT   dispatch.sno, branchdata.BranchName, dispatch.Branch_Id, dispatch.BranchID, ROUND(SUM(tripsubdata.Qty),2) AS dispatchqty FROM dispatch INNER JOIN branchdata ON dispatch.Branch_Id = branchdata.sno INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN (SELECT  Sno, I_Date FROM tripdata WHERE  (AssignDate BETWEEN @d1 AND @d2)) tripdat ON triproutes.Tripdata_sno = tripdat.Sno INNER JOIN tripsubdata ON tripdat.Sno = tripsubdata.Tripdata_sno WHERE (dispatch.GroupId  = @branchid)  GROUP BY dispatch.Branch_Id");
            //cmd.Parameters.AddWithValue("@branch", BranchID);
            //cmd.Parameters.AddWithValue("@d1", GetLowDate(fromdate));
            //cmd.Parameters.AddWithValue("@d2", GetHighDate(todate));
            //dtDispatchesbranches = vdbmngr.SelectQuery(cmd).Tables[0];
            foreach (DataRow drgrbranch in BtGroupBranches.Rows)
            {
                if (drgrbranch["SubBranch"].ToString() == "172")
                {
                    cmd = new MySqlCommand("SELECT   DATE_FORMAT(indents.I_date, '%d %b %y') AS I_date,branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS salevalue, branchmappingtable.SuperBranch FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo  WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch NOT IN (538, 1801, 3625)) GROUP BY DATE(indents.I_date),branchmappingtable.SuperBranch");
                    //cmd = new MySqlCommand("SELECT  SubBranch, ROUND(SUM(DeliveryQty) ) AS DeliveryQty, ROUND(SUM(DeliveryQty * UnitCost) ) AS salevalue, SuperBranch FROM  (SELECT  t1.SubBranch, t1.SuperBranch, t2.DeliveryQty, t2.unitQty, t2.UnitCost FROM (SELECT branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch FROM  branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch WHERE (branchmappingtable_1.SuperBranch = @branchid) AND (branchmappingtable_1.SubBranch NOT IN(2,2749,2948,538,3625)) GROUP BY branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch) t1 LEFT OUTER JOIN (SELECT  indents_subtable.DeliveryQty, indents_subtable.unitQty, indents_subtable.UnitCost, branchmappingtable_2.SuperBranch, branchmappingtable_2.SubBranch FROM   branchmappingtable branchmappingtable_2 INNER JOIN (SELECT  IndentNo, Branch_id, I_date FROM   indents WHERE  (I_date BETWEEN @d1 AND @d2)) ind ON branchmappingtable_2.SubBranch = ind.Branch_id INNER JOIN indents_subtable ON ind.IndentNo = indents_subtable.IndentNo) t2 ON t2.SuperBranch = t1.SubBranch) derivedtbl_1 GROUP BY SuperBranch");
                    cmd.Parameters.AddWithValue("@BranchID", drgrbranch["SubBranch"].ToString());
                    cmd.Parameters.AddWithValue("@d1", GetLowDate(fromdate).AddDays(-2));
                    cmd.Parameters.AddWithValue("@d2", GetHighDate(todate).AddDays(-2));
                    tempbranchindentsale = vdbmngr.SelectQuery(cmd).Tables[0];
                }
                else if (drgrbranch["SubBranch"].ToString() == "3625")
                {
                    cmd = new MySqlCommand("SELECT   DATE_FORMAT(indents.I_date, '%d %b %y') AS I_date,branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS salevalue, branchmappingtable.SuperBranch FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo  WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch NOT IN (174,527,306,285,271,538,2749,282,172,2948,3928)) GROUP BY DATE(indents.I_date),branchmappingtable.SuperBranch");
                    //cmd = new MySqlCommand("SELECT  SubBranch, ROUND(SUM(DeliveryQty) ) AS DeliveryQty,  ROUND(SUM(DeliveryQty * UnitCost) ) AS salevalue, SuperBranch FROM  (SELECT  t1.SubBranch, t1.SuperBranch, t2.DeliveryQty, t2.unitQty, t2.UnitCost FROM (SELECT branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch FROM  branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch WHERE (branchmappingtable_1.SuperBranch = @branchid) AND (branchmappingtable_1.SubBranch IN(4609,3625)) GROUP BY branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch) t1 LEFT OUTER JOIN (SELECT  indents_subtable.DeliveryQty, indents_subtable.unitQty, indents_subtable.UnitCost, branchmappingtable_2.SuperBranch, branchmappingtable_2.SubBranch FROM   branchmappingtable branchmappingtable_2 INNER JOIN (SELECT  IndentNo, Branch_id, I_date FROM   indents WHERE  (I_date BETWEEN @d1 AND @d2)) ind ON branchmappingtable_2.SubBranch = ind.Branch_id INNER JOIN indents_subtable ON ind.IndentNo = indents_subtable.IndentNo) t2 ON t2.SuperBranch = t1.SubBranch) derivedtbl_1 GROUP BY SuperBranch");
                    cmd.Parameters.AddWithValue("@BranchID", drgrbranch["SubBranch"].ToString());
                    cmd.Parameters.AddWithValue("@d1", GetLowDate(fromdate).AddDays(-2));
                    cmd.Parameters.AddWithValue("@d2", GetHighDate(todate).AddDays(-2));
                    tempbranchindentsale = vdbmngr.SelectQuery(cmd).Tables[0];
                }
                else if (drgrbranch["SubBranch"].ToString() == "1801")
                {
                    cmd = new MySqlCommand("SELECT   DATE_FORMAT(indents.I_date, '%d %b %y') AS I_date,branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS salevalue, branchmappingtable.SuperBranch FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo  WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) GROUP BY DATE(indents.I_date),branchmappingtable.SuperBranch");

                    //cmd = new MySqlCommand("SELECT  SubBranch, ROUND(SUM(DeliveryQty) ) AS DeliveryQty,  ROUND(SUM(DeliveryQty * UnitCost) ) AS salevalue, SuperBranch FROM  (SELECT  t1.SubBranch, t1.SuperBranch, t2.DeliveryQty, t2.unitQty, t2.UnitCost FROM (SELECT branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch FROM  branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch WHERE (branchmappingtable_1.SuperBranch = @branchid) GROUP BY branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch) t1 LEFT OUTER JOIN (SELECT  indents_subtable.DeliveryQty, indents_subtable.unitQty, indents_subtable.UnitCost, branchmappingtable_2.SuperBranch, branchmappingtable_2.SubBranch FROM   branchmappingtable branchmappingtable_2 INNER JOIN (SELECT  IndentNo, Branch_id, I_date FROM   indents WHERE  (I_date BETWEEN @d1 AND @d2)) ind ON branchmappingtable_2.SubBranch = ind.Branch_id INNER JOIN indents_subtable ON ind.IndentNo = indents_subtable.IndentNo) t2 ON t2.SuperBranch = t1.SubBranch) derivedtbl_1 GROUP BY SuperBranch");
                    cmd.Parameters.AddWithValue("@BranchID", drgrbranch["SubBranch"].ToString());
                    cmd.Parameters.AddWithValue("@d1", GetLowDate(fromdate).AddDays(-2));
                    cmd.Parameters.AddWithValue("@d2", GetHighDate(todate).AddDays(-2));
                    tempbranchindentsale = vdbmngr.SelectQuery(cmd).Tables[0];
                }
                else if (drgrbranch["SubBranch"].ToString() == "158")
                {
                    cmd = new MySqlCommand("SELECT   DATE_FORMAT(indents.I_date, '%d %b %y') AS I_date,branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS salevalue, branchmappingtable.SuperBranch FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch NOT IN (159,4626)) GROUP BY DATE(indents.I_date),branchmappingtable.SuperBranch");
                    //cmd = new MySqlCommand("SELECT  SubBranch, ROUND(SUM(DeliveryQty) ) AS DeliveryQty,  ROUND(SUM(DeliveryQty * UnitCost) ) AS salevalue, SuperBranch FROM  (SELECT  t1.SubBranch, t1.SuperBranch, t2.DeliveryQty, t2.unitQty, t2.UnitCost FROM (SELECT branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch FROM  branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch WHERE (branchmappingtable_1.SuperBranch = @branchid) GROUP BY branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch) t1 LEFT OUTER JOIN (SELECT  indents_subtable.DeliveryQty, indents_subtable.unitQty, indents_subtable.UnitCost, branchmappingtable_2.SuperBranch, branchmappingtable_2.SubBranch FROM   branchmappingtable branchmappingtable_2 INNER JOIN (SELECT  IndentNo, Branch_id, I_date FROM   indents WHERE  (I_date BETWEEN @d1 AND @d2)) ind ON branchmappingtable_2.SubBranch = ind.Branch_id INNER JOIN indents_subtable ON ind.IndentNo = indents_subtable.IndentNo) t2 ON t2.SuperBranch = t1.SubBranch) derivedtbl_1 GROUP BY SuperBranch");
                    cmd.Parameters.AddWithValue("@BranchID", drgrbranch["SubBranch"].ToString());
                    cmd.Parameters.AddWithValue("@d1", GetLowDate(fromdate).AddDays(-2));
                    cmd.Parameters.AddWithValue("@d2", GetHighDate(todate).AddDays(-2));
                    tempbranchindentsale = vdbmngr.SelectQuery(cmd).Tables[0];

                    cmd = new MySqlCommand("SELECT  DATE_FORMAT(indent.I_date, '%d %b %y') AS I_date,ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty)) AS salevalue, indents_subtable.UnitCost, branchmappingtable.SuperBranch FROM (SELECT  IndentNo, Branch_id, I_date, Status, IndentType FROM  indents WHERE (I_date BETWEEN @d1 AND @d2) AND (Status <> 'D')) indent INNER JOIN branchdata ON indent.Branch_id = branchdata.sno INNER JOIN indents_subtable ON indent.IndentNo = indents_subtable.IndentNo INNER JOIN branchmappingtable ON branchdata.sno = branchmappingtable.SubBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable.SuperBranch = branchdata_1.sno WHERE (branchmappingtable.SuperBranch = @BranchID) AND (indents_subtable.DeliveryQty <> 0) GROUP BY DATE(indent.I_date),branchmappingtable.SuperBranch ORDER BY branchdata.BranchName");
                    //cmd = new MySqlCommand("SELECT  SubBranch, ROUND(SUM(DeliveryQty) ) AS DeliveryQty,  ROUND(SUM(DeliveryQty * UnitCost) ) AS salevalue, SuperBranch FROM  (SELECT  t1.SubBranch, t1.SuperBranch, t2.DeliveryQty, t2.unitQty, t2.UnitCost FROM (SELECT branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch FROM  branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch WHERE (branchmappingtable_1.SuperBranch = @branchid) GROUP BY branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch) t1 LEFT OUTER JOIN (SELECT  indents_subtable.DeliveryQty, indents_subtable.unitQty, indents_subtable.UnitCost, branchmappingtable_2.SuperBranch, branchmappingtable_2.SubBranch FROM   branchmappingtable branchmappingtable_2 INNER JOIN (SELECT  IndentNo, Branch_id, I_date FROM   indents WHERE  (I_date BETWEEN @d1 AND @d2)) ind ON branchmappingtable_2.SubBranch = ind.Branch_id INNER JOIN indents_subtable ON ind.IndentNo = indents_subtable.IndentNo) t2 ON t2.SuperBranch = t1.SubBranch) derivedtbl_1 GROUP BY SuperBranch");
                    cmd.Parameters.AddWithValue("@BranchID", drgrbranch["SubBranch"].ToString());
                    cmd.Parameters.AddWithValue("@d1", GetLowDate(fromdate).AddDays(-2));
                    cmd.Parameters.AddWithValue("@d2", GetHighDate(todate).AddDays(-2));
                    DataTable temptable = vdbmngr.SelectQuery(cmd).Tables[0];
                    tempbranchindentsale.Merge(temptable);
                }
                else
                {
                    cmd = new MySqlCommand("SELECT   DATE_FORMAT(indents.I_date, '%d %b %y') AS I_date,branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS salevalue, branchmappingtable.SuperBranch FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) GROUP BY DATE(indents.I_date),branchmappingtable.SuperBranch");
                    //cmd = new MySqlCommand("SELECT  SubBranch, ROUND(SUM(DeliveryQty) ) AS DeliveryQty,  ROUND(SUM(DeliveryQty * UnitCost) ) AS salevalue, SuperBranch FROM  (SELECT  t1.SubBranch, t1.SuperBranch, t2.DeliveryQty, t2.unitQty, t2.UnitCost FROM (SELECT branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch FROM  branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch WHERE (branchmappingtable_1.SuperBranch = @branchid) GROUP BY branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch) t1 LEFT OUTER JOIN (SELECT  indents_subtable.DeliveryQty, indents_subtable.unitQty, indents_subtable.UnitCost, branchmappingtable_2.SuperBranch, branchmappingtable_2.SubBranch FROM   branchmappingtable branchmappingtable_2 INNER JOIN (SELECT  IndentNo, Branch_id, I_date FROM   indents WHERE  (I_date BETWEEN @d1 AND @d2)) ind ON branchmappingtable_2.SubBranch = ind.Branch_id INNER JOIN indents_subtable ON ind.IndentNo = indents_subtable.IndentNo) t2 ON t2.SuperBranch = t1.SubBranch) derivedtbl_1 GROUP BY SuperBranch");
                    cmd.Parameters.AddWithValue("@BranchID", drgrbranch["SubBranch"].ToString());
                    cmd.Parameters.AddWithValue("@d1", GetLowDate(fromdate).AddDays(-2));
                    cmd.Parameters.AddWithValue("@d2", GetHighDate(todate).AddDays(-2));
                    tempbranchindentsale = vdbmngr.SelectQuery(cmd).Tables[0];
                }
                dtAll.Merge(tempbranchindentsale);
            }
            if (dtAll.Rows.Count > 0)
            {
                DataView view = new DataView(dtAll);
                distinctproducts = view.ToTable(true, "SuperBranch", "i_date");
            }
            DataTable Temptable = new DataTable();
            Temptable.Columns.Add("Sno");
            Temptable.Columns.Add("SuperBranch");
            Temptable.Columns.Add("BranchName");
            Temptable.Columns.Add("DeliveryQty");
            Temptable.Columns.Add("salevalue");
            Temptable.Columns.Add("i_date");
            foreach (DataRow drr in distinctproducts.Rows)
            {
                DataRow tempnewrow = Temptable.NewRow();
                double temptotsalevalue = 0, totalsale = 0;
                tempnewrow["SuperBranch"] = drr["SuperBranch"].ToString();
                string idate = "";
                foreach (DataRow drbranchname in BtGroupBranches.Select("SubBranch='" + drr["SuperBranch"].ToString() + "'"))
                {
                    tempnewrow["BranchName"] = drbranchname["BranchName"].ToString();
                    foreach (DataRow drindent in dtAll.Select("SuperBranch='" + drr["SuperBranch"].ToString() + "'AND i_date='" + drr["i_date"].ToString() + "'"))
                    {
                        double tempqty = 0;
                        double.TryParse(drindent["DeliveryQty"].ToString(), out tempqty);
                        double tempsalevalue = 0;
                        double.TryParse(drindent["salevalue"].ToString(), out tempsalevalue);
                        temptotsalevalue += tempsalevalue;
                        totalsale += tempqty;
                        idate = drindent["i_date"].ToString();
                        ServerDateCurrentdate = Convert.ToDateTime(drindent["i_date"].ToString()); ;
                        ServerDateCurrentdate = ServerDateCurrentdate.AddDays(1);
                        idate = ServerDateCurrentdate.ToString("dd/MMM");
                    }
                    tempnewrow["DeliveryQty"] = totalsale;
                    tempnewrow["salevalue"] = temptotsalevalue;
                    tempnewrow["i_date"] = idate;
                    Temptable.Rows.Add(tempnewrow);
                }
            }
            if (Temptable.Rows.Count > 0)
            {
                DataView view1 = new DataView(Temptable);
                distictbranches = view1.ToTable(true, "SuperBranch", "BranchName");
            }
            int i = 1;
            foreach (DataRow dr in distictbranches.Rows)
            {
                DataRow newrow = Report.NewRow();
                newrow["Sno"] = i++.ToString();
                newrow["BranchName"] = dr["BranchName"].ToString();
                string parlorname = dr["BranchName"].ToString();
                //string cmpid = dr["cmpid"].ToString();
                string branchid = dr["SuperBranch"].ToString();
                foreach (DataRow drDriver in Temptable.Rows)
                {
                    SalelDetails getattendance = new SalelDetails();

                    if (branchid == drDriver["SuperBranch"].ToString())
                    {
                        string logdate = "";
                        string totsalevalue = "";
                        string attendance_date = drDriver["i_date"].ToString();
                        if (attendance_date != "")
                        {
                            DateTime dtDoe = Convert.ToDateTime(attendance_date);
                            string strdate = dtDoe.ToString("dd/MMM");
                            DayOfWeek dow = dtDoe.DayOfWeek; //enum
                            string str = dow.ToString();
                            string columndate = strdate + "(" + str + ")";
                            logdate = columndate;
                            string salevalue = drDriver["DeliveryQty"].ToString();
                            if (salevalue != "")
                            {
                                double tsval = Convert.ToDouble(salevalue);
                                tsval = Math.Round(tsval, 0);
                                newrow[columndate] = tsval;
                                totsalevalue = tsval.ToString();
                            }
                            else
                            {
                                newrow[columndate] = "0";
                            }
                        }
                        else
                        {
                        }
                        string bid = drDriver["SuperBranch"].ToString();
                        newrow["Branchid"] = drDriver["SuperBranch"].ToString();
                        //getattendance.cmpid = cmpid;
                        getattendance.BranchName = parlorname;
                        getattendance.idate = logdate;
                        getattendance.salevalue = totsalevalue;
                        getattendance.Branchid = bid;
                        SalelDetailslist1.Add(getattendance);
                    }
                }
                Report.Rows.Add(newrow);
            }
            WeekDetailsClass obj2 = new WeekDetailsClass();
            obj2.SalelDetails = SalelDetailslist1;
            obj2.wweekcls = weekslist;
            totalweekslist.Add(obj2);
            string response = GetJson(totalweekslist);
            context.Response.Write(response);
            //}
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }
    private void GetLastweekBranchwiseSalesDetails(HttpContext context)
    {
        try
        {
            //
            vdbmngr = new VehicleDBMgr();
            DataTable Report = new DataTable();
            string BranchId = context.Request["branchname"];
            DateTime ServerDateCurrentdate = VehicleDBMgr.GetTime(vdbmngr.conn);
            DateTime lastMonday = DateTime.Now.AddDays(-6);
            while (lastMonday.DayOfWeek != DayOfWeek.Monday)
                lastMonday = lastMonday.AddDays(-1);

            DateTime fromdate = GetLowDate(lastMonday);
            DateTime todate = GetLowDate(lastMonday).AddDays(6);
            TimeSpan dateSpan = todate.Subtract(fromdate);
            int NoOfdays = dateSpan.Days;
            NoOfdays = NoOfdays + 2;
            DateTime monday = DateTime.Today.AddDays(-(int)DateTime.Today.DayOfWeek + (int)DayOfWeek.Monday);

            List<weekcls> weekslist = new List<weekcls>();
            List<SalelDetails> SalelDetailslist1 = new List<SalelDetails>();
            List<WeekDetailsClass> totalweekslist = new List<WeekDetailsClass>();
            DataTable distinctproducts = new DataTable();
            DataTable distictbranches = new DataTable();


            ArrayList al = new ArrayList();
            DataTable Sorttable = new DataTable();
            Report.Columns.Add("Sno");
            Report.Columns.Add("BranchId");
            Report.Columns.Add("BranchName");

            Sorttable.Columns.Add("Sno");
            Sorttable.Columns.Add("BranchId");
            Sorttable.Columns.Add("BranchName");

            int count = 0;
            DateTime dtFrm = new DateTime();
            for (int j = 1; j < NoOfdays; j++)
            {
                if (j == 1)
                {
                    dtFrm = fromdate.AddDays(-1);
                }
                else
                {
                    dtFrm = dtFrm.AddDays(1);
                }
                DayOfWeek dow = dtFrm.DayOfWeek; //enum
                string str = dow.ToString();
                string strdate = dtFrm.ToString("dd/MMM");
                string columndate = strdate + "(" + str + ")";
                Report.Columns.Add(columndate);
                weekcls obj1 = new weekcls();
                obj1.week = columndate;
                weekslist.Add(obj1);
                count++;
            }

            DataTable dtAll = new DataTable();

            DataTable tempbranchindentsale = new DataTable();
            DataTable dtDispatchesbranches = new DataTable();
            //string BranchID = "8009";
            cmd = new MySqlCommand("SELECT  branchmappingtable.SubBranch, branchmappingtable.SuperBranch, branchmappingtable.SubBranch AS Expr1, branchdata.BranchName,branchdata.SalesType FROM  branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno WHERE  (branchmappingtable.SuperBranch = @Branchid) GROUP BY branchmappingtable.SubBranch ORDER BY companyname, branchmappingtable.SubBranch");
            cmd.Parameters.AddWithValue("@Branchid", "8009");
            DataTable BtGroupBranches = vdbmngr.SelectQuery(cmd).Tables[0];
            //cmd = new MySqlCommand("SELECT    TripInfo.Sno, ProductInfo.Categoryname, ROUND(SUM(ProductInfo.Qty) ) AS dispatchqty, TripInfo.I_Date, ProductInfo.CatSno, TripInfo.BranchName, TripInfo.BranchID, TripInfo.Branch_Id, TripInfo.GroupId,TripInfo.CompanyId FROM (SELECT tripdata.Sno, tripdata.I_Date, branchdata_1.BranchName, dispatch.BranchID, dispatch.Branch_Id, dispatch.GroupId, dispatch.CompanyId FROM  branchdata INNER JOIN dispatch ON branchdata.sno = dispatch.Branch_Id INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN tripdata ON triproutes.Tripdata_sno = tripdata.Sno INNER JOIN branchdata branchdata_1 ON dispatch.Branch_Id = branchdata_1.sno WHERE (dispatch.GroupId = @branch) AND (tripdata.AssignDate BETWEEN @d1 AND @d2)) TripInfo INNER JOIN (SELECT Categoryname, Sno, Qty, CatSno FROM (SELECT  products_category.sno AS CatSno, products_category.Categoryname, tripdata_1.Sno, tripsubdata.Qty FROM tripdata tripdata_1 INNER JOIN tripsubdata ON tripdata_1.Sno = tripsubdata.Tripdata_sno INNER JOIN productsdata ON tripsubdata.ProductId = productsdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno WHERE (tripdata_1.AssignDate BETWEEN @d1 AND @d2)) TripSubInfo) ProductInfo ON TripInfo.Sno = ProductInfo.Sno GROUP BY TripInfo.Branch_Id ORDER BY TripInfo.CompanyId");
            //// cmd = new MySqlCommand("SELECT   dispatch.sno, branchdata.BranchName, dispatch.Branch_Id, dispatch.BranchID, ROUND(SUM(tripsubdata.Qty),2) AS dispatchqty FROM dispatch INNER JOIN branchdata ON dispatch.Branch_Id = branchdata.sno INNER JOIN triproutes ON dispatch.sno = triproutes.RouteID INNER JOIN (SELECT  Sno, I_Date FROM tripdata WHERE  (AssignDate BETWEEN @d1 AND @d2)) tripdat ON triproutes.Tripdata_sno = tripdat.Sno INNER JOIN tripsubdata ON tripdat.Sno = tripsubdata.Tripdata_sno WHERE (dispatch.GroupId  = @branchid)  GROUP BY dispatch.Branch_Id");
            //cmd.Parameters.AddWithValue("@branch", BranchID);
            //cmd.Parameters.AddWithValue("@d1", GetLowDate(fromdate));
            //cmd.Parameters.AddWithValue("@d2", GetHighDate(todate));
            //dtDispatchesbranches = vdbmngr.SelectQuery(cmd).Tables[0];
            //foreach (DataRow drgrbranch in BtGroupBranches.Rows)
            //{
            if (BranchId == "172")
            {

                cmd = new MySqlCommand("SELECT   DATE_FORMAT(indents.I_date, '%d %b %y') AS I_date,branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno AS SuperBranch FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch NOT IN (538 , 1801, 3625)) GROUP BY DATE(indents.I_date),branchdata.sno");
                cmd.Parameters.AddWithValue("@d1", GetLowDate(fromdate).AddDays(-2));
                cmd.Parameters.AddWithValue("@d2", GetHighDate(todate).AddDays(-2));
                cmd.Parameters.AddWithValue("@BranchID", BranchId);
                tempbranchindentsale = vdbmngr.SelectQuery(cmd).Tables[0];
            }
            else if (BranchId == "3625")
            {
                cmd = new MySqlCommand("SELECT   DATE_FORMAT(indents.I_date, '%d %b %y') AS I_date,branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno AS SuperBranch FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID) AND (branchmappingtable.SubBranch IN (4609, 3625)) GROUP BY DATE(indents.I_date),branchdata.sno");
                cmd.Parameters.AddWithValue("@d1", GetLowDate(fromdate).AddDays(-2));
                cmd.Parameters.AddWithValue("@d2", GetHighDate(todate).AddDays(-2));
                cmd.Parameters.AddWithValue("@BranchID", BranchId);
                tempbranchindentsale = vdbmngr.SelectQuery(cmd).Tables[0];
            }
            else if (BranchId == "1801")
            {
                cmd = new MySqlCommand("SELECT   DATE_FORMAT(indents.I_date, '%d %b %y') AS I_date,branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno AS SuperBranch FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID)  GROUP BY DATE(indents.I_date),branchdata.sno");
                cmd.Parameters.AddWithValue("@d1", GetLowDate(fromdate).AddDays(-2));
                cmd.Parameters.AddWithValue("@d2", GetHighDate(todate).AddDays(-2));
                cmd.Parameters.AddWithValue("@BranchID", BranchId);
                tempbranchindentsale = vdbmngr.SelectQuery(cmd).Tables[0];
            }
            else if (BranchId == "158")
            {
                cmd = new MySqlCommand("SELECT   DATE_FORMAT(indents.I_date, '%d %b %y') AS I_date,branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno AS SuperBranch FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID)  AND (branchmappingtable.SubBranch IN (457,458,570,572))  GROUP BY DATE(indents.I_date),branchdata.sno");
                cmd.Parameters.AddWithValue("@d1", GetLowDate(fromdate).AddDays(-2));
                cmd.Parameters.AddWithValue("@d2", GetHighDate(todate).AddDays(-2));
                cmd.Parameters.AddWithValue("@BranchID", BranchId);
                tempbranchindentsale = vdbmngr.SelectQuery(cmd).Tables[0];

                cmd = new MySqlCommand("SELECT DATE_FORMAT(indent.I_date, '%d %b %y') AS I_date,branchdata.BranchName,ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,  branchmappingtable.SuperBranch FROM (SELECT  IndentNo, Branch_id, I_date, Status, IndentType FROM  indents WHERE (I_date BETWEEN @d1 AND @d2) AND (Status <> 'D')) indent INNER JOIN branchdata ON indent.Branch_id = branchdata.sno INNER JOIN indents_subtable ON indent.IndentNo = indents_subtable.IndentNo INNER JOIN branchmappingtable ON branchdata.sno = branchmappingtable.SubBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable.SuperBranch = branchdata_1.sno WHERE (branchmappingtable.SuperBranch = @BranchID) AND (indents_subtable.DeliveryQty <> 0) GROUP BY DATE(indent.I_date),branchmappingtable.SuperBranch ORDER BY branchdata.BranchName");
                //cmd = new MySqlCommand("SELECT  SubBranch, ROUND(SUM(DeliveryQty) ) AS DeliveryQty,  ROUND(SUM(DeliveryQty * UnitCost) ) AS salevalue, SuperBranch FROM  (SELECT  t1.SubBranch, t1.SuperBranch, t2.DeliveryQty, t2.unitQty, t2.UnitCost FROM (SELECT branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch FROM  branchmappingtable INNER JOIN branchmappingtable branchmappingtable_1 ON branchmappingtable.SubBranch = branchmappingtable_1.SubBranch WHERE (branchmappingtable_1.SuperBranch = @branchid) GROUP BY branchmappingtable.SubBranch, branchmappingtable_1.SuperBranch) t1 LEFT OUTER JOIN (SELECT  indents_subtable.DeliveryQty, indents_subtable.unitQty, indents_subtable.UnitCost, branchmappingtable_2.SuperBranch, branchmappingtable_2.SubBranch FROM   branchmappingtable branchmappingtable_2 INNER JOIN (SELECT  IndentNo, Branch_id, I_date FROM   indents WHERE  (I_date BETWEEN @d1 AND @d2)) ind ON branchmappingtable_2.SubBranch = ind.Branch_id INNER JOIN indents_subtable ON ind.IndentNo = indents_subtable.IndentNo) t2 ON t2.SuperBranch = t1.SubBranch) derivedtbl_1 GROUP BY SuperBranch");
                cmd.Parameters.AddWithValue("@BranchID", BranchId);
                cmd.Parameters.AddWithValue("@d1", GetLowDate(fromdate).AddDays(-2));
                cmd.Parameters.AddWithValue("@d2", GetHighDate(todate).AddDays(-2));
                DataTable temptable = vdbmngr.SelectQuery(cmd).Tables[0];
                tempbranchindentsale.Merge(temptable);
            }
            else
            {
                cmd = new MySqlCommand("SELECT   DATE_FORMAT(indents.I_date, '%d %b %y') AS I_date,branchdata.BranchName, ROUND(SUM(indents_subtable.DeliveryQty) ) AS DeliveryQty,ROUND(AVG(indents_subtable.DeliveryQty) ) AS AvgQty, ROUND(SUM(indents_subtable.UnitCost * indents_subtable.DeliveryQty) ) AS SaleValue, branchdata.sno AS SuperBranch FROM branchmappingtable INNER JOIN branchdata ON branchmappingtable.SubBranch = branchdata.sno INNER JOIN branchmappingtable branchmappingtable_1 ON branchdata.sno = branchmappingtable_1.SuperBranch INNER JOIN branchdata branchdata_1 ON branchmappingtable_1.SubBranch = branchdata_1.sno INNER JOIN indents ON branchdata_1.sno = indents.Branch_id INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE  (indents.I_date BETWEEN @d1 AND @d2) AND (branchmappingtable.SuperBranch = @BranchID)  GROUP BY DATE(indents.I_date),branchdata.sno");
                cmd.Parameters.AddWithValue("@d1", GetLowDate(fromdate).AddDays(-2));
                cmd.Parameters.AddWithValue("@d2", GetHighDate(todate).AddDays(-2));
                cmd.Parameters.AddWithValue("@BranchID", BranchId);
                tempbranchindentsale = vdbmngr.SelectQuery(cmd).Tables[0];
            }
            dtAll.Merge(tempbranchindentsale);
            //}
            if (dtAll.Rows.Count > 0)
            {
                DataView view = new DataView(dtAll);
                distinctproducts = view.ToTable(true, "SuperBranch", "i_date", "BranchName");
            }
            DataTable Temptable = new DataTable();
            Temptable.Columns.Add("Sno");
            Temptable.Columns.Add("SuperBranch");
            Temptable.Columns.Add("BranchName");
            Temptable.Columns.Add("DeliveryQty");
            Temptable.Columns.Add("salevalue");
            Temptable.Columns.Add("i_date");
            foreach (DataRow drr in distinctproducts.Rows)
            {
                DataRow tempnewrow = Temptable.NewRow();
                double temptotsalevalue = 0, totalsale = 0;
                tempnewrow["SuperBranch"] = drr["SuperBranch"].ToString();
                if (drr["SuperBranch"].ToString() == "158")
                {
                    tempnewrow["BranchName"] = "Wyra Plant";
                }
                else
                {
                    tempnewrow["BranchName"] = drr["BranchName"].ToString();
                }
                string idate = "";
                //foreach (DataRow drbranchname in BtGroupBranches.Select("SubBranch='" + drr["SuperBranch"].ToString() + "'"))
                //{
                foreach (DataRow drindent in dtAll.Select("SuperBranch='" + drr["SuperBranch"].ToString() + "'AND i_date='" + drr["i_date"].ToString() + "'"))
                {
                    double tempqty = 0;
                    double.TryParse(drindent["DeliveryQty"].ToString(), out tempqty);
                    double tempsalevalue = 0;
                    double.TryParse(drindent["salevalue"].ToString(), out tempsalevalue);
                    temptotsalevalue += tempsalevalue;
                    totalsale += tempqty;
                    idate = drindent["i_date"].ToString();
                    ServerDateCurrentdate = Convert.ToDateTime(drindent["i_date"].ToString()); ;
                    ServerDateCurrentdate = ServerDateCurrentdate.AddDays(1);
                    idate = ServerDateCurrentdate.ToString("dd/MMM");
                }
                tempnewrow["DeliveryQty"] = totalsale;
                tempnewrow["salevalue"] = temptotsalevalue;
                tempnewrow["i_date"] = idate;
                Temptable.Rows.Add(tempnewrow);
                //}
            }
            if (Temptable.Rows.Count > 0)
            {
                DataView view1 = new DataView(Temptable);
                distictbranches = view1.ToTable(true, "SuperBranch", "BranchName");
            }
            int i = 1;
            foreach (DataRow dr in distictbranches.Rows)
            {
                DataRow newrow = Report.NewRow();
                newrow["Sno"] = i++.ToString();
                newrow["BranchName"] = dr["BranchName"].ToString();
                string parlorname = dr["BranchName"].ToString();
                //string cmpid = dr["cmpid"].ToString();
                string branchid = dr["SuperBranch"].ToString();
                foreach (DataRow drDriver in Temptable.Rows)
                {
                    SalelDetails getattendance = new SalelDetails();

                    if (branchid == drDriver["SuperBranch"].ToString())
                    {
                        string logdate = "";
                        string totsalevalue = "";
                        string attendance_date = drDriver["i_date"].ToString();
                        if (attendance_date != "")
                        {
                            DateTime dtDoe = Convert.ToDateTime(attendance_date);
                            string strdate = dtDoe.ToString("dd/MMM");
                            DayOfWeek dow = dtDoe.DayOfWeek; //enum
                            string str = dow.ToString();
                            string columndate = strdate + "(" + str + ")";
                            logdate = columndate;
                            string salevalue = drDriver["DeliveryQty"].ToString();
                            if (salevalue != "")
                            {
                                double tsval = Convert.ToDouble(salevalue);
                                tsval = Math.Round(tsval, 0);
                                newrow[columndate] = tsval;
                                totsalevalue = tsval.ToString();
                            }
                            else
                            {
                                newrow[columndate] = "0";
                            }
                        }
                        else
                        {
                        }
                        string bid = drDriver["SuperBranch"].ToString();
                        newrow["Branchid"] = drDriver["SuperBranch"].ToString();
                        //getattendance.cmpid = cmpid;
                        getattendance.BranchName = parlorname;
                        getattendance.idate = logdate;
                        getattendance.salevalue = totsalevalue;
                        getattendance.Branchid = bid;
                        SalelDetailslist1.Add(getattendance);
                    }
                }
                Report.Rows.Add(newrow);
            }
            WeekDetailsClass obj2 = new WeekDetailsClass();
            obj2.SalelDetails = SalelDetailslist1;
            obj2.wweekcls = weekslist;
            totalweekslist.Add(obj2);
            string response = GetJson(totalweekslist);
            context.Response.Write(response);
            //}
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }
    public class SalelDetails
    {
        public string categoeryname { set; get; }
        public string productname { set; get; }
        public string value { set; get; }
        public string Deliverqty { set; get; }
        public string idate { set; get; }
        public string idate1 { set; get; }
        public string idate2 { set; get; }
        public string idate3 { set; get; }
        public string idate4 { set; get; }
        public string idate5 { set; get; }
        public string week1 { set; get; }
        public string week2 { set; get; }
        public string week3 { set; get; }
        public string week4 { set; get; }
        public string week5 { set; get; }
        public string Rate { set; get; }
        public string LeakQty { set; get; }
        public string ReturnQty { set; get; }
        public string ShortQty { set; get; }
        public string NetQty { set; get; }
        public string productid { set; get; }
        public string Branchid { set; get; }
        public string BranchName { set; get; }
        public string salevalue { set; get; }
        public string produtandBranchid { set; get; }
        public string ddltype { set; get; }
        public string wbranchid { get; set; }
        public string type { get; set; }
        public string weekname { get; set; }
        public string fromdate { get; set; }
        public string todate { get; set; }
        public string month { get; set; }
        public string catid { get; set; }
        public string weeknumbers { get; set; }
    }
    public class weekcls
    {
        public string week { get; set; }
        public string status { get; set; }
    }
    public class WeekDetailsClass
    {
        public List<SalelDetails> SalelDetails { get; set; }
        public List<weekcls> wweekcls { get; set; }
    }
    public string indent_date { get; set; }
    public string fromdate { get; set; }
    public string dtcleardate { get; set; }
    public string BranchAmount { get; set; }
    private void btnsave_incentivemasterdetails(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            var js = new JavaScriptSerializer();
            var title1 = context.Request.Params[1];
            CashForms obj = js.Deserialize<CashForms>(title1);
            string inserntivetype = obj.inserntivetype;
            string SalesOfficeid = obj.SalesOfficeid;
            string Routeid = obj.Routeid;
            string agentid = obj.agentid;
            string structureexistornot = obj.structureexistornot;
            string frmdate = obj.frmdate;
            string todate = obj.todate;
            string btnSave = obj.btnSave;
            string Remarks = obj.Remarks;
            string EmpApprove = obj.EmpApprove;
            string LevelType = context.Session["LevelType"].ToString();
            DateTime ServerDateCurrentdate = VehicleDBMgr.GetTime(vdbmngr.conn);
            string msg = "";
            if (btnSave == "Save")
            {
                cmd = new MySqlCommand("Insert INTO incentive_maindetails (incentivetype, branchid, routeid, agentid, structuretype, leakage, fromdate, todate, remarks, createdby, approvedby, createddate, status) Values (@incentivetype, @branchid, @routeid, @agentid, @structuretype, @leakage, @fromdate, @todate, @remarks, @Created_by, @approvedby, @createddate, @status)");
                cmd.Parameters.AddWithValue("@incentivetype", inserntivetype);
                cmd.Parameters.AddWithValue("@branchid", SalesOfficeid);
                cmd.Parameters.AddWithValue("@routeid", Routeid);
                cmd.Parameters.AddWithValue("@agentid", agentid);
                cmd.Parameters.AddWithValue("@structuretype", structureexistornot);
                cmd.Parameters.AddWithValue("@leakage", "0");
                cmd.Parameters.AddWithValue("@fromdate", Convert.ToDateTime(frmdate));
                cmd.Parameters.AddWithValue("@todate", Convert.ToDateTime(todate));
                cmd.Parameters.AddWithValue("@remarks", Remarks);
                cmd.Parameters.AddWithValue("@approvedby", EmpApprove);
                cmd.Parameters.AddWithValue("@Created_by", context.Session["UserSno"].ToString());
                cmd.Parameters.AddWithValue("@createddate", ServerDateCurrentdate);
                cmd.Parameters.AddWithValue("@status", "P");
                vdbmngr.insert(cmd);


                //cmd = new MySqlCommand("insert into incentive_maindetails (incentivetype,branchid,routeid,agentid,structuretype,leakage,fromdate,todate,remarks,createdby) values (@incentivetype,@branchid,@routeid, @agentid,@structuretype,@leakage,@fromdate,@todate,)");
                //cmd.Parameters.AddWithValue("@incentivetype", inserntivetype);
                //cmd.Parameters.AddWithValue("@branchid", SalesOfficeid);
                //cmd.Parameters.AddWithValue("@routeid", Routeid);
                //cmd.Parameters.AddWithValue("@agentid", agentid);
                //cmd.Parameters.AddWithValue("@structuretype", structureexistornot);
                //cmd.Parameters.AddWithValue("@leakage", "0");
                //cmd.Parameters.AddWithValue("@fromdate", Convert.ToDateTime(frmdate));
                //cmd.Parameters.AddWithValue("@todate", Convert.ToDateTime(todate));
                //vdbmngr.insert(cmd);
                cmd = new MySqlCommand("Select MAX(sno) as Sno from incentive_maindetails where branchid=@BranchID");
                cmd.Parameters.AddWithValue("@BranchID", SalesOfficeid);
                DataTable dtrank = vdbmngr.SelectQuery(cmd).Tables[0];
                string CSno = dtrank.Rows[0]["Sno"].ToString();
                // long CSno = vdbmngr.insertScalar(cmd);
                foreach (CashDetails o in obj.CashDetails)
                {
                    cmd = new MySqlCommand("Insert into incentive_subdetails (refno,productid,amount, agentid) values (@RefNo,@HeadSno,@Amount,@sagentid)");
                    cmd.Parameters.AddWithValue("@RefNo", CSno);
                    cmd.Parameters.AddWithValue("@HeadSno", o.SNo);
                    cmd.Parameters.AddWithValue("@Amount", o.amount);
                    cmd.Parameters.AddWithValue("@sagentid", agentid);
                    vdbmngr.insert(cmd);
                }
                msg = "Incentive Added successfully";
            }
            else
            {

            }
            string response = GetJson(msg);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string msg = ex.Message;
            string response = GetJson(msg);
            context.Response.Write(response);
        }
    }
    private void Getinsentivrdetails(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            string empid = context.Session["empid"].ToString();
            cmd = new MySqlCommand("SELECT incentive_maindetails.sno, incentive_maindetails.branchid, incentive_maindetails.routeid, incentive_maindetails.agentid, branchdata.BranchName AS Salesoffice, branchroutes.RouteName, incentive_maindetails.incentivetype,  incentive_maindetails.fromdate, incentive_maindetails.todate, incentive_maindetails.status, incentive_maindetails.remarks, branchdata_1.BranchName as AgentName FROM            incentive_maindetails INNER JOIN   branchdata ON incentive_maindetails.branchid = branchdata.sno INNER JOIN branchroutes ON incentive_maindetails.routeid = branchroutes.Sno INNER JOIN  branchdata branchdata_1 ON incentive_maindetails.agentid = branchdata_1.sno");
            //cmd.Parameters.AddWithValue("@empid", empid);
            DataTable routes = vdbmngr.SelectQuery(cmd).Tables[0];
            List<CashForms> insentivelist = new List<CashForms>();
            foreach (DataRow dr in routes.Rows)
            {
                CashForms getinsentivedetails = new CashForms();
                getinsentivedetails.SalesOfficeid = dr["branchid"].ToString();
                getinsentivedetails.SalesOfficeName = dr["Salesoffice"].ToString();
                getinsentivedetails.Routeid = dr["routeid"].ToString();
                getinsentivedetails.Routename = dr["RouteName"].ToString();
                getinsentivedetails.agentid = dr["agentid"].ToString();
                getinsentivedetails.Agentname = dr["AgentName"].ToString();
                getinsentivedetails.frmdate = dr["fromdate"].ToString();
                getinsentivedetails.todate = dr["todate"].ToString();
                getinsentivedetails.status = dr["status"].ToString();
                getinsentivedetails.incentivesno = dr["sno"].ToString();
                getinsentivedetails.Remarks = dr["remarks"].ToString();
                getinsentivedetails.inserntivetype = dr["incentivetype"].ToString();
                insentivelist.Add(getinsentivedetails);
            }
            string response = GetJson(insentivelist);
            context.Response.Write(response);
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }
    private void getincentivependingdetails(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            string soid = context.Request["BranchID"].ToString();
            string routeid = context.Request["routeid"].ToString();
            string incentivetype = context.Request["incentivetype"].ToString();
            string month = context.Request["month"].ToString();
            DateTime ServerDateCurrentdate = VehicleDBMgr.GetTime(vdbmngr.conn);
            //string year = ServerDateCurrentdate.Year;

            DateTime startDate = new DateTime(ServerDateCurrentdate.Year, Convert.ToInt32(month), 1);
            int mnth = ServerDateCurrentdate.Month;
            if (mnth == 1)
            {
                startDate = new DateTime(ServerDateCurrentdate.Year - 1, Convert.ToInt32(month), 1);
            }

            DateTime endDate = startDate.AddMonths(1).AddDays(-1);
            cmd = new MySqlCommand("SELECT sno, FromDate, Todate, StructureName, BranchId, EntryDate, ActualDiscount, TotalDiscount, Remarks, structure_sno, leakagepercent, DueClear FROM incentivetransactions WHERE FromDate between @d1 and @d2");
            cmd.Parameters.AddWithValue("@d1", GetLowDate(startDate));
            cmd.Parameters.AddWithValue("@d2", GetHighDate(endDate));
            DataTable dtincentivedata = vdbmngr.SelectQuery(cmd).Tables[0];

            cmd = new MySqlCommand("SELECT branchdata.sno, branchdata.BranchName FROM branchroutesubtable INNER JOIN branchroutes ON branchroutesubtable.RefNo = branchroutes.Sno INNER JOIN branchdata ON branchroutesubtable.BranchID = branchdata.sno INNER JOIN dispatch_sub ON branchroutes.Sno = dispatch_sub.Route_id WHERE (branchdata.flag = @flag) AND (dispatch_sub.dispatch_sno = @DispSno)");
            cmd.Parameters.AddWithValue("@DispSno", routeid);
            cmd.Parameters.AddWithValue("@flag", "1");
            DataTable dtbranchdata = vdbmngr.SelectQuery(cmd).Tables[0];
            DataTable Report = new DataTable();
            Report.Columns.Add("sno");
            Report.Columns.Add("AgentId");
            Report.Columns.Add("AgentName");
            Report.Columns.Add("FromDate");
            Report.Columns.Add("Todate");
            Report.Columns.Add("IncentiveAmout");
            Report.Columns.Add("LeakagePercent");
            Report.Columns.Add("Remarks");
            if (dtbranchdata.Rows.Count > 0)
            {
                foreach (DataRow dr in dtbranchdata.Rows)
                {
                    DataRow newrow = Report.NewRow();
                    string agentid = dr["sno"].ToString();

                    foreach (DataRow dri in dtincentivedata.Select("BranchId='" + agentid + "'"))
                    {
                        newrow["AgentId"] = agentid;
                        newrow["AgentName"] = dr["BranchName"].ToString();
                        string incentiveamt = dri["TotalDiscount"].ToString();
                        string leakpercent = dri["leakagepercent"].ToString();
                        string Remarks = dri["Remarks"].ToString();
                        newrow["sno"] = dri["sno"].ToString();
                        newrow["FromDate"] = startDate.ToString("dd/MM/yyyy");
                        newrow["Todate"] = endDate.ToString("dd/MM/yyyy");
                        newrow["IncentiveAmout"] = incentiveamt;
                        newrow["LeakagePercent"] = leakpercent;
                        newrow["Remarks"] = Remarks;
                        Report.Rows.Add(newrow);
                    }
                }
                if (Report.Rows.Count > 0)
                {
                    List<CashForms> insentivelist = new List<CashForms>();
                    foreach (DataRow dr in Report.Rows)
                    {
                        CashForms getinsentivedetails = new CashForms();
                        getinsentivedetails.agentid = dr["AgentId"].ToString();
                        getinsentivedetails.Agentname = dr["AgentName"].ToString();
                        getinsentivedetails.frmdate = dr["FromDate"].ToString();
                        getinsentivedetails.todate = dr["Todate"].ToString();
                        getinsentivedetails.Amount = dr["IncentiveAmout"].ToString();
                        getinsentivedetails.leakpercent = dr["LeakagePercent"].ToString();
                        getinsentivedetails.Remarks = dr["Remarks"].ToString();
                        getinsentivedetails.incentivesno = dr["sno"].ToString();
                        insentivelist.Add(getinsentivedetails);
                    }
                    string response = GetJson(insentivelist);
                    context.Response.Write(response);
                }
            }
        }
        catch (Exception ex)
        {
            string Response = GetJson(ex.Message);
            context.Response.Write(Response);
        }
    }
    public class approveincentive
    {
        public string btnval { set; get; }
        public string fromdate { get; set; }
        public string sofid { get; set; }
        public List<fillstockclosing> fillstockclosing { set; get; }

    }
    public class fillstockclosing
    {
        public string soid { set; get; }
        public string Agentname { set; get; }
        public string frmdate { set; get; }
        public string todate { set; get; }
        public string Amount { set; get; }
        public string leakpercent { set; get; }
        public string Remarks { set; get; }
        public string incentivesno { set; get; }
        public string agentid { set; get; }
    }
    private void approveincentivependingdetails(HttpContext context)
    {

        try
        {
            vdbmngr = new VehicleDBMgr();
            string DenominationString = "";
            string ReturnDenominationString = "";
            string CashReceiptNo = "0";
            string ChequeNo = "0";
            string PaymentType = "Incentive";
            string Username = "1";
            string HeadSno = "";
            string Remarks = "";
            string UserSno = context.Session["UserSno"].ToString();
            string BranchID = context.Session["branch"].ToString();
            DateTime ServerDateCurrentdate = VehicleDBMgr.GetTime(vdbmngr.conn);
            var js = new JavaScriptSerializer();
            var title1 = context.Request.Params[1];
            approveincentive obj = js.Deserialize<approveincentive>(title1);
            string btnaddmodify = obj.btnval;
            string paydate = obj.fromdate;
            string sofficeid = obj.sofid;
            DateTime paymentdate = Convert.ToDateTime(paydate);
            cmd = new MySqlCommand("SELECT Sno, BranchId, HeadName, LimitAmount, AccountType, AgentID, EmpID, accountcode, flag FROM accountheads WHERE (BranchId = @BranchID) AND (HeadName LIKE '%Sales Discount%')");
            cmd.Parameters.AddWithValue("@BranchID", sofficeid);
            DataTable dtincentive = vdbmngr.SelectQuery(cmd).Tables[0];
            if (dtincentive.Rows.Count > 0)
            {
                HeadSno = dtincentive.Rows[0]["Sno"].ToString();
            }
            if (btnaddmodify == "Save")
            {
                foreach (fillstockclosing o in obj.fillstockclosing)
                {
                    string agentname = o.Agentname;
                    string agentid = o.agentid;
                    string amount = o.Amount;
                    string fromdate = o.frmdate;
                    string todate = o.todate;
                    cmd = new MySqlCommand("INSERT INTO collections (Branchid, AmountPaid, Denominations, Remarks, PaidDate, UserData_sno, PaymentType, ReturnDenomin, PayTime, EmpID, ChequeNo, ReceiptNo,headsno) VALUES (@Branchid, @AmountPaid, @Denominations, @Remarks, @PaidDate, @UserData_sno, @PaymentType, @ReturnDenomin, @PayTime, @EmpID, @ChequeNo,@ReceiptNo,@headsno)");
                    cmd.Parameters.AddWithValue("@Branchid", agentid);//salesofficeid//agentid
                    cmd.Parameters.AddWithValue("@AmountPaid", amount);
                    cmd.Parameters.AddWithValue("@Remarks", Remarks);
                    cmd.Parameters.AddWithValue("@headsno", HeadSno);
                    cmd.Parameters.AddWithValue("@PaidDate", paymentdate);
                    cmd.Parameters.AddWithValue("@PayTime", paymentdate);
                    cmd.Parameters.AddWithValue("@UserData_sno", Username);
                    cmd.Parameters.AddWithValue("@PaymentType", PaymentType);
                    cmd.Parameters.AddWithValue("@EmpID", UserSno);
                    cmd.Parameters.AddWithValue("@ChequeNo", ChequeNo);
                    cmd.Parameters.AddWithValue("@ReceiptNo", CashReceiptNo);
                    cmd.Parameters.AddWithValue("@Denominations", DenominationString);
                    cmd.Parameters.AddWithValue("@ReturnDenomin", ReturnDenominationString);
                    vdbmngr.insert(cmd);

                    cmd = new MySqlCommand("Update branchaccounts set Amount=Amount-@Amount where BranchId=@BranchId");
                    cmd.Parameters.AddWithValue("@Amount", amount);
                    cmd.Parameters.AddWithValue("@BranchId", agentid);
                    vdbmngr.Update(cmd);

                    cmd = new MySqlCommand("SELECT sno, agentid, opp_balance, inddate, paidamount, salesvalue, clo_balance FROM agent_bal_trans WHERE agentid=@agentid AND inddate between @d1 and @d2");
                    cmd.Parameters.AddWithValue("@agentid", agentid);
                    cmd.Parameters.AddWithValue("@d1", GetLowDate(paymentdate).AddDays(-1));
                    cmd.Parameters.AddWithValue("@d2", GetHighDate(paymentdate).AddDays(-1));
                    DataTable dtagenttrans = vdbmngr.SelectQuery(cmd).Tables[0];
                    if (dtagenttrans.Rows.Count > 0)
                    {

                        string maxsno = dtagenttrans.Rows[0]["sno"].ToString();
                        double oppbalance = 0;
                        double.TryParse(dtagenttrans.Rows[0]["opp_balance"].ToString(), out oppbalance);

                        double salesvalue = 0;
                        double.TryParse(dtagenttrans.Rows[0]["salesvalue"].ToString(), out salesvalue);

                        double clobalance = 0;
                        double.TryParse(dtagenttrans.Rows[0]["clo_balance"].ToString(), out clobalance);

                        double prevpaidamount = 0;
                        double.TryParse(dtagenttrans.Rows[0]["paidamount"].ToString(), out prevpaidamount);

                        double incentiveamount = 0;
                        double.TryParse(amount, out incentiveamount);

                        double totalsalevalueamount = oppbalance + salesvalue;
                        double totpaidamount = prevpaidamount + incentiveamount;
                        double totalclosingvalue = totalsalevalueamount - totpaidamount;

                        cmd = new MySqlCommand("Insert into agent_bal_trans_history(refno, paidamount, cashtype, createddate, entryby) values (@refno,@paidamount,@cashtype,@doe,@entryby)");
                        cmd.Parameters.AddWithValue("@refno", maxsno);
                        cmd.Parameters.AddWithValue("@paidamount", incentiveamount);
                        cmd.Parameters.AddWithValue("@cashtype", PaymentType);
                        cmd.Parameters.AddWithValue("@doe", ServerDateCurrentdate);
                        cmd.Parameters.AddWithValue("@entryby", context.Session["UserSno"].ToString());
                        vdbmngr.insert(cmd);
                        cmd = new MySqlCommand("UPDATE agent_bal_trans SET paidamount=@paidamount, clo_balance=@closing where sno=@refno");
                        cmd.Parameters.AddWithValue("@paidamount", totpaidamount);
                        cmd.Parameters.AddWithValue("@refno", maxsno);
                        cmd.Parameters.AddWithValue("@closing", totalclosingvalue);
                        vdbmngr.Update(cmd);

                        cmd = new MySqlCommand("SELECT sno, agentid, opp_balance, inddate, salesvalue, clo_balance, paidamount FROM agent_bal_trans WHERE agentid=@agentid AND inddate between @d1 and @d2");
                        cmd.Parameters.AddWithValue("@agentid", agentid);
                        cmd.Parameters.AddWithValue("@d1", GetLowDate(paymentdate));
                        cmd.Parameters.AddWithValue("@d2", GetHighDate(ServerDateCurrentdate));
                        DataTable dtIndentbal = vdbmngr.SelectQuery(cmd).Tables[0];
                        if (dtIndentbal.Rows.Count > 0)
                        {
                            foreach (DataRow dr in dtIndentbal.Rows)
                            {
                                string sno = dr["sno"].ToString();
                                double existoppbal = 0;
                                double opp_balance = 0;
                                double.TryParse(dr["opp_balance"].ToString(), out opp_balance);
                                existoppbal = opp_balance - incentiveamount;

                                double existclovalue = 0;
                                double clo_balance = 0;
                                double.TryParse(dr["clo_balance"].ToString(), out clo_balance);
                                existclovalue = clo_balance - incentiveamount;

                                cmd = new MySqlCommand("UPDATE agent_bal_trans SET opp_balance=@oppbal, clo_balance=@closing where sno=@refno");
                                cmd.Parameters.AddWithValue("@oppbal", existoppbal);
                                cmd.Parameters.AddWithValue("@refno", sno);
                                cmd.Parameters.AddWithValue("@closing", existclovalue);
                                vdbmngr.Update(cmd);
                            }
                        }
                    }
                    else
                    {
                        cmd = new MySqlCommand("SELECT max(sno) as sno FROM agent_bal_trans WHERE agentid=@agentid");
                        cmd.Parameters.AddWithValue("@agentid", agentid);
                        DataTable dtlasttrans = vdbmngr.SelectQuery(cmd).Tables[0];
                        if (dtlasttrans.Rows.Count > 0)
                        {
                            string maxsno = dtlasttrans.Rows[0]["sno"].ToString();
                            cmd = new MySqlCommand("SELECT sno, agentid, opp_balance, inddate, paidamount, salesvalue, clo_balance FROM agent_bal_trans WHERE sno=@sno");
                            cmd.Parameters.AddWithValue("@sno", maxsno);
                            DataTable dtmaxtrans = vdbmngr.SelectQuery(cmd).Tables[0];
                            if (dtmaxtrans.Rows.Count > 0)
                            {
                                double oppbalance = 0;
                                double.TryParse(dtmaxtrans.Rows[0]["opp_balance"].ToString(), out oppbalance);

                                double salesvalue = 0;
                                double.TryParse(dtmaxtrans.Rows[0]["salesvalue"].ToString(), out salesvalue);

                                double clobalance = 0;
                                double.TryParse(dtmaxtrans.Rows[0]["clo_balance"].ToString(), out clobalance);

                                double prevpaidamount = 0;
                                double.TryParse(dtmaxtrans.Rows[0]["paidamount"].ToString(), out prevpaidamount);

                                double incentiveamount = 0;
                                double.TryParse(amount, out incentiveamount);

                                double totalsalevalueamount = oppbalance + salesvalue;
                                double totpaidamount = prevpaidamount + incentiveamount;
                                double totalclosingvalue = totalsalevalueamount - totpaidamount;

                                cmd = new MySqlCommand("Insert into agent_bal_trans_history(refno, paidamount, cashtype, createddate, entryby) values (@refno,@paidamount,@cashtype,@doe,@entryby)");
                                cmd.Parameters.AddWithValue("@refno", maxsno);
                                cmd.Parameters.AddWithValue("@paidamount", incentiveamount);
                                cmd.Parameters.AddWithValue("@cashtype", PaymentType);
                                cmd.Parameters.AddWithValue("@doe", ServerDateCurrentdate);
                                cmd.Parameters.AddWithValue("@entryby", context.Session["UserSno"].ToString());
                                vdbmngr.insert(cmd);


                                cmd = new MySqlCommand("UPDATE agent_bal_trans SET paidamount=@paidamount, clo_balance=@closing where sno=@refno and inddate=@d1");
                                cmd.Parameters.AddWithValue("@paidamount", totpaidamount);
                                cmd.Parameters.AddWithValue("@refno", maxsno);
                                cmd.Parameters.AddWithValue("@closing", totalclosingvalue);
                                cmd.Parameters.AddWithValue("@d1", GetLowDate(paymentdate).AddDays(-1));
                                if (vdbmngr.Update(cmd) == 0)
                                {
                                    double clsvalue = clobalance - incentiveamount;
                                    cmd = new MySqlCommand("INSERT INTO agent_bal_trans(agentid, opp_balance, inddate, salesvalue, clo_balance, paidamount,createdate, entryby) VALUES (@agentid, @oppbalance, @inddate, @salesvalue, @clobalance, @paidamount,@createdate, @entryby)");
                                    cmd.Parameters.AddWithValue("@agentid", agentid);
                                    cmd.Parameters.AddWithValue("@oppbalance", clobalance);
                                    cmd.Parameters.AddWithValue("@inddate", paymentdate.AddDays(-1));
                                    cmd.Parameters.AddWithValue("@salesvalue", "0");
                                    cmd.Parameters.AddWithValue("@clobalance", clsvalue);
                                    cmd.Parameters.AddWithValue("@paidamount", incentiveamount);
                                    cmd.Parameters.AddWithValue("@createdate", ServerDateCurrentdate);
                                    cmd.Parameters.AddWithValue("@entryby", context.Session["UserSno"].ToString());
                                    vdbmngr.insert(cmd);
                                }
                                cmd = new MySqlCommand("SELECT sno, agentid, opp_balance, inddate, salesvalue, clo_balance, paidamount FROM agent_bal_trans WHERE agentid=@agentid AND inddate between @d1 and @d2");
                                cmd.Parameters.AddWithValue("@agentid", BranchID);
                                cmd.Parameters.AddWithValue("@d1", GetLowDate(paymentdate));
                                cmd.Parameters.AddWithValue("@d2", GetHighDate(ServerDateCurrentdate));
                                DataTable dtIndentbal = vdbmngr.SelectQuery(cmd).Tables[0];
                                if (dtIndentbal.Rows.Count > 0)
                                {
                                    foreach (DataRow dr in dtIndentbal.Rows)
                                    {
                                        string sno = dr["sno"].ToString();
                                        double existoppbal = 0;
                                        double opp_balance = 0;
                                        double.TryParse(dr["opp_balance"].ToString(), out opp_balance);
                                        existoppbal = opp_balance - incentiveamount;

                                        double existclovalue = 0;
                                        double clo_balance = 0;
                                        double.TryParse(dr["clo_balance"].ToString(), out clo_balance);
                                        existclovalue = clo_balance - incentiveamount;

                                        cmd = new MySqlCommand("UPDATE agent_bal_trans SET opp_balance=@oppbal, clo_balance=@closing where sno=@refno");
                                        cmd.Parameters.AddWithValue("@oppbal", existoppbal);
                                        cmd.Parameters.AddWithValue("@refno", sno);
                                        cmd.Parameters.AddWithValue("@closing", existclovalue);
                                        vdbmngr.Update(cmd);
                                    }
                                }
                            }
                        }
                    }
                }
                var jsonSerializer = new JavaScriptSerializer();
                var jsonString = String.Empty;
                context.Request.InputStream.Position = 0;
                using (var inputStream = new StreamReader(context.Request.InputStream))
                {
                    jsonString = inputStream.ReadToEnd();
                }
                List<string> MsgList = new List<string>();
                string msg = "Data Successfully Saved";
                MsgList.Add(msg);
                string response = GetJson(MsgList);
                context.Response.Write(response);
            }
        }
        catch (Exception ex)
        {
            string msg = ex.Message;
            string response = GetJson(msg);
            context.Response.Write(response);
        }
    }
    private void viewincentivependingdetails(HttpContext context)
    {
        try
        {
            VehicleDBMgr vdm = new VehicleDBMgr();
            string agentname = context.Request["agentname"].ToString();
            string agentid = context.Request["agentid"].ToString();
            string routeid = context.Request["routeid"].ToString();
            string soid = context.Request["soid"].ToString();
            string month = context.Request["month"].ToString();
            double Totalmilksale = 0;
            double Totalbulkmilksale = 0;
            double Totalbulkmilksaleamount = 0;
            DateTime ServerDateCurrentdate = VehicleDBMgr.GetTime(vdbmngr.conn);
            //string year = ServerDateCurrentdate.Year;
            DateTime startDate = new DateTime(ServerDateCurrentdate.Year, Convert.ToInt32(month), 1);
            DateTime endDate = startDate.AddMonths(1).AddDays(-1);
            DateTime fromdate = startDate;
            Report = new DataTable();
            DateTime todate = endDate;
            context.Session["filename"] = "Incentive For -> " + agentname;
            cmd = new MySqlCommand("SELECT sno, FromDate, Todate, StructureName, BranchId, EntryDate, ActualDiscount, TotalDiscount, Remarks, structure_sno, leakagepercent, DueClear FROM incentivetransactions WHERE (FromDate BETWEEN @d1 AND @d2) AND (BranchId = @BranchId)");
            cmd.Parameters.AddWithValue("@branchid", agentid);
            cmd.Parameters.AddWithValue("@d1", GetLowDate(fromdate.AddDays(-1)));
            cmd.Parameters.AddWithValue("@d2", GetHighDate(todate.AddDays(-1)));
            DataTable dtstructuresno = vdm.SelectQuery(cmd).Tables[0];

            string structuresno = dtstructuresno.Rows[0]["structure_sno"].ToString();
            string leakpercent = dtstructuresno.Rows[0]["leakagepercent"].ToString();
            string incentivegiven = dtstructuresno.Rows[0]["TotalDiscount"].ToString();
            string remarks = dtstructuresno.Rows[0]["Remarks"].ToString();
            cmd = new MySqlCommand("SELECT productsdata.sno, productsdata.ProductName, product_clubbing.ClubName, incentive_structure.StructureName, product_clubbing.sno AS clubbingsno,products_category.Categoryname, products_subcategory.category_sno FROM incentive_structure INNER JOIN incentive_struct_sub ON incentive_structure.sno = incentive_struct_sub.is_sno INNER JOIN product_clubbing ON incentive_struct_sub.clubbingID = product_clubbing.sno INNER JOIN subproductsclubbing ON product_clubbing.sno = subproductsclubbing.Clubsno INNER JOIN productsdata ON subproductsclubbing.Productid = productsdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno WHERE (incentive_structure.sno = @StructureID) ");
            cmd.Parameters.AddWithValue("@StructureID", structuresno);
            DataTable dtincentivestructure = vdm.SelectQuery(cmd).Tables[0];
            cmd = new MySqlCommand("SELECT DATE_FORMAT(indents.I_date, '%d %b %y') AS IndentDate, branchdata.BranchName, SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost) AS Amount,productsdata.ProductName, productsdata.sno AS prdtsno,Inventorysno as invsno, sum(indents_subtable.DeliveryQty) AS DeliveryQty, indents_subtable.UnitCost, products_category.Categoryname,products_category.sno AS categorysno FROM indents INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN branchdata ON indents.Branch_id = branchdata.sno INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno WHERE (branchdata.sno = @BranchID) AND (indents.I_date BETWEEN @d1 AND @d2) AND (indents_subtable.DeliveryQty <> ' ')  GROUP BY DATE(indents.I_date), branchdata.BranchName, productsdata.ProductName");
            //cmd = new MySqlCommand("SELECT DATE_FORMAT(indents.I_date, '%d %b %y') AS IndentDate, branchdata.BranchName, indents_subtable.DeliveryQty * indents_subtable.UnitCost AS Amount,productsdata.ProductName, productsdata.sno AS prdtsno,productsdata.Inventorysno as invsno, indents_subtable.DeliveryQty, indents_subtable.UnitCost, products_category.Categoryname,products_category.sno AS categorysno FROM indents INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN branchdata ON indents.Branch_id = branchdata.sno INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno WHERE (branchdata.sno = @BranchID) AND (indents.I_date BETWEEN @d1 AND @d2) AND (indents_subtable.DeliveryQty <> ' ')  GROUP BY indents.I_date, branchdata.BranchName, productsdata.ProductName, indents_subtable.DeliveryQty");
            cmd.Parameters.AddWithValue("@BranchID", agentid);
            cmd.Parameters.AddWithValue("@d1", GetLowDate(fromdate.AddDays(-1)));
            cmd.Parameters.AddWithValue("@d2", GetHighDate(todate.AddDays(-1)));
            DataTable dtdelivered = vdm.SelectQuery(cmd).Tables[0];
            int dtrowscount = dtdelivered.Rows.Count;
            if (dtrowscount == 0)
            {
                if (endDate.ToString() == "")
                {

                }
                else
                {
                    //lblmsg.Text = "No Indent Found Between These Days";
                }
            }
            else
            {
                float count = 0;
                count = (float)(todate - fromdate.AddDays(-1)).TotalDays;
                Report = new DataTable();
                Report.Columns.Add("IndentDate");
                //Report.Columns.Add("Branch Name");
                DataView view = new DataView(dtdelivered);
                DataTable distinctProduct = view.ToTable(true, "ProductName");
                foreach (DataRow dr in distinctProduct.Rows)
                {
                    Report.Columns.Add(dr["ProductName"].ToString());
                }
                Report.Columns.Add("Total  Ltrs");
                DataTable distincttable = view.ToTable(true, "BranchName", "IndentDate");
                DataTable distincttotal = view.ToTable(true, "ProductName", "DeliveryQty");
                double Total = 0;
                double TotalQty = 0;
                double prdtwisetotal = 0;
                double prdtwiseamount = 0;
                int categorysno = 0;
                foreach (DataRow branch in distincttable.Rows)
                {
                    DataRow newrow = Report.NewRow();
                    string IndentDate = branch["IndentDate"].ToString();
                    DateTime dtIndentDate = Convert.ToDateTime(IndentDate).AddDays(1);
                    string ChangedTime = dtIndentDate.ToString("dd/MMM/yyyy");
                    newrow["IndentDate"] = ChangedTime;
                    //newrow["Branch Name"] = branch["BranchName"].ToString();
                    Total = 0;
                    foreach (DataRow dr in dtdelivered.Rows)
                    {
                        if (branch["IndentDate"].ToString() == dr["IndentDate"].ToString())
                        {
                            if (dr["DeliveryQty"].ToString() != "")
                            {
                                double DeliveryQty = 0;
                                double.TryParse(dr["DeliveryQty"].ToString(), out DeliveryQty);
                                double UnitCost = 0;
                                double.TryParse(dr["UnitCost"].ToString(), out UnitCost);
                                DeliveryQty = Math.Round(DeliveryQty, 2);
                                newrow[dr["ProductName"].ToString()] = DeliveryQty;
                                // Total += DeliveryQty * UnitCost;
                                int.TryParse(dr["categorysno"].ToString(), out categorysno);

                                if (categorysno == 9)
                                {
                                    string invsno = dr["invsno"].ToString();
                                    if (invsno == "4")
                                    {
                                        Totalbulkmilksale += DeliveryQty;
                                    }
                                    Totalmilksale += DeliveryQty;
                                }

                                Total += DeliveryQty;
                            }
                        }
                    }
                    newrow["Total  Ltrs"] = Total;
                    TotalQty += Total;
                    Report.Rows.Add(newrow);
                }
                DataRow newvartical = Report.NewRow();
                newvartical["IndentDate"] = "Total";
                foreach (DataRow dr in distinctProduct.Rows)
                {
                    prdtwisetotal = 0;
                    foreach (DataRow drtotprdt in dtdelivered.Rows)
                    {
                        if (dr["ProductName"].ToString() == drtotprdt["ProductName"].ToString())
                        {
                            double prdtQty = 0;
                            double.TryParse(drtotprdt["DeliveryQty"].ToString(), out prdtQty);
                            prdtQty = Math.Round(prdtQty, 2);
                            if (drtotprdt["categorysno"].ToString() == "9")
                            {

                                double prdtamt = 0;
                                double.TryParse(drtotprdt["Amount"].ToString(), out prdtamt);
                                prdtwiseamount += prdtamt;
                                string invsno = drtotprdt["invsno"].ToString();
                                if (invsno == "4")
                                {
                                    Totalbulkmilksaleamount += prdtamt;
                                }
                            }

                            prdtwisetotal += prdtQty;

                        }
                    }
                    newvartical[dr["ProductName"].ToString()] = prdtwisetotal;
                }
                totmilkamt = (float)prdtwiseamount;
                //double val = 0;
                //double.TryParse(Report.Compute("sum([Total  Amount])", "[Total  Amount]<>'0'").ToString(), out val);
                newvartical["Total  Ltrs"] = TotalQty;

                double val1 = 0;
                foreach (DataColumn dc in Report.Columns)
                {
                    if (dc.DataType == typeof(Double))
                    {
                        val1 = 0.0;
                        double.TryParse(Report.Compute("sum([" + dc.ToString() + "])", "[" + dc.ToString() + "]<>'0'").ToString(), out val1);
                        newvartical[dc.ToString()] = val1;
                    }
                }
                Report.Rows.Add(newvartical);



                foreach (DataColumn col in Report.Columns)
                {
                    string Pname = col.ToString();
                    string ProductName = col.ToString();
                    ProductName = GetSpace(ProductName);
                    Report.Columns[Pname].ColumnName = ProductName;
                }
                if (Report.Columns.Count == 3)
                {
                    Report.Columns.Add("  ");
                    Report.Columns.Add("   ");
                    Report.Columns.Add("    ");
                }
                if (Report.Columns.Count == 4)
                {
                    Report.Columns.Add("  ");
                }

                DataTable dtTotincentive = new DataTable();
                dtTotincentive.Columns.Add("ClubbingName");
                dtTotincentive.Columns.Add("TotalSale").DataType = typeof(Double);
                dtTotincentive.Columns.Add("AverageSale").DataType = typeof(Double);
                dtTotincentive.Columns.Add("DiscountSlot");
                dtTotincentive.Columns.Add("TotalAmount").DataType = typeof(Double);

                string clubbingname = "";
                string categoryserial = "9";
                float milkincentive = 0;

                DataView incentiveview = new DataView(dtincentivestructure);
                //  DataTable dticentive = incentiveview.ToTable(true, "ClubName", "clubbingsno", "category_sno");
                DataTable dticentive = incentiveview.ToTable(true, "ClubName", "clubbingsno");

                //cmd = new MySqlCommand("SELECT ROUND(SUM(indents_subtable.DeliveryQty), 2) AS deliveryqty,subproductsclubbing. FROM indents INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN subproductsclubbing ON indents_subtable.Product_sno = subproductsclubbing.Productid WHERE (indents.Branch_id = @selectedbrnch) AND (indents_subtable.D_date BETWEEN @d1 AND @d2)");
                cmd = new MySqlCommand("SELECT result.deliveryqty, result.ClubName, result.Clubsno, slabs.SlotQty, slabs.Amt FROM (SELECT ROUND(SUM(indents_subtable.DeliveryQty), 2) AS deliveryqty, subproductsclubbing.Clubsno, product_clubbing.ClubName FROM indents INNER JOIN indents_subtable ON indents.IndentNo = indents_subtable.IndentNo INNER JOIN subproductsclubbing ON indents_subtable.Product_sno = subproductsclubbing.Productid INNER JOIN product_clubbing ON subproductsclubbing.Clubsno = product_clubbing.sno WHERE (indents.Branch_id = @selectedbrnch) AND (indents.I_date BETWEEN @d1 AND @d2) GROUP BY subproductsclubbing.Clubsno) result INNER JOIN slabs ON result.Clubsno = slabs.club_sno");
                cmd.Parameters.AddWithValue("@selectedbrnch", agentid);
                cmd.Parameters.AddWithValue("@d1", GetLowDate(fromdate.AddDays(-1)));
                cmd.Parameters.AddWithValue("@d2", GetHighDate(todate.AddDays(-1)));
                DataTable dtclubtotal = vdm.SelectQuery(cmd).Tables[0];
                foreach (DataRow drincetiveclub in dticentive.Rows)
                {
                    float avgsale = 0;
                    float slotqty = 0;
                    float slotamt = 0;
                    float totalsale = 0;
                    string sltamt = "";
                    clubbingname = drincetiveclub["ClubName"].ToString();
                    // categoryserial = drincetiveclub["category_sno"].ToString();
                    foreach (DataRow drdtclubtotal in dtclubtotal.Select("Clubsno='" + drincetiveclub["clubbingsno"].ToString() + "'"))
                    {
                        float.TryParse(drdtclubtotal["deliveryqty"].ToString(), out totalsale);
                        avgsale = (totalsale / count);
                        float.TryParse(drdtclubtotal["SlotQty"].ToString(), out slotqty);
                        if (avgsale > slotqty)
                        {
                            float.TryParse(drdtclubtotal["Amt"].ToString(), out slotamt);
                            sltamt = drdtclubtotal["Amt"].ToString();
                        }
                    }
                    DataRow newrow = dtTotincentive.NewRow();
                    newrow["ClubbingName"] = clubbingname;
                    newrow["TotalSale"] = Math.Round(totalsale, 2);
                    newrow["AverageSale"] = Math.Round(avgsale, 2);
                    newrow["DiscountSlot"] = sltamt;
                    newrow["TotalAmount"] = Math.Round(totalsale * slotamt, 2);

                    if (categoryserial == "9")
                    {
                        milkincentive += (float)Math.Round(totalsale * slotamt, 2);
                    }
                    dtTotincentive.Rows.Add(newrow);
                }
                double totalmilksale = 0;
                string leak = leakpercent;
                leakpercentage = (float)Convert.ToDouble(leak);
                context.Session["leak"] = leakpercentage;
                double TotMilkandMilkAmt = 0;
                Totalmilksale = Totalmilksale - Totalbulkmilksale;
                totmilkamt = totmilkamt - Totalbulkmilksaleamount;
                TotMilkandMilkAmt = totmilkamt / Totalmilksale;
                double totleakincentive = 0;
                //int.TryParse(txtleakage.Text, out leakpercentage);
                if (leakpercentage != 0)
                {
                    totalmilksale = leakpercentage / 100 * Totalmilksale;
                    totleakincentive = totalmilksale * TotMilkandMilkAmt;
                    DataRow newrow = dtTotincentive.NewRow();
                    newrow["ClubbingName"] = "LEAKAGE";
                    newrow["TotalSale"] = Math.Round(Totalmilksale, 2);
                    newrow["AverageSale"] = Math.Round(totalmilksale, 2);
                    newrow["DiscountSlot"] = Math.Round(TotMilkandMilkAmt, 2);
                    newrow["TotalAmount"] = Math.Round(totleakincentive, 2);
                    dtTotincentive.Rows.Add(newrow);

                }
                DataRow newrowtotal = dtTotincentive.NewRow();
                newrowtotal["DiscountSlot"] = "TotalDiscount";
                float incentive = 0;
                float.TryParse(dtTotincentive.Compute("sum([TotalAmount])", "[TotalAmount]<>'0'").ToString(), out incentive);
                newrowtotal["TotalAmount"] = Math.Round(incentive, 2);
                dtTotincentive.Rows.Add(newrowtotal);
                // lblactualdiscount1.Text = Math.Round(incentive, 2).ToString();
                //lblincentivegiven.Text = incentivegiven;
                //txtremarks.Text = remarks;
                DataRow headerrow = Report.NewRow();
                headerrow[0] = "ClubbingName";
                headerrow[1] = "TotalSale";
                headerrow[2] = "AverageSale";
                headerrow[3] = "DiscountSlot";
                headerrow[4] = "TotalAmount";
                Report.Rows.Add(headerrow);

                //DataTable dtsum = new DataTable();
                //dtsum = Report.Copy();
                foreach (DataRow drr in dtTotincentive.Rows)
                {
                    DataRow newrow = Report.NewRow();
                    newrow[0] = drr["ClubbingName"].ToString();
                    newrow[1] = drr["TotalSale"].ToString();
                    newrow[2] = drr["AverageSale"].ToString();
                    newrow[3] = drr["DiscountSlot"].ToString();
                    newrow[4] = drr["TotalAmount"].ToString();
                    Report.Rows.Add(newrow);
                }
            }
            if (Report.Rows.Count > 0)
            {
                context.Session["incentivedataamt"] = Report;
            }
            string response = GetJson(Report);
            context.Response.Write(response);
        }
        catch
        {

        }
    }
    public class employelists
    {
        public string employee { set; get; }
    }
    public class msgtypelists
    {
        public string msgtype { set; get; }
    }
    public class locationlists
    {
        public string soid { set; get; }
        public string soidname { get; set; }
    }
    public class collectiontype
    {
        public string type { get; set; }
    }
    private void getcollectiontypes(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            DateTime ServerDateCurrentdate = VehicleDBMgr.GetTime(vdbmngr.conn);
            cmd = new MySqlCommand("SELECT DISTINCT (PaymentType) AS PaymentType FROM collections");
            DataTable dtmsgtype = vdbmngr.SelectQuery(cmd).Tables[0];
            List<collectiontype> addresslist = new List<collectiontype>();
            int j = 0;
            foreach (DataRow dr in dtmsgtype.Rows)
            {
                j = j + 1;
                // string mobileno = dr["mobileno"].ToString();
                collectiontype obj1 = new collectiontype();
                obj1.type = dr["PaymentType"].ToString();
                addresslist.Add(obj1);
            }
            string response = GetJson(addresslist);
            context.Response.Write(response);
        }
        catch
        {
        }
    }
    private string GetSpace(string p)
    {
        int i = 0;
        for (; i < p.Length; i++)
        {
            if (char.IsNumber(p[i]))
            {
                break;
            }
        }
        return p.Substring(0, i) + " " + p.Substring(i, p.Length - i);
    }
    #region "EWay Bill Data"
    public class itemList
    {
        public string productName { get; set; }
        public string productDesc { get; set; }
        public int hsnCode { get; set; }
        public double quantity { get; set; }
        public string qtyUnit { get; set; }
        public int taxableAmount { get; set; }
        public double sgstRate { get; set; }
        public double cgstRate { get; set; }
        public int igstRate { get; set; }
        public int cessRate { get; set; }
    }

    public class RootEwayItems
    {
        public string supplyType { get; set; }
        public string subSupplyType { get; set; }
        public string subSupplyDesc { get; set; }
        public string docType { get; set; }
        public string docNo { get; set; }
        public string docDate { get; set; }
        public string fromGstin { get; set; }
        public string fromTrdName { get; set; }
        public string fromAddr1 { get; set; }
        public string fromAddr2 { get; set; }
        public string fromPlace { get; set; }
        public int actFromStateCode { get; set; }
        public int fromPincode { get; set; }
        public int fromStateCode { get; set; }
        public string toGstin { get; set; }
        public string toTrdName { get; set; }
        public string toAddr1 { get; set; }
        public string toAddr2 { get; set; }
        public string toPlace { get; set; }
        public int toPincode { get; set; }
        public int actToStateCode { get; set; }
        public int toStateCode { get; set; }
        public int transactionType { get; set; }
        public string dispatchFromGSTIN { get; set; }
        public string dispatchFromTradeName { get; set; }
        public string shipToTradeName { get; set; }
        public int totalValue { get; set; }
        public int cgstValue { get; set; }
        public int sgstValue { get; set; }
        public double igstValue { get; set; }
        public double cessValue { get; set; }
        public int cessNonAdvolValue { get; set; }
        public int totInvValue { get; set; }
        public string transMode { get; set; }
        public string transDistance { get; set; }
        public string transporterName { get; set; }
        public string transDocNo { get; set; }
        public string transDocDate { get; set; }
        public string vehicleNo { get; set; }
        public string vehicleType { get; set; }
        public List<itemList> itemList { get; set; }
    }
    public class eWay_Login
    {
        public string username { get; set; } //= "Api_api_vyshnavids";
        public string password { get; set; } //= "Password@123";
        public string client_id { get; set; } //= "83416692-7826-419a-8922-790556910a80";
        public string client_secret { get; set; } //= "20f94dc1-5066-4ce5-8993-4d85b7899a0f";
        public string Email { get; set; } //= "naveen.vdmtech@gmail.com";
        public string gstin { get; set; }
        public eWay_Login(string soid)
        {
            if (soid == "4")
            {
                this.username = "API_dairysoftap";
                this.password = "Password@123";
                this.client_id = "83416692-7826-419a-8922-790556910a80";
                this.client_secret = "20f94dc1-5066-4ce5-8993-4d85b7899a0f";
                this.Email = "naveen.vdmtech@gmail.com";
                this.gstin = "37AAGCS6022F1ZH";
            }
            else
            {
                this.username = "Api_api_vyshnavids";
                this.password = "Password@123";
                this.client_id = "7b57fc57-4f88-41e7-a52e-00f642bc789c";
                this.client_secret = "db685d26-1431-4aeb-9c42-1f73f5ef0d9c";
                this.Email = "naveen.vdmtech@gmail.com";
                this.gstin = "36AAGCS6022F1ZJ";
            }
        }
    }
    private authenticate_response authenticate_ewaybill(string SOID)
    {
        eWay_Login ewaylogin = new eWay_Login(SOID);

        using (var httpClient = new HttpClient())
        {
            using (var request = new HttpRequestMessage(new HttpMethod("GET"), "https://api.mastergst.com/ewaybillapi/v1.03/authenticate?email=naveen.vdmtech%40gmail.com&username=Api_api_vyshnavids&password=Password%40123"))
            {
                string ip_address = GetLocalIPAddress();
                if (ip_address == "Error")
                    ip_address = "182.18.162.51:52144";
                request.Headers.TryAddWithoutValidation("Accept", "application/json");
                //request.Headers.TryAddWithoutValidation("username", ewaylogin.username);
                //request.Headers.TryAddWithoutValidation("password", ewaylogin.password);
                request.Headers.TryAddWithoutValidation("ip_address", ip_address);
                request.Headers.TryAddWithoutValidation("client_id", ewaylogin.client_id);
                request.Headers.TryAddWithoutValidation("client_secret", ewaylogin.client_secret);
                request.Headers.TryAddWithoutValidation("gstin", ewaylogin.gstin);
                var response = httpClient.SendAsync(request).Result;
                var contents = response.Content.ReadAsStringAsync().Result;
                var js = new JavaScriptSerializer();
                authenticate_response obj = js.Deserialize<authenticate_response>(contents);
                return obj;
            }
        }
    }
    private void generate_ewaybill_Non_Registerd(HttpContext context)
    {
        try
        {
            // For Testing Purpose , in future send customer GSTIN for generate e-invoice
            vdbmngr = new VehicleDBMgr();
            string AgentID = context.Request["agentid"];
            string from_date = context.Request["FromDate"];
            string SOID = context.Request["soid"];
            string Document_No = context.Request["invoiceno"];
            string Distance = context.Request["Distance"];
            string vehcleno = context.Request["vehcleno"];
            DateTime fromdate = Convert.ToDateTime(from_date);
            responce_data obj;


            DateTime dtCdate = VehicleDBMgr.GetTime(vdbmngr.conn);
            DateTime dtapril = new DateTime();
            DateTime dtmarch = new DateTime();
            int currentyear = dtCdate.Year;
            int nextyear = dtCdate.Year + 1;
            if (dtCdate.Month > 3)
            {
                string apr = "4/1/" + currentyear;
                dtapril = DateTime.Parse(apr);
                string march = "3/31/" + nextyear;
                dtmarch = DateTime.Parse(march);
            }
            if (dtCdate.Month <= 3)
            {
                string apr = "4/1/" + (currentyear - 1);
                dtapril = DateTime.Parse(apr);
                string march = "3/31/" + (nextyear - 1);
                dtmarch = DateTime.Parse(march);
            }

            cmd = new MySqlCommand("SELECT  indents_subtable.indentno,SUM(indents_subtable.DeliveryQty) AS DeliveryQty,productsdata.SubCat_sno, indents_subtable.UnitCost,  productsdata.sno AS prodsno,productsdata.cgst,productsdata.sgst,productsdata.igst,productsdata.ProductName,productsdata.Itemcode, productsdata.hsncode,productsdata.Units, branchdata.BranchName,branchdata.BranchCode, branchdata.sno,branchdata.regtype,branchdata.gstno,branchdata.street,branchdata.city,branchdata.mandal,branchdata.area,branchdata.district,branchdata.pincode,branchdata.email,branchdata.doorno,branchdata.stateid,branchdata.statename,branchdata.companycode,branchdata.phonenumber FROM modifiedroutes INNER JOIN modifiedroutesubtable ON modifiedroutes.Sno = modifiedroutesubtable.RefNo INNER JOIN branchdata ON modifiedroutesubtable.BranchID = branchdata.sno INNER JOIN (SELECT IndentNo, Branch_id, I_date FROM indents WHERE (I_date BETWEEN @starttime AND @endtime)) indent ON branchdata.sno = indent.Branch_id INNER JOIN indents_subtable ON indent.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE (modifiedroutesubtable.BranchID = @BranchID)  AND (modifiedroutesubtable.EDate IS NULL) AND (modifiedroutesubtable.CDate <= @starttime) and (branchdata.gstno='' or branchdata.gstno='0')  and (productsdata.igst <>'' and productsdata.igst<>'0') OR (modifiedroutesubtable.BranchID = @BranchID)  AND (modifiedroutesubtable.EDate > @starttime) AND (modifiedroutesubtable.CDate <= @starttime) and (branchdata.gstno='' or branchdata.gstno='0') and (productsdata.igst <>'' and productsdata.igst<>'0') GROUP BY prodsno, branchdata.sno ORDER BY branchdata.sno, prodsno");
            cmd.Parameters.AddWithValue("@BranchID", AgentID);
            cmd.Parameters.AddWithValue("@starttime", GetLowDate(fromdate.AddDays(-1)));
            cmd.Parameters.AddWithValue("@endtime", GetHighDate(fromdate.AddDays(-1)));
            DataTable dtble = vdbmngr.SelectQuery(cmd).Tables[0];

            cmd = new MySqlCommand("SELECT branchdata.branchname,branchdata.companycode, branchdata.phonenumber,branchdata.email, branchdata.sno,branchdata.stateid, branchdata.Address, branchdata.TinNumber, branchdata.panno, branchdata.BranchCode,statemastar.statecode, statemastar.statename, statemastar.gststatecode, branchdata.phonenumber, branchdata.emailid,  branchdata.street, branchdata.city, branchdata.mandal, branchdata.district, branchdata.pincode, branchdata.gstno, branchdata.doorno, branchdata.area FROM branchdata INNER JOIN statemastar ON branchdata.stateid = statemastar.sno WHERE (branchdata.sno = @branchsno)");
            cmd.Parameters.AddWithValue("@branchsno", SOID);
            DataTable dtsellardtble = vdbmngr.SelectQuery(cmd).Tables[0];

            cmd = new MySqlCommand("SELECT  sno, BranchCode FROM  branchdata WHERE (sno = @branchsno)");
            cmd.Parameters.AddWithValue("@branchsno", SOID);
            DataTable dtsellarcode = vdbmngr.SelectQuery(cmd).Tables[0];

            cmd = new MySqlCommand("SELECT  * FROM  statemastar");
            DataTable dtstates = vdbmngr.SelectQuery(cmd).Tables[0];

            DataView view = new DataView(dtble);
            DataTable Buyerdtble = view.ToTable(true, "sno", "BranchName", "BranchCode", "gstno", "regtype", "doorno", "street", "city", "mandal", "area", "district", "pincode", "email", "stateid", "statename", "companycode", "phonenumber");
            DataTable Itemtable = view.ToTable(true, "sno", "DeliveryQty", "SubCat_sno", "UnitCost", "prodsno", "ProductName", "cgst", "sgst", "igst", "Itemcode", "hsncode", "Units");
            RootEwayItems obj_root = new RootEwayItems();
            List<RootEwayItems> Rootlistlst = new List<RootEwayItems>();
            List<itemList> Itemlistlst = new List<itemList>();

            foreach (DataRow dr in Buyerdtble.Rows)
            {
                string DCNO = "0";
                string DcNo = "";
                cmd = new MySqlCommand("SELECT agentdcno FROM  agenttaxdc WHERE (BranchId = @BranchId) AND (IndDate BETWEEN @d1 AND @d2)");
                cmd.Parameters.AddWithValue("@BranchId", AgentID);
                cmd.Parameters.AddWithValue("@d1", GetLowDate(fromdate.AddDays(-1)));
                cmd.Parameters.AddWithValue("@d2", GetHighDate(fromdate.AddDays(-1)));
                DataTable dtDcnumber = vdbmngr.SelectQuery(cmd).Tables[0];
                string dcnumber = "";
                if (dtDcnumber.Rows.Count > 0)
                {
                    dcnumber = dtDcnumber.Rows[0]["agentdcno"].ToString();
                    DCNO = dcnumber.ToString();
                }
                else
                {
                }
                //string DCNO = "";
                DcNo = DCNO;
                int countdc = 0;
                int.TryParse(DcNo, out countdc);
                if (countdc <= 10)
                {
                    DCNO = "0000" + countdc;
                }
                if (countdc >= 10 && countdc <= 99)
                {
                    DCNO = "000" + countdc;
                }
                if (countdc >= 99 && countdc <= 999)
                {
                    DCNO = "00" + countdc;
                }
                if (countdc > 999 && countdc <= 9999)
                {
                    DCNO = "0" + countdc;
                }
                if (countdc > 9999)
                {
                    DCNO = "" + countdc;
                }

                if (fromdate.Month > 3)
                {
                    DcNo = dtsellarcode.Rows[0]["BranchCode"].ToString() + "/" + dtapril.ToString("yy") + "-" + dtmarch.ToString("yy") + "T/" + DCNO;
                }
                else
                {
                    if (fromdate.Month <= 3)
                    {
                        DcNo = dtsellarcode.Rows[0]["BranchCode"].ToString() + "/" + dtapril.ToString("yy") + "-" + dtmarch.ToString("yy") + "T/" + DCNO;
                    }
                    else
                    {
                        DcNo = dtsellarcode.Rows[0]["BranchCode"].ToString() + "/" + dtapril.AddYears(-1).ToString("yy") + "-" + dtmarch.AddYears(-1).ToString("yy") + "T/" + DCNO;
                    }
                }
                string regtype = dr["regtype"].ToString();
                obj_root.supplyType = "O";
                obj_root.subSupplyType = "1";
                obj_root.subSupplyDesc = "B2B";
                obj_root.docType = "INV";
                obj_root.docNo = DcNo;
                obj_root.docDate = fromdate.ToString("dd/MM/yyyy");
                obj_root.transactionType = 1;
                obj_root.transMode = "1";
                obj_root.transDistance = "0";
                obj_root.transporterName = "Vyshnavi Foods";
                //obj_root.Distance = "0";
                obj_root.transDocNo = "B2B";
                obj_root.transDocDate = fromdate.ToString("dd/MM/yyyy"); ;
                obj_root.vehicleNo = vehcleno;
                obj_root.vehicleType = "R";
                string fromstate = ""; string tostate = "";

                foreach (DataRow drselaar in dtsellardtble.Rows)
                {

                    obj_root.fromGstin = drselaar["gstno"].ToString();
                    obj_root.fromTrdName = drselaar["branchname"].ToString();
                    obj_root.fromAddr1 = drselaar["doorno"].ToString() + ";," + drselaar["street"].ToString() + ";," + drselaar["area"].ToString(); ;

                    obj_root.fromAddr2 = drselaar["doorno"].ToString() + ";," + drselaar["street"].ToString() + ";," + drselaar["area"].ToString();
                    obj_root.fromPlace = drselaar["area"].ToString(); ;
                    obj_root.fromPincode = Convert.ToInt32(drselaar["pincode"].ToString());

                    foreach (DataRow drstate in dtstates.Select("sno='" + drselaar["stateid"].ToString() + "'"))
                    {
                        fromstate = drstate["gststatecode"].ToString(); ;
                        obj_root.fromStateCode = Convert.ToInt32(drstate["gststatecode"].ToString());
                        obj_root.actFromStateCode = Convert.ToInt32(drstate["gststatecode"].ToString());
                    }
                    obj_root.dispatchFromGSTIN = drselaar["gstno"].ToString();
                    obj_root.dispatchFromTradeName = drselaar["branchname"].ToString(); ;
                }
                foreach (DataRow drbuyer in Buyerdtble.Select("sno='" + AgentID + "'"))
                {

                    obj_root.toGstin = "URP";
                    obj_root.toTrdName = drbuyer["branchname"].ToString();
                    obj_root.toAddr1 = drbuyer["doorno"].ToString() + ";," + drbuyer["street"].ToString() + ";," + drbuyer["area"].ToString();
                    obj_root.toAddr2 = drbuyer["doorno"].ToString() + ";," + drbuyer["street"].ToString() + ";," + drbuyer["area"].ToString();
                    obj_root.toPlace = drbuyer["area"].ToString();
                    obj_root.toPincode = Convert.ToInt32(drbuyer["pincode"].ToString());
                    foreach (DataRow drstate in dtstates.Select("sno='" + drbuyer["stateid"].ToString() + "'"))
                    {
                        tostate = drstate["gststatecode"].ToString(); ;
                        obj_root.actToStateCode = Convert.ToInt32(drstate["gststatecode"].ToString()); ;
                        obj_root.toStateCode = Convert.ToInt32(drstate["gststatecode"].ToString()); ;
                    }
                    //obj_root.shipToGSTIN = drbuyer["gstno"].ToString(); ;
                    obj_root.shipToTradeName = drbuyer["branchname"].ToString();
                }
                int i = 0;

                double tot_amount = 0; double TPAmount = 0; double PAmount = 0; double total_cgst = 0; double total_sgst = 0; double total_igst = 0; double gtotalamout = 0;
                foreach (DataRow dritem in Itemtable.Select("sno='" + AgentID + "'"))
                {
                    i++;
                    itemList obj_items = new itemList();

                    //obj_items.s = i.ToString();
                    obj_items.productName = dritem["ProductName"].ToString();
                    obj_items.productDesc = dritem["ProductName"].ToString();
                    obj_items.hsnCode = Convert.ToInt32(dritem["hsncode"].ToString());
                    obj_items.qtyUnit = dritem["Units"].ToString();
                    float qty = 0;
                    double Q_ty = 0;
                    float.TryParse(dritem["DeliveryQty"].ToString(), out qty);
                    float rate = 0;
                    float.TryParse(dritem["Unitcost"].ToString(), out rate);
                    double.TryParse(dritem["DeliveryQty"].ToString(), out Q_ty);
                    obj_items.quantity = Q_ty;
                    double sgstamount = 0;
                    double cgstamount = 0;
                    double Igst = 0;
                    double Igstamount = 0;
                    double totRate = 0;
                    double.TryParse(dritem["Igst"].ToString(), out Igst);
                    double Igstcon = 100 + Igst;
                    Igstamount = (rate / Igstcon) * Igst;
                    Igstamount = Math.Round(Igstamount, 2);
                    totRate = Igstamount;
                    double Vatrate = rate - totRate;
                    Vatrate = Math.Round(Vatrate, 2);
                    PAmount = qty * Vatrate;
                    double tot_vatamount = (PAmount * Igst) / 100;
                    if (fromstate == tostate)
                    {
                        if (regtype == "Special Economic Zone")
                        {
                            tot_vatamount = Math.Round(tot_vatamount, 2);
                            //objitems.SgstAmt = 0;
                            //objitems.IgstAmt = tot_vatamount;
                            //objitems.CgstAmt = 0;
                            obj_items.sgstRate = 0;
                            obj_items.cgstRate = 0;
                            obj_items.igstRate = Convert.ToInt32(dritem["Igst"].ToString());
                            obj_items.cessRate = 0;
                            total_igst += tot_vatamount;
                        }
                        else
                        {
                            sgstamount = (tot_vatamount / 2);
                            sgstamount = Math.Round(sgstamount, 2);
                            cgstamount = (tot_vatamount / 2);
                            cgstamount = Math.Round(cgstamount, 2);
                            //newrow["cgst"] = dr["cgst"].ToString();
                            // newrow["sgst"] = dr["sgst"].ToString();
                            //objitems.SgstAmt = sgstamount;
                            //objitems.IgstAmt = 0;
                            //objitems.CgstAmt = cgstamount;
                            obj_items.sgstRate = Convert.ToDouble(dritem["cgst"].ToString()); ;
                            obj_items.cgstRate = Convert.ToDouble(dritem["sgst"].ToString()); ;
                            obj_items.igstRate = 0;
                            obj_items.cessRate = 0;

                            total_cgst += cgstamount;
                            total_sgst += sgstamount;
                        }
                    }
                    else
                    {
                        tot_vatamount = Math.Round(tot_vatamount, 2);
                        obj_items.sgstRate = 0;
                        obj_items.cgstRate = 0;
                        obj_items.igstRate = Convert.ToInt32(dritem["Igst"].ToString());
                        obj_items.cessRate = 0;

                        total_igst += tot_vatamount;
                    }
                    TPAmount += PAmount;
                    tot_amount = PAmount + tot_vatamount;
                    tot_amount = Math.Round(tot_amount, 2);
                    gtotalamout += tot_amount;
                    obj_items.taxableAmount = Convert.ToInt32(PAmount); ;
                    Itemlistlst.Add(obj_items);
                    
                }

                //obj_root.totalValue = Math.Round(TPAmount, 2); 
                obj_root.totalValue = Convert.ToInt32(TPAmount);
                obj_root.cgstValue = Convert.ToInt32(total_cgst);
                obj_root.sgstValue = Convert.ToInt32(total_sgst);
                obj_root.igstValue = Convert.ToInt32(total_igst);
                obj_root.cessValue = 0;
                obj_root.cessNonAdvolValue = 0;
                obj_root.totInvValue = Convert.ToInt32(gtotalamout);
                obj_root.itemList = Itemlistlst;
                authenticate_response newobj = authenticate_ewaybill(SOID);
                var str1 = ""; var str2 = "";
                if (newobj.status_desc == "If authentication succeeds")
                {
                    string response = JsonConvert.SerializeObject(obj_root);
                    var jsonresponse = JsonConvert.DeserializeObject<RootEwayItems>(response);
                    str1 = generate_ewaybill_Non_Registerd(from_date, SOID, AgentID, response);
                    var js = new JavaScriptSerializer();
                    Response_Eway obj1 = js.Deserialize<Response_Eway>(str1);
                    if (obj1.status_cd == "1")
                    {
                        str1 = "eWaybill Raised successfully";
                    }
                    else
                    {
                        str2 = str1;
                    }
                }
                else
                {
                    str1 = "Authentication Failed";
                }
                string res = GetJson(str2);
                context.Response.Write(res);
            }
        }
        catch (Exception ex)
        {
            string response = GetJson(ex.ToString());
            context.Response.Write(response);
        }
    }

    private string generate_ewaybill_Non_Registerd(string from_date, string SOID, string AgentID, string jsonresponse)
    {
        vdbmngr = new VehicleDBMgr();
        eWay_Login ewaylogin = new eWay_Login(SOID);
        DateTime fromdate = Convert.ToDateTime(from_date);
        using (var httpClient = new HttpClient())
        {
            using (var request = new HttpRequestMessage(new HttpMethod("POST"), "https://api.mastergst.com/einvoice/type/GENERATE_EWAYBILL/version/V1_03?email=naveen.vdmtech%40gmail.com"))
            {
                string ip_address = GetLocalIPAddress();
                if (ip_address == "Error")
                    ip_address = "182.18.162.51:52144";

                request.Headers.TryAddWithoutValidation("Accept", "application/json");
                request.Headers.TryAddWithoutValidation("username", ewaylogin.username);
                request.Headers.TryAddWithoutValidation("ip_address", ip_address);
                request.Headers.TryAddWithoutValidation("client_id", ewaylogin.client_id);
                request.Headers.TryAddWithoutValidation("client_secret", ewaylogin.client_secret);
                request.Headers.TryAddWithoutValidation("gstin", ewaylogin.gstin);

                var httpContent = new StringContent(jsonresponse, Encoding.UTF8, "application/json");
                request.Content = httpContent;
                var response = httpClient.SendAsync(request).Result;
                var contents = response.Content.ReadAsStringAsync().Result;
                DateTime ServerDateCurrentdate = VehicleDBMgr.GetTime(vdbmngr.conn);
                var js = new JavaScriptSerializer();
                EWayClass obj = js.Deserialize<EWayClass>(jsonresponse);
                var js1 = new JavaScriptSerializer();
                Response_Eway obj1 = js1.Deserialize<Response_Eway>(contents);
                if (obj1.status_desc == "GSTR request succeeds")
                {
                    cmd = new MySqlCommand("insert into ewb_details (agentid,soid,inddate,ewb_no,distance,ewb_date,vehicleno,created_by,created_date,modify_by,modify_date,type,status,expiry_date,irn_no) values (@agentid,@soid,@inddate,@ewb_no,@distance,@ewb_date,@vehicleno,@created_by,@created_date,@modify_by,@modify_date,@type,@status,@expiry_date,@irn_no)");
                    cmd.Parameters.AddWithValue("@agentid", AgentID);
                    cmd.Parameters.AddWithValue("@soid", SOID);
                    cmd.Parameters.AddWithValue("@inddate", GetLowDate(fromdate.AddDays(-1)));
                    cmd.Parameters.AddWithValue("@ewb_no", obj1.data.EwbNo);
                    cmd.Parameters.AddWithValue("@distance", obj.Distance);
                    cmd.Parameters.AddWithValue("@ewb_date", obj1.data.EwbDt);
                    cmd.Parameters.AddWithValue("@vehicleno", obj.VehNo);
                    cmd.Parameters.AddWithValue("@created_by", "1");
                    cmd.Parameters.AddWithValue("@created_date", ServerDateCurrentdate);
                    cmd.Parameters.AddWithValue("@modify_by", "1");
                    cmd.Parameters.AddWithValue("@modify_date", ServerDateCurrentdate);
                    cmd.Parameters.AddWithValue("@type", "R");
                    cmd.Parameters.AddWithValue("@status", "R");
                    cmd.Parameters.AddWithValue("@expiry_date", obj1.data.EwbValidTill);
                    cmd.Parameters.AddWithValue("@irn_no", obj.Irn);
                    vdbmngr.insert(cmd);
                }
                return contents;
            }
        }
    }
    private string get_ewaybill_data_out(string ewaybill_no, string gstin)
    {
        using (var httpClient = new HttpClient())
        {
            using (var request = new HttpRequestMessage(new HttpMethod("GET"), "https://api.mastergst.com/ewaybillapi/v1.03/ewayapi/getewaybill?email=textmail&ewbNo=" + ewaybill_no + ""))
            {
                string ip_address = GetLocalIPAddress();
                if (ip_address == "Error")
                    ip_address = "122.175.32.16";
                request.Headers.TryAddWithoutValidation("Accept", "application/json");
                request.Headers.TryAddWithoutValidation("ip_address", ip_address);
                request.Headers.TryAddWithoutValidation("client_id", "1234");
                request.Headers.TryAddWithoutValidation("client_secret", "1234");
                request.Headers.TryAddWithoutValidation("gstin", gstin);

                var response = httpClient.SendAsync(request).Result;
                var contents = response.Content.ReadAsStringAsync().Result;
                return contents;
            }
        }
    }
    #endregion

    #region "E Invoice"
    public class EInvoice_Products
    {
        
        public string dcno { get; set; }
        public string dispsno { get; set; }
        
        public string AgentName { get; set; }
        public string IRN_NO { get; set; }
        public string AgentId { get; set; }
        public string GstNo { get; set; }
        public string Totalqty { get; set; }
        public string Totalvalue { get; set; }
        public string ProductName { get; set; }
        public string StateName { get; set; }
        public string StateId { get; set; }
        public string status { get; set; }
        public string signed_qr_code { get; set; }
        public string ack_no { get; set; }
        public string ack_date { get; set; }
    }
    private void Get_Agent_Einvoice_Details(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();
            string soid = context.Request["branchID"];
            string IndDate = context.Request["FromDate"];
            string type = context.Request["type"];

            DateTime fromdate = Convert.ToDateTime(IndDate);
            DateTime ServerDateCurrentdate = VehicleDBMgr.GetTime(vdbmngr.conn);
            DateTime dtapril = new DateTime();
            DateTime dtmarch = new DateTime();
            int currentyear = ServerDateCurrentdate.Year;
            int nextyear = ServerDateCurrentdate.Year + 1;
            int currntyearnum = 0;
            int nextyearnum = 0;
            if (ServerDateCurrentdate.Month > 3)
            {
                string apr = "4/1/" + currentyear;
                dtapril = DateTime.Parse(apr);
                string march = "3/31/" + nextyear;
                dtmarch = DateTime.Parse(march);
                currntyearnum = currentyear;
                nextyearnum = nextyear;
            }
            if (ServerDateCurrentdate.Month <= 3)
            {
                if (ServerDateCurrentdate.Day == 31 && ServerDateCurrentdate.Month == 3)
                {
                    string apr = "3/31/" + currentyear;
                    dtapril = DateTime.Parse(apr);
                    string march = "3/31/" + nextyear;
                    dtmarch = DateTime.Parse(march);
                }
                else
                {
                    string apr = "4/1/" + (currentyear - 1);
                    dtapril = DateTime.Parse(apr);
                    string march = "3/31/" + (nextyear - 1);
                    dtmarch = DateTime.Parse(march);
                }
            }
            string invoicetype = "";
            DataTable dtble = new DataTable();
            DataTable dtEinvble = new DataTable();
            DataTable dtall = new DataTable();
            if (type == "invoice")
            {
                cmd = new MySqlCommand("SELECT  ROUND(SUM(indents_subtable.unitQty)) AS DeliveryQty,ROUND(SUM(indents_subtable.unitQty*indents_subtable.UnitCost)) AS TotalAmount,productsdata.SubCat_sno, indents_subtable.UnitCost, branchdata.BranchName, branchdata.sno, productsdata.sno AS prodsno, productsdata.ProductName,branchdata.gstno FROM modifiedroutes INNER JOIN modifiedroutesubtable ON modifiedroutes.Sno = modifiedroutesubtable.RefNo INNER JOIN branchdata ON modifiedroutesubtable.BranchID = branchdata.sno INNER JOIN (SELECT IndentNo, Branch_id, I_date FROM indents WHERE (I_date BETWEEN @starttime AND @endtime)) indent ON branchdata.sno = indent.Branch_id INNER JOIN indents_subtable ON indent.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE (modifiedroutes.BranchID = @BranchID) AND (modifiedroutesubtable.EDate IS NULL) AND (modifiedroutesubtable.CDate <= @starttime) and (branchdata.gstno <>'' and branchdata.gstno <>'0') and (productsdata.igst <>'' and productsdata.igst<>'0') OR (modifiedroutes.BranchID = @BranchID)  AND (modifiedroutesubtable.EDate > @starttime) AND (modifiedroutesubtable.CDate <= @starttime) and (branchdata.gstno <>'' and branchdata.gstno <>'0') and (productsdata.igst <>'' and productsdata.igst<>'0') GROUP BY  branchdata.sno ORDER BY branchdata.sno");
                cmd.Parameters.AddWithValue("@BranchID", soid);
                cmd.Parameters.AddWithValue("@starttime", GetLowDate(fromdate));
                cmd.Parameters.AddWithValue("@endtime", GetHighDate(fromdate));
                dtble = vdbmngr.SelectQuery(cmd).Tables[0];
                cmd = new MySqlCommand("select type,agentid,status,e_invoiceno,signed_qr_code,ack_no,ack_date from e_invoice where  soid=@soid and invoicedate between @d1 and @d2");
                cmd.Parameters.AddWithValue("@soid", soid);
                cmd.Parameters.AddWithValue("@d1", GetLowDate(fromdate));
                cmd.Parameters.AddWithValue("@d2", GetHighDate(fromdate));
                dtEinvble = vdbmngr.SelectQuery(cmd).Tables[0];
                invoicetype = "invoice";
            }
            else
            {
                cmd = new MySqlCommand("SELECT   SalesType from branchdata where sno=@sno");
                cmd.Parameters.AddWithValue("@sno", soid);
               DataTable dt = vdbmngr.SelectQuery(cmd).Tables[0];

                if (dt.Rows[0]["salestype"].ToString() == "23")
                {
                    cmd = new MySqlCommand("SELECT  dispatch.sno as dispsno,b1.gstno,dispatch.DispName as BranchName,b1.sno,tripdata.Sno AS TripId,productsdata.productname,ROUND(SUM(tripsubdata.Qty)) AS DeliveryQty,tripsubdata.ProductId FROM tripdata INNER JOIN empmanage ON tripdata.EmpId = empmanage.Sno INNER JOIN tripsubdata ON tripsubdata.Tripdata_sno=tripdata.sno INNER JOIN triproutes ON tripdata.Sno = triproutes.Tripdata_sno INNER JOIN dispatch ON triproutes.RouteID = dispatch.sno INNER JOIN branchdata as b1 ON b1.sno=dispatch.BranchID  INNER JOIN productsdata ON productsdata.sno=tripsubdata.ProductId  WHERE (tripdata.Status <> 'c') and (tripdata.DespatchStatus=@DespatchStatus) AND (tripdata.AssignDate BETWEEN @Adt AND @Adt1) AND (tripdata.Permissions LIKE '%D%') AND (dispatch.Branch_Id = @brnch) and (b1.gstno <>'' and b1.gstno <>'0') and (productsdata.igst <>'' and productsdata.igst<>'0') group by b1.sno,TripId order by b1.sno");
                    cmd.Parameters.AddWithValue("@UserName", context.Session["UserName"]);
                    cmd.Parameters.AddWithValue("@DespatchStatus", "Yes");
                    cmd.Parameters.AddWithValue("@brnch", soid);
                    cmd.Parameters.AddWithValue("@Adt", GetLowDate(fromdate));
                    cmd.Parameters.AddWithValue("@Adt1", GetHighDate(fromdate));
                    dtble = vdbmngr.SelectQuery(cmd).Tables[0];
                    invoicetype = "dc";
                    //cmd = new MySqlCommand("select a1.SubBranch,a1.SuperBranch from branchmappingtable as a1 inner join branchmappingtable as b1 ON  a1.SubBranch=b1.SubBranch INNER JOIN branchdata ON branchdata.sno=a1.SubBranch where  a1.SuperBranch=@BranchID and branchdata.SalesType=@salestype");
                    //cmd.Parameters.AddWithValue("@BranchID", "7");
                    //cmd.Parameters.AddWithValue("@salestype", "21");
                    //DataTable dtbranch = vdbmngr.SelectQuery(cmd).Tables[0];
                    //foreach (DataRow drb in dtbranch.Rows)
                    //{
                    cmd = new MySqlCommand("select type,refno,agentid,status,e_invoiceno,signed_qr_code,ack_no,ack_date from e_invoice where  (soid=@soid) and (invoicedate between @d1 and @d2) and (type=@type)");
                    cmd.Parameters.AddWithValue("@soid", soid);
                    cmd.Parameters.AddWithValue("@d1", GetLowDate(fromdate));
                    cmd.Parameters.AddWithValue("@d2", GetHighDate(fromdate));
                    cmd.Parameters.AddWithValue("@type", "dc");
                    DataTable dtdata = vdbmngr.SelectQuery(cmd).Tables[0];
                    dtEinvble.Merge(dtdata);
                    //}
                }
            }

            cmd = new MySqlCommand("select products_category.sno as catsno,products_subcategory.sno as subcatsno from products_category inner join products_subcategory on products_category.sno = products_subcategory.category_sno");
            DataTable dtcategory = vdbmngr.SelectQuery(cmd).Tables[0];
            if (dtble.Rows.Count > 0)
            {
                cmd = new MySqlCommand("SELECT branchdata.gstno,branchdata.sno,branchdata.Branchcode,branchdata.companycode,  branchdata.BranchName,branchdata.stateid, statemastar.statename, statemastar.statecode , statemastar.gststatecode FROM branchdata INNER JOIN statemastar ON branchdata.stateid = statemastar.sno WHERE (branchdata.sno = @BranchID)");
                if (context.Session["salestype"] == "Plant")
                {
                    cmd.Parameters.AddWithValue("@BranchID", soid);
                }
                else
                {
                    cmd.Parameters.AddWithValue("@BranchID", context.Session["branch"]);
                }
                DataTable dtstatename = vdbmngr.SelectQuery(cmd).Tables[0];
                string statename = "";
                string statecode = "";
                string fromstateid = "";
                string Branchcode = "";
                string gststatecode = "";
                string companycode = "";
                string gstno = "";
                if (dtstatename.Rows.Count > 0)
                {
                    Branchcode = dtstatename.Rows[0]["Branchcode"].ToString();
                    statename = dtstatename.Rows[0]["statename"].ToString();
                    statecode = dtstatename.Rows[0]["statecode"].ToString();
                    gststatecode = dtstatename.Rows[0]["gststatecode"].ToString();
                    companycode = dtstatename.Rows[0]["companycode"].ToString();
                    gstno = dtstatename.Rows[0]["gstno"].ToString();
                }
                DataTable dtalldispatch = new DataTable();
                dtalldispatch.Columns.Add("sno");
                dtalldispatch.Columns.Add("ProductName");
                dtalldispatch.Columns.Add("TotalQty");
                Report = new DataTable();
                if (dtble.Rows.Count > 0)
                {
                    DataView view = new DataView(dtble);
                    Report = new DataTable();
                    Report.Columns.Add("SNo");
                    Report.Columns.Add("InvoiceNo");
                    Report.Columns.Add("AgentName");
                    Report.Columns.Add("StateName");
                    Report.Columns.Add("GstNo");
                    Report.Columns.Add("Total Qty").DataType = typeof(Double);
                    Report.Columns.Add("Total Amount").DataType = typeof(Double);
                    Report.Columns.Add("Receipt No").DataType = typeof(Double);
                    DataTable distincttable = view.ToTable(true, "BranchName", "sno");
                    List<EInvoice_Products> EInvProduct = new List<EInvoice_Products>();
                    int noof_rows = dtEinvble.Rows.Count;
                    int count = 0;
                    foreach (DataRow dr in dtble.Rows)
                    {
                        string status = "";
                        string StateName = ""; string irn = "";
                        string signed_qr_code = ""; string ack_no = ""; string ack_date = "";
                        if (dtEinvble.Rows.Count > 0)
                        {
                            if (invoicetype == "dc")
                            {
                                foreach (DataRow drinv in dtEinvble.Select("agentid='" + dr["sno"].ToString() + "' and refno='" + dr["TripId"].ToString() + "'"))
                                {
                                    status = drinv["status"].ToString();
                                    irn = drinv["e_invoiceno"].ToString();
                                    signed_qr_code = drinv["signed_qr_code"].ToString();
                                    ack_no = drinv["ack_no"].ToString();
                                    DateTime ackdate = Convert.ToDateTime(drinv["ack_date"].ToString());
                                    ack_date = ackdate.ToString("dd/MM/yyyy");
                                }
                            }
                            else
                            {
                                foreach (DataRow drinv in dtEinvble.Select("agentid='" + dr["sno"].ToString() + "'"))
                                {
                                    status = drinv["status"].ToString();
                                    irn = drinv["e_invoiceno"].ToString();
                                    signed_qr_code = drinv["signed_qr_code"].ToString();
                                    ack_no = drinv["ack_no"].ToString();
                                    DateTime ackdate = Convert.ToDateTime(drinv["ack_date"].ToString());
                                    ack_date = ackdate.ToString("dd/MM/yyyy");
                                }
                            }
                        }
                        EInvoice_Products obj = new EInvoice_Products();
                        obj.AgentName = dr["BranchName"].ToString();
                        obj.AgentId = dr["sno"].ToString();

                        if (invoicetype == "invoice")
                        {
                            obj.Totalqty = dr["DeliveryQty"].ToString();
                            obj.Totalvalue = dr["TotalAmount"].ToString();
                        }
                        else
                        {
                            obj.Totalqty = dr["DeliveryQty"].ToString();
                            obj.dcno = dr["TripId"].ToString();
                            obj.dispsno = dr["dispsno"].ToString();
                        }
                        obj.StateName = statename;
                        obj.GstNo = dr["gstno"].ToString();
                        obj.status = status;
                        obj.IRN_NO = irn;
                        obj.signed_qr_code = signed_qr_code;
                        obj.ack_no = ack_no;
                        obj.ack_date = ack_date;
                        EInvProduct.Add(obj);
                    }
                    string response = GetJson(EInvProduct);
                    context.Response.Write(response);
                }
            }
            else
            {
                string msg = "Data not Found";
                string errmessage = GetJson(msg);
                context.Response.Write(errmessage);
            }
        }
        catch (Exception ex)
        {
        }
    }
    public class EInvoice_Login
    {
        public string username { get; set; } //= "Api_api_vyshnavids";
        public string password { get; set; } //= "Password@123";
        public string client_id { get; set; } //= "83416692-7826-419a-8922-790556910a80";
        public string client_secret { get; set; } //= "20f94dc1-5066-4ce5-8993-4d85b7899a0f";
        public string Email { get; set; } //= "naveen.vdmtech@gmail.com";
        public string gstin { get; set; }
        public string soid { get; set; }
        public EInvoice_Login(string soid)
        {
            if (soid == "4")
            {
                this.username = "API_dairysoftap";
                this.password = "Password@123";
                this.client_id = "83416692-7826-419a-8922-790556910a80";
                this.client_secret = "20f94dc1-5066-4ce5-8993-4d85b7899a0f";
                this.Email = "naveen.vdmtech@gmail.com";
                this.gstin = "37AAGCS6022F1ZH";
            }
            else
            {
                this.username = "Api_api_vyshnavids";
                this.password = "Password@123";
                this.client_id = "83416692-7826-419a-8922-790556910a80";
                this.client_secret = "20f94dc1-5066-4ce5-8993-4d85b7899a0f";
                this.Email = "naveen.vdmtech@gmail.com";
                this.gstin = "36AAGCS6022F1ZJ";
            }
        }
    }
    public class responce_data
    {
        public string status_cd { get; set; }
        public string status_desc { get; set; }
        public header_data header { get; set; }
        public ewaybill_data data { get; set; }
        public errors error { get; set; }
    }

    public class authenticate_response
    {
        public string status_cd { get; set; }
        public string status_desc { get; set; }
        public authenticate_data data { get; set; }
    }
    public class authenticate_data
    {
        public string username { get; set; }
        public string tokenexpiry { get; set; }
        public string sek { get; set; }
        public string clientid { get; set; }
        public string authtoken { get; set; }
    }
    public class header_data
    {
        public string gstin { get; set; }
        public string ip_address { get; set; }
        public string client_secret { get; set; }
        public string client_id { get; set; }
        public string txn { get; set; }
    }
    public class errors
    {
        public string message { get; set; }
        public string error_cd { get; set; }
        public string info { get; set; }
    }
    public class messages
    {
        public string errorCodes { get; set; }
    }
    public static string GetLocalIPAddress()
    {
        var host = Dns.GetHostEntry(Dns.GetHostName());
        foreach (var ip in host.AddressList)
        {
            if (ip.AddressFamily == AddressFamily.InterNetwork)
            {
                return ip.ToString();
            }
        }
        throw new Exception("Error");
    }
    private authenticate_response authenticate_e_invoice(string SOID)
    {
        EInvoice_Login Elogin = new EInvoice_Login(SOID);

        using (var httpClient = new HttpClient())
        {
            using (var request = new HttpRequestMessage(new HttpMethod("GET"), "https://api.mastergst.com/einvoice/authenticate?email=naveen.vdmtech%40gmail.com"))
            {
                string ip_address = GetLocalIPAddress();
                if (ip_address == "Error")
                    ip_address = "182.18.162.51:52144";
                request.Headers.TryAddWithoutValidation("Accept", "application/json");
                request.Headers.TryAddWithoutValidation("username", Elogin.username);
                request.Headers.TryAddWithoutValidation("password", Elogin.password);
                request.Headers.TryAddWithoutValidation("ip_address", ip_address);
                request.Headers.TryAddWithoutValidation("client_id", Elogin.client_id);
                request.Headers.TryAddWithoutValidation("client_secret", Elogin.client_secret);
                request.Headers.TryAddWithoutValidation("gstin", Elogin.gstin);
                var response = httpClient.SendAsync(request).Result;
                var contents = response.Content.ReadAsStringAsync().Result;
                // return contents;

                //var response = await httpClient.SendAsync(request);
                //var contents = await response.Content.ReadAsStringAsync();
                //return contents;

                var js = new JavaScriptSerializer();
                authenticate_response obj = js.Deserialize<authenticate_response>(contents);
                return obj;
            }
        }
    }
    private void generate_e_invoice_details(HttpContext context)
    {
        try
        {
            // For Testing Purpose , in future send customer GSTIN for generate e-invoice
            string AgentID = context.Request["AgentID"];
            string from_date = context.Request["FromDate"];
            string SOID = context.Request["SOID"];
            string Totvalue = context.Request["Totvalue"];
            string dcno = context.Request["dcno"];
            string type = context.Request["type"];
            DateTime fromdate = Convert.ToDateTime(from_date);
            //string ewaybill_no = context.Request["ewaybill_no"].ToString();
            //responce_data obj;
            EInvoice.Root Rootlst = new EInvoice.Root();

            authenticate_response newobj = authenticate_e_invoice(SOID);
            var str1 = ""; string str2 = "";
            if (newobj.status_cd == "Sucess")
            {
                var authToken = newobj.data.authtoken;
                context.Session["Token"] = authToken;
                string response = Get_e_invoice_JsonData(AgentID, from_date, SOID, type, dcno);
                //string response = Get_e_invoice_JsonData(AgentID, from_date, SOID);
                var jsonresponse = JsonConvert.DeserializeObject<EInvoice.Root>(response);
                string empsno = context.Session["UserSno"].ToString();
                str1 = generate_e_invoice_details(authToken, from_date, SOID, AgentID, empsno, type, dcno,response);
                //str1 = generate_e_invoice_details(authToken, from_date, SOID, AgentID, empsno, response);
                var js = new JavaScriptSerializer();
                Response_EInvoice obj = js.Deserialize<Response_EInvoice>(str1);
                if (obj.status_cd == "1")
                {
                    str2 = "eInvoice Raised successfully";
                }
                else
                {
                    str2 = str1;
                }
            }
            else
            {
                str2 = "Authentication Failed";
            }
            string res = GetJson(str2);
            context.Response.Write(res);
        }
        catch (Exception ex)
        {
            string response = GetJson(ex.ToString());
            context.Response.Write(response);
        }
    }
    private string Get_e_invoice_JsonData(string AgentID, string from_date, string SOID, string type, string dcno)
    {
        try
        {
            #region "Json"
            vdbmngr = new VehicleDBMgr();
            DateTime fromdate = Convert.ToDateTime(from_date);

            List<EInvoice.TranDtls> TranDtlslst = new List<EInvoice.TranDtls>();
            List<EInvoice.DocDtls> DocDtlslst = new List<EInvoice.DocDtls>();
            List<EInvoice.SellerDtls> SellerDtlslst = new List<EInvoice.SellerDtls>();
            List<EInvoice.BuyerDtls> BuyerDtlslst = new List<EInvoice.BuyerDtls>();
            List<EInvoice.DispDtls> DispDtlslst = new List<EInvoice.DispDtls>();
            List<EInvoice.ShipDtls> ShipDtlslst = new List<EInvoice.ShipDtls>();
            List<EInvoice.ItemList> ItemListlst = new List<EInvoice.ItemList>();
            List<EInvoice.BchDtls> BchDtlslst = new List<EInvoice.BchDtls>();
            List<EInvoice.AttribDtl> AttribDtllst = new List<EInvoice.AttribDtl>();
            List<EInvoice.ValDtls> ValDtlslst = new List<EInvoice.ValDtls>();
            List<EInvoice.PayDtls> PayDtlslst = new List<EInvoice.PayDtls>();
            List<EInvoice.RefDtls> RefDtlslst = new List<EInvoice.RefDtls>();
            List<EInvoice.DocPerdDtls> DocPerdDtlslst = new List<EInvoice.DocPerdDtls>();
            List<EInvoice.PrecDocDtl> PrecDocDtllst = new List<EInvoice.PrecDocDtl>();
            List<EInvoice.ContrDtl> ContrDtllst = new List<EInvoice.ContrDtl>();
            List<EInvoice.AddlDocDtl> AddlDocDtllst = new List<EInvoice.AddlDocDtl>();
            List<EInvoice.ExpDtls> ExpDtlslst = new List<EInvoice.ExpDtls>();
            List<EInvoice.EwbDtls> EwbDtlslst = new List<EInvoice.EwbDtls>();
            EInvoice.Root Rootlst = new EInvoice.Root();

            SalesDBManager SalesDB = new SalesDBManager();
            DateTime ServerDateCurrentdate = VehicleDBMgr.GetTime(vdbmngr.conn);
            DateTime dtapril = new DateTime();
            DateTime dtmarch = new DateTime();
            int currentyear = ServerDateCurrentdate.Year;
            int nextyear = ServerDateCurrentdate.Year + 1;
            int currntyearnum = 0;
            int nextyearnum = 0;
            if (ServerDateCurrentdate.Month > 3)
            {
                string apr = "4/1/" + currentyear;
                dtapril = DateTime.Parse(apr);
                string march = "3/31/" + nextyear;
                dtmarch = DateTime.Parse(march);
                currntyearnum = currentyear;
                nextyearnum = nextyear;
            }
            if (ServerDateCurrentdate.Month <= 3)
            {
                string apr = "4/1/" + (currentyear - 1);
                dtapril = DateTime.Parse(apr);
                string march = "3/31/" + (nextyear - 1);
                dtmarch = DateTime.Parse(march);

            }
            DataTable dtble = new DataTable();
            DataTable dtsellardtble = new DataTable();
            DataTable dtsellarcode = new DataTable();
            DataTable dtstates = new DataTable();
            DataTable dtIndent = new DataTable();
            DataTable dtbrnch_prdts = new DataTable();
            DataTable dtdisp = new DataTable();
            cmd = new MySqlCommand("SELECT  * FROM  statemastar");
            dtstates = vdbmngr.SelectQuery(cmd).Tables[0];
            string Agent_id = ""; string DispMode = ""; string DispType = ""; string branchsno = "";
            if (type == "invoice")
            {
                cmd = new MySqlCommand("SELECT  indents_subtable.indentno,SUM(indents_subtable.unitQty) AS DeliveryQty,productsdata.SubCat_sno, indents_subtable.UnitCost,  productsdata.sno AS prodsno,productsdata.cgst,productsdata.sgst,productsdata.igst,productsdata.ProductName,productsdata.Itemcode, productsdata.hsncode,productsdata.Units, branchdata.BranchName,branchdata.BranchCode, branchdata.sno,branchdata.regtype,branchdata.gstno,branchdata.street,branchdata.city,branchdata.mandal,branchdata.area,branchdata.district,branchdata.pincode,branchdata.email,branchdata.doorno,branchdata.stateid,branchdata.statename,branchdata.companycode,branchdata.phonenumber FROM modifiedroutes INNER JOIN modifiedroutesubtable ON modifiedroutes.Sno = modifiedroutesubtable.RefNo INNER JOIN branchdata ON modifiedroutesubtable.BranchID = branchdata.sno INNER JOIN (SELECT IndentNo, Branch_id, I_date FROM indents WHERE (I_date BETWEEN @starttime AND @endtime)) indent ON branchdata.sno = indent.Branch_id INNER JOIN indents_subtable ON indent.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE (modifiedroutesubtable.BranchID = @BranchID)  AND (modifiedroutesubtable.EDate IS NULL) AND (modifiedroutesubtable.CDate <= @starttime) and (branchdata.gstno<>'' and branchdata.gstno is not null) and (productsdata.igst <>'' and productsdata.igst<>'0') AND (indents_subtable.unitQty>0) OR (modifiedroutesubtable.BranchID = @BranchID)  AND (modifiedroutesubtable.EDate > @starttime) AND (modifiedroutesubtable.CDate <= @starttime) and (branchdata.gstno<>'' and branchdata.gstno is not null) and (productsdata.igst <>'' and productsdata.igst<>'0') AND (indents_subtable.unitQty>0) GROUP BY prodsno, branchdata.sno ORDER BY branchdata.sno, prodsno");
                cmd.Parameters.AddWithValue("@BranchID", AgentID);
                cmd.Parameters.AddWithValue("@starttime", GetLowDate(fromdate));
                cmd.Parameters.AddWithValue("@endtime", GetHighDate(fromdate));
                dtble = vdbmngr.SelectQuery(cmd).Tables[0];

                cmd = new MySqlCommand("SELECT branchdata.branchname,branchdata.companycode, branchdata.phonenumber,branchdata.email, branchdata.sno,branchdata.stateid, branchdata.Address, branchdata.TinNumber, branchdata.panno, branchdata.BranchCode,statemastar.statecode, statemastar.statename, statemastar.gststatecode, branchdata.phonenumber, branchdata.emailid,  branchdata.street, branchdata.city, branchdata.mandal, branchdata.district, branchdata.pincode, branchdata.gstno, branchdata.doorno, branchdata.area FROM branchdata INNER JOIN statemastar ON branchdata.stateid = statemastar.sno WHERE (branchdata.sno = @branchsno)");
                cmd.Parameters.AddWithValue("@branchsno", SOID);
                dtsellardtble = vdbmngr.SelectQuery(cmd).Tables[0];

                cmd = new MySqlCommand("SELECT  sno, BranchCode FROM  branchdata WHERE (sno = @branchsno)");
                cmd.Parameters.AddWithValue("@branchsno", SOID);
                dtsellarcode = vdbmngr.SelectQuery(cmd).Tables[0];
            }
            else
            {
                cmd = new MySqlCommand("SELECT tripdata.BranchID, tripdata.AssignDate, tripdata.Sno, tripdata.taxdcno AS DCNo, tripdata.DispTime, tripdata.VehicleNo, dispatch.DispType, dispatch.BranchID AS Agentid, dispatch.DispMode, dispatch.DispName AS DispatchName, dispatch.sno AS dispsno, empmanage_1.EmpName AS Employee, empmanage.EmpName AS dispather, branchdata.stateid, statemastar.statename AS BranchState, statemastar.gststatecode FROM branchdata INNER JOIN empmanage empmanage_1 ON branchdata.sno = empmanage_1.Branch INNER JOIN statemastar ON branchdata.stateid = statemastar.sno RIGHT OUTER JOIN tripdata INNER JOIN triproutes ON tripdata.Sno = triproutes.Tripdata_sno INNER JOIN dispatch ON triproutes.RouteID = dispatch.sno LEFT OUTER JOIN empmanage ON tripdata.DEmpId = empmanage.Sno ON empmanage_1.Sno = tripdata.EmpId WHERE (tripdata.Sno = @tripsno)");
                cmd.Parameters.AddWithValue("@tripsno", dcno);
                dtdisp = vdbmngr.SelectQuery(cmd).Tables[0];

                cmd = new MySqlCommand("SELECT branchdata.gstno,branchdata.BranchName, branchdata.doorno,branchdata.street, branchdata.area,branchdata.pincode, branchdata.phonenumber, branchdata.email, branchdata.stateid, branchdata.BranchCode,statemastar.statecode, statemastar.statename,branchdata.stateid, statemastar.statename AS BranchState, statemastar.gststatecode FROM branchdata INNER JOIN statemastar ON branchdata.stateid = statemastar.sno WHERE (branchdata.sno = @BranchID)");
                cmd.Parameters.AddWithValue("@BranchID", SOID);
                dtsellardtble = vdbmngr.SelectQuery(cmd).Tables[0];

                cmd = new MySqlCommand("SELECT branchdata.sno, branchdata.BranchName, branchdata.BranchCode, branchdata.gstno, branchdata.regtype, branchdata.doorno, branchdata.street,branchdata.city, branchdata.mandal, branchdata.area, branchdata.district,  branchdata.pincode, branchdata.email, branchdata.stateid, branchdata.statename, branchdata.companycode, branchdata.phonenumber FROM branchdata INNER JOIN statemastar ON branchdata.stateid = statemastar.sno WHERE (branchdata.sno = @Agentid)");
                cmd.Parameters.AddWithValue("@Agentid", AgentID);
                dtble = vdbmngr.SelectQuery(cmd).Tables[0];

                cmd = new MySqlCommand("SELECT  sno, BranchCode FROM  branchdata WHERE (sno = @branchsno)");
                cmd.Parameters.AddWithValue("@branchsno", SOID);
                dtsellarcode = vdbmngr.SelectQuery(cmd).Tables[0];

                cmd = new MySqlCommand("SELECT branchproducts.branch_sno as sno,tripsubdata.ProductId,productsdata.itemcode,productsdata.SubCat_sno as subcatid,productsdata.hsncode,productsdata.igst,productsdata.cgst,productsdata.sgst,productsdata.units,productsdata.qty as uomqty, productsdata.ProductName, productsdata.VatPercent, branchproducts.VatPercent AS vp, tripsubdata.Price, ROUND(tripsubdata.Qty, 2) AS DeliveryQty,tripdata.AssignDate, tripdata.BranchID, branchproducts_1.VatPercent AS plantvp FROM tripdata INNER JOIN triproutes ON tripdata.Sno = triproutes.Tripdata_sno INNER JOIN tripsubdata ON tripdata.Sno = tripsubdata.Tripdata_sno INNER JOIN productsdata ON tripsubdata.ProductId = productsdata.sno INNER JOIN branchproducts ON productsdata.sno = branchproducts.product_sno INNER JOIN branchproducts branchproducts_1 ON tripdata.BranchID = branchproducts_1.branch_sno AND branchproducts.product_sno = branchproducts_1.product_sno WHERE (tripdata.Sno = @tripdataId) AND (branchproducts.branch_sno = @BranchID) and (productsdata.igst <>'' and productsdata.igst<>'0') GROUP BY productsdata.ProductName ORDER BY branchproducts.Rank");
                cmd.Parameters.AddWithValue("@BranchID", AgentID);
                cmd.Parameters.AddWithValue("@tripdataId", dcno);
                dtIndent = vdbmngr.SelectQuery(cmd).Tables[0];
                if (dtsellardtble.Rows.Count > 0)
                {
                    DispMode = dtdisp.Rows[0]["DispMode"].ToString();
                    DispType = dtdisp.Rows[0]["DispType"].ToString();
                    branchsno = dtdisp.Rows[0]["Agentid"].ToString();
                }
                if (DispMode == "Staff")
                {
                    cmd = new MySqlCommand("SELECT branchdata.stateid, productsdata.sno,productsdata.itemcode,productsdata.hsncode,productsdata.igst,productsdata.cgst,productsdata.sgst, productsdata.ProductName, productsdata.Units,productsdata.qty as uomqty, branchproducts.unitprice, invmaster.Qty, products_category.Categoryname FROM branchproducts INNER JOIN productsdata ON branchproducts.product_sno = productsdata.sno INNER JOIN invmaster ON productsdata.Inventorysno = invmaster.sno INNER JOIN branchdata ON branchproducts.branch_sno = branchdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno WHERE (branchdata.sno = @SOID) and (branchproducts.flag=@flag)  group by  productsdata.ProductName ORDER BY branchproducts.Rank");
                    cmd.Parameters.AddWithValue("@SOID", branchsno);
                    cmd.Parameters.AddWithValue("@flag", "1");
                    cmd.Parameters.AddWithValue("@SalesType", "20");
                    dtbrnch_prdts = vdbmngr.SelectQuery(cmd).Tables[0];
                }
                else if (DispMode == "AGENT")
                {
                    cmd = new MySqlCommand("SELECT branchdata.stateid, productsdata.sno,productsdata.itemcode,productsdata.hsncode,productsdata.igst,productsdata.cgst,productsdata.sgst, productsdata.ProductName, productsdata.Units,productsdata.qty as uomqty, branchproducts.unitprice, invmaster.Qty, products_category.Categoryname, branchproducts_1.unitprice AS BUnitPrice FROM branchproducts INNER JOIN productsdata ON branchproducts.product_sno = productsdata.sno INNER JOIN invmaster ON productsdata.Inventorysno = invmaster.sno INNER JOIN branchdata ON branchproducts.branch_sno = branchdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno INNER JOIN branchmappingtable ON branchdata.sno = branchmappingtable.SubBranch INNER JOIN branchproducts branchproducts_1 ON branchmappingtable.SuperBranch = branchproducts_1.branch_sno AND productsdata.sno = branchproducts_1.product_sno WHERE (branchdata.sno = @SOID) and (branchproducts.flag=@flag) GROUP BY productsdata.ProductName ORDER BY branchproducts_1.Rank");
                    cmd.Parameters.AddWithValue("@SOID", branchsno);
                    cmd.Parameters.AddWithValue("@flag", "1");
                    dtbrnch_prdts = vdbmngr.SelectQuery(cmd).Tables[0];
                }
                else if (DispMode == "Others")
                {
                    cmd = new MySqlCommand("SELECT branchdata.stateid,  productsdata.sno,productsdata.itemcode,productsdata.hsncode,productsdata.igst,productsdata.cgst,productsdata.sgst, productsdata.ProductName, productsdata.Units,productsdata.qty as uomqty, branchproducts.unitprice, invmaster.Qty, products_category.Categoryname, branchproducts_1.unitprice AS BUnitPrice FROM branchproducts INNER JOIN productsdata ON branchproducts.product_sno = productsdata.sno INNER JOIN invmaster ON productsdata.Inventorysno = invmaster.sno INNER JOIN branchdata ON branchproducts.branch_sno = branchdata.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno INNER JOIN branchmappingtable ON branchdata.sno = branchmappingtable.SubBranch INNER JOIN branchproducts branchproducts_1 ON branchmappingtable.SuperBranch = branchproducts_1.branch_sno AND productsdata.sno = branchproducts_1.product_sno WHERE (branchdata.sno = @SOID) and (branchproducts.flag=@flag) GROUP BY productsdata.ProductName ORDER BY branchproducts_1.Rank");
                    cmd.Parameters.AddWithValue("@SOID", branchsno);
                    cmd.Parameters.AddWithValue("@flag", "1");
                    dtbrnch_prdts = vdbmngr.SelectQuery(cmd).Tables[0];
                }
                else
                {
                    //string salestype = context.Session["salestype"].ToString();
                    //if (salestype == "SALES OFFICE")
                    //{
                    //    branchsno = context.Session["branch"].ToString();
                    //}
                    //else
                    //{
                    //}
                    if (DispType == "SO")
                    {
                        cmd = new MySqlCommand("SELECT  branchdata.stateid, productsdata.sno, productsdata.Itemcode, productsdata.hsncode, productsdata.igst, productsdata.cgst, productsdata.sgst, productsdata.ProductName, productsdata.Units,productsdata.qty as uomqty, branchproducts.unitprice, invmaster.Qty,products_category.Categoryname FROM branchproducts INNER JOIN productsdata ON branchproducts.product_sno = productsdata.sno INNER JOIN invmaster ON productsdata.Inventorysno = invmaster.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno INNER JOIN branchdata ON branchproducts.branch_sno = branchdata.sno WHERE (branchproducts.branch_sno = @branchhsno) AND (branchproducts.flag = @flag) GROUP BY productsdata.ProductName, branchdata.stateid ORDER BY branchproducts.Rank");
                        cmd.Parameters.AddWithValue("@flag", "1");
                        cmd.Parameters.AddWithValue("@branchhsno", branchsno);
                        dtbrnch_prdts = vdbmngr.SelectQuery(cmd).Tables[0];
                    }
                    else
                    {
                        cmd = new MySqlCommand("SELECT  branchdata.stateid, productsdata.sno, productsdata.Itemcode, productsdata.hsncode, productsdata.igst, productsdata.cgst, productsdata.sgst, productsdata.ProductName, productsdata.Units,productsdata.qty as uomqty, branchproducts.unitprice, invmaster.Qty,products_category.Categoryname FROM branchproducts INNER JOIN productsdata ON branchproducts.product_sno = productsdata.sno INNER JOIN invmaster ON productsdata.Inventorysno = invmaster.sno INNER JOIN products_subcategory ON productsdata.SubCat_sno = products_subcategory.sno INNER JOIN products_category ON products_subcategory.category_sno = products_category.sno INNER JOIN branchdata ON branchproducts.branch_sno = branchdata.sno WHERE (branchproducts.branch_sno = @branchhsno) AND (branchproducts.flag = @flag) GROUP BY productsdata.ProductName, branchdata.stateid ORDER BY branchproducts.Rank");
                        cmd.Parameters.AddWithValue("@flag", "1");
                        cmd.Parameters.AddWithValue("@branchhsno", branchsno);
                        dtbrnch_prdts = vdbmngr.SelectQuery(cmd).Tables[0];
                    }
                }
            }
            DataTable Itemtable = new DataTable();
            DataView view = new DataView(dtble);
            DataTable Buyerdtble = new DataTable();
            if (type == "invoice")
            {
                Buyerdtble = view.ToTable(true, "sno", "BranchName", "BranchCode", "gstno", "regtype", "doorno", "street", "city", "mandal", "area", "district", "pincode", "email", "stateid", "statename", "companycode", "phonenumber", "indentno");
                Itemtable = view.ToTable(true, "sno", "DeliveryQty", "SubCat_sno", "UnitCost", "prodsno", "ProductName", "cgst", "sgst", "igst", "Itemcode", "hsncode", "Units");
            }
            else
            {
                Buyerdtble = view.ToTable(true, "sno", "BranchName", "BranchCode", "gstno", "regtype", "doorno", "street", "city", "mandal", "area", "district", "pincode", "email", "stateid", "statename", "companycode", "phonenumber");
            }
            foreach (DataRow dr in Buyerdtble.Rows)
            {
                string AgentId = dr["sno"].ToString();
                string regtype = dr["regtype"].ToString();
                Rootlst.Version = "1.1";
                EInvoice.TranDtls objtrans = new EInvoice.TranDtls();
                objtrans.TaxSch = "GST";
                objtrans.SupTyp = "B2B";
                objtrans.RegRev = "Y";
                //objtrans.EcmGstin = "null";
                objtrans.IgstOnIntra = "N";
                Rootlst.TranDtls = objtrans;
                TranDtlslst.Add(objtrans);
                string DCNO = "0";
                string DcNo = "";
                string dcnumber = "";
                if (type == "invoice")
                {
                    //DocumentDetails
                    cmd = new MySqlCommand("SELECT MAX(agentdcno) as agentdcno FROM  agenttaxdc WHERE (BranchId = @BranchId)  AND (IndDate BETWEEN @d1 AND @d2) AND (indentno=@indentno) and (agentdcno>0)");
                    cmd.Parameters.Add("@BranchId", AgentId);
                    cmd.Parameters.Add("@d1", GetLowDate(fromdate));
                    cmd.Parameters.Add("@d2", GetHighDate(fromdate));
                    cmd.Parameters.Add("@indentno", dr["IndentNo"].ToString());
                    DataTable dtDcnumber = vdbmngr.SelectQuery(cmd).Tables[0];
                    if (dtDcnumber.Rows.Count > 0)
                    {
                        dcnumber = dtDcnumber.Rows[0]["agentdcno"].ToString();
                        DCNO = dcnumber.ToString();
                    }
                }
                else
                {
                    cmd = new MySqlCommand("SELECT tripdata.taxdcno AS DCNo  from tripdata  WHERE (Sno = @tripsno)");
                    cmd.Parameters.AddWithValue("@tripsno", dcno);
                    DataTable dtDcnumber = vdbmngr.SelectQuery(cmd).Tables[0];
                    if (dtDcnumber.Rows.Count > 0)
                    {
                        dcnumber = dtDcnumber.Rows[0]["DCNo"].ToString();
                        DCNO = dcnumber.ToString();
                    }
                }
                //string DCNO = "";
                DcNo = DCNO;
                int countdc = 0;
                int.TryParse(DcNo, out countdc);
                if (countdc <= 10)
                {
                    DCNO = "0000" + countdc;
                }
                if (countdc >= 10 && countdc <= 99)
                {
                    DCNO = "000" + countdc;
                }
                if (countdc >= 99 && countdc <= 999)
                {
                    DCNO = "00" + countdc;
                }
                if (countdc > 999 && countdc <= 9999)
                {
                    DCNO = "0" + countdc;
                }
                if (countdc > 9999)
                {
                    DCNO = "" + countdc;
                }

                if (fromdate.Month > 3)
                {
                    DcNo = dtsellarcode.Rows[0]["BranchCode"].ToString() + "/" + dtapril.ToString("yy") + "-" + dtmarch.ToString("yy") + "T/" + DCNO;
                }
                else
                {
                    if (fromdate.Month <= 3)
                    {
                        DcNo = dtsellarcode.Rows[0]["BranchCode"].ToString() + "/" + dtapril.ToString("yy") + "-" + dtmarch.ToString("yy") + "T/" + DCNO;
                    }
                    else
                    {
                        DcNo = dtsellarcode.Rows[0]["BranchCode"].ToString() + "/" + dtapril.AddYears(-1).ToString("yy") + "-" + dtmarch.AddYears(-1).ToString("yy") + "T/" + DCNO;
                    }
                }
                EInvoice.DocDtls objdocdtls = new EInvoice.DocDtls();
                objdocdtls.Typ = "INV";
                objdocdtls.No = DcNo;
                objdocdtls.Dt = fromdate.ToString("dd/MM/yyyy");
                Rootlst.DocDtls = objdocdtls;
                DocDtlslst.Add(objdocdtls);
                string fromstate = ""; string tostate = "";

                foreach (DataRow drselaar in dtsellardtble.Rows)
                {
                    EInvoice.SellerDtls objsellar = new EInvoice.SellerDtls();
                    objsellar.Gstin = drselaar["gstno"].ToString();
                    objsellar.LglNm = drselaar["branchname"].ToString();
                    objsellar.TrdNm = drselaar["branchname"].ToString();
                    objsellar.Addr1 = drselaar["doorno"].ToString() + ";," + drselaar["street"].ToString() + ";," + drselaar["area"].ToString();
                    objsellar.Addr2 = drselaar["doorno"].ToString() + ";," + drselaar["street"].ToString() + ";," + drselaar["area"].ToString();
                    objsellar.Loc = drselaar["area"].ToString();
                    objsellar.Pin = Convert.ToInt32(drselaar["pincode"].ToString());
                    //objsellar.Stcd = "36";
                    //objsellar.Stcd = drselaar["stateid"].ToString();
                    objsellar.Ph = drselaar["phonenumber"].ToString();
                    objsellar.Em = drselaar["email"].ToString();
                    fromstate = drselaar["stateid"].ToString();
                    foreach (DataRow drstate in dtstates.Select("sno='" + drselaar["stateid"].ToString() + "'"))
                    {
                        fromstate = drstate["gststatecode"].ToString(); ;
                        objsellar.Stcd = drstate["gststatecode"].ToString(); ;
                    }

                    Rootlst.SellerDtls = objsellar;
                    SellerDtlslst.Add(objsellar);
                    EInvoice.DispDtls objdisp = new EInvoice.DispDtls();
                    objdisp.Nm = drselaar["branchname"].ToString();
                    objdisp.Addr1 = drselaar["doorno"].ToString() + ";," + drselaar["street"].ToString() + ";," + drselaar["area"].ToString();
                    objdisp.Addr2 = drselaar["doorno"].ToString() + ";," + drselaar["street"].ToString() + ";," + drselaar["area"].ToString();
                    objdisp.Loc = drselaar["area"].ToString();
                    objdisp.Pin = Convert.ToInt32(drselaar["pincode"].ToString());
                    foreach (DataRow drstate in dtstates.Select("sno='" + drselaar["stateid"].ToString() + "'"))
                    {
                        fromstate = drstate["gststatecode"].ToString(); ;
                        objdisp.Stcd = drstate["gststatecode"].ToString();
                    }
                    //objdisp.Stcd = drselaar["stateid"].ToString();
                    Rootlst.DispDtls = objdisp;
                    DispDtlslst.Add(objdisp);
                }
                foreach (DataRow drbuyer in Buyerdtble.Select("sno='" + AgentId + "'"))
                {

                    EInvoice.BuyerDtls objbuyer = new EInvoice.BuyerDtls();
                    objbuyer.Gstin = drbuyer["gstno"].ToString();
                    objbuyer.LglNm = drbuyer["branchname"].ToString();
                    objbuyer.TrdNm = drbuyer["branchname"].ToString();
                    //objbuyer.Pos = drbuyer["pincode"].ToString();
                    objbuyer.Addr1 = drbuyer["doorno"].ToString() + ";," + drbuyer["street"].ToString() + ";," + drbuyer["area"].ToString();
                    objbuyer.Addr2 = drbuyer["doorno"].ToString() + ";," + drbuyer["street"].ToString() + ";," + drbuyer["area"].ToString();
                    objbuyer.Loc = drbuyer["area"].ToString();
                    objbuyer.Pin = Convert.ToInt32(drbuyer["pincode"].ToString());
                    //objbuyer.Stcd = drbuyer["stateid"].ToString(); ;
                    objbuyer.Ph = drbuyer["phonenumber"].ToString();
                    objbuyer.Em = drbuyer["email"].ToString();

                    tostate = drbuyer["stateid"].ToString();
                    //tostate = "36";

                    foreach (DataRow drstate in dtstates.Select("sno='" + drbuyer["stateid"].ToString() + "'"))
                    {
                        tostate = drstate["gststatecode"].ToString(); ;
                        objbuyer.Pos = drstate["gststatecode"].ToString();
                        objbuyer.Stcd = drstate["gststatecode"].ToString();
                    }

                    Rootlst.BuyerDtls = objbuyer;

                    BuyerDtlslst.Add(objbuyer);

                    EInvoice.ShipDtls objship = new EInvoice.ShipDtls();

                    objship.Gstin = drbuyer["gstno"].ToString();
                    objship.LglNm = drbuyer["branchname"].ToString();
                    objship.TrdNm = drbuyer["branchname"].ToString();
                    objship.Addr1 = drbuyer["doorno"].ToString() + ";," + drbuyer["street"].ToString() + ";," + drbuyer["area"].ToString();
                    objship.Addr2 = drbuyer["doorno"].ToString() + ";," + drbuyer["street"].ToString() + ";," + drbuyer["area"].ToString();
                    objship.Loc = drbuyer["area"].ToString();
                    objship.Pin = Convert.ToInt32(drbuyer["pincode"].ToString());
                    //objship.Stcd = drbuyer["stateid"].ToString(); ;
                    foreach (DataRow drstate in dtstates.Select("sno='" + drbuyer["stateid"].ToString() + "'"))
                    {
                        objship.Stcd = drstate["gststatecode"].ToString(); ;
                    }
                    Rootlst.ShipDtls = objship;

                    //ShipDtlslst.ShipDtls=objship;
                }
                int i = 0;
                if (type == "invoice")
                {
                    double tot_amount = 0; double TPAmount = 0; double PAmount = 0; double total_cgst = 0; double total_sgst = 0; double total_igst = 0; double gtotalamout = 0;
                    foreach (DataRow dritem in Itemtable.Select("sno='" + AgentId + "'"))
                    {
                        EInvoice.ItemList objitems = new EInvoice.ItemList();
                        i++;
                        objitems.SlNo = i.ToString();
                        objitems.IsServc = "N";
                        objitems.PrdDesc = dritem["ProductName"].ToString();
                        objitems.HsnCd = dritem["hsncode"].ToString();
                        objitems.Barcde = dritem["Itemcode"].ToString();
                        float qty = 0;
                        float.TryParse(dritem["DeliveryQty"].ToString(), out qty);
                        float rate = 0;
                        float.TryParse(dritem["Unitcost"].ToString(), out rate);
                        objitems.Qty = Math.Round(qty, 2);
                        double sgstamount = 0;
                        double cgstamount = 0;
                        double Igst = 0;
                        double Igstamount = 0;
                        double totRate = 0;
                        double.TryParse(dritem["Igst"].ToString(), out Igst);
                        double Igstcon = 100 + Igst;
                        Igstamount = (rate / Igstcon) * Igst;
                        Igstamount = Math.Round(Igstamount, 2);
                        totRate = Igstamount;
                        double Vatrate = rate - totRate;
                        Vatrate = Math.Round(Vatrate, 2);
                        //newrow["Rate"] = Vatrate.ToString();
                        PAmount = qty * Vatrate;
                        //newrow["Taxable Value"] = Math.Round(PAmount, 2);
                        double tot_vatamount = (PAmount * Igst) / 100;
                        if (fromstate == tostate)
                        {
                            if (regtype == "Special Economic Zone")
                            {
                                tot_vatamount = Math.Round(tot_vatamount, 2);
                                objitems.SgstAmt = 0;
                                objitems.IgstAmt = tot_vatamount;
                                objitems.CgstAmt = 0;
                                total_igst += tot_vatamount;
                            }
                            else
                            {
                                sgstamount = (tot_vatamount / 2);
                                sgstamount = Math.Round(sgstamount, 2);
                                cgstamount = (tot_vatamount / 2);
                                cgstamount = Math.Round(cgstamount, 2);
                                //newrow["cgst"] = dr["cgst"].ToString();
                                // newrow["sgst"] = dr["sgst"].ToString();
                                objitems.SgstAmt = sgstamount;
                                objitems.IgstAmt = 0;
                                objitems.CgstAmt = cgstamount;
                                total_cgst += cgstamount;
                                total_sgst += sgstamount;
                            }
                        }
                        else
                        {
                            tot_vatamount = Math.Round(tot_vatamount, 2);
                            objitems.SgstAmt = 0;
                            objitems.IgstAmt = tot_vatamount;
                            objitems.CgstAmt = 0;
                            total_igst += tot_vatamount;
                        }
                        TPAmount += PAmount;
                        tot_amount = PAmount + tot_vatamount;
                        tot_amount = Math.Round(tot_amount, 2);
                        gtotalamout += tot_amount;

                        objitems.FreeQty = 0;
                        objitems.Unit = dritem["Units"].ToString();
                        objitems.UnitPrice = Vatrate;
                        objitems.TotAmt = Math.Round(PAmount, 2);
                        objitems.Discount = 0;
                        objitems.PreTaxVal = Math.Round(PAmount, 2);
                        objitems.AssAmt = Math.Round(PAmount, 2);
                        objitems.GstRt = Convert.ToInt32(Igst);

                        objitems.CesRt = 0;
                        objitems.CesAmt = 0.0;
                        objitems.CesNonAdvlAmt = 0;
                        objitems.StateCesRt = 0;
                        objitems.StateCesAmt = 0.0;
                        objitems.StateCesNonAdvlAmt = 0;
                        objitems.OthChrg = 0;
                        objitems.TotItemVal = tot_amount;
                        objitems.OrdLineRef = "Empty";
                        objitems.OrgCntry = "IN";
                        objitems.PrdSlNo = "1";
                        //EInvoice.AttribDtl objattr = new EInvoice.AttribDtl();
                        //objattr.Nm = "MILK";
                        //objattr.Val = "1";
                        //AttribDtllst.Add(objattr);
                        //objitems.AttribDtls = AttribDtllst;
                        ItemListlst.Add(objitems);
                        Rootlst.ItemList = ItemListlst;

                    }

                    EInvoice.ValDtls objval = new EInvoice.ValDtls();
                    objval.AssVal = Math.Round(TPAmount, 2);
                    objval.CgstVal = Math.Round(total_cgst, 2);
                    objval.SgstVal = Math.Round(total_sgst, 2);
                    objval.IgstVal = Math.Round(total_igst, 2);
                    objval.CesVal = 0;
                    objval.StCesVal = 0;
                    objval.Discount = 0;
                    objval.OthChrg = 0;
                    objval.RndOffAmt = 0;
                    objval.TotInvVal = Math.Round(gtotalamout, 2); ;
                    objval.TotInvValFc = 0;
                    Rootlst.ValDtls = objval;
                    ValDtlslst.Add(objval);
                }
                else
                {
                    double tot_amount = 0; double TPAmount = 0; double PAmount = 0; double total_cgst = 0; double total_sgst = 0; double total_igst = 0; double gtotalamout = 0;
                    foreach (DataRow dritem in dtIndent.Select("sno='" + AgentId + "'"))
                    {
                        EInvoice.ItemList objitems = new EInvoice.ItemList();
                        objitems.SlNo = i.ToString();
                        objitems.IsServc = "N";
                        objitems.PrdDesc = dritem["ProductName"].ToString();
                        objitems.HsnCd = dritem["hsncode"].ToString();
                        objitems.Barcde = dritem["Itemcode"].ToString();
                        float qty = 0;
                        float Price = 0;
                        float rate = 0;
                        float.TryParse(dritem["DeliveryQty"].ToString(), out qty);
                        float.TryParse(dritem["Price"].ToString(), out Price);
                        string UnitCost = dritem["Price"].ToString();
                        foreach (DataRow drprdt in dtbrnch_prdts.Select("sno='" + dritem["ProductId"].ToString() + "'"))
                        {
                            i++;

                            if (DispMode == "Free")
                            {
                                rate = 0;
                                float.TryParse(drprdt["unitprice"].ToString(), out rate);
                            }
                            else
                            {
                                float.TryParse(drprdt["unitprice"].ToString(), out rate);
                            }
                            if (DispMode == "AGENT")
                            {
                                String unitprice = drprdt["unitprice"].ToString();
                                if (unitprice == "0")
                                {
                                    unitprice = drprdt["BUnitPrice"].ToString();
                                }
                                float.TryParse(unitprice, out rate);
                            }
                            if (DispMode == "Others")
                            {
                                String unitprice = drprdt["unitprice"].ToString();
                                if (unitprice == "0")
                                {
                                    unitprice = drprdt["BUnitPrice"].ToString();
                                }
                                float.TryParse(unitprice, out rate);
                            }
                            if (UnitCost == "")
                            {
                            }
                            else
                            {
                                rate = Price;
                            }
                        }
                        objitems.Qty = Math.Round(qty, 2);
                        double sgstamount = 0;
                        double cgstamount = 0;
                        double Igst = 0;
                        double Igstamount = 0;
                        double totRate = 0;
                        double.TryParse(dritem["Igst"].ToString(), out Igst);
                        double Igstcon = 100 + Igst;
                        Igstamount = (rate / Igstcon) * Igst;
                        Igstamount = Math.Round(Igstamount, 2);
                        totRate = Igstamount;
                        double Vatrate = rate - totRate;
                        Vatrate = Math.Round(Vatrate, 2);
                        PAmount = qty * Vatrate;
                        double tot_vatamount = (PAmount * Igst) / 100;
                        if (fromstate == tostate)
                        {
                            if (regtype == "Special Economic Zone")
                            {
                                tot_vatamount = Math.Round(tot_vatamount, 2);
                                objitems.SgstAmt = 0;
                                objitems.IgstAmt = tot_vatamount;
                                objitems.CgstAmt = 0;
                                total_igst += tot_vatamount;
                            }
                            else
                            {
                                sgstamount = (tot_vatamount / 2);
                                sgstamount = Math.Round(sgstamount, 2);
                                cgstamount = (tot_vatamount / 2);
                                cgstamount = Math.Round(cgstamount, 2);
                                //newrow["cgst"] = dr["cgst"].ToString();
                                // newrow["sgst"] = dr["sgst"].ToString();
                                objitems.SgstAmt = sgstamount;
                                objitems.IgstAmt = 0;
                                objitems.CgstAmt = cgstamount;
                                total_cgst += cgstamount;
                                total_sgst += sgstamount;
                            }
                        }
                        else
                        {
                            tot_vatamount = Math.Round(tot_vatamount, 2);
                            objitems.SgstAmt = 0;
                            objitems.IgstAmt = tot_vatamount;
                            objitems.CgstAmt = 0;
                            total_igst += tot_vatamount;
                        }
                        TPAmount += PAmount;
                        tot_amount = PAmount + tot_vatamount;
                        tot_amount = Math.Round(tot_amount, 2);
                        gtotalamout += tot_amount;
                        objitems.FreeQty = 0;
                        objitems.Unit = dritem["Units"].ToString();
                        objitems.UnitPrice = Vatrate;
                        objitems.TotAmt = Math.Round(PAmount, 2);
                        objitems.Discount = 0;
                        objitems.PreTaxVal = Math.Round(PAmount, 2);
                        objitems.AssAmt = Math.Round(PAmount, 2);
                        objitems.GstRt = Convert.ToInt32(Igst);
                        objitems.CesRt = 0;
                        objitems.CesAmt = 0.0;
                        objitems.CesNonAdvlAmt = 0;
                        objitems.StateCesRt = 0;
                        objitems.StateCesAmt = 0.0;
                        objitems.StateCesNonAdvlAmt = 0;
                        objitems.OthChrg = 0;
                        objitems.TotItemVal = tot_amount;
                        objitems.OrdLineRef = "Empty";
                        objitems.OrgCntry = "IN";
                        objitems.PrdSlNo = "1";
                        ItemListlst.Add(objitems);
                        Rootlst.ItemList = ItemListlst;
                    }
                    EInvoice.ValDtls objval = new EInvoice.ValDtls();
                    objval.AssVal = Math.Round(TPAmount, 2);
                    objval.CgstVal = Math.Round(total_cgst, 2);
                    objval.SgstVal = Math.Round(total_sgst, 2);
                    objval.IgstVal = Math.Round(total_igst, 2);
                    objval.CesVal = 0;
                    objval.StCesVal = 0;
                    objval.Discount = 0;
                    objval.OthChrg = 0;
                    objval.RndOffAmt = 0;
                    objval.TotInvVal = Math.Round(gtotalamout, 2); ;
                    objval.TotInvValFc = 0;
                    Rootlst.ValDtls = objval;
                    ValDtlslst.Add(objval);
                }
                EInvoice.PayDtls objpay = new EInvoice.PayDtls();
                objpay.Nm = "Empty";
                objpay.Accdet = "Empty";
                objpay.Mode = "1";
                objpay.Fininsbr = "Empty";
                objpay.Payterm = "Empty";
                objpay.Payinstr = "Empty";
                objpay.Crtrn = "Empty";
                objpay.Dirdr = "Empty";
                objpay.Crday = 0;
                objpay.Paidamt = 0;
                objpay.Paymtdue = 0;

                Rootlst.PayDtls = objpay;
                PayDtlslst.Add(objpay);

                EInvoice.RefDtls objref = new EInvoice.RefDtls();
                objref.InvRm = "Empty";

                //Rootlst.RefDtls = objref;
                //RefDtlslst.Add(objref);

                EInvoice.DocPerdDtls objdocperdtls = new EInvoice.DocPerdDtls();
                objdocperdtls.InvStDt = fromdate.ToString("dd/MM/yyyy");
                objdocperdtls.InvEndDt = fromdate.AddDays(1).ToString("dd/MM/yyyy");
                objref.DocPerdDtls = objdocperdtls;
                EInvoice.PrecDocDtl objpredocdtls = new EInvoice.PrecDocDtl();
                objpredocdtls.InvNo = DcNo;
                objpredocdtls.InvDt = fromdate.ToString("dd/MM/yyyy");
                objpredocdtls.OthRefNo = "Empty";
                PrecDocDtllst.Add(objpredocdtls);
                objref.PrecDocDtls = PrecDocDtllst;



                EInvoice.ContrDtl objcondtls = new EInvoice.ContrDtl();
                objcondtls.RecAdvRefr = "Empty";
                objcondtls.RecAdvDt = fromdate.ToString("dd/MM/yyyy");
                objcondtls.Tendrefr = "Empty";
                objcondtls.Contrrefr = "Empty";
                objcondtls.Extrefr = "Empty";
                objcondtls.Projrefr = "Empty";
                objcondtls.Porefr = "Empty";
                objcondtls.PoRefDt = fromdate.ToString("dd/MM/yyyy");

                ContrDtllst.Add(objcondtls);
                objref.ContrDtls = ContrDtllst;
                Rootlst.RefDtls = objref;

                EInvoice.AddlDocDtl objadddocdtls = new EInvoice.AddlDocDtl();
                objadddocdtls.Url = "https://einv-apisandbox.nic.in";
                objadddocdtls.Docs = "Milk INvoice";
                objadddocdtls.Info = "Milk Invoice Details";
                AddlDocDtllst.Add(objadddocdtls);
                Rootlst.AddlDocDtls = AddlDocDtllst;
                EInvoice.ExpDtls objexpdtls = new EInvoice.ExpDtls();
                objexpdtls.ShipBNo = "Empty";
                objexpdtls.ShipBDt = fromdate.ToString("dd/MM/yyyy");
                objexpdtls.Port = "Empty";
                objexpdtls.RefClm = "1";
                objexpdtls.ForCur = "Empty";
                objexpdtls.CntCode = "IN";
                Rootlst.ExpDtls = objexpdtls;

                ExpDtlslst.Add(objexpdtls);

                //EInvoice.EwbDtls ewbDtls = new EInvoice.EwbDtls();
                //ewbDtls.Transid = "";
                //ewbDtls.Transname = "";
                //ewbDtls.Distance = 0;
                //ewbDtls.Transdocno = "";
                //ewbDtls.TransdocDt = "";
                //ewbDtls.Vehno = "";
                //ewbDtls.Vehtype = "";
                //ewbDtls.TransMode = "";
                //Rootlst.EwbDtls = ewbDtls;
                //EwbDtlslst.Add(ewbDtls);
            }
            #endregion

            var response = JsonConvert.SerializeObject(Rootlst);

            return response;
        }
        catch (Exception ex)
        {
            return ex.Message;
        }
    }
    public class Response_EInvoiceData
    {
        public string AckNo { get; set; }
        public string AckDt { get; set; }
        public string Irn { get; set; }
        public string SignedInvoice { get; set; }
        public string SignedQRCode { get; set; }
        public string Status { get; set; }
        public object EwbNo { get; set; }
        public object EwbDt { get; set; }
        public object EwbValidTill { get; set; }
        public object Remarks { get; set; }
    }

    public class Response_EInvoice
    {
        public Response_EInvoiceData data { get; set; }
        public string status_cd { get; set; }
        public string status_desc { get; set; }
    }
    private string generate_e_invoice_details(string token,string from_date, string SOID, string AgentID,string empsno, string type,string dcno,string jsonresponse)
    {
        //try
        //{
        EInvoice_Login Elogin = new EInvoice_Login(SOID);
        DateTime fromdate = Convert.ToDateTime(from_date);
        vdbmngr = new VehicleDBMgr();
        
        using (var httpClient = new HttpClient())
        {
            using (var request = new HttpRequestMessage(new HttpMethod("POST"), "https://api.mastergst.com/einvoice/type/GENERATE/version/V1_03?email=naveen.vdmtech%40gmail.com"))
            {
                string ip_address = GetLocalIPAddress();
                if (ip_address == "Error")
                    ip_address = "182.18.162.51:52144";
                request.Headers.TryAddWithoutValidation("Accept", "application/json");
                request.Headers.TryAddWithoutValidation("username", Elogin.username);
                //request.Headers.TryAddWithoutValidation("password", gst_pw);
                request.Headers.TryAddWithoutValidation("ip_address", ip_address);
                request.Headers.TryAddWithoutValidation("client_id", Elogin.client_id);
                request.Headers.TryAddWithoutValidation("client_secret", Elogin.client_secret);
                request.Headers.TryAddWithoutValidation("auth-token", token);
                request.Headers.TryAddWithoutValidation("gstin", Elogin.gstin);
                var js1 = new JavaScriptSerializer();
                EInvoice.Root obj1 = js1.Deserialize<EInvoice.Root>(jsonresponse);
                string TotalValue = obj1.ValDtls.TotInvVal.ToString();
                string refno = "";
                if (type == "invoice")
                {
                    refno = obj1.DocDtls.No;
                }
                else
                {
                    refno = dcno;
                }
                //string fromdate = obj1.DocDtls.Dt;
                //DateTime fromdate = Convert.ToDateTime(date);

                string stateid = obj1.SellerDtls.Stcd;
                //Body
                var httpContent = new StringContent(jsonresponse, Encoding.UTF8, "application/json");
                request.Content = httpContent;
                var response = httpClient.SendAsync(request).Result;
                var contents = response.Content.ReadAsStringAsync().Result;
                //var contents = "";
                var js = new JavaScriptSerializer();
                Response_EInvoice obj = js.Deserialize<Response_EInvoice>(contents);
                if (obj.status_desc == "GSTR request succeeds")
                {
                    string IRN_No = obj.data.Irn;
                    string ackno = obj.data.AckNo;
                    string SignedQRCode = obj.data.SignedQRCode;
                    string ackdate = obj.data.AckDt;
                    string SignedInvoice = obj.data.SignedInvoice;
                    DateTime ServerDateCurrentdate = VehicleDBMgr.GetTime(vdbmngr.conn);

                    cmd = new MySqlCommand("Insert Into e_invoice (agentid,e_invoiceno,invoice_amount,soid,stateid,ack_no,ack_date,invoicedate,signed_qr_code,signedinvoice,status,user_type,created_by,created_date,type,refno) Values(@BranchId,@e_invoiceno,@invoice_amount,@soid,@stateid,@ack_no,@ack_date,@invoicedate,@signed_qr_code,@signedinvoice,@status,@user_type,@created_by,@created_date,@type,@refno)");
                    cmd.Parameters.AddWithValue("@BranchId", AgentID);
                    cmd.Parameters.AddWithValue("@e_invoiceno", IRN_No);
                    cmd.Parameters.AddWithValue("@invoice_amount", TotalValue);
                    cmd.Parameters.AddWithValue("@soid", SOID);
                    cmd.Parameters.AddWithValue("@stateid", stateid);
                    cmd.Parameters.AddWithValue("@ack_no", ackno);
                    cmd.Parameters.AddWithValue("@ack_date", ackdate);
                    cmd.Parameters.AddWithValue("@invoicedate", GetLowDate(fromdate));
                    cmd.Parameters.AddWithValue("@signed_qr_code", SignedQRCode);
                    cmd.Parameters.AddWithValue("@signedinvoice", SignedInvoice);
                    cmd.Parameters.AddWithValue("@status", "R");
                    cmd.Parameters.AddWithValue("@user_type", "R");
                    cmd.Parameters.AddWithValue("@created_by", empsno);
                    cmd.Parameters.AddWithValue("@created_date", ServerDateCurrentdate);
                    cmd.Parameters.AddWithValue("@type", type);
                    cmd.Parameters.AddWithValue("@refno", refno);
                    vdbmngr.insert(cmd);
                }
                return contents;
            }
        }
        //}

    }
    //private void btn_Click_GetInvoice(HttpContext context)
    //{
    //    try
    //    {
    //        vdbmngr = new VehicleDBMgr();
    //        string AgentID = context.Request["AgentID"];
    //        string from_date = context.Request["FromDate"];
    //        string SOID = context.Request["SOID"];
    //        string IRN_No = context.Request["Irn_No"];
    //        DateTime fromdate = Convert.ToDateTime(from_date);
    //        EInvoice.Root Rootlst = new EInvoice.Root();
            
    //        string authToken = "";
    //        authenticate_response newobj =new authenticate_response();
    //        newobj = authenticate_e_invoice(SOID);

    //        //if (context.Session["Token"].ToString() == "")
    //        //{
    //            //newobj = authenticate_e_invoice(gstin, gst_un, gst_pw, client_id, Client_secret);
    //        //}
    //        //else
    //        //{
    //            //authToken = context.Session["Token"].ToString();
    //        //}
    //        string str1 = "";
    //        if (newobj.status_cd == "Sucess")
    //        {
    //            authToken = newobj.data.authtoken;
    //            str1 = get_e_envoice_details(authToken, IRN_No,SOID);
    //        }
    //        string res = GetJson(str1);
    //        context.Response.Write(res);
    //    }
    //    catch (Exception ex)
    //    {
    //        string response = GetJson(ex.ToString());
    //        context.Response.Write(response);
    //    }
    //}
    //private string get_e_envoice_details(string token, string IRN_No,string SOID)
    //{
    //    EInvoice_Login Elogin = new EInvoice_Login(SOID);
    //    using (var httpClient = new HttpClient())
    //    {
    //        // IRNNUMBER (IRN == Invoice Reference Number ) send dynamically 
    //        using (var request = new HttpRequestMessage(new HttpMethod("GET"), "https://api.mastergst.com/einvoice/type/GETIRN/version/V1_03?param1=" + IRN_No + "&email=naveen.vdmtech%40gmail.com"))
    //        {
    //            string ip_address = GetLocalIPAddress();
    //            if (ip_address == "Error")
    //                ip_address = "182.18.162.51:52144";
    //            request.Headers.TryAddWithoutValidation("Accept", "application/json");
    //            request.Headers.TryAddWithoutValidation("username", Elogin.username);
    //            request.Headers.TryAddWithoutValidation("ip_address", ip_address);
    //            request.Headers.TryAddWithoutValidation("client_id", Elogin.client_id);
    //            request.Headers.TryAddWithoutValidation("client_secret", Elogin.client_secret);
    //            request.Headers.TryAddWithoutValidation("auth-token", token);
    //            request.Headers.TryAddWithoutValidation("gstin", Elogin.gstin);

    //            var response = httpClient.SendAsync(request).Result;
    //            var contents = response.Content.ReadAsStringAsync().Result;
    //            return contents;
    //        }
    //    }
    //}
    private string cancel_invoice_reference_number(string token, string irnNumber)
    {


        using (var httpClient = new HttpClient())
        {
            using (var request = new HttpRequestMessage(new HttpMethod("POST"), "https://api.mastergst.com/einvoice/type/CANCEL/version/V1_03?email=naveen.vdmtech%40gmail.com"))
            {
                string ip_address = GetLocalIPAddress();
                if (ip_address == "Error")
                    ip_address = "182.18.162.51:52144";
                request.Headers.TryAddWithoutValidation("Accept", "application/json");
                //request.Headers.TryAddWithoutValidation("ip_address", ip_address);
                //request.Headers.TryAddWithoutValidation("client_id", Elogin.client_id);
                //request.Headers.TryAddWithoutValidation("client_secret", Elogin.client_secret);
                //request.Headers.TryAddWithoutValidation("auth-token", token);
                //request.Headers.TryAddWithoutValidation("gstin", Elogin.gstin);

                //BODY
                // request.Content = new StringContent("{"Irn": "+irnNumber+",  "CnlRsn": "1",  "CnlRem": "Wrong entry"}  ", Encoding.UTF8, "application/json");
                var response = httpClient.SendAsync(request).Result;
                var contents = response.Content.ReadAsStringAsync().Result;
                return contents;

                // Sample Response
                //{ "status_cd": "0", "status_desc": "User Name does not exists"}

            }
        }
    }
    public class ewaybill_data
    {
        public string ewbNo { get; set; }
        public string validUpto { get; set; }
        public string fromPlace { get; set; }
        public string fromStateCode { get; set; }
        public string fromPincode { get; set; }
        public string actualDist { get; set; }
        public string cEwbNo { get; set; }
        public string cEwbDate { get; set; }
        public string tripSheetNo { get; set; }
        public string userGstin { get; set; }
        public string transDocDate { get; set; }
        public string fromState { get; set; }
        public string vehicleNo { get; set; }
        public string enteredDate { get; set; }
    }
    public class EWayClass
    {
        public string Totalqty { get; set; }
        public string Totalvalue { get; set; }
        public string vehcleid { get; set; }
        public string sno { get; set; }
        public string status { get; set; }
        public string Agentid { get; set; }
        public string DocNumber { get; set; }
        public string DocName { get; set; }
        public string DocDate { get; set; }
        public string gstno { get; set; }
        public string AgentName { get; set; }
        public string InvoiceNo { get; set; }
        public string hdnInvoiceno { get; set; }
        public string status_cd { get; set; }
        public string status_desc { get; set; }
        public string GeneratedBy { get; set; }
        public string ewb_no { get; set; }
        public string ewb_date { get; set; }
        public string ewb_expiredate { get; set; }
        public string Irn { get; set; }
        public int Distance { get; set; }
        public string TransMode { get; set; }
        public string TransName { get; set; }
        public string TransDocDt { get; set; }
        public string TransDocNo { get; set; }
        public string VehNo { get; set; }
        public string VehType { get; set; }
        public string Type { get; set; }
        public string InvoiceStatus { get; set; }
        public string UserType { get; set; }
    }
    private void GetEWayDetails(HttpContext context)
    {
        try
        {

            vdbmngr = new VehicleDBMgr();
            string ToDate = context.Request["FromDate"];
            DateTime fromdate = Convert.ToDateTime(ToDate);
            DateTime ServerDateCurrentdate = VehicleDBMgr.GetTime(vdbmngr.conn);
            DateTime dtapril = new DateTime();
            DateTime dtmarch = new DateTime();
            int currentyear = ServerDateCurrentdate.Year;
            int nextyear = ServerDateCurrentdate.Year + 1;
            int currntyearnum = 0;
            int nextyearnum = 0;
            if (ServerDateCurrentdate.Month > 3)
            {
                string apr = "4/1/" + currentyear;
                dtapril = DateTime.Parse(apr);
                string march = "3/31/" + nextyear;
                dtmarch = DateTime.Parse(march);
                currntyearnum = currentyear;
                nextyearnum = nextyear;
            }
            if (ServerDateCurrentdate.Month <= 3)
            {
                if (ServerDateCurrentdate.Day == 31 && ServerDateCurrentdate.Month == 3)
                {
                    string apr = "3/31/" + currentyear;
                    dtapril = DateTime.Parse(apr);
                    string march = "3/31/" + nextyear;
                    dtmarch = DateTime.Parse(march);
                }
                else
                {
                    string apr = "4/1/" + (currentyear - 1);
                    dtapril = DateTime.Parse(apr);
                    string march = "3/31/" + (nextyear - 1);
                    dtmarch = DateTime.Parse(march);
                }
            }
            string  BranchID = context.Request["BranchID"];
            string ddltype = context.Request["ddltype"];
            DataTable dtble = new DataTable();
            List <EWayClass> Solist = new List<EWayClass>();
            if (ddltype == "R")
            {
                cmd = new MySqlCommand("SELECT  ROUND(SUM(indents_subtable.DeliveryQty)) AS DeliveryQty,ROUND(SUM(indents_subtable.DeliveryQty*indents_subtable.UnitCost)) AS TotalAmount,productsdata.SubCat_sno, indents_subtable.UnitCost, branchdata.BranchName, branchdata.sno, productsdata.sno AS prodsno, productsdata.ProductName,branchdata.gstno FROM modifiedroutes INNER JOIN modifiedroutesubtable ON modifiedroutes.Sno = modifiedroutesubtable.RefNo INNER JOIN branchdata ON modifiedroutesubtable.BranchID = branchdata.sno INNER JOIN (SELECT IndentNo, Branch_id, I_date FROM indents WHERE (I_date BETWEEN @starttime AND @endtime)) indent ON branchdata.sno = indent.Branch_id INNER JOIN indents_subtable ON indent.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE (modifiedroutes.BranchID = @BranchID) AND (modifiedroutesubtable.EDate IS NULL) AND (modifiedroutesubtable.CDate <= @starttime) and (branchdata.gstno <>'' and branchdata.gstno <>'0') and (productsdata.igst <>'' and productsdata.igst<>'0') OR (modifiedroutes.BranchID = @BranchID)  AND (modifiedroutesubtable.EDate > @starttime) AND (modifiedroutesubtable.CDate <= @starttime) and (branchdata.gstno <>'' and branchdata.gstno <>'0') and (productsdata.igst <>'' and productsdata.igst<>'0') GROUP BY  branchdata.sno ORDER BY branchdata.sno");
                cmd.Parameters.AddWithValue("@BranchID", BranchID);
                cmd.Parameters.AddWithValue("@starttime", GetLowDate(fromdate.AddDays(-1)));
                cmd.Parameters.AddWithValue("@endtime", GetHighDate(fromdate.AddDays(-1)));
                dtble = vdbmngr.SelectQuery(cmd).Tables[0];
            }
            else
            {
                cmd = new MySqlCommand("select * from (SELECT ROUND(SUM(indents_subtable.DeliveryQty)) AS DeliveryQty, ROUND(SUM(indents_subtable.DeliveryQty * indents_subtable.UnitCost)) AS TotalAmount, productsdata.SubCat_sno, indents_subtable.UnitCost, branchdata.BranchName, branchdata.sno, productsdata.sno AS prodsno, productsdata.ProductName,branchdata.gstno FROM modifiedroutes INNER JOIN modifiedroutesubtable ON modifiedroutes.Sno = modifiedroutesubtable.RefNo INNER JOIN branchdata ON modifiedroutesubtable.BranchID = branchdata.sno INNER JOIN(SELECT IndentNo, Branch_id, I_date FROM indents WHERE (I_date BETWEEN @starttime AND @endtime)) indent ON branchdata.sno = indent.Branch_id INNER JOIN indents_subtable ON indent.IndentNo = indents_subtable.IndentNo INNER JOIN productsdata ON indents_subtable.Product_sno = productsdata.sno WHERE(modifiedroutes.BranchID = @BranchID) AND(modifiedroutesubtable.EDate IS NULL) AND(modifiedroutesubtable.CDate <= @starttime) and(branchdata.gstno = '' or branchdata.gstno = '0') and (productsdata.igst <> '' and productsdata.igst <> '0')  OR (modifiedroutes.BranchID = @BranchID)  AND(modifiedroutesubtable.EDate > @starttime) AND(modifiedroutesubtable.CDate <= @starttime) and (branchdata.gstno = '' or branchdata.gstno = '0') and (productsdata.igst <> '' and productsdata.igst <> '0')  GROUP BY  branchdata.sno ORDER BY branchdata.sno) as t1 where t1.TotalAmount > '50000'");
                cmd.Parameters.AddWithValue("@BranchID", BranchID);
                cmd.Parameters.AddWithValue("@starttime", GetLowDate(fromdate.AddDays(-1)));
                cmd.Parameters.AddWithValue("@endtime", GetHighDate(fromdate.AddDays(-1)));
                dtble = vdbmngr.SelectQuery(cmd).Tables[0];
            }

            cmd = new MySqlCommand("select BranchCode from branchdata where sno=@sno");
            cmd.Parameters.AddWithValue("@sno", BranchID);
            DataTable dtbranch = vdbmngr.SelectQuery(cmd).Tables[0];

            //test query

            cmd = new MySqlCommand("select sno,irn_no,expiry_date,type,agentid,vehicleno,soid,distance,ewb_no,ewb_date,status,inddate from ewb_details  where soid=@soid and  inddate between @d1 and @d2");
            cmd.Parameters.AddWithValue("@soid", BranchID);
            cmd.Parameters.AddWithValue("@d1", GetLowDate(fromdate.AddDays(-1)));
            cmd.Parameters.AddWithValue("@d2", GetHighDate(fromdate.AddDays(-1)));
            DataTable dtewayagents = vdbmngr.SelectQuery(cmd).Tables[0];

            cmd = new MySqlCommand("select agentid,status,e_invoiceno,signed_qr_code,ack_no,ack_date from e_invoice where  soid=@soid and invoicedate between @d1 and @d2");
            cmd.Parameters.AddWithValue("@soid", BranchID);
            cmd.Parameters.AddWithValue("@d1", GetLowDate(fromdate).AddDays(-1));
            cmd.Parameters.AddWithValue("@d2", GetHighDate(fromdate).AddDays(-1));
            DataTable dtEinvble = vdbmngr.SelectQuery(cmd).Tables[0];

            foreach (DataRow dr in dtble.Rows)
            {
                EWayClass obj = new EWayClass();
                obj.DocNumber = "";

                obj.AgentName = dr["BranchName"].ToString();
                obj.Agentid = dr["sno"].ToString();
                obj.Totalqty = dr["DeliveryQty"].ToString();
                obj.Totalvalue = dr["TotalAmount"].ToString();
                obj.gstno = dr["gstno"].ToString();

                string DCNO = "0";
                string DcNo = "";
                cmd = new MySqlCommand("SELECT agentdcno FROM  agenttaxdc WHERE (BranchId = @BranchId) AND (IndDate BETWEEN @d1 AND @d2)");
                cmd.Parameters.AddWithValue("@BranchId", dr["sno"].ToString());
                cmd.Parameters.AddWithValue("@d1", GetLowDate(fromdate.AddDays(-1)));
                cmd.Parameters.AddWithValue("@d2", GetHighDate(fromdate.AddDays(-1)));
                DataTable dtDcnumber = vdbmngr.SelectQuery(cmd).Tables[0];
                string dcnumber = "";
                if (dtDcnumber.Rows.Count > 0)
                {
                    dcnumber = dtDcnumber.Rows[0]["agentdcno"].ToString();
                    DCNO = dcnumber.ToString();
                }
                DcNo = DCNO;
                int countdc = 0;
                int.TryParse(DcNo, out countdc);
                if (countdc <= 10)
                {
                    DCNO = "0000" + countdc;
                }
                if (countdc >= 10 && countdc <= 99)
                {
                    DCNO = "000" + countdc;
                }
                if (countdc >= 99 && countdc <= 999)
                {
                    DCNO = "00" + countdc;
                }
                if (countdc > 999 && countdc <= 9999)
                {
                    DCNO = "0" + countdc;
                }
                if (countdc > 9999)
                {
                    DCNO = "" + countdc;
                }

                if (fromdate.Month > 3)
                {
                    DcNo = dtbranch.Rows[0]["BranchCode"].ToString() + "/" + dtapril.ToString("yy") + "-" + dtmarch.ToString("yy") + "T/" + DCNO;
                }
                else
                {
                    if (fromdate.Month <= 3)
                    {
                        DcNo = dtbranch.Rows[0]["BranchCode"].ToString() + "/" + dtapril.ToString("yy") + "-" + dtmarch.ToString("yy") + "T/" + DCNO;
                    }
                    else
                    {
                        DcNo = dtbranch.Rows[0]["BranchCode"].ToString() + "/" + dtapril.AddYears(-1).ToString("yy") + "-" + dtmarch.AddYears(-1).ToString("yy") + "T/" + DCNO;
                    }
                }

                obj.InvoiceNo = DcNo;

                DataRow[] agentarr = dtewayagents.Select("agentid='" + dr["sno"].ToString() + "'");
                if (agentarr.Length != 0)
                {
                    foreach (DataRow dritem in dtewayagents.Select("agentid='" + dr["sno"].ToString() + "'"))
                    {
                        obj.Distance = Convert.ToInt32(dritem["distance"].ToString());
                        obj.VehNo = dritem["vehicleno"].ToString();
                        obj.sno = dritem["sno"].ToString();
                        obj.ewb_no = dritem["ewb_no"].ToString();
                        obj.status = dritem["status"].ToString();
                        obj.ewb_date = Convert.ToDateTime(dritem["ewb_date"].ToString()).ToString("dd/MM/yyyy");
                        //obj.ewb_expiredate = Convert.ToDateTime(dritem["ewb_date"].ToString()).ToString("dd/MM/yyyy"); ;
                        obj.ewb_expiredate = dritem["expiry_date"].ToString();
                        obj.UserType = dritem["type"].ToString();
                        obj.InvoiceNo = DcNo;
                        //obj.GeneratedBy = Elogin.gstin;

                        if (ddltype == "R")
                        { 
                            obj.Irn = dritem["irn_no"].ToString();
                        }
                    }
                }
                else
                {
                    obj.Distance = 0;
                    obj.VehNo = "";
                    obj.vehcleid = "";
                    obj.sno = "";
                    obj.ewb_no = "";
                    obj.ewb_date = "";
                    obj.ewb_expiredate = "";
                    obj.InvoiceNo = DcNo;
                    obj.DocDate = "";
                    obj.DocNumber = "";
                    obj.status = "";
                    //obj.Type = "";
                    DataRow[] invarr = dtEinvble.Select("agentid='" + dr["sno"].ToString() + "'");
                    if (invarr.Length != 0)
                    {
                        foreach (DataRow drinv in dtEinvble.Select("agentid='" + dr["sno"].ToString() + "'"))
                        {
                            obj.InvoiceStatus = drinv["status"].ToString();
                            obj.Irn = drinv["e_invoiceno"].ToString();
                        }
                    }
                    else
                    {
                        obj.Irn = "";
                        obj.InvoiceStatus = "";
                    }
                }
                Solist.Add(obj);
            }

            string errresponse = GetJson(Solist);
            context.Response.Write(errresponse);
        }
        catch (Exception ex)
        {
            string msg = ex.Message;
            string response = GetJson(msg);
            context.Response.Write(response);
        }
    }
    
    //public class Irn_EwayBill
    //{
    //    public string Irn { get; set; }
    //    public int Distance { get; set; }
    //    public string TransMode { get; set; }
    //    public string TransName { get; set; }
    //    public string TransDocDt { get; set; }
    //    public string TransDocNo { get; set; }
    //    public string VehNo { get; set; }
    //    public string VehType { get; set; }
    //}

    public class Response_EwayData
    {
        public long EwbNo { get; set; }
        public string EwbDt { get; set; }
        public string EwbValidTill { get; set; }
    }
    public class Response_Eway
    {
        public Response_EwayData data { get; set; }
        public string status_cd { get; set; }
        public string status_desc { get; set; }
    }
    private void generate_ewaybill_using_IRN(HttpContext context)
    {
        try
        {
            vdbmngr = new VehicleDBMgr();

            // For Testing Purpose , in future send customer GSTIN for generate e-invoice
            string AgentID = context.Request["agentid"];
            string from_date = context.Request["FromDate"];
            string SOID = context.Request["soid"];
            string Document_No = context.Request["invoiceno"];
            string Distance = context.Request["Distance"];
            string vehicleid = context.Request["vehicleid"];
            string vehcleno = context.Request["vehcleno"];
            string irn = context.Request["irn"];
            DateTime fromdate = Convert.ToDateTime(from_date);
            //string ewaybill_no = context.Request["ewaybill_no"].ToString();
            responce_data obj;
            List<EWayClass> EwayList = new List<EWayClass>();


            DateTime dtCdate = VehicleDBMgr.GetTime(vdbmngr.conn);
            DateTime dtapril = new DateTime();
            DateTime dtmarch = new DateTime();
            int currentyear = dtCdate.Year;
            int nextyear = dtCdate.Year + 1;
            if (dtCdate.Month > 3)
            {
                string apr = "4/1/" + currentyear;
                dtapril = DateTime.Parse(apr);
                string march = "3/31/" + nextyear;
                dtmarch = DateTime.Parse(march);
            }
            if (dtCdate.Month <= 3)
            {
                string apr = "4/1/" + (currentyear - 1);
                dtapril = DateTime.Parse(apr);
                string march = "3/31/" + (nextyear - 1);
                dtmarch = DateTime.Parse(march);
            }

            string DCNO = "0";
            string DcNo = "";
            cmd = new MySqlCommand("SELECT agentdcno FROM  agenttaxdc WHERE (BranchId = @BranchId) AND (IndDate BETWEEN @d1 AND @d2)");
            cmd.Parameters.AddWithValue("@BranchId", AgentID);
            cmd.Parameters.AddWithValue("@d1", GetLowDate(fromdate.AddDays(-1)));
            cmd.Parameters.AddWithValue("@d2", GetHighDate(fromdate.AddDays(-1)));
            DataTable dtDcnumber = vdbmngr.SelectQuery(cmd).Tables[0];
            string dcnumber = "";
            if (dtDcnumber.Rows.Count > 0)
            {
                dcnumber = dtDcnumber.Rows[0]["agentdcno"].ToString();
                DCNO = dcnumber.ToString();
            }
            DcNo = DCNO;
            int countdc = 0;
            int.TryParse(DcNo, out countdc);
            if (countdc <= 10)
            {
                DCNO = "0000" + countdc;
            }
            if (countdc >= 10 && countdc <= 99)
            {
                DCNO = "000" + countdc;
            }
            if (countdc >= 99 && countdc <= 999)
            {
                DCNO = "00" + countdc;
            }
            if (countdc > 999 && countdc <= 9999)
            {
                DCNO = "0" + countdc;
            }
            if (countdc > 9999)
            {
                DCNO = "" + countdc;
            }

            if (fromdate.Month > 3)
            {
                DcNo = "WYR/" + dtapril.ToString("yy") + "-" + dtmarch.ToString("yy") + "T/" + DCNO;
            }
            else
            {
                if (fromdate.Month <= 3)
                {
                    DcNo = "WYR/" + dtapril.ToString("yy") + "-" + dtmarch.ToString("yy") + "T/" + DCNO;
                }
                else
                {
                    DcNo = "WYR/" + dtapril.AddYears(-1).ToString("yy") + "-" + dtmarch.AddYears(-1).ToString("yy") + "T/" + DCNO;
                }
            }
            EWayClass  ewayobj = new EWayClass();


            ewayobj.Irn = irn;
            ewayobj.Distance = Convert.ToInt32(Distance);
            ewayobj.TransMode = "1";
            ewayobj.TransName = "VyshnaviFoods";
            ewayobj.TransDocDt = fromdate.ToString("dd/MM/yyyy");
            //ewayobj.TransDocNo = Document_No;
            ewayobj.TransDocNo = dcnumber;
            ewayobj.VehNo = vehcleno;
            ewayobj.VehType = "R";
            EwayList.Add(ewayobj);
            authenticate_response newobj = authenticate_e_invoice(SOID);
            var str1 = "";var str2 = "";
            if (newobj.status_cd == "Sucess")
            {
                var authToken = newobj.data.authtoken;
                context.Session["Token"] = authToken;
                string response = JsonConvert.SerializeObject(ewayobj);
                var jsonresponse = JsonConvert.DeserializeObject<EInvoice.Root>(response);
                str1 = generate_ewaybill_using_IRN(authToken, from_date, SOID, AgentID, response);

                var js = new JavaScriptSerializer();
                EWayClass obj1 = js.Deserialize<EWayClass>(str1);
                if (obj1.status_cd == "1")
                {
                    str1 = "eWaybill Raised successfully";
                }
                else
                {
                    str2 = str1;
                }
            }
            else
            {
                str2 = "Authentication Failed";
            }
            string res = GetJson(str2);
            context.Response.Write(res);
        }
        catch (Exception ex)
        {
            string response = GetJson(ex.ToString());
            context.Response.Write(response);
        }
    }
    private string generate_ewaybill_using_IRN(string authToken, string from_date, string SOID, string AgentID, string jsonresponse)
    {
        vdbmngr = new VehicleDBMgr();

        EInvoice_Login Elogin = new EInvoice_Login(SOID);

        DateTime fromdate = Convert.ToDateTime(from_date);

        using (var httpClient = new HttpClient())
        {
            using (var request = new HttpRequestMessage(new HttpMethod("POST"), "https://api.mastergst.com/einvoice/type/GENERATE_EWAYBILL/version/V1_03?email=naveen.vdmtech%40gmail.com"))
            {
                string ip_address = GetLocalIPAddress();
                if (ip_address == "Error")
                    ip_address = "182.18.162.51:52144";
                
                request.Headers.TryAddWithoutValidation("Accept", "application/json");
                request.Headers.TryAddWithoutValidation("username", Elogin.username);
                request.Headers.TryAddWithoutValidation("ip_address", ip_address);
                request.Headers.TryAddWithoutValidation("client_id", Elogin.client_id);
                request.Headers.TryAddWithoutValidation("client_secret", Elogin.client_secret);
                request.Headers.TryAddWithoutValidation("auth-token", authToken);
                request.Headers.TryAddWithoutValidation("gstin", Elogin.gstin);

                var httpContent = new StringContent(jsonresponse, Encoding.UTF8, "application/json");
                request.Content = httpContent;
                var response = httpClient.SendAsync(request).Result;
                var contents = response.Content.ReadAsStringAsync().Result;


                DateTime ServerDateCurrentdate = VehicleDBMgr.GetTime(vdbmngr.conn);

                var js = new JavaScriptSerializer();
                EWayClass obj = js.Deserialize<EWayClass>(jsonresponse);

                var js1 = new JavaScriptSerializer();
                Response_Eway obj1 = js1.Deserialize<Response_Eway>(contents);

                if (obj1.status_desc == "GSTR request succeeds")
                {
                    cmd = new MySqlCommand("insert into ewb_details (agentid,soid,inddate,ewb_no,distance,ewb_date,vehicleno,created_by,created_date,modify_by,modify_date,type,status,expiry_date,irn_no) values (@agentid,@soid,@inddate,@ewb_no,@distance,@ewb_date,@vehicleno,@created_by,@created_date,@modify_by,@modify_date,@type,@status,@expiry_date,@irn_no)");
                    cmd.Parameters.AddWithValue("@agentid", AgentID);
                    cmd.Parameters.AddWithValue("@soid", SOID);
                    cmd.Parameters.AddWithValue("@inddate", GetLowDate(fromdate.AddDays(-1)));
                    cmd.Parameters.AddWithValue("@ewb_no", obj1.data.EwbNo);
                    cmd.Parameters.AddWithValue("@distance", obj.Distance);
                    cmd.Parameters.AddWithValue("@ewb_date", obj1.data.EwbDt);
                    cmd.Parameters.AddWithValue("@vehicleno", obj.VehNo);
                    cmd.Parameters.AddWithValue("@created_by", "1");
                    cmd.Parameters.AddWithValue("@created_date", ServerDateCurrentdate);
                    cmd.Parameters.AddWithValue("@modify_by", "1");
                    cmd.Parameters.AddWithValue("@modify_date", ServerDateCurrentdate);
                    cmd.Parameters.AddWithValue("@type", "R");
                    cmd.Parameters.AddWithValue("@status", "R");
                    cmd.Parameters.AddWithValue("@expiry_date", obj1.data.EwbValidTill);
                    cmd.Parameters.AddWithValue("@irn_no", obj.Irn);
                    vdbmngr.insert(cmd);
                }
                return contents;
            }
        }
    }
    private string get_ewaybill_details_by_IRN(string gstin, string token, string irnNumber, string suppliergstin)
    {
        using (var httpClient = new HttpClient())
        {
            using (var request = new HttpRequestMessage(new HttpMethod("GET"), "https://api.mastergst.com/einvoice/type/GETEWAYBILLIRN/version/V1_03?param1==" + irnNumber + "&supplier_gstn=" + suppliergstin + "&email=naveen.vdmtech%40gmail.com"))
            {
                string ip_address = GetLocalIPAddress();
                if (ip_address == "Error")
                    ip_address = "182.18.162.51:52144";
                request.Headers.TryAddWithoutValidation("Accept", "application/json");
                request.Headers.TryAddWithoutValidation("ip_address", ip_address);
                //request.Headers.TryAddWithoutValidation("client_id", Elogin.client_id);
                //request.Headers.TryAddWithoutValidation("client_secret", Elogin.client_secret);
                request.Headers.TryAddWithoutValidation("auth-token", token);
                request.Headers.TryAddWithoutValidation("gstin", gstin);
                var response = httpClient.SendAsync(request).Result;
                var contents = response.Content.ReadAsStringAsync().Result;
                return contents;

                // Sample Response
                //{ "status_cd": "0", "status_desc": "User Name does not exists"}
            }
        }
    }
    #endregion
}
//}
